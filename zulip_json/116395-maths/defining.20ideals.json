[
    {
        "content": "<p>I've got a definition <code>valuation.supp v : ideal R</code> (and a proof that it is a prime ideal). There is also <code>Spv R</code> which is defined as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">Spv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">ineq</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Now I can define <code>Spv.supp ineq : ideal R</code> as having <code>carrier := {r | r ≤[v] 0}</code>. I would then like to conclude that this is an ideal (and even prime) by saying that this is the same carrier as that of <code>valuation.supp v</code> where <code>v</code> is any valuation that I can <code>choose</code> out of the <code>∃ (v : ....)</code> in the definition of <code>Spv</code>.</p>\n<p>I think we currently don't really have an interface for this, is that right? So the cheapest way is to just reprove the properties <code>zero</code>, <code>add</code>, and <code>smul</code>. Or is there something I missed?</p>",
        "id": 159049737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550737978
    },
    {
        "content": "<p>IIRC, the reason <code>Spv</code> looks like that is to build a quotient over something that's hard to quotient</p>",
        "id": 159049830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550738097
    },
    {
        "content": "<p>so it should have the lemmas of a quotient, in this case <code>quotient.ind</code></p>",
        "id": 159049848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550738120
    },
    {
        "content": "<p>Oh wait, you are defining a function <code>Spv -&gt; ideal R</code>. That's a quotient lift</p>",
        "id": 159050143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550738487
    },
    {
        "content": "<p>You lift the function <code>valuation.supp : valuation R -&gt; ideal R</code>, and prove that two valuations give the same ideal using <code>ideal.ext</code></p>",
        "id": 159050266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550738593
    },
    {
        "content": "<p>Yes, but I need <code>supp</code> before I can define the \"canonical\" <code>lift</code>.</p>",
        "id": 159050414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550738794
    },
    {
        "content": "<p>In general, I think it makes sense that there is some sort of buddy to <code>ideal.ext</code> that allows you to prove that a set is an ideal if it is the same as the carrier of an existing ideal.</p>",
        "id": 159050450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550738856
    },
    {
        "content": "<p>One way you can construct this ideal is by taking the intersection of all ideals for various choices of <code>v</code></p>",
        "id": 159050512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550738916
    },
    {
        "content": "<p>Or you can use <code>span</code></p>",
        "id": 159050520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550738928
    },
    {
        "content": "<blockquote>\n<p>prove that a set is an ideal if it is the same as the carrier of an existing ideal</p>\n</blockquote>\n<p>You don't \"prove that a set is an ideal\". You construct an ideal with the same carrier as the set. But if you do that, then you will notice that the new ideal is equal to the ideal you started with, so it was a pointless endeavor, unless you care about defeq</p>",
        "id": 159050631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550739052
    },
    {
        "content": "<p>Johan, my thoughts on this are that we need to make a completely new file <code>valuation_class.lean</code> containing the API for an equivalence class of valuations, and writing all of the definitions for quotients for this class, and I know how to do this. We should do all of this first before even thinking about <code>Spv</code>. I would do it but I'm travelling right now, I'm preaching the gospel in Portugal at an undergraduate computer science conference.</p>",
        "id": 159051326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550739880
    },
    {
        "content": "<p>But this new definition and its API are the next thing to do in the perfectoid project</p>",
        "id": 159051349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550739925
    },
    {
        "content": "<p>Look at <code>finset.lean</code>. This is a weird definition, at first glance. No user ever wants to prove anything about finsets by starting with the line <code>unfold finset</code> -- it would be a disaster. You just use all the definitions in the 1700 line API and never even think about how a finset is actually implemented internally. We have to do just the same thing with equivalence classes of valuations first before we can get anywhere. Our internal implementation is as an inequality but we have to make it so that the user never has to think about this or even know this. Then we'll be ready for Spv</p>",
        "id": 159051595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550740207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, I agree. I'm slowly moving towards that goal.</p>",
        "id": 159053778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550742747
    },
    {
        "content": "<p>So I think the answer to your question is that we need to write the analogues of quotient.lift and quotient.out etc etc and then use these general tools to define the functions you want. At least I think that's the answer</p>",
        "id": 159054002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743022
    },
    {
        "content": "<p>Ok, so one question: what is the definition of <code>valuation_class</code>? Is it an honest Lean quotient (with the disadvantage that it lives an a universe that is to big). And then afterwards, we build an equiv with <code>Spv</code> that lives in the right universe but is a fake quotient.</p>",
        "id": 159054099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550743125
    },
    {
        "content": "<p>Or do you have something else in mind?</p>",
        "id": 159054102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550743133
    },
    {
        "content": "<p>The definition is that it's an inequality coming from a valuation</p>",
        "id": 159054192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743232
    },
    {
        "content": "<p>But the point is that the user never finds that out</p>",
        "id": 159054200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743250
    },
    {
        "content": "<p>And by \"the user\" I mean \"the person writing Spv.lean\"</p>",
        "id": 159054220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743277
    },
    {
        "content": "<p>I'm talking about the definition of a valuation class</p>",
        "id": 159054254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743316
    },
    {
        "content": "<p><code>val_class</code> or wherever we want to call it</p>",
        "id": 159054304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743338
    },
    {
        "content": "<p>We don't use quotients at all</p>",
        "id": 159054322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743377
    },
    {
        "content": "<p>Ok, I'm confused. I know you are busy. But could you give me about 4 lines of Lean code.<br>\nThe definition of <code>val_class R</code>, and the definition of <code>Spv R</code>.</p>",
        "id": 159054341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550743394
    },
    {
        "content": "<p>But we write all the API for quotients ourselves</p>",
        "id": 159054351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743408
    },
    {
        "content": "<p>I'm on a phone</p>",
        "id": 159054359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743421
    },
    {
        "content": "<p>But I'll try</p>",
        "id": 159054368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743438
    },
    {
        "content": "<p>A term of type valclass R is a relation ineq plus a proof that there exists a valuation taking values in a group in the same universe as R such that blah</p>",
        "id": 159054518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743562
    },
    {
        "content": "<p>The mk function takes a valuation taking values in any universe and gives a term of type valclass</p>",
        "id": 159054557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743608
    },
    {
        "content": "<p>Sure</p>",
        "id": 159054560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550743618
    },
    {
        "content": "<p>Because we want the user to not know what's going on</p>",
        "id": 159054576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743635
    },
    {
        "content": "<p>And what is <code>Spv R</code>? (Because currently it has exactly the definition you just gave.)</p>",
        "id": 159054578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550743640
    },
    {
        "content": "<p>Oh so it is.</p>",
        "id": 159054692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743748
    },
    {
        "content": "<p>Bit it has more structure</p>",
        "id": 159054718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743778
    },
    {
        "content": "<p>It has a topology etc</p>",
        "id": 159054725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743792
    },
    {
        "content": "<p>So it might be a different thing</p>",
        "id": 159054777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743810
    },
    {
        "content": "<p>Yeah, but we can bolt on the topology afterwards... that's just a type class instance</p>",
        "id": 159054810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550743869
    },
    {
        "content": "<p>Is that the right way to think about it? I'm not sure</p>",
        "id": 159074659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550761672
    },
    {
        "content": "<p>I guess I was envisaging defining Spv R to be the type of equivalence classes of valuations on R, and putting the topology on Spv R. Maybe that's insane? I don't know. We have option X and with_zero X right?</p>",
        "id": 159075130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550762046
    },
    {
        "content": "<p>If you want to make Spv the inequalities (which is what we have now) then you will want to look at all the functions with prefix quot and make versions of them all in the Spv namespace. Then you'll have an answer to the ideal question</p>",
        "id": 159075381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550762228
    },
    {
        "content": "<p>But I was envisaging making them all part of the val_class namespace and then building Spv with its topology on top</p>",
        "id": 159075503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550762309
    }
]