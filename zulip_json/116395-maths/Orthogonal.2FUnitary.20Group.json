[
    {
        "content": "<p>I was looking at the undegrad to do list (<a href=\"https://leanprover-community.github.io/undergrad_todo.html\">https://leanprover-community.github.io/undergrad_todo.html</a>), and I saw that Orthogonal and Unitary groups were on there. Initally, I implemented the two separately, on <code>‚Ñù</code> and <code>‚ÑÇ</code>matrices respectively. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> suggested to generalise it to any <code>star_ring</code>, and with the <code>star_ring</code> instance, both could be implemented at once.</p>\n<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> also commented on the PR, saying \"I would have thought that the right way to define unitary/orthogonal groups is in analysis.normed_space.inner_product, after first defining the adjoint of a continuous linear map. Or at least, we need a plan for the \"glue\" between that and the matrix perspective.\"</p>\n<p>Therefore, I'm not sure whether we want to have the Orthogonal/Unitary group defined on matrices as in the PR right now, or if it would make sense to define adjoints of continuous linear maps first,  and then define the orthogonal/unitary group afterwards.</p>\n<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib/issues/5702\">#5702</a>, I haven't pushed the changes to using <code>star_ring</code> yet, but the file using <code>star_ring</code> is very similar to the <code>unitary_group.lean</code> file in the PR.</p>",
        "id": 222334289,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1610388314
    },
    {
        "content": "<p>As a beginning user of Lean, what I am going to say may be unfeasible.  However, it would be nice if the definition of unitary group could also be applied in the case in which the field of coefficients is finite.  With some sporadic exceptions, all finite simple groups are either cyclic, alternating or groups of Lie type (e.g. unitary groups).  It would be very nice if Lean could at least contain all but finitely many finite simple groups!</p>",
        "id": 222336146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610389154
    },
    {
        "content": "<p>I'm also very interested in getting unitaries into mathlib, and my thoughts on this are very close to what Heather said. I think the main roadblock right now is the lack of conjugate-linear maps: ideally we would want the adjoint to be a bundled conjugate-linear map, and then start defining unitaries based on this. For the actual definition, I was actually thinking of something a bit more general, namely defining continuous linear maps and equivalences that are also isometries, with notation <code>E ‚ÜíU[ùïú] F</code> and <code>E ‚âÉU[ùïú] F</code> or something like that.</p>",
        "id": 222336302,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610389209
    },
    {
        "content": "<p>Regarding conjugate-linear maps (and semilinear maps more generally), <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> was suggesting redefining <code>linear_map</code> a while back to be something like <code>linear_map œÉ M N</code> where <code>œÉ : R ‚Üí+* S</code> is some ring homomorphism. I played around a bit with this idea and it looks a lot less disruptive than I thought, but I haven't mustered the courage to actually try implementing it myself yet.</p>",
        "id": 222336719,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610389440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.2FUnitary.20Group/near/222336719\">said</a>:</p>\n<blockquote>\n<p>Regarding conjugate-linear maps (and semilinear maps more generally), <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> was suggesting redefining <code>linear_map</code> a while back to be something like <code>linear_map œÉ M N</code> where <code>œÉ : R ‚Üí+* S</code> is some ring homomorphism. I played around a bit with this idea and it looks a lot less disruptive than I thought, but I haven't mustered the courage to actually try implementing it myself yet.</p>\n</blockquote>\n<p>Yury has thought about this much more than I have, and I know he had thought of some potential roadblocks which I have forgotten.  One point:  one wants <code>linear_map</code> to be useable in the current form without having to specify <code>œÉ</code>, so maybe there's something like <code>to_additive</code> that can be written, to allow all theorems to be written for <code>generalized_linear_map œÉ M N</code> and automatically have a special case produced for <code>linear_map R M N</code>, with <code>œÉ : R ‚Üí+* R</code> the identity.</p>",
        "id": 222337116,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610389624
    },
    {
        "content": "<p>I have no idea whether we can find a framework that treats unitary groups over arbitrary fields (e.g. finite fields) coming from hermitian forms, and also treat continuous linear maps, and matrices, all in the same framework.</p>",
        "id": 222337168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610389656
    },
    {
        "content": "<p>If we can, that would be great! It's probably worth thinking about a bit.</p>",
        "id": 222337191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610389670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.2FUnitary.20Group/near/222336302\">said</a>:</p>\n<blockquote>\n<p>For the actual definition, I was actually thinking of something a bit more general, namely defining continuous linear maps and equivalences that are also isometries, with notation <code>E ‚ÜíU[ùïú] F</code> and <code>E ‚âÉU[ùïú] F</code> or something like that.</p>\n</blockquote>\n<p>It'd be nice also to have a constructor for elements of the unitary group, given a map satisfying just the condition that it fixes 0 and is an isometry.  This should come from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometric.to_affine_equiv\">docs#isometric.to_affine_equiv</a> (also written by Yury).</p>",
        "id": 222337467,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610389783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.2FUnitary.20Group/near/222337116\">said</a>:</p>\n<blockquote>\n<p>Yury has thought about this much more than I have, and I know he had thought of some potential roadblocks which I have forgotten.  One point:  one wants <code>linear_map</code> to be useable in the current form without having to specify <code>œÉ</code>, so maybe there's something like <code>to_additive</code> that can be written, to allow all theorems to be written for <code>generalized_linear_map œÉ M N</code> and automatically have a special case produced for <code>linear_map R M N</code>, with <code>œÉ : R \\to R</code> the identity.</p>\n</blockquote>\n<p>For making <code>linear_map</code> usable without specifying <code>œÉ</code>, it seems to be enough to just keep the current notation <code>E ‚Üí‚Çó[R] F</code> to mean <code>linear_map (ring_hom.id R) E F</code>. There are very few instances in mathlib where <code>linear_map</code> is used directly without notation.</p>",
        "id": 222337656,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610389868
    },
    {
        "content": "<p>But I think there are a lot of linear-algebra lemmas where one currently has to provide the scalar field as an explicit argument; won't the usage pattern have to change so that one provides <code>(id : R ‚Üí+* R)</code> as that explicit argument instead?  (which would get tedious)</p>",
        "id": 222337851,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610389960
    },
    {
        "content": "<p>Yeah, we would probably want two versions of those lemmas, one for the current version of <code>linear_map</code> and one that works for any <code>œÉ</code>.</p>",
        "id": 222338073,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610390064
    },
    {
        "content": "<p>And it would be great if the special-case version could be automatically generated from the general version, like in <code>to_additive</code>; don't know if that's possible.</p>",
        "id": 222338140,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610390099
    },
    {
        "content": "<p>Yes, Yury mentioned this last time. I have no idea how to do this, and I'm not sure if it's really worth it. At the very least we would have to come up with a very consistent naming scheme for this to have any hope of success.</p>",
        "id": 222338305,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610390173
    },
    {
        "content": "<p>Of course the other option is to just define <code>semilinear_map</code> in parallel to what we currently have, but this will be much less pleasant when (for example), we have a conjugate-linear map over an <code>is_R_or_C</code> field and want to use the fact that it's linear in the real case.</p>",
        "id": 222338584,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610390332
    },
    {
        "content": "<p>How would this <code>œÉ</code> transfer to <code>multilinear_map</code>?</p>",
        "id": 222339085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610390597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  was concerned about another issue, which I hope he will come and summarize because my description is going to get it wrong.  But it was about issues that come when you compose maps.</p>\n<p>The idea, I think: what if you have <code>conj : ‚ÑÇ ‚Üí+ ‚ÑÇ</code>, and linear maps <code>linear_map conj E F</code> and <code>linear_map conj F G</code>; you compose them and get a linear map <code>linear_map (conj ‚àò conj) E G</code>, but it's not automatic to identify this type with <code>linear_map id E G</code>.</p>",
        "id": 222339157,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610390640
    },
    {
        "content": "<p>We could have a composition lemma that is specialized for this case, no?</p>",
        "id": 222339317,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610390717
    },
    {
        "content": "<p>Well, the problems multiply when you start to talk about these Frobenius-linear maps that Johan and Kevin talk about, with a bigger automorphism group of R.</p>",
        "id": 222339482,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610390789
    },
    {
        "content": "<p>Above we said <code>œÉ : R ‚Üí+* S</code>, but for the conj case you say you want the weaker <code>R ‚Üí+ S</code>. Was one a typo?</p>",
        "id": 222339522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610390808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.2FUnitary.20Group/near/222339482\">said</a>:</p>\n<blockquote>\n<p>Well, the problems multiply when you start to talk about these Frobenius-linear maps that Johan and Kevin talk about, with a bigger automorphism group of R.</p>\n</blockquote>\n<p>Right, but it seems unavoidable, these maps really do have different composition properties.</p>",
        "id": 222339797,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610390913
    },
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is finite Galois of degree 2 then number theorists talk about unitary groups in this setting too.</p>",
        "id": 222339803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610390917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.2FUnitary.20Group/near/222339085\">said</a>:</p>\n<blockquote>\n<p>How would this <code>œÉ</code> transfer to <code>multilinear_map</code>?</p>\n</blockquote>\n<p>Good question! I haven't given this much thought to be honest. Would it really be worth having some sort of multilinear map with a different <code>œÉ</code> for each of the spaces?</p>",
        "id": 222340008,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610390986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.2FUnitary.20Group/near/222339522\">said</a>:</p>\n<blockquote>\n<p>Above we said <code>œÉ : R ‚Üí+* S</code>, but for the conj case you say you want the weaker <code>R ‚Üí+ S</code>. Was one a typo?</p>\n</blockquote>\n<p>I guess I was thinking of the commutative case.</p>",
        "id": 222340272,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610391077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.2FUnitary.20Group/near/222340008\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.2FUnitary.20Group/near/222339085\">said</a>:</p>\n<blockquote>\n<p>How would this <code>œÉ</code> transfer to <code>multilinear_map</code>?</p>\n</blockquote>\n<p>Good question! I haven't given this much thought to be honest. Would it really be worth having some sort of multilinear map with a different <code>œÉ</code> for each of the spaces?</p>\n</blockquote>\n<p>This is certainly necessary, and this linear algebra is well-developed.  See, as a starting point, <a href=\"https://en.wikipedia.org/wiki/Linear_complex_structure#Extension_to_related_vector_spaces\">https://en.wikipedia.org/wiki/Linear_complex_structure#Extension_to_related_vector_spaces</a><br>\nor section 1.2 of <a href=\"https://www.springer.com/gp/book/9783540212904\">https://www.springer.com/gp/book/9783540212904</a></p>",
        "id": 222366327,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610403625
    },
    {
        "content": "<p>Looks like we have our work cut out for us then!</p>",
        "id": 222367936,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1610404596
    }
]