[
    {
        "content": "<p>There is a class for ring homomorphisms: <a href=\"https://github.com/leanprover/mathlib/blob/7d1ab388bb097db5d631d11892e8f110e1f2e9cd/algebra/ring.lean#L60\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/7d1ab388bb097db5d631d11892e8f110e1f2e9cd/algebra/ring.lean#L60\">https://github.com/leanprover/mathlib/blob/7d1ab388bb097db5d631d11892e8f110e1f2e9cd/algebra/ring.lean#L60</a><br>\nBut there is no class for semiring homomorphisms. Does it make sense to change broaden this class into semiring homomorphisms?</p>",
        "id": 126249853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525757977
    },
    {
        "content": "<p>You need to preserve zero for a semiring homomorphism</p>",
        "id": 126249910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525758061
    },
    {
        "content": "<p>in fact, I guess it's just the same as a monoid homomorphism which is also an additive monoid homo</p>",
        "id": 126249917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525758090
    },
    {
        "content": "<p>Aah, yes. That is not automatic</p>",
        "id": 126250020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758296
    },
    {
        "content": "<p>Ok, so, shall I add a new class for semiring homs?</p>",
        "id": 126250030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758338
    },
    {
        "content": "<p>if you like</p>",
        "id": 126250073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525758369
    },
    {
        "content": "<p>What is a natural place for it? I am a bit surprised that the definition of a semiring is in core...</p>",
        "id": 126250095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758433
    },
    {
        "content": "<p>Otherwise it would be natural to add it after the definition of semiring</p>",
        "id": 126250098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758448
    },
    {
        "content": "<p>the mathlib file for ring-like stuff is <code>algebra/ring.lean</code></p>",
        "id": 126250099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525758473
    },
    {
        "content": "<p>Ok, I will find some place in that file</p>",
        "id": 126250139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758490
    },
    {
        "content": "<p>semiring is defined in core because nat is a semiring and that defines all the operations on nat</p>",
        "id": 126250142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525758510
    },
    {
        "content": "<p>I think this will change in lean 4 though</p>",
        "id": 126250145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525758526
    },
    {
        "content": "<p>Ok</p>",
        "id": 126250197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758628
    },
    {
        "content": "<p>Aah, and it seems like monoid_homs are also not yet there</p>",
        "id": 126250257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758753
    },
    {
        "content": "<p>Does this have anything to do with the \"algebraic hierarchy\" that I sometimes hear people talking about?</p>",
        "id": 126250694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525759701
    },
    {
        "content": "<p>At the moment there is a class for homomorphisms between two <code>group</code>s but if one (or both) of my groups are additive, there is no class for homomorphisms. Does this mean we need 4 classes to cover all the possibilities?</p>",
        "id": 126250713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525759775
    },
    {
        "content": "<p>let's just say that is a point of discussion</p>",
        "id": 126250760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525759816
    },
    {
        "content": "<p>One option is to use <code>multiplicative</code> to interpret an additive group as a multiplicative group</p>",
        "id": 126250763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525759846
    },
    {
        "content": "<p>We have not made any significant effort to have a full complement of morphisms between the various available structures in mathlib</p>",
        "id": 126250772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525759911
    },
    {
        "content": "<p>the ones that exist have basically been added ad-hoc as people needed them, and I'm fine with that</p>",
        "id": 126250811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525759933
    },
    {
        "content": "<p>Ok, I see</p>",
        "id": 126250812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525759948
    },
    {
        "content": "<p>Am I correct that parametricity could help here?</p>",
        "id": 126250820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525760023
    },
    {
        "content": "<p>Well, <code>transport_to_additive</code> can be seen as a special case of parametricity</p>",
        "id": 126250859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525760077
    },
    {
        "content": "<p>but there is also a lot of renaming to be done by the tactic</p>",
        "id": 126250863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525760097
    }
]