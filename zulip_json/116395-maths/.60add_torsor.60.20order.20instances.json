[
    {
        "content": "<p>I'm trying to define some new order instances on <code>P</code> when we have <code>add_torsor G P</code> for some group <code>G</code>. However, the following problem occurs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.add_torsor</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">add_torsor</span> <span class=\"n\">G</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">add_torsor.has_le</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">le_def</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- the `≤` inside `0 ≤ y -ᵥ x` is generated from `add_group_is_add_torsor`</span>\n  <span class=\"c1\">-- instead of the expected `ordered_add_comm_group.has_le`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and therefore, I cannot unwrap the definition of <code>≤</code> to prove anything. I can't even make progress in proving <code>le_def</code>.</p>",
        "id": 282423758,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652641408
    },
    {
        "content": "<p>Going into where <code>add_torsor</code>is defined, we see that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[nolint instance_priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">add_group_is_add_torsor</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_torsor</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">vsub</span> <span class=\"o\">:=</span> <span class=\"n\">has_sub.sub</span><span class=\"o\">,</span>\n  <span class=\"n\">vsub_vadd'</span> <span class=\"o\">:=</span> <span class=\"n\">sub_add_cancel</span><span class=\"o\">,</span>\n  <span class=\"n\">vadd_vsub'</span> <span class=\"o\">:=</span> <span class=\"n\">add_sub_cancel</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>so, I suspect the way this is defined is messing with the typeclass resolution somehow. What's the real problem going on here and what's the best way to fix this? Thanks for any input.</p>",
        "id": 282423924,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652641661
    },
    {
        "content": "<p>I don't see the problem here; does <code>iff.rfl</code> not work as a proof?</p>",
        "id": 282424067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652641861
    },
    {
        "content": "<p>No, unfortunately not. I've tried a lot of things but none of them seem to work. I'd love to be proven wrong though!</p>\n<p>I believe that the RHS has the incorrect <code>has_le</code> instance because of <code>add_group_is_add_torsor</code></p>",
        "id": 282424130,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652641943
    },
    {
        "content": "<p>This isn't a good instance because anything might be a torsor for some undetermined group</p>",
        "id": 282424209,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652642086
    },
    {
        "content": "<p>What's the proper way to fix this? Make <code>add_group_is_add_torsor</code> lower priority?</p>",
        "id": 282424370,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652642313
    },
    {
        "content": "<p>There's no way to fix this. That's the problem.</p>",
        "id": 282424462,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642442
    },
    {
        "content": "<p>It's just fundamentally not sensible in Lean. Instead you could make a class that asserts that a <code>has_le T</code> instance is propositionally equivalent to the one that would come from your definition.</p>",
        "id": 282424464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652642450
    },
    {
        "content": "<p>What are you trying to do? Do you have a reference?</p>",
        "id": 282424465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642451
    },
    {
        "content": "<p>An option is to not have it an instance but instead make it a <code>def</code> and give it locally.</p>",
        "id": 282424567,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642585
    },
    {
        "content": "<p>I just wanted to say something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">add_torsor.preorder</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"n\">add_torsor.linear_order</span><span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 282424583,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652642634
    },
    {
        "content": "<p>Yes, but do you <strong>need</strong> to?</p>",
        "id": 282424626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642650
    },
    {
        "content": "<p>The goal seems pretty self-explanatory to me</p>",
        "id": 282424656,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652642746
    },
    {
        "content": "<p>Another option is to define a type synonym.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[nolint unused_arguments]</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_ordered_torsor</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_ordered_torsor.has_le</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_torsor</span> <span class=\"n\">G</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">my_ordered_torsor</span> <span class=\"n\">G</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 282424703,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642778
    },
    {
        "content": "<p>Ah ok I see what you mean. The reason this is happening is because I'm trying to refactor the <code>convex</code> stuff to <code>affine_space</code>. There are some lemmas where we assume the space is ordered, so I need an order on the torsor now.</p>",
        "id": 282424710,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652642803
    },
    {
        "content": "<p>Well, can someone self-explain it to me? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 282424712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642806
    },
    {
        "content": "<p>Oh you should have told me earlier. This is a refactor I started eight months ago.</p>",
        "id": 282424732,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642847
    },
    {
        "content": "<p>Aha, <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 282424738,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652642866
    },
    {
        "content": "<p>Did you make much progess?</p>",
        "id": 282424791,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652642895
    },
    {
        "content": "<p>I don't see what ordering the torsor has to do with anything. The correct thing to do is to replace <code>affine_space</code> by <code>add_torsor</code> everywhere and define the real <code>affine_space</code>.</p>",
        "id": 282424795,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642901
    },
    {
        "content": "<p>I'm currently stuck on getting the definition of affine spaces right.</p>",
        "id": 282424803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652642919
    },
    {
        "content": "<p>Precisely, the problem is that our current definition of affine spaces require negation, but a few spaces we care about don't have one (measures are one of them, Yakov had an example coming from tropical geometry).</p>",
        "id": 282424886,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652643016
    },
    {
        "content": "<p><del>Huh, what's wrong with the current definition of affine spaces?</del> I was just replacing all the <code>[add_comm_monoid E] [module k E]</code> with <code>[add_comm_group V] [module k P] [affine_space V P]</code></p>",
        "id": 282424905,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652643051
    },
    {
        "content": "<p>Yeah well that's not a generalization.</p>",
        "id": 282424916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652643068
    },
    {
        "content": "<p>What is the generalization?</p>",
        "id": 282424930,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652643097
    },
    {
        "content": "<p>Actually, the reason for refactoring convex is because I want to do some geometry</p>",
        "id": 282425000,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652643179
    },
    {
        "content": "<p>The picture is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">vector</span> <span class=\"n\">space</span> <span class=\"bp\">→</span> <span class=\"n\">add</span> <span class=\"n\">torsor</span>\n   <span class=\"bp\">↓</span>                <span class=\"bp\">↓</span>\n<span class=\"n\">module</span>       <span class=\"bp\">→</span> <span class=\"n\">affine</span> <span class=\"n\">space</span>\n</code></pre></div>\n<p>and you're jumping through the diagonal.</p>",
        "id": 282425008,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652643189
    },
    {
        "content": "<p>Great! I had better things to do than refactoring something nobody was gonna use. Now that someone actually needs it (aka you), I can get back to it. Incidentally I decided to revive <a href=\"https://github.com/leanprover-community/mathlib/pull/9268\">#9268</a> this morning.</p>",
        "id": 282425070,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652643255
    },
    {
        "content": "<p>Oh I see, so <code>affine_space</code> is slightly too strong right now.</p>",
        "id": 282425077,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652643270
    },
    {
        "content": "<p>Yep, exactly. Right now, we are missing the bottom right of the square.</p>",
        "id": 282425085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652643288
    },
    {
        "content": "<p>For the order instances, wouldn't we still want those after the refactor?</p>",
        "id": 282425263,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652643503
    },
    {
        "content": "<p>Those are meaningless. The scalars don't live in your vector space so it makes no sense to use the order coming from it.</p>",
        "id": 282425301,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652643578
    },
    {
        "content": "<p>Reid, the full picture is that you have <code>𝕜</code> the scalars, <code>V</code> the vectors, <code>P</code> the points. Hanting's instances turn an order on <code>V</code> into an order on <code>P</code>. But the order isn't on <code>V</code>, it's on <code>𝕜</code>.</p>",
        "id": 282425481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652643824
    },
    {
        "content": "<p>Ok maybe I still don't understand what you mean <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 282425535,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652643874
    },
    {
        "content": "<p>What you multiply the vectors by in the definition of convexity are scalars, not vectors. And the scalars are the ones you want to be ordered.</p>",
        "id": 282425577,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652643951
    },
    {
        "content": "<p>For example in <code>ℝ^n</code> what your definition is doing is saying that for convexity you consider the vectors in <code>[0, 1]^n</code> and... well I don't know what you do with those because a priori you can't multiply them to other vectors to give vectors.</p>",
        "id": 282425654,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652644059
    },
    {
        "content": "<p>In general there are ordered abelian groups and torsors over them and it is reasonable to equip such a torsor with its induced ordering from the group.</p>",
        "id": 282425916,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652644411
    },
    {
        "content": "<p>I don't see where <code>[0, 1]^n</code> is coming from in my definition, which looks like this right now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">affine</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">V</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">convex</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">affine_map.line_map</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">''</span> <span class=\"n\">set.Ioo</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">affine_map.line_map</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">''</span> <span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">convex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convex</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">convex.Icc</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>(And if I understand correctly, <code>add_comm_group V</code> should be <code>add_comm_monoid V</code> after your refactor.)</p>",
        "id": 282425969,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652644470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/.60add_torsor.60.20order.20instances/near/282425916\">said</a>:</p>\n<blockquote>\n<p>In general there are ordered abelian groups and torsors over them and it is reasonable to equip such a torsor with its induced ordering from the group.</p>\n</blockquote>\n<p>This was my thinking too</p>",
        "id": 282425987,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652644501
    },
    {
        "content": "<p>Yeah well I don't see where you need an order on <code>P</code> in the above</p>",
        "id": 282426893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652645716
    },
    {
        "content": "<p>For a lemma like this, if we translate it to the <code>affine_space</code> version, then wouldn't we need an order on <code>P</code> to say <code>set.Iic r</code> where now <code>r : P</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_smul</span> <span class=\"bp\">𝕜</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">convex_Iic</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">set.Iic</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 282426985,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652645861
    },
    {
        "content": "<p>Sure, but then you aren't deriving the order on <code>P</code>, you are using the one it already has.</p>",
        "id": 282427129,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652646031
    },
    {
        "content": "<p>I don't see what you mean, afiak there is no order on <code>P</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">Pβ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">β</span> <span class=\"n\">Pβ</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">convex_Iic</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Pβ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">set.Iic</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If I write this right now, lean complains that it cannot synthesize an instance of <code>preorder Pβ</code></p>",
        "id": 282427252,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652646236
    },
    {
        "content": "<p>Yeah, so you should add <code>[preorder Pβ]</code> to your hypotheses.</p>",
        "id": 282427313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652646318
    },
    {
        "content": "<p>Ohhhhhhhhhhhh</p>",
        "id": 282427320,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652646335
    },
    {
        "content": "<p>But then the preorder on <code>Pβ</code> would not agree on the one with <code>β</code>? I would expect that the order is naturally derived from <code>β</code></p>",
        "id": 282427386,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652646453
    },
    {
        "content": "<p>Yeah, so you should a class saying that the order on <code>Pβ</code> is compatible with the one on <code>β</code>.</p>",
        "id": 282427438,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652646487
    },
    {
        "content": "<p>This is what <code>ordered_smul</code> does between <code>𝕜</code> and <code>β</code> in the current <code>convex_Iic</code>.</p>",
        "id": 282427448,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652646514
    },
    {
        "content": "<p>Ahhhh ok, lol that took a while</p>",
        "id": 282427480,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652646601
    },
    {
        "content": "<p>We could decide to always derive the order on a torsor from the order on its vectors, but this is a design decision that's orthogonal to what you're doing now.</p>",
        "id": 282427526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652646613
    },
    {
        "content": "<p>What kind of geometry problems are you thinking of doing? You surely don't already have applications which need such high generality?</p>",
        "id": 282427552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652646682
    },
    {
        "content": "<p>Yeah no, I don't really need all this, I was just thinking of defining things in Euclidean geometry for Olympiads, like triangle congruences and area api, along with more api for everything</p>",
        "id": 282427689,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652646853
    },
    {
        "content": "<p>It's just the inevitable mathlib refactoring hole you go down trying to make things properly work</p>",
        "id": 282427707,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652646891
    },
    {
        "content": "<p>Been there, done that <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 282427722,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652646910
    },
    {
        "content": "<p>Welcome to my hole</p>",
        "id": 282427723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652646915
    },
    {
        "content": "<p>But this hole is quite interesting too! Maybe I will not worry about this convexity stuff so much then, but I'm might come back in the future in case you haven't already</p>",
        "id": 282427800,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652647033
    },
    {
        "content": "<p>Yeah I've been thinking about this lots on and off this past half year, so I'm probably more due to the refactor suffering than you are <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 282427875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652647129
    }
]