[
    {
        "content": "<p>Is stuff like this considered useful for mathlib? In other words, should I PR this? <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">is_group_hom</span> <span class=\"n\">quotient_group</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G₁</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G₂</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span> <span class=\"bp\">→</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">φ</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inc</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">ker</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G₂</span> <span class=\"o\">:=</span>\n<span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"n\">φ</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_ker</span> <span class=\"n\">φ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inc_mk</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">lift_mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inc_mk&#39;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">lift_mk&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group</span><span class=\"bp\">.</span><span class=\"n\">is_group_hom_quotient_lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inc_injective</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">$</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"err\">$</span>\n<span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">ker</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_ker</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_self</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">N₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normal_subgroup</span> <span class=\"n\">N₁</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">N₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normal_subgroup</span> <span class=\"n\">N₂</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">map_is_group_hom</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">N₁</span> <span class=\"err\">⊆</span> <span class=\"n\">φ</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">N₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">φ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group</span><span class=\"bp\">.</span><span class=\"n\">is_group_hom_quotient_lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159408532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551170944
    },
    {
        "content": "<p>looks good to me</p>",
        "id": 159408700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171138
    },
    {
        "content": "<p>why is it called <code>inc</code>?</p>",
        "id": 159408717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551171174
    },
    {
        "content": "<blockquote>\n<p>why is it called <code>inc</code>?</p>\n</blockquote>\n<p>for \"inclusion\"</p>",
        "id": 159408822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551171273
    },
    {
        "content": "<p>this doesn't look like an inclusion to me</p>",
        "id": 159408845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171312
    },
    {
        "content": "<p>to me inclusion = subtype.val</p>",
        "id": 159408853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171323
    },
    {
        "content": "<p>and this is a quotient not a subtype</p>",
        "id": 159408858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171334
    },
    {
        "content": "<p>I would just call it <code>lift_ker</code> or something</p>",
        "id": 159408914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171373
    },
    {
        "content": "<p>Ok, so how should this called?<br>\n(It's a canonical injective map... I'm used to calling those <em>inclusion</em>...)</p>",
        "id": 159408915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551171373
    },
    {
        "content": "<p>actually <code>ker_lift</code> is better</p>",
        "id": 159408924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171399
    },
    {
        "content": "<p><code>lift_ker</code> would be a theorem about the kernel of <code>lift</code></p>",
        "id": 159408935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171418
    },
    {
        "content": "<p>Ok, I will prepare a PR</p>",
        "id": 159408974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551171466
    },
    {
        "content": "<p>I have this vague memory that this stuff is already there...</p>",
        "id": 159409124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551171618
    },
    {
        "content": "<p>line 82 of group_theory/quotient_group.lean maybe</p>",
        "id": 159409155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551171697
    },
    {
        "content": "<p>injectivity is line 127</p>",
        "id": 159409225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551171730
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/71a7e1c497336b2eeae75cc8a54bb4ada32ca0f7/src/group_theory/quotient_group.lean#L127\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/71a7e1c497336b2eeae75cc8a54bb4ada32ca0f7/src/group_theory/quotient_group.lean#L127\">https://github.com/leanprover-community/mathlib/blob/71a7e1c497336b2eeae75cc8a54bb4ada32ca0f7/src/group_theory/quotient_group.lean#L127</a> and surrounding stuff</p>",
        "id": 159409265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551171782
    },
    {
        "content": "<p>Aah, good catch. So maybe it doesn't even deserve its own name...</p>",
        "id": 159409582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551172133
    },
    {
        "content": "<p>I wouldn't trust the naming conventions of the people who wrote that file ;-)</p>",
        "id": 159409862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551172461
    },
    {
        "content": "<p>In fact IIRC I just took <code>quotient_module.lean</code> and ported it to groups, initially, and <code>quotient_module.lean</code> was written by Johannes...wait...where did _quotient_module.lean go? I was going to say \"you should look there\".</p>",
        "id": 159409954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551172581
    },
    {
        "content": "<p>From <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories/relations.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories/relations.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/theories/relations.md</a> : \"A nice mathematical example can be found in linear_algebra/quotient_module\". Hmm...</p>",
        "id": 159410094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551172727
    },
    {
        "content": "<p>How do I do \"go back to Sept 2018\" in git/github?</p>",
        "id": 159410195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551172809
    },
    {
        "content": "<p>[to find the definition I was talking about so I can search for it to find out where it went]</p>",
        "id": 159410201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551172827
    },
    {
        "content": "<p>Oh cool, I can switch to the commit when relations.md was added</p>",
        "id": 159410291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551172965
    },
    {
        "content": "<blockquote>\n<p>I wouldn't trust the naming conventions of the people who wrote that file ;-)</p>\n</blockquote>\n<p>Are we talking about people who use \"lifs\" to mean \"descends\"?</p>",
        "id": 159410411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551173141
    },
    {
        "content": "<p>I don't remember if we already asked: if this <code>lift</code> crazyness a standard for all proof assistants, or is it only in Lean?</p>",
        "id": 159410464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551173190
    },
    {
        "content": "<p>I don't know any other system that uses this particular terminology, but it also makes sense to me</p>",
        "id": 159410583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173374
    },
    {
        "content": "<p>It's called descent in mathematics</p>",
        "id": 159410588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173392
    },
    {
        "content": "<p><code>lift</code> means construct a function via the universal property</p>",
        "id": 159410590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173395
    },
    {
        "content": "<p>It's an entire subject area</p>",
        "id": 159410592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173398
    },
    {
        "content": "<p>descent means construct a function on a quotient from a function on the top which is symmetric</p>",
        "id": 159410664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173432
    },
    {
        "content": "<p>I think this is actually called lift in many contexts, although I wouldn't be surprised if for quotients the terminology is different</p>",
        "id": 159410667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173434
    },
    {
        "content": "<p>humans are inconsistent like that</p>",
        "id": 159410675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173444
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/22032/what-is-descent-theory\" target=\"_blank\" title=\"https://mathoverflow.net/questions/22032/what-is-descent-theory\">https://mathoverflow.net/questions/22032/what-is-descent-theory</a></p>",
        "id": 159410693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173468
    },
    {
        "content": "<p>I guess mathematicians expect <code>lift</code> for the universal property of a <em>limit</em>, and <code>desc</code> for the universal property of a <em>colimit</em>. Exactly the way we have it currently in <code>category_theory/*</code></p>",
        "id": 159410710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551173495
    },
    {
        "content": "<p>Kevin, your link is too specialized, we are talking about the very elementary notion of function induced on quotients</p>",
        "id": 159410721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551173520
    },
    {
        "content": "<p>If that's how this works I would have preferred <code>colift</code></p>",
        "id": 159410766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173538
    },
    {
        "content": "<p>My link is super-general -- we have a morphism Y -&gt; X in a category and we want some \"object defined on Y\" (e.g. a function or predicate) to descend to an \"object defined on X\".</p>",
        "id": 159410795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173598
    },
    {
        "content": "<p>That sounds like <code>map</code> to me</p>",
        "id": 159410805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173619
    },
    {
        "content": "<p>that's lift in this world, isn't it?</p>",
        "id": 159410813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173634
    },
    {
        "content": "<p>We draw this like so:</p>\n<div class=\"codehilite\"><pre><span></span>Y\n|\nv\nX\n</pre></div>\n\n\n<p>and hence stuff <em>descends</em> from <code>Y</code> to <code>X</code>.</p>",
        "id": 159410855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551173644
    },
    {
        "content": "<p>What makes this mathlib terminology  really confusing is that we also use <code>lift</code> in math, especially to denote the opposite operation. If a function is defined on a quotient, we can try to lift it to the object before quotienting</p>",
        "id": 159410858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551173648
    },
    {
        "content": "<p>Descent theory gives you conditions on the structure defined on Y to descend to an structure defined on X</p>",
        "id": 159410884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173683
    },
    {
        "content": "<p><code>map</code> and <code>lift</code> aren't the same in this world</p>",
        "id": 159410901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173701
    },
    {
        "content": "<p>Johan is right -- mathematicians draw the quotient map as a downwards arrow typically.</p>",
        "id": 159410917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173718
    },
    {
        "content": "<p>and all the terminology is led by that picture</p>",
        "id": 159410929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173732
    },
    {
        "content": "<p>roughly speaking <code>map : (X -&gt; Y) -&gt; F X -&gt; F Y</code> and <code>lift : (X -&gt; Y) -&gt; F X -&gt; Y</code></p>",
        "id": 159410934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173734
    },
    {
        "content": "<p>Mario I think you have the wrong X and Y</p>",
        "id": 159410941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173751
    },
    {
        "content": "<p>Y  = X / ~</p>",
        "id": 159410952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173761
    },
    {
        "content": "<p>Johan is right, this terminology is tied to the way we draw diagrams. For instance, if we have a covering map Y -&gt; X, and a map from Z to X, lifting this map to Y means finding an arrow from lower left to upper right in:</p>\n<div class=\"codehilite\"><pre><span></span>     Y\n     |\n     V\nZ -&gt; X\n</pre></div>",
        "id": 159410993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551173766
    },
    {
        "content": "<p><code>lift : (X -&gt; Z) -&gt; (Y -&gt; Z)</code></p>",
        "id": 159411008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173794
    },
    {
        "content": "<p>so we descend the map X -&gt; Z to a map Y -&gt; Z</p>",
        "id": 159411011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173805
    },
    {
        "content": "<p>In my example <code>F</code> is <code>quotient</code></p>",
        "id": 159411016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173815
    },
    {
        "content": "<p>I'm not saying it's a functor or anything</p>",
        "id": 159411033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173831
    },
    {
        "content": "<p>that's just the general shape of the definition</p>",
        "id": 159411040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173851
    },
    {
        "content": "<p>If \"lift\" is not some standard CS terminology then it's hard for us to see why you're using it when it is in direct contradiction with the standard maths terminology</p>",
        "id": 159411043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173855
    },
    {
        "content": "<p>It's standard lean terminology</p>",
        "id": 159411051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173871
    },
    {
        "content": "<p>I know, and this is unfortunate.</p>",
        "id": 159411056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173880
    },
    {
        "content": "<p>That's what I'm saying.</p>",
        "id": 159411100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173886
    },
    {
        "content": "<p>In this sentence, Lean means Mario, right?</p>",
        "id": 159411102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551173890
    },
    {
        "content": "<p>quotient.lift is in core</p>",
        "id": 159411110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173900
    },
    {
        "content": "<p>No, <code>quot.lift</code> predates me significantly</p>",
        "id": 159411113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173905
    },
    {
        "content": "<p>I have no idea what the standard math terminology is but I like to have a standard and stick to it, and this works as good as any</p>",
        "id": 159411142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173959
    },
    {
        "content": "<p>I think the math terminology for this is inconsistent</p>",
        "id": 159411151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173973
    },
    {
        "content": "<p>based on what you've all said</p>",
        "id": 159411162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551173991
    },
    {
        "content": "<p>How can \"always call it descent\" be inconsistent?</p>",
        "id": 159411166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551173994
    },
    {
        "content": "<p>because it's not always called descent</p>",
        "id": 159411218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174006
    },
    {
        "content": "<p>I don't see how this \"works as good as any\": it confuses every mathematician and is not especially illuminating to computer scientists</p>",
        "id": 159411223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551174010
    },
    {
        "content": "<p>It's not map, you've misunderstood what I'm saying</p>",
        "id": 159411225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174013
    },
    {
        "content": "<p>what we call descent is what you call quot.lift.</p>",
        "id": 159411236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174026
    },
    {
        "content": "<p>I get that</p>",
        "id": 159411241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174032
    },
    {
        "content": "<p>and we were first and there are far more of us</p>",
        "id": 159411252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174033
    },
    {
        "content": "<p>so it's unfortunate</p>",
        "id": 159411263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174047
    },
    {
        "content": "<p>but you can lift more things than just quotients. What about limits and pullbacks and products?</p>",
        "id": 159411271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174059
    },
    {
        "content": "<p>and co stuff</p>",
        "id": 159411286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174068
    },
    {
        "content": "<p>I am not clear what you mean</p>",
        "id": 159411304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174092
    },
    {
        "content": "<p>Is there limit.lift?</p>",
        "id": 159411311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174095
    },
    {
        "content": "<p>I am specifically talking about quotients.</p>",
        "id": 159411318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174106
    },
    {
        "content": "<p>I'm not, that's my point</p>",
        "id": 159411326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174116
    },
    {
        "content": "<p>What is an example of usage of lift outside the quotient setting?</p>",
        "id": 159411365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174124
    },
    {
        "content": "<p>I want a standard terminology <em>across</em> domains</p>",
        "id": 159411368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174127
    },
    {
        "content": "<p>So what is an example of usage of lift outside the quotient setting?</p>",
        "id": 159411378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174144
    },
    {
        "content": "<p>the map into a limit?</p>",
        "id": 159411397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174162
    },
    {
        "content": "<p>We have maps from A to X_i and we deduce a map from A to X, the limit of the X_i?</p>",
        "id": 159411416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174186
    },
    {
        "content": "<p>Is this called lift in Lean?</p>",
        "id": 159411426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174194
    },
    {
        "content": "<p>That's called \"universal property\" in maths</p>",
        "id": 159411439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174220
    },
    {
        "content": "<p>I don't recall lift being used for this notion in Lean. My issue is specifically with the naming of quotient.lift.</p>",
        "id": 159411504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174247
    },
    {
        "content": "<p>From <code>padic</code> stuff:</p>\n<blockquote>\n<ul>\n<li>Fix <code>p</code> and <code>[prime p]</code>. <code>padic_rationals.lean</code> defines <code>ℚ_[p]</code> as the Cauchy completion of<br>\n<code>ℚ</code> wrt <code>padic_norm p</code> using the same mechanisms as <code>data/real/basic.lean</code>. It is immediately a<br>\n  field. The norm <strong>lifts</strong> to <code>padic_norm_e : ℚ_[p] → ℚ</code>, which is cast to <code>ℝ</code> and gives us a<br>\n<code>normed_field</code> instance. <code>ℚ_[p]</code> is shown to be Cauchy complete.</li>\n</ul>\n</blockquote>\n<p>Lifts here is used to mean \"extend to this free construction\"</p>",
        "id": 159411509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174252
    },
    {
        "content": "<p>which I am arguing should be callde quotient.descent</p>",
        "id": 159411512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174257
    },
    {
        "content": "<p>Mario, I would really argue for have a distinction between the limit/colimit terminology. So maps into a limit are called <code>lift</code>, we wont complain.<br>\nThe whole difference is whether you are mapping <em>into</em> or <em>out of</em> something.</p>",
        "id": 159411555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551174321
    },
    {
        "content": "<p>I suspect that p-adic stuff was written by a computer scientist :-)</p>",
        "id": 159411559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174332
    },
    {
        "content": "<p><code>lift</code> means you map into something.<br>\n<code>desc</code> or <code>colift</code> means you map out of something.</p>",
        "id": 159411563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551174344
    },
    {
        "content": "<p>That norm <em>extends</em> to padic_norm_e</p>",
        "id": 159411565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174347
    },
    {
        "content": "<p>And even if you would say that the \"norm <em>descends</em> to <code>padic_norm_e</code>\" then it would be less confusing to mathematicians</p>",
        "id": 159411632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551174421
    },
    {
        "content": "<p><code>lift</code> is used in a few places to mean something more like map, i.e. <code>ulift</code> and <code>plift</code>, <code>preorder.lift</code>, etc</p>",
        "id": 159411638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174424
    },
    {
        "content": "<p>So we should rename those (-;</p>",
        "id": 159411647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551174441
    },
    {
        "content": "<p><code>limit</code> does actually have a field called <code>lift</code></p>",
        "id": 159411649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174442
    },
    {
        "content": "<p>And <code>colimit</code> has a field called <code>desc</code></p>",
        "id": 159411653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551174456
    },
    {
        "content": "<p>(I'm just looking at current uses in lean right now)</p>",
        "id": 159411654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174456
    },
    {
        "content": "<p>Are you just looking through the entire source code for lifts to justify your position? :-)</p>",
        "id": 159411655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174457
    },
    {
        "content": "<p>Then if that's all you can come up with, I think your argument is very weak.</p>",
        "id": 159411707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174484
    },
    {
        "content": "<p>I want to find out if it is actually being used in a consistent way</p>",
        "id": 159411711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> We are very happy with <code>limit.lift</code>. The point is that <code>quotient.lift</code> goes in the opposite direction.</p>",
        "id": 159411712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551174501
    },
    {
        "content": "<p>Universe lifting always sounded sensible to me.</p>",
        "id": 159411715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174521
    },
    {
        "content": "<p>I always imagine the bigger universe as sitting over the smaller one</p>",
        "id": 159411726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174532
    },
    {
        "content": "<p>Sure</p>",
        "id": 159411727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551174539
    },
    {
        "content": "<p>I agree, I'm not advocating any changes there</p>",
        "id": 159411733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174544
    },
    {
        "content": "<p>but it's an interesting thing to note how terminology can clash</p>",
        "id": 159411748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174559
    },
    {
        "content": "<p>so you're advocating inconsistent usage of lift?</p>",
        "id": 159411749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174565
    },
    {
        "content": "<p>as opposed to a sensible renaming of quotient.lift?</p>",
        "id": 159411750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174572
    },
    {
        "content": "<p><code>quot.lift</code> isn't just in core; it's literally baked into lean</p>",
        "id": 159411757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174595
    },
    {
        "content": "<p>mathlib can still define an alias, right?</p>",
        "id": 159411807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551174617
    },
    {
        "content": "<p>And when the great time of Lean 4 comes, we'll ask very politely.</p>",
        "id": 159411814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551174637
    },
    {
        "content": "<p>Actually you'd best fix it before lean 4</p>",
        "id": 159411823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174656
    },
    {
        "content": "<p>Unfortunately the real world is calling me. But at this point I did not yet see a coherent argument for the quot.lift name. Mario -- would Jeremy have an opinion on this issue?</p>",
        "id": 159411836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174675
    },
    {
        "content": "<p>you can fix it now, when lean 4 comes around it will get un-fixed</p>",
        "id": 159411837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174677
    },
    {
        "content": "<p>Not if Leo takes our side</p>",
        "id": 159411841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174685
    },
    {
        "content": "<p>I had always assumed that lift was a CS standard</p>",
        "id": 159411848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174701
    },
    {
        "content": "<p>I don't know what Jeremy's position is on this</p>",
        "id": 159411851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174707
    },
    {
        "content": "<p>but now I discover that it's not I think there's a case for arguing for a change.</p>",
        "id": 159411854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551174713
    },
    {
        "content": "<p>I just came here and learned the language</p>",
        "id": 159411898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174726
    },
    {
        "content": "<p>but I do think that we should strive for consistency regardless</p>",
        "id": 159411908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174757
    },
    {
        "content": "<p>Yes, let's consistently use \"descends\" instead of \"lifts\"</p>",
        "id": 159411928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551174785
    },
    {
        "content": "<p>again, across domains consistency</p>",
        "id": 159411935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174809
    },
    {
        "content": "<p>I keep staring at the pictures in <a href=\"https://en.wikipedia.org/wiki/Limit_(category_theory)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Limit_(category_theory)\">https://en.wikipedia.org/wiki/Limit_(category_theory)</a> to see the geometric intuition, but all the arrows go down</p>",
        "id": 159412030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174915
    },
    {
        "content": "<p>in both diagrams</p>",
        "id": 159412035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551174922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Take the limit diagram: <a href=\"https://upload.wikimedia.org/wikipedia/commons/8/81/Functor_cone_%28extended%29.svg\" target=\"_blank\" title=\"https://upload.wikimedia.org/wikipedia/commons/8/81/Functor_cone_%28extended%29.svg\">https://upload.wikimedia.org/wikipedia/commons/8/81/Functor_cone_%28extended%29.svg</a><br>\nTo define the map from <code>N</code> to <code>L</code> you have to <code>lift</code> elements from <code>F(X)</code> upwards to <code>L</code>.</p>\n<p>Take the colimit diagram: <a href=\"https://upload.wikimedia.org/wikipedia/commons/5/5a/Functor_co-cone_%28extended%29.svg\" target=\"_blank\" title=\"https://upload.wikimedia.org/wikipedia/commons/5/5a/Functor_co-cone_%28extended%29.svg\">https://upload.wikimedia.org/wikipedia/commons/5/5a/Functor_co-cone_%28extended%29.svg</a><br>\nTo define the map from <code>L</code> to <code>N</code> you have to <code>descend</code> elements from <code>F(X)</code> downwards to <code>L</code>.</p>",
        "id": 159412223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551175197
    },
    {
        "content": "<p>Like I said, it is really a matter of whether you are mapping into, or out of something.</p>",
        "id": 159412282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551175214
    },
    {
        "content": "<p>But you are making a function from L, so elements of L have to lift(?) to elements of F(X) to be mapped</p>",
        "id": 159412360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551175311
    },
    {
        "content": "<p>Do you agree that it is useful to call cokernels what they are? Or would you rather call them kernels? Similar for (co)product, and generally for (co)limit?</p>",
        "id": 159412561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551175480
    },
    {
        "content": "<p>Anyway, most of this is just history... for ages we have called limity things <code>lift</code> and colimity things <code>desc</code>, so it is confusing for us to see the two names being merged. They are dual things in our heads.</p>",
        "id": 159412612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551175548
    },
    {
        "content": "<p>And not only in our heads, also in Lean.</p>",
        "id": 159412661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551175567
    },
    {
        "content": "<p>Its just that the Lean-terminology doesn't reflect this duality.</p>",
        "id": 159412675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551175584
    },
    {
        "content": "<p>I think having a different name for product and coproduct is important because they both exist and are different</p>",
        "id": 159412681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551175587
    },
    {
        "content": "<p>I'm reading all that while typing explanation for my students about how Lean means <code>⊊</code> when it writes <code>⊂</code>, and means <code>⊂</code> when it writes <code>⊆</code>. Sometimes life is difficult...</p>",
        "id": 159412702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551175617
    },
    {
        "content": "<p>but I would be okay with <code>product.universal_thing</code> and <code>coproduct.universal_thing</code> rather than <code>coproduct.couniversal_cothing</code></p>",
        "id": 159412716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551175626
    },
    {
        "content": "<p>eww, you're one of those people? Nonstrict <code>⊂</code> should die</p>",
        "id": 159412797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551175688
    },
    {
        "content": "<p>I never saw <code>⊂</code> meaning strict inclusion before using Lean</p>",
        "id": 159412815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551175724
    },
    {
        "content": "<p>And it took me a while to realize what was Lean's problem, especially when VScode happily uses <code>\\subset</code> to trigger ⊂</p>",
        "id": 159412841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551175770
    },
    {
        "content": "<p>I grant that this is a dumb choice of abbreviation</p>",
        "id": 159412909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551175808
    },
    {
        "content": "<p>Hmm if <code>limit.lift</code> were called <code>limit.ump</code> (for universal mapping property) and <code>colimit.desc</code> were called <code>colimit.ump</code>, I don't think I would complain, and I would also not find it confusing.<br>\nSimilarly <code>quot.ump</code> or <code>quotient.ump</code> doesn't cause me any cognitive dissonance. It's way way better than <code>quot.lift</code>.</p>",
        "id": 159412950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551175898
    },
    {
        "content": "<p>Is this an international issue? Do you actually use ⊆ everywhere in the US?</p>",
        "id": 159412994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551175924
    },
    {
        "content": "<p>Johan, how do you denote set inclusion in the Netherlands and in Germany?</p>",
        "id": 159413003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551175945
    },
    {
        "content": "<p>Most neutral sources will just use <code>⊊</code> and <code>⊆</code>, but among choices for the meaning of <code>⊂</code> one is obviously better</p>",
        "id": 159413005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551175947
    },
    {
        "content": "<p>I think there is some historical tendency for <code>⊂</code> as nonstrict, but like I said I'm happy to let it pass</p>",
        "id": 159413036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551176002
    },
    {
        "content": "<p>Hehe, we're also nonstrict <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 159413044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551176024
    },
    {
        "content": "<p>I think <code>⊆</code> is more common than <code>⊂</code> around here to denote nonstrict subset, probably because people recognize the ambiguity and don't want to engage, which is fine</p>",
        "id": 159413133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551176106
    },
    {
        "content": "<p>Do you actually write ⊆ on blackboards?</p>",
        "id": 159413206,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551176190
    },
    {
        "content": "<p>I certainly do</p>",
        "id": 159413217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551176213
    },
    {
        "content": "<p>Do you write a line under the <code>&lt;=</code> symbol?</p>",
        "id": 159413233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551176238
    },
    {
        "content": "<p>Why would I do that?</p>",
        "id": 159413474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551176530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think Mario means that you wouldn't allow yourself to write <code>1 &lt; 1</code>, but you do allow <code>X \\subset X</code>.</p>",
        "id": 159413492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551176589
    },
    {
        "content": "<p>You want your students to write <code>1 ≤ 1</code>.</p>",
        "id": 159413497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551176603
    },
    {
        "content": "<p>Oh I see! I thought this <code>&lt;=</code> was ascii art for an implication from right to left</p>",
        "id": 159413506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551176641
    },
    {
        "content": "<p>In France we use <code>⩽</code> instead of the ugly <code>≤</code></p>",
        "id": 159413617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551176762
    },
    {
        "content": "<p>I'm arriving a little bit too late, but I just want to add that to me also <code>quot.lift</code> is crazy, and if there's a possibility ot change it I will support it very strongly.</p>",
        "id": 159414106,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551177331
    },
    {
        "content": "<p>In geometry, if <code>tilde M</code> is the universal cover of <code>M</code>, then a function <code>M -&gt; R</code> lifts to a function <code>tildeM -&gt; R</code> (by composing by the canonical projection), and a function <code>tilde M -&gt; R</code> which is constant on fibers descends to a function <code>M -&gt; R</code>. This corresponds to the picture that <code>tildeM</code> sits above <code>M</code>.</p>",
        "id": 159414204,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551177447
    },
    {
        "content": "<p>wait, that sounds the opposite of johan's description</p>",
        "id": 159414285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177532
    },
    {
        "content": "<p>I thought <code>(X -&gt; Y) -&gt; F X -&gt; Y </code>is supposed to be called descent</p>",
        "id": 159414312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177559
    },
    {
        "content": "<p>no it's not</p>",
        "id": 159414326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551177580
    },
    {
        "content": "<p>gah!</p>",
        "id": 159414330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177588
    },
    {
        "content": "<p>It depends on <code>F</code>.</p>",
        "id": 159414335,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551177599
    },
    {
        "content": "<p>and it's the same example that I gave (when I fighted for 2 minutes before getting the ascii art right)</p>",
        "id": 159414350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551177602
    },
    {
        "content": "<p>double gah</p>",
        "id": 159414380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177606
    },
    {
        "content": "<p>Let me find my ascii art again</p>",
        "id": 159414397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551177650
    },
    {
        "content": "<p>If <code>F X</code> is bigger than <code>X</code>, then its sits above <code>X</code> and you are lifting things. If it is smaller (a quotient, say), it sits below <code>X</code> and you have descends.</p>",
        "id": 159414405,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551177659
    },
    {
        "content": "<p>Sorry, my example was not exactly the same, but it's consistent</p>\n<div class=\"codehilite\"><pre><span></span>\\tilde M\n  |\n  V\n  M -&gt; R\n</pre></div>",
        "id": 159414446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551177722
    },
    {
        "content": "<blockquote>\n<p>I'm reading all that while typing explanation for my students about how Lean means <code>⊊</code> when it writes <code>⊂</code>, and means <code>⊂</code> when it writes <code>⊆</code>. Sometimes life is difficult...</p>\n</blockquote>\n<p>This is country-dependent I think, like how in the UK nat has no zero. In my papers I never write nat or <code>⊂</code> as I have plenty of evidence that mathematicians use them in more than one way so I regard them as overloaded and hence dangerous. I use <code>⊊</code> and <code>⊆</code> only.</p>",
        "id": 159417346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181094
    },
    {
        "content": "<blockquote>\n<p>I keep staring at the pictures in <a href=\"https://en.wikipedia.org/wiki/Limit_(category_theory)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Limit_(category_theory)\">https://en.wikipedia.org/wiki/Limit_(category_theory)</a> to see the geometric intuition, but all the arrows go down</p>\n</blockquote>\n<p>As a general rule, bigger things go on top. But when you write the diagram representing the universal property, you just put the non-universal object in the place where the diagram becomes easiest to draw.</p>",
        "id": 159417379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181178
    },
    {
        "content": "<blockquote>\n<p>I never saw <code>⊂</code> meaning strict inclusion before using Lean</p>\n</blockquote>\n<p>But you saw <code>&lt;</code> meaning strict inequality, right? In Jantzen's book on algebraic groups he uses <code>⊂</code> to mean strict inclusion, and in John Thompson's group theory lectures I attended as an undergraduate he also used this convention. Maybe it's a US thing?</p>",
        "id": 159417473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181267
    },
    {
        "content": "<blockquote>\n<p>In geometry, if <code>tilde M</code> is the universal <strong>cover</strong> of <code>M</code>...</p>\n</blockquote>\n<p>You see -- this notion of the big object lying above the smaller object is ubiquitous throughout maths. This is exactly why it's jarring for mathematicians to \"lift\" a predicate on the top to a predicate on the bottom.</p>",
        "id": 159417581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181386
    },
    {
        "content": "<p>[sorry, I was just catching up]</p>",
        "id": 159417586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181398
    },
    {
        "content": "<p>Okay, so if I have a big object <code>Y</code> over a small object <code>X</code>, do we say that a map <code>X -&gt; Z</code> lifts to <code>Y -&gt; Z</code>? What about lifting <code>Z -&gt; X</code> to <code>Z -&gt; Y</code>?</p>",
        "id": 159417703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181531
    },
    {
        "content": "<p>If I am teaching Galois theory and I have the field extension Q(sqrt(2)) : Q, I write the Q(sqrt(2)) on top and the map goes upwards. If I am doing scheme theory and I have Spec(Q(sqrt(2)) / Spec(Q) then I write Spec(Q(sqrt(2)) on the top and the map goes downwards. I would pronounce both \":\" and \"/\" as \"over\", meaning that the object on the left is over the object on the right, even though they correspond to different kind of maps. The \"over / cover / descent / lift\" terminology is ubiquitous and is all designed to represent the fact that the bigger object is on top of the smaller one.</p>",
        "id": 159417763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181575
    },
    {
        "content": "<blockquote>\n<p>Okay, so if I have a big object <code>Y</code> over a small object <code>X</code>, do we say that a map <code>X -&gt; Z</code> lifts to <code>Y -&gt; Z</code>?</p>\n</blockquote>\n<p>I think I would say that X -&gt; Z <em>induces</em> a map Y -&gt; Z here.</p>",
        "id": 159417773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181617
    },
    {
        "content": "<p>The mathematical notation is consistent with the general convention that bigger things go on top.</p>",
        "id": 159417793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181649
    },
    {
        "content": "<p>The concept of \"lift\" in maths is covering several distinct concepts in type theory here.</p>",
        "id": 159417802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181672
    },
    {
        "content": "<p>So we cannot use \"lift\" for all of them. But our point is that you guys have chosen to use lift for something we would <em>never</em> use \"lift\" for.</p>",
        "id": 159417851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181698
    },
    {
        "content": "<p>Check out \"lifting property\" here: <a href=\"https://en.wikipedia.org/wiki/Projective_module\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Projective_module\">https://en.wikipedia.org/wiki/Projective_module</a> . We have a surjection N -&gt; M so mathematicians instinctively write N above M because N is bigger. We then lift a map P -&gt; M to P -&gt; N.</p>",
        "id": 159417960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551181805
    },
    {
        "content": "<blockquote>\n<p>Okay, so if I have a big object <code>Y</code> over a small object <code>X</code>, do we say that a map <code>X -&gt; Z</code> lifts to <code>Y -&gt; Z</code>? What about lifting <code>Z -&gt; X</code> to <code>Z -&gt; Y</code>?</p>\n</blockquote>\n<p>The map <code>Y → Z</code> is just composition, so we don't call it a lift... it's too cheap.<br>\nBut going from <code>Z → X</code> to <code>Z → Y</code> is exactly what lifting is. And you need to work to make it happen.</p>",
        "id": 159418374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551182261
    },
    {
        "content": "<p>No, assume that the map goes in whatever direction makes this lifty thing not composition</p>",
        "id": 159418440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182306
    },
    {
        "content": "<p>You have <code>Y</code> over <code>X</code>, so typically <code>Y → X</code>, and then <code>X → Z</code> will give you a map <code>Y → Z</code> by composition.</p>",
        "id": 159418486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551182392
    },
    {
        "content": "<p>But if you get <code>Z → X</code>, then you could ask for a lift <code>Z → Y</code>. And this is typically a non-trivial condition/fact.</p>",
        "id": 159418564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551182430
    },
    {
        "content": "<p>you might have <code>Y</code> being the free object over <code>X</code></p>",
        "id": 159418678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182551
    },
    {
        "content": "<p>If the big thing Y is on top of the small thing X but there's an injection X -&gt; Y, then one could ask if a map X -&gt; Z extends to a map Y -&gt; Z</p>",
        "id": 159418702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551182600
    },
    {
        "content": "<p>I guess one could argue that this is also lifting a map.</p>",
        "id": 159418713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551182637
    },
    {
        "content": "<p>The term is used vaguely in mathematics I suspect.</p>",
        "id": 159418760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551182654
    },
    {
        "content": "<p>Descent theory is an actual thing though</p>",
        "id": 159418767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551182664
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Descent_(mathematics)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Descent_(mathematics)\">https://en.wikipedia.org/wiki/Descent_(mathematics)</a></p>\n<p>Right at the top -- \"we think of Y as 'above' X\"</p>",
        "id": 159418812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551182707
    },
    {
        "content": "<p>Of course it says that, \"descent\" is in the name so they have to motivate the picture</p>",
        "id": 159418828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182742
    },
    {
        "content": "<p>Yes, and when we want to PR this stuff some decade in the future...</p>",
        "id": 159418882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551182768
    },
    {
        "content": "<p>We will get a comment \"please change this to <code>lift</code>-theory\"</p>",
        "id": 159418892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551182781
    },
    {
        "content": "<p>it will be called descent of course</p>",
        "id": 159418905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182809
    },
    {
        "content": "<p>actually I'm not sure there is anything to name</p>",
        "id": 159418921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182830
    },
    {
        "content": "<p>we don't collect theories except perhaps in the naming of files</p>",
        "id": 159418929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182849
    },
    {
        "content": "<p>most of the names have to do with particular operations</p>",
        "id": 159418935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182860
    },
    {
        "content": "<p>The descent page doesn't really have anything formalizable</p>",
        "id": 159418988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182899
    },
    {
        "content": "<p>it seems more like a setting, in the literary sense</p>",
        "id": 159419003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182930
    },
    {
        "content": "<p>A historical note: the use of the term \"lift\" in Lean comes from this paper: <a href=\"http://www.cs.nott.ac.uk/~psztxa/publ/defquotients.pdf\" target=\"_blank\" title=\"http://www.cs.nott.ac.uk/~psztxa/publ/defquotients.pdf\">http://www.cs.nott.ac.uk/~psztxa/publ/defquotients.pdf</a>. I asked Thorsten about it, and he said there was no deep reason for the choice. He wasn't aware of the mathematical terminology, and said they chose the term in conformance with functional programming. (For example, Google just found this for me: <a href=\"https://stackoverflow.com/questions/2395697/what-is-lifting-in-haskell/2395956\" target=\"_blank\" title=\"https://stackoverflow.com/questions/2395697/what-is-lifting-in-haskell/2395956\">https://stackoverflow.com/questions/2395697/what-is-lifting-in-haskell/2395956</a>.)<br>\nAnyhow, others have also complained about the word \"lift\" with quotients.</p>",
        "id": 159430025,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1551193032
    },
    {
        "content": "<p>FWIW, I also parse <code>⊂</code> as strict subset, but I recognize that the symbol is ambiguous and so follow Kevin's policy of using only ⊊ and ⊆. (In a similar way, avoid talking about the range of a function, and use \"image\" to denote the image of the function on the domain, and \"codomain\" to denote the intended target.) I am shocked to hear that British nats don't include zero. Poor zero!</p>",
        "id": 159430625,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1551193510
    },
    {
        "content": "<p>Usually there's not much risk of confusion because \"is a subset of\" is whichever symbol appears 99% of the time and \"is a proper subset of\" is the one which appears 1% of the time.</p>",
        "id": 159434985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1551197093
    },
    {
        "content": "<p>For me, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊆</mo></mrow><annotation encoding=\"application/x-tex\">\\subseteq</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.63597em;\"></span><span class=\"strut bottom\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mrel\">⊆</span></span></span></span> are just typographic variants of the same symbol</p>",
        "id": 159435041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1551197132
    }
]