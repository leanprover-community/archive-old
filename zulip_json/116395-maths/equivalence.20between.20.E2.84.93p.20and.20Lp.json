[
    {
        "content": "<p>I was starting to implement the equivalence between <code>lp</code> and <code>measure_theory.Lp</code> (in the case of counting measure on full power set of the domain for functions <code>Œ± ‚Üí E</code>) in part as a way to teach myself the measure theory portion of the library. However, I immediately ran into issues and I need some questions answered:</p>\n<ol>\n<li>Why is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.snorm\">docs#measure_theory.snorm</a> zero if <code>p = 0</code>? I would have expected something like <code>Œº (function.support f)</code>. This definition prohibits an equivalence in this case.</li>\n<li>Will I need to restrict the domain <code>Œ±</code> to be countable?</li>\n</ol>\n<p>My concern in (2) is in the <code>p = ‚àû</code> case. In particular, if the domain <code>Œ±</code> was something like <code>set.Icc (0 : ‚Ñù) 1</code> and <code>f : Œ± ‚Üí ‚Ñù</code> was given by <code>f x = ‚Üëx</code>, then we would have <code>mem_‚Ñìp f ‚àû</code> but I don't think we would have <code>measure_theory.mem_ùìõp f ‚àû</code>, with the latter failing only because <code>f</code> is not a.e. strongly measurable (at least, I <em>think</em> it's not, but I would be content to be shown otherwise).</p>\n<p>In case <code>p &lt; ‚àû</code>, one should be able to show that the support of <code>f</code> is countable, and then one can show <code>f</code> is a pointwise limit of simple functions and hence is strongly measurable.</p>",
        "id": 292834847,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660166338
    },
    {
        "content": "<p>I would say the natural equivalence should be with Lp for the counting mesure on the measurable space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">‚ä§</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X, \\top)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">‚ä§</span><span class=\"mclose\">)</span></span></span></span> so measurability shouldn't be an issue</p>",
        "id": 292835563,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660166675
    },
    {
        "content": "<p>I mean, somehow this is the \"natural\" sigma algebra for the counting measure, right ?</p>",
        "id": 292835628,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660166710
    },
    {
        "content": "<p>Yes, I agree, but I think the <code>f</code> I described above is not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.ae_strongly_measurable\">docs#measure_theory.ae_strongly_measurable</a>, which is a requirement for <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/function/lp_space.html#measure_theory.mem_‚Ñíp\">measure_theory.mem_ùìõp</a></p>",
        "id": 292835755,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660166779
    },
    {
        "content": "<p>I guess another way to ask this is: if <code>Œ±</code> is equipped with <code>‚ä§ : measurable_space Œ±</code>, does that imply every function is strongly measurable?</p>",
        "id": 292836218,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660167010
    },
    {
        "content": "<p>Yes. For your example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.strongly_measurable\">docs#continuous.strongly_measurable</a> should mean that it is trongly measurable right ? But that doesn't help with the general case</p>",
        "id": 292836297,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660167066
    },
    {
        "content": "<p><del>Oh wait maybe it does</del></p>",
        "id": 292836318,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660167082
    },
    {
        "content": "<p><del>Just put the discrete topology on the domain</del></p>",
        "id": 292836341,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660167095
    },
    {
        "content": "<p><del>But that shouldn't be the right way of doing it anyway</del></p>",
        "id": 292836461,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660167157
    },
    {
        "content": "<p>ummm... no? The discrete topology on an uncountable set is not a second countable topology.</p>",
        "id": 292837725,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660167801
    },
    {
        "content": "<p>Again, if that <code>f</code> I described above is strongly measurable, then what is the sequence of simple functions which converges to it pointwise?</p>",
        "id": 292837860,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660167849
    },
    {
        "content": "<p>Yes but you need only <a href=\"https://leanprover-community.github.io/mathlib_docs/find/second_countable_topology_either\">docs#second_countable_topology_either</a>, so having a second countable <em>codomain</em> works right? This won't work in general though. Sorry if I'm saying stupid things, I should let someone who knows this better than me answer</p>",
        "id": 292839149,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660168578
    },
    {
        "content": "<p>Yeah, okay, but that's easy to break too (as you mentioned), just map instead into <code>lp (lambda (_ : real), real) top</code></p>",
        "id": 292840784,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660169409
    },
    {
        "content": "<p>The choice of <code>snorm</code> being uniformly 0 for <code>p=0</code> is a bit of a junk value, but it makes many lemmas true for all p instead of <code>0 &lt; p</code>. Apart from that, it makes <code>Lp E 0 Œº</code> equal to the space of ae_strongly_measurable functions (equivalence classes of), which corresponds to the usual L0 notation. That last point is not important: we don't use <code>Lp E 0 Œº</code> for that space, we use <code>measure_theory.ae_eq_fun</code>.</p>\n<p>I tried replacing the definition of snorm at 0 by <code>Œº (function.support f)</code> and it looks like most lemmas used to compare snorm at different exponents now require an additional <code>0 &lt; p</code>. Also  various other results now break at 0, like <code>snorm (c ‚Ä¢ f) p Œº = (‚à•c‚à•‚Çä : ‚Ñù‚â•0‚àû) * snorm f p Œº</code>, or <code>(‚àÄ·µê x ‚àÇŒº, ‚à•f x‚à• ‚â§ c * ‚à•g x‚à•) ‚Üí ‚à•f‚à• ‚â§ c * ‚à•g‚à•</code>. </p>\n<p>In summary, Lp 0 was not considered a useful object, hence snorm at 0 was defined to be the junk value that makes as many lemmas true at 0 as possible. If you have a meaningful value for it that turns <code>Lp E 0 Œº</code> into something useful, the slight inconvenience of a few <code>0 &lt; p</code> hypotheses could be worth it. Otherwise, I guess you can define your equivalence for <code>0 &lt; p</code>?</p>",
        "id": 292880811,
        "sender_full_name": "R√©my Degenne",
        "timestamp": 1660203829
    }
]