[
    {
        "content": "<p>How does all this work? If I want to find a 100 digit prime number as part of some class demonstration on factoring I'd just ask pari-gp to give me a 100 digit prime and not care about formal verification because it's probably right. What would need to happen before I could ask Lean what the next prime after <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>1</mn></msup><mn>00</mn></mrow><annotation encoding=\"application/x-tex\">10^100</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> was, and get a formally proved answer?</p>",
        "id": 173407964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565989926
    },
    {
        "content": "<blockquote>\n<p>the next prime after <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>1</mn></msup><mn>00</mn></mrow><annotation encoding=\"application/x-tex\">10^100</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></p>\n</blockquote>\n<p>It shouldn't be too hard to prove that's <code>2</code>.</p>",
        "id": 173408040,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565990031
    },
    {
        "content": "<p>I guess we would have to formally verify one of those polynomial-time prime checking algorithms. <br>\nDo you also want to know that all numbers between your number and the prime number are non-primes? Then we could certify those with a factorization, I guess.</p>",
        "id": 173408188,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565990152
    },
    {
        "content": "<p>You know what would be cool is if someone implemented the Miller-Rabin primality test in Lean, and proved it correct.</p>",
        "id": 173408237,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565990163
    },
    {
        "content": "<p>But wikipedia says people don't really use it for deterministic checking, so maybe something else would be appropriate...</p>",
        "id": 173408402,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565990333
    },
    {
        "content": "<p>hmm... wikipedia claims the state-of-the-art in prime number certificates is the Atkin–Goldwasser–Kilian–Morain certificate, which can hopefully be output by pari-gp or similar program</p>",
        "id": 173408590,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565990536
    },
    {
        "content": "<p>Use sage</p>",
        "id": 173412240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565994164
    },
    {
        "content": "<p>That would be a really cool project <span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span></p>",
        "id": 173412249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565994187
    },
    {
        "content": "<p>Will there ever be vaguely fast kernel computation in Lean?</p>",
        "id": 173412897,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565994927
    }
]