[
    {
        "content": "<p>Following a conversation on semisimple modules, I've started drafting what I think we need for the direct sum of two <code>subgroup</code>s of a<code>comm_group</code> at <a href=\"https://github.com/leanprover-community/mathlib/tree/direct_sum2\">branch#direct_sum2</a></p>",
        "id": 221315737,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609448260
    },
    {
        "content": "<p>This can logically be extrapolated to additive subgroups, submodules, etc., and eventually to internal direct sums of families, but before I try to do that, does anyone have any feedback on whether this is the right way to code the isomorphisms involved.</p>",
        "id": 221315849,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609448384
    },
    {
        "content": "<p>Aren't you going to want all this for add_comm_groups too? e.g. in your application the group law was addition. Probably <code>to_additive</code> will magically do it all for you.</p>",
        "id": 221315854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609448394
    },
    {
        "content": "<p>Yes, I figure <code>to_additive</code> will take care of that. I'm not super-well-versed in <code>to_additive</code>, so if someone else wants to try adding that to the branch, they can. Otherwise I'll get to it once I'm confident we have the right API for <code>comm_group</code>s.</p>",
        "id": 221315937,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609448464
    },
    {
        "content": "<p>I'm not really clear why you need this stuff at the minute. If s and t are subgroups of G, then you have their external product which you can make, and their internal product which you can make.</p>",
        "id": 221315950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609448477
    },
    {
        "content": "<p>\"I have a complement\" just means \"there exists t such that s meet t is bot and s join t is top\"</p>",
        "id": 221315965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609448496
    },
    {
        "content": "<p>I guess at some point though you might have to move from top to s x t and that's what you're setting up here.</p>",
        "id": 221316033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609448535
    },
    {
        "content": "<p>I don't think this is necessary for working with semisimple modules or any other case where I care about direct summands, but I think it's useful for justifying that my definitions match up with the literature.</p>",
        "id": 221316160,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609448675
    },
    {
        "content": "<p>I think the correct way in Lean to say that something's a direct summand is totally order-theoretic, just that it has a complement, but that's not as familiar as saying that something's isomorphic to the direct product of two subobjects.</p>",
        "id": 221316256,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609448805
    },
    {
        "content": "<p>It'd probably also be nice to use the isomorphism between an internal direct sum of a family and the direct sum of families that we've already developed, e.g. to concretely realize a representation as a sum of irreps, and this is basically a warmup for that.</p>",
        "id": 221316379,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609448930
    },
    {
        "content": "<p>Right now I am a bit unclear about what you need here. I mean the definition \"I'm a direct summand\" is easy using the lattice structure. The statement tha a rep is a finite sum of irreps is just the statement that it's Noetherian and semisimple.</p>",
        "id": 221316758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609449307
    },
    {
        "content": "<p>But  I'm not at all clear on how to say \"I'm a finite sum of irreps\" explicitly. How is this fact used? Is it ever used or do people just use Noeth plus semisimple?</p>",
        "id": 221316790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609449349
    },
    {
        "content": "<p>Can you use Yury's definition of a complemented submodule?  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.closed_complemented\">docs#submodule.closed_complemented</a></p>",
        "id": 221316873,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609449424
    },
    {
        "content": "<p>Yes that works in this generality. What I am unclear about right now is whether one now needs to go into the details of the fact that the abstract direct sum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>⊕</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\oplus Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is isomorphic to the module you started with. I guess one will not be able to avoid this...</p>",
        "id": 221317015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609449571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Internal.20Direct.20Sum/near/221316873\">said</a>:</p>\n<blockquote>\n<p>Can you use Yury's definition of a complemented submodule?  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.closed_complemented\">docs#submodule.closed_complemented</a></p>\n</blockquote>\n<p>I was basically going to use what appears in that file as <code>closed_complemented.has_closed_complement</code>, but without the closed part. Essentially the conclusion to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra.submodule.exists_is_compl\">docs#monoid_algebra.submodule.exists_is_compl</a></p>",
        "id": 221317495,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609449971
    },
    {
        "content": "<p>Another question is how else would we define whether a <code>Sup</code> of subobjects is an internal direct sum, because it's not as simple as with two, where we can use <code>disjoint</code>ness</p>",
        "id": 221317588,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609450075
    },
    {
        "content": "<p>I see also that this ties in a lot to <code>linear_algebra.projection</code>.</p>",
        "id": 221317784,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609450211
    },
    {
        "content": "<p>yes, it's more than pairwise disjointness.</p>",
        "id": 221317823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609450251
    },
    {
        "content": "<p>Are you indexing the subobjects by an an arbitrary type?</p>",
        "id": 221317884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609450302
    },
    {
        "content": "<p>It's the predicate on F : I -&gt; subs X that for all i, F i is compl to the sup of the obvious function F' : I-[i} -&gt; X.</p>",
        "id": 221318091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609450427
    },
    {
        "content": "<p>Oh here's another way.</p>",
        "id": 221318189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609450483
    },
    {
        "content": "<p><code>is_direct (F : I -&gt; subs X) := \\forall w : I \\to_0 F I....</code>...wait a minute</p>",
        "id": 221318324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609450611
    },
    {
        "content": "<p>I want some kind of dependent finitely supported type. Is that a thing?</p>",
        "id": 221318340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609450634
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a></p>",
        "id": 221318360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609450660
    },
    {
        "content": "<p>who would have thought it would be called that</p>",
        "id": 221318368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609450674
    },
    {
        "content": "<p>meh I can't quite get it to work and I need to go and be with my family now. It' something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_direct</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→₀</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sw</span> <span class=\"o\">:</span> <span class=\"n\">w.sum</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 221319597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609451919
    },
    {
        "content": "<p>X an add_comm_group. I needed finite support so I had to use 0 and as the identity.</p>",
        "id": 221319619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609451947
    },
    {
        "content": "<p>Worth noting that <code>dfinsupp</code> is very defeq to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum\">docs#direct_sum</a>, in that the latter is the former with a smaller API</p>",
        "id": 221326562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609460602
    },
    {
        "content": "<p>It's something like <code>injective (finsupp.sum F)</code></p>",
        "id": 221328313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609463324
    },
    {
        "content": "<p>Sorry, NYE intervened. Isn't it this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_direct</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→₀</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sw</span> <span class=\"o\">:</span> <span class=\"n\">w.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 221345318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609495408
    },
    {
        "content": "<p>I’ve recently merged <code>complete_lattice.independent</code>, which should give the direct sum condition for abelian groups and modules</p>",
        "id": 225448842,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1612680038
    },
    {
        "content": "<p>Meanwhile, <a href=\"https://github.com/leanprover-community/mathlib/issues/6053\">#6053</a> will put a ring structure on internal direct sums of rings</p>",
        "id": 225453676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612688726
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a> for reference</p>",
        "id": 225455587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612691928
    },
    {
        "content": "<p>The statement to show is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.direct_sum_module</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">direct_sum.to_Sup_carrier</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">direct_sum.to_module</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">submodule.of_le</span> <span class=\"o\">(</span><span class=\"n\">le_supr</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- This makes `S` an internal direct sum. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">direct_sum.to_Sup_carrier_bijective</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice.independent</span> <span class=\"bp\">$</span> <span class=\"n\">set.range</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.to_Sup_carrier</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>right?</p>",
        "id": 227742874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614247004
    }
]