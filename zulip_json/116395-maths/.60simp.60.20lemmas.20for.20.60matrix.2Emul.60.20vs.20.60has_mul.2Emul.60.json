[
    {
        "content": "<p>The <code>simp</code> lemma <code>matrix.mul_eq_mul : M * N = matrix.mul M N</code> seems to imply that the canonical representation for matrix multiplication is <code>matrix.mul</code>. I'm seeing a lot of <code>simp</code> lemmas using <code>has_mul.mul</code>, e.g. <code>matrix.det_mul : det (M * N) = det M * det N</code>. Is there a reason for this, or should I standardise these lemmas to use <code>matrix.mul</code>?</p>",
        "id": 187248955,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580725344
    },
    {
        "content": "<p>Good question.<br>\nI'm not sure if I like it that <code>matrix.mul</code> is the standard simp form. For square matrices <code>M * N</code> is certainly better, because it unlocks a boatload of simp-lemmas from algebra.</p>",
        "id": 187250060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580726219
    },
    {
        "content": "<p>On the other hand, a lot of these lemmas (I estimate from quickly looking over some relevant files) will hold for rectangular matrices as well, so duplication seems unavoidable either way.</p>",
        "id": 187260120,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580735541
    },
    {
        "content": "<p>I guess the true generalisation will be to state everything in terms of composition of morphisms in a category, which has its own API problems...</p>",
        "id": 187260556,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580735904
    },
    {
        "content": "<p>Doesn't <code>has_mul.mul</code> force the matrices to be the same size (and therefore square)?</p>",
        "id": 187270326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580742680
    },
    {
        "content": "<p>It does.</p>",
        "id": 187270347,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580742698
    },
    {
        "content": "<p>So having simp turn <code>matrix.mul</code> to <code>*</code>, which could only fire for square matrices, wouldn't be a good idea. If A is m x m and B is m x m and C is m x n then <code>(A.mul B).mul C = A.mul (B.mul C)</code> might first turn <code>A.mul B</code> into <code>A * B</code>, then get stuck unless there is a simp lemma for <code>(A * B).mul C</code>.</p>",
        "id": 187271509,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580743454
    },
    {
        "content": "<p>So maybe we shouldn't have a simp lemma in either direction, and let the user decide.</p>",
        "id": 187272044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580743759
    },
    {
        "content": "<p>You want to use <code>commute</code> or something but <code>simp</code> is messing up your <code>*</code>?</p>",
        "id": 187305248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580764714
    },
    {
        "content": "<p>The specific motivation for the question was that I want to define a few extra <code>simp</code> lemmas and was unsure how to state them, but I've encountered before that <code>matrix.det_mul</code> didn't fire because <code>matrix.mul_eq_mul</code> removed the <code>*</code>s.</p>",
        "id": 187341888,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580808398
    },
    {
        "content": "<p>Since the discussion petered out with only the conclusion that rewriting <code>matrix.mul</code> to <code>has_mul</code> is not what we want, <a href=\"https://github.com/leanprover-community/mathlib/pull/1959\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1959\">I've made a PR with the changes I suggested</a>.</p>",
        "id": 187441312,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580898575
    }
]