[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> (and any other category theorists here at the moment!)</p>\n<p>I'm running into some annoying problems with <code>get_limit_cone</code> --- just that there isn't a good simp normal form set up at the moment. I'm seeing things like <code>(get_limit_cone F).cone.X</code> appearing, which of course is definitionally equal to just <code>limit X</code>.</p>\n<p>Options:</p>\n<ol>\n<li>I add the simp lemmas that reduce projections of <code>get_limit_cone</code> to the \"canonical\" ways of summoning these objects.</li>\n<li>I just remove the <code>limit_cone</code> structure entirely, in favour of a sigma type.</li>\n</ol>\n<p>Any preferences?</p>",
        "id": 210707316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600671993
    },
    {
        "content": "<p>Personally, I imagined that the library would slowly migrate from having parameters like <code>{c : cone F} (hc : is_limit F)</code> to <code>(c : limit_cone F)</code>, so I'm in favor of having something called <code>limit_cone</code>. I'm not 100% sure how your sigma type idea would look.</p>",
        "id": 210707688,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1600672396
    },
    {
        "content": "<p>Sounds good. I will add some simp lemmas as I need them.</p>",
        "id": 210712639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600676577
    },
    {
        "content": "<p>I wonder whether this will result in too many ways to say the same thing? You can't really get rid of <code>is_limit</code> since it's needed for most theorems where it appears in the conclusion. Of course for hypotheses this can't cause too much trouble, since you can always write <code>\\&lt;c, hc\\&gt;</code> where you would write <code>hc</code> before (or <code>c</code> could even be implicit in the <code>limit_cone</code> structure), though Lean's automation might find this slightly challenging.</p>",
        "id": 210724700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600684648
    },
    {
        "content": "<p>I'd guess that more than half the time when you know something is a limit, it's not because you got it from <code>limit</code> or from a hypothesis, but rather you had the cone already and then checked it was a limit, either directly, or using some theorem about a functor preserving/reflecting limits, or by pasting pullback squares, etc.</p>",
        "id": 210725395,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600685182
    },
    {
        "content": "<p>It turned out once I got myself straightened out this issue wasn't actually a problem for me today, so I haven't fixed it either way!</p>",
        "id": 210741262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600695293
    }
]