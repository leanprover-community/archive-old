[
    {
        "content": "<p>This is about <a href=\"https://github.com/leanprover-community/mathlib/pull/9815\">https://github.com/leanprover-community/mathlib/pull/9815</a>, which adds the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">lemma</span> <span class=\"n\">log_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Mathlib convention is to phrase this as an iff instead. My question is: what would Mathlib say about providing this lemma <em>as well as</em> the iff version (where the iff version just <code>cases</code> and then calls out to <code>log_eq_zero</code>)? Or should I only give the iff version?</p>",
        "id": 258749723,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1634925828
    },
    {
        "content": "<p>Having it be an <code>iff</code> means you can rewrite with it, which can be rather useful even if you never use its converse.</p>",
        "id": 258750411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634926103
    },
    {
        "content": "<p>We don't disallow giving the version in one direction, and if the easiest proof of the <code>iff</code> is to do each implication separately, it's very common to also have one or both of the implications. That said, naming the non-iff version is tricky; the current name does not follow our <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> conventions. (<code>eq_or_eq_or_eq_of_log_eq_zero</code> is quite long, but probably the \"best\" name)</p>",
        "id": 258750711,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634926262
    },
    {
        "content": "<p>Or <code>log_eq_zero</code> and <code>log_eq_zero_iff</code>? I'd say it's mostly interesting to have a particular direction stated separately if you can then drop an assumption</p>",
        "id": 258751173,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634926487
    },
    {
        "content": "<p>The <code>iff</code> version is only a few lines longer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">log_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">x_lt_zero</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">x_gt_zero</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">eq_neg_iff_eq_neg.mp</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">log_neg_eq_log</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_one_of_pos_of_log_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">neg_pos.mpr</span> <span class=\"n\">x_lt_zero</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">eq_one_of_pos_of_log_eq_zero</span> <span class=\"n\">x_gt_zero</span> <span class=\"n\">h</span><span class=\"o\">)),</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258751227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634926507
    },
    {
        "content": "<p>I decided it wasn't worth the bikeshed and just did exactly as Kyle demonstrated, thanks</p>",
        "id": 258751522,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1634926632
    },
    {
        "content": "<p>I recognised the naming conventions problem, but decided that three disjunctions in a name was too much :P</p>",
        "id": 258751569,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1634926661
    },
    {
        "content": "<p>You can use the alias command to autogenerate the implications from an iff btw <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/alias.html\">https://leanprover-community.github.io/mathlib_docs/tactic/alias.html</a></p>",
        "id": 258771520,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634935362
    }
]