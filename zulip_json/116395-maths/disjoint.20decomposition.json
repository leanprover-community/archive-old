[
    {
        "content": "<p>I want to index over all disjoint (finite) decompositions of a (profinite) topological space into pairwise disjoint clopen sets:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mo>=</mo><msub><mi>U</mi><mn>1</mn></msub><mo>⊔</mo><msub><mi>U</mi><mn>2</mn></msub><mo>⊔</mo><mo>…</mo><mo>⊔</mo><msub><mi>U</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">S = U₁ ⊔ U₂ ⊔ … ⊔ Uₙ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊔</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊔</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊔</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>I guess we have the lattice of <code>clopen</code> sets. So now I need to know how to say that a certain family of elements in a lattice is pairwise disjoint and has <code>⊤</code> as its <code>Sup</code>. Is there already a bundled notion for this? Or should I just handroll this?</p>",
        "id": 290988153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658897415
    },
    {
        "content": "<p>We don't have a definition for both I think, but we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a> for the first one</p>",
        "id": 290988767,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658898027
    },
    {
        "content": "<p>Oh no actually, this is not the same as pairwise disjoint</p>",
        "id": 290988806,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658898066
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/discrete_quotient\">docs#discrete_quotient</a></p>",
        "id": 291001869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658909266
    },
    {
        "content": "<p>If you have finitely many of those, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finpartition\">docs#finpartition</a>.</p>",
        "id": 291007414,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658913068
    },
    {
        "content": "<p>Precisely, you will want a <code>finpartition (⊤ : clopens α)</code>.</p>",
        "id": 291007464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658913100
    },
    {
        "content": "<p>By compactness there's only finitely many</p>",
        "id": 291017491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658919322
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 291017616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658919402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/disjoint.20decomposition/near/291001869\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/discrete_quotient\">docs#discrete_quotient</a></p>\n</blockquote>\n<p>Yeah, I know, but I guess it's a bit ugly to talk about inverse images of points of the natural map to a discrete quotient all the time.</p>",
        "id": 291017700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658919466
    },
    {
        "content": "<p><code>finpartition</code> looks good</p>",
        "id": 291017707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658919477
    },
    {
        "content": "<p>There is some api for constructing a discrete quotient from a clopen partition.</p>",
        "id": 291019684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658920693
    }
]