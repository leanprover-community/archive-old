[
    {
        "content": "<p>Hello, so I'm trying to prove a specific finset has a certain cardinality, and I'm not sure about the best way to do this in Lean.</p>\n<p>My finset is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Square</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">):=</span>\n<span class=\"o\">((</span><span class=\"n\">finset.Ico_ℤ</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">finset.Ico_ℤ</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">x.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">x.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(i.e. pairs of integers where the maximum of the absolute values is exactly n). There might be a better way to define this finset, which makes it easier to prove the cardinality, but this is what I currently have.</p>\n<p>Now, I would like to prove: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Square_size</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"n\">finset.card</span> <span class=\"o\">(</span><span class=\"n\">Square</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">8</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean seems we know what the cardinality of  finsets like <code>range</code>  is, so maybe rewriting this set as a carefully chosen union of ranges might work, but  this seems a bit annoying, so I wondered if there was a better way.</p>",
        "id": 244122429,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1624873835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> What is the maths proof? Probably you chop <code>Square</code> up into 8 finsets of size <code>m</code>. So you'll have to do that in Lean as well.</p>",
        "id": 244123955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624874843
    },
    {
        "content": "<p>If you take the image of a finset under an embedding, then there must be some lemma <code>finset.card_map</code> that tells you that the cardinality doesn't change.</p>",
        "id": 244124060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624874892
    },
    {
        "content": "<p>So then you only need to prove that your 8 finsets are covering and disjoint. Of course you don't want to check <code>8 * 7</code> pairs to be disjoint, so you can hopefully do something a bit smarter there, by defining a function that sends every element of <code>Square</code> to the appropriate finset.</p>",
        "id": 244124184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624874999
    },
    {
        "content": "<p>Yeah the maths proofs I can think of chop it up into a few finsets (and possibly remove duplicates). So I guess I'll try that then :) Hopefully the disjointness can be done in a less painful way.</p>",
        "id": 244124855,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1624875509
    },
    {
        "content": "<p>Maybe the nice proof is to do 4 finsets of size <code>2 * m + 1</code>, and then remove duplicates?</p>",
        "id": 244124996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624875607
    },
    {
        "content": "<p>Yes, thats what I was thinking, but I'm not sure about how to do the \"remove duplicates \" in Lean.</p>",
        "id": 244125174,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1624875750
    },
    {
        "content": "<p>have we defined the bijection <code>0 1 2 3 4 ... → 0 1 -1 2 -2 ...</code> etc? may be best to do <code>range (2 * m + 1) × range (2 * m + 1)</code> and take the image under that</p>",
        "id": 244125248,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624875839
    },
    {
        "content": "<p>oh this is only the edges... may be easiest to just do full-length verticals, and don't put the corners in the horizontal ones</p>",
        "id": 244126437,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624876763
    },
    {
        "content": "<p>Ah yes, I think I was just being silly, I think I can see how to remove the duplicates now (just dont include them !)</p>",
        "id": 244127162,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1624877299
    }
]