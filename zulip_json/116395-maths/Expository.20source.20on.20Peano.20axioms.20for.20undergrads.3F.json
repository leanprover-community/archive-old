[
    {
        "content": "<p>Hi all, I'm teaching introductory abstract algebra this semester, and we briefly touch on the Peano axioms without covering them in great detail. I want to suggest a source to my students in case they're curious to see more. Does anyone have a favorite (accessible, expository) source on the Peano axioms and the construction/development of N, Z, Q, etc for undergrads?</p>",
        "id": 252850633,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631307997
    },
    {
        "content": "<p>(I realize this is not <em>technically</em> about Lean, but nobody I know in real life had a suggestion and it occurred to me that people here might!)</p>",
        "id": 252850715,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308048
    },
    {
        "content": "<p>My wholly biased suggestion is of course <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> for the naturals</p>",
        "id": 252850843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308096
    },
    {
        "content": "<p>I was tempted to suggest just that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 252850854,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308106
    },
    {
        "content": "<p>But I've seen you say that you think Lean is currently too hard to use for beginning undergrads (when simultaneously learning new math). Would you say the Natural Number Game is at an appropriate level since it hides a lot of the learning curve?</p>",
        "id": 252850911,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308151
    },
    {
        "content": "<p>Oh absolutely! That's why I wrote it!</p>",
        "id": 252850932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308166
    },
    {
        "content": "<p>Well OK then. Excellent!</p>",
        "id": 252850954,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308182
    },
    {
        "content": "<p>I don't think Lean is currently too hard to use for beginning undergrads at all. I _do_ think that attempting to teach e.g. undergraduate analysis to 1st years by plonking Lean in front of them and saying \"OK so here is a bunch of new material which is extremely unlike anything you've ever seen before, and by the way you're going to have to learn a programming language as well\" is unreasonable.</p>",
        "id": 252851071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308238
    },
    {
        "content": "<p>However if the student already knows, or can easily pick up, the material (as is the case for the maths going on in the natural number game) then I think it's fine. And of course once you've played NNG you're better at Lean so then when you try to do basic 1st year analysis in Lean it's less scary.</p>",
        "id": 252851198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308306
    },
    {
        "content": "<p>I see, that makes sense. My students do not know anything substantive about the Peano axioms -- they know proof by induction and I talked a bit about what the axioms are and how every fact about N is ultimately proven by induction. But we didn't actually prove <code>a+1=1+a</code> or anything like that.</p>",
        "id": 252851407,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308413
    },
    {
        "content": "<p>To get from the naturals to the integers you either do something which is mathematically quite nasty (define the integers as the disjoint union of two copies of the naturals and develop from there, which is what is done in mathlib, and of course now you have to deal with the fact that one of the maps in is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mo>−</mo><mn>1</mn><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x\\mapsto -1-x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> which has no nice properties so it's a bit of a nightmare) or you have to deal with quotients, which in my experience students find hard, so this is an issue.</p>",
        "id": 252851502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308456
    },
    {
        "content": "<p>My most recent attempt to teach quotients in Lean to maths students is here <a href=\"https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/\">https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/</a> but these people knew all the mathematical material back to front already.</p>",
        "id": 252851597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308505
    },
    {
        "content": "<p>My students are going to hear a <em>very</em> loose sketch of the quotient approach. I will say how Z can be formally constructed as equivalence classes of pairs, and give some intuition for what is going on. But that's because it's early groundwork for quotients (of rings) later in the semester.</p>",
        "id": 252851671,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308543
    },
    {
        "content": "<p>Hmm, I think I did a tutorial on quotients from LFTCM2020. Is that the same one?</p>",
        "id": 252851910,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308612
    },
    {
        "content": "<p>I think it's hard to learn that stuff and also to learn how Lean does quotients at the same time. I had a hard enough time getting to grips with quotients in Lean when I was learning it, and I had 25 years of number theory research under my belt</p>",
        "id": 252851933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308616
    },
    {
        "content": "<p>I don't think I wrote the LFTCM2020 quotients tutorial so I'm guessing it's not (I didn't use the tutorial as a source when I was writing that stuff either)</p>",
        "id": 252852012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308650
    },
    {
        "content": "<p>I wonder if there would be any merit to something like \"pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a, b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> with either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">b = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>\"</p>",
        "id": 252852034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631308661
    },
    {
        "content": "<p>There's also this for quotients: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean\">https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean</a></p>",
        "id": 252852045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308668
    },
    {
        "content": "<p>Oh fun. I mean personally I have yet to properly understand Lean quotients, despite having done one (1) tutorial so far.</p>",
        "id": 252852137,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308703
    },
    {
        "content": "<p>@Reid do you mean for defining Z in Lean?</p>",
        "id": 252852176,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308725
    },
    {
        "content": "<p>The blog post I linked to above is supposed to be an explanation of Lean quotients for someone who is mathematically mature (i.e. knows them back to front on paper)</p>",
        "id": 252852209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308747
    },
    {
        "content": "<p>Reid is suggesting yet another definition. Chris Hughes has also suggested the quotient of Nat disjoint Nat by identifying the 0's and then the two maps are x to x and x to -x, but again this involves quotients</p>",
        "id": 252852316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308803
    },
    {
        "content": "<p>Yeah. Basically the quotient approach but you split the quotient by choosing a \"best\" representative. Probably not very good pedagogically because nobody does it that way.</p>",
        "id": 252852382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631308842
    },
    {
        "content": "<p>It's similar to the way the rationals are defined in Lean (fraction in lowest terms, with positive denominator)</p>",
        "id": 252852540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631308924
    },
    {
        "content": "<p>What. Rationals aren't defined as a localization?</p>",
        "id": 252852572,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308940
    },
    {
        "content": "<p>I guess one could also do nat disjoint union pnat!</p>",
        "id": 252852602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Expository.20source.20on.20Peano.20axioms.20for.20undergrads.3F/near/252852034\">said</a>:</p>\n<blockquote>\n<p>I wonder if there would be any merit to something like \"pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a, b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> with either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">b = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>\"</p>\n</blockquote>\n<p>That has the nice property that the two inclusions of naturals as the non-negatives and non-positives are rather clean, which seems to have some merit.</p>",
        "id": 252852617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631308965
    },
    {
        "content": "<p>What about having Nat start at 1 and taking two copies of that, plus 0?</p>",
        "id": 252852633,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631308981
    },
    {
        "content": "<p>No -- rationals are defined as pairs (a,b) with a an integer and b a positive natural and a coprimality assumption. Computer scientists seem to want to avoid quotients at all costs -- all this stuff was done in Lean before there were mathematicians involved.</p>",
        "id": 252852659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631308999
    },
    {
        "content": "<p>I see. Do you know why they want to avoid quotients?</p>",
        "id": 252852704,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631309027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/116395-maths/topic/Expository.20source.20on.20Peano.20axioms.20for.20undergrads.3F/near/252852633\">said</a>:</p>\n<blockquote>\n<p>What about having Nat start at 1 and taking two copies of that, plus 0?</p>\n</blockquote>\n<p>right -- <code>pnat</code> is the positive naturals. The CS people won't entertain the possibility that nat starts at 1, 0 makes more sense to them in applications apparently (they don't count things)</p>",
        "id": 252852767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631309045
    },
    {
        "content": "<p>I have already broken my promise to my students -- today I told them the naturals would start at 1 instead of 0 for us. Then I went and started the division theorem, which is much more convenient to do with N starting at 0.</p>",
        "id": 252853021,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631309119
    },
    {
        "content": "<p>But in my defense, I am a mathematician</p>",
        "id": 252853037,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631309128
    },
    {
        "content": "<p>I don't have to be consistent</p>",
        "id": 252853057,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631309142
    },
    {
        "content": "<p>just make sure you're canonical</p>",
        "id": 252853136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631309170
    },
    {
        "content": "<p>Also, after hacking on Lean a lot in the last few weeks, I've noticed that listening to real-world math proofs is sometimes becoming... weirdly uncomfortable, because now I start noticing all the casual identifications and omitted assumptions and skipped steps...</p>",
        "id": 252853177,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631309205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Expository.20source.20on.20Peano.20axioms.20for.20undergrads.3F/near/252852034\">said</a>:</p>\n<blockquote>\n<p>I wonder if there would be any merit to something like \"pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a, b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> with either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">b = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>\"</p>\n</blockquote>\n<p>This is the implementation in metamath BTW. It is easier to work with than the lean version, especially if you add a \"reduction\" function to turn an arbitrary pair into a \"best\" pair, so that you can basically act like you have the equivalence class version, but it has the advantage that it doesn't need the existence of infinite sets so you can do it in ZF-inf</p>",
        "id": 252853308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631309265
    },
    {
        "content": "<p>yeah, that's the start of the slippery slope. I remember derailing the number theory seminar a few years ago demanding that the speaker explain what they meant when they wrote \"this correspondence is canonical\" on the board...</p>",
        "id": 252853312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631309267
    },
    {
        "content": "<p>so what's with the quotient avoidance Mario?</p>",
        "id": 252853402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631309304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Expository.20source.20on.20Peano.20axioms.20for.20undergrads.3F/near/252852659\">said</a>:</p>\n<blockquote>\n<p>Computer scientists seem to want to avoid quotients at all costs -- all this stuff was done in Lean before there were mathematicians involved.</p>\n</blockquote>\n<p>Sometimes I like appealing to the universal property of quotients and constructing a more convenient type -- things don't have to literally be <code>quot</code> to be a quotient.</p>",
        "id": 252853453,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631309346
    },
    {
        "content": "<p>In metamath, the quotient avoidance is to avoid dependence on the axiom of infinity as mentioned; in lean, the quotient avoidence is to avoid blowup of the underlying representations in the VM (especially on <code>rat</code>)</p>",
        "id": 252853489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631309366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Expository.20source.20on.20Peano.20axioms.20for.20undergrads.3F/near/252853312\">said</a>:</p>\n<blockquote>\n<p>yeah, that's the start of the slippery slope. I remember derailing the number theory seminar a few years ago demanding that the speaker explain what they meant when they wrote \"this correspondence is canonical\" on the board...</p>\n</blockquote>\n<p>What is wrong with 'canonical'? I feel like I always interpret it as either \"functorial\" in some inferrable sense, or at least exists-unique, also possibly just in some inferrable sense.</p>",
        "id": 252853497,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631309373
    },
    {
        "content": "<p>Who cares about concrete structures anyway?</p>",
        "id": 252853601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631309425
    },
    {
        "content": "<p>Just build the algebraic hierarchy <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 252853622,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631309437
    },
    {
        "content": "<p>The presence of a quotient in <code>multiset</code> and <code>finset</code> is also periodically problematic, for example in the nested inductive <code>inductive foo | mk : finset foo -&gt; foo</code></p>",
        "id": 252853643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631309451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Expository.20source.20on.20Peano.20axioms.20for.20undergrads.3F/near/252853489\">said</a>:</p>\n<blockquote>\n<p>In metamath, the quotient avoidance is to avoid dependence on the axiom of infinity as mentioned; in lean, the quotient avoidence is to avoid blowup of the underlying representations in the VM (especially on <code>rat</code>)</p>\n</blockquote>\n<p>I see. So is the issue that if I calculate say <code>1/2 + 1/4 + 1/8 + 1/16 + ... + 1/2048 + 1/2048</code> then internally the actual calculation has been rendered as <code>2048/2048</code> and never gets reduced?</p>",
        "id": 252853648,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631309457
    },
    {
        "content": "<p>right</p>",
        "id": 252853671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631309466
    },
    {
        "content": "<p>in fact, the numbers blow up exponentially even with something as simple as <code>1/2 + 1/2 + 1/2 + ...</code></p>",
        "id": 252853700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631309495
    },
    {
        "content": "<p>oh dang. right.</p>",
        "id": 252853713,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631309506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/116395-maths/topic/Expository.20source.20on.20Peano.20axioms.20for.20undergrads.3F/near/252853497\">said</a>:</p>\n<blockquote>\n<p>What is wrong with 'canonical'? I feel like I always interpret it as either \"functorial\" in some inferrable sense, or at least exists-unique, also possibly just in some inferrable sense.</p>\n</blockquote>\n<p>When you state that a construction which eats an automorphic representation of G (an element of a set, not a category) and spits out a Galois representation into the dual group of G (ditto) is \"canonical\" there are no functors and no bijections so you have to say what you mean.</p>",
        "id": 252853942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631309642
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> starting at 1 is really nonsense. You really want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> to be a monoid.</p>",
        "id": 252863254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1631315765
    },
    {
        "content": "<p>Also a good reason to say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mo>×</mo></msup><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^\\times = \\{1,2,...\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">...</span><span class=\"mclose\">}</span></span></span></span> (a multiplicative monoid)</p>",
        "id": 252864406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631316652
    },
    {
        "content": "<p>As the popular saying goes, \"counting is as easy as 0, 1, 2!\"</p>",
        "id": 252870246,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631321708
    },
    {
        "content": "<p>You really want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> to be a linear ordered commutative <em>semiring</em>.</p>",
        "id": 252880796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631334143
    },
    {
        "content": "<p>Everyone says this but I had nat starting at 1 in my head (and in my thesis and papers) for decades</p>",
        "id": 252895256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631350979
    },
    {
        "content": "<p>Taking this thread off-topic and answering the original question: I recommend Tao, Analysis I, Chapters 2, 4 (and potentially 5 if you want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> as well).</p>",
        "id": 252901004,
        "sender_full_name": "Ben Toner",
        "timestamp": 1631357550
    }
]