[
    {
        "content": "<p>We currently have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional\">docs#finite_dimensional</a> (that is defined as <code>is_noetherian</code> over a division ring) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.finite\">docs#module.finite</a>. The two notion coincide  (over a division ring), and mathlib essentially know this. Should we try to get rid of <code>finite_dimensional</code>? A lot of results in <code>linear_algebra.finite_dimensional</code> hold for finitely generated free modules, and should be stated in that generality. This is in the same spirit as throwing away <code>vector_space</code>.</p>",
        "id": 258508794,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634805932
    },
    {
        "content": "<p>I am pretty sure this has already been discussed, but I don't find the conversation.</p>",
        "id": 258508943,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634806006
    },
    {
        "content": "<p>Related, but even less mathematical: all the names talk about <code>dim</code> but the Lean function is called <code>finrank</code>. I propose making both shorter by replacing them by <code>rk</code>.</p>",
        "id": 258509029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634806063
    },
    {
        "content": "<p>Totally agree.</p>",
        "id": 258509156,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634806115
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/finite.20free.20modules/near/239172867\">Here</a> is the previous discussion.</p>",
        "id": 258509698,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634806400
    },
    {
        "content": "<p>That's not true is it? I thought <code>dim</code> referred to <code>module.rank</code> not finrank</p>",
        "id": 258509759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634806438
    },
    {
        "content": "<p>I made a branch to rename them, but ran into a clash with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rank\">docs#rank</a></p>",
        "id": 258509846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634806470
    },
    {
        "content": "<p>Ooh, maybe I misremembered. At least, the names don't line up well, and we should fix this.</p>",
        "id": 258509874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634806481
    },
    {
        "content": "<p>Should we rename <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rank\">docs#rank</a> to linear_map.rank?</p>",
        "id": 258509882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634806484
    },
    {
        "content": "<p>Yes! That doesn't belong in <code>_root_</code>, I think.</p>",
        "id": 258509933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634806513
    },
    {
        "content": "<p>And <code>f.rank</code> is nice!</p>",
        "id": 258509971,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634806533
    },
    {
        "content": "<p>The problem with <code>finite</code> and <code>finite_dimensional</code> is that we cannot have an instance saying that, over a division ring, <code>finite</code> implies <code>finite_dimensional</code>, since the latter is by definition <code>is_noetherian</code>, that implies <code>finite</code>, we have a loop.<br>\nA possible solution is to get rid completely of <code>finite_dimensional</code>, and not having <code>finite → is_noetherian</code> as an instance, but only as a lemma. Theorems about vector spaces should have <code>finite</code> as assumption, rather than <code>is_noetherian</code>.</p>",
        "id": 258510982,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634807021
    },
    {
        "content": "<p>That seems to be the correct pattern: if we have <code>A → B</code> always and <code>C → (A ↔ B)</code>, then <code>A → B</code> is an instance, <code>C → B → A</code> a lemma, and anything that needs both <code>C</code> and <code>B</code> assumes <code>C</code> and <code>A</code> instead. In this case, <code>A</code> is <code>finite_dimensional = is_noetherian</code>, <code>B</code> is <code>module.finite</code> and <code>C</code> is <code>division_ring</code>.</p>",
        "id": 258513282,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634808192
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib/issues/9854\">#9854</a>. I modified the definition of <code>finite_dimensional</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">module.finite</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>(of course the goal is to get rid of <code>finite_dimensional</code>, but let me start with this). Now I have to modify quite a lot of proofs. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional_submodule</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian.iff_dim_lt_omega.2</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dim_submodule_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dim_lt_omega</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional_submodule</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">iff_fg.2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff_fg.1</span>\n    <span class=\"o\">(</span><span class=\"n\">is_noetherian.iff_dim_lt_omega.2</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dim_submodule_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dim_lt_omega</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))),</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does someone see a better way of doing this? I mean, without starting every new proof with <code>letI : is_noetherian K V := iff_fg.2 _,</code> and using <code>iff_fg.1</code> at the end. I can do it without problems, I just want to check I am not wasting time...</p>",
        "id": 258547805,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634823990
    },
    {
        "content": "<p>Nonsense</p>",
        "id": 258548155,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634824122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/finite_dimensional.20and.20finite/near/258547805\">said</a>:</p>\n<blockquote>\n<p>I've created <a href=\"https://github.com/leanprover-community/mathlib/issues/9854\">#9854</a>. I modified the definition of <code>finite_dimensional</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">module.finite</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>(of course the goal is to get rid of <code>finite_dimensional</code>, but let me start with this). Now I have to modify quite a lot of proofs. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional_submodule</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian.iff_dim_lt_omega.2</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dim_submodule_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dim_lt_omega</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional_submodule</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">iff_fg.2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff_fg.1</span>\n    <span class=\"o\">(</span><span class=\"n\">is_noetherian.iff_dim_lt_omega.2</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dim_submodule_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dim_lt_omega</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))),</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does someone see a better way of doing this? I mean, without starting every new proof with <code>letI : is_noetherian K V := iff_fg.2 _,</code> and using <code>iff_fg.1</code> at the end. I can do it without problems, I just want to check I am not wasting time...</p>\n</blockquote>\n<p>I believe that is the best option, and the hope is you eventually prove enough stuff for <code>module.finite</code> that you don't need <code>is_noetherian</code> anymore.</p>",
        "id": 258549567,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634824636
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9854\">#9854</a> should now compile. <code>finite_dimensional</code> is still there, but now is by definition <code>module.finite</code>. I will upgrade the doc before marking the PR ready for review (in any case it depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/9860\">#9860</a>).<br>\nThe next step will be to remove <code>finite_dimensional</code> completely.</p>",
        "id": 258622074,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634852640
    },
    {
        "content": "<p><code>finite_dimensional R M</code> is now by definition <code>module.finite R M</code>. Do we want to delete it completely? Or should it be an <code>abbreviation</code> or something like that?</p>",
        "id": 259083790,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635248537
    },
    {
        "content": "<p>I'm inclined  to remove it completely.</p>",
        "id": 259084342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635248945
    },
    {
        "content": "<p>Maybe in Lean 4 we can have <code>module K V</code> pretty print as <code>vector_space K V</code> whenever there is an instance <code>[field K]</code> around. Similar for <code>finite_dimensional</code> etc... But in Lean 3 this all won't work.</p>",
        "id": 259084445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635249009
    },
    {
        "content": "<p>Gonna be a big bump for my branches <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259084473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635249022
    },
    {
        "content": "<p>I have to change code of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- An m × n matrix has some finite basis of cardinality m * n</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">s</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span>\n            <span class=\"o\">(</span><span class=\"n\">finset.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian.iff_fg.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">s_basis</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian.finset_basis</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finite_dimensional.finrank_eq_card_finset_basis</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.finrank_matrix</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.card</span><span class=\"o\">,</span> <span class=\"n\">finset.card_fin</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>to start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian.iff_fg.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>Is this the best-practices approach now?</p>",
        "id": 259121698,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635265133
    },
    {
        "content": "<p>This is going to work. A better thing to do is to check which result needs <code>is_noetherian</code> and see if you can generalize it to <code>finite</code>. But of course this requires more work</p>",
        "id": 259123140,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635265744
    },
    {
        "content": "<p>But note that the standard basis of matrices is already there</p>",
        "id": 259123548,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635265903
    },
    {
        "content": "<p>I am on my phone so it's not easy to find it, but I guess is something like <code>matrix.std_basis</code></p>",
        "id": 259123747,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635265990
    },
    {
        "content": "<p>Thanks for checking. The result needing the instance is the first <code>is_noetherian.finset_basis</code> line. Yup, <code>std_basis</code> would be the explicit basis that would satisfy this, but I'm also trying to demo how to make general linear algebra statements, so I was hoping to keep the example and proof close.</p>",
        "id": 259123883,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635266048
    },
    {
        "content": "<p>If you want the dimension we have the general result using <code>module.rank</code> (and cardinals). What you want is probably in  <a href=\"https://github.com/leanprover-community/mathlib/issues/9832\">#9832</a></p>",
        "id": 259123933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635266074
    }
]