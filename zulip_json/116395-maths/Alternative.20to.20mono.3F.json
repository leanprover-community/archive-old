[
    {
        "content": "<p>As part of some work in complex analysis, I wrote a “bound” tactic to prove “obvious” inequalities: <a href=\"https://github.com/girving/ray/blob/main/src/tactics.lean#L70\">https://github.com/girving/ray/blob/main/src/tactics.lean#L70</a>.  Example use within calc: <a href=\"https://github.com/girving/ray/blob/main/src/hartogs.lean#L674\">https://github.com/girving/ray/blob/main/src/hartogs.lean#L674</a>. </p>\n<p>I was new to mathlib and hadn’t noticed the mono tactic, but I think my version is better in some ways.  In particular it knows that multiplication by terms which are obviously nonnegative is monotone, and it seems like neither mono or mono* know this.</p>\n<p>(It’s also possible I’m just confused here: I’d love if mono actually does what I need.)</p>\n<p>On the other hand, “bound” is a fixed list of lemmas rather than the standard attribute method, which is ugly, and it would also be ugly to introduce another attribute when mono also has a dedicated one.</p>\n<p>Is there a good way to clean up bound into something that could be upstreamed?</p>",
        "id": 319021154,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672676188
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#positivity\">tactic#positivity</a> ? Sounds like your bound is a mix of <code>positivity</code> and <code>mono</code>.</p>",
        "id": 319021393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672676283
    },
    {
        "content": "<p>Neat, I didn’t know about positivity.  Is there a good way to mix them together to simulate bound?</p>",
        "id": 319021505,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672676328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> I've written a similar tactic for teaching, see <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#proving-inequalities\">https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#proving-inequalities</a><br>\nThis was actually my motivation for writing the tactic <code>positivity</code>.</p>\n<p>Something like <code>`[apply_rules with mono_rules; try { positivity }]</code> should work as a quick version of your tactic (I think you missed the option to tag a set of lemmas with an attribute and then run <code>apply_rules</code> with that attribute; this has the advantage of being extensible later).</p>",
        "id": 319033620,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672682016
    },
    {
        "content": "<p>Also I have found that one wants to run <code>apply_rules</code> at the <code>reducible</code> level (rather than the default <code>semireducible</code>), otherwise it can e.g. eagerly compare <code>a + b</code> with <code>2</code> by interpreting <code>2</code> as <code>1 + 1</code>.</p>",
        "id": 319033823,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672682125
    },
    {
        "content": "<p>I would like to get something like this into mathlib eventually, but in the experimentation I've done, I've often encountered priority problems: multiple lemmas could apply (or, a lemma and a local hypothesis), and one wants to explicitly mark priorities among these (maybe giving local hypotheses top priority).  So I'd like to implement a version of <code>apply_rules</code> with priorities first.  And this should probably wait for Lean 4 ...</p>",
        "id": 319034100,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672682293
    },
    {
        "content": "<p>And sometimes even a priority system wouldn't be good enough, one wants to manually describe how many levels down to make the comparison.  I think it would be good to have a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congrm\">tactic#congrm</a> 's syntax available for that use case.</p>",
        "id": 319034355,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672682427
    },
    {
        "content": "<p>Yes, priorities are one advantage of the manual list: the most important case is a^2 &gt;= 0 vs. a^n &gt;= 0. :)</p>\n<p>I will try out your quick version!  Thank you!</p>",
        "id": 319081352,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672685266
    },
    {
        "content": "<p>If I remember correctly, you can still get \"priorities\" with an attribute by tagging the lemmas in the right order.  That is,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mono_rules</span><span class=\"o\">]</span> <span class=\"n\">lemma1</span> <span class=\"n\">lemma2</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mono_rules</span><span class=\"o\">]</span> <span class=\"n\">lemma2</span> <span class=\"n\">lemma1</span>\n</code></pre></div>\n<p>But obviously it's a hack either way :)</p>",
        "id": 319081772,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672685535
    },
    {
        "content": "<p>Ah, I see: and I can make a specialized <code>bound_rules</code> attribute that’s searched first but <em>also</em> use <code>mono_rules</code>.  That should work well for now.</p>",
        "id": 319082127,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672685712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/116395-maths/topic/Alternative.20to.20mono.3F/near/319081352\">said</a>:</p>\n<blockquote>\n<p>the most important case is a^2 &gt;= 0 vs. a^n &gt;= 0. :)</p>\n</blockquote>\n<p>By the way, <code>positivity</code> should deal with both of these for you, with somewhat smarter logic than a priority system.  Likewise for anything of the form <code>0 ≤ A</code>. The only lemmas you need to tag with your attribute are those of the form <code>A ≤ B</code> (like <code>mul_le_mul</code>, <code>add_le_add</code>, etc).</p>",
        "id": 319094412,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672693276
    }
]