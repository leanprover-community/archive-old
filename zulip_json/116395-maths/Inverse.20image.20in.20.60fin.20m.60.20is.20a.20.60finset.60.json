[
    {
        "content": "<p>The following code is (obviously) not typechecking. How do I make this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">finvj</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126647766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526481164
    },
    {
        "content": "<p>Well, I guess <code>{i // f i = j}</code> has type <code>Type</code></p>",
        "id": 126648041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481503
    },
    {
        "content": "<p>and you want something of type <code>finset (fin m)</code></p>",
        "id": 126648075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481571
    },
    {
        "content": "<p>so I guess you'd better find a way of constructing something of type <code>finset (fin m)</code></p>",
        "id": 126648124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481604
    },
    {
        "content": "<p>I don't know the first thing about finsets so I guess I start with <code>#print finset</code></p>",
        "id": 126648132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481632
    },
    {
        "content": "<p>oh and that doesn't look too good</p>",
        "id": 126648144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481665
    },
    {
        "content": "<p>you seem to have to supply a multiset and a proof that this multiset has no duplicates</p>",
        "id": 126648158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481706
    },
    {
        "content": "<p>but fortunately finset is in mathlib so there will probably exist a good interface</p>",
        "id": 126648215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481732
    },
    {
        "content": "<p>which in this case will mean \"other constructors\"</p>",
        "id": 126648230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481746
    },
    {
        "content": "<p>so next I guess I'd have a look at <code>finset.lean</code></p>",
        "id": 126648235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481757
    },
    {
        "content": "<p>or maybe I could look for other constructors by typing <code>finset.</code> in VS code and then hitting ctrl-space a while</p>",
        "id": 126648257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526481810
    },
    {
        "content": "<p>oh -- <code>finset.filter</code> exists</p>",
        "id": 126648415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482001
    },
    {
        "content": "<p><code>univ.filter (\\la i, f i = j)</code></p>\n<p>I think you might need the finset  namespace open.</p>",
        "id": 126648416,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526482003
    },
    {
        "content": "<p>aah, here's a finset expert</p>",
        "id": 126648422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482020
    },
    {
        "content": "<p>Aah, cool.</p>",
        "id": 126648430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482030
    },
    {
        "content": "<p>but I was seconds ahead of him ;-)</p>",
        "id": 126648432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482031
    },
    {
        "content": "<p>Yeah, congrats (-;</p>",
        "id": 126648437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482040
    },
    {
        "content": "<p>I'll look at filter!</p>",
        "id": 126648438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482047
    },
    {
        "content": "<p>I was just showing you how I think about these things of course</p>",
        "id": 126648456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482073
    },
    {
        "content": "<p>but actually in retrospect I missed a trick</p>",
        "id": 126648489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482083
    },
    {
        "content": "<p>Instead of saying \"I wonder what's there -- let's take a look at everything\"</p>",
        "id": 126648503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482096
    },
    {
        "content": "<p>I should have said \"let's assume everything is there -- what do I actually want?\"</p>",
        "id": 126648510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482113
    },
    {
        "content": "<p>and what I want is (1) fin n is a finset and (2) a subset of a finset defined by a predicate being true is a finset</p>",
        "id": 126648523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482145
    },
    {
        "content": "<p>and I should by now know that (2) is called <code>filter</code></p>",
        "id": 126648532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482164
    },
    {
        "content": "<p>And I learned that today (-;</p>",
        "id": 126648537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482179
    },
    {
        "content": "<p>I did not yet find out (1)...</p>",
        "id": 126648541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482195
    },
    {
        "content": "<p>Chris's answer isn't working flawlessly here</p>",
        "id": 126648587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> How does one prove fin n is a finset?</p>",
        "id": 126648591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482206
    },
    {
        "content": "<p>My search continues</p>",
        "id": 126648600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482210
    },
    {
        "content": "<p>it'll be there somewhere</p>",
        "id": 126648614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482237
    },
    {
        "content": "<p>hmm</p>",
        "id": 126648618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482247
    },
    {
        "content": "<p>it's somehow not strictly speaking meaningful</p>",
        "id": 126648620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482255
    },
    {
        "content": "<p>fin n is not a finset -- fin n and something of type finset are different things</p>",
        "id": 126648635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482283
    },
    {
        "content": "<p>fin n is not a finset. It is a fintype, and that should be automatically deduced as an instance</p>",
        "id": 126648637,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526482291
    },
    {
        "content": "<p>right</p>",
        "id": 126648639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482295
    },
    {
        "content": "<p>sometimes (univ : finset (fin n)) helps</p>",
        "id": 126648646,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526482308
    },
    {
        "content": "<p>Johan -- why do you want to use finset?</p>",
        "id": 126648698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482327
    },
    {
        "content": "<p>because otherwise it doesn't know the intended type. Also import data.fintype</p>",
        "id": 126648699,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526482334
    },
    {
        "content": "<p>\"set\" doesn't mean what mathematicians think it means</p>",
        "id": 126648736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482407
    },
    {
        "content": "<p>\"set\" in Lean means \"subset of a set\"</p>",
        "id": 126648742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482412
    },
    {
        "content": "<p>\"subset of a given type\"</p>",
        "id": 126648749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482422
    },
    {
        "content": "<p>rather than \"arbitrary set of anything\"</p>",
        "id": 126648751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482427
    },
    {
        "content": "<p>This took me a while to get my head around</p>",
        "id": 126648797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482445
    },
    {
        "content": "<p>\"X : set N\" doesn't mean \"X is a proof that N is a set\", it means \"X is a subset of N\". I sometimes read \"set\" as \"subset_of\".</p>",
        "id": 126648813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482470
    },
    {
        "content": "<p>Because fin n is a type, and you have a predicate on that type, the natural thing to make is either a subtype or a <code>set (fin m)</code></p>",
        "id": 126648912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482571
    },
    {
        "content": "<p>Kevin, I want to use finset, because I want to sum a function over it.</p>",
        "id": 126648916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482577
    },
    {
        "content": "<p>And finset's have all sorts of stuff for that</p>",
        "id": 126648928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482596
    },
    {
        "content": "<p>My guess is that any type with a reasonable finiteness property will have sums</p>",
        "id": 126648930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482603
    },
    {
        "content": "<p>with all sorts of stuff</p>",
        "id": 126648934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482611
    },
    {
        "content": "<p>but on the other hand maybe finsets have the stuff you need</p>",
        "id": 126648945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482629
    },
    {
        "content": "<p>I couldn't find it for fin</p>",
        "id": 126648965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482661
    },
    {
        "content": "<p>In which case I think Chris' answer sounds best. Why not do the dirty work with fintype (which presumably also has filter) and then turn it into a finset</p>",
        "id": 126648968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482674
    },
    {
        "content": "<p>hmm I don't know what a fintype is either</p>",
        "id": 126649037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482768
    },
    {
        "content": "<p>well, I just looked</p>",
        "id": 126649039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482774
    },
    {
        "content": "<p>I know nothing about these finite gadgets</p>",
        "id": 126649042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482780
    },
    {
        "content": "<p>It's only finsets that have sums.</p>",
        "id": 126649043,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526482784
    },
    {
        "content": "<p>but there's a coercion from fintype to finset?</p>",
        "id": 126649089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482807
    },
    {
        "content": "<p>There is a function from fintype to finset. It's not a coercion.</p>",
        "id": 126649103,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526482833
    },
    {
        "content": "<p>It's called univ</p>",
        "id": 126649106,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526482840
    },
    {
        "content": "<p><code>example (m : ℕ) : fintype (fin m) := by apply_instance</code></p>",
        "id": 126649109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482856
    },
    {
        "content": "<p>that's a good start</p>",
        "id": 126649110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482862
    },
    {
        "content": "<p>type class inference will tell you that (fin m) is a fintype</p>",
        "id": 126649123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482873
    },
    {
        "content": "<p>Yes, it's working now</p>",
        "id": 126649138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482906
    },
    {
        "content": "<p>OK great</p>",
        "id": 126649139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482913
    },
    {
        "content": "<p>So now I can start mangling around with my sums</p>",
        "id": 126649143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482918
    },
    {
        "content": "<p>(-;</p>",
        "id": 126649144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482921
    },
    {
        "content": "<p>Now it's Patrick you want to talk to :-)</p>",
        "id": 126649185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526482929
    },
    {
        "content": "<p>But first I need to catch a train</p>",
        "id": 126649186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482931
    },
    {
        "content": "<p>Yes, I am using big_ops</p>",
        "id": 126649187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526482940
    },
    {
        "content": "<p>Actually I currently focused on non-commutative operations. That's why I can't work with finite sets. I'm summing (or multiplying or composing or whatever) elements of (ordered!) lists</p>",
        "id": 126649343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526483178
    },
    {
        "content": "<p>That's why I can't use <code>algebra.big_operators</code></p>",
        "id": 126649408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526483283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <code>algebra.big_operators</code> is probably better than Patrick's big operators in this case.</p>",
        "id": 126649647,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526483649
    }
]