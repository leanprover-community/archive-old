[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, the first cut of my category theory PR has just landed as <a href=\"https://github.com/leanprover/mathlib/pull/152\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/152\">https://github.com/leanprover/mathlib/pull/152</a>. Criticisms welcome!</p>",
        "id": 127526777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528084496
    },
    {
        "content": "<p>Newbie comment: In line 39 of your <code>category.lean</code>, you write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">associativity_lemma</span>\n</pre></div>\n\n\n<p>But isn't this also on the previous line?</p>",
        "id": 127531032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528093879
    },
    {
        "content": "<p>Ooh, good catch. I didn't mean to have associativity marked as a simp, and will have to fix this. It shouldn't be a problem, but won't happen right now.</p>",
        "id": 127531414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528094723
    },
    {
        "content": "<p>Ok</p>",
        "id": 127531557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528094961
    },
    {
        "content": "<p>I submitted a review with 6 trivial comments.</p>",
        "id": 127531564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528094973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> You might want to just review your usage of variables. I saw a number of duplicates mentioned in both a <code>variables</code> declaration <em>and</em> used in a def or theorem. I mentioned one on the PR, but there are more.</p>",
        "id": 127533096,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528097939
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span>. I'm not sure that there were any actual errors, but I have definitely been writing code that sometimes has an explicit argument in a definition, when there is an implicit variable of the same name in scope. I'll be careful to avoid this.</p>",
        "id": 127535271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528102120
    },
    {
        "content": "<p>No, there were no errors. It's just a comment on readability. Looks better now.</p>",
        "id": 127535472,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528102507
    },
    {
        "content": "<p>Another point is that I think so far in mathlib there is no camel casing. I don't have a strong opinion on this, butI noticed that you use <code>NaturalTransformation</code>.</p>",
        "id": 127540230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528111158
    },
    {
        "content": "<p>Once this PR has been merged we can formalise <a href=\"http://pijul.org\" target=\"_blank\" title=\"http://pijul.org\">pijul.org</a>. Once code extraction is in place we will have a fully verified abstract nonsense version control system!</p>",
        "id": 127670781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528310213
    },
    {
        "content": "<p>I'm working with this and I was wondering why <code>is_Isomorphism</code> is defined as it is. In particular, under the label I'd expect it to be a Prop? I'm new to lean in general so I'm sure it's justified, just having difficulty with any statements that involved \"f is an isomorphism\".</p>",
        "id": 130280546,
        "sender_full_name": "Ned Summers",
        "timestamp": 1532531093
    },
    {
        "content": "<p>If f is an isomorphism, one wants to be able to talk about the inverse of f (compose it with other morphisms, and so on). Even though the inverse of f is uniquely determined by f, from Lean's point of view it is still additional data. If <code>is_Isomorphism</code> was a Prop, it would throw away this data and you would need to use the axiom of choice to get a hold of f's inverse, which is generally less convenient.</p>",
        "id": 130281159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532531656
    },
    {
        "content": "<p>If you want the Prop version, you can use <code>nonempty (is_Isomorphism f)</code>.</p>",
        "id": 130281667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532532064
    },
    {
        "content": "<p>This way you have a choice.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">blah1</span> <span class=\"bp\">...</span> <span class=\"o\">:</span> <span class=\"n\">is_Isomorphism</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>  <span class=\"c1\">-- show f is an isomorphism by exhibiting an inverse;</span>\n<span class=\"c1\">-- Lean now knows that the inverse is given by definition by whatever formula you gave</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">blah2</span> <span class=\"bp\">...</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">is_Isomorphism</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>  <span class=\"c1\">-- show f is an isomorphism but don&#39;t specify the inverse;</span>\n<span class=\"c1\">-- Lean knows nothing about the inverse other than the equations contained in is_Isomorphism</span>\n</pre></div>\n\n\n<p>Sometimes you don't care about the exact construction of the inverse, and then the second option is appropriate.</p>",
        "id": 130281941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532532360
    },
    {
        "content": "<p>If <code>is_Isomorphism</code> is not a prop, isn't the name contrary to mathlib conventions?</p>",
        "id": 130293640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532543663
    },
    {
        "content": "<p>I agree, but this is in a not yet revised PR.</p>",
        "id": 130293672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532543706
    },
    {
        "content": "<p>Thanks, Reid. Makes a lot of sense; just getting used to this hesitance about choice. Thanks for the suggestion too of the Prop version.</p>",
        "id": 130344859,
        "sender_full_name": "Ned Summers",
        "timestamp": 1532612951
    }
]