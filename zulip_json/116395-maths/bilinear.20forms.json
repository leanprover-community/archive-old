[
    {
        "content": "<p>Is there a definition that generalizes both bilinear forms <code>M₁ → M₂ → R</code> where <code>M₁</code> and <code>M₂</code> are modules over a ring <code>R</code> and bilinear forms <code>M₁ → M₂ → M₃</code> where <code>M₁</code>, <code>M₂</code>, and <code>M₃</code> are modules over a <strong>commutative</strong> ring <code>R</code>?</p>",
        "id": 199434271,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591052642
    },
    {
        "content": "<p>I don't have an answer to your question Yury. I just wanted to say I'm very glad to see that someone is thinking about such generalisations. I wasn't aware of this thread and spent a few minutes a few days ago messing around with something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">bilinear_pairing</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bilin</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">→</span> <span class=\"n\">M₂</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ring_anti_equiv</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">anti_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span>      <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sesq_form&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">bilinear_pairing</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₁</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">anti_module</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199458844,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1591083770
    },
    {
        "content": "<p>In the former case shouldn't <code>M₁</code> be a right <code>R</code>-module?</p>",
        "id": 199493387,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591105826
    },
    {
        "content": "<p>A right <code>R</code>-module is a left <code>opposite R</code>-module. The question is what to do with the codomain. Should it carry be a bi-module (<code>R</code>-module + <code>opposite R</code>-module + actions commute)?</p>",
        "id": 199530161,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591120978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Note that <a href=\"https://github.com/leanprover-community/mathlib/issues/2884\">#2884</a> drops <code>ring_anti_equiv</code> in favour of <code>R ≃+* Rᵒᵖ</code>.</p>",
        "id": 199530377,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591121082
    }
]