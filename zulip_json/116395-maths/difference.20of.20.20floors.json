[
    {
        "content": "<p>Any easier ways to get this? Or should I put this somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">floor_sub_floor_lt</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑⌊</span><span class=\"n\">r</span><span class=\"bp\">⌋</span> <span class=\"bp\">-</span> <span class=\"bp\">↑⌊</span><span class=\"n\">s</span><span class=\"bp\">⌋</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">calc</span> <span class=\"bp\">↑⌊</span><span class=\"n\">r</span><span class=\"bp\">⌋</span> <span class=\"bp\">-</span> <span class=\"bp\">↑⌊</span><span class=\"n\">s</span><span class=\"bp\">⌋</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"bp\">↑⌊</span><span class=\"n\">s</span><span class=\"bp\">⌋</span>    <span class=\"o\">:</span> <span class=\"n\">sub_le_sub_right</span> <span class=\"o\">(</span><span class=\"n\">int.floor_le</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">sub_lt_sub_left</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_add</span><span class=\"o\">]</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abs_floor_sub_floor_lt</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑|⌊</span><span class=\"n\">r</span><span class=\"bp\">⌋</span> <span class=\"bp\">-</span> <span class=\"bp\">⌊</span><span class=\"n\">s</span><span class=\"bp\">⌋|</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.cast_abs</span><span class=\"o\">,</span> <span class=\"n\">int.cast_sub</span><span class=\"o\">,</span> <span class=\"n\">abs_sub_lt_iff</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">floor_sub_floor_lt</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">abs_sub_comm</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">floor_sub_floor_lt</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 304043621,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1665757424
    },
    {
        "content": "<p>This might be an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem -- often when on paper I'd use the floor the Lean answer is to invoke the archimedean principle, or something ...</p>",
        "id": 304084696,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665769149
    },
    {
        "content": "<p>I think you're just making it harder for yourself with this first calc block. Don't we have the <code>sub</code> version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_lt_add_of_le_of_lt\">docs#add_lt_add_of_le_of_lt</a>?</p>",
        "id": 304085017,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665769282
    },
    {
        "content": "<p>Also I suggest using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_lt_iff_lt_add\">docs#sub_lt_iff_lt_add</a> to interleave rewriting and inequality steps one less time.</p>",
        "id": 304085246,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665769354
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">floor_sub_floor_lt</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑⌊</span><span class=\"n\">r</span><span class=\"bp\">⌋</span> <span class=\"bp\">-</span> <span class=\"bp\">↑⌊</span><span class=\"n\">s</span><span class=\"bp\">⌋</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">int.floor_le</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">int.sub_one_lt_floor</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">le_abs_self</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 304086043,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665769639
    },
    {
        "content": "<p>Thanks for the suggestions :)</p>",
        "id": 304438600,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666006585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/difference.20of.20.20floors/near/304084696\">said</a>:</p>\n<blockquote>\n<p>This might be an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem -- often when on paper I'd use the floor the Lean answer is to invoke the archimedean principle, or something ...</p>\n</blockquote>\n<p>This is more for a program verification context, where we really need <code>floor</code></p>",
        "id": 304438704,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666006625
    }
]