[
    {
        "content": "<p>Is there any reason to have both?</p>",
        "id": 262672209,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637823416
    },
    {
        "content": "<p>I mean, should we use <code>is_coprime</code> for natural numbers as well (and prove <code>is_coprime m n ↔ gcd m n = 1</code> if this was not done yet)?</p>",
        "id": 262672233,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637823479
    },
    {
        "content": "<p>This causes a pretty big dependency bump of some early files IIRC</p>",
        "id": 262672307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637823562
    },
    {
        "content": "<p>Does it? <code>data.nat.basic</code> already depends on <code>algebra.order.ring</code>. <code>ring_theory.coprime.basic</code> also imports <code>tactic.ring</code> but it uses this tactic only once.</p>",
        "id": 262672515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637823736
    },
    {
        "content": "<p>Moving the definition of <code>is_coprime</code> to <code>algebra.ring.basic</code> (and any other lemmas that don't need any more dependencies than that) would probably be enough to resolve the issue</p>",
        "id": 262672541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637823812
    },
    {
        "content": "<p>I remember that we had <code>∃ m n, m * a + n * b = gcd a b</code> somewhere. Do you remember the name of the lemma?</p>",
        "id": 262672687,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637824017
    },
    {
        "content": "<p>something about bezout or gcd_ab</p>",
        "id": 262672695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824037
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.gcd_eq_gcd_ab\">docs#nat.gcd_eq_gcd_ab</a></p>",
        "id": 262672755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824096
    },
    {
        "content": "<p>oh right, I can never grep for this one because all the docs insist on putting the accent in</p>",
        "id": 262672782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824159
    },
    {
        "content": "<p>Guess you'll just have to Google for it in the docs</p>",
        "id": 262672861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637824251
    },
    {
        "content": "<p>I move to rename this lemma to <code>nat.bezout</code></p>",
        "id": 262672875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824280
    },
    {
        "content": "<p>But that's explicitly anti mathlib naming conventions! We don't have <code>binomial_theorem</code>, we have <code>add_pow</code> etc</p>",
        "id": 262672957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637824400
    },
    {
        "content": "<p>What's hard about grepping for <code>gcd_ab</code>?</p>",
        "id": 262673010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637824445
    },
    {
        "content": "<p>because we don't normally use variable names in the definition, so unless you remember that <code>gcd_a</code> or <code>gcd_b</code> are a thing you won't think to search for that</p>",
        "id": 262673030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824490
    },
    {
        "content": "<p>I only remember this because I have to relearn how to search for bezout every 3 months</p>",
        "id": 262673037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/nat.2Ecoprime.20vs.20is_coprime/near/262672957\">said</a>:</p>\n<blockquote>\n<p>But that's explicitly anti mathlib naming conventions! We don't have <code>binomial_theorem</code>, we have <code>add_pow</code> etc</p>\n</blockquote>\n<p>Not entirely, there are certain combinations of symbols that have their own name like <code>trans</code>. Plus, I do think that we should not be using the symbol reading convention when there is another name that is more strongly associated to the lemma (e.g. a \"named\" theorem in maths)</p>",
        "id": 262673096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824565
    },
    {
        "content": "<p>most named theorems have incredibly awkward symbol reading names</p>",
        "id": 262673116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824602
    },
    {
        "content": "<p>Plus, we can always use aliases, which are an under-utilized tool</p>",
        "id": 262673127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824630
    },
    {
        "content": "<p>I see a reason to still have <code>nat.coprime</code>: it's about <code>nat</code></p>",
        "id": 262673202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637824734
    },
    {
        "content": "<p><code>is_coprime</code> needs cast to <code>int</code>.</p>",
        "id": 262673212,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637824743
    },
    {
        "content": "<p>oh, we can't have coprimality on semirings?</p>",
        "id": 262673224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824761
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_coprime\">docs#is_coprime</a> is defined in terms of Bezout</p>",
        "id": 262673232,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637824779
    },
    {
        "content": "<p>oh I see, yeah that definition doesn't work for nat</p>",
        "id": 262673285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824812
    },
    {
        "content": "<p>Probably we can have <code>a * x + b * y = a' * x + b' * y + 1</code> but this will make all proofs longer.</p>",
        "id": 262673290,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637824814
    },
    {
        "content": "<p>It does apply to nat though, it might be fun to have a theorem characterizing what it means for nat</p>",
        "id": 262673306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637824833
    },
    {
        "content": "<p>I think <code>is_coprime (x : nat) (y : nat) &lt;-&gt; x = 1 \\/ y = 1</code></p>",
        "id": 262673403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825000
    },
    {
        "content": "<p>Did the chicken mcnugget theorem pr land yet (on mobile so no link sorry)? That's quite relevant to this sort of thing, generalizing bezout type theorems to semigroups</p>",
        "id": 262676067,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637827646
    }
]