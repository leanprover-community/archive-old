[
    {
        "content": "<p>Is there any reason to have both? I understand that mathematicians care about notation but we can have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">conj</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_star.star</span> <span class=\"n\">complex</span> <span class=\"n\">complex.has_star</span>\n</code></pre></div>\n<p>or something like that.</p>",
        "id": 255139317,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632787031
    },
    {
        "content": "<p>I think <code>star</code> as currently defined goes between a ring and its opposite, right?  I might worry that some unexpected messes would arise with type synonyms.</p>",
        "id": 255139734,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632787258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/complex.20conj.20vs.20has_star.2Estar/near/255139734\">said</a>:</p>\n<blockquote>\n<p>I think <code>star</code> as currently defined goes between a ring and its opposite, right?  I might worry that some unexpected messes would arise with type synonyms.</p>\n</blockquote>\n<p>No, <code>has_star.star</code> is just some function <code>R → R</code>.</p>",
        "id": 255139943,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1632787384
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_star.star\">docs#has_star.star</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_ring\">docs#star_ring</a></p>",
        "id": 255139970,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632787405
    },
    {
        "content": "<p>I can't really think of a good reason to keep <code>conj</code>, this sounds like a good idea.</p>",
        "id": 255140082,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1632787449
    },
    {
        "content": "<p>Also, with unified <code>has_star.star</code> approach we won't have to duplicate code between complex semilinear maps and semilinear maps between star rings.</p>",
        "id": 255140174,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632787514
    },
    {
        "content": "<p>I think, the only reason <code>complex.conj</code> exists is that <code>star_ring</code>s were not there, and nobody cared to do a refactor.</p>",
        "id": 255140314,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632787576
    },
    {
        "content": "<p>Opened an issue <a href=\"https://github.com/leanprover-community/mathlib/issues/9421\">#9421</a></p>",
        "id": 255140597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632787795
    },
    {
        "content": "<p>I actually tried (... not very hard) rewriting <code>star_ring</code> using semilinear stuff last weekend.  I found the star hierarchy a bit awkward to use -- I wonder whether it would be better to have separate classes <code>star_ring</code> equipped with a ring equiv <code>star</code>, <code>star_algebra</code> equipped with an algebra <code>star</code>, etc.</p>",
        "id": 255140654,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632787808
    },
    {
        "content": "<p>Sorry, I don't understand. What exactly is wrong with current setup?</p>",
        "id": 255140897,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632787968
    },
    {
        "content": "<p>Here is the point I found tricky: how do you translate</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">star_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">star_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_star.star</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">star</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to a semilinear statement?  I couldn't think of a simpler way than saying, \"there exists an <code>R</code>-<code>star</code>-semilinear-map from <code>A</code> to itself, which we will call <code>star'</code>, and whose underlying function is equal to <code>star</code>.\"</p>",
        "id": 255140920,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632787988
    },
    {
        "content": "<p>Hmm, I guess you would want <code>star</code> to be a bundled semilinear map.</p>",
        "id": 255141094,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1632788102
    },
    {
        "content": "<p>Yes. (Eventually more ... we want to define semilinear algebra-maps and then star will be such a thing.)</p>",
        "id": 255141148,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632788148
    },
    {
        "content": "<p>But this is why I said above that I wondered if the star hierarchy would work better if <code>star</code> was not just a function, introduced using this <code>has_star</code> class, but came with more structure -- add hom, ring hom, different for each algebraic object.</p>",
        "id": 255141256,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632788219
    },
    {
        "content": "<p>Right, but there's a bootstrap problem here, in the sense that the ring hom we want <code>star</code> to be semilinear over should itself be the <code>star</code> of something else.</p>",
        "id": 255141380,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1632788291
    },
    {
        "content": "<p>Why not define <code>linear_equiv.star</code> to be a bundled semilinear equivalence, and leave <code>star</code> to be unbundled?</p>",
        "id": 255141510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632788398
    },
    {
        "content": "<p>I don't think I understand either Frédéric's comment (i.e., I agree that \"the ring hom we want <code>star</code> to be semilinear over should itself be the <code>star</code> of something else\" but I don't see yet why it's a problem) or Yury's.</p>",
        "id": 255141729,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632788532
    },
    {
        "content": "<p>My point was that if we look at i.e. the complex numbers, and we define <code>has_star.star</code> to be a semilinear equivalence, what is it semilinear over? I guess we would have to keep <code>complex.conj</code>. (Which isn't really a problem.)</p>",
        "id": 255143491,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1632789769
    },
    {
        "content": "<p>I was thinking it would run more as follows: in the instance of the complex numbers as a star-algebra, the star operation is a semilinear-algebra-equiv-involution, semilinear over the ring-equiv-involution which is the star operation of the complex numbers considered as a star-ring.</p>",
        "id": 255143713,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632789933
    },
    {
        "content": "<p>(!)</p>",
        "id": 255143718,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632789936
    },
    {
        "content": "<p>Ah, so you would have totally separate star operations, as opposed to <code>has_star</code> to which we add more properties in separate classes?</p>",
        "id": 255143849,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1632790022
    },
    {
        "content": "<p>We have things like <code>mul_equiv.inv</code> etc. We can define <code>ring_equiv.star</code> and/or <code>star_ring_equiv.star</code> too.</p>",
        "id": 255144030,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632790145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/complex.20conj.20vs.20has_star.2Estar/near/255143849\">said</a>:</p>\n<blockquote>\n<p>Ah, so you would have totally separate star operations, as opposed to <code>has_star</code> to which we add more properties in separate classes?</p>\n</blockquote>\n<p>Yes.  (If we even do it at all ... I'm not sure yet whether we really want to upgrade star-theory from \"convenient formalism invented by Scott to prove a form of Clauser-Horne-Shimony-Holt\" to \"core part of the algebraic hierarchy\")</p>",
        "id": 255144087,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632790195
    },
    {
        "content": "<p>Yury, your idea is that we have both the unbundled <code>star</code> as a function, <em>and</em> the bundled version?</p>",
        "id": 255144228,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632790293
    },
    {
        "content": "<p>(With the bundled version constructed from the unbundled version using the axioms.)</p>",
        "id": 255144255,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632790321
    },
    {
        "content": "<p>I think it would be worth expanding this part of the library actually -- things like C*-algebras are definitely worth having and this is a good start.</p>",
        "id": 255144701,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1632790616
    },
    {
        "content": "<p>That's true -- as another possible point of use: when I was proving complex Stone-Weierstrass I wished that the results I was proving ad-hoc about the involution of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(X, \\mathbb{C})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">C</span><span class=\"mclose\">)</span></span></span></span> defined by pointwise conjugation were in fact general results about conjugate-linear involutions of complex modules.</p>",
        "id": 255144942,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632790778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I think that we should choose some minimal interface (<code>has_star</code>? <code>star_ring</code>? something else?) and define <code>star</code> to be the corresponding bundled automorphism.</p>",
        "id": 255145078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632790833
    },
    {
        "content": "<p>Note that we can have an unbundled <code>has_star.star</code> and all lemmas restated in terms of a bundled automorphism.</p>",
        "id": 255145119,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632790873
    },
    {
        "content": "<p>(and use only the bundled version outside of instance definitions)</p>",
        "id": 255145144,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632790899
    },
    {
        "content": "<p>I was also thinking a bit about how to formalize information theory in a way that covers all cases of interest. The challenge here is to define the relative entropy in a uniform way for probability measures and for quantum states. I think a general definition involving some sort of star algebra might work but I haven't fully thought it through.</p>",
        "id": 255145259,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1632790967
    },
    {
        "content": "<p>I certainly agree that we shouldn't be afraid of messing with the CHSH design. :-) Whatever makes C-star algebras work best!</p>",
        "id": 255150134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632794851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, when you <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/star/basic.lean\">decided</a> to make the star hierarchy a mixin hierarchy,</p>\n<blockquote>\n<p>These are implemented as \"mixin\" typeclasses, so to summon a star ring (for example)<br>\none needs to write <code>(R : Type) [ring R] [star_ring R]</code>.<br>\nThis avoids difficulties with diamond inheritance.</p>\n</blockquote>\n<p>did you do this mainly because you wanted something quick and lightweight?  Would you have made <code>star_{monoid, ring, ...}</code> extend <code>{monoid, ring, ...}</code> if you'd had the energy?</p>",
        "id": 255150539,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632795231
    },
    {
        "content": "<p>I did that because it seemed at that time we wanted to escape combinatorial explosion of the algebra hierarchy, and people were working on the refactors of both <code>ordered_*</code> and <code>topological_*</code> to a mixin model. I didn't want to cause another problem.</p>",
        "id": 255150649,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632795320
    },
    {
        "content": "<p>So no, I don't think I would have, energy permitting. :-)</p>",
        "id": 255150661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632795334
    },
    {
        "content": "<p>I guess what seems odd to me is that the axioms on <code>star</code> in <code>star_monoid</code> amound to <code>is_mul_hom</code> (modulo commutativity), in <code>star_add_monoid</code> they amount to <code>is_add_hom</code>, in <code>star_ring</code> they amount to <code>is_ring_hom</code>, etc.</p>",
        "id": 255150792,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632795435
    },
    {
        "content": "<p>And unbundled morphisms are very unfashionable :)</p>",
        "id": 255150816,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632795460
    },
    {
        "content": "<p>You could say the same thing about <code>semiring</code> looking like <code>is_add_hom (* a)</code> though, right?</p>",
        "id": 255173121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632813825
    },
    {
        "content": "<p>I've PR'd <a href=\"https://github.com/leanprover-community/mathlib/issues/9426\">#9426</a> which adds <code>star_linear_equiv</code> as a semilinear equiv</p>",
        "id": 255191163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632823525
    },
    {
        "content": "<p>I ran into some typeclass inference problems with the semilinear equivalence here.</p>\n<p>I'm not particularly invested in what remains in this PR; perhaps someone more involved in the semilinear refactor should adopt it?</p>",
        "id": 255724006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633085144
    },
    {
        "content": "<p>I'll look at it later, but in the meantime look at how it's done in our \"test\" file <code>src/linear_algebra/conjugate_linear.lean</code> in the <a href=\"https://github.com/leanprover-community/mathlib/tree/semilinear-surjective\">branch#semilinear-surjective</a>.</p>",
        "id": 255733138,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633090163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I could adopt <a href=\"https://github.com/leanprover-community/mathlib/issues/9426\">#9426</a> if you want.</p>",
        "id": 255827614,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1633135834
    },
    {
        "content": "<p>Please do! I'll wrap up the last dependent PR, but the rest can be yours</p>",
        "id": 255860137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633170284
    },
    {
        "content": "<p>I just opened a PR to replace <code>complex.conj</code> and <code>is_R_or_C.conj</code> with <code>star_ring_aut</code>: <a href=\"https://github.com/leanprover-community/mathlib/issues/9640\">#9640</a>. It works quite well!</p>",
        "id": 256874221,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1633789856
    },
    {
        "content": "<p>I'm a little wary of not making <code>star_ring_aut_apply</code> simp any more, as now all the lemmas about <code>star</code> won't apply to it.</p>",
        "id": 256888708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633803740
    },
    {
        "content": "<p>How much breaks if you leave that as <code>simp</code>?</p>",
        "id": 256888742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633803780
    },
    {
        "content": "<p>The main problem with that lemma being a simp lemma is that simp always unbundles <code>star_ring_aut</code>, leaving us with the bare function <code>star</code>. We definitely don't want this.</p>",
        "id": 256909230,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1633824268
    },
    {
        "content": "<p>I removed the simp attribute because it got annoying very quickly.</p>",
        "id": 256909252,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1633824299
    }
]