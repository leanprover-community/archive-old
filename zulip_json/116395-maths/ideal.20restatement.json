[
    {
        "content": "<p>As often, I find myself moving stuff around without doing anything. I just wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">image_subset_iff&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">image_subset_iff</span>\n</pre></div>\n\n\n<p>which is only restating <code>f '' s ⊆ t ↔ s ⊆ f ⁻¹' t </code>in a definitionaly equivalent form, in order to allow rewriting in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">is_ideal&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span>  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_ideal_iff</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">is_ideal</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">is_ideal&#39;</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"bp\">;</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_ideal</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">S</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">y_in</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sum</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_ideal</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">x_in</span> <span class=\"n\">y_in</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a_in</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">prod</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"n\">a_in</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">zero_</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span>\n      <span class=\"n\">add_</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x_in</span> <span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">xy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n          <span class=\"n\">mem_image_of_mem</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk_mem_prod</span> <span class=\"n\">x_in</span> <span class=\"n\">y_in</span><span class=\"o\">),</span>\n        <span class=\"n\">is_ideal&#39;</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">S</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n      <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">image_subset_iff&#39;</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_ideal&#39;</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">S</span> <span class=\"n\">b</span> <span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>which is restating the definition of an ideal in a functional way, which is suitable for topological reasoning in:<br>\n<code>instance ideal_closure [topological_ring α] (S : set α) [is_ideal S] : is_ideal (closure S)</code>. Am I doing this right? Should we have a more systematic way of doing such things, or even a tactic (probably transforming the functional form into a pointwise form)?</p>",
        "id": 134885438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538233198
    },
    {
        "content": "<p>Maybe I should also add the instance proof in order to show why the functional form is useful:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">ideal_closure</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ideal</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">is_ideal_iff</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">mul</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_ideal_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset_closure</span> <span class=\"n\">zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">closure_prod_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">image_closure_subset_closure_image</span> <span class=\"n\">continuous_add&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">closure_mono</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_mul</span> <span class=\"n\">continuous_const</span> <span class=\"n\">continuous_id</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">image_closure_subset_closure_image</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">closure_mono</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134885496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538233315
    },
    {
        "content": "<p>By the way, I have no idea why <code>split</code> is happy to transform the goal <code>is_ideal' S</code> into the expected three goals, but doesn't want to do anything with the goal <code>is_ideal S</code></p>",
        "id": 134885537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538233379
    }
]