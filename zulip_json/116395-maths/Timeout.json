[
    {
        "content": "<p>The following code causes a timeout and I can't figure out where (explicitly instantating type classes doesn't help, nor does <code>set_option trace.type_context.is_def_eq true</code> give a lot of output). Is it something in the kernel?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">vector_space</span> <span class=\"bp\">↥</span><span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">x</span><span class=\"bp\">⟯</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 215315405,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604322313
    },
    {
        "content": "<p>Is it meant to succeed?</p>",
        "id": 215318688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604324203
    },
    {
        "content": "<p>I mean, <code>↥K⟮x⟯</code> is a field and <code>(minimal_polynomial hx).splitting_field</code> is a <code>field</code>, hence an <code>add_comm_group</code>, so I wouldn't expect <code>vector_space ↥K⟮x⟯ (minimal_polynomial hx).splitting_field</code> to be impossible to write.</p>",
        "id": 215320273,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604325071
    },
    {
        "content": "<p>(And the implementation should be <code>ring_hom.to_algebra.to_semimodule</code> on the map sending <code>x</code> to one of the roots and <code>K</code> along <code>algebra_map K (splitting_field _)</code>, no?)</p>",
        "id": 215320467,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604325171
    },
    {
        "content": "<p>But <code>ring_hom.to_algebra</code> is not (and should not be) an instance because it relies on a ring hom</p>",
        "id": 215324100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604326939
    },
    {
        "content": "<p>If you include that line does it still time out?</p>",
        "id": 215324112,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604326946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/Timeout/near/215324100\">said</a>:</p>\n<blockquote>\n<p>But <code>ring_hom.to_algebra</code> is not (and should not be) an instance because it relies on a ring hom</p>\n</blockquote>\n<p>Indeed! My question was not \"why do I need to declare this instance\" :) Only \"how should I understand this timeout, so I can debug similar ones in the future?\"</p>",
        "id": 215325485,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604327520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/Timeout/near/215324112\">said</a>:</p>\n<blockquote>\n<p>If you include that line does it still time out?</p>\n</blockquote>\n<p>If I replace the <code>sorry</code>, it works indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">vector_space</span> <span class=\"bp\">↥</span><span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">x</span><span class=\"bp\">⟯</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.to_algebra</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215325613,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604327567
    },
    {
        "content": "<p>Of course in my actual code, I only define an <code>algebra</code>, using a more general form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">algebra_of_splits</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"bp\">↥</span><span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">x</span><span class=\"bp\">⟯</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">algebra_adjoin_splitting_field</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">algebra_of_splits</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">splitting_field.splits</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215325994,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604327737
    },
    {
        "content": "<p>The <code>vector_space</code> instance is then inferred correctly.</p>",
        "id": 215326034,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604327756
    }
]