[
    {
        "content": "<p>Several files promote <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_ring.to_non_unital_non_assoc_semiring\">docs#lie_ring.to_non_unital_non_assoc_semiring</a> to an instance (where multiplication is given by <code>has_bracket</code>), which basically immediately creates a diamond with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_ring.of_associative_ring\">docs#lie_ring.of_associative_ring</a>. How do I deal with this safely? Shouldn't this instance be on a type synonym instead?</p>",
        "id": 294256214,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660912689
    },
    {
        "content": "<p>More specifically, in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_lie_algebra.lift_aux_map_smul\">docs#free_lie_algebra.lift_aux_map_smul</a> this instance leads to two different multiplications on <code>R</code>, both of which can lift to scalar multiplications on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lib\">docs#lib</a>. Currently we avoid this by restricting the lifting to scalars to <code>distrib_mul_action</code> but in the right generality (as I implemented <a href=\"https://github.com/leanprover-community/mathlib/pull/16132\">#16132</a>) they immediately conflict.</p>",
        "id": 294256771,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660912873
    },
    {
        "content": "<p>I haven't looked at <a href=\"https://github.com/leanprover-community/mathlib/pull/16132\">#16132</a> to understand why it triggers this issue but you're right: we have a diamond if <code>lie_ring.of_associative_ring</code> and <code>lie_ring.to_non_unital_non_assoc_semiring</code> are simultaneously instances so we should use a type synonym.</p>",
        "id": 294260174,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660914078
    },
    {
        "content": "<p>Ok, I'll add that to my stack of TODOs :)</p>",
        "id": 294262317,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660914833
    },
    {
        "content": "<p>Any suggestion for a name: <code>bracket_ring</code>?</p>",
        "id": 294263190,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660915137
    },
    {
        "content": "<p>Or maybe <code>commutator_ring</code>?</p>",
        "id": 294263572,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660915267
    },
    {
        "content": "<p>That was surprisingly straightforward: <a href=\"https://github.com/leanprover-community/mathlib/pull/16154\">#16154</a></p>",
        "id": 294268041,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660916257
    },
    {
        "content": "<p>Great, I'll review it as soon as it's passed CI!</p>",
        "id": 294269108,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660916600
    }
]