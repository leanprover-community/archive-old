[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> am I missing some file when I can't find</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">frequently_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 192913954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586015439
    },
    {
        "content": "<p>and friends like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">inf_neq_bot_iff_frequently_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">⊓</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span>\n</pre></div>",
        "id": 192914043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586015577
    },
    {
        "content": "<p>Maybe I'm missing part of the API. I wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">inf_neq_bot_iff_frequently_right</span><span class=\"o\">,</span>\n                           <span class=\"n\">frequently_map</span><span class=\"o\">,</span>\n                           <span class=\"n\">frequently_at_top</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>where I can find only the last rewriting lemma in mathlib currently.</p>",
        "id": 192914824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586016632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> while you're here, could you also answer this thread of questions?</p>",
        "id": 192956302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586088398
    },
    {
        "content": "<p>The goal of the <code>∀ᶠ</code> and <code>∃ᶠ</code>notations is precisely to avoid ever writing <code>U ∈ f</code>. It works pretty well in most situations, but sometimes this is unavoidable. I don't think the interface between the two points of view is well developed, so I wouldn't be surprised if your lemmas were not there. Still, <code>filter.frequently_iff</code> is a crazy gap!</p>",
        "id": 192956877,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586089271
    },
    {
        "content": "<p>Ok, this is what I thought. I think we should have those lemmas, but try to avoid using them when possible.</p>",
        "id": 192957028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586089518
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/2330\" title=\"https://github.com/leanprover-community/mathlib/issues/2330\">#2330</a>.</p>",
        "id": 192967532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586105275
    }
]