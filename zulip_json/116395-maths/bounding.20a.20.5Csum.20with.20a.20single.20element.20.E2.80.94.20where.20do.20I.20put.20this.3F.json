[
    {
        "content": "<p>I found myself having to use this often enough to extract a lemma. Where in <code>mathlib</code> should I put it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_gt_element</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">S.sum</span> <span class=\"n\">f</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">calc</span> <span class=\"n\">S.sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">S.erase</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">finset.insert_erase</span>\n  <span class=\"bp\">...</span>          <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">n</span>                          <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274008226,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646328697
    },
    {
        "content": "<p><code>algebra/big_operators/basic.lean</code> seems fine, but if it goes in mathlib it should:</p>\n<ul>\n<li>use le instead of ge</li>\n<li>be generalized to be about prod and have the sum version generated with to_additive</li>\n<li>be generalized to more general types than nat to nat where possible</li>\n<li>if the proof is just a <code>calc</code> you don't need <code>begin... end</code></li>\n<li>be called something like <code>le_prod_of_mem</code></li>\n</ul>",
        "id": 274009710,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646329236
    },
    {
        "content": "<p>how do you generalize this to <code>prod</code>? it doesn't work for <code>prod</code> because other terms might be zero</p>",
        "id": 274010010,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646329350
    },
    {
        "content": "<p>is there a typeclass for \"ordered type where only 0 has an additive inverse\"?</p>",
        "id": 274010073,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646329379
    },
    {
        "content": "<p>Ordered semiring, maybe?</p>",
        "id": 274010285,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1646329463
    },
    {
        "content": "<p>You're only using addition here so there shouldn't be an issue, you just have 1's instead of zeroes.<br>\nThings like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.prod_eq_prod_compl_mul\">docs#fintype.prod_eq_prod_compl_mul</a> in the file I mentioned are really close to this</p>",
        "id": 274010288,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646329465
    },
    {
        "content": "<p>your lemma looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.single_le_sum\">docs#finset.single_le_sum</a> specialized to N</p>",
        "id": 274010309,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1646329477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/116395-maths/topic/bounding.20a.20.5Csum.20with.20a.20single.20element.20.E2.80.94.20where.20do.20I.20put.20this.3F/near/274010309\">said</a>:</p>\n<blockquote>\n<p>your lemma looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.single_le_sum\">docs#finset.single_le_sum</a> specialized to N</p>\n</blockquote>\n<p>Do you just know this lemma, or did you find it with some query?</p>",
        "id": 274011438,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646329931
    },
    {
        "content": "<p>It is located where you would expect theorems about ordering and bigops to be, so one way to find this theorem is to open the file (in src or docgen) and browse around</p>",
        "id": 274011900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646330132
    },
    {
        "content": "<p>Note that you would have to do this eventually anyway when deciding where to put your theorem</p>",
        "id": 274011943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646330148
    },
    {
        "content": "<p>I guessed that it should be a name involving <code>le_sum</code> and searched for that in the doc. Then I saw a name of a lemma which sounded similar but was not exactly the one I looked for, looked around a bit in the file and found it</p>",
        "id": 274011947,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1646330149
    },
    {
        "content": "<p>I did not guess the word <code>single</code> because that's not a very frequent one</p>",
        "id": 274012025,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1646330171
    },
    {
        "content": "<p>okay. I'm asking because in Isabelle I'd do <code>find_theorems \"_ \\in _\" \"_ &lt;= \\sum _\"</code></p>",
        "id": 274012448,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646330351
    },
    {
        "content": "<p>You can use <code>#find</code> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a> for that kind of search</p>",
        "id": 274013738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646330767
    },
    {
        "content": "<p>don't I need the full type of the theorem for <code>#find</code> (which itself may contain holes)?</p>",
        "id": 274015309,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646331425
    },
    {
        "content": "<p>I don't think so? It should be looking for the term as a subterm of the theorem statement</p>",
        "id": 274015362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646331460
    },
    {
        "content": "<p>You can also use text search btw</p>",
        "id": 274015514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646331510
    },
    {
        "content": "<p>ah, looks like you're right. How can I provide multiple patterns? <code>,</code> terminates the entire command</p>",
        "id": 274015875,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646331685
    },
    {
        "content": "<p>I don't think you can</p>",
        "id": 274015918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646331712
    },
    {
        "content": "<p>the situation is not that great, I will admit. Most people seem to find <code>library_search</code> the most helpful, and I usually use a combination of autocomplete and browsing in files</p>",
        "id": 274016087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646331772
    },
    {
        "content": "<p>it helps a lot to learn the naming convention</p>",
        "id": 274016111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646331786
    },
    {
        "content": "<p>it is not unusual to be able to guess a name exactly, or stumble on the theorem you wanted by a redeclaration error</p>",
        "id": 274016173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646331820
    }
]