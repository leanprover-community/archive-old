[
    {
        "content": "<p>Why does this work for prime ideals, but not normal subgroups?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">--works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">normal</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 199968661,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591440425
    },
    {
        "content": "<p>So it seems that the difference is that <code>is_prime</code> is a structure (<code>and</code>), but <code>normal</code> is not. The class attribute doesn't seem to work on defs defined to start with two <code>pi</code>s, one <code>pi</code> is fine for some reason. Making <code>normal</code> irreducible also works.</p>\n<p>This also doesn't work, so the <code>fact</code> idea might be slightly flawed.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 200014747,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591519747
    },
    {
        "content": "<p>This is the main reason that 1 isn't prime</p>",
        "id": 200014966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591520106
    },
    {
        "content": "<p>Maybe <code>top</code> shouldn't be normal either and then everything will be fine</p>",
        "id": 200015034,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591520206
    },
    {
        "content": "<p>That sounds like a bug in typeclass inference</p>",
        "id": 200015785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591521691
    },
    {
        "content": "<p><code>top</code> isn't prime but I'm afraid it's normal</p>",
        "id": 200015974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591521994
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/300\">lean#300</a></p>",
        "id": 200018129,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591525892
    },
    {
        "content": "<p>Lean is now about five times less relaxed</p>",
        "id": 200019159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591527626
    },
    {
        "content": "<p>Oh huh, I wonder whether this would fix some of the odd errors we used to get with limits in category theory as well.</p>",
        "id": 200023017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591534360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/Difference.20between.20is_prime.20and.20normal/near/200018129\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/issues/300\">lean#300</a></p>\n</blockquote>\n<p>If this is released I can fix my PR.</p>",
        "id": 200024135,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591536199
    }
]