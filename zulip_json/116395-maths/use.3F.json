[
    {
        "content": "<p>I am trying to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.comap</span> <span class=\"o\">(</span><span class=\"n\">localization_map.lin_coe</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring.of</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">I.val</span>\n</code></pre></div>\n\n<p>and I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">g'</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.comap</span> <span class=\"o\">(</span><span class=\"n\">localization_map.lin_coe</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring.of</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">I.val</span>\n</code></pre></div>\n\n<p>where <code>?m_1</code> must be of type A, and <code>y</code> is of type A. However, none of <code>exact</code>, <code>refine</code>, <code>assumption</code> or <code>use</code> work. </p>\n<p>Any help is appreciated. Thank you!</p>",
        "id": 214675694,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603790332
    },
    {
        "content": "<p>Try <code>convert g'</code></p>",
        "id": 214675752,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603790376
    },
    {
        "content": "<p>Doesn't work :(</p>",
        "id": 214675875,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603790432
    },
    {
        "content": "<p>Does it fail or result in new goals?</p>",
        "id": 214675891,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603790445
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.comap</span> <span class=\"o\">(</span><span class=\"n\">localization_map.lin_coe</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring.of</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">I.val</span>\n</code></pre></div>",
        "id": 214675908,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603790457
    },
    {
        "content": "<p>Well the next goal is to prove that <code>?m_1 : A</code>.</p>",
        "id": 214675954,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603790497
    },
    {
        "content": "<p>Hmm, could you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? It looks like Lean is getting confused earlier on.</p>",
        "id": 214675966,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603790510
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/d008b1c22ad3f20f61915a66f95a64615709d07f/src/ring_theory/dedekind_domain.lean#L286\">https://github.com/leanprover-community/mathlib/blob/d008b1c22ad3f20f61915a66f95a64615709d07f/src/ring_theory/dedekind_domain.lean#L286</a></p>",
        "id": 214676234,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603790672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/use.3F/near/214676234\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/d008b1c22ad3f20f61915a66f95a64615709d07f/src/ring_theory/dedekind_domain.lean#L286\">https://github.com/leanprover-community/mathlib/blob/d008b1c22ad3f20f61915a66f95a64615709d07f/src/ring_theory/dedekind_domain.lean#L286</a></p>\n</blockquote>\n<p>Does this help? If not, I'll make an mwe.</p>",
        "id": 214676257,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603790694
    },
    {
        "content": "<p>That should be enough, thanks! One moment please...</p>",
        "id": 214676405,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603790780
    },
    {
        "content": "<p>Aha, the problem seems to be this: you define <code>y</code> in one subgoal, but it should be used in another subgoal.</p>",
        "id": 214676784,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603791042
    },
    {
        "content": "<p>(I'm guessing you did this because you got errors when writing <code>cases (g : ∃ (x : localization (non_zero_divisors A)), x ∈ I)</code>?</p>",
        "id": 214676937,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603791134
    },
    {
        "content": "<p>I did try <code>rotate</code>, but that ended up giving me other issues with using <code>cases</code>, hence I did not proceed..</p>",
        "id": 214676942,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603791140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/116395-maths/topic/use.3F/near/214676937\">said</a>:</p>\n<blockquote>\n<p>(I'm guessing you did this because you got errors when writing <code>cases (g : ∃ (x : localization (non_zero_divisors A)), x ∈ I)</code>?</p>\n</blockquote>\n<p>Haha yes exactly</p>",
        "id": 214676963,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603791154
    },
    {
        "content": "<p>Hmm, I don't know to fix the proof because I'm not quite sure what you're trying to prove here actually. Your goal <code>↥(submodule.comap (localization_map.lin_coe (fraction_ring.of A)) I.val)</code> means \"we can compute an element of the ideal\" (let's just call it <code>J</code>), but surely we have <code>0 \\in J</code>?</p>",
        "id": 214677305,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603791371
    },
    {
        "content": "<p>What I actually want to prove is that if we have a fractional ideal I, and I \\leq 1, then (the preimage of) I must be an ideal of A.</p>",
        "id": 214677543,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603791544
    },
    {
        "content": "<p>Ah, this turns out to be called <code>submodule.comap</code>, as in the function you used to construct your goal :)</p>",
        "id": 214677693,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603791634
    },
    {
        "content": "<p>(In fact, this holds for all fractional ideals: everything outside of <code>A</code> is just discarded by <code>comap</code>.)</p>",
        "id": 214677873,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603791743
    },
    {
        "content": "<p>Ah I see, hence the I \\le 1 is not needed!</p>",
        "id": 214678226,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603791972
    },
    {
        "content": "<p>Apologies for this, and thank you for your help! :)</p>",
        "id": 214678259,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1603792002
    },
    {
        "content": "<p>You're welcome!</p>",
        "id": 214678313,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603792041
    }
]