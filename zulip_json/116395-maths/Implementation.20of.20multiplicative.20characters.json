[
    {
        "content": "<p>This is motivated by the discussion <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/286088587\">here</a>:</p>\n<p>We consider multiplicative characters from one commutative ring <code>R</code> into another commutative ring <code>R'</code>.</p>\n<p><strong>Question:</strong> Should such an object just be a <code>monoid_with_zero_hom</code> (alternative (1)), or is it preferable to implement this as a <code>monoid_hom</code> with the additional property that it maps non-units to zero (alternative (2))?</p>",
        "id": 286396064,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655404988
    },
    {
        "content": "<p>The main advantage of alternative (2) is that one can then define a <code>comm_group</code> structure on <code>mul_char R R'</code>.</p>",
        "id": 286396160,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655405038
    },
    {
        "content": "<p>A possible disadvantage is that the restriction regarding non-units may be too strong in some contexts. For example, a Dirichlet character would not qualify as a multiplicative character. (But it could be obtained by composing <code>ℤ → zmod n</code> with a multiplicative character on <code>zmod n</code>.)</p>",
        "id": 286396395,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655405128
    },
    {
        "content": "<p>I have implemented both versions. Alternative (1) is in <a href=\"https://github.com/leanprover-community/mathlib/pull/14716\">#14716</a> amd alternative (2) is in <a href=\"https://github.com/leanprover-community/mathlib/pull/14768\">#14768</a>.</p>",
        "id": 286396545,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655405193
    },
    {
        "content": "<p>I'd appreciate comments (at this stage, on the choice between the alternatives; fine-tuning can be done later).</p>",
        "id": 286396618,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655405231
    },
    {
        "content": "<p>Side-by-side comparison: <a href=\"https://github.com/leanprover-community/mathlib/compare/legendre_symbol_mul_char...variant\">https://github.com/leanprover-community/mathlib/compare/legendre_symbol_mul_char...variant</a></p>",
        "id": 286409425,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655411484
    },
    {
        "content": "<p>I'm inclined to support <code>mul_char</code> because it allows us to define a <code>comm_group</code> structure. (The objection is that <code>monoid_with_zero_hom</code>s don't have inverses, right?)</p>",
        "id": 286468695,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655459719
    },
    {
        "content": "<p>Yes; there is a difference when the domain is not a field (i.e., when there are non-zero non-units). The unit <code>monoid_with_zero_hom</code>, it is is defined (I don't know if <code>M \\to*0 M'</code> is a <code>monoid</code> instance), would map everything except zero to one, so when a <code>monoid_with_zero_hom</code> maps a nonzero non-unit to zero (or a non-unit), it does not have an inverse.</p>",
        "id": 286474278,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655463688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Do you have input on this?</p>",
        "id": 286501348,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655478100
    },
    {
        "content": "<p><code>monoid_with_zero_hom</code> is a monoid, right? The unit sends <code>0</code> to <code>0</code> and everything else to <code>1</code> if I am not confused.</p>",
        "id": 286502089,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655478414
    },
    {
        "content": "<p>Hmm...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*₀</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*₀</span> <span class=\"n\">M'</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">monoid_with_zero</span> <span class=\"n\">M'</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*₀</span> <span class=\"n\">M'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*₀</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>but a monoid should have <code>has_pow</code>, right?</p>",
        "id": 286504204,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655479332
    },
    {
        "content": "<p>(Same with <code>f * f</code> and <code>has_mul</code>or <code>1</code> and <code>has_one</code>.)</p>",
        "id": 286504251,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655479355
    },
    {
        "content": "<p>So it looks like the <code>monoid</code> instance on <code>monoid_with_zero_hom M M'</code> is missing.</p>",
        "id": 286504318,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655479382
    },
    {
        "content": "<p>It's missing, but it's true?</p>",
        "id": 286505815,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655480025
    },
    {
        "content": "<p>It seems so</p>",
        "id": 286505829,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655480030
    },
    {
        "content": "<p>Do you not need the monoids to be commutative?</p>",
        "id": 286509524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655481676
    },
    {
        "content": "<p>Yes yes, in applications the monoids will be commutative</p>",
        "id": 286513745,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655483770
    },
    {
        "content": "<p>Wait isn't the issue that you need source and target to be equal?</p>",
        "id": 286518536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655486298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Implementation.20of.20multiplicative.20characters/near/286518536\">said</a>:</p>\n<blockquote>\n<p>Wait isn't the issue that you need source and target to be equal?</p>\n</blockquote>\n<p>No, you just multiply the values: <code>mul f g = λ x, f x * g x</code>.</p>",
        "id": 286519720,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655486942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Implementation.20of.20multiplicative.20characters/near/286509524\">said</a>:</p>\n<blockquote>\n<p>Do you not need the monoids to be commutative?</p>\n</blockquote>\n<p>You need the target to be commutative for the product to be a homomorphism again:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo>⋅</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>⋅</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>⋅</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>⋅</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo><mover><mo><mo>=</mo></mo><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">!</mo></mover></mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mo>⋅</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mo>⋅</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (f \\cdot g)(x \\cdot y) = f(x \\cdot y) \\cdot g(x \\cdot y) = f(x) \\cdot f(y) \\cdot g(x) \\cdot g(y) \\stackrel{!}{=} f(x) \\cdot g(x) \\cdot f(y) \\cdot g(y) = (f \\cdot g)(x) \\cdot (f \\cdot g)(y) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.403em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.153em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">=</span></span></span><span style=\"top:-3.5669em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mclose mtight\">!</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>But even with <code>[comm_monoid_with_zero M']</code>, the <code>has_one</code> instance is not found.</p>",
        "id": 286520140,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655487154
    },
    {
        "content": "<p>But it does find <code>has_mul</code>...</p>",
        "id": 286520284,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655487232
    },
    {
        "content": "<p>Isn't the trivial monoid a monoid with zero where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1 = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>? If so, then this doesn't hold for silly reasons because the set of monoid-with-zero-homs from this trivial monoid_with_zero to the monoid_with_zero <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> is empty</p>",
        "id": 286521628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655487921
    },
    {
        "content": "<p>OTOH if you have a group_with_zero as the source, then it should be okay because I think those have an assumption that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo mathvariant=\"normal\">≠</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\neq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 286521705,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655487971
    },
    {
        "content": "<p>Or maybe assuming <code>[nontrivial]</code> is enough</p>",
        "id": 286521762,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655487980
    },
    {
        "content": "<p>In any case, this seems to point in the direction that defining <code>mul_char</code> such that mult. characters form a group is the right way to go.</p>",
        "id": 286523086,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655488669
    },
    {
        "content": "<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero_hom.monoid\">docs#monoid_with_zero_hom.monoid</a> not exist?</p>",
        "id": 286549143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655504122
    },
    {
        "content": "<p>It would be <code>monoid_with_zero_hom.comm_monoid</code> at any rate.</p>",
        "id": 286549300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655504237
    },
    {
        "content": "<p>I'm wondering if we have the monoid of endomorphisms</p>",
        "id": 286552322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655506767
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.End\">docs#monoid.End</a></p>",
        "id": 286552457,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655506857
    },
    {
        "content": "<p>oh maybe you mean of something else</p>",
        "id": 286552481,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655506875
    },
    {
        "content": "<p>no <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero.End\">docs#monoid_with_zero.End</a> ...</p>",
        "id": 286552554,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655506916
    },
    {
        "content": "<p>here you go <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.End\">docs#category_theory.End</a></p>",
        "id": 286552645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655506975
    },
    {
        "content": "<p>It looks like the consensus is to go with <code>mul_char</code> as <code>monoid_hom</code> sending nonunits to zero.<br>\nI have therefore closed <a href=\"https://github.com/leanprover-community/mathlib/pull/14716\">#14716</a>. There is a new version of <a href=\"https://github.com/leanprover-community/mathlib/pull/14768\">#14768</a>, where the assumptions are weakened: the domain is a <code>comm_monoid</code> and the target is a <code>comm_monoid_with_zero</code> (we need zero in the target, since we map nonunits to zero). In this setting, it is still true that <code>mul_char R R'</code> has a structure as a <code>comm_group</code>.<br>\n<span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I have removed the \"WIP\" label and would like to start the review process on <a href=\"https://github.com/leanprover-community/mathlib/pull/14768\">#14768</a>.</p>",
        "id": 287272292,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656027728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I see two <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> on the previous message, but no comments so far on <a href=\"https://github.com/leanprover-community/mathlib/pull/14768\">#14768</a>. I'm not sure how to interpret this.</p>\n<p>One thing I'd like to know is whether the way I have set up <code>mul_char</code>. <code>mul_char_class</code> and the commutative group structure is OK for mathlib. (I haven't done something similar before. For <code>mul_char_class</code>, I basically copied existing code and modified it.)</p>",
        "id": 287613519,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656352229
    },
    {
        "content": "<p>Do you know about <code>fun_like</code>? I don't really understand it properly; <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/fun_like/basic.lean#L11-L116\">here</a> is the documentation.</p>",
        "id": 287614843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656352852
    },
    {
        "content": "<p>I ask because you've defined <code>ext</code> and <code>ext'</code> and neither of them look like the thing in the documentation, but as I say I don't understand this properly yet.</p>",
        "id": 287614970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656352919
    },
    {
        "content": "<p>I think what I do is more similar to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/fun_like/basic.lean#L52-L116\">this later part of the file</a>, building on <code>monoid_hom</code>.<br>\nThe rationale behind <code>ext'</code> and <code>ext</code> is that you want to only check equality on units (since nonunits are mapped to zero anyway) -- this is what <code>ext</code> does, but its proof needs a version of <code>ext'</code>. In particular, I want <code>ext</code> to be the <code>[@ext]</code> lemma, so that I can write <code>ext a ha</code> in my proofs to get the goal <code>something a = something_other a</code> under the assumption <code>ha : is_unit a</code>.</p>",
        "id": 287618187,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656354468
    },
    {
        "content": "<p>I reviewed -- mostly superficial comments. Thanks a lot!</p>",
        "id": 287624075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656357079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Implementation.20of.20multiplicative.20characters/near/287624075\">said</a>:</p>\n<blockquote>\n<p>I reviewed -- mostly superficial comments. Thanks a lot!</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 287625209,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656357695
    },
    {
        "content": "<p>How do I get the current mathlib version into my branch? I tried <code>leanproject up</code>, but this does not seem to havethe desired effect. (Concretely, I would like to have <a href=\"https://github.com/leanprover-community/mathlib/pull/14873\">#14873</a> available, so that I can remove some decidability stuff.)</p>",
        "id": 287629806,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656360147
    },
    {
        "content": "<p>leanproject up won't do that if you are not on the master branch. You should rebase your PR branch on top of master and then get the cache.</p>",
        "id": 287630155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656360317
    },
    {
        "content": "<p>I could try to look this up, but it will be faster if you just tell me the relevant <code>git</code> commands <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 287630498,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656360469
    },
    {
        "content": "<p>If you don't know git then you should probably make a copy of your mathlib folder just in case. Then <code>git rebase master</code> and then <code>leanproject get-cache --fallback download-first</code>. Of course you won't get cache for your branch, only the latest master cache</p>",
        "id": 287630816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656360629
    },
    {
        "content": "<p><code>Error: No such option: --fallback</code><br>\nWithout the <code>--fallback ...</code>, it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage.azureedge.net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">cad5c63bb1a52569d2fe913534c18f983819201b.tar.xz</span> <span class=\"n\">to</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mstoll</span><span class=\"bp\">/.</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">cad5c63bb1a52569d2fe913534c18f983819201b.tar.xz</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage.azureedge.net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">cad5c63bb1a52569d2fe913534c18f983819201b.tar.gz</span> <span class=\"n\">to</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mstoll</span><span class=\"bp\">/.</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">cad5c63bb1a52569d2fe913534c18f983819201b.tar.gz</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage.azureedge.net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">cad5c63bb1a52569d2fe913534c18f983819201b.tar.bz2</span> <span class=\"n\">to</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mstoll</span><span class=\"bp\">/.</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">cad5c63bb1a52569d2fe913534c18f983819201b.tar.bz2</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">GitHub</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">github</span> <span class=\"kn\">section</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"bp\">'</span><span class=\"n\">git</span> <span class=\"n\">config'</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">will</span> <span class=\"n\">use</span> <span class=\"n\">GitHub</span> <span class=\"k\">with</span> <span class=\"n\">no</span> <span class=\"n\">authentication</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n</code></pre></div>",
        "id": 287631317,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656360904
    },
    {
        "content": "<p>Can you tell me the result of <code>leanproject --version</code>?</p>",
        "id": 287631579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656361076
    },
    {
        "content": "<p><code>leanproject, version 0.0.8</code></p>",
        "id": 287631698,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656361131
    },
    {
        "content": "<p>That's ancient!</p>",
        "id": 287631709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656361144
    },
    {
        "content": "<p>You should update mathlibtools</p>",
        "id": 287631752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656361175
    },
    {
        "content": "<p>Something like <code>pip install -U mathlibtools</code></p>",
        "id": 287631776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656361197
    },
    {
        "content": "<p><code>leanproject, version 1.1.1</code></p>",
        "id": 287632164,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656361420
    },
    {
        "content": "<p>I seem to have installed the old version when I played around with the Natural Numbers Game a couple years back...</p>",
        "id": 287632241,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656361458
    },
    {
        "content": "<p>OK, now I don't get an error message any more, but the PR I was looking for is still not there.</p>",
        "id": 287632738,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656361742
    },
    {
        "content": "<p>I don't understand what \"the PR I was looking for is still not there\" means</p>",
        "id": 287633313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656362072
    },
    {
        "content": "<p>What I mean is, the addition to <code>algebra.group.units</code> that was merged with <a href=\"https://github.com/leanprover-community/mathlib/pull/14873\">#14873</a>  this morning is not visible in the mathlib version I have after <code>leanproject get-cache --fallback download-first</code>-</p>",
        "id": 287633503,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656362197
    },
    {
        "content": "<p>I think <code>leanproject get-cache</code> only gets the oleans (not .lean files) up to the commit where your (local) leanproject is. So you need to <code>rebase</code> first, and <code>get-cache</code> after that.</p>",
        "id": 287635272,
        "sender_full_name": "Bart Michels",
        "timestamp": 1656363176
    },
    {
        "content": "<p>Indeed, did you follow my instruction to git rebase? Maybe I should have been more explicit and tell you to first update your master branch. Something like <code>git checkout master &amp;&amp; git pull &amp;&amp; git checkout your_branch_name &amp;&amp; git rebase master</code></p>",
        "id": 287635560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656363314
    },
    {
        "content": "<p>(you can probably do that in one command, but I never remember those more complicated commands)</p>",
        "id": 287635611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656363346
    },
    {
        "content": "<p>OK, after all this (including <code>leanproject get-cache ...</code>), it seems to be there. Thanks for your help!</p>",
        "id": 287636262,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656363680
    },
    {
        "content": "<p>I am very busy this week, sorry for the delay!</p>",
        "id": 287637251,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1656364149
    },
    {
        "content": "<p>I will have a look this weekend</p>",
        "id": 287637276,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1656364173
    },
    {
        "content": "<p>Now I get an error message when I try to push my latest commits... (something along the lines of \"the head of my branch is behind its external counterpart\" [I get the message in German, so this is only a rough approximation to the English version]).</p>",
        "id": 287637591,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656364329
    },
    {
        "content": "<p>Try pulling again?</p>",
        "id": 287637744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656364408
    },
    {
        "content": "<p>This gives me (roughly): \"fatal: fast forward impossible, abort.\"</p>",
        "id": 287637841,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656364452
    },
    {
        "content": "<p>Of course git complains that things diverged but this isn't a big issue. Is this a PR that is already opened?</p>",
        "id": 287638010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656364552
    },
    {
        "content": "<p>Yes. (<a href=\"https://github.com/leanprover-community/mathlib/pull/14768\">#14768</a>)</p>",
        "id": 287638072,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656364572
    },
    {
        "content": "<p>Ok, I think you can force push. This will mess up with Kevin's review but he won't mind.</p>",
        "id": 287638431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656364754
    },
    {
        "content": "<p>so <code>git push -f</code></p>",
        "id": 287638458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656364771
    },
    {
        "content": "<p>from your PR branch</p>",
        "id": 287638466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656364776
    },
    {
        "content": "<p>OK; this gives at least no error messages...</p>",
        "id": 287638503,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656364798
    },
    {
        "content": "<p>That's the magic of <code>--force</code> in general...</p>",
        "id": 287638577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656364820
    },
    {
        "content": "<p>Can you check that <a href=\"https://github.com/leanprover-community/mathlib/pull/14768/files\">https://github.com/leanprover-community/mathlib/pull/14768/files</a> looks like what you would hope for?</p>",
        "id": 287638630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656364854
    },
    {
        "content": "<p>It looks like it. (It is a new file, so all of its is green, but it does have the latest change.)</p>",
        "id": 287638735,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656364921
    },
    {
        "content": "<p>By the way, since the whole PR is simply adding one file, you should have no trouble using the olean cache from master</p>",
        "id": 287638777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656364925
    },
    {
        "content": "<p>Is this what <code>leanproject get-cache</code> does?</p>",
        "id": 287638845,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656364975
    },
    {
        "content": "<p>Should I issue some more <code>git</code>commands to avoid problems like the one I just had with future commit/push actions?</p>",
        "id": 287638891,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656365011
    },
    {
        "content": "<p>Yes, get-cache got you the latest olean leanproject could find, and that would be the ones from master in your situation.</p>",
        "id": 287639113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656365125
    },
    {
        "content": "<p>You won't have further git issues since GitHub and your local repository now agree (unless you rebase again, but I don't see why you would do that).</p>",
        "id": 287639204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656365173
    },
    {
        "content": "<p>OK. Thanks again!<br>\nNow I should get some sleep...</p>",
        "id": 287639240,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1656365200
    },
    {
        "content": "<blockquote>\n<p>first update your master branch. Something like git checkout master &amp;&amp; git pull &amp;&amp; git checkout your_branch_name &amp;&amp; git rebase master</p>\n</blockquote>\n<p>I usually do something like <code>git fetch &amp;&amp; git merge origin/master</code>; this way you don't need to switch out of your branch and back again. If I understand it correctly, <code>git fetch</code> will update the information of all remote branches to their respectively latest commit, then <code>git merge origin/master</code> will merge all new commits in the remote branch <code>origin/master</code>into the currently checked out local branch. I prefer <code>merge</code> over <code>rebase</code> because<code>merge</code> preserves the history of the current branch, so you don't need to force-push after a merge.</p>",
        "id": 287641645,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656366555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/Implementation.20of.20multiplicative.20characters/near/287641645\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>first update your master branch. Something like git checkout master &amp;&amp; git pull &amp;&amp; git checkout your_branch_name &amp;&amp; git rebase master</p>\n</blockquote>\n<p>I usually do something like <code>git fetch &amp;&amp; git merge origin/master</code>; this way you don't need to switch out of your branch and back again. If I understand it correctly, <code>git fetch</code> will update the information of all remote branches to their respectively latest commit, then <code>git merge origin/master</code> will merge all new commits in the remote branch <code>origin/master</code>into the currently checked out local branch. I prefer <code>merge</code> over <code>rebase</code> because<code>merge</code> preserves the history of the current branch, so you don't need to force-push after a merge.</p>\n</blockquote>\n<p>If you do that, don't the commit stats of your branch get messed up? Something like 1000 commits behind, 1001 commits ahead?</p>",
        "id": 287642093,
        "sender_full_name": "Bart Michels",
        "timestamp": 1656366807
    },
    {
        "content": "<p>Also (sorry for the basic questions), do those merge commits show up in pull requests or does GitHub ignore them?</p>",
        "id": 287642104,
        "sender_full_name": "Bart Michels",
        "timestamp": 1656366814
    },
    {
        "content": "<blockquote>\n<p>If you do that, don't the commit stats of your branch get messed up? Something like 1000 commits behind, 1001 commits ahead?</p>\n</blockquote>\n<p>I never see that happen. After you merge and push, it should say 0 commits behind, assuming no commits are added to master in the meantime.</p>",
        "id": 287642372,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656366967
    },
    {
        "content": "<p>Merge commits do show up in the PR page, e.g. you can see two of them in <a href=\"https://github.com/leanprover-community/mathlib/pull/14967\">#14967</a>, and currently <a href=\"https://github.com/leanprover-community/mathlib/tree/graded_algebra_timeout'\">branch#graded_algebra_timeout'</a> is 8 commits ahead / 8 behind master.</p>",
        "id": 287642670,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656367185
    },
    {
        "content": "<p>Thanks. I read that <code>fetch</code>+<code>merge</code> creates new commits rather than rewrite history, so wasn't sure how git deals with the fact that they're not technically the same commits.</p>",
        "id": 287643226,
        "sender_full_name": "Bart Michels",
        "timestamp": 1656367462
    },
    {
        "content": "<p><code>merge</code> creates a new commit (<a href=\"https://github.com/leanprover-community/mathlib/commit/477d8ce9e2766d520fab12a79f6e944e98e0dbf0\">for example this</a>) that has two parent commits, namely the latest commit in you local branch and the latest in the remote master branch. <code>rebase</code> produces a linear history by stacking you local commits on top of the latest commit of the remote master; if you create a branch from master at its 10th commit and add 8 commits to it, then rebase to master when it's at the 20th commit, then your 8 commits will now be connected to the 20th commit and no longer the 10th commit, so the history is changed and your 8 commits will get different hashes. The linear history produced by <code>rebase</code> may be prettier than the directed acyclic graph produced by <code>merge</code> and preferred in some repositories, but it doesn't matter for mathlib since all PRs will be squashed merged into master.</p>",
        "id": 287645804,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656368882
    },
    {
        "content": "<p>Now that multiplicative characters are there, I think it makes sense to review quadratic characters and redefine them as <code>mul_char</code>s. Roughly, define <code>quadratic_char'</code> like <code>quadratic_char</code> is now defined (as a map from a <code>monoid_with_zero</code> to the integers), prove the relevant properties (most importantly multiplicativity when the domain is a finite field), and then define <code>quadratic_char</code> to be of type <code>mul_char F ℤ</code>. Then the API for multiplicative characters can be used to prove further properties; this should simplify the code in <code>number_theory/legendre_symbol/quadratic_char.lean</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nDoes this sound reasonable to you?</p>",
        "id": 289635166,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1657825522
    },
    {
        "content": "<p>In the same way, <code>zmod.χ₄</code> and friends should be defined as <code>mul_char (zmod 4) ℤ</code> etc.</p>",
        "id": 289642290,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1657829020
    },
    {
        "content": "<p>In the end, there is not that much simplification in <code>quadratic_char.lean</code>, but at least the proof of <code>quadratic_char_sum_zero</code> is now a one-liner.</p>",
        "id": 289643313,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1657829524
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15418\">#15418</a></p>",
        "id": 289823341,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1657970605
    },
    {
        "content": "<p>Next week I hope to do a lot of PR reviewing. For now, I will just \"request review\" myself.</p>",
        "id": 289837901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657991998
    },
    {
        "content": "<p>OK, thanks! I'll look at additive characters next...</p>",
        "id": 289841560,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1657996828
    },
    {
        "content": "<p>Of course, <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you are also welcome to have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/15418\">#15418</a>!</p>",
        "id": 289847165,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658004779
    },
    {
        "content": "<p>I've left a review.</p>",
        "id": 289847740,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658005679
    },
    {
        "content": "<p>Hmm. bors if failing with an error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">actions</span><span class=\"bp\">-</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">_work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">module</span><span class=\"bp\">/</span><span class=\"n\">localized_module.lean</span><span class=\"o\">:</span><span class=\"mi\">167</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">has_scalar'</span>\n</code></pre></div>\n<p>that refers to a completely unrelated file.</p>",
        "id": 289953954,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658144729
    },
    {
        "content": "<p><code>has_scalar</code> was renamed to <code>has_smul</code> recently. Try merging master.</p>",
        "id": 289954065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658144793
    },
    {
        "content": "<p>Did that happen between CI being satisfied earlier today and bors trying to merge?</p>",
        "id": 289954146,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658144861
    },
    {
        "content": "<p>Satisfied where?</p>",
        "id": 289954163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658144879
    },
    {
        "content": "<p>I mean, the PR was green before I told bors to merge it...</p>",
        "id": 289954236,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658144906
    },
    {
        "content": "<p>It's not your fault, just ignore the message</p>",
        "id": 289954296,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658144953
    },
    {
        "content": "<p>You know how bors works, right? It puts PRs in batches and when a batch fails it splits it up. The batch your PR was in failed, but that doesn't mean it comes from your PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/15418#issuecomment-1187093137\">here</a> bors says it is \"retrying...\").</p>",
        "id": 289954324,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658144980
    },
    {
        "content": "<p>Your PR was included in a batch that failed, because of another PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/14470\">#14470</a> I think)</p>",
        "id": 289954332,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658144986
    },
    {
        "content": "<p>That sounds plausible, that PR is on module localization...<br>\nOK; I'll wait and see (have to teach soon anyway...)</p>",
        "id": 289954584,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658145135
    },
    {
        "content": "<p>I'm now doing additive characters. I'll open a separate topic for that.</p>",
        "id": 290005807,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658169261
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/116395-maths/topic/Additive.20characters/near/290005886\">here</a>.</p>",
        "id": 290006088,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658169392
    }
]