[
    {
        "content": "<p>I had just shown a classroom of children that <code>2 + 2 = 4</code> could be proved by <code>refl</code> and we got talking about the algorithm. I said it just simplified everything down to <code>S(S(S(S(...)))=S(S(S(...)))</code> and commented that it might well run out of memory if we try big numbers! So I tried</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000000000000</span><span class=\"bp\">+</span><span class=\"mi\">1000000000000</span><span class=\"bp\">=</span><span class=\"mi\">2000000000000</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</pre></div>\n\n\n<p>and it typechecked! I was like \"wooah kids, someone has updated the <code>refl</code> AI! I never knew it did that!\" When did <code>refl</code> know about column addition? I know that <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> laughed once when I told him that refl was an AI.</p>",
        "id": 176401872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569267570
    },
    {
        "content": "<p>What if you run that file with <code>lean --trust=0</code>. I'm wondering if it's sped up by using a macro</p>",
        "id": 176402418,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569267946
    },
    {
        "content": "<p>oh rofl I think I see what's happening :-)</p>",
        "id": 176403032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569268397
    },
    {
        "content": "<p>ha ha ha</p>",
        "id": 176403074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569268437
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example : 1000000000000+2000000000000=3000000000000 :=  by refl -- deterministic timeout\n</pre></div>",
        "id": 176403129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569268448
    },
    {
        "content": "<p>the <em>definition</em> of 2000000000000 is 1000000000000 + 1000000000000</p>",
        "id": 176403145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569268471
    },
    {
        "content": "<p>Riiiiight, yeah, that makes sense</p>",
        "id": 176403382,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569268636
    },
    {
        "content": "<p>I guess that is not obvious. Am I right? Where is the algorithm which turns strings of digits into a nat?</p>",
        "id": 176403507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569268723
    },
    {
        "content": "<p>Do you think it does the divisions etc in base 10 using long division?</p>",
        "id": 176403574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569268769
    },
    {
        "content": "<p>I suggest you put this here in your Lean file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">numerals</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">1000000000000</span><span class=\"bp\">+</span><span class=\"mi\">2000000000000</span><span class=\"bp\">=</span><span class=\"mi\">3000000000000</span>\n</pre></div>",
        "id": 176403746,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569268858
    },
    {
        "content": "<p>Numerals are turned into a binary representation (using the auxiliary functions <code>bit0</code> and <code>bit1</code>).</p>",
        "id": 176403789,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569268885
    },
    {
        "content": "<p>What happens is that those digits turn into a term where we're using <code>bit0</code>, <code>bit1</code> and <code>one</code> (the functions) to represent the same numbers in binary</p>",
        "id": 176403874,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569268930
    },
    {
        "content": "<p>Does some part of the parser just completely unfold every string-of-digits-representing-a-nat completely into a bit0 bit1 bit0 ... representation before any other part of the system can get to it? I guess that's how it works. Then yeah definitely 2000000000000=1000000000000+1000000000000 is easy, the head terms are <code>has_add.add</code> and <code>bit0</code> and then <code>bit0</code> unfolds to <code>has_add.add</code> and it's all over -- the terms are now syntactically equal. Am I making sense?</p>",
        "id": 176406515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569270582
    },
    {
        "content": "<p>Yes, all of that makes sense and is correct.</p>",
        "id": 176407382,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569271176
    }
]