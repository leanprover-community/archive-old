[
    {
        "content": "<p>When making <a href=\"https://github.com/leanprover-community/mathlib/pull/14759\">#14759</a> (in relation to a student project on filters) I discovered that <code>principal</code> was antitone for <code>pfilter</code>, unlike for <code>filter</code> when it is monotone. The reason is that the order on <code>pfilter</code> is not the \"backwards\" one which we use on <code>filter</code>. This caused me a bit of pain in <a href=\"https://github.com/leanprover-community/mathlib/pull/14759\">#14759</a>; to my surprise</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Inf_gc'</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"o\">(</span><span class=\"n\">principal</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">pfilter</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pfilter</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">),</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">pfilter</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is false, because unification for <code>galois_connection</code> seems to ignore the order dual and the incorrect order is inherited.</p>\n<p>Should we change the order on <code>pfilter</code> to be the <code>op</code> of the current one?</p>",
        "id": 286288020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655335450
    },
    {
        "content": "<p>Note that I have a big refactor of <code>pfilter</code> coming up so if we do decide on it I will probably include it in.</p>",
        "id": 286288825,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655336170
    },
    {
        "content": "<p>Also, this change also concerns <a href=\"https://leanprover-community.github.io/mathlib_docs/find/upper_set\">docs#upper_set</a> and for the record I'm in favor of it.</p>",
        "id": 286288853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655336195
    },
    {
        "content": "<p>I'm happy if you want to close <a href=\"https://github.com/leanprover-community/mathlib/pull/14759\">#14759</a>, I was basically just making it to teach myself a bit about pfilters.</p>",
        "id": 286296002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655342808
    },
    {
        "content": "<p>Note that the way to prevent unification failing you in your example is to explicitly compose with <code>to_dual</code> as appropriate</p>",
        "id": 286847151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655766990
    }
]