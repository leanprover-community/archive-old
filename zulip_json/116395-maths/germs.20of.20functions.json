[
    {
        "content": "<p>I've just noticed that we have <code>order/filter/filter_product</code>. If I read the definitions correctly,</p>\n<ul>\n<li><code>local notation </code>∀*<code> binders </code>, <code> r:(scoped p, filter.eventually p φ) := r</code> is the same as <code>∀ᶠ</code> but with a fixed filter.</li>\n<li><code>filter.bigly_equal</code> means that two functions are eventually equal. We have this assumption in many lemmas, probably it deserves a notation (<code>=ᶠ[at_top]</code>?); this notation can be also useful to implement <code>calc</code> syntax for <code>is_O</code>/<code>is_o</code>;</li>\n<li><code>filter.filterprod</code> is what I know as the germ of a function at a point (if filter is <code>nhds</code>).</li>\n</ul>\n<p>What do you think about me making the following changes:</p>\n<ul>\n<li>drop local notation, use <code>∀ᶠ</code> instead;</li>\n<li>rename <code>bigly_equal</code> to <code>eventually_equal</code>, introduce a notation (possibly <code>localized</code>);</li>\n<li>rename <code>filter.filterprod</code> to <code>filter.germ</code>; or should <code>germ</code> take two filters and assume <code>tendsto</code> so that we can compose them?</li>\n</ul>",
        "id": 197822385,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589675582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 197822390,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589675605
    },
    {
        "content": "<p>\"filter.filterprod is what I know as the germ of a function at a point (if filter is nhds).\" -- What's the function?</p>",
        "id": 197838253,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1589705384
    },
    {
        "content": "<p>Looking at function names, it seems that you had sequences in mind. However we can apply the same definition to look at the quotient space of functions <code>f : α → β</code> by <code>bigly_equal (nhds x) β</code>.</p>",
        "id": 197838387,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589705608
    },
    {
        "content": "<p>So <code>filter.filterprod</code> is the \"space of germs\", right? The elements are germs of functions</p>",
        "id": 197838553,
        "sender_full_name": "David Wärn",
        "timestamp": 1589705889
    },
    {
        "content": "<p>Yes, in the sense of <a href=\"https://en.wikipedia.org/wiki/Germ_(mathematics)\">https://en.wikipedia.org/wiki/Germ_(mathematics)</a></p>",
        "id": 197838567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589705936
    },
    {
        "content": "<p>I sort of think this is the wrong way to think about it, though. I know this is the approach used for manifolds, but in more general settings you might have a section defined on a neighborhood of a point that doesn't extend to the whole space.</p>",
        "id": 197838572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589705949
    },
    {
        "content": "<p>If we have <code>f : α → β</code> not <code>f : Π x, β x</code>, then what's wrong with extending <code>f</code> to a total function?</p>",
        "id": 197838637,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589706012
    },
    {
        "content": "<p>Like, it works in this one specific case of non-dependent functions with no conditions.</p>",
        "id": 197838640,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589706023
    },
    {
        "content": "<p>In this case, nothing is really wrong (but you still need some ugly <code>if</code> to extend).</p>",
        "id": 197838645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589706035
    },
    {
        "content": "<p>Surely you'll want a germ of a section of a bundle or something eventually anyways, and a germ of a function is just a special case of that</p>",
        "id": 197838727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589706201
    },
    {
        "content": "<p>I think that it makes sense to use <code>eventually_equal</code> in more lemmas anyway.</p>",
        "id": 197838809,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589706355
    },
    {
        "content": "<p>I don't want to think about dependent germs right now.</p>",
        "id": 197838945,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589706551
    },
    {
        "content": "<p>They should come with some tactics that will allow us to write proofs with <code>rw</code>/<code>simp</code> without starting with <code>filter_upwards</code>.</p>",
        "id": 197839017,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589706622
    },
    {
        "content": "<p>But even for non-dependent functions, you might want germs of \"partial functions that are eventually defined\"? Wouldn't it make sense to use this definition also for <code>filter.filterprod</code>?</p>",
        "id": 197839045,
        "sender_full_name": "David Wärn",
        "timestamp": 1589706705
    },
    {
        "content": "<p>For some reason the ultraproduct traditionally isn't defined this way, I think.</p>",
        "id": 197839098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589706743
    },
    {
        "content": "<p>oh, maybe I'm wrong!</p>",
        "id": 197839191,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589706909
    },
    {
        "content": "<p>Okay yes, I had misremembered.</p>",
        "id": 197839296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589707069
    },
    {
        "content": "<p>It doesn't make a difference up to isomorphism if the object is nonempty.</p>",
        "id": 197839342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589707089
    },
    {
        "content": "<p>But Lean doesn't work up to isomorphism, so...</p>",
        "id": 197839346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589707099
    },
    {
        "content": "<p>Thanks Yury for pointing out the connection to germs, by the way. This is something I \"knew, but didn't know I knew\".</p>",
        "id": 197839362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589707143
    },
    {
        "content": "<p>This sort of thing should show up also in measure theory. The statement of Fubini already needs \"partial functions defined almost everywhere\", I think</p>",
        "id": 197840065,
        "sender_full_name": "David Wärn",
        "timestamp": 1589708239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/germs.20of.20functions/near/197822385\">said</a>:</p>\n<blockquote>\n<p>I've just noticed that we have <code>order/filter/filter_product</code>. If I read the definitions correctly,</p>\n<ul>\n<li><code>local notation </code>∀*<code> binders </code>, <code> r:(scoped p, filter.eventually p φ) := r</code> is the same as <code>∀ᶠ</code> but with a fixed filter.</li>\n<li><code>filter.bigly_equal</code> means that two functions are eventually equal. We have this assumption in many lemmas, probably it deserves a notation (<code>=ᶠ[at_top]</code>?); this notation can be also useful to implement <code>calc</code> syntax for <code>is_O</code>/<code>is_o</code>;</li>\n<li><code>filter.filterprod</code> is what I know as the germ of a function at a point (if filter is <code>nhds</code>).</li>\n</ul>\n<p>What do you think about me making the following changes:</p>\n<ul>\n<li>drop local notation, use <code>∀ᶠ</code> instead;</li>\n<li>rename <code>bigly_equal</code> to <code>eventually_equal</code>, introduce a notation (possibly <code>localized</code>);</li>\n<li>rename <code>filter.filterprod</code> to <code>filter.germ</code>; or should <code>germ</code> take two filters and assume <code>tendsto</code> so that we can compose them?</li>\n</ul>\n</blockquote>\n<p>I was pinged here, but have nothing to do with this file. This is all about non-standard analysis non-sense. I don't think this is used anywhere else. And leanproject confirm this file is imported only by <code>data.real.hyperreal</code> which is not imported anywhere.</p>",
        "id": 197840746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589709256
    },
    {
        "content": "<p>But what you describe indeed seems useful.</p>",
        "id": 197840756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589709290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/116395-maths/topic/germs.20of.20functions/near/197838553\">said</a>:</p>\n<blockquote>\n<p>So <code>filter.filterprod</code> is the \"space of germs\", right? The elements are germs of functions</p>\n</blockquote>\n<p>If this is true then the name we currently use is <em>very</em> unfortunate.</p>",
        "id": 197840851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589709462
    },
    {
        "content": "<p>They aren't literally germs in the usual sense in general-- a filter on <code>nat</code> is usually not a neighborhood filter of any point of <code>nat</code>.</p>",
        "id": 197840989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589709655
    },
    {
        "content": "<p>They are more like germs at points of the Stone-Cech compactification, at least if the filter is an ultrafilter.</p>",
        "id": 197841025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589709703
    },
    {
        "content": "<p>This definitely counts as germ to me</p>",
        "id": 197841101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589709814
    },
    {
        "content": "<p>Germs at infinity is a good object. I pinged <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> to get feedback on the proposed changes, not on the current contents of the file.</p>",
        "id": 197842280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589711623
    }
]