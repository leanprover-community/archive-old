[
    {
        "content": "<p>I'm currently defining the intrinsic interior and frontier of an arbitrary set in a LCTVS (well actually in a normed space because we don't have LCTVS yet, but everything is generalisable for free) and I stumble across a problem. The intrinsic interior/frontier/closure of A is defined to be the interior/frontier/closure of A taken as a set of its affine span.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.convex.topology</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intrinsic_frontier</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">affine_span</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intrinsic_interior</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">affine_span</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intrinsic_closure</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">affine_span</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>I don't really want to define <code>intrinsic_closure </code> because it turns out that <code>intrinsic_closure A = closure A</code> as soon as  E is finite dimensional. But things get weird in infinite dimension. In general we only have <code>intrinsic_closure A ⊆ closure A</code>. I can see a few ways to fix this:</p>\n<ol>\n<li>Just stick with <code>intrinsic_closure</code> and have <code>lemma intrinsic_closure_eq_closure [finite_dimensional E ℝ] : intrinsic_closure A = closure A</code></li>\n<li>Change the definitions to</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">intrinsic_frontier</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">affine_span</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intrinsic_interior</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">affine_span</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">})</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>Change the definition of <code>intrinsic_frontier</code> to</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">intrinsic_frontier</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">closure</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">intrinsic_interior</span> <span class=\"n\">A</span>\n</code></pre></div>\n<ol start=\"4\">\n<li>Change the definition of <code>intrinsic_interior</code> to</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">intrinsic_interior</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">closure</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">intrinsic_frontier</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>I don't really know which is the most sensible option. I mostly want out of the definitions the facts that:</p>\n<ol>\n<li><code>interior A ⊆ intrinsic_interior A</code></li>\n<li><code>intrinsic_frontier A ⊆ frontier A</code></li>\n<li><code>A.nonempty → (intrinsic_interior A).nonempty</code><br>\nAny opinion anyone?</li>\n</ol>",
        "id": 235199454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618845690
    }
]