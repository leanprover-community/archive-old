[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/3283\">#3283</a>, the need for a typeclass expressing that a vector space is not trivial shows up. 4 possible solutions given by  <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, who also suggests it should be discussed on Zulip:</p>\n<ul>\n<li>(a) add a typeclass \"has at least two elements\"; </li>\n<li>(b) use [fact (0 &lt; ...)] and let the user declare a local instance fact ....</li>\n<li>(a'): modify nonzero to say ∃ x, x ≠ 0 instead of 0 ≠ 1. In a monoid_with_zero this is equivalent to the old typeclass but makes more sense for vector spaces </li>\n<li>(a'') introduce nonsingleton : ∃ x y, x ≠ y and use it instead of nonzero in algebra/group_with_zero.</li>\n</ul>",
        "id": 202865366,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593854622
    },
    {
        "content": "<p>For what it's worth, I vote for (a'') (and I'm ready to give it a try if there is a consensus)</p>",
        "id": 202865411,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593854670
    },
    {
        "content": "<p>The link should be <a href=\"https://github.com/leanprover-community/mathlib/issues/3282\">#3282</a></p>",
        "id": 202865656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593855168
    },
    {
        "content": "<p><code>nonzero</code> (i.e. containing an element other than 0) is an important concept in ring theory -- for example integral domains and fields are non-zero, in analogy with 1 not being a prime. For rings it's equivalent to 0 \\ne 1.</p>\n<p>But I am confused why the zero ring isn't a normed algebra. When I was working with p-adic normed algebras I allowed the zero ring.</p>",
        "id": 202865664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593855215
    },
    {
        "content": "<p>How do you suggest to name the type class in a''? It can't be <code>nonzero</code>, and this will obfuscate all the algebraic applications.</p>",
        "id": 202865667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593855230
    },
    {
        "content": "<p><code>superdoubleton</code></p>",
        "id": 202865704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593855247
    },
    {
        "content": "<p>Do you have other application in minds (where nonzero wouldn't be a good name)?</p>",
        "id": 202865708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593855267
    },
    {
        "content": "<p>I would like to hear why the idea is important for nonzero vector spaces.</p>",
        "id": 202865710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593855284
    },
    {
        "content": "<p>Even if you do, I think I still prefer to use a' for algebra and add another type class for the other applications.</p>",
        "id": 202865719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593855311
    },
    {
        "content": "<p>I'm going to suggest that your definition of normed algebra is wrong if it doesn't allow the zero algebra. I've just looked at how I set this up in the p-adic setting. If K is a normed field (the norm is real-valued and |1| = 1) then a normed K-algebra was for me a ring A equipped with a ring homomophism K -&gt; A and a real-valued norm, satisfying |1|&lt;=1, |x| = 0 iff x = 0, |ab|&lt;=|a||b|, and |ka|=|k||a|, and a triangle inequality.</p>",
        "id": 202865897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593855604
    },
    {
        "content": "<p>The axioms imply that either |1|=0 and A=0, or |1|=1 and then the map K-&gt;A is injective and the norm on A extends the norm on K</p>",
        "id": 202865914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593855673
    },
    {
        "content": "<p>In particular it looks like I have gone out of my way to allow A=0</p>",
        "id": 202865915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593855686
    },
    {
        "content": "<p>I'm pretty sure I didn't invent this stuff myself, I'll dig out a source</p>",
        "id": 202865955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593855754
    },
    {
        "content": "<p>The question is then: how painful would it be to go this road. Clearly on paper you can just pretend everything holds because the algebra you are currently caring about is obviously non-zero.</p>",
        "id": 202865956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593855755
    },
    {
        "content": "<p>Google says the answer should be in Théories spectrales: Chapitre 1</p>",
        "id": 202865972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593855818
    },
    {
        "content": "<p>I've traced my definition back to Bosch-Guenzer-Remmert (written in the 80s), which assumes commutative and nonarchimedean (|a+b|&lt;=max{|a|,|b|}). Maybe things are different in the noncommutative or archimedean (|a+b|&lt;=|a|+|b|) case? But in nonarchimedean geometry it is crucial that zero normed algebras are allowed; we want the empty set to be affinoid and so we need a normed algebra with no maximal ideals. <br>\n<a href=\"/user_uploads/3121/Sawe9nTT18roy_dXq5bAsvU8/bgr.png\">bgr.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Sawe9nTT18roy_dXq5bAsvU8/bgr.png\" title=\"bgr.png\"><img src=\"/user_uploads/3121/Sawe9nTT18roy_dXq5bAsvU8/bgr.png\"></a></div>",
        "id": 202866164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593856156
    },
    {
        "content": "<p>I quite like the semantics of <code>a'</code>, but I'm sure that I could get used to <code>a''</code> as well.</p>",
        "id": 202866166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593856167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Théories spectrales refers to TG IX p37 def 9 for the definition</p>",
        "id": 202866302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593856381
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3qIAi0XJOoQStEW5oJLRaFUw/tg.png\">tg.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3qIAi0XJOoQStEW5oJLRaFUw/tg.png\" title=\"tg.png\"><img src=\"/user_uploads/3121/3qIAi0XJOoQStEW5oJLRaFUw/tg.png\"></a></div>",
        "id": 202866362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593856471
    },
    {
        "content": "<p>No condition at all on norm of 1 then.</p>",
        "id": 202866376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593856528
    },
    {
        "content": "<p>But we're now mixing two discussions, right? The correct definition of normed algebra is orthogonal to how we want to say \"this vector space is non-trivial\"</p>",
        "id": 202866423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593856602
    },
    {
        "content": "<p>And I'm sure that we will want to say \"non-trivial\" quite often.</p>",
        "id": 202866427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593856619
    },
    {
        "content": "<p>I am challenging this notion, that's all</p>",
        "id": 202866430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593856627
    },
    {
        "content": "<p>It's not, because this is the only example so far when we need this class.</p>",
        "id": 202866433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593856636
    },
    {
        "content": "<p>Aah, ok</p>",
        "id": 202866435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593856637
    },
    {
        "content": "<p>We have got this far without having to say non-trivial for anything other than classes with a 0 and a 1</p>",
        "id": 202866438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593856653
    },
    {
        "content": "<p>I'm going on a hike, I'll see if I can cook up something in the mean time. See you!</p>",
        "id": 202866483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593856732
    },
    {
        "content": "<p>The reason this is relevant is that it helps us to distinguish between (a) and (a')</p>",
        "id": 202866551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593856830
    },
    {
        "content": "<p>Having nontrivial vector spaces shows up for many statements. Browsing randomly mathlib, I find</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">interior_closed_ball&#39;</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">closed_ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span>\n</code></pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- If a space is non-trivial, then the norm of the identity equals `1`. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">norm_id</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">id</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">norm_pos</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">∥</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>So, independently of the application to normed algebras, it is probably a good think to have.</p>",
        "id": 202866553,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593856836
    },
    {
        "content": "<p><code>interior_closed_ball'</code> -- is this not true for the zero space?</p>",
        "id": 202866563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593856878
    },
    {
        "content": "<p>Good. What about an example where we need to different elements in a type and none of them is 0?</p>",
        "id": 202866564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593856882
    },
    {
        "content": "<p>Kevin think of r = 0</p>",
        "id": 202866614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593856954
    },
    {
        "content": "<p>This is a silly version of the lemma, hence the '. But I guess it's still used somewhere.</p>",
        "id": 202866623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593856982
    },
    {
        "content": "<p>I'm fine with a' or a''. With a slight preference for <code>nonsingleton</code>because it would apply potentially to non-algebraic situations. I say potentially because I don't have an example at hand, but I can't exclude it would show up some day for someone.</p>",
        "id": 202866633,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593856996
    },
    {
        "content": "<p>I say we can still add a class if the need ever arise, and keep readability of what we already have.</p>",
        "id": 202866692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857055
    },
    {
        "content": "<p>I would also prefer <code>a''</code> over <code>a'</code>, simply because <code>a'</code> is too specific for no good reason.  However the name <code>nonsingleton</code> is a bit misleading, as it is not <code>¬ singleton</code>.</p>",
        "id": 202866701,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593857098
    },
    {
        "content": "<p>But stuff like <code>norm_id</code> -- this is a corollary of \"|1| = 1 if A is nonzero\" (with A=End(E)), but if <code>norm_id</code> is useful then it's evidence that we need the class.</p>",
        "id": 202866714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857134
    },
    {
        "content": "<p><code>nontrivial</code>? (just half-joking)</p>",
        "id": 202866761,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593857165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/nonsingleton/near/202866614\">said</a>:</p>\n<blockquote>\n<p>Kevin think of r = 0</p>\n</blockquote>\n<p>Are there any applications of this lemma where r&lt;=0? Isn't r&gt;0 easier to prove than E!=0? But this is secondary.</p>",
        "id": 202866767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857183
    },
    {
        "content": "<p>That's why I say it's silly.</p>",
        "id": 202866776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857201
    },
    {
        "content": "<p>Yes, this one is silly, but <code>norm_id</code> is not.</p>",
        "id": 202866794,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593857224
    },
    {
        "content": "<p>So the question has become something like: do we want a <code>nonsubsingleton</code> class or just a <code>has-something-other-than-zero [extends has_zero]</code> class.</p>",
        "id": 202866808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857277
    },
    {
        "content": "<p>And note this lemma is only used once, to prove the silly analogue for frontier, which itself is never used.</p>",
        "id": 202866859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857328
    },
    {
        "content": "<p>Right. The argument against is that more typeclasses mean more noise, and do we need it? On the other hand this seems like a rarely used typeclass which I guess can't do much harm</p>",
        "id": 202866878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857374
    },
    {
        "content": "<p>Even with this semiconservative approach, does it mean we'll need a lemma saying that if a ring is nonzero in this vague sense then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1 \\neq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and then keep invoking this lemma in all proofs that currently used the existing nonzero class?</p>",
        "id": 202866924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857403
    },
    {
        "content": "<p>That would mean much more noise than having two classes.</p>",
        "id": 202866936,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857437
    },
    {
        "content": "<p>Oh wow, I didn't realize we already had a <code>nonzero</code> class.  Then I'd vote to just remove the gratuitous <code>has_zero</code> and <code>has_one</code> arguments there.</p>",
        "id": 202866949,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593857474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> this <code>nonzero</code> class is used a lot in the algebra heirarchy, for rings (and now more generally for <code>monoid_with_zero</code>. In a ring, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≠</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0\\not=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is equivalent to the ring being non-zero, which is an important concept in ring theory. Patrick is suggesting that ripping out the nonzero class and replacing it with a more general class just means that then we'll have 1000 applications of the lemma saying that in a non-zero ring we must have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≠</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0\\not=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (which is the thing which is actually used).</p>",
        "id": 202867018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857606
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Proves that a semiring that contains at least two distinct elements is nonzero. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero</span><span class=\"bp\">.</span><span class=\"n\">of_ne</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>but it is only used once. <code>nonzero</code> is used literally hundreds of times in mathlib.</p>",
        "id": 202867082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857730
    },
    {
        "content": "<p>Right, but the new lemma can be called <code>zero_ne_one</code> and just have different type-class arguments than the current one.  This shouldn't break much.</p>",
        "id": 202867084,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593857732
    },
    {
        "content": "<p>What about a class <code>nonsubsingleton</code>, an abbreviation <code>nonzero</code>, and a lemma saying that in  a <code>ring, nonzero</code>, one has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo mathvariant=\"normal\">≠</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\ne 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 202867085,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593857735
    },
    {
        "content": "<p>Gabriel just beat me to it.</p>",
        "id": 202867091,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593857753
    },
    {
        "content": "<p>This is really obfuscation by gratuitous over-engineering.</p>",
        "id": 202867131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857769
    },
    {
        "content": "<p>I thought that was mathlib's motto!</p>",
        "id": 202867135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857785
    },
    {
        "content": "<p>Usually we try to do it only when there are at least one application of the general thing.</p>",
        "id": 202867138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857815
    },
    {
        "content": "<p>\"Why can't we prove the derivative of x^2 is 2x?\" \"because we didn't do the Bochner integral yet\"</p>",
        "id": 202867144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857829
    },
    {
        "content": "<p>I think Sébastien posted three applications of the general thing.</p>",
        "id": 202867147,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593857849
    },
    {
        "content": "<p>However I need to go, and I don't care so much.</p>",
        "id": 202867148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857861
    },
    {
        "content": "<p>No, he posted application of the intermediate idea.</p>",
        "id": 202867151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857872
    },
    {
        "content": "<p>The one that still mention 0</p>",
        "id": 202867153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857878
    },
    {
        "content": "<p>and I don't know enough about typeclasses to contribute any more</p>",
        "id": 202867155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593857880
    },
    {
        "content": "<p>and would allow to keep the exact same readable name <code>nonzero</code></p>",
        "id": 202867193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857895
    },
    {
        "content": "<p>I really want to have this for vector spaces, but I don't care to have this in full generality.</p>",
        "id": 202867199,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593857926
    },
    {
        "content": "<p>That one is clearly a good idea, and allows to keep lemmas <code>zero_ne_one</code> with the exact same statement.</p>",
        "id": 202867202,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857939
    },
    {
        "content": "<p>I don't care about the name at all.  I'm fine with calling it <code>nonzero</code> even though there is no zero anywhere.  But having a class for <code>∃ x, x ≠ 0</code> is just introducing a dependency on <code>0</code> for no reason at all.</p>",
        "id": 202867208,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593857955
    },
    {
        "content": "<p>So, here are the two proposals. Please vote here, and I'll try to implement the one that get the most votes.</p>",
        "id": 202867213,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593857977
    },
    {
        "content": "<p>Calling it <code>nonzero</code> without having zero seems a bit confusing to me.</p>",
        "id": 202867217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593857983
    },
    {
        "content": "<p>A class <code>nonzero</code> extending <code>has_zero</code>, and requiring the existence of an element different from <code>0</code>.</p>",
        "id": 202867261,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593858016
    },
    {
        "content": "<p>Or, a class <code>nonsubsingleton</code>, requiring two different elements, and an abbreviation called <code>nonzero</code> and requiring the typeclass <code>has_zero</code>.</p>",
        "id": 202867267,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593858060
    },
    {
        "content": "<p>Here's a statement I wrote recently (<code>normed_space/hahn_banach</code>), which would benefit from one of the new typeclasses.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">exists_dual_vector&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">g</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span>\n</code></pre></div>\n\n\n<p>On the other hand, I did not use this lemma for anything!</p>",
        "id": 202867789,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593859044
    },
    {
        "content": "<p>Another example that does not mention <code>0</code> (<del>though the assumption looks suspicious</del>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">adjugate_zero</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjugate</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 202868395,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593860076
    },
    {
        "content": "<p>Another vote for <code>nonsubsingleton</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">sign_surjective</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">sign</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">units</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202868496,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593860229
    },
    {
        "content": "<p>I actually prefer the <code>1 &lt; fintype.card α</code> in that example</p>",
        "id": 202868680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593860501
    },
    {
        "content": "<p>also, just because a theorem has this hypothesis doesn't mean it should be inferred by typeclass inference</p>",
        "id": 202868757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593860629
    },
    {
        "content": "<p>so far the only one that actually needs it to be a class is the original example with nonzero vector spaces, as well as the various kinds of nonzero rings</p>",
        "id": 202868810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593860670
    },
    {
        "content": "<p>And these all have zeros</p>",
        "id": 202869043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593861089
    },
    {
        "content": "<p>No, the <code>adjugate_zero</code> example does not have a zero.</p>",
        "id": 202869106,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593861189
    },
    {
        "content": "<p>I want to say that, although I still think <code>nonzero</code> makes more sense, I do see that Gabriel seem to find this important. I think that Gabriel (or any other maintainer or very active contributor) can have two votes if he feels strongly about something.</p>",
        "id": 202869497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593861864
    },
    {
        "content": "<p>(The number 2 or the voting thing shouldn't be taken too literally here, I hope the idea is clear)</p>",
        "id": 202869519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593861947
    },
    {
        "content": "<p>And lunch is calling</p>",
        "id": 202869558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593861963
    },
    {
        "content": "<p>I'm not asking for extra votes.  <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  But I'm a bit perplexed that we're adding an unused argument to <code>nonzero</code> here.  There is something to be said for requiring both 0 and 1, because we can then get <code>0 ≠ 1</code> without any extra assumptions.  But all other variants are exactly equivalent to \"cardinality greater than 1\" (the choice of 0 being completely irrelevant).</p>",
        "id": 202869750,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593862328
    },
    {
        "content": "<p>There is also a small technical argument to be made for dropping the unused argument: the terms become smaller, and it make the type-class cache more effective (because otherwise we'd need to do type-class search for the different <code>has_zero</code> instances used).</p>",
        "id": 202869770,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593862428
    },
    {
        "content": "<p>I also hope that \"<em>extending</em> <code>has_zero</code>\" is a typo, and what Sébastien actually meant is <code>class nonzero (α) [has_zero α] : Prop</code>.  Otherwise you get two incompatible <code>has_zero</code> instances in <code>[ring α] [nonzero α]</code>.</p>",
        "id": 202869829,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593862531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/nonsingleton/near/202869829\">said</a>:</p>\n<blockquote>\n<p>I also hope that \"<em>extending</em> <code>has_zero</code>\" is a typo, and what Sébastien actually meant is <code>class nonzero (α) [has_zero α] : Prop</code>.  </p>\n</blockquote>\n<p>Yes, sure!</p>",
        "id": 202870313,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593863415
    },
    {
        "content": "<p>Are people who have trouble installing <code>mathlib</code> allowed to count? Anyway, I'm also against overengineering.</p>",
        "id": 202875477,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1593872001
    },
    {
        "content": "<p>Ah I'm happy that Jasmin agrees with me, there is really no point in overengineering this by adding extra unused arguments.</p>",
        "id": 202875785,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593872470
    },
    {
        "content": "<p>I'm back from my hike: examples that I came up with are \"simple Lie algebra\" and \"simple representation\". In both cases there is a <code>0</code> (but not a <code>1</code>), and really the <code>{0}</code> spaces is \"too simple to be simple\". Those would be natural candidates for <code>a'</code> or <code>a''</code>.</p>",
        "id": 202877227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593874601
    },
    {
        "content": "<p>I would be happy with <code>a''</code> if we can find a reasonable name for it.</p>",
        "id": 202877235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593874616
    },
    {
        "content": "<p><code>nonsubsingleton</code> seems to long and obfuscated, to me.</p>",
        "id": 202877242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593874635
    },
    {
        "content": "<p>What about <code>has_ne</code>?</p>",
        "id": 202879395,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593877814
    },
    {
        "content": "<blockquote>\n<p>The Walpiri, for example, only has words for “one”, “two”, and “many”</p>\n</blockquote>\n<p>How about <code>subsingleton</code>, <code>unique</code>, and <code>many</code>?</p>\n<p><span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 202879633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593878166
    },
    {
        "content": "<p>or <code>subsingleton</code>, <code>singleton</code>, <code>supersingleton</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 202892737,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593899172
    },
    {
        "content": "<p>I feel the basic class should state <code>∃x y : α, x ≠ y</code>. I think we should call this class already <code>nonzero</code> or <code>nontrivial</code>, and just use this class directly when talking about rings/vector spaces (and then there will be a theorem stating that if you have enough structure (semiring?) <code>zero_ne_one : 0 ≠ 1</code> assuming this type class.</p>\n<p>At some point we'll probably want to use a type class on groups saying that the group is nontrivial, right? It would be nice to use the same class then.</p>\n<p>Then again, I don't feel strongly about this.</p>",
        "id": 202897438,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593908606
    },
    {
        "content": "<p>Initially I thought the \"x ne y\" option was unnecessarily indirect, but I've been convinced by the later suggestions. It seems uniformity comes at little cost, as we can continue using zero_ne_one where we need it.</p>",
        "id": 202897720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593909216
    },
    {
        "content": "<p>PR at <a href=\"https://github.com/leanprover-community/mathlib/issues/3296\">#3296</a>.</p>\n<p>I need some help with the linter. With the declarations</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">is_integral_domain</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">nontrivial</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>the linter complains</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `def_lemma` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> INCORRECT DEF/LEMMA: -/</span>\n<span class=\"c1\">-- algebra/ring.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">is_integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_nontrivial</span> <span class=\"c\">/-</span><span class=\"cm\"> is a def, should be a lemma/theorem -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `doc_blame` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> DEFINITIONS ARE MISSING DOCUMENTATION STRINGS: -/</span>\n<span class=\"c1\">-- algebra/ring.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">is_integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_nontrivial</span> <span class=\"c\">/-</span><span class=\"cm\"> def missing doc string -/</span>\n</code></pre></div>\n\n\n<p>Is there something to be fixed on the linter or Lean side, or should I just silence the linter?</p>",
        "id": 202977324,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594034750
    },
    {
        "content": "<p>For the second you can add lines like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- An integral domain as a non-trivial Type. -/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">is_integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_nontrivial</span>\n</code></pre></div>",
        "id": 202977615,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594035058
    },
    {
        "content": "<p>Sure. The problem is that is shouldn't be a def, so it shouldn't need documentation, but Lean generates a def anyway.</p>",
        "id": 202977698,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594035125
    },
    {
        "content": "<p>And even if it where a def, I don't really see the point in asking for doc in a structure extension.</p>",
        "id": 202977738,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594035193
    },
    {
        "content": "<p>This is <code>old_structure_cmd</code>, right?  There are some known issues there where the linter doesn't recognize the coercions to the parent.  The officially blessed solution is to <code>attribute [nolint]</code> them.</p>",
        "id": 202977852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594035332
    },
    {
        "content": "<p>ok, done. Thanks!</p>",
        "id": 202978116,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594035564
    },
    {
        "content": "<p>Summary of the PR: I introduced a class <code>nontrivial</code> saying that a type has at least two elements, created a basic API, and used it instead of nonzero everywhere. It went pretty well (most changes were straightforward), although it was a little bit painful since the PR touches 63 files. I imagine this PR could conflict very quickly with everything...</p>",
        "id": 202978654,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594036082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Thank you so much for doing this!</p>",
        "id": 202980340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594037304
    },
    {
        "content": "<p>I would be happy with merging this right now. (I left one comments, but it asks for a lemma that can easily be added later without letting this acquire conflicts.)</p>",
        "id": 202980394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594037381
    },
    {
        "content": "<p>Ooh, I see that Gabriel also left some comments.</p>",
        "id": 202980478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594037423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Shall we merge this? Or would you rather have your comments dealt with first?</p>",
        "id": 202984507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594040187
    },
    {
        "content": "<p>My comments are not regressions, we/I can fix them in a follow-up PR.</p>",
        "id": 202984548,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594040214
    },
    {
        "content": "<p>Right, I agree. So I've kicked it on the queue.</p>",
        "id": 202985463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594040677
    }
]