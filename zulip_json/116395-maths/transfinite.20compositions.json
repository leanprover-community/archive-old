[
    {
        "content": "<p>Suppose P is a complete lattice. I can define an increasing sequence of finite length in P either as a subtype of a function type or as an inductive type, as shown below.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">seq1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">}</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">seq2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">seq2</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span> <span class=\"n\">b&#39;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">seq2</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">seq2</span> <span class=\"n\">b&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134128023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537220067
    },
    {
        "content": "<p>The first one generalizes easily to any ordinal (or any well-ordered set). Is there a way to generalize the second?<br>\nI mention that P is a complete lattice because I'm happy to assume (if it helps) that at each limit stage, the value of the sequence is equal to the sup of all the previous values.</p>",
        "id": 134128069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537220134
    },
    {
        "content": "<p>The only way I can think to handle limit ordinal stages is to ask for an increasing sequence of every smaller ordinal length, such that for any α ≤ β, the sequence of length α is a prefix of the sequence of length β</p>",
        "id": 134128599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537220783
    },
    {
        "content": "<p>But this seems a bit awkward.</p>",
        "id": 134128603,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537220794
    },
    {
        "content": "<p>(What I'm really trying to do is model <a href=\"https://ncatlab.org/nlab/show/transfinite+composition\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/transfinite+composition\">https://ncatlab.org/nlab/show/transfinite+composition</a>)</p>",
        "id": 134128630,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537220838
    },
    {
        "content": "<p>I'm not sure if this is what you're looking for. The following is used in Isabelle to model transfinite recursion:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">inductive_set</span> <span class=\"n\">iterates</span> <span class=\"o\">::</span> <span class=\"s\">&quot;(&#39;a ⇒ &#39;a) ⇒ &#39;a set&quot;</span> <span class=\"kp\">for</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"s\">&quot;&#39;a ⇒ &#39;a&quot;</span> <span class=\"kp\">where</span>\n<span class=\"o\">|</span> <span class=\"n\">step</span><span class=\"o\">:</span> <span class=\"s\">&quot;x ∈ iterates f ⟹ f x ∈ iterates f&quot;</span>\n<span class=\"o\">|</span> <span class=\"n\">Sup</span><span class=\"o\">:</span> <span class=\"s\">&quot;chain (≤) M ⟹ ∀x∈M. x ∈ iterates f ⟹ Sup M ∈ iterates f&quot;</span>\n</pre></div>\n\n\n<p>Maybe you can use a similar approach?</p>",
        "id": 134128804,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537221045
    },
    {
        "content": "<p>Hmm, interesting</p>",
        "id": 134128831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537221084
    },
    {
        "content": "<p>Indeed we basically always construct such transfinite compositions by iterating some construction at successor stages, and taking a sup/colimit at limit stages</p>",
        "id": 134128899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537221151
    },
    {
        "content": "<p>What kind of thing is M there? a subset of 'a?</p>",
        "id": 134128922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537221181
    },
    {
        "content": "<p>and <code>chain (≤)</code> means it's totally ordered?</p>",
        "id": 134129010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537221255
    },
    {
        "content": "<p>Ah, I found the source.</p>",
        "id": 134129169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537221428
    },
    {
        "content": "<p>Yes, <code>M</code> is a subset of <code>'a</code> and <code>chain (≤) M</code> says that <code>M</code> is totally ordered</p>",
        "id": 134129173,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537221430
    },
    {
        "content": "<p>the interesting part is that <code>iterates</code> is a <code>chain</code> in itself, so it contains its supremum, which is the fixed point of <code>f</code>.  In this theory <code>'a</code> is a chain complete partial order (i.e. all non-empty chains have a supremum)</p>",
        "id": 134129410,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537221636
    },
    {
        "content": "<p>One thing that occurs to me is that my finite sequences are themselves partially ordered by \"extends\", and the finite prefixes of a countable sequence form a chain</p>",
        "id": 134133872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537226136
    }
]