[
    {
        "content": "<p>Dear Alls,<br>\nThe pow_add theorem is as follow:</p>\n<p>#check pow_add<br>\npow_add : ∀ (a : ?M_1) (m n : ℕ), a ^ (m + n) = a ^ m * a ^ n</p>\n<p>By why can't I prove the consequence theorem: </p>\n<p>theorem th01 (a: ℕ ): ∀ m n:ℕ, a ^ (m + n) = (a ^ m) * (a ^ n) :=<br>\nbegin<br>\nrw pow_add (a:ℕ)<br>\nend</p>\n<p>Here is the error that I got:</p>\n<p>rewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  a ^ (?m_1 + ?m_2)<br>\nThank you,</p>",
        "id": 133225323,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535915438
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 133225393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535915630
    },
    {
        "content": "<p>It's because you need to use <code>nat.pow_add</code></p>",
        "id": 133225436,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535915691
    },
    {
        "content": "<p>because the <code>^</code> are different</p>",
        "id": 133225444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535915730
    },
    {
        "content": "<p><code>nat</code> has a different instance for the power function, so it has its own theorems to go with it, like <code>nat.pow_add</code></p>",
        "id": 133225445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535915736
    },
    {
        "content": "<p>This is a very annoying feature of current lean. There are two definitions of <code>pow</code> on the naturals.</p>",
        "id": 133225446,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535915736
    },
    {
        "content": "<p>If <code>nat.pow_add</code> was not proven, you could also use <code>by simpa using pow_add a</code> to prove it</p>",
        "id": 133225489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535915786
    },
    {
        "content": "<p>Dear Mario,<br>\ncan you be more specific, what is  <code>by simpa using pow_add a</code>.</p>",
        "id": 133225601,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535916089
    },
    {
        "content": "<p>I changed to this:</p>\n<p>theorem th01 (a: ℕ ): ∀ m n:ℕ, a ^ (m + n) = (a ^ m) * (a ^ n) :=<br>\nbegin<br>\nrw [nat.pow_add (a:ℕ )]<br>\nend</p>\n<p>But, it did not work neither.</p>",
        "id": 133225696,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535916265
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">th01</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">pow_add</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 133225757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535916404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">th01</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_add</span>\n</pre></div>",
        "id": 133225765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535916433
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">th01</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 133225767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535916451
    },
    {
        "content": "<p>note that you need to have all the variables left of the colon for <code>rw</code> to work here</p>",
        "id": 133225813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535916494
    },
    {
        "content": "<p>Oh, great<br>\nDo you know how can I find the tutorial of using \"simpa\".</p>\n<p>I have the following issue as well. I think it can be done in similar way.</p>\n<p>How to use the theorem:<br>\n#check cardinal.mul_power <br>\ncardinal.mul_power : (?M_1 * ?M_2) ^ ?M_3 = ?M_1 ^ ?M_3 * ?M_2 ^ ?M_3</p>\n<p>To prove that:<br>\ntheorem th07 (a b n: \\N): (a * b)^n = a ^n*b^n.</p>",
        "id": 133226550,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535918138
    },
    {
        "content": "<p>That is an unrelated use of power; although it is possible it would be a weird way to prove that theorem for natural numbers</p>",
        "id": 133226706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535918432
    },
    {
        "content": "<p>the theorem itself is <code>nat.mul_pow</code></p>",
        "id": 133226715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535918464
    },
    {
        "content": "<p>when I run the command:<br>\n#check nat.mul_pow</p>\n<p>it gave me nothing.</p>",
        "id": 133226815,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535918683
    },
    {
        "content": "<p>you need to import <a href=\"https://github.com/leanprover/mathlib/blob/dd0c0aeefcaf6a438ab4273d7a1f42e1b8225847/data/nat/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/dd0c0aeefcaf6a438ab4273d7a1f42e1b8225847/data/nat/basic.lean\">https://github.com/leanprover/mathlib/blob/dd0c0aeefcaf6a438ab4273d7a1f42e1b8225847/data/nat/basic.lean</a></p>",
        "id": 133227003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535919053
    },
    {
        "content": "<p><code>import data.nat.basic</code></p>",
        "id": 133227007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535919062
    },
    {
        "content": "<p>Hello,<br>\ndo you know where can I find the tutorial of using \"simpa\".</p>",
        "id": 133268897,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535991755
    },
    {
        "content": "<p>I think we don't have anything better than <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#simpa\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#simpa\">https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#simpa</a></p>",
        "id": 133268911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535991791
    },
    {
        "content": "<p>Oh, thank you</p>",
        "id": 133270921,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535995077
    }
]