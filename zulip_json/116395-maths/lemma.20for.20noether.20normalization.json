[
    {
        "content": "<p>I want to formalize the following lemma for noether normalization:</p>\n<p><a href=\"/user_uploads/3121/yuJPabrs0yJYfrxIzOaUrcLB/lemma2.png\" target=\"_blank\" title=\"lemma2.png\">lemma2.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yuJPabrs0yJYfrxIzOaUrcLB/lemma2.png\" target=\"_blank\" title=\"lemma2.png\"><img src=\"/user_uploads/3121/yuJPabrs0yJYfrxIzOaUrcLB/lemma2.png\"></a></div><p>My idea was like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lemma22</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">to_set</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">adjoin</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">to_set</span> <span class=\"n\">t</span><span class=\"o\">)),</span>\n  <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">∧</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">is_of_finite_type</span> <span class=\"n\">m</span>\n</pre></div>\n\n\n<p>So the lemma is invoked with the generating set and the finite monomorphism property is translated to the equivalent formulation for modules. Does it make sense to define it this way?<br>\nAlso I am still missing, that the morphism is the canonical one sending y_1 to x_1 .... y to x_n</p>",
        "id": 179235059,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1572272427
    },
    {
        "content": "<p><code>∃ m : module ... ...</code> means \"there exists a ...-module structure on ...`. I don't think that's what you want to say. Maybe that is what you mean by your last sentence.</p>",
        "id": 179236892,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572273682
    },
    {
        "content": "<p>I'm actually pretty confused by the original statement</p>",
        "id": 179237226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572273881
    },
    {
        "content": "<p>my first thought is that the expression is redundant (i.e. every element of K[x1 ... xn] is of that form)</p>",
        "id": 179237429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572274006
    },
    {
        "content": "<p>Other than zero. That was my first thought too</p>",
        "id": 179237457,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572274038
    },
    {
        "content": "<p>and I think the lemma means that for any y in K[x1 ... xn] there are y1 ... y_(n-1) in K[x1 ... xn] such that K[x1 ... xn] is module-finite over the subring K[y1 ... y_(n-1) y]</p>",
        "id": 179237497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572274075
    },
    {
        "content": "<p>I think <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[x_1, \\dots, x_n]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> doesn't mean the polynomial ring, just some <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-algebra generated by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, ..., <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.<br>\nLike how people will write <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo separator=\"true\">,</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[x, 1/x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span></span></span></span>, etc.</p>",
        "id": 179237503,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572274076
    },
    {
        "content": "<p>yeah</p>",
        "id": 179237556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572274085
    },
    {
        "content": "<p>And then is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[y_1, \\dots, y_{n-1}, y]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span> the analogous thing?</p>",
        "id": 179237591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572274112
    },
    {
        "content": "<p>the K-algebra generated by y1 ... yn-1 y</p>",
        "id": 179237618,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572274136
    },
    {
        "content": "<p>So in this setup we have one subalgebra contained in another one and we need the module structure of the second over the first</p>",
        "id": 179238361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572274626
    },
    {
        "content": "<p>which my API readily provides :P</p>",
        "id": 179238405,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572274672
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> is non-empty, so contrary to the claim it doesn't seem to me to implicitly imply <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n\\geq1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 179240050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572275644
    },
    {
        "content": "<p>Looking at the proof (this is from Bosch) Reid is right, it's the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-algebra generated by some bunch of elements, and Kenny is right, it's the subalgebra. The proof will be quite interesting to do in Lean, but will be tough for a beginner (that's not a bad thing, it just means that <span class=\"user-mention\" data-user-id=\"231800\">@Lennard Henze</span> will learn a lot :D )</p>",
        "id": 179240659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572275971
    },
    {
        "content": "<p>Will it matter for practical implementation purposes whether K[x1, ..., xn] is a K-algebra which is generated by some elements, or the K-subalgebra of some other algebra generated by those elements? (Do we need to do Gonthier-style \"commutative subalgebra\"?)</p>",
        "id": 179241244,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572276251
    },
    {
        "content": "<p>I think it would make sense to introduce an <code>is_free</code> predicate on (sub)algebras. Polynomial algebras satisfy this predicate. For any algebra satisfying this predicate, one can choose an algebra isom with a polynomial algebra.</p>",
        "id": 179249357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572280800
    },
    {
        "content": "<p>I haven't thought through the details of the api needed in this case</p>",
        "id": 179249431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572280815
    },
    {
        "content": "<p>But somehow, it feels like it would be useful to have a characteristic predicate for polynomials</p>",
        "id": 179249494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572280834
    },
    {
        "content": "<p>Maybe it shouldn't be a Prop. Maybe it should save data about the generators</p>",
        "id": 179249532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572280852
    },
    {
        "content": "<p>If so... we'll probably have to move 80% of (mv_)polynomial to this new data-carrying \"predicate\"</p>",
        "id": 179249635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572280908
    },
    {
        "content": "<blockquote>\n<p>my first thought is that the expression is redundant (i.e. every element of K[x1 ... xn] is of that form)</p>\n</blockquote>\n<p>I think he is just giving this explicit form, bc he references the coefficients in the proof. Thats why I wanted to get rid of the explicit form in the formulation of the statement and just use it in the proof ( although I have no idea how I can get these coefficients for arbitrary elements of a k-algebra in lean)</p>",
        "id": 179419356,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1572432184
    },
    {
        "content": "<blockquote>\n<p><code>∃ m : module ... ...</code> means \"there exists a ...-module structure on ...`. I don't think that's what you want to say. Maybe that is what you mean by your last sentence.</p>\n</blockquote>\n<p>no i actually want to say: \"there exists a module structure, that has certain properties ...\" ie being of finite type (finitely generated) and being the module corresponding to the homomoprhism that sends y1 to x1 ... y to xn.</p>",
        "id": 179419614,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1572432444
    },
    {
        "content": "<p>Rather than \"there exists a module structure such that ... and is the module structure corresponding to ...\" it's presumably better to say \"the module structure corresponding to ... has property ...\"</p>",
        "id": 179434328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572444064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> you're really good at this stuff. Can you just review Lennard's set-up so he can get on with the proofs? Newcomers can find level-setting hard if they're working at high level.</p>",
        "id": 179440794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572447744
    },
    {
        "content": "<p><a href=\"https://github.com/Forsetes/mathlib/blob/hilberts_nullstellensatz/src/ring_theory/noether_normalization.lean\" target=\"_blank\" title=\"https://github.com/Forsetes/mathlib/blob/hilberts_nullstellensatz/src/ring_theory/noether_normalization.lean\">https://github.com/Forsetes/mathlib/blob/hilberts_nullstellensatz/src/ring_theory/noether_normalization.lean</a></p>",
        "id": 179440915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572447817
    },
    {
        "content": "<p>You're much better than me. I still don't know whether X should extend Y or just have Y in as an axiom. I need someone to write a basic \"mathematicians' guide to making definitions\" for me.</p>",
        "id": 179441063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572447872
    },
    {
        "content": "<p>that \"nonempty index set\" seems non-trivial to state</p>",
        "id": 179445466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572450194
    },
    {
        "content": "<p>it isn't equivalent to saying that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">≠</mi><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">y \\ne 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>",
        "id": 179445493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572450208
    },
    {
        "content": "<p>is it \"y = P(x_1, ..., x_n) for some nonzero polynomial P\"?</p>",
        "id": 179445794,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572450353
    },
    {
        "content": "<p>The condition is long enough I worry I am missing something</p>",
        "id": 179445854,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572450365
    },
    {
        "content": "<p>(Polynomial over K, of course)</p>",
        "id": 179445882,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572450383
    },
    {
        "content": "<p>I think it is</p>",
        "id": 179445928,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572450415
    },
    {
        "content": "<p>y = P(x_1,...,x_n) for some nonzero polynomial P looks good to me, but is there an api to use this?<br>\nAlso in the proof of noether normalization I want to use this to say: If my x_1,...,x_n generating the algebra are not algebraically independent, than I can use the above lemma for y=0 to get new elements y_1,...,y_{n-1}. And than do this over and over until I arrive at alge. independent elements. What would be a good api for lemma2, to make this possible to achieve?</p>",
        "id": 179465208,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1572461856
    }
]