[
    {
        "content": "<p>Where can I find the following facts: <code>Z[x] is a commutative ring</code>, and <code>evaluation at x = i is a ring homomorphism</code>?</p>",
        "id": 124608289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522817165
    },
    {
        "content": "<p>I don't think we have specialized to univariate polynomials, but <code>mv_polynomial</code> and an evaluation operation on it are defined in <code>multivariate_polynomial</code></p>",
        "id": 124608402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522817429
    },
    {
        "content": "<p>Scott -- Kenny has been working on adjoint functors of various forgetful functors, and I pointed out to him that the adjoint of the forgetful functor from commutative rings to sets would give both of the things you ask about for free. Are you back to an internet connection yet? He should talk to you about category theory!</p>",
        "id": 124615375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522832873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  <a href=\"#narrow/stream/113488-general/subject/category.20theory.20libraries/near/124608241\" title=\"#narrow/stream/113488-general/subject/category.20theory.20libraries/near/124608241\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/category.20theory.20libraries/near/124608241</a></p>",
        "id": 124615433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522832946
    },
    {
        "content": "<p>I opened <code>polynomial.lean</code> for the first time as I will need to show that the derivative of a polynomial (in the analytic sense) is given by the algebraic definition <code>p.derivative</code>. I was surprised to see that there is no coercion from <code>polynomial K</code> to <code>K -&gt; K</code>: to evaluate a polynomial <code>p</code> on <code>x</code>, one should write <code>p.eval x</code>. Do you know the reason for this?</p>",
        "id": 182297569,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575229161
    },
    {
        "content": "<p>Initially the coercion was to <code>p.coeff</code>... So <code>p n</code> would be the <code>n</code>th coefficient of <code>p</code>. Indeed, <code>coeff</code> wasn't even defined.</p>",
        "id": 182298217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575230258
    },
    {
        "content": "<p>I'm not sure how it is now, but we've had some complicated type class issues with polynomials in the past. Maybe the coercion wasn't used to avoid creating more problems.</p>",
        "id": 182298525,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575230839
    },
    {
        "content": "<p>The coercion to <code>p.coeff</code> is still there, but only locally in the polynomial file</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">coeff_coe_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_fun</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">comm_semiring</span> <span class=\"n\">coeff_coe_to_fun</span>\n</pre></div>\n\n\n<p>so, you think the lack of the natural coercion is only for historical reasons, and not because the coercion created some problems down the way?</p>\n<p>Also, because of the order of variables in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `eval x p` is the evaluation of the polynomial `p` at `x` -/</span>\n<span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>one can not talk of the function <code>p.eval</code>, only of <code>(λx, p.eval x)</code>... Anyway, this is good enough for what I have to do, and I don't know well enough the subtleties of this part of the library, so I am not going to try to improve this. A big warning in <code>polynomial.lean</code> might be helpful to those who, just like me, will assume from the start that the coercion should be there, and will try to debug their own code when it doesn't work :)</p>",
        "id": 182298588,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575230976
    },
    {
        "content": "<p>I was answering <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , not <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  here.</p>",
        "id": 182298641,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575231018
    },
    {
        "content": "<p>Why can't you talk about <code>p.eval</code>? That's definitely used in places.</p>",
        "id": 182298652,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575231064
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/padics/hensel.lean#L435\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/padics/hensel.lean#L435\">https://github.com/leanprover-community/mathlib/blob/master/src/data/padics/hensel.lean#L435</a></p>",
        "id": 182298659,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575231120
    },
    {
        "content": "<p>You can talk of <code>p.eval x</code>, but not of <code>p.eval</code> just by itself.</p>",
        "id": 182298711,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575231204
    },
    {
        "content": "<p>So,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">has_deriv_at</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">derivative</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>does not typecheck, but </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">derivative</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>does.</p>",
        "id": 182298772,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575231329
    },
    {
        "content": "<p>This order of variables makes sense, though, as it makes it possible to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"kn\">eval</span><span class=\"bp\">.</span><span class=\"n\">is_semiring_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 182298836,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575231467
    },
    {
        "content": "<p>Oh, I see what you mean.</p>",
        "id": 182298893,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575231549
    },
    {
        "content": "<blockquote>\n<p>This order of variables makes sense, though, as it makes it possible to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"kn\">eval</span><span class=\"bp\">.</span><span class=\"n\">is_semiring_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>I think that was the main reason to have this order of variables. Because <code>p.eval</code> usually doesn't have good algebraic properties.</p>",
        "id": 182298942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575231617
    },
    {
        "content": "<p>I'm rewriting polynomials on top of <a href=\"https://github.com/leanprover-community/mathlib/issues/2303\" title=\"https://github.com/leanprover-community/mathlib/issues/2303\">#2303</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/2366\" title=\"https://github.com/leanprover-community/mathlib/issues/2366\">#2366</a> heavily using <code>monoid_algebra</code>. Writing here to avoid duplication of effort.</p>",
        "id": 193525143,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586476821
    },
    {
        "content": "<p>My main goals:</p>\n<ol>\n<li>Move many theorems to <code>monoid_algebra</code> to facilitate declaration of other types of (pseudo) polynomials.</li>\n<li>Use bundled homomorphisms.</li>\n<li>(probably in another PR): rewrite <code>mv_polynomials</code> using new lemmas in <code>monoid_algebra</code>.</li>\n</ol>",
        "id": 193525247,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586476927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Cool, thanks! Are you first doing <code>polynomial</code> and postponing <code>mv_polynomial</code>? Or did I misunderstand you? Because another idea we had for a refactor was to redefine <code>polynomial</code> as <code>mv_polynomial unit</code>...</p>",
        "id": 193538910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586495731
    },
    {
        "content": "<p>I want to have them separately but move all non-trivial lemmas to <code>monoid_algebra</code>.</p>",
        "id": 193547748,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586506793
    },
    {
        "content": "<p>And possibly add, e.g., quasi-polynomials <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><msup><mi>e</mi><mrow><msub><mi>λ</mi><mi>k</mi></msub><mi>x</mi></mrow></msup><msub><mi>P</mi><mi>k</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum e^{\\lambda_k x}P_k(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991179999999998em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 193547838,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586506870
    },
    {
        "content": "<p>Oh, while you are in the area, are you planning to generalize the basic constructions to noncommutative rings? (Specifically, I once wanted <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is noncommutative but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> is central.)</p>",
        "id": 193566521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586523759
    },
    {
        "content": "<p>From some comments of yours from long ago, I'm guessing/hoping the answer is yes</p>",
        "id": 193566570,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586523784
    },
    {
        "content": "<p>Currently I assume that <code>R</code> is commutative but <code>aeval</code> works on a non-commutative <code>R</code>-algebra.</p>",
        "id": 193601155,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586543055
    },
    {
        "content": "<p>I.e., <code>R</code> has coefficients in a commutative semiring and evaluates in a possibly non-commutative <code>R</code>-algebra.</p>",
        "id": 193601202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586543096
    },
    {
        "content": "<p>Otherwise I don't know how to deal with <code>f * g</code>.</p>",
        "id": 193601226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586543107
    },
    {
        "content": "<p>Can we even make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is non-commutative?</p>",
        "id": 193601264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586543142
    },
    {
        "content": "<p>Why not?</p>",
        "id": 193601373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586543201
    },
    {
        "content": "<p>If the machinery already lets us define this and also define the multiplication for free (assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> commutes with the elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>) then we may as well include it, even if we have to assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> commutative for most of the lemmas.</p>",
        "id": 193601428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586543245
    },
    {
        "content": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mi>X</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mi>X</mi><mo>+</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>c</mi><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>d</mi><mo>+</mo><mi>b</mi><mi>c</mi><mo stretchy=\"false\">)</mo><mi>X</mi><mo>+</mo><mi>b</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">(aX + b)(cX + d) = acX^2 + (ad + bc)X + bd</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">d</span></span></span></span></span></p>",
        "id": 193601442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586543254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I just meant <code>def polynomial (α : Type*) [comm_semiring α] := add_monoid_algebra α ℕ</code> has <code>comm</code> in</p>",
        "id": 193601450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586543257
    },
    {
        "content": "<p>I know I can make it in maths.</p>",
        "id": 193601471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586543264
    },
    {
        "content": "<p>Aah, mathlib can't do it, right now.</p>",
        "id": 193601480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586543275
    },
    {
        "content": "<p>Removing <code>comm_</code> the definition still compiles.</p>",
        "id": 193601584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586543318
    },
    {
        "content": "<p>the first 180 lines of data.polynomial work fine if you remove a few <code>comm_</code>s</p>",
        "id": 193601770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586543411
    },
    {
        "content": "<p>These lines were already rewritten in my branch.</p>",
        "id": 193602188,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586543647
    },
    {
        "content": "<p>I'll have to start with algebras over non-commutative semirings.</p>",
        "id": 193602213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586543667
    },
    {
        "content": "<p>Currently all <code>eval</code> code is based on <a href=\"https://github.com/leanprover-community/mathlib/pull/2366/files#diff-e2a238122850402db7234c094c816422R229\" title=\"https://github.com/leanprover-community/mathlib/pull/2366/files#diff-e2a238122850402db7234c094c816422R229\">monoid_algebra.lift</a></p>",
        "id": 193602329,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586543738
    },
    {
        "content": "<p>(defined in a pending PR, to be updated)</p>",
        "id": 193602344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586543751
    },
    {
        "content": "<p>This approach gives us a lot of properties for free without induction on <code>p</code>.</p>",
        "id": 193602436,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586543806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  What kind of <code>eval2</code> do you want in this case? I want <code>aeval</code> to be the main interface so it is easy to deal with <code>f : R →+* S</code> with a <code>comm_semiring S</code> or <code>f : R →+* center S</code>. Do you need <code>f : R →+* centralizer x</code>?</p>",
        "id": 193608767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586547365
    },
    {
        "content": "<p>I don't need anything, it was Reid who wanted noncommutative rings.</p>",
        "id": 193609083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586547542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Sorry. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 193609423,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586547740
    },
    {
        "content": "<p>Well, currently we don't have algebras over a noncommutative ring and I am not sure the concept makes sense.</p>",
        "id": 193636163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586569012
    },
    {
        "content": "<p>Is that going to be a big problem?</p>",
        "id": 193636175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586569066
    },
    {
        "content": "<p>No, I've figured out how to do it.</p>",
        "id": 193641172,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586578284
    },
    {
        "content": "<p>I could figure out what specifically I wanted to do with these noncommutative polynomials if it's still useful. It would just require recalling some things I last thought about a year or so ago.</p>",
        "id": 193641380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586578595
    }
]