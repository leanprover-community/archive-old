[
    {
        "content": "<p>Hi everyone,<br>\nI would like to formalize the following definition:<br>\n<a href=\"https://stacks.math.columbia.edu/tag/01G0\">https://stacks.math.columbia.edu/tag/01G0</a></p>\n<p>This should be straightforward. The only possible hickup is the universes as one quantifies over types.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SR</span> <span class=\"o\">:=</span> <span class=\"bp\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">),</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">SR</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">y.1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span><span class=\"o\">),</span> <span class=\"n\">x.2</span> <span class=\"n\">i</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">y.2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">g.1</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f.1</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f.2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">g.2</span> <span class=\"n\">_</span><span class=\"o\">)‚ü©</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>However, I would also like to have a formulation of the following concept:<br>\n<a href=\"https://stacks.math.columbia.edu/tag/01G3\">https://stacks.math.columbia.edu/tag/01G3</a></p>\n<p>And this point seems to be incompatible with the way grothendieck pretopologies are defined in mathlib. Specifically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.presieve\">docs#category_theory.presieve</a> uses sets of morphisms as opposed to maps from some indexing set. I could take the range of some function but I feel like this will get clunky very quickly. </p>\n<p>What do people think about approaching these two definitions from the stacks project? (I'm not settled on the definition in the code above BTW).</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 231408712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616461852
    },
    {
        "content": "<p>I think a good comparison for this is the definition of sites/pretopologies in the stacks project: <a href=\"https://stacks.math.columbia.edu/tag/00VG\">https://stacks.math.columbia.edu/tag/00VG</a> - this definition turns out to be <em>incredibly</em> awkward to work with in dtt, specifically because of the maps from the indexing set. For a concrete example, you run into huge issues when you want to compare between sites and sieves: working with sets of morphisms gives you obvious equality but even in the stacks project they need to specifically define notions of equality, and even then those definitions (I think) need the dreaded eq_to_homs anyway.</p>",
        "id": 231413098,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616465891
    },
    {
        "content": "<p>I'm hesitant about using that implementation of <code>SR</code> that you give but I can't think of anything better - though I suspect you can convert from maps from the indexing set to a set of morphisms defined by an inductive definition</p>",
        "id": 231413155,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616465973
    },
    {
        "content": "<p>Perhaps not the most helpful comparison but I'm thinking of this along the same lines as <a href=\"https://github.com/leanprover-community/mathlib/blob/9f56a0bf9c8a50ff12701922a97e238cc668413c/src/category_theory/sites/sieves.lean#L59\">https://github.com/leanprover-community/mathlib/blob/9f56a0bf9c8a50ff12701922a97e238cc668413c/src/category_theory/sites/sieves.lean#L59</a> - if you think of the singleton family as indexed by the unit type I feel like it's the same idea, originally I had a much less pleasant definition </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">singleton</span> <span class=\"o\">:</span> <span class=\"n\">presieve</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">Z</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">H</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>which did work, but then Reid suggested this inductive type and everything got a lot nicer - I think in your case something similar applies</p>",
        "id": 231413390,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616466154
    },
    {
        "content": "<p>In general when there is a question about universes I think it's often a good idea to look for alternate definitions in the literature which don't have universe parameters - I don't know if this applies in your context though?</p>",
        "id": 231413710,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616466437
    },
    {
        "content": "<p>Looking at the definition from SGA which stacks says is essentially equivalent (provided my French isn't too rusty), that defines a semirepresentable object as a presheaf isomorphic to a direct sum of representable presheaves; though I think this doesn't help with the universes problem</p>",
        "id": 231413994,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616466707
    },
    {
        "content": "<p>When universes are getting in the way I usually just get lazy and become less polymorphic, after having done a quick check in my head that the examples in thinking about all have everything in the same universe...</p>",
        "id": 231435454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616487733
    }
]