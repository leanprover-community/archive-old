[
    {
        "content": "<p>I'm interested in defining derivations (or in having someone else define them!) and I'm wondering how hard we should try to be general.</p>\n<p>Thanks to <span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> I have seen this thread:<br>\n<a href=\"#narrow/stream/116395-maths/topic/derivation\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/derivation</a><br>\nwhere <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> sketched out some superb stuff but seems to have shelved it a year ago.</p>",
        "id": 204605016,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595366973
    },
    {
        "content": "<p>Consider the following (informal) theorems / definitions:</p>\n<ol>\n<li>The exceptional Lie algebra g₂ is equivalent to the derivations of the octonions</li>\n<li>Every derivation of a semisimple Lie algebra is inner</li>\n<li>For commutative algebras there exists a universal derivation through which all others factor</li>\n</ol>\n<p>For now I'm only interested in 1 above but I would like if the same definition of derivation worked for each.</p>",
        "id": 204605097,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595367010
    },
    {
        "content": "<p>Mathematically, given a possibly-non-associative algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>, a derivation is an additive group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> that is simultaneously a left- and right- <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>-module (not necessarily a bimodule since I want to cater for the non-associative cases 1 and 2 with the algebras as left-right modules over themselves via multiplication) together with a linear map: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\"> d : A \\to M </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span><br>\nsatisfying: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mi>a</mi><mo stretchy=\"false\">)</mo><mtext>•</mtext><mi>b</mi><mo>+</mo><mi>a</mi><mtext>•</mtext><mi>d</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\"> d(ab) = (da) • b + a • db </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span><span class=\"mord\">•</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">•</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">b</span></span></span></span></p>",
        "id": 204605181,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595367076
    },
    {
        "content": "<p>Unfortunately, I immediately encounter a few issues if I think about formalising this in Mathlib.<br>\nSpecifically:<br>\n  A. We do not have a definition of not-necessarily-associative algebras<br>\n  B. We only have left modules<br>\n  C. The product on Lie algebras comes from an instance of <code>has_bracket</code> rather than <code>has_mul</code></p>\n<p>To me (A) is fine; indeed building up the theory of non-necessarily-associative algebras, say as far as basic facts about composition algebras, would probably be very rewarding. Everyone knows the octonions are loads of fun!</p>\n<p>For (B) maybe there's no issue here provided I'm willing to talk about opposite rings.</p>\n<p>So it's (C) that really concerns me. Even with (A) and (B) out of the way, we're be faced with the problem that Lie algebras would not definitionally be non-associative algebras and so we'd be forced to have a separate <code>lie_derivation</code> definition and annoying logic to transport language back and forth.</p>",
        "id": 204605360,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595367193
    },
    {
        "content": "<p>I realise this is all rather waffly but I'd be very grateful for any comments, especially with respect to (C). I do hope the above makes sense, I have had some wine.</p>",
        "id": 204605372,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595367203
    },
    {
        "content": "<p>Your point is that the operation on the octonians is usually written <code>*</code> but the operation on a Lie algebra is usually written <code>[a,b]</code> and you want these both to be instances of a non-associative algebra class. Yeah, this is an issue, I agree. You can either bundle the operation into the definition of the class, or you can write <code>to_bracketive</code> :-/</p>",
        "id": 204606099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595367719
    },
    {
        "content": "<p>Oh, I realise I have a thinko above wrt (B) I should be talking about modules of a possibly-non-associative _algebra_ and I'd need some convincing there's a sensible representation theory of these</p>",
        "id": 204606150,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595367732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes that's exactly my point.</p>",
        "id": 204606181,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595367754
    },
    {
        "content": "<p>I think I'll need to sleep on this, the more I think about this, the slightly less trivial it seems to be to make the general definition I'd like.</p>",
        "id": 204606293,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595367827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> let's say Oliver wanted to make a variant <code>has_foo</code> of <code>has_add</code>, and we wanted <code>too_fooitive</code> to work in some part of mathematics, e.g. the theory of Lie algebras, translating between theorems with a typeclass <code>has_foo</code> and theorems with a typeclass <code>has_mul</code> (which also happened to be Lie algebras). At the very least you'd need some kind of dictionary from the <code>mul</code>, <code>one</code>, <code>inv</code> words to the corresponding abbreviations in your language. If we can't do this, then how do we put the R-algebra structure on 2x2 real matrices coming from the Lie bracket?  Those matrices already have an R-algebra structure, coming from matrix multiplication.</p>",
        "id": 204650504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595414059
    },
    {
        "content": "<p>I see two possible approaches to <code>has_mul</code> vs <code>has_bracket</code>: (1) type tag like <code>multiplicative</code>/<code>additive</code>; (2) <code>to_additive</code>-style attribute.</p>",
        "id": 204679331,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595430865
    },
    {
        "content": "<p>OK thank you both. I hope to have time to return to this in a week or so. For now I'm mentally summarising this as \"while awkward, solutions exist\".</p>",
        "id": 204721207,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595451031
    },
    {
        "content": "<p>Feel free to ask questions about pros and cons of each approach. I don't read all the messages every day, so the best way to get a faster reply from me is to @ tag me.</p>",
        "id": 204759009,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595477456
    },
    {
        "content": "<p>I see. So <code>lie_algebra.to_nonassociative_algebra</code> sends <code>L</code> to the defeq <code>to_multiplicative L</code> and then you just pray that Lean guesses the right multiplication</p>",
        "id": 204765850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595487830
    },
    {
        "content": "<p>Yes, you define <code>instance to_nonassoc_algebra_has_mul [has_bracket L] : has_mul (to_nonassoc_algebra L) := ⟨λ x y, (bracket x y : L)⟩</code>, then restate all theorems you need about <code>has_mul</code> version in terms of <code>has_bracket</code> with proofs <code>:= @mul_thm (to_nonassoc_algebra L) ...</code> (see <code>algebra/group_power</code> for example).</p>",
        "id": 204793291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595509280
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I look forward to trying to use this in the near future. I appreciate the guidance!</p>",
        "id": 204854456,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1595538942
    }
]