[
    {
        "content": "<p>I want to define X to be Y ∧ Z, where Z is dependent on Y.</p>\n<p>As an example, I want to define </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">factors_through</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"bp\">→*</span> <span class=\"n\">zmod</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">χ₀</span>  <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">d</span> <span class=\"bp\">→*</span> <span class=\"n\">zmod</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">χ</span> <span class=\"bp\">=</span> <span class=\"n\">χ₀.comp</span> <span class=\"o\">(</span><span class=\"n\">zmod.cast_hom</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Is there a way to do this? One way is to use Y ∧ (Y → Z). Is there anything simpler?</p>\n<p>Thank you!</p>",
        "id": 276604213,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1648206917
    },
    {
        "content": "<p>You could do it as a <code>struct</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">factors_through</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"bp\">→*</span> <span class=\"n\">zmod</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dvd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_coe</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">χ₀</span>  <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">d</span> <span class=\"bp\">→*</span> <span class=\"n\">zmod</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">χ</span> <span class=\"bp\">=</span> <span class=\"n\">χ₀.comp</span> <span class=\"o\">(</span><span class=\"n\">zmod.cast_hom</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 276604387,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648206994
    },
    {
        "content": "<p>You can also write <code>\\exists y : Y, Z y</code></p>",
        "id": 276604581,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648207108
    },
    {
        "content": "<p>(or maybe <code>h</code> or <code>hy</code> would be a less confusing variable name)</p>",
        "id": 276604637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648207157
    },
    {
        "content": "<p>Ah, I see. I had completely forgotten about structures <span aria-label=\"relieved\" class=\"emoji emoji-1f60c\" role=\"img\" title=\"relieved\">:relieved:</span> <br>\nBoth suggestions should work, thank you!</p>",
        "id": 276604715,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1648207205
    }
]