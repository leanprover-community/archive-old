[
    {
        "content": "<p>Hi there, I was wondering if we had a proof formalised in Lean yet that the limit of (sin(x))/x is equal to 1. I looked over Mathlib and couldn't find anything of the sort.</p>",
        "id": 180544772,
        "sender_full_name": "James Palmer",
        "timestamp": 1573582816
    },
    {
        "content": "<p>I don't think we have. We have very little \"concrete\" results so far.</p>",
        "id": 180544803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573582843
    },
    {
        "content": "<p>I also think it might be quite a challenge given current technology. But you might be able to reuse a whole bunch of computations that Chris used for the definition of pi</p>",
        "id": 180544867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573582896
    },
    {
        "content": "<p>This is basically equivalent to proving that the derivative of sin is cos, which in my mind is a key missing thing. What I think we really need is that a power series is differentiable within its radius of convergence.</p>",
        "id": 180545101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573583028
    },
    {
        "content": "<p>At school I was told that we would at some point prove that sin(x)/x tended to 1 as x tended to zero. We then used that fact to deduce that the derivative of sin was cos, and then later on after we'd drawn the graph of sin and had got thoroughly used to the fact that its derivative at 0 was cos(0)=1, the teacher told us that it was now obvious that sin(x)/x tended to 1 because cos(0)=1.</p>",
        "id": 180545866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573583420
    },
    {
        "content": "<p>I think you actually want this more general result first. <a href=\"https://proofwiki.org/wiki/Derivative_of_Uniformly_Convergent_Series_of_Continuously_Differentiable_Functions\" target=\"_blank\" title=\"https://proofwiki.org/wiki/Derivative_of_Uniformly_Convergent_Series_of_Continuously_Differentiable_Functions\">https://proofwiki.org/wiki/Derivative_of_Uniformly_Convergent_Series_of_Continuously_Differentiable_Functions</a></p>",
        "id": 180546717,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573583969
    },
    {
        "content": "<p>I've never taught this stuff so the last time I saw a proof of it was 30 years ago and I have no idea where to start.</p>",
        "id": 180574623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573602583
    },
    {
        "content": "<p>You're right that it looks like a nice general statement though. Is it proved in 2nd year analysis at Imperial?</p>",
        "id": 180574692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573602606
    },
    {
        "content": "<p>I think so.</p>",
        "id": 180574991,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573602839
    },
    {
        "content": "<p>I think there's something more general about sequences.</p>",
        "id": 180575062,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573602877
    },
    {
        "content": "<p><a href=\"https://proofwiki.org/wiki/Derivative_of_Uniformly_Convergent_Sequence_of_Differentiable_Functions\" target=\"_blank\" title=\"https://proofwiki.org/wiki/Derivative_of_Uniformly_Convergent_Sequence_of_Differentiable_Functions\">https://proofwiki.org/wiki/Derivative_of_Uniformly_Convergent_Sequence_of_Differentiable_Functions</a></p>",
        "id": 180575257,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573603088
    },
    {
        "content": "<p>I guess the road map is to</p>\n<ol>\n<li>Define power series, with ROC, etc</li>\n<li>Define sine as some power series, prove that that power series converges (possibly before defining sine to be that power series) </li>\n<li>Do a similar thing for cosine</li>\n<li>Use the Fréchet derivative in mathlib to ge the univariate derivative.</li>\n<li>Prove some result like what Chris has mentioned about being able to differentiate inside the power series within the ROC or something else about uniform convergence</li>\n<li>Differentiate the sine power series, see that it is equal to the cosine power series</li>\n<li>Try to generalise to the complex numbers (shouldn't be too difficult, just replace a bunch of symbols and then fix things)</li>\n<li>Try to generalise even further to some sufficiently regular algebraic structure</li>\n</ol>",
        "id": 180601929,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573633122
    },
    {
        "content": "<p>Oh and of course,</p>\n<ol start=\"9\">\n<li>Realise that the initial road map was completely changed after step 1</li>\n</ol>",
        "id": 180601939,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573633150
    },
    {
        "content": "<p>1a is done</p>",
        "id": 180601959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573633188
    },
    {
        "content": "<p>As in, we have a definition of formal power series in mathlib. But nothing yet about ROC</p>",
        "id": 180602015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573633230
    },
    {
        "content": "<p>Also, Chris's work on <code>exp</code>, <code>sin</code> and <code>pi</code> was from before the definition of power series. So far these pieces of the library have not been glued together</p>",
        "id": 180602041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573633275
    },
    {
        "content": "<p>Oh, ok thanks. We'll have a look these things. Will we have to learn what a filter is?</p>",
        "id": 180602846,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573634107
    },
    {
        "content": "<p>Yes.</p>",
        "id": 180602857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573634123
    },
    {
        "content": "<p>If you want to do things the mathlib way, then yes</p>",
        "id": 180602859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573634126
    },
    {
        "content": "<p>If you are interested in anything related to analysis in mathlib you need to learn filters. And you'll be very happy in the end.</p>",
        "id": 180602879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573634154
    },
    {
        "content": "<p>Ok, great <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 180602971,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573634225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span> Why don't you post your roadmap as an issue in the mathlib github? If you use <code>[ ]</code> then we can even have checkboxes to tick off.</p>",
        "id": 180603089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573634383
    },
    {
        "content": "<p>Yes please do this. If people want to change it later that's fine. I am interested in formalising parts of our undergraduate syllabus and the fact that the derivative of sin is cos is used from day 1 in the \"methods\" courses (without justification, because everyone was told it in high school and the methods courses continue with this tradition) so this sort of thing is a big roadblock to even beginning to formalise the problem sheets in these courses.</p>",
        "id": 180603980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573635231
    },
    {
        "content": "<p>I would suggest focusing on <code>exp</code> for this roadmap. <code>sin</code> and <code>cos</code> should follow as algebraic combinations, not more power series</p>",
        "id": 180606013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573637059
    },
    {
        "content": "<p>I've also said this before, but the theory of power series and termwise differentiation is not required for <code>exp</code>; you can take the derivative at zero by some elementary estimates, using the definition of the derivative</p>",
        "id": 180606362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573637309
    },
    {
        "content": "<p>Not that it wouldn't be useful to have the analytic theory of power series, but to me it's a high powered tool that isn't needed here</p>",
        "id": 180606417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573637371
    },
    {
        "content": "<p>Ah, yes this makes sense. I see that in <code>data/complex/exponential.lean</code> we have that <code>exp</code> is defined as a power series and <code>sin</code> and <code>cos</code> are algebraic combinations of <code>exp</code> as you suggest.</p>",
        "id": 180608126,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573638735
    },
    {
        "content": "<p>Right, of course - I can just guess the derivative of exp and then show it satisfies the definition of a Fréchet derivative. And I can also do the same with sin! Sorry, I was still in the \"analysis 2\" mindset where you don't know any multivariate calculus yet; at my university we proved all these derivative theorems by differentiating a power series term by term.</p>",
        "id": 180608136,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573638758
    },
    {
        "content": "<p>I'll put a theory of power series as a different project some of us at Warwick will want to do after proving that the derivative of sine is cosine</p>",
        "id": 180608270,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573638878
    },
    {
        "content": "<p>The trick with <code>exp</code> is to prove that <code>exp' 0 = 1</code>, and then <code>exp' a = (exp (a+x))' (x=0) = (exp a * exp x)' (0) = exp a * exp' 0 = exp a</code></p>",
        "id": 180608505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573639023
    },
    {
        "content": "<p>in other words, you can exploit <code>exp (a+x) = exp a * exp x</code> and the multiplication rule for differentiation to reduce the problem to calculating the derivative at zero</p>",
        "id": 180608699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573639119
    },
    {
        "content": "<p>This also makes sense, thanks!</p>",
        "id": 180609349,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573639543
    },
    {
        "content": "<p>But we need the theorem that a power series is differentiable within its radius of convergence to be a respectable maths library.</p>",
        "id": 180609785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573639846
    },
    {
        "content": "<p>Of course. But I like to have the developments follow the needs, when possible, and use the simplest tool for the job. In metamath I used a basic tail estimate to find the derivative of exp, and it wasn't until the lagrange formula for pi that I needed the actual theory of power series, to prove that Abel's theorem applies to the power series for the arctangent.</p>",
        "id": 180610389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573640328
    },
    {
        "content": "<p>Then how come we ended up with the Bochner integral before the Riemann integral?</p>",
        "id": 180610439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573640374
    },
    {
        "content": "<p>'The job' involves a bunch of things that aren't going to be Riemann integrable</p>",
        "id": 180610515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573640413
    },
    {
        "content": "<p>It's possible that some of the power series work can be reused for the proof that exp is differentiable, but I think it is unlikely</p>",
        "id": 180610587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573640493
    },
    {
        "content": "<p>the direct elementary proof is pretty simple, it's hard to beat</p>",
        "id": 180610658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573640533
    },
    {
        "content": "<p>in order to apply the general theory you still need to know a bunch of things about the ROC that amount to the same tail estimates I'm talking about</p>",
        "id": 180610715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573640579
    },
    {
        "content": "<p>fair do's</p>",
        "id": 180610911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573640711
    },
    {
        "content": "<p>To reiterate, I think that the general theory of power series is useful and we should put it on the todo list. But it's not blocking elementary calculus</p>",
        "id": 180610987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573640757
    },
    {
        "content": "<p>I just wanted to mention that the question whether <code>deriv ℝ sin = cos</code> makes sense in mathlib since 20 minutes (i.e., the moment <a href=\"https://github.com/leanprover-community/mathlib/issues/1670\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1670\">#1670</a> was merged). Thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> !</p>",
        "id": 180623065,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573650282
    },
    {
        "content": "<p>What are good resources for learning about filters? Are filters \"common knowledge\" or are they a weird quirk? That is, if I ask one of my analysis professors about filters will they start talking about coffee or analysis?</p>",
        "id": 180817744,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573812517
    },
    {
        "content": "<p>Coffee</p>",
        "id": 180820489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573814987
    },
    {
        "content": "<p>Filters are treated in Bourbaki. You can also read about them in any treatment on the Stone-Cech compactification, or compactness in model theory.</p>",
        "id": 180820609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573815045
    },
    {
        "content": "<p>Ok thanks</p>",
        "id": 180821117,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573815473
    },
    {
        "content": "<p>Besides the wikipedia page, you can also look at Johannes's paper on filters for formalization of analysis: <a href=\"http://home.in.tum.de/~hoelzl/documents/hoelzl2013typeclasses.pdf\" target=\"_blank\" title=\"http://home.in.tum.de/~hoelzl/documents/hoelzl2013typeclasses.pdf\">http://home.in.tum.de/~hoelzl/documents/hoelzl2013typeclasses.pdf</a></p>",
        "id": 180822080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573816227
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/08/04/what-is-a-filter-how-some-computer-scientists-think-about-limits/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/08/04/what-is-a-filter-how-some-computer-scientists-think-about-limits/\">https://xenaproject.wordpress.com/2018/08/04/what-is-a-filter-how-some-computer-scientists-think-about-limits/</a></p>",
        "id": 180836572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573828090
    },
    {
        "content": "<p>Cheers!</p>\n<p>What is <code>set.univ</code> in the definition of a filter?</p>\n<div class=\"codehilite\"><pre><span></span>structure filter (α : Type*) :=\n(sets                   : set (set α))\n(univ_sets              : set.univ ∈ sets)\n(sets_of_superset {x y} : x ∈ sets → x ⊆ y → y ∈ sets)\n(inter_sets {x y} : x ∈ sets → y ∈ sets → x ∩ y ∈ sets)\n</pre></div>",
        "id": 180850908,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573837239
    },
    {
        "content": "<p>The set containing every element of <code>α</code>. In normal maths it is <code>α</code>, but in type theory <code>α</code> is not a set.</p>",
        "id": 180851483,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573837653
    },
    {
        "content": "<blockquote>\n<p>If you are interested in anything related to analysis in mathlib you need to learn filters. And you'll be very happy in the end.</p>\n</blockquote>\n<p>wow - can confirm, filters are cool and are making me very happy</p>",
        "id": 180853142,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573838812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> About power series, <code>exp</code>, <code>sin</code> etc. Would be cool to have one-variable power series in non-commutative settings. I think of the exponent of a linear endomorphism. Though one can play a game like \"restrict to the subalgebra generated by <code>A</code>, compute in this subalgebra, come back\". Maybe, it's easier.</p>",
        "id": 180942103,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573965455
    },
    {
        "content": "<p>I don't know much algebra - what's the motivation for this?</p>",
        "id": 180950938,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573984400
    },
    {
        "content": "<p>Given the spirit of mathlib, power series are probably going to end up being done with as much generality as possible. I don't know whether this includes noncommutative settings.</p>\n<p>Currently, however, I personally am still at a fairly early stage; I've yet to fully understand the definition of the derivative because it's so general and it's written in lean.</p>",
        "id": 180951235,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1573984969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span> Then ignore my comment. I'd like to have a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{d}{dt} \\exp(At)=\\exp(At)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2251079999999999em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span> in Lean for <code>A</code> being a bounded linear endomorphism. This immediately leads to the formula <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x(t)=\\exp(At)x(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> for solutions of a linear ODE <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo>˙</mo></mover><mo>=</mo><mi>A</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\dot x=Ax</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\">x</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.11111000000000001em;\">˙</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">x</span></span></span></span>. As I said before, it's possible to work around non-commutativity even if most theorems are stated for commutative algebras.</p>",
        "id": 180965356,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1574011888
    },
    {
        "content": "<p>Sounds interesting. I've no idea :)</p>",
        "id": 180968589,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574017980
    },
    {
        "content": "<p>what does the  <code>L[𝕜] F</code> in <code>analysis/calculus/fderiv.lean</code> mean? </p>\n<div class=\"codehilite\"><pre><span></span>def has_fderiv_at_filter (f : E → F) (f&#39; : E →L[𝕜] F) (x : E) (L : filter E) :=\nis_o (λ x&#39;, f x&#39; - f x - f&#39; (x&#39; - x)) (λ x&#39;, x&#39; - x) L\n</pre></div>",
        "id": 181654370,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574440505
    },
    {
        "content": "<p>I think <code>→L[𝕜]</code> means a continuous 𝕜-linear map. Jump to definition should help.</p>",
        "id": 181654524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574440580
    },
    {
        "content": "<p>Cheers! The thing is though, when I <code>git clone</code> mathlib, and then I open it in vs-code, none of it seems to compile? Do I have to grab some binaries from somewhere? Do I have to just wait?</p>",
        "id": 181655152,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574440964
    },
    {
        "content": "<p>What are you doing? Are you contributing to mathlib or using mathlib?</p>",
        "id": 181655231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574441018
    },
    {
        "content": "<p>Contributing / messing about with it to understand it more</p>",
        "id": 181655316,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574441050
    },
    {
        "content": "<p>Ok, then git clone is a good first move. Then you need to checkout the <code>lean-3.4.2</code> branch and call <code>cache-olean --fetch</code> (assuming your installed the supporting tooling as described in mathlib install page).</p>",
        "id": 181655410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574441123
    },
    {
        "content": "<p>Thanks! This seems to be working a bit more. I now get errors like</p>\n<div class=\"codehilite\"><pre><span></span>file &#39;analysis/asymptotics&#39; not found in the LEAN_PATH\n</pre></div>",
        "id": 181655631,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574441255
    },
    {
        "content": "<p>Where are you seeing this? Did you restart the Lean server after fetching oleans?</p>",
        "id": 181656069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574441528
    },
    {
        "content": "<p>yes, I have restarted the lean server. Now I get issues like</p>\n<div class=\"codehilite\"><pre><span></span>could not resolve import: analysis.calculus.fderiv\n</pre></div>",
        "id": 181656383,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574441777
    },
    {
        "content": "<p>Did you open the mathlib folder in VScode?</p>",
        "id": 181656419,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574441815
    },
    {
        "content": "<p>Or directly a file?</p>",
        "id": 181656440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574441826
    },
    {
        "content": "<p>Or a subfolder of the mathlib folder?</p>",
        "id": 181656454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574441834
    },
    {
        "content": "<p>Ah, yes! I had opened <code>src</code>. Everything is working fine now, thanks!</p>",
        "id": 181656607,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574441924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> it seems almost every beginner falls into this trap. Do you think the VScode extension could issue a warning if asked to work outside of a folder containing a leanpkg.path?</p>",
        "id": 181656764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574442023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Yes, that's a great idea. The earliest I could look into this is probably next weekend, so if Gabriel or anyone else has some time before then they should go for it.</p>",
        "id": 181662537,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574445746
    },
    {
        "content": "<p>Would a FAQ page be a good idea?</p>",
        "id": 181662775,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574445959
    },
    {
        "content": "<p>This particular issue with opening the project directory is mentioned in the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">\"project\"</a> doc file. But a separate FAQ would probably be a good idea too.</p>",
        "id": 181662947,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574446078
    },
    {
        "content": "<p>I've seen students just click on Lean files and open them with VS Code. I would say that pointing people towards cloning Patrick's test repo and using update-mathlib was a better idea than getting them to clone mathlib directly and then have to switch branches before cache-olean works. I think cloning the test repo is the easiest way to get going. See <a href=\"https://github.com/leanprover-community/mathlib/issues/1728\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1728\">#1728</a> (ooh, modular form number!)</p>",
        "id": 181668467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574450124
    },
    {
        "content": "<p>For me, mathlib defaulted to the lean-4.3.2 branch</p>",
        "id": 181670841,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574451989
    },
    {
        "content": "<p>wow, that version doesn't even exist yet</p>",
        "id": 181671074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574452197
    },
    {
        "content": "<p>Oh, oops - I mean lean-4.2.1, or whatever!</p>",
        "id": 181673414,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574453799
    },
    {
        "content": "<p>Oh wait</p>",
        "id": 181673448,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574453825
    },
    {
        "content": "<p>3.4.2?</p>",
        "id": 181673458,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574453838
    },
    {
        "content": "<p>I have a tactic state</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\ny c : ℝ,\nhc : c &gt; 0\n⊢ {x : ℝ | ∥sin x + (-sin y + -((x + -y) * cos y))∥ ≤ c * ∥x + -y∥} ∈ (nhds y).sets\n</pre></div>\n\n\n<p>In normal maths I would say<br>\nLet x ∈ ℝ such that ∥sin x + (-sin y + -((x + -y) * cos y))∥ ≤ c * ∥x + -y∥<br>\nSo I feel like <code>intros x, hx</code> should do what I want - but it doesn't work.<br>\nHow do I deal with sets in lean?</p>\n<p>Context  below:</p>\n<div class=\"codehilite\"><pre><span></span>import analysis.calculus.deriv\nimport data.complex.exponential\n\nopen real\n\nexample (y : ℝ): has_deriv_at sin (cos y) y :=\nbegin\n  intro,\n  intro hc,\n  simp,\n\n  sorry\nend\n</pre></div>",
        "id": 181731589,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574543727
    },
    {
        "content": "<p>Just to mention that this fact is proved in <a href=\"https://github.com/leanprover-community/mathlib/issues/1695\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1695\">#1695</a>, which is currently PRed to mathlib, so no need to work too hard on it. As for your question, you want to show that some set is a neighborhood of <code>y</code>. In maths terms, you need to find some <code>epsilon</code> such that your set contains the open interval <code>(y - epsilon, y + epsilon)</code>, so a math proof would certainly not start with <code>Let x ∈ ℝ such that ∥sin x + (-sin y + -((x + -y) * cos y))∥ ≤ c * ∥x + -y∥</code>. It would start with <code>let epsilon = c/10</code> (or whatever you need). Let me show that, for any <code>x</code> satisfying <code>|x - y| &lt; epsilon</code>, then  <code>∥sin x + (-sin y + -((x + -y) * cos y))∥ ≤ c * ∥x + -y∥</code>. The mathlib proof would definitely go this way, using additionally things like <code>filter.mem_sets_of_superset</code> and <code>mem_nhds_sets</code> (that say that a set containing a neighborhood of <code>y</code> is itself a neighborhood of <code>y</code>, and that an open set containing <code>y</code> is a neighborhood of <code>y</code>).</p>",
        "id": 181731989,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574544399
    },
    {
        "content": "<p>Ah, thanks. I don't really understand what <code>nhds y</code> is yet so I'll have to focus on that.</p>",
        "id": 181732167,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574544721
    },
    {
        "content": "<p>Sébastien's answer is right, but you may still have some difficulties to return to familiar grounds. You could study:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"err\">∥</span><span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">sin</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">y</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">}</span> <span class=\"err\">∈</span> <span class=\"err\">𝓝</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">mem_nhds_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">sin</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">mem_ball</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Note how your non-terminal <code>simp</code> with unwanted \"simplification\" (using the dreaded <code>sub_eq_add_neg</code>) is replaced by something much more controled. The last two lines are controversial, you may be better off with general notions than trying to get down to earth with absolute value, but they illustrate the power of <code>change</code>.</p>",
        "id": 181751028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574583763
    },
    {
        "content": "<p>Thanks! This is a helpful example to study</p>",
        "id": 181751205,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1574584118
    },
    {
        "content": "<p>I forgot one piece of my message at the end: the last line could be replace by <code>change abs (x - y) &lt; c / 10 at x_in,</code> but I wanted to illustrate explicit rewriting of definitional equality vs <code>change</code>.</p>",
        "id": 181751213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574584155
    },
    {
        "content": "<blockquote>\n<p>Do you think the VScode extension could issue a warning if asked to work outside of a folder containing a leanpkg.path?</p>\n</blockquote>\n<p>Gabriel has implemented this feature in the latest release! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 181764533,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574608432
    }
]