[
    {
        "content": "<p>Are we happy with the design of <code>units</code> and <code>is_unit</code>?</p>\n<div class=\"codehilite\"><pre><span></span>structure units (α : Type u) [monoid α] :=\n(val : α)\n(inv : α)\n(val_inv : val * inv = 1)\n(inv_val : inv * val = 1)\n\ndef is_unit [monoid α] (a : α) : Prop := ∃u:units α, a = u\n</pre></div>\n\n\n<p>This was a bit of a surprise to me.  A more common pattern would be to define <code>is_unit</code> as a structure with three fields, and then <code>units</code> as a dependent pair, an element and evidence that it was a unit.</p>\n<p>I guess the current design has the (small?) advantage that we can put <code>is_unit</code> in <code>Prop</code>, rather than just show it's a subsingleton.</p>",
        "id": 175576378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568326639
    },
    {
        "content": "<p>I guess the reasoning is: the type of <code>units</code> must record the inverse, not only its existence, and <code>is_unit</code> must be a <code>Prop</code>. Under those two conditions, the resulting definitions are quite reasonable....</p>",
        "id": 175594652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568351432
    },
    {
        "content": "<p>The only reasonable variation I can see is to make <code>is_unit</code> a type that records the inverse (and is a subsingleton). With that version you could factor it the other way around, but if <code>is_unit</code> is a prop then this approach is easier</p>",
        "id": 175595810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568353000
    },
    {
        "content": "<p>I believe <code>is_unit</code> came later, and it was needed for defining an ideal or something so it was necessary for it to be a prop</p>",
        "id": 175595884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568353083
    },
    {
        "content": "<p>At the same time, e.g., <code>is_iso</code> records the inverse. If we need <code>Prop</code>, we can always use <code>nonempty (is_unit x)</code>.</p>",
        "id": 176052763,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1568846173
    },
    {
        "content": "<p>I would argue that <code>is_iso</code> is not following the naming convention then, although maybe it's fine if the propositional version is not useful in category theory</p>",
        "id": 176063581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568859351
    },
    {
        "content": "<p>We should come up with a naming convention for these \"witnesses in Type\" for existential predicates, but I'm at a loss as to what it should be. <code>unit_of</code>? <code>inverse</code>?</p>",
        "id": 176063703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568859500
    }
]