[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Do you secretely have <code>comm_ring.closure</code> with a <code>subring</code> instance somewhere in your repositories?</p>",
        "id": 135495590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539116167
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 135495611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539116181
    },
    {
        "content": "<p>Too bad. Do you want to sprint through it?</p>",
        "id": 135495859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539116365
    },
    {
        "content": "<p>sure</p>",
        "id": 135495873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539116377
    },
    {
        "content": "<p>I began with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_list_of_mem_closure</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"err\">∈</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"o\">([</span><span class=\"n\">a</span><span class=\"o\">]),</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"o\">([]),</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">{</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">la</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">eqa</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">lb</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">eqb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">la</span> <span class=\"bp\">++</span> <span class=\"n\">lb</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eqa</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">eqb</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">or_imp_distrib</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hb</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a_in_clo</span> <span class=\"n\">hlist</span> <span class=\"o\">{</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hlist</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">la</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">eqa</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">la</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)),</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span> <span class=\"n\">at</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">x_in</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b_in</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_reverse</span> <span class=\"n\">at</span> <span class=\"n\">b_in</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">b_in</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hb&#39;</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hb</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hb&#39;</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">cc</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">eqa</span><span class=\"o\">,</span> <span class=\"n\">inv_prod</span> <span class=\"n\">la</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">add_group</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_list_of_mem_closure</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"err\">∈</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span> <span class=\"n\">add_group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">comm_ring</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">closure</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span>\n    <span class=\"o\">{</span> <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">mem_closure</span> <span class=\"o\">(</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a_in</span> <span class=\"n\">b_in</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">exists_list_of_mem_closure</span> <span class=\"n\">a_in</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">la</span><span class=\"o\">,</span> <span class=\"n\">hla</span><span class=\"o\">,</span> <span class=\"n\">sum_a</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">exists_list_of_mem_closure</span> <span class=\"n\">b_in</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">lb</span><span class=\"o\">,</span> <span class=\"n\">hlb</span><span class=\"o\">,</span> <span class=\"n\">sum_b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">sum_a</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">sum_b</span><span class=\"o\">],</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"kn\">end</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">comm_ring</span>\n</pre></div>",
        "id": 135495989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539116438
    },
    {
        "content": "<p>But I lost courage because of <a href=\"#narrow/stream/116395-maths/subject/to_additive.20multiplicative/near/135470227\" title=\"#narrow/stream/116395-maths/subject/to_additive.20multiplicative/near/135470227\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/to_additive.20multiplicative/near/135470227</a> and sum manipulations</p>",
        "id": 135496035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539116471
    },
    {
        "content": "<p>The trouble is that the big_operator stuff in mathlib is all about sums over finset, not lists</p>",
        "id": 135496067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539116515
    },
    {
        "content": "<p>(here I mean the trouble with the final sorry, the <code>to_additive</code> stuff is simply total mystery)</p>",
        "id": 135496121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539116542
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"n\">H2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"n\">H2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H4</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">comm_ring</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">closure</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">mem_closure</span> <span class=\"o\">(</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hb</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">ha</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">))</span>\n      <span class=\"o\">((</span><span class=\"n\">zero_mul</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">neg_mul_eq_neg_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span> <span class=\"n\">hab</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">add_mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">hab</span> <span class=\"n\">hcb</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">mul_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">neg_mul_eq_mul_neg</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"n\">hab</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mul_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">hab</span> <span class=\"n\">hac</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">comm_ring</span>\n</pre></div>",
        "id": 135497365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539117616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 135497371,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539117625
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 135497490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539117733
    },
    {
        "content": "<p>Could we still get the list statements analogue to what is already in mathlib for monoids?</p>",
        "id": 135497506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539117756
    },
    {
        "content": "<p>Is the reducible attribute purely intended to save a couple of <code>dunfold</code> in the instance building?</p>",
        "id": 135497537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539117821
    },
    {
        "content": "<blockquote>\n<p>Is the reducible attribute purely intended to save a couple of <code>dunfold</code> in the instance building?</p>\n</blockquote>\n<p>yes</p>",
        "id": 135497735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539117996
    },
    {
        "content": "<p>Why do you get <code>monoid.in_closure.rec_on</code> for free when defining <code>monoid.in_closure</code> but need to write <code>add_monoid.in_closure.rec_on</code>?</p>",
        "id": 135497881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539118143
    },
    {
        "content": "<p>Is it because of the multiplicative to additive magic?</p>",
        "id": 135497906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539118172
    },
    {
        "content": "<p>which is not magic enough?</p>",
        "id": 135497918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539118183
    },
    {
        "content": "<p>because <code>add_monoid.closure</code> is not defined using <code>to_additive</code></p>",
        "id": 135498021,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539118264
    },
    {
        "content": "<p>And why isn't it defined using <code>to_additive</code>?</p>",
        "id": 135498278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539118522
    },
    {
        "content": "<p>The definition is really weird. At some point earlier Lean was completely confused and asked me to prove stuff involving 1 in an additive context</p>",
        "id": 135498343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539118570
    },
    {
        "content": "<p>I would have never thought of proving that instance using these nested inductions. The real world proof manipulating sums is so easy, it seems beyond masochistic to write your proof.</p>",
        "id": 135498464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539118709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">exists_list_of_mem_closure</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"err\">∈</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">exists_list_of_mem_closure</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 135498625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539118864
    },
    {
        "content": "<p>this is even more confusing</p>",
        "id": 135498664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539118917
    },
    {
        "content": "<p>I thought you would be using your custom recursor</p>",
        "id": 135498756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539118989
    },
    {
        "content": "<p>me too</p>",
        "id": 135498770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539119007
    },
    {
        "content": "<p>and halfway I realized</p>",
        "id": 135498777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539119013
    },
    {
        "content": "<p>Do you understand what's going on with this way of turning multiplicative stuff into additive one?</p>",
        "id": 135498839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539119047
    },
    {
        "content": "<p>somewhat.</p>",
        "id": 135498846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539119056
    },
    {
        "content": "<p>What about the <code>exists_lists_of_mem_closure</code> in the ring case?</p>",
        "id": 135500038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120125
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">exists_list_of_mem_closure</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135500057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120164
    },
    {
        "content": "<p>I guess I would try to use the previous theorems but you'll run crazy inductions...</p>",
        "id": 135500098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120209
    },
    {
        "content": "<p>why do we need <code>list (list R)</code>?</p>",
        "id": 135500174,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539120259
    },
    {
        "content": "<p>ah I see</p>",
        "id": 135500189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539120280
    },
    {
        "content": "<p>maybe we should prove the recursor for comm_ring.closure first</p>",
        "id": 135500217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539120307
    },
    {
        "content": "<p>of course the maths proof is not at all by induction</p>",
        "id": 135500248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120352
    },
    {
        "content": "<p>but in Lean it would probably be easier by induction</p>",
        "id": 135500297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120369
    },
    {
        "content": "<p>oh how do you prove it in maths?</p>",
        "id": 135500313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539120392
    },
    {
        "content": "<p>The maths proof starts with <code>  rcases add_group.exists_list_of_mem_closure h with ⟨L1, hL1, L1sum⟩,</code></p>",
        "id": 135500454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120535
    },
    {
        "content": "<p>Then you need to apply <code>monoid.exists_list_of_mem_closure</code> everywhere you see monoid.closure in hL1</p>",
        "id": 135500482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120579
    },
    {
        "content": "<p>of course it's already beyond my Lean fu, because of the binder</p>",
        "id": 135500500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120596
    },
    {
        "content": "<p>and this get you get your list of lists</p>",
        "id": 135500566,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120625
    },
    {
        "content": "<p>except for the substractions</p>",
        "id": 135500573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120631
    },
    {
        "content": "<p>I guess my statement is wrong</p>",
        "id": 135500579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120639
    },
    {
        "content": "<p>no, it's ok</p>",
        "id": 135500610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120671
    },
    {
        "content": "<p>I think it is wrong, because of -1. <code>s</code> could even be empty.</p>",
        "id": 135500677,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539120745
    },
    {
        "content": "<p>edge cases...</p>",
        "id": 135500702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120772
    },
    {
        "content": "<p>who cares about those?</p>",
        "id": 135500707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120778
    },
    {
        "content": "<p>I clearly need to sleep though. I'm sure the <code>Kenny</code> tactic can fix the statement while writing the proof</p>",
        "id": 135500809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120901
    },
    {
        "content": "<p>of what?</p>",
        "id": 135500845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539120948
    },
    {
        "content": "<p><code>ring.exists_list_of_mem_closure</code></p>",
        "id": 135501115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539121228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"n\">H2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"n\">H2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H4</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_hom</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_hom</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">comm_ring</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">closure</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_list_of_mem_closure</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">exists_list_of_mem_closure</span> <span class=\"n\">hx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">[</span><span class=\"n\">L</span><span class=\"o\">],</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">forall_mem_singleton</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">)),</span> <span class=\"n\">zero_add</span> <span class=\"bp\">_⟩</span>\n    <span class=\"kn\">end</span><span class=\"o\">)</span>\n  <span class=\"bp\">⟨</span><span class=\"o\">[],</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">forall_mem_nil</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">L1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">L1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">L2</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h2</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">L3</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">forall_mem_cons</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">L3</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span>\n        <span class=\"kn\">end</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod_cons</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">L1</span> <span class=\"n\">neg_zero</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n        <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">neg_add</span><span class=\"o\">])</span><span class=\"bp\">⟩</span>\n    <span class=\"kn\">end</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"n\">hr1</span> <span class=\"n\">hr2</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">r1</span><span class=\"o\">,</span> <span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"n\">ih1</span><span class=\"o\">,</span> <span class=\"n\">ih2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">L1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">L2</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">L1</span> <span class=\"bp\">++</span> <span class=\"n\">L2</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">forall_mem_append</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_append</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum_append</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n    <span class=\"kn\">end</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">mem_closure</span> <span class=\"o\">(</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hb</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">ha</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">))</span>\n      <span class=\"o\">((</span><span class=\"n\">zero_mul</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">neg_mul_eq_neg_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span> <span class=\"n\">hab</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">add_mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">hab</span> <span class=\"n\">hcb</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">mul_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">neg_mul_eq_mul_neg</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"n\">hab</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mul_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">hab</span> <span class=\"n\">hac</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">comm_ring</span>\n</pre></div>",
        "id": 136534435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540544450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> will you PR this?</p>",
        "id": 136534452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540544465
    },
    {
        "content": "<p>I can do it if you don't want to do it</p>",
        "id": 136534702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1540544837
    },
    {
        "content": "<p>But it would make more sense if you do it yourself</p>",
        "id": 136534707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1540544853
    },
    {
        "content": "<p>otherwise git won't credit you</p>",
        "id": 136534710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1540544863
    },
    {
        "content": "<p>where should I put it?</p>",
        "id": 136534715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540544874
    },
    {
        "content": "<p>Maybe in the subgroup and subring files?</p>",
        "id": 136534762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1540544902
    },
    {
        "content": "<p>maybe it'll just go to limbo like <a href=\"https://github.com/leanprover/mathlib/pull/425\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/425\">https://github.com/leanprover/mathlib/pull/425</a></p>",
        "id": 136534767,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540544920
    },
    {
        "content": "<p>This is much smaller scope</p>",
        "id": 136534791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1540544959
    },
    {
        "content": "<p>It should be an easy merge</p>",
        "id": 136534800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1540544981
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/444\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/444\">https://github.com/leanprover/mathlib/pull/444</a></p>",
        "id": 136646441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540722569
    },
    {
        "content": "<p>done <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 136646444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540722577
    }
]