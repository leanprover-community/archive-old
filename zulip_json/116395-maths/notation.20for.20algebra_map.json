[
    {
        "content": "<p>Random thought. Should we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`↑ₐ`</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>• Pro: in informal maths, this is usually an invisible map. <code>↑ₐ</code> is a lot more invisible than <code>algebra_map _ _</code><br>\n• Con: It's pretty invisible to new users. Yet another mysterioglyph that needs to be learned and deciphered.</p>",
        "id": 267033987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641455755
    },
    {
        "content": "<p>I made a thread about this maybe 6 months ago</p>",
        "id": 267042837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641463074
    },
    {
        "content": "<p>I'm not sure about notation for this. When we're creating something resembling conventional mathematical notation then I see the case but I don't recall ever seeing notation for <code>algebra_map</code> in conventional mathematics (except maybe <code>•</code>).</p>",
        "id": 267043116,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641463212
    },
    {
        "content": "<p>In conventional mathematics we don't write <code>A →ₐ[R] B</code> or <code>↑n * r</code> either though, right?</p>",
        "id": 267043404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641463367
    },
    {
        "content": "<p>No, we write things like \"A -&gt; B is an R-algebra homomorphism\" which is far worse</p>",
        "id": 267043486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641463437
    },
    {
        "content": "<p>So both <code>↑</code> and <code>ₐ</code> are already \"lean noise\"</p>",
        "id": 267043492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641463438
    },
    {
        "content": "<p>or \"efficient compression\"</p>",
        "id": 267043551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641463455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20algebra_map/near/267043404\">said</a>:</p>\n<blockquote>\n<p>In conventional mathematics we don't write <code>A →ₐ[R] B</code> or <code>↑n * r</code> either though, right?</p>\n</blockquote>\n<p>I could be blind to the craziness of familiar notation (both formal and informal) but at least for me the distance between our <code>A →ₐ[R] B</code> and the conventional <code>A → B</code> (where context disambiguates) is smaller than between <code>↑ₐ</code> and what we'd write informally (e.g, <code>•</code> or <code>f</code> or nothing).</p>",
        "id": 267044585,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641464157
    },
    {
        "content": "<p>I think I'd write nothing at all for <code>algebra_map</code> -- if B is an A-algebra then elements of A \"are\" elements of B.</p>",
        "id": 267044669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641464209
    },
    {
        "content": "<p>Right.</p>",
        "id": 267044682,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641464223
    },
    {
        "content": "<p>I'm not against <code>↑ₐ</code> though, I enjoy using fewer characters. I just don't want Mathlib to become as opaque to new users as APL.</p>",
        "id": 267044735,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641464267
    },
    {
        "content": "<p>ι gεt θat <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> APL φτɯ</p>",
        "id": 267045000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641464497
    },
    {
        "content": "<p>There was the old proposal to get rid of <code>algebra_map</code> and just use <code>a • b</code> everywhere. Maybe that's the best option after all.</p>",
        "id": 267045114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641464566
    },
    {
        "content": "<p>I'm confused. Surely \\bub can only be used when doing algebra_map a * b? What if I want to do (algebra_map a)^2?</p>",
        "id": 267045262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641464654
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_map\">docs#algebra_map</a></p>",
        "id": 267045290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641464675
    },
    {
        "content": "<p><code>(a • 1)^2</code> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 267045318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641464698
    },
    {
        "content": "<p>Great</p>",
        "id": 267045333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641464709
    },
    {
        "content": "<p>It's still shorter <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 267045362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641464723
    },
    {
        "content": "<p>I'm still holding out hope that someone will change the definition of <code>algebra</code> so that it extends <code>module</code> and does not include the map.</p>",
        "id": 267045386,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641464742
    },
    {
        "content": "<p>But we still need to refer to the map sometimes</p>",
        "id": 267045445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641464766
    },
    {
        "content": "<p>Yes but it will be definitionally shorter which should help.</p>",
        "id": 267045485,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641464822
    },
    {
        "content": "<p>Or more precisely we won't write <code>algebra_map</code> for the times when we don't care that the scalar action is also a multiplicative homomorphism.</p>",
        "id": 267045656,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641464972
    },
    {
        "content": "<p>Anyway I've ruined this thread. There are good reasons to consider <code>↑ₐ</code>. I'm not against it, just on the fence.</p>",
        "id": 267045765,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641465042
    },
    {
        "content": "<p>What if we made a class extending <code>has_coe</code>(<code>_t</code>?) stating the coercion is a ring hom? This could replace the uses of <code>algebra</code> where we want <code>algebra_map</code> to be defeq to something concrete, and it gives nice and easy <code>↑</code> notation for the easy case. We'd still want some notation for the bundled map, but that should occur less (I hope!) than the unbundled, applied coercion.</p>",
        "id": 267047796,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641466464
    },
    {
        "content": "<p>The downside is that it would duplicate a bunch of ring hom API.</p>",
        "id": 267047881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641466532
    },
    {
        "content": "<p>On the other hand, we'll deduplicate e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.cast_mul\">docs#int.cast_mul</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.coe_mul\">docs#subring.coe_mul</a>, etc.</p>",
        "id": 267047999,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641466614
    },
    {
        "content": "<p>We'd still need a typeclass to say that smul and the coercion are consistent though</p>",
        "id": 267048029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641466648
    },
    {
        "content": "<p>Either that, or we make a <code>has_ring_coe.to_algebra</code> instance.</p>",
        "id": 267048110,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641466689
    },
    {
        "content": "<p>That would generate data which is bad</p>",
        "id": 267048127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641466709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20algebra_map/near/267047796\">said</a>:</p>\n<blockquote>\n<p>What if we made a class extending <code>has_coe</code>(<code>_t</code>?) stating the coercion is a ring hom?</p>\n</blockquote>\n<p>Could this just be an extra part of the existing <code>[algebra A B]</code>?</p>",
        "id": 267048287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641466812
    },
    {
        "content": "<p>Then we would automatically have compatibility with <code>smul</code>, etc...</p>",
        "id": 267048346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641466831
    },
    {
        "content": "<p>Yes, that's what algebra.smul_def is today</p>",
        "id": 267048373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641466857
    },
    {
        "content": "<p>It would mean that every search for a <code>coe</code> between <code>A</code> and <code>B</code> would fire <code>[semiring A] [semiring B] [algebra A B]</code>. Is that a problem?</p>",
        "id": 267048487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641466928
    },
    {
        "content": "<p>(Here's the old thread: <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20.60algebra_map.60.20.2F.20.60algebra.2Eof_id.60/near/216356787\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20for.20.60algebra_map.60.20.2F.20.60algebra.2Eof_id.60/near/216356787</a>)</p>",
        "id": 267048512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641466945
    },
    {
        "content": "<p>If we go down this route, I would envisage something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_ring_hom_coe</span> <span class=\"kd\">extends</span> <span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">B.</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_ring_hom_coe</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- just like we have today, but `ring_hom` is replaced with `has_ring_hom_coe`</span>\n<span class=\"kd\">class</span> <span class=\"n\">algebra</span> <span class=\"kd\">extends</span> <span class=\"n\">has_ring_hom_coe</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- the same fields we have today</span>\n</code></pre></div>",
        "id": 267048759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641467117
    },
    {
        "content": "<p>To summarize, I guess this is the \"yes, let's have notation and it should just be <code>coe</code>\" answer to your question</p>",
        "id": 267048809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641467160
    },
    {
        "content": "<p>A crazier option would be to change the type of <code>coe</code> from <code>A → B</code> to <code>coe_wrapper A B</code> (a single-field structure) and then we can register a <code>ring_hom_class (coe_wrapper A B)</code>, <code>monoid_hom_class</code>, etc under suitable situations</p>",
        "id": 267049102,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641467379
    },
    {
        "content": "<p>What is the benefit of having both <code>has_ring_hom_coe</code> <em>and</em> <code>algebra</code>?</p>",
        "id": 267051111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641468878
    },
    {
        "content": "<p>I would like to add that sometimes we really want to talk about the map. For example in <code>flt-regular</code> we are using a lot the fact that sometimes it is automatically injective.</p>",
        "id": 267052413,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641470031
    },
    {
        "content": "<p>Not sure that I like it, but how about the spelling <code>ring_hom.coe A B</code> for what used to be <code>algebra_map A B</code>?</p>",
        "id": 267052704,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641470279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20algebra_map/near/267051111\">said</a>:</p>\n<blockquote>\n<p>What is the benefit of having both <code>has_ring_hom_coe</code> <em>and</em> <code>algebra</code>?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.scalar\">docs#matrix.scalar</a> satisfies the first but not the second when <code>R</code> is not commutative</p>",
        "id": 267058847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641474699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20algebra_map/near/267051111\">said</a>:</p>\n<blockquote>\n<p>What is the benefit of having both <code>has_ring_hom_coe</code> <em>and</em> <code>algebra</code>?</p>\n</blockquote>\n<p>I want my canonical maps to have concrete <code>defeq</code>s, while Oliver doesn't want to have the <code>algebra_map</code> field in <code>algebra</code>. If I can use <code>has_ring_hom_coe</code> instead, then an <code>algebra_map</code>-less algebra is fine for me.</p>",
        "id": 267063045,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641477257
    },
    {
        "content": "<p>Note that I'm in the middle of a large algebra refactor regarding right actions (<a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a>), so I'd appreciate it if people could hold off on starting a large parallel one!</p>",
        "id": 267067721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641480066
    },
    {
        "content": "<p>My personal view is that up-arrows feel much less \"mathematical\" than decorated left-to-right arrows or bullets for multiplication.</p>\n<p>I actually find the proposal of writing <code>a • b</code> quite good: I am used to writing the product of elements of A and of an A-algebra B in the same way as multiplication in either A or B alone, but there is always something in the back of my mind saying that the notation should really acknowledge that they are not the same...</p>",
        "id": 267071060,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641481731
    },
    {
        "content": "<p>Right, mathematically it would make sense to delete <code>algebra_map</code> altogether and just write <code>a • 1</code> for the inclusion of the scalars into the algebra. The thing is that you very often encounter a pair of rings with a canonical map between them: a subring and a larger ring, {ℕ, ℤ, ℚ} and a {semiring, ring, field of char 0}, a ring and its fraction field, a ring of integers and a number field, ... It doesn't quite make mathematical sense to use \"algebra\" to describe this situation, but the <code>algebra</code> class does work well. So my proposal to make a <code>coe_ring_hom</code> class is to separate the second kind of usage from the first, so that (later) we can get rid of <code>algebra_map</code> and just write <code>a • b</code>.</p>",
        "id": 267074446,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641483533
    }
]