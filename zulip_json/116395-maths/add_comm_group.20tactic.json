[
    {
        "content": "<p>Could we get a scaled down <code>ring</code> tactic handling <code>add_comm_group</code>? My current goal is <code>φ (x', y') - φ (x, y) =   φ (x', y₁) - φ (x, y₁) + (φ (x', y') - φ (x', y₁) - (φ (x, y') - φ (x, y₁))) + (φ (x₁, y') - φ (x₁, y)) + (φ (x, y') - φ (x, y) - (φ (x₁, y') - φ (x₁, y)))</code> and I can't face proving it by hand</p>",
        "id": 131120526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533748164
    },
    {
        "content": "<p>it's on the todo list</p>",
        "id": 131120596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748226
    },
    {
        "content": "<p>(this is a generalization of the thing I called a <code>ring</code> bug the other day because I forgot to tell Lean rings are commutative)</p>",
        "id": 131120597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533748226
    },
    {
        "content": "<p>Why not put a ring structure on your group? ;-)</p>",
        "id": 131120730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533748389
    },
    {
        "content": "<p>I think once someone showed me a group for which they could prove that this could not be done, unfortunately.</p>",
        "id": 131120750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533748414
    },
    {
        "content": "<p>I think I know how to do modules; maybe you could use that</p>",
        "id": 131120759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748439
    },
    {
        "content": "<p>Oh yeah, Q/Z. No possibility for 1 because it would be killed by some n, but not everything is killed by n</p>",
        "id": 131120813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533748471
    },
    {
        "content": "<p>any non-unital ring satisfies this criterion</p>",
        "id": 131120860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748531
    },
    {
        "content": "<p>oh, actually I think you stand to gain just a bit by using a module tactic to solve abelian group problems</p>",
        "id": 131120979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748664
    },
    {
        "content": "<p>It makes me think I should try the <code>rcases_hint</code> tactic now that you pushed it</p>",
        "id": 131120989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533748681
    },
    {
        "content": "<p>since it would be able to handle <code>(m * n) . x = m . (n . x)</code> where m,n : Z</p>",
        "id": 131121036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748705
    },
    {
        "content": "<p>but a standard abelian group tactic can't deal with Z variables</p>",
        "id": 131121042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748728
    },
    {
        "content": "<p>You should definitely try <code>rcases_hint</code>. I wrote 200 lines of lean in one sitting and tested it once at the end, and it seemed to work</p>",
        "id": 131121067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748778
    },
    {
        "content": "<p>...at least it's type correct</p>",
        "id": 131121113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748805
    },
    {
        "content": "<p>Unfortunately, <code>add_comm_group</code> is not the same as <code>module \\Z</code></p>",
        "id": 131121736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533749558
    },
    {
        "content": "<p>that's not a significant problem for a tactic, it can supply the instance when needed</p>",
        "id": 131121833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533749663
    },
    {
        "content": "<p>speaking of which, someone should prove that instance. All the hard work is already done</p>",
        "id": 131121859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533749723
    },
    {
        "content": "<p>I can't use the depth parameter</p>",
        "id": 131123895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533751640
    },
    {
        "content": "<p>The syntax is <code>rcases_hint e {depth := 4}</code> or <code>rintro_hint {depth := 4}</code></p>",
        "id": 131123968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533751708
    },
    {
        "content": "<p>the lack of delimiter between <code>e</code> and the cfg may cause a problem</p>",
        "id": 131123979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533751733
    },
    {
        "content": "<p>it complains <code>e</code> is not a function</p>",
        "id": 131123982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533751739
    },
    {
        "content": "<p>so yes, a delimiter may help</p>",
        "id": 131123992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533751753
    },
    {
        "content": "<p>I'm open to suggestions</p>",
        "id": 131123998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533751782
    },
    {
        "content": "<p>would <code>rcases_hint e : 4</code> be too weird?</p>",
        "id": 131124080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533751869
    },
    {
        "content": "<p>it's not meant to stay in the final Lean file anyway</p>",
        "id": 131124093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533751894
    },
    {
        "content": "<p>so I would say it's fine</p>",
        "id": 131124101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533751905
    },
    {
        "content": "<p>What about trying to guess better names?</p>",
        "id": 131124410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533752270
    },
    {
        "content": "<blockquote>\n<p>speaking of which, someone should prove that instance. All the hard work is already done</p>\n</blockquote>\n<p>Do we want an actual <code>instance</code>, or just 2 lemmas that convert either way. I think we can't have instances both ways, right? That would blow up the type class system <span class=\"emoji emoji-1f4a5\" title=\"boom\">:boom:</span></p>",
        "id": 131125303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533753249
    },
    {
        "content": "<p>We already have an instance one way, the other one should just be a def</p>",
        "id": 131125618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533753651
    },
    {
        "content": "<p>I changed <code>rcases_hint</code> to <code>rcases?</code>, <code>hint</code>  takes too long to write</p>",
        "id": 131125639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533753677
    },
    {
        "content": "<p>the depth thing should be fixed</p>",
        "id": 131125657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533753714
    },
    {
        "content": "<blockquote>\n<p>My current goal is <code>φ (x', y') - φ (x, y) =   φ (x', y₁) - φ (x, y₁) + (φ (x', y') - φ (x', y₁) - (φ (x, y') - φ (x, y₁))) + (φ (x₁, y') - φ (x₁, y)) + (φ (x, y') - φ (x, y) - (φ (x₁, y') - φ (x₁, y)))</code> and I can't face proving it by hand</p>\n</blockquote>\n<p>This was the last missing piece, so I decided to try it. After about 15 minutes of misery, I found out that <code>apply eq_of_sub_eq_zero, simp</code> does the trick!</p>",
        "id": 131131422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533760711
    },
    {
        "content": "<blockquote>\n<p>Unfortunately, <code>add_comm_group</code> is not the same as <code>module \\Z</code></p>\n</blockquote>\n<p>OK so in the perfectoid mathlib pile-up there is <code>quotient_group.lean</code>, which I wrote based on <code>quotient_module.lean</code>. But what I actually want is <code>quotient_add_group.lean</code> so I can use it to improve <code>quotient_ring.lean</code>. I see three possibilities for making <code>quotient_add_group.lean</code> : </p>\n<p>(1) just copy <code>quotient_group.lean</code> changing all the <code>*</code>s to <code>+</code>s etc. </p>\n<p>(2) Some sort of tactic magic</p>\n<p>(3) <em>deduce</em> the results from <code>quotient_module.lean</code> using the fact that, as we mathematicians say, an abelian group \"is\" a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>-module.</p>\n<p>Which is the best idea?</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Do you mind if I put our names on the top of <code>quotient_group.lean</code> (remember -- I wrote it, basically copying from <code>quotient_module.lean</code> and then you fixed up a bunch of stuff and made it better) and PR it to mathlib via the community mathlib?</p>",
        "id": 131133991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533764120
    },
    {
        "content": "<p>No problem, go ahead</p>",
        "id": 131134156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533764324
    }
]