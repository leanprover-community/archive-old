[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partial_deriv</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- p.sum $ λ v r, C r * (add_monoid.smul (v i) (X i ^ (v i - 1)) * v.prod (λ j n, if i = j then 1 else (mv_polynomial.X j)^n))</span>\n<span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- #exit</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_zero_index</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">zero_apply</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">monomial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hji</span> <span class=\"n\">hij</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hji</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hij</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hij</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hji</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hji</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">C_1</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">C_mul&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">smul_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">hfv</span> <span class=\"n\">hs</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">monomial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">smul_single</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_smul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_smul_index&#39;</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_sum</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">smul_single</span><span class=\"o\">,</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">j</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hkj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hkj</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hjw</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hjw</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hkj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hkj</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hjw</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hjw</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"n\">p</span> <span class=\"n\">hpv</span> <span class=\"n\">hr</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">partial_deriv_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">ihp</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">s</span> <span class=\"n\">q</span> <span class=\"n\">hqw</span> <span class=\"n\">hs</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">partial_deriv_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">ihq</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"n\">w</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm₄</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm₄</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">erw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span> <span class=\"n\">erw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">⊆</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_add</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span>\n  <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">degrees_add</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">sup_le</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">⊆</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_add</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"o\">(</span><span class=\"n\">degrees_mul</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_X_subset</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"o\">(</span><span class=\"n\">degrees_X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hj</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">of_not_mem_vars</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hiv</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">to_multiset</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">degrees</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_sup</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">to_multiset</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">single_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hiv</span><span class=\"o\">,</span>\n<span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"n\">h1</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"n\">h2</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"err\">$</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hiv</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_cons_self</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_of_not_mem_vars</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_not_mem_vars</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mv_polynomial</span>\n</pre></div>",
        "id": 170727198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562942573
    },
    {
        "content": "<p>PR-ready?</p>",
        "id": 170727214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562942584
    },
    {
        "content": "<p>Looks pretty good to me. Maybe <code>C_mul''</code> can be called <code>C_mul_eq_smul</code>?</p>",
        "id": 170728887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562943791
    },
    {
        "content": "<p>I've started thinking about a proper way to introduce partial derivatives into <code>mathlib</code>.</p>",
        "id": 212204845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785022
    },
    {
        "content": "<p>It's clear how to define <code>pderiv</code> for a function <code>f : (fin n → k) → E</code></p>",
        "id": 212205074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785474
    },
    {
        "content": "<p>But this definition won't work, e.g., for <code>f : k × k → E</code> or <code>f : k → E</code>, and this doesn't sound good for a mathematician.</p>",
        "id": 212205083,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785526
    },
    {
        "content": "<p>I suggest introducing something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_canonical_basis</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212205205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785770
    },
    {
        "content": "<p>With instances for <code>σ → k</code>, <code>euclidean_space</code>, <code>E × F</code> (using <code>σ = σE ⊕ σF</code>), <code>k</code> (using <code>σ = unit</code>).</p>",
        "id": 212205257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> What do you think?</p>",
        "id": 212205276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785905
    },
    {
        "content": "<p>We have the same problem in the omin repository. We introduced a <code>has_coordinates</code> typeclass.</p>",
        "id": 212207352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you think it is ready for PR?</p>",
        "id": 212207353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790104
    },
    {
        "content": "<p>(Of course it doesn't assume any <code>normed*</code> stuff. So we'll have to think whether it is good enough, or maybe you need some <code>has_normed_coordinates</code> extending it.</p>",
        "id": 212207406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790170
    },
    {
        "content": "<p>Actually, we can just upgrade from <code>linear_equiv</code> to <code>continuous_linear_equiv</code> using finiteness of <code>σ</code>.</p>",
        "id": 212207478,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601790312
    },
    {
        "content": "<p>Could you please post a link to your <code>has_coordinates</code> code?</p>",
        "id": 212207505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601790362
    },
    {
        "content": "<p><a href=\"https://github.com/rwbarton/lean-omin/blob/master/src/o_minimal/coordinates.lean\">https://github.com/rwbarton/lean-omin/blob/master/src/o_minimal/coordinates.lean</a></p>",
        "id": 212207598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790487
    },
    {
        "content": "<p>There is also Patrick's <code>has_uncurry</code> class in mathlib, which might be the right solution for your use case</p>",
        "id": 212207670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790615
    },
    {
        "content": "<p>No, it will uncurry <code>f : k × k → E</code> to <code>k → k → E</code>, not to <code>(fin 2 → k) → E</code>.</p>",
        "id": 212207864,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601790998
    },
    {
        "content": "<p>Or <code>(unit ⊕ unit → k) → E</code></p>",
        "id": 212207874,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601791028
    },
    {
        "content": "<p>I would prefer to have any <code>(σ : Type*) [fintype σ]</code> as an index type, not necessarily <code>fin n</code>.</p>",
        "id": 212207942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601791164
    },
    {
        "content": "<p>Because for <code>E × F</code> it's easier to deal with <code>sum.inl k</code> than some <code>fin</code> magic.</p>",
        "id": 212207971,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601791204
    },
    {
        "content": "<p>And I need coordinates to be linear. So, probably I'll add another typeclass.</p>",
        "id": 212208020,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601791318
    },
    {
        "content": "<p>There is still the issue that, on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>⊕</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E \\oplus F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, some people call partial derivative the derivative with respect to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> (so, it's not a number, it's really a matrix). But it is impossible to get a notion that covers all these variants, so I think your idea is a very nice one to cover one-dimensional partial derivatives.</p>",
        "id": 212210858,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1601796684
    },
    {
        "content": "<p>We can mention that <code>∂f/∂x : E →L[k] G</code> for <code>f : E × F → G</code> can be written as <code>fderiv (λ x, f (x, y))</code>.</p>",
        "id": 212211037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601797027
    },
    {
        "content": "<p>Yes, sure!</p>",
        "id": 212211038,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1601797059
    },
    {
        "content": "<p>In general, the problem is how to replace a given fin.dim. R-vector space with some fixed model R^ι (ι a finite type) or R^n in a conventional way. For some purposes the order of coordinates is irrelevant, and then R^ι is enough, but for other purposes the order really matters and you need R^n. For example, consider row reduction of the matrices that represent linear maps, or classifying subspaces by how they meet the standard flag inside R^n. Likewise in model theory, quantifier elimination works by eliminating one variable at a time, say, the \"last\" one, and for this it's again better to work with R^(n+1) than with fintypes. (Actually row reduction of matrices is basically a special case of this, I think.)</p>",
        "id": 212226947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601824017
    },
    {
        "content": "<p>So, unless we think it makes sense to have both concepts, I think the R^n version is better.</p>",
        "id": 212227059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601824205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/partial.20derivatives/near/212207971\">said</a>:</p>\n<blockquote>\n<p>Because for <code>E × F</code> it's easier to deal with <code>sum.inl k</code> than some <code>fin</code> magic.</p>\n</blockquote>\n<p>With some version of the \"<a href=\"https://github.com/rwbarton/lean-omin/blob/master/src/o_minimal/coordinates.lean#L116\">reindexing</a>\" concept you can hide the details of exactly how the coordinates of <code>(x, y) : E × F</code> are related to those of <code>x : E</code> and <code>y : F</code>.</p>",
        "id": 212227168,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601824419
    },
    {
        "content": "<p>The main advantage of a <code>fintype</code> version would be that you can have an instance for <code>ι → R</code> itself whose coordinates are given by the identity and so, in particular, the coordinates for <code>(ι ⊕ ι') → R</code> are related to those for <code>ι → R</code> and <code>ι' → R</code> specifically by composing with <code>sum.inl</code> and <code>sum.inr</code>. In lean-omin this has never come up because we have actually never had a use for specifically <code>ι → R</code> with <code>[fintype ι]</code>. But, you could have an instance which uses <code>choice</code> to pick an ordering on <code>ι</code> and uses it to define coordinates. In that case, there would be no specific relationship between the coordinates for <code>(ι ⊕ ι') → R</code> and <code>ι → R</code> and <code>ι' → R</code>. I claim this doesn't really matter because you can describe the coordinate change as a reindexing, anyways. However, probably a sensible thing to do would be to only have a global instance when <code>ι</code> is an instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_enum\">docs#fin_enum</a> and then ensure that <code>ι ⊕ ι'</code> has a sensible <code>fin_enum</code> instance.</p>",
        "id": 212227556,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825064
    },
    {
        "content": "<p>Is <code>R^ι</code> with a <code>decidable_linear_order</code> on <code>ι</code> any worse than <code>fin n</code>?</p>",
        "id": 212227561,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601825077
    },
    {
        "content": "<p>Another consideration about the <code>fintype</code> version is that either you introduce a second universe variable, or in the <code>ι → R</code> instance you only handle <code>ι</code> in <code>Type 0</code>.</p>",
        "id": 212227586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825156
    },
    {
        "content": "<p>It is worse because <code>fin n</code> has a bunch of API that is not conveniently available on an arbitrary finite decidable linear order, as well as somewhat better definitional behavior.</p>",
        "id": 212227628,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825188
    },
    {
        "content": "<p>(Also, conceptually the point of this whole construction is to reduce some problem/construction from general fin.dim. vector spaces to specific model spaces, so why stop at <code>R^ι</code> when you could go all the way to <code>R^n</code>?)</p>",
        "id": 212227687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825287
    },
    {
        "content": "<p>Once you're working in this setting, the general objects are like <code>(V : Type*) [has_coordinates R V]</code> and the specific objects are like <code>fin n -&gt; R</code>, so there's no longer any special significance to <code>ι → R</code> with <code>[fintype ι]</code>.</p>",
        "id": 212227894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825659
    },
    {
        "content": "<p>It only comes up if you have a <code>[fintype ι]</code> that comes from outside, so to speak. And then perhaps it would be better to have <code>[fin_enum ι]</code> which is basically the non-linear analogue of this setup.</p>",
        "id": 212227914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825730
    },
    {
        "content": "<p>OK, I'll try <code>fin n</code>. Thank you for the explanation.</p>",
        "id": 212228022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601825902
    },
    {
        "content": "<p>I should probably also add that in lean-omin this reindexing stuff is only ever used to prove <code>Prop</code>s, but you would probably also want to for example say what the partial derivatives of <code>prod.fst : E \\x F -&gt; E</code> are, so that might affect the design.</p>",
        "id": 212228598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601826790
    },
    {
        "content": "<p>I'll just declare an instance on <code>E × F</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_fin_sum_equiv\">docs#equiv.sum_fin_sum_equiv</a>.</p>",
        "id": 212228754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601826984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> what is the current status of partial derivatives and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> functions? Say for instance I have a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi>E</mi><mo>×</mo><mi>F</mi><mo>→</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">F : E \\times F \\to G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>. How am I meant to express that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∂</mi><mi>F</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">∂</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">\\partial F/\\partial e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">/</span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">e</span></span></span></span> is a continuous function?</p>",
        "id": 261640749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637069756
    },
    {
        "content": "<p>And how should I prove this? Is it already somewhere?</p>",
        "id": 261640895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637069813
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∂</mi><mi>F</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">∂</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">\\partial F / \\partial e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">/</span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">e</span></span></span></span> is just the composition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">DF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> with the injection of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>×</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E \\times F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. I don't think we have a special notation for it (unless Yury has introduced something when doing the implicit function theorem, where this kind of thing is used all the time).</p>",
        "id": 261707076,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1637096934
    },
    {
        "content": "<p>I had a look in the implicit function file, having exactly this idea in mind, but I didn't see anything relevant.</p>",
        "id": 261707314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637097057
    },
    {
        "content": "<p>The continuity issue is related to the trichotomy of <code>has_fderiv</code> <code>fderiv</code> and <code>times_cont_diff</code> which complicates everything.</p>",
        "id": 261707519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637097162
    },
    {
        "content": "<p>And actually I think what I needed when I posted this message was the continuity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>↦</mo><mi mathvariant=\"normal\">∂</mi><mi>F</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">∂</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e \\mapsto \\partial F/\\partial x(e, x_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">/</span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> or something like this which makes things even more complicated in Lean (but still obvious on paper).</p>",
        "id": 261707624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637097224
    },
    {
        "content": "<p>I did not introduce any notation. Probably you need something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.compL\">docs#continuous_linear_map.compL</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.inl\">docs#continuous_linear_map.inl</a>. To make things worse, you might need to use <code>flip</code> on <code>compL</code>.</p>\n<p>Do other proof assistants have automation for things like this? How does it work?</p>",
        "id": 261861314,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637188856
    }
]