[
    {
        "content": "<p>We're trying to define a notion of an element that is solvable by radicals. We would like it to have constructors like <code>base</code>, <code>add</code>, <code>neg</code>, <code>mul</code>, <code>inv</code>, and also a constructor for taking radicals. See the code below.</p>\n<p>Is there a way to define <code>SBR</code> and <code>val</code> simultaneously, so that the <code>rad</code> constructor for <code>SBR</code> requires a proof that <code>β^n = α.val</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">abel_ruffini</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span>\n<span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span>\n<span class=\"bp\">|</span> <span class=\"n\">rad</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SBR</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">val</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α.val</span> <span class=\"bp\">+</span> <span class=\"n\">β.val</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"n\">α.val</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α.val</span> <span class=\"bp\">*</span> <span class=\"n\">β.val</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">α.val</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rad</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">good</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rad</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">α.val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SBR</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">good_SBR</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">SBR.good</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">abel_ruffini</span>\n</code></pre></div>",
        "id": 218907084,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607127171
    },
    {
        "content": "<p>This is an inductive-recursive definition, which Lean doesn't support directly, but often can be translated into something that it does--in this case the easiest way is to add the value being represented as an index of the inductive type <code>SBR</code></p>",
        "id": 218907439,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607127582
    },
    {
        "content": "<p>what do you mean \"an index of the inductive type\"?</p>",
        "id": 218907700,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607127877
    },
    {
        "content": "<p>I think this does what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">rad</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">SBR</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 218907951,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607128147
    },
    {
        "content": "<p>You can also make it not a <code>Prop</code> if you like, but it might require some more explicit universe variables</p>",
        "id": 218908136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607128325
    },
    {
        "content": "<p>the reason why I'm hesitate to go with a function E to Prop, is that I want to know what the solvable by radicals process was. In particular, I want to take an SBR element and produce a corresponding field from the SBR construction.</p>",
        "id": 218908196,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607128423
    },
    {
        "content": "<p>My impression is if SBR is a function E to Prop, then knowing SBR x doesn't let me do cases on how x arose. But I could be wrong</p>",
        "id": 218908249,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607128473
    },
    {
        "content": "<p>no, that's right</p>",
        "id": 218908253,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607128479
    },
    {
        "content": "<p>I'm not sure why Lean needs a bit more hand-holding, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">rad</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">SBR</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 218908303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607128562
    },
    {
        "content": "<p>ah, and now you can do cases?</p>",
        "id": 218908375,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607128637
    },
    {
        "content": "<p>/me note to self: SBR = solvable by radicals <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span></p>",
        "id": 218919500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607145794
    },
    {
        "content": "<p>Why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">rad</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 218919622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607146013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Inductive.20type.20of.20elements.20defined.20by.20radicals/near/218919622\">said</a>:</p>\n<blockquote>\n<p>Why not</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">rad</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SBR</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SBR</span> <span class=\"n\">α</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>because we didn't think of it?</p>",
        "id": 218919681,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607146084
    },
    {
        "content": "<p>Aah, that's a familiar experience (-;</p>",
        "id": 218919781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607146320
    }
]