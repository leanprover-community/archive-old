[
    {
        "content": "<p>Is there any natural way to write <code>noncomputable def my_def := Sup {n : ℕ | P n}</code> such that <code>my_def</code> is in ℕ ∪ {∞} (or I guess in Lean, <code>enat</code>? I couldn't find anything, apart from maybe using <code>with_top with_bot ℕ</code>, but that seems unwise. It'd be really nice for me to say that if <code>P n</code>, then <code>n ≤ my_def</code>.</p>",
        "id": 233643754,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617885013
    },
    {
        "content": "<p>Apparently <code>enat</code> is not a complete lattice (unless I'm missing an import) (or it's not true).</p>",
        "id": 233643978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617885126
    },
    {
        "content": "<p>Should <code>Sup ø</code> be zero or bot? Hmm</p>",
        "id": 233644196,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617885238
    },
    {
        "content": "<p>indeed neither <code>enat</code> nor <code>with_top ℕ</code> appear to be instances of the <code>has_Sup</code> typeclass.</p>",
        "id": 233644203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617885242
    },
    {
        "content": "<p>wait -- are you adding a bot or not?</p>",
        "id": 233644300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617885263
    },
    {
        "content": "<p>No, was just speculating as to why enat couldn't be a complete lattice</p>",
        "id": 233644321,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617885277
    },
    {
        "content": "<p>The sup of the empty set is 0 in enat -- it satisfies all the axioms.</p>",
        "id": 233644360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617885297
    },
    {
        "content": "<p>It might be a fun exercise to try and put a complete lattice structure on <code>enat</code> (once someone has independently verified that it's not there already).</p>",
        "id": 233644469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617885354
    },
    {
        "content": "<p>Alright, in that case I'll get cracking on it!</p>",
        "id": 233644595,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617885404
    },
    {
        "content": "<p>you might find that something doesn't work, and then that will be the reason it's not there :-)</p>",
        "id": 233644662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617885437
    },
    {
        "content": "<p>But order-theoretically it looks isomorphic to a closed and bounded subset of the reals so I think it should work...</p>",
        "id": 233644717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617885469
    },
    {
        "content": "<p>I guess there might also be some trick involving complete lattice structures on successor ordinals -- is that a thing?</p>",
        "id": 233644824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617885505
    },
    {
        "content": "<p>with_top \\N works for that case I think</p>",
        "id": 233645940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617886041
    },
    {
        "content": "<p><code>with_top</code> and <code>nat</code> are listed at <a href=\"https://leanprover-community.github.io/mathlib_docs/order/complete_lattice.html#has_Sup.Sup\">https://leanprover-community.github.io/mathlib_docs/order/complete_lattice.html#has_Sup.Sup</a> , at least</p>",
        "id": 233645972,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1617886058
    },
    {
        "content": "<p>You might need to import <code>order.conditionally_complete_lattice</code></p>",
        "id": 233646378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617886249
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.complete_linear_order\">docs#enat.complete_linear_order</a></p>",
        "id": 233672742,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617895092
    },
    {
        "content": "<p>If you have <code>p : nat → Prop</code>, then you can use <code>⨆ (n : nat) (hn : P n), (n : enat)</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.radius\">docs#formal_multilinear_series.radius</a> for an example with <code>nnreal</code> and <code>ennreal</code>.</p>",
        "id": 233673105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617895188
    }
]