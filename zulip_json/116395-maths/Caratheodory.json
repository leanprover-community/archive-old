[
    {
        "content": "<p>I fixed some of the easier sorrys on <code>caratheodory2</code> and enabled bigops notation.</p>",
        "id": 199798360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299379
    },
    {
        "content": "<p>Removed another one</p>",
        "id": 199802167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591301221
    },
    {
        "content": "<p><code>convex_coefficients</code> is now sorry free</p>",
        "id": 199802830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591301602
    },
    {
        "content": "<p>Excellent. <code>exists_nontrivial_relation_of_dim_lt_card</code> is now sorry free.</p>",
        "id": 199830713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591324202
    },
    {
        "content": "<p>There's one piece of maths still to do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">exists_nontrivial_relation_sum_zero_of_dim_succ_lt_card</span>\n  <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"err\">•</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"err\">∑</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- pick an element x₀ ∈ t,</span>\n  <span class=\"c1\">-- apply the previous lemma to the other xᵢ - x₀,</span>\n  <span class=\"c1\">-- to obtain a function `f`</span>\n  <span class=\"c1\">-- and then adjust f x₀ := - others.sum f</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and five easy sorries in <code>mem_convex_hull_erase</code>.</p>",
        "id": 199830752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591324238
    },
    {
        "content": "<p>five - four = one</p>",
        "id": 199851388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591348182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> are you working on this atm?</p>",
        "id": 199852091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591348618
    },
    {
        "content": "<p>I'd just paused for a bit, but yes, apparently we've been working at the same time.</p>",
        "id": 199853253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591349423
    },
    {
        "content": "<p>Only 1 sorry left! (<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>)</p>",
        "id": 199853321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591349489
    },
    {
        "content": "<p>Just merged our changes.</p>",
        "id": 199853334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591349500
    },
    {
        "content": "<p>It's surprisingly unpainful to have two people working at once</p>",
        "id": 199853347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591349510
    },
    {
        "content": "<p>Well, we weren't doing the same lemma</p>",
        "id": 199853426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591349537
    },
    {
        "content": "<p>That <em>would</em> have been painful, I guess</p>",
        "id": 199853436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591349545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> why is the final sorry true?</p>",
        "id": 199853494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591349605
    },
    {
        "content": "<p>it seems I have to do some recompiling</p>",
        "id": 199853628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591349707
    },
    {
        "content": "<p>I guess that is a downside of too-active work on a branch :-)</p>",
        "id": 199853641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591349718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Caratheodory/near/199851388\">said</a>:</p>\n<blockquote>\n<p>five - four = one</p>\n</blockquote>\n<p>have you tried <code>by norm_num</code>?</p>",
        "id": 199853953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591349916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I found my way out</p>",
        "id": 199853975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591349934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can <code>norm_num</code> already count sorrys in a file?</p>",
        "id": 199853993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591349953
    },
    {
        "content": "<p>I'm wondering if we should ship this branch to the sphere-eversion repository, postponing putting it in mathlib.</p>",
        "id": 199854088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591350014
    },
    {
        "content": "<p>no, but it can verify exactly how far from done you are :)</p>",
        "id": 199854092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591350016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> We're sorry free</p>",
        "id": 199854266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591350132
    },
    {
        "content": "<p>I want to tack on a final theorem</p>",
        "id": 199854284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591350146
    },
    {
        "content": "<p>given an explicit centre-of-mass of (d+1)-points formula</p>",
        "id": 199854301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591350160
    },
    {
        "content": "<p>Go ahead. I need to prepare an exercise sheet <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span></p>",
        "id": 199854307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591350164
    },
    {
        "content": "<p>it's essentially just unfolding a definition</p>",
        "id": 199854312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591350167
    },
    {
        "content": "<p>Why do you want postponing putting it in mathlib?</p>",
        "id": 199854448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591350256
    },
    {
        "content": "<p>There are a lot of specialized lemmas in this project, but that one goes to mathlib without any discussion.</p>",
        "id": 199854477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591350284
    },
    {
        "content": "<p>I mean we can discuss the implementation, but not the fact it belongs to mathlib.</p>",
        "id": 199854511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591350304
    },
    {
        "content": "<p>I would like to keep the number of lines in the sphere eversion project ≤ 2 as long as possible <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 199854715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591350413
    },
    {
        "content": "<p>I do want to make a PR to sphere-eversion to learn how to make something have a green background in the dependency graph. :-)</p>",
        "id": 199857314,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591352184
    },
    {
        "content": "<p>Presumably we should also make a PR to sphere-eversion to provide a link to the theorem once it is merged into mathlib.</p>",
        "id": 199857333,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591352210
    },
    {
        "content": "<p>Should we in the meantime give a link to the PR or something?</p>",
        "id": 199857341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591352223
    },
    {
        "content": "<p>If the point of the dependency graph is to track sorries, then we should color caratheodory on the dependency graph as soon as there's a PR to mathlib which has no sorries and provides the theorem.</p>",
        "id": 199921875,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591384554
    },
    {
        "content": "<p>a low-tech and probably-bad way to do this is to copy-paste the proof from the PR, and leave a note saying \"once mathlib#xxxx is merged, we can replace all of the proofs in these files with calls to the library\"</p>",
        "id": 199921972,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591384565
    },
    {
        "content": "<p>a higher-tech thing would be to have a sphere-eversion branch of mathlib, and have it accept a merge from caratheodory2 as soon as it's sorry free</p>",
        "id": 199922196,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591384696
    },
    {
        "content": "<p>then the post-game work after defeating sphere-eversion is clear : get the sphere-eversion branch merged into master. this requires getting all of the machinery that was written as mathlib PRs to get merged into master.</p>",
        "id": 199922496,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591384862
    },
    {
        "content": "<p>I suggest adding an extra color or badge to differentiate between <code>sorry-free</code> and <code>merged-into-mathlib</code>.</p>",
        "id": 199923507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591385421
    },
    {
        "content": "<p>Because both are interesting states, but there can still be a decent amount of work between <code>sorry-free</code> and <code>merge-into-mathlib</code>.</p>",
        "id": 199923555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591385460
    },
    {
        "content": "<p>oh i guess we expect <em>everything</em> to end up in mathlib, and there are parts that we're PRing to mathlib early because they live far away from differential_topology or wherever the bulk of this work is going to end up</p>",
        "id": 199923946,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591385696
    },
    {
        "content": "<p>If we want everything into mathlib then the mathlib badge is not being in the project repo</p>",
        "id": 199924165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591385818
    },
    {
        "content": "<p>But it would be nice to see this in the graph</p>",
        "id": 199924186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591385839
    },
    {
        "content": "<p>Maybe a lighter green for stuff not in mathlib then?</p>",
        "id": 199924333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591385910
    },
    {
        "content": "<p>sounds good</p>",
        "id": 199925215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591386368
    },
    {
        "content": "<p>Let me officially start to change the blueprint because it was not precise enough. This is related to <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199963846\">Scott's comment</a>. So we no longer have Carathédory's lemma, because I slightly strengthened <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:caratheodory\">the statement</a>. The good point is that the next lemma now has a <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#a0000000016\">proof blueprint</a>.</p>",
        "id": 199974767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591449712
    },
    {
        "content": "<p>I'd like to also write a proof blueprint for Carathéodory, but I fear it wouldn't match the almost proof that is currently PRed, so I'll let other people do that.</p>",
        "id": 199974829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591449808
    },
    {
        "content": "<p>Should we have stacks-style tags for statements in the blue print?</p>",
        "id": 200004064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591498162
    },
    {
        "content": "<p>(i.e. names that don't change when theorem numbering changes?</p>",
        "id": 200004067,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591498177
    },
    {
        "content": "<p>It might be helpful when development is happening directly in mathlib or elsewhere on a \"blueprinted\" goal, to be able to give stable references back to the motivating points of a blueprint.</p>",
        "id": 200004109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591498210
    },
    {
        "content": "<p>Do you mean LaTeX-style labels?</p>",
        "id": 200005816,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591501675
    },
    {
        "content": "<p>Can't we use implicit function theorem to get <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:smooth_convex_hull\">Lemma 1.6</a> for free?</p>",
        "id": 200006416,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591502799
    },
    {
        "content": "<p>No, we still need the derivative of <code>center_mass</code> w.r.t. the weights.</p>",
        "id": 200006693,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591503438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>. Yes. More specifically, the suggestion was the the LaTeX style labels are just opaque alphanumeric identifiers, but with the implicit promise that they will never change. (If the theorem statement itself needs to change significantly, it should be given a new label.)</p>",
        "id": 200006794,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591503574
    },
    {
        "content": "<p>But the link <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:smooth_convex_hull\">https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:smooth_convex_hull</a> contains the LaTeX label. What else do you want?</p>",
        "id": 200006851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591503662
    },
    {
        "content": "<ol>\n<li>To know how to name the corresponding Lean file for that lemma.</li>\n<li>To know how to refer to that lemma from a PR to mathlib</li>\n<li>To know what string to search for to find existing work on this lemma in the sphere-eversion repository.</li>\n</ol>\n<p><code>lem:smooth_convex_hull</code> doesn't quite answer all of these questions, because it's not a valid file name. But I agree it's close.<br>\nIncluding <code>chap-loops.html</code> in the unique identifier seems dangerous, because then it Patrick ever wants to move files around links break.</p>",
        "id": 200007134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591504129
    },
    {
        "content": "<p>The Stacks Project solution is described at <a href=\"https://stacks.math.columbia.edu/tags\">https://stacks.math.columbia.edu/tags</a></p>",
        "id": 200007139,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591504145
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200007320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591504465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, I think I disagree with your decision to strengthen the statement of Caratheodory's convexity itself in your blueprint.</p>\n<ol>\n<li>It makes it different from the statements I can find in the literature (which don't bother saying the coefficients are nonzero), and indeed more complicated.</li>\n<li>It's very easy to prove from the usual statement: \"Finally discard any of the points with coefficient zero.\"</li>\n<li>It just seems more natural to postpone talking about positive coefficients at all until we're in a context where it matters: we add the assumption the original set is open.</li>\n</ol>",
        "id": 200007572,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591504986
    },
    {
        "content": "<p>In any case, I pushed to <code>caratheodory2</code> an incomplete proof of the statement including positivity.</p>",
        "id": 200008104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591506081
    },
    {
        "content": "<p>Still a little big_operator munging to do; two sorries remain.</p>",
        "id": 200008107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591506102
    },
    {
        "content": "<p>Sorry I'm late to this discussion, I've been on family duty all day. I just started my computer 10 minutes ago.</p>",
        "id": 200033571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591550726
    },
    {
        "content": "<p>About the TeX label vs identifier discussion, I don't think we need to go down the stacks tag road. The Stacks project is about 6000 pages of mathematics which evolved a lot, and is cited in a <em>lot</em> of papers. Here we are discussing formalizing 20 pages of mathematics, even if I suspect it will be at least 30 pages at the end of the project. TeX labels are unique within a TeX document, and they can carry information. Certainly my choice of labels could be improved, but they are meant to help reading the dependency graph.</p>",
        "id": 200033732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591550933
    },
    {
        "content": "<p>Of course I want to automatically generate links to the source code from the website, instead of hardcoding them in the TeX source as is currently done. I'll work on that really soon. I didn't think about it but we could also have special comments in the Lean source referring to tex labels, and CI could check that those labels exist in the TeX source. This is all easy to do, it only takes time.</p>",
        "id": 200033841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591551089
    },
    {
        "content": "<p>About Carathéodory, I hesitated and went for the lazy solution, but I agree that we should stick to the usual statement for the lemma that is called Carathéodory in the TeX and Lean, and state the slightly more precise corollary as another lemma.</p>",
        "id": 200033923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591551182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Caratheodory/near/200006416\">said</a>:</p>\n<blockquote>\n<p>Can't we use implicit function theorem to get <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:smooth_convex_hull\">Lemma 1.6</a> for free?</p>\n</blockquote>\n<p>If you look at the git history, you'll see this was the original plan. But somehow I had remorse yesterday because this implicit function is totally explicit. Actually the current version of the proof is not totally explicit because I needed to go to bed, but I'll finish expliciting it tonight. I'm not too happy about how long it turned out to be in TeX, so I wouldn't mind going back to the implicit function plan. In terms of library development I think both roads are interesting. Making sure the implicit function theorem is nice to use is important, and developing linear algebra is important. For instance the elementary road I have in mind would use the determinant of a family of vectors with respect to a basis, and I think we don't have that yet.</p>",
        "id": 200034169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591551526
    },
    {
        "content": "<p>I pushed details about smoothness of the explicit function in <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/e64b710025e18c7432b86775d714ef8b96f21aa5\">https://github.com/leanprover-community/sphere-eversion/commit/e64b710025e18c7432b86775d714ef8b96f21aa5</a></p>",
        "id": 200044104,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591566378
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib/issues/3030\">#3030</a> (<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>) that splits of all the smaller changes (10 files, ~138 lines).<br>\nWhat remains is 2 larger diffs.</p>",
        "id": 200547514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591883918
    },
    {
        "content": "<p>I lost track of the plan here. Are we still waiting for some affine geometry stuff? Or are you trying to get the linear space version merged?</p>",
        "id": 200601731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591907382
    },
    {
        "content": "<p>I think it makes sense to merge the vector space version, and to plan to upgrade it to affine spaces later, when the requirements are in place, and someone has the energy/need.</p>\n<p>\"Perfect is the enemy of good.\"</p>",
        "id": 200620572,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591918805
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200633434,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591935171
    },
    {
        "content": "<p>We now have a version of Carathéodory in mathlib ( <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>) but I think this was no longer exactly the statement that was needed for Sphere Eversion, right?</p>",
        "id": 200916374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592240148
    },
    {
        "content": "<p>I'll switch back to this statement in the sphere eversion project, and add the more precise statement as another lemma.</p>",
        "id": 200923434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592243555
    },
    {
        "content": "<p>Does that mean we get some green in the graph? <span aria-label=\"green heart\" class=\"emoji emoji-1f49a\" role=\"img\" title=\"green heart\">:green_heart:</span></p>",
        "id": 200923518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592243611
    },
    {
        "content": "<p>Yes, I'll try to do that tonight</p>",
        "id": 200923557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592243640
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 200923608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592243648
    },
    {
        "content": "<p>I'm confused now. I wanted to update the sphere eversion but <a href=\"https://github.com/leanprover-community/mathlib/issues/2960\">#2960</a> actually isn't merged, right?</p>",
        "id": 200947266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592255961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Do you mind giving your approval to bors if you're happy with it?</p>",
        "id": 200969273,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592277581
    },
    {
        "content": "<p>Huh... I don't know why I thought so.... but I was convinced it was merged.</p>",
        "id": 200973481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592283493
    },
    {
        "content": "<p>Carathéodory now appears in green at <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html</a>. But the proof probably needs refactoring in order to prove the refined statement. Note that <a href=\"https://github.com/leanprover-community/mathlib/blob/a432a3a193aac390d347835881f48a5e5bac6ed9/src/analysis/convex/caratheodory.lean#L213\">https://github.com/leanprover-community/mathlib/blob/a432a3a193aac390d347835881f48a5e5bac6ed9/src/analysis/convex/caratheodory.lean#L213</a> is only half of the refinement (dropping the points having vanishing weights, but without ensuring the remaining points are affinely independent).</p>",
        "id": 201066387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592337602
    },
    {
        "content": "<p>Also, that lemma didn't have a proof in the blueprint, so <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#a0000000016\">I added one</a> following the Lean code. It's hard to believe that the Lean proof wouldn't be simpler by using a map from <code>fin n</code> to <code>E</code> instead of a <code>finset E</code>. I couldn't bring myself to use weights indexed by points of <code>E</code> in the blueprint.</p>",
        "id": 201066804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592337771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, what do you think are the correct assumptions on the base monoid in Carathéodory? It's currently <code>ℝ</code> because convexity is only defined in real vector spaces, but I'm changing that.</p>",
        "id": 252260182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630998039
    },
    {
        "content": "<p>Good question; maybe <code>linear_ordered_field</code>?</p>",
        "id": 252260337,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630998127
    },
    {
        "content": "<p>Yeah, you seem to use division. I was wondering this could be relaxed to <code>ordered_comm_ring</code></p>",
        "id": 252261095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630998664
    },
    {
        "content": "<p>I think that as stated, division is necessary. Say the coefficients are <code>k</code>, we have a set <code>t</code> of <code>n</code> points whose convex hull contains the input point <code>x</code>, and which we want to prove are affine independent. The proof works in <code>k^n</code> by starting with a point in the simplex of coefficients whose affine span against <code>t</code> gives <code>x</code>. The argument is then that if <code>t</code> is not affinely indepdendent, there is a line in this simplex giving a full line of coefficients whose affine span against <code>t</code> gives <code>x</code>. But this line must intersect a side (in fact two sides I guess) of the simplex so we can reduce the cardinality (which is a contradiction if <code>n</code> was chosen to be minimal).</p>",
        "id": 252262132,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630999356
    },
    {
        "content": "<p>To do that intersection, I think you'll need division.</p>",
        "id": 252262158,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630999372
    },
    {
        "content": "<p>And do we have any weaker division ordered typeclass?</p>",
        "id": 252263008,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630999928
    },
    {
        "content": "<p>I don't think so but I'd be happy to be proved wrong. In my head the only semiring that is simultaneously ordered, commutative, has negatives, has division is <code>linear_ordered_field</code>.</p>",
        "id": 252263529,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1631000251
    },
    {
        "content": "<p>You don't want to do non-commutative convex spaces? :-)</p>",
        "id": 252273523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631005706
    },
    {
        "content": "<p>Eheh, that will be the new generality for most stuff in <code>analysis.convex.basic</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 252281130,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631009714
    },
    {
        "content": "<p>Come to think of it, I don't know any examples of non-commutative linearly-ordered rings.  Do they exist?</p>",
        "id": 252281166,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1631009741
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/questions/621111/existence-of-non-commutative-ordered-ring\">https://math.stackexchange.com/questions/621111/existence-of-non-commutative-ordered-ring</a></p>",
        "id": 252281296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631009800
    },
    {
        "content": "<p>Yeah of course.</p>",
        "id": 252281302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631009804
    },
    {
        "content": "<p>I'm not sure this construction is so obvious!</p>",
        "id": 252281378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631009858
    },
    {
        "content": "<p>No, the construction is absolutely non-obvious! But there's not strong incentive for linearity to imply commutativity.</p>",
        "id": 252281532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631009919
    },
    {
        "content": "<p>Sometimes weird things are true though. Eg., Wedderburn's little theorem</p>",
        "id": 252281589,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1631009951
    },
    {
        "content": "<p>Yeah, I guess!</p>",
        "id": 252281663,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631010002
    },
    {
        "content": "<p>Lam's books are a great source for examples.</p>",
        "id": 252357771,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1631042234
    },
    {
        "content": "<p>To continue the discussion, do nonlinear ordered fields exist?</p>",
        "id": 252897464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631353589
    },
    {
        "content": "<p>You mean a partially ordered field? What are the axioms? How about any field with a&lt;=b iff a=b?</p>",
        "id": 252898658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631354968
    },
    {
        "content": "<p>Take <code>ordered_comm_ring</code> and add division with hypothesis that it is <code>monotone</code>/<code>strict_mono</code> for positive elements.</p>",
        "id": 252898866,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631355177
    },
    {
        "content": "<p>I was going to give a less trivial example like: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> has two orders; so if we take their intersection then we get a new partial order</p>",
        "id": 252898869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631355178
    },
    {
        "content": "<p>That's a partially ordered ring (<code>ordered_comm_ring</code>) which is also a field, if I'm not mistaken.</p>",
        "id": 252898957,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631355267
    },
    {
        "content": "<p>AFAIK, the phrase \"ordered field\" always means linearly ordered.</p>",
        "id": 252898966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631355279
    },
    {
        "content": "<p>Yeah, I ask because we go straigh from <code>ordered_comm_ring</code> to <code>linear_ordered_field</code>.</p>",
        "id": 252898993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631355324
    },
    {
        "content": "<p>It seems to me there is <code>linear_ordered_comm_ring</code> in between.</p>",
        "id": 252899102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631355452
    },
    {
        "content": "<p>(btw, these names ought to be <code>linearly_ordered_*</code>)</p>",
        "id": 252899111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631355468
    },
    {
        "content": "<p>I meant on the nonlinear part. I was expecting <code>ordered_field</code> to exist.</p>",
        "id": 252899162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631355502
    },
    {
        "content": "<p>I think it's not really an important notion. The example of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> with the weird partial order is a partially ordered ring, but in that context it doesn't deserve to be called a \"field\" because it has two incompatible maps to ordered fields (in one of them <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mn>2</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.13278em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span></span></span></span> goes to something positive, in the other one something negative).</p>",
        "id": 252900325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631356760
    },
    {
        "content": "<p>I would say having <code>ordered_field</code> with the definition \"partially ordered ring that's a field\" would be confusing.</p>",
        "id": 252900393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631356808
    },
    {
        "content": "<p>e.g. the <a href=\"https://ncatlab.org/nlab/show/ordered+field\">nLab</a> says \"Note that while the adjective ‘ordered’ usually refers to a partial order, it is traditionally used more strictly when placed before ‘field’.\"</p>",
        "id": 252900615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631357087
    },
    {
        "content": "<p>Reid's example is better than mine because I think 0&lt;1 is a nice property</p>",
        "id": 252900834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631357393
    },
    {
        "content": "<p>I think this tells more about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q(\\sqrt 2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\">2</span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> than about the concept of ordered field.</p>",
        "id": 252901216,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631357804
    },
    {
        "content": "<p>Right, in a sense it's the same thing that happened already for rings. A partially ordered ring isn't a partially ordered set that's also a ring. There is some compatibility. For a field, the right compatibility is apparently that the partial order is actually a total order.<br>\nI reailze now you mentioned division--division is sort of a funny thing, but I think any reasonable axiom about division preserving order will be satisfied by the funny <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> because it is satisfied in both of the total orders.</p>",
        "id": 252901223,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631357819
    },
    {
        "content": "<p>Hmm... I am still not convinced <code>ordered_field</code> isn't something we should have.</p>",
        "id": 252901304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631357917
    },
    {
        "content": "<p>The bigger picture is that in algebraic geometry a field looks like a point, while in real algebraic geometry (which is actually about ordered rings and has little to do with the real numbers specifically) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> looks like two points.</p>",
        "id": 252901398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631358009
    },
    {
        "content": "<p>And would that be true of any reasonable nonlinear ordered field we come up with?</p>",
        "id": 252901534,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631358130
    },
    {
        "content": "<p>Well mathlib has a lot of type classes already that don't have any particular use in math (<code>distrib</code>?). But if we do have such a class it shouldn't be called <code>ordered_field</code> even if that's consistent with the other names, because that's not what \"ordered field\" means.</p>",
        "id": 252901541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631358142
    },
    {
        "content": "<p>Uh? I don't get your point here.</p>",
        "id": 252901589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631358227
    },
    {
        "content": "<p>I mean we should definitely not have <code>class ordered_field</code> whose definition is just the combination of <code>ordered_comm_ring</code> and <code>field</code></p>",
        "id": 252901667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631358299
    },
    {
        "content": "<p>but it could be called <code>partially_ordered_field</code> or something like that</p>",
        "id": 252901685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631358318
    },
    {
        "content": "<p>Yes of course. I mean to assume monotonicity of division in the same way <code>linear_ordered_field</code> does.</p>",
        "id": 252901712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631358355
    },
    {
        "content": "<p>Sorry, I should have said that <strong>if</strong> there is a class <code>ordered_field</code>, <strong>then</strong> it must have the usual mathematical meaning (linearly ordered field).</p>",
        "id": 252901767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631358394
    },
    {
        "content": "<p>I'm coming to that from \"I don't actually use linearity of my field very often. Why is it even in the typeclass?\"</p>",
        "id": 252901772,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631358405
    },
    {
        "content": "<p>In the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q(\\sqrt 2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\">2</span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> example, the elements that are positive in both orders are called \"totally positive elements\". These things show up in CM theory of abelian varieties. Where \"totally real number fields\" play a role: they are the finite extensions of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> for which every embedding in $$\\mathbb C$ lands in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 252901784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631358425
    },
    {
        "content": "<p>Interesting, interesting. And those are ordered field which in general aren't ordered, right?</p>",
        "id": 252901911,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631358577
    },
    {
        "content": "<p>There is also the example of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> with the partial order \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\le b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">b - a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is real and nonnegative\" which has been discussed here before</p>",
        "id": 252902012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631358691
    },
    {
        "content": "<p>Does that make it into an ordered anything?</p>",
        "id": 252902071,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631358734
    },
    {
        "content": "<p><code>ordered_add_comm_monoid</code>, surely, but what happens with multiplication?</p>",
        "id": 252902085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631358762
    },
    {
        "content": "<p>It's a partially ordered ring with monotone division, because the only \"positive\" elements are the positive reals</p>",
        "id": 252902103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631358786
    },
    {
        "content": "<p>Oooh, yes I see</p>",
        "id": 252902118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631358821
    },
    {
        "content": "<p>this example is a bit different because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> doesn't have any linear orders (because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> is a square)</p>",
        "id": 252902297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631359048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Caratheodory/near/252901911\">said</a>:</p>\n<blockquote>\n<p>Interesting, interesting. And those are ordered field which in general aren't ordered, right?</p>\n</blockquote>\n<p>When dealing with totally positive elements of a number field one does not talk about the partial ordering (which as far as I know is not at all useful). One reason totally positive elements are useful is that there's a concept of a CM field, which is a totally imaginary extension of a totally real field, and which is obtained by adjoining a square root of a totally positive element. However I would envisage, when we get this far, just having a predicate <code>is_totally_positive</code> on elements of a number field, as opposed to using the partial order and then continually referring to the elements which are &gt; 0 for this order: the point is that you don't ever talk about a &lt; b in general, it's just this specific predicate which turns out to be useful.</p>",
        "id": 252916990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631374536
    },
    {
        "content": "<p>And what does CM stand for?</p>",
        "id": 252924004,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631381737
    },
    {
        "content": "<p>Complex Multiplication, it's some technical term coming from the theory of abelian varieties</p>",
        "id": 252924016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631381758
    },
    {
        "content": "<p>Given a general lattice L (discrete subgroup isomorphic to Z^2) in the complex numbers, like <code>\\Z+\\Z*tau</code> for some random complex non-real number tau, the set of complex numbers z such that z*L is a subset of L is usually just the integers, but for some special lattices you can get non-integer values of z which work -- for example if L=Z[i] then any z in Z[i] works. We say the associated elliptic curve C/L has complex multiplication. For higher dimensional complex tori more general CM fields come into play. The basic theory is surprisingly delicate but has been well-understood since the 1940s or so.</p>",
        "id": 252924191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631381923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Caratheodory/near/252916990\">said</a>:</p>\n<blockquote>\n<p>there's a concept of a CM field, which is a totally imaginary extension of a totally real field, and which is obtained by adjoining a square root of a totally positive element.</p>\n</blockquote>\n<p>I think you adjoin a square root of a totally <em>negative</em> element. But that's not too relevant for this discussion.</p>",
        "id": 252925490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631383329
    },
    {
        "content": "<p>Thanks -- fixed</p>",
        "id": 252925510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631383366
    }
]