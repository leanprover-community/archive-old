[
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/pull/10287\">this PR</a> I added the following function in <code>setoid/partition.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a function `f`, builds a function that consumes a `y` and returns the set of every `x`</span>\n<span class=\"sd\">    whose image is `y`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">class_fn</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The thing is... my intuition says that this is something that has a proper name and a proper place in mathematics. Do we already have this function defined somewhere else in <code>mathlib</code>?</p>\n<p>And if not, how would you call it? And where would you place it? This function is used to prove two different results in the same file.</p>",
        "id": 262352547,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637602820
    },
    {
        "content": "<p>Is this just the preimage of a singleton, aka a fibre? E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">class_fn</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 262353300,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637603195
    },
    {
        "content": "<p>Indeed. Is there something equivalent to <code>class_fn f</code> (not <code>class_fn f _</code> as in your example)?</p>",
        "id": 262354052,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637603537
    },
    {
        "content": "<p>Not sure it deserves a name.</p>",
        "id": 262354268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637603612
    },
    {
        "content": "<p>How to proceed in this situation? This function was being defined inside two different proofs. How to avoid code duplication in this case?</p>",
        "id": 262354666,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637603733
    },
    {
        "content": "<p>Just use <code>{b}.preimage f</code></p>",
        "id": 262355766,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637604147
    },
    {
        "content": "<p>There's a certain philosophy that for small functions, the code itself is its name.</p>\n<p>In this case, it's always being used as <code>set.range (λ y, {x | f x = y})</code>, which isn't so big of a name.</p>",
        "id": 262356207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637604378
    },
    {
        "content": "<p>Theoretically speaking, <code>class_fn</code> is giving an extension of the canonical <code>image -&gt; cokernel</code> function to <code>codomain -&gt; option cokernel</code>, where none is being encoded using the empty set. This is a bit of an odd function to have theory about, so maybe it's best not to give it a name for now.</p>",
        "id": 262356605,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637604588
    }
]