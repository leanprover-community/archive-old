[
    {
        "content": "<p>I know polynomials were changed to use classical logic, and that's fine, but it occurred to me that there is a constructively correct notion of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>, and it isn't the one we were using (unless <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> has decidable equality).</p>",
        "id": 177999667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570903182
    },
    {
        "content": "<p>Which is...</p>",
        "id": 177999961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570903582
    },
    {
        "content": "<p>Namely, you can either take some free construction, or you can work with <code>list R</code> modulo the relation of adding 0s to the end of the list, and I think these are constructively equivalent. Moreover, all the polynomial operations can be implemented without using equality on <code>R</code> aside from decidable equality of polynomials (obviously) and degree (slightly less obviously, but also clearly correctly, since <code>deg (1 + (a - b) * X)</code> is 0 iff <code>a = b</code>).</p>",
        "id": 177999994,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570903638
    },
    {
        "content": "<p>The second one is also a lot more reasonable for computation than the current representation, since addition is linear and not quadratic for example</p>",
        "id": 178000072,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570903746
    },
    {
        "content": "<p>I'm not sure whether there is a compelling reason to switch at this point though</p>",
        "id": 178000075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570903755
    },
    {
        "content": "<p>This doesn't easily generalize to <code>mv_poly</code> right?</p>",
        "id": 178000214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570903950
    },
    {
        "content": "<p>If anything, I would like to redefine <code>polynomial R</code> as <code>mv_polynomial unit R</code>, and make the two API play more in sync. There is lots of stuff that has to be done twice, and isn't done in exactly the same way, etc...</p>",
        "id": 178000240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570904025
    },
    {
        "content": "<p>The big free construction still works for <code>mv_polynomial</code>, and I think you can also do something more similar to the current implementation but constructively correct, but it won't be as nice as lists</p>",
        "id": 178000309,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570904094
    },
    {
        "content": "<p><code>free_comm_ring</code> is almost the \"big free construction\", except it needs to be <code>free_algebra</code>, and also use <code>free_comm_monoid</code> in place of <code>multiset</code></p>",
        "id": 178000476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570904342
    },
    {
        "content": "<p>Or you can build it directly from the syntax of algebras</p>",
        "id": 178000493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570904397
    },
    {
        "content": "<p>Reid, are you still checking your topology PR? It doesn't sound like it...</p>",
        "id": 178000687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570904680
    },
    {
        "content": "<p>I discovered that there were a sizable number of irrelevant universe parameter order changes, so I \"fixed\" them and rebuilt</p>",
        "id": 178000841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570904972
    },
    {
        "content": "<p>Oh sorry, I misremembered how <code>multiset</code> is implemented. It is actually the correct thing already.</p>",
        "id": 178000970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570905161
    },
    {
        "content": "<p>So, do you think we can merge?</p>",
        "id": 178000976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570905179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> the constructive polynomials on R is R (x)_Z Z[x]</p>",
        "id": 178013644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1570927499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> One-variable polynomials can be evaluated on non-commutative rings (e.g., matrices or bounded linear operators; not sure if this is implemented in mathlib), and it can't work with <code>mv_polynomial</code>.</p>",
        "id": 178435943,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1571361727
    },
    {
        "content": "<p>Hmm, fair enough</p>",
        "id": 178444094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571375442
    },
    {
        "content": "<p>So you are saying that <code>polynomial</code> should be defined as <code>mv_noncomm_polynomial unit</code>?</p>",
        "id": 178444111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571375476
    },
    {
        "content": "<p>AFAIK, we don't have <code>mv_noncomm_polynomial</code> (yet).</p>",
        "id": 178548512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1571495078
    },
    {
        "content": "<p>Probably I'd prefer to have a few monoids of monomials, and let <code>*_polynomial</code> be <code>monoid_algebra monomials_type</code>.</p>",
        "id": 178548677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1571495287
    },
    {
        "content": "<p>Where <code>monoid_algebra</code> is <a href=\"https://en.wikipedia.org/wiki/Group_ring\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Group_ring\">https://en.wikipedia.org/wiki/Group_ring</a> for monoids instead of groups (I'm not sure what is the right word for this).</p>",
        "id": 178548690,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1571495339
    },
    {
        "content": "<p>I've heard it being called \"monoid ring\" before</p>",
        "id": 178551266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571499686
    },
    {
        "content": "<p>I recall Kenny having a formalization of polynomials using quotients of ring expressions that is pretty constructive</p>",
        "id": 178552893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571502150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I think <code>finsupp</code> already allows you to do monoid rings</p>",
        "id": 178553522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571503192
    },
    {
        "content": "<p>It's been a while that I read that part of the source though</p>",
        "id": 178553567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571503205
    }
]