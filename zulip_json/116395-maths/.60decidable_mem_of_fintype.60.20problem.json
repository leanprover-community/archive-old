[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"c1\">-- for classical.decidable_linear_order</span>\n\n<span class=\"c1\">-- the below import triggers a max class instance error below</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"c1\">-- This is because of line 78 of data.set.finite:</span>\n\n<span class=\"c1\">-- instance decidable_mem_of_fintype [decidable_eq α] (s : set α) [fintype s] (a) : decidable (a ∈ s) :=</span>\n<span class=\"c1\">-- decidable_of_iff _ mem_to_finset</span>\n\n<span class=\"c1\">-- #print set.decidable_mem_of_fintype</span>\n\n<span class=\"c1\">-- here is an attribute I want in my actual file</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"c1\">-- and here is another one;</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_order</span>\n<span class=\"c1\">-- commenting it out fixes the error, but I</span>\n<span class=\"c1\">-- would like the instance in my actual file</span>\n<span class=\"c1\">-- (I&#39;m not fussed about what priority it has though)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">maximum class-instance resolution depth has been reached</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">⊢ decidable (x ∈ T)</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>I am refactoring the perfectoid project and ran into this issue. Is there a way we can change the definition of <code>decidable_mem_of_fintype</code> or other priorities to fix this? I don't quite understand what is going on here but I'm sure there are people here who will.</p>",
        "id": 171067299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563361142
    },
    {
        "content": "<p><code>#print set.decidable_mem_of_fintype</code> gives</p>\n<div class=\"codehilite\"><pre><span></span>@[instance]\nprotected def set.decidable_mem_of_fintype : Π {α : Type u} [_inst_1 : decidable_eq α] (s : set α) [_inst_2 : fintype ↥s] (a : α), decidable (a ∈ s) :=\n</pre></div>",
        "id": 171067970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563361798
    },
    {
        "content": "<p>(so default priority)</p>",
        "id": 171068025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563361831
    },
    {
        "content": "<p>Is there a cycle,? it searches for a<code> fintype</code> instance on <code>T</code>, which if it uses <code>subtype.fintype</code>, means it needs a <code>decidable_pred</code> instance on <code>T</code>, which means it looks for a <code>fintype</code> instance and so on.</p>",
        "id": 171068160,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563362023
    },
    {
        "content": "<p><code>classical.decidable_linear_order</code> is causing a loop</p>",
        "id": 171068357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563362203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> there's a reason why <code>classical.decidable_linear_order</code> isn't an instance, I guess</p>",
        "id": 171068465,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563362302
    },
    {
        "content": "<p>I don't see why you would need it to be an instance</p>",
        "id": 171068473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563362312
    },
    {
        "content": "<p>I'll try removing it. Thanks.</p>",
        "id": 171068508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563362365
    },
    {
        "content": "<p>Now I have a gazillion errors of the form</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nM : Type u,\n_inst_1 : linear_ordered_cancel_comm_monoid_with_zero M,\nR : Type u₀,\n_inst_5 : ring R,\nv : valuation R M,\nx y : R\n⊢ decidable_linear_order M\n</pre></div>",
        "id": 171068718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563362616
    },
    {
        "content": "<p>hmm, this is not good</p>",
        "id": 171068842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563362709
    },
    {
        "content": "<p>I would like to solve them by saying \"stop hassling me about decidability please Lean\". I have M, M1, M2, M3 and others as variables, plus plenty of theorems that explicitly mention <code>linear_ordered_cancel_comm_monoid_with_zero</code> stuff as inputs</p>",
        "id": 171068947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563362800
    },
    {
        "content": "<p>Is this like <code>discrete_field</code> ? Do you think I should put decidability as a structure field for <code>linear_ordered_cancel_comm_monoid_with_zero</code>? Maybe I should make an extension class <code>decidable_linear_ordered_cancel_comm_monoid_with_zero</code></p>",
        "id": 171069087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563362921
    },
    {
        "content": "<p>What will happen when my class name gets to over 100 characters?</p>",
        "id": 171069097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563362936
    },
    {
        "content": "<p>what if you had an instance that makes <code>decidable_linear_order</code> from <code>linear_ordered_cancel_comm_monoid_with_zero</code>?</p>",
        "id": 171069102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563362942
    },
    {
        "content": "<p>That's an interesting idea!</p>",
        "id": 171069115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563362958
    },
    {
        "content": "<blockquote>\n<p>What will happen when my class name gets to over 100 characters?</p>\n</blockquote>\n<p>a black hole will come and consume the universe</p>",
        "id": 171069118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563362961
    },
    {
        "content": "<p>I want to called them Massot monoids</p>",
        "id": 171069128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563362979
    },
    {
        "content": "<p>Patrick didn't have much to do with them, but it just sounds good</p>",
        "id": 171069145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563362998
    },
    {
        "content": "<p>Hey, I was already talking of defining these monoids months before you started to think about this (but I still don't want to call them Massot monoids).</p>",
        "id": 171069382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563363226
    },
    {
        "content": "<p>aah but now we have all the evidence we need to call them Massot monoids!</p>",
        "id": 171069442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563363263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> there is some moral here. You wrote that initial <code>valuation</code> code and your valuations took values in {0} union Gamma with Gamma a totally ordered group. In retrospect this design decision created issues further down the line, because the non-negative reals in Lean are not literally of this form.</p>",
        "id": 171069502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563363347
    },
    {
        "content": "<p>so we should stricklandize instead?</p>",
        "id": 171069557,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563363382
    },
    {
        "content": "<p>at this rate lean will soon need its own vocabulary.md</p>",
        "id": 171069597,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1563363441
    },
    {
        "content": "<p>I guess that's what I'm doing. It's a major refactoring project. We want valuations taking values in what could mathematically be described as an arbitrary submonoid of {0} union Gamma which contains 0. A monoid embeds in a group iff it's cancellative (I hope) so really we want {0} union (cancellative monoid), however making such a structure using <code>with_zero</code> instantly means that we cannot plug in stuff like the non-negative reals without doing a lot of internal plumbing. So I have axiomatised what we need, so yes, this seems to be another example of a universal object, although the 0 and 1 and &lt; and * mean that it's not a predicate.</p>",
        "id": 171070034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563363787
    },
    {
        "content": "<p>A great way of summarising the predicament I find myself in is this: <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> defined the p-adic norm on the p-adic numbers, and us perfectoid people scoffed at his puny norm and formalised Bourbaki's mega-general notion of a norm taking values in some hugely general thing, and then we went to show Rob how our work generalised his but then we realised that his norm was taking values in the non-negative reals, whereas ours necessarily took values in <code>with_zero &lt;something&gt;</code> so we couldn't drop his in.</p>",
        "id": 171071302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563364917
    },
    {
        "content": "<p>However, by this point I had realised that what we really need is (like polynomial v mv_polynomial) some theory of valuations on fields, taking values in the non-negative reals, because under these extra assumptions one can go much much further.</p>",
        "id": 171071389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563364973
    },
    {
        "content": "<p>i.e. we need Rob's kind of norms, but on things like finite or algebraic extensions of the p-adics. I envisaged this nightmare scenario where we then had two definitions of norm kicking around, and decided that even though it would be a royal pain, it was in everyone's best interests to stop this happening.</p>",
        "id": 171071427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563365031
    },
    {
        "content": "<p>I wonder how many more times in my Lean life I will define and then use an object which is \"too specialised\", and only realise later on that my initial definition was what is causing the problems further down the line.</p>",
        "id": 171071548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563365148
    },
    {
        "content": "<p>So far it's happening once per major project.</p>",
        "id": 171071637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563365174
    },
    {
        "content": "<p>Only once?</p>",
        "id": 171081254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563372361
    },
    {
        "content": "<p>I guess I was referring to localisations in the schemes project and 0 union Gamma for this one. Maybe there are other times too :-)</p>",
        "id": 171087912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563376781
    }
]