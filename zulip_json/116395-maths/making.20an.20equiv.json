[
    {
        "content": "<p>I have <code>f : α → α → α → α → α → α → Prop</code> that says <code>a ≠ b ∧ c ≠ b ∧ d ≠ e ∧ f ≠ e ∧ blah</code>. I have shown <code>f</code>is reflexive, symmetric and transitive (i.e. an equiv on α × α × α), but only when <code>a ≠ b ∧ c ≠ b</code>. Now I want to make the equiv classes, I'm having trouble with deciding what to do.<br>\n If I set <code>f</code> to take a random value for <code>a = b</code>, then working with <code>f</code>is going to be annoying. If I make the equiv on <code>α × α × α</code> such that <code>a ≠ b ∧ c ≠ b</code>, then any time I talk about the class <code>a b c</code> I have to give proofs of <code>a ≠ b</code>and <code>c ≠ b</code>. Is there different method? </p>\n<p>In GeoCoq they cheat, instead of making an equiv, they make a new function (which is what the book does too),</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Definition</span> <span class=\"n\">Q_CongA</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"err\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"n\">A</span> <span class=\"err\">≠</span> <span class=\"n\">B</span> <span class=\"err\">∧</span> <span class=\"n\">C</span> <span class=\"err\">≠</span> <span class=\"n\">B</span> <span class=\"err\">∧</span> <span class=\"err\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">CongA</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"err\">↔</span> <span class=\"n\">a</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 133531588,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536348098
    },
    {
        "content": "<p>You could define the equivalence relation on the subtype. It sounds like you just have to give proofs that <code>a \\ne b</code> and stuff. Lean is all about edge cases. Why do you consider the GeoCoq solution cheating? You can define quotients on non-equivalence relations in lean, but it's not recommended.</p>",
        "id": 133532250,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536348829
    },
    {
        "content": "<p>I want to define a function from an equivalence class, but to give the value I first need an element from the class (but every element gives the same result), how would I do this? i.e. I want to make a function which I know is well-defined</p>",
        "id": 133559910,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536394864
    },
    {
        "content": "<p>Assuming you're using <code>quot</code>/<code>quotient</code>, then <code>quot.lift</code>/<code>quotient.lift</code></p>",
        "id": 133560004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536395070
    },
    {
        "content": "<p>Ali I don't know if this helps, but when Luca was learning about equivalence classes (because he wanted to define a group structure on pi_1(X,x), which is a quotient) I wrote <a href=\"https://github.com/kbuzzard/xena/blob/master/xenalib/m1f/zmod37.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/xenalib/m1f/zmod37.lean\">https://github.com/kbuzzard/xena/blob/master/xenalib/m1f/zmod37.lean</a> to show him some basic tricks. For basic questions like how to define a function on a set of equivalence classes I could recommend the relevant docs <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients</a> from TPIL, however mathlib adds extra functions which one can use with quotients, and these are not documented here. The mathlib file is here <a href=\"https://github.com/leanprover/mathlib/blob/master/data/quot.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/quot.lean\">https://github.com/leanprover/mathlib/blob/master/data/quot.lean</a> and it defines things such as <code>quotient.eq</code> which are very useful in practice.</p>",
        "id": 133563238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536402377
    },
    {
        "content": "<p>Thanks, I was reading up on these this morning. I don't think there's a way to use the \"cheat\" method Coq uses (above), because I can't use exists to eliminate into something that isn't Prop.</p>",
        "id": 133570338,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536417896
    },
    {
        "content": "<p>is there a way to do quot.lift on a set with a function that is constant over the set?</p>",
        "id": 133608290,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536497969
    },
    {
        "content": "<p>You mean a computable function from <code>set \\a</code> that's based on some arbitrary element of a set?</p>",
        "id": 133608428,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536498186
    },
    {
        "content": "<p>The answer is probably no, because a set contains no computational content about it's elements.</p>",
        "id": 133608436,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536498231
    },
    {
        "content": "<p>Why does it work for quotient sets, but not just normal sets?</p>",
        "id": 133608502,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536498356
    },
    {
        "content": "<p>Why don't you formalise exactly what you're asking in Lean and post it? It's good practice, and also good practice.</p>",
        "id": 133608553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536498474
    },
    {
        "content": "<p>Something like this, <br>\n<code>def F {α β : Type} (A : set α) (f : α → β) : (∀ a b, a ∈ A → b ∈ A → f a = f b) → β := x</code></p>",
        "id": 133608945,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536499186
    },
    {
        "content": "<p>This is not enough. You need to assume that <code>A</code> is not empty.</p>",
        "id": 133609193,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536499590
    },
    {
        "content": "<p>Then you can use some form of choice. (or you know that <code>β</code> is not empty and chose a default element.</p>",
        "id": 133609197,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536499623
    },
    {
        "content": "<p>Or if you express the nonempty condition as <code>trunc A</code>, which is the quotient of <code>A</code> by the relation which identifies everything, then you can define <code>F</code> (computably) using <code>quotient.lift</code>.</p>",
        "id": 133609247,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536499704
    },
    {
        "content": "<p>If you use <code>choice</code>, then you don't even need the condition <code>(∀ a b, a ∈ A → b ∈ A → f a = f b)</code> to define <code>F</code>, which is mildly alarming, but you do need it to prove that <code>F</code> equals <code>f a</code> for any <code>a ∈ A</code>.</p>",
        "id": 133609264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536499775
    },
    {
        "content": "<p>If I use <code>trunc</code>, will it be annoying to switch between <code>A</code> and <code>trunc A</code>?</p>",
        "id": 133609451,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536500052
    },
    {
        "content": "<p>Well <code>trunc A</code> is an alternative to <code>nonempty A</code>, which you would need instead.<br>\nThe main annoyance of <code>trunc A</code> is that it isn't a proposition.</p>",
        "id": 133609872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536500869
    },
    {
        "content": "<blockquote>\n<p>Something like this, <br>\n<code>def F {α β : Type} (A : set α) (f : α → β) : (∀ a b, a ∈ A → b ∈ A → f a = f b) → β := x</code></p>\n</blockquote>\n<p>You mean <code>:= sorry</code>? As others have pointed out this can't yet be done (alpha and beta could both be empty at this point). So in some sense you still haven't asked the question.</p>",
        "id": 133610024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536501055
    },
    {
        "content": "<p>I guess I'll have to try a different approach</p>",
        "id": 133610381,
        "sender_full_name": "Ali Sever",
        "timestamp": 1536501519
    },
    {
        "content": "<p>I'm not saying that any approach doesn't work, but I am saying that I've learnt from experience that actually formalising my question precisely as <code>definition : blah := sorry</code> or <code>theorem : blah := sorry</code> really helps me to understand what I am asking before I ask it.</p>",
        "id": 133610654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536501854
    }
]