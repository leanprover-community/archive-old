[
    {
        "content": "<p>I was just faced with the following goal. Everything is a morphism in some fixed (abelian) category and all morphisms go either from or to some object <code>C.X i</code> of the category, in the centre of the picture.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  h: exact (C.d (i + 1) i) (C.d i (i - 1))</span>\n<span class=\"cm\">  ⊢ exact (C.d_to i) (C.d_from i)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>Why can't I solve this with an <code>assumption_mod_cast</code>-like tool? Here <code>C : chain_complex (some_category) (some_shape)</code> and I am lying about dot notation. </p>\n<p>The types: <code>C.d_from i : C.X i ⟶ C.X_next i</code> and <code>C.d i (i - 1) : C.X i ⟶ C.X (i - 1)</code> -- these are homs in category theory, not function arrows.  But here's a thing. We proved that <code>C.X_next i</code> and <code>C.X (i - 1)</code> were <em>canonically isomorphic</em> in the following sense: the API for <code>C.X_next</code> includes <code>def X_next_iso {i j : ι} (hcan : c.rel i j) :  C.X_next i ≅ C.X j := ...</code> and the secret thing which I know about this isomorphism is that it is <em>canonical</em> in that it is <code>rfl</code> modulo a rewrite which introduces an axiom <code>hcan.rec</code> where <code>hcan : A = B</code> is a proof of a possibly non-definitional equality of terms).</p>\n<p>So could a \"diagram chase lite\" tactic be told about this <code>X_next_iso</code> fact, and then if you have a pair of maps like <code>C.d_from i</code> and <code>C.d i j</code> and a proof of <code>c.rel i j</code>, you can register this pair as being \"canonically identified\" in the system by providing the proof that the triangle with <code>X_next_iso</code> commutes; in this case, this is the lemma <code>@[simp, reassoc] lemma d_from_comp_X_next_iso (r : c.rel i j) : C.d_from i ≫ (C.X_next_iso r).hom = C.d i j</code> already in our API.</p>\n<p>If <code>f</code> and <code>g</code> are two maps related in this way, with the same source <code>X_i</code>, then for any <code>a : _ \\hom X_i</code> I will know <code>exact a f &lt;-&gt; exact a g</code>, because presumably we know <code>exact a f &lt;-&gt; exact a (f &gt;&gt; (e : iso))</code>. I would like to think of what just happened, changing that <code>f</code> to a <code>g</code>, as some kind of cool rewrite which avoids <code>motive is not type correct</code> errors. Is this anything close to a sensible idea or should I just be doing everything manually?</p>",
        "id": 284631525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654098977
    },
    {
        "content": "<p>Is <code>C.d_from i == C.d i (i - 1)</code>?</p>",
        "id": 284632442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654099353
    },
    {
        "content": "<blockquote>\n<p><code>C.d_from i ≫ (C.X_next_iso r).hom = C.d i j</code></p>\n</blockquote>\n<p>Is <code>(C.X_next_iso r).hom</code> of the form <code>eq_to_hom</code> of something?</p>",
        "id": 284632598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654099424
    },
    {
        "content": "<p>Yeah, it is, so you could use an approach with <code>convert</code>. Or just prove a little lemma like <code>exact f g -&gt; exact (f &gt;&gt; i) (i.inv &gt;&gt; g)</code> (probably got the order wrong).</p>",
        "id": 284633060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654099621
    },
    {
        "content": "<p>Or maybe you already think this goal is easy but you just want it to be even easier?</p>",
        "id": 284633505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654099830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> we have isomoprhisms between <code>X_next</code> and <code>X_prev</code> and <code>X (i+1)</code> and <code>X (i-1)</code>, and the compatibility with <code>d</code>. So you compose with those isomorphisms to deduce exactness.</p>",
        "id": 284633633,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654099905
    },
    {
        "content": "<p>yeah I know, I'm just trying a more conceptual approach. My hypothesis is now<br>\n<code>h : exact (e1.inv &gt;&gt; f) (g &gt;&gt; e2.hom)</code> with goal <code>exact f g</code>. Do we have these \"cancel iso\" results?</p>",
        "id": 284633880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654100022
    },
    {
        "content": "<p><code>by simp</code> might work?</p>",
        "id": 284634204,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654100177
    },
    {
        "content": "<p>or <code>by simpa using h</code>.</p>",
        "id": 284634226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654100187
    },
    {
        "content": "<p>annoyingly <code>simp</code> knows that <code>e1.inv &gt;&gt; f</code> is <code>f'</code> and rewrites to that. I'll remove the lemma.</p>",
        "id": 284634296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654100222
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">homological_complex.X_prev_iso_comp_d_to</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">homological_complex.d_from_comp_X_next_iso</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>does it :-)</p>",
        "id": 284634461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654100300
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exact_comp_iso</span><span class=\"o\">,</span> <span class=\"n\">exact_iso_comp</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 284634548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654100353
    },
    {
        "content": "<p>I see, so I could have been using the simplifier, I was just unlucky that some other rewrite removing the equiv triggered first.</p>",
        "id": 284634771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654100470
    }
]