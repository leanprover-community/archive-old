[
    {
        "content": "<p>Hiya! Could anyone explain why I get timeouts whenever I try and use Ext :( for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.ext</span>\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ext_def</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span>\n  <span class=\"o\">(((</span><span class=\"n\">linear_yoneda</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_op.left_derived</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_op.obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I've been working around this by just using the thing on the RHS instead of the whole functor, but I'm getting other timeouts now that are possibly related.<br>\nApologies if there's information about use of Ext elsewhere in the chat - I don't know how to search case-sensitively and there are a lot of results for ext :)</p>\n<p>Edit: I couldn't reproduce this in online Lean so I thought updating my mathlib would fix it, but it hasn't (phew, this post isn't pointless). Hence resolving/unresolving the topic.</p>",
        "id": 267948138,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1642117179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118107\">Amelia Livingston</span> has marked this topic as resolved.</p>",
        "id": 267949109,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642117768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118107\">Amelia Livingston</span> has marked this topic as unresolved.</p>",
        "id": 267949877,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642118295
    },
    {
        "content": "<p>Just to confirm -- I'm getting the same issue on my machine.</p>",
        "id": 267950768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642118809
    },
    {
        "content": "<p>But lean is happy if you fill in the sorry</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ext_def</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span>\n  <span class=\"o\">(((</span><span class=\"n\">linear_yoneda</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_op.left_derived</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_op.obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">eq_to_iso</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 267950811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642118860
    },
    {
        "content": "<p>oh wow! thank you!</p>",
        "id": 267950884,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1642118889
    },
    {
        "content": "<p>I don't know why it times out with the sorry though... it's not great.</p>",
        "id": 267950945,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642118951
    },
    {
        "content": "<p>I hope someone who knows how to troubleshoot timeouts better than me will chime in.</p>",
        "id": 267950966,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642118983
    },
    {
        "content": "<p>this seems to be the <code>lemma/def</code> sorry issue; make it a <code>lemma</code> until you fill it in</p>",
        "id": 267951060,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642119056
    },
    {
        "content": "<p>Is this <code>lemma/def</code> sorry issue documented somewhere? (If I've heard of it before, I've already forgotten about it...)</p>",
        "id": 267951364,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1642119348
    },
    {
        "content": "<p>not sure, it definitely should be. the idea is that <code>lemma</code> doesn't try to be clever about the type (I want to say elaborate but not sure) but <code>def</code> can make it dependent on the output, so for example <code>def my_def : 1 = 1 := @rfl rat 1</code> should work, but I don't think the same would work for a lemma</p>",
        "id": 267951681,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642119570
    },
    {
        "content": "<p>thank you very much! I've met this issue in other contexts without realising it...</p>",
        "id": 267951966,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1642119790
    },
    {
        "content": "<p><code>eq_to_iso rfl</code> is better known as the identity map right? or does that not work for some reason?</p>",
        "id": 267952390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642120178
    },
    {
        "content": "<p>Does the force_noncomputable trick solve this issue?</p>",
        "id": 267952829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642120561
    },
    {
        "content": "<p>If you replace the iso symbol with equality then there is no issue (and the two sides are defeq). I haven't tried manually filling in the structure fields with identity, but I suppose that would work as well.</p>",
        "id": 267953048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642120755
    },
    {
        "content": "<p>maybe I should rename this topic to \"lemma/def sorry issue\"? unfortunate that it's in #maths</p>",
        "id": 267953194,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1642120898
    },
    {
        "content": "<p>ah I guess I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.iso.refl\">docs#category_theory.iso.refl</a></p>",
        "id": 267954043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642121601
    },
    {
        "content": "<p>Maintainers can move messages between streams (out of <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a>)  if you ask :)</p>",
        "id": 267954697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642122098
    }
]