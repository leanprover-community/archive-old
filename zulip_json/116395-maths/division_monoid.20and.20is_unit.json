[
    {
        "content": "<p>There are a couple of lemmas about <code>is_unit</code> that depend on <code>division_monoid</code> such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_unit.inv_mul_eq_iff_eq_mul\">docs#is_unit.inv_mul_eq_iff_eq_mul</a>. Unfortunately, I can't use these lemmas when working with square matrices because a <code>division_monoid</code> requires <code>x⁻¹⁻¹ = x</code>, even for non-invertible <code>x</code>. Would removing that requirement from <code>division_monoid</code> be an option? Or should I reprove these lemmas specifically for matrices? Or do we need two finer-grained type-classes here?</p>",
        "id": 293917391,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660749312
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 293923507,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660751281
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 293923681,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660751326
    },
    {
        "content": "<p>Nevermind, I misread your question.</p>",
        "id": 293923798,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660751370
    },
    {
        "content": "<p>Isn't the problem that the matrix multiplication is only a <code>has_mul.mul</code> if the matrices are square? and similarly the inverse of <code>a : A</code> has to have type <code>A</code>. I have the same problem with defining the resolvent and I was about to define my own version of <code>inverse</code> and <code>unit</code>, but if that problem occurs several times, then we might want to find a better solution.</p>",
        "id": 293925842,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660751958
    },
    {
        "content": "<p>It seems we lack a lemma saying if <code>h : is_unit x</code> then <code>x⁻¹ = ↑(h.unit⁻¹)</code> for a matrix <code>x</code>. After rewriting by that, what you want is defeq to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.inv_mul_eq_iff_eq_mul\">docs#units.inv_mul_eq_iff_eq_mul</a>.</p>",
        "id": 293930092,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660753250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> That's yet another problem, but I would already be happy with a solution that works for square matrices.</p>",
        "id": 293930691,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660753457
    },
    {
        "content": "<p>ah for non-invertible matrices the inverse is defined as zero and not as the matrix itself</p>",
        "id": 293932510,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660754033
    },
    {
        "content": "<p>and I also misread your question, I am sorry.</p>",
        "id": 293932663,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660754071
    },
    {
        "content": "<p>Yes, the inverse of a noninvertible matrix would be the matrix itself, that would also work. Then we could use <code>division_monoid</code> directly. On the other hand, the definition of the inverse as <code>ring.inverse A.det • A.adjugate</code> is currenlty quite elegant.</p>",
        "id": 293933531,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660754329
    },
    {
        "content": "<p>the issue goes down to <code>ring.inverse</code>, but changing it there seems like a dangerous thing</p>",
        "id": 293933792,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660754403
    },
    {
        "content": "<p>I would guess that there a quite a few things that rely on the inverse being zero if the element is non-invertible</p>",
        "id": 293933919,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660754441
    },
    {
        "content": "<p>Right, it would probably be easier to modify <code>division_monoid</code>, although I am not sure how much depends on it.</p>",
        "id": 293934094,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660754494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Yes, that would be a nice way to transfer the lemmas from <code>units</code> to <code>matrix</code>. But it would still require us to create <code>matrix</code>-specific copies of the lemmas about <code>units</code>. I was wondering if we could use type class inference instead of copies.</p>",
        "id": 293934258,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660754539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> who put some serious thought into the creation of <code>division_monoid</code></p>",
        "id": 293934913,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660754769
    },
    {
        "content": "<p>Currently, matrices are not a division monoid because they do not respect <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inv_inv\">docs#inv_inv</a>.</p>",
        "id": 293935274,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660754894
    },
    {
        "content": "<p>Removing this field to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/division_monoid\">docs#division_monoid</a> would make ~50 lemmas not true for them (out of ~300 <code>division_monoid</code> lemmas) iirc.</p>",
        "id": 293935475,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660754981
    },
    {
        "content": "<p>What I suggested back then was to redefine inversion of matrices so as to make this axiom true, but <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> says thus is too hard to ensure. I don't know whether I believe it but I also don't know much about matrices.</p>",
        "id": 293935812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660755093
    },
    {
        "content": "<p>it feels a bit like the last three fields in <code>division_monoid</code> almost force the inverse to be a real inverse and I wonder whether the lemma Alexander was first mentioning is true without the <code>is_unit</code> assumption</p>",
        "id": 293936391,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660755276
    },
    {
        "content": "<p>No, that lemma is wrong if you do not assume <code>is_unit</code>.</p>",
        "id": 293936887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660755427
    },
    {
        "content": "<p>but there more serious question would be whether it is possible to prove it with something less than <code>division_monoid</code></p>",
        "id": 293937035,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660755466
    },
    {
        "content": "<p>Yes you can</p>",
        "id": 293937139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660755492
    },
    {
        "content": "<p>Its proof doesn't mention <code>inv_inv</code>.</p>",
        "id": 293937337,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660755557
    },
    {
        "content": "<p>The easy way out is to write the typeclass <code>division_monoid</code> - <code>inv_inv</code>, but I was trying not to overengineer the hierarchy. The solution I would like to see is making <code>inv_inv</code> true for <code>matrix</code>.</p>",
        "id": 293939810,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660756396
    },
    {
        "content": "<p>Does this not work for <code>div_inv_monoid</code>?</p>",
        "id": 293940182,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660756510
    },
    {
        "content": "<p>No, <code>div_inv_monoid</code> just states the definition of division in terms of inversion.</p>",
        "id": 293941921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660757099
    },
    {
        "content": "<p>yeah, one would need a typeclass for having <code>a⁻¹ = ↑(ha.unit)⁻¹</code>, where <code>ha : is_unit a</code>, but I don't know whether that is worth it (probably not)</p>",
        "id": 293943580,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660757604
    },
    {
        "content": "<p>If it's just matrices for now, I think adding a standalone lemma for those is okay.</p>",
        "id": 293944654,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660757946
    },
    {
        "content": "<p><code>inv_inv_inv</code> is true for matrices as it right now</p>",
        "id": 293944905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660758031
    },
    {
        "content": "<p>If a matrix is not invertible, then currently <code>inv</code> sends it to <code>0</code>. so <code>A\\inv\\inv = 0</code> even when <code>A \\ne 0</code>.</p>",
        "id": 293945440,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660758253
    },
    {
        "content": "<p>Let's say <code>A\\inv = A</code> when A is not invertible. Then <code>inv_inv</code> is true. But then a lot of nice lemmas about the distribution of inv over mul, or <code>zpow</code> don't work.</p>",
        "id": 293945531,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660758299
    },
    {
        "content": "<p>I mean, I'd rather have lemmas applying sometimes under more conditions (e.g. requiring invertibility) instead of having to rewrite lemmas, but I'm not sure of the exact details of this situation. We can also prove lemmas about the adjugate+determinant combo separately, and leave the inv lemmas to another inv so that  the typeclass system functions better.</p>",
        "id": 293956543,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660762521
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring.inverse\">docs#ring.inverse</a></p>",
        "id": 293956726,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660762576
    },
    {
        "content": "<p>That's re Moritz Doll's suggestion</p>",
        "id": 293956828,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660762611
    },
    {
        "content": "<p>Sorry, I see that Alexander already mentioned it via the <code>matrix.inv</code> definition</p>",
        "id": 293957025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660762693
    }
]