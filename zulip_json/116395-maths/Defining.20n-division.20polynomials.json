[
    {
        "content": "<p>Hi all,</p>\n<p>I'm having a go at proving in Lean something that can't be found in the literature (as far as I'm aware), namely a purely algebraic proof of the validity of the formulas for the multiplication-by-n isogeny on elliptic curves. This involves the infamous n-division polynomials, which I am trying to define in Lean. The recurrence has 5 basic cases (0,1,2,3,4) and then two recurrent formulas, depending on the parity of n. I haven't been able to make it work so far, here is my try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"c1\">--variables {R : Type} [comm_ring R]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--set_option trace.eqn_compiler.elim_match true</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">psi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">20</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">))</span><span class=\"bp\">*</span>\n      <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">B</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>From reading <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a> I gathered that I needed to supply the proofs of the fact that the recurrence is well-founded, but they would all be easy, I could even figure out how to produce a term proof if linarith was forbidden.</p>\n<p>Also, I'd like A and B to be allowed to live in any commutative ring, but then it gives me even more errors because apparently A*x is not a polynomial in R when A is in R (but that's for a different thread I guess).</p>\n<p>Any hints would be appreciated :-).</p>\n<p>PS: feel free to move this to \"new members\", I'm not always sure of the distinction between streams.</p>",
        "id": 231157400,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1616259324
    },
    {
        "content": "<p>I think you're no longer new :-) Just to be clear -- this is the y^2=x^3+Ax+B model, right?</p>",
        "id": 231157465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616259366
    },
    {
        "content": "<p>The equation compiler isn't going to be able to split between even and odd cases I don't think, because even v odd is not something which comes directly from the recursive definition of the naturals. I would just be tempted to use \"strong recursion\" here.</p>",
        "id": 231157516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616259470
    },
    {
        "content": "<p>(what if not new but have  a newbie question?). This is the y^2=x^3+Ax+B model, but if that worked then it shouldn't be too hard to adapt the proof to the general Weierstrass model.</p>",
        "id": 231157575,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1616259515
    },
    {
        "content": "<p>Oh, so you say that 2<em>n vs 2</em>n+1 (or what I write) does confuse lean? Maybe there's an easier way just defining phi_odd and phi_even, then? It wouldn't be as elegant, but I just want to type a proof...</p>",
        "id": 231157729,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1616259655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254058\">Marc Masdeu</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20n-division.20polynomials/near/231157400\">said</a>:</p>\n<blockquote>\n<p>Also, I'd like A and B to be allowed to live in any commutative ring, but then it gives me even more errors because apparently A*x is not a polynomial in R when A is in R (but that's for a different thread I guess).</p>\n</blockquote>\n<p>Use <code>C A * X</code> or <code>A \\bullet X</code>. Here <code>C</code> is <code>polynomial.C</code> is the ring morphism from <code>R</code> to <code>polynomial R</code>.</p>\n<p>(I think this thread perfectly fits the #maths stream!)</p>",
        "id": 231157845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616259768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> I think would use <code>if .. then .. else</code> in the <code>n + 5</code> branch</p>",
        "id": 231158110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260006
    },
    {
        "content": "<p>And <code>nat</code>-division, which is truncating, so <code>5/2 = 2</code>, <code>6/2 = 3</code>, and <code>7/2 = 3</code>, etc...</p>",
        "id": 231158129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260035
    },
    {
        "content": "<p>The other option is the strong recursion that Kevin mentioned</p>",
        "id": 231158149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260079
    },
    {
        "content": "<p>Aah very nice, so you don't have to extract the k from \"exists k, n=2k or n=2k+1\"</p>",
        "id": 231158190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616260089
    },
    {
        "content": "<p>I was going to suggest matching on the pos_num :-) but integer division is a much more sensible approach</p>",
        "id": 231158239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616260124
    },
    {
        "content": "<p>So in conclusion do the final match on n+5 and use if then else on <code>even (n+5)</code> (or probably even n is more sensible) and try your have technique. And for the polynomials I would be tempted to fix a ring and just use <code>polynomial.X</code> directly (open polynomial first) and then use C or bub</p>",
        "id": 231158391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616260315
    },
    {
        "content": "<p>Thanks for the suggestions, I'll try and see.</p>",
        "id": 231158476,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1616260425
    },
    {
        "content": "<p>Seems that I've made a bit of progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--set_option trace.eqn_compiler.elim_match true</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">psi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">•</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">•</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">•</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">20</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">•</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">•</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">))</span><span class=\"bp\">*</span>\n      <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">--/ (4*(x^3+A•x+B•x^0))</span>\n      <span class=\"k\">else</span>\n  <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but Lean complains about <code>decidable (even n)</code>. Also I'll have trouble dividing by a polynomial, I need to familiarize myself with that part of mathlib, but I'd have assumed that there is a has_div giving out junk when the numerator is not a multiple of the denominator, as usual.</p>",
        "id": 231159058,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1616261068
    },
    {
        "content": "<p>I'm surprised that it complains about <code>decidable (even n)</code>. But I guess you can replace it with <code>n % 2 = 0</code> or <code>open_locale classical</code>.</p>",
        "id": 231159194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616261206
    },
    {
        "content": "<p><code>n % 2 = 0</code> might be a bit easier, because it allows you to use <code>rfl</code> in a bit more places.</p>",
        "id": 231159216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616261241
    },
    {
        "content": "<p>Of course the other option is to write an instance for <code>decidable (even n)</code>. I didn't find it in mathlib with a quick search.</p>",
        "id": 231159233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616261277
    },
    {
        "content": "<p>Anyway, the first thing after this definition is probably simp-lemmas for <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>even n</code>, and <code>odd n</code>. Maybe also for <code>2n + 5</code> and <code>2n + 6</code>.</p>",
        "id": 231159305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616261341
    },
    {
        "content": "<p>And also I would be tempted to use polynomial.X rather than your x because there will be a bunch of lemmas about how X evaluates but you'll be constantly unfolding your x in order to make progress</p>",
        "id": 231160535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616262559
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>It is there, you just need the right import perhaps?</p>",
        "id": 231161826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616263845
    },
    {
        "content": "<p>For what is worth, I post the definition I settled on.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.div</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhalves</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">twopos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.div_lt_of_lt_mul</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhalves'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.div_lt_self'</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Define the \"depleted\" psi polynomials. They are Ψ as in Wikipedia,</span>\n<span class=\"sd\">but for even n we remove a factor of 2*y, thus making them one-variable.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">psi</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">•</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">•</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">•</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">20</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">•</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">•</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nhalves</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nhalves</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nhalves</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nhalves</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nhalves'</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nhalves'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nhalves'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nhalves'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nhalves'</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"mi\">16</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"n\">A</span><span class=\"bp\">•</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">B</span><span class=\"bp\">•</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">3</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">16</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"n\">A</span><span class=\"bp\">•</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">B</span><span class=\"bp\">•</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">3</span>\n  <span class=\"k\">else</span>\n      <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">psi</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span>\n        <span class=\"n\">psi</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have been able to prove the lemma, for example, with quite a bit of work. But it would be useful to avoid having to write A B so many times in such statements. For my application, I'd like to \"fix\" A B throughout a namespace, and define something like mypsi (or better, Ψ) like <code>Ψ : ℕ → polynomial R := λ n, psi A B n</code>, but I don't know how to do it, really.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">psi_two_times</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">psi</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span>\n  <span class=\"n\">psi</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">psi</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 231762168,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1616660603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> One possibility would be to use notation for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">mypsi</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">psi</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>That way you don't have to write the <code>A</code> and <code>B</code> everywhere in your code. But they will still be visible in the goal window.</p>",
        "id": 231763121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616661147
    },
    {
        "content": "<p>you mean <code>local notation `mypsi` := psi A B</code></p>",
        "id": 231764093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616661686
    },
    {
        "content": "<p>Hi Marc!</p>\n<p>Not at all related to the <code>A B</code> stuff, but the initial lemmas can be proved as follows.  I was actually surprised that <code>lemma nat.half_le_self</code> is not already in mathlib (and maybe it is?):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.half_le_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl.le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.div_le_of_le_mul</span> <span class=\"o\">(((</span><span class=\"n\">add_le_add_iff_left</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">two_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.le</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhalves</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(((</span><span class=\"n\">add_le_add_iff_right</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">n.div_le_self</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">le.intro</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhalves'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"o\">(((</span><span class=\"n\">add_le_add_iff_right</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">n.half_le_self</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">le.intro</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231780667,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616670111
    },
    {
        "content": "<p>Check if there is such a statement about div2</p>",
        "id": 231781243,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616670351
    },
    {
        "content": "<p>I thought that I checked: besides <code>library_search</code>, I also tried with the autocomplete, but all my guesses failed.  I did find the one with <code>n / 2 ≤ n</code>, though...</p>",
        "id": 231781506,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616670496
    },
    {
        "content": "<p>There is a possibly promising lemma, but I am not sure what it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">div2_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">div2</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">div2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">bodd</span> <span class=\"n\">div2</span> <span class=\"n\">bodd_div2</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">bodd_div2</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">fst</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 231781670,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616670596
    },
    {
        "content": "<p>Also, I am at the same time proud and ashamed of having guessed that <code>(0 + 1) / 2 ≤ 0</code> was</p>\n<ul>\n<li>true,</li>\n<li>proved by <code>exact rfl.le</code>.</li>\n</ul>",
        "id": 231782171,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616670822
    },
    {
        "content": "<p>Johan, I wish I could add emoji reactions to your emoji reactions!  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 231782296,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616670893
    },
    {
        "content": "<p>In case you find this helpful, I made a PR with the lemma <code>(n+1) / 2 ≤ n</code>.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/issues/6863\">#6863</a></p>",
        "id": 231810426,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616682519
    },
    {
        "content": "<p>Marc, <code>lemma nat.succ_half_le_self</code> did not survive the review process.  However, with the latest version of mathlib, what's below is also a proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.succ_half_le_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">div_le_iff_le_mul_add_pred</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">((</span><span class=\"n\">add_le_add_iff_right</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"o\">(</span><span class=\"n\">le_mul_of_one_le_of_le</span> <span class=\"n\">one_le_two</span> <span class=\"n\">rfl.le</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>If you do not care about lines longer than 100 chars, it even fits on a single line. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 232309772,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617040824
    },
    {
        "content": "<p>Every proof is a one line proof if you start far enough to the left <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 232312529,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617041986
    },
    {
        "content": "<p>By induction every proof fits in the margin?</p>",
        "id": 232312884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617042127
    }
]