[
    {
        "content": "<p>I have a way of attaching an <code>nnreal</code> to every set in the neighbourhood filter of some point in some space. Now I would like to express the predicate that these <code>nnreal</code>s converge to some limit point for smaller and smaller nhds. The usual <code>tendsto</code> language doesn't seem built for this purpose. How should I do this?</p>",
        "id": 182642873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575539178
    },
    {
        "content": "<p>Short piece of code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">relative_index</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">‚àà</span> <span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">U</span> <span class=\"n\">K</span> <span class=\"n\">hU</span> <span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">U</span> <span class=\"n\">A</span> <span class=\"n\">hU</span> <span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 182642936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575539258
    },
    {
        "content": "<p>My file so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">borel_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Haar measure</span>\n\n<span class=\"cm\">In this file we define the Haar measure:</span>\n<span class=\"cm\">A left-translation invariant measure on a locally compact topological group.</span>\n\n<span class=\"cm\">## References</span>\n<span class=\"cm\">Alfsen, E. M. A simplified constructive proof of the existence and uniqueness of Haar measure.</span>\n<span class=\"cm\">  Math. Scand. 12 (1963), 106--116. MR0158022</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">measure_theory</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">measure</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A measure `Œº` on a topological group is left invariant if</span>\n<span class=\"cm\">for all measurable sets `s` and all `g`, we have `Œº (gs) = Œº s`,</span>\n<span class=\"cm\">where `gs` denotes the translate of `s` by left multiplication with `g`. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">is_left_add_invariant</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">is_left_invariant</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>  <span class=\"n\">Œº</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">measure</span>\n<span class=\"kn\">end</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">topological_group</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">haar_measure_construction</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- `index_prop S T` is a predicate</span>\n<span class=\"cm\">asserting that `T` is covered by finitely many left-translates of `S`. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">index_prop</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">‚àà</span> <span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"err\">‚äÜ</span> <span class=\"err\">‚ãÉ</span> <span class=\"n\">g</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">‚àß</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">U</span> <span class=\"n\">hU</span> <span class=\"kn\">using</span> <span class=\"n\">mem_nhds_sets_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hŒπ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">is_open</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"bp\">‚Åª¬π</span> <span class=\"bp\">‚Åª¬π</span><span class=\"err\">&#39;</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mem_left_coset_iff</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_mul_left</span> <span class=\"n\">g</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hU</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">s_fin</span><span class=\"o\">,</span> <span class=\"n\">s_cover</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">compact_elim_finite_subcover_image</span> <span class=\"n\">hT</span> <span class=\"n\">hŒπ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">s_fin</span><span class=\"bp\">.</span><span class=\"n\">exists_finset_coe</span> <span class=\"k\">with</span> <span class=\"bp\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">s_cover</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union_subset_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union_subset_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mono_image</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hU</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">‚ü®</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"n\">t</span><span class=\"bp\">‚ü©</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">index</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">‚àà</span> <span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">index_prop</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">hS</span> <span class=\"n\">hT</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">relative_index</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">‚àà</span> <span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">U</span> <span class=\"n\">K</span> <span class=\"n\">hU</span> <span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">U</span> <span class=\"n\">A</span> <span class=\"n\">hU</span> <span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">prehaar_of_compact</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">locally_compact_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">haar_measure_construction</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_compact_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">haar_measure</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">topological_group</span>\n</pre></div>",
        "id": 182642989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575539296
    },
    {
        "content": "<p>I'm not sure what you are trying to express. You seem to be in a topological group context, so I assume that \"smaller and smaller neighborhood\" refers to the left or right uniform structure. Then you could write something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">nnreal</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Œ¥</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">√ó</span> <span class=\"n\">G</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">‚Åª¬π</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"err\">‚àà</span> <span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">U</span> <span class=\"err\">‚àà</span> <span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Åª¬π</span><span class=\"err\">&#39;</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">U</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span>\n</pre></div>",
        "id": 182684389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575568172
    },
    {
        "content": "<p>About your <code>is_left_invariant</code> definition, I think you are missing a great opportunity to use the Giry monad!</p>",
        "id": 182684499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575568241
    },
    {
        "content": "<p>I'll see if I can make that work</p>",
        "id": 182684571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575568307
    },
    {
        "content": "<p>My <code>phi</code> isn't currently defined on all sets...</p>",
        "id": 182684701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575568383
    }
]