[
    {
        "content": "<p>The statement of <code>polynomial.ring_hom_ext</code> is currently</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ring_hom_ext</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Should the assumption <code> ∀ a, f (C a) = g (C a)</code> be changed to <code>f.comp C = g.comp C</code>? That way it's easier to apply another hom ext lemma to prove that equality if there is a hom ext lemma about maps out of <code>R</code>.</p>",
        "id": 253634764,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631819509
    },
    {
        "content": "<p>Nice observation!</p>",
        "id": 253635594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631819841
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#partially-applied%20ext%20lemmas\">https://leanprover-community.github.io/mathlib_docs/notes.html#partially-applied%20ext%20lemmas</a> right?</p>",
        "id": 253639112,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1631821315
    },
    {
        "content": "<p>I think I meant to PR this and forgot</p>",
        "id": 253654630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631827985
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.ring_hom_ext'\">docs#add_monoid_algebra.ring_hom_ext'</a> gets it right.</p>",
        "id": 253654717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631828041
    },
    {
        "content": "<p>So I guess we should have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.ring_hom_ext'\">docs#polynomial.ring_hom_ext'</a></p>",
        "id": 253654874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631828112
    },
    {
        "content": "<p>... which we do</p>",
        "id": 253654886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631828120
    },
    {
        "content": "<p>So no action needed here?</p>",
        "id": 253654893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631828127
    },
    {
        "content": "<p>Other than adding a <code>/-- See note [partially-applied ext lemmas] -/</code> docstring to it, maybe</p>",
        "id": 253654924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631828146
    },
    {
        "content": "<p>I think maybe making <code>ext'</code> the primary version would be good.</p>",
        "id": 253657703,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631829659
    },
    {
        "content": "<p>I usually tried to make lemma <code>*.*_ext</code> with something like <code>∀ a, f (C a) = g (C a)</code> and <code>@[ext] *.*_ext'</code> version with <code>f.comp C = g.comp C</code>.</p>",
        "id": 253664587,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631833563
    },
    {
        "content": "<p>I wonder whether <code>ext</code> should automatically call <code>dsimp</code> (may be, with custom settings) to get rid of all those auxiliary homs.</p>",
        "id": 253664789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631833713
    },
    {
        "content": "<p>Also, <a href=\"https://github.com/leanprover-community/mathlib/issues/9235\">#9235</a> is about <code>mv_polynomial</code> not <code>polynomial</code>; I think the former <em>is</em> missing this generalization</p>",
        "id": 253695837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631859549
    },
    {
        "content": "<p>I think the approach in <a href=\"https://github.com/leanprover-community/mathlib/issues/9235\">#9235</a> is still wrong, it's best to take the same approach as with polynomial and just make a new lemma.</p>",
        "id": 253727284,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631878032
    },
    {
        "content": "<p>Sure, but you'll still want most of the downstream changes in that PR</p>",
        "id": 253729796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631879487
    },
    {
        "content": "<p>So it's probably worth continuing from rather than starting over</p>",
        "id": 253729825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631879507
    },
    {
        "content": "<p>I don't actually think I do want most of the downstream changes. Mostly I was fixing things with <code>apply</code> rather than <code>ext</code></p>",
        "id": 253736324,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631882917
    },
    {
        "content": "<p>I reopened it.</p>",
        "id": 253737689,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631883557
    },
    {
        "content": "<p>the <code>data/mv_polynomial</code> and <code>ring_theory/mv_polynomial</code> folders build locally, so I'll wait for ci to check the rest</p>",
        "id": 253740752,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631884898
    },
    {
        "content": "<p>We still don't use follow the convention in the note when it comes to maps of Types. We still have the assumption <code>∀ (i : σ), ⇑f (X i) = ⇑g (X i)</code>. I just had an example where <code>σ</code> was <code>option _</code> and if we'd had the assumption <code>f ∘ X = g ∘ X</code> then I could have applied an extensionality lemma for maps out of <code>option _</code>. Not sure if we want to go this far though.</p>",
        "id": 253814093,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631916483
    },
    {
        "content": "<p>Does <code>ext (_ | x)</code> work for option?</p>",
        "id": 253820888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631921423
    },
    {
        "content": "<p>My mental model is that <code>ext</code> is like a version of cases that discharges most of the hypotheses using properties of morphisms</p>",
        "id": 253820938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631921475
    },
    {
        "content": "<p>I think, we should have custom <code>ext</code> lemmas for maps from quotients.</p>",
        "id": 253828930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631929488
    },
    {
        "content": "<p>OTOH, we can just use <code>ext ⟨x⟩</code>.</p>",
        "id": 253828951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631929522
    },
    {
        "content": "<p>The custom lemmas can preserve morphism properties though</p>",
        "id": 253845377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631947589
    }
]