[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n</pre></div>\n\n\n<p>In an attempt to prove De Morgan's laws in logic, I got here.  But I'm not sure how to continue.  f is a negation so I can't use \"split\", and \"by_cases p1 : p ∧ q\" doesn't work because p ∧ q appears to have \"undecidable type\"</p>",
        "id": 188849681,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582433730
    },
    {
        "content": "<p>You need to use <code>classical.prop_decidable</code> (if you're importing mathlib, you can also write <code>open_locale classical</code> near the start of your file):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188850598,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582434928
    },
    {
        "content": "<p>All the intro, split, apply, cases stuff will only solve goals in constructive logic, which is weaker than classical logic. A random statement which is true in classical logic has like a 50% chance of being true constructively and if it isn't then you can just do a case split on whether something is true or false, which is exactly the law of the excluded middle</p>",
        "id": 188857767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582445142
    },
    {
        "content": "<blockquote>\n<p>A random statement which is true in classical logic has like a 50% chance of being true constructively</p>\n</blockquote>\n<p>I got curious about this and did a little digging. Here's one paper on the topic: <a href=\"https://doi.org/10.1016/j.apal.2011.09.011\" target=\"_blank\" title=\"https://doi.org/10.1016/j.apal.2011.09.011\">\"In the full propositional logic, 5/8 of classical tautologies are intuitionistically valid\"</a> by Genitrini and Kozik.</p>",
        "id": 188876660,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582478828
    },
    {
        "content": "<p>rofl I stand corrected</p>",
        "id": 188877065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582479648
    },
    {
        "content": "<p>We are discussing statistics and you were within 40% of the correct answer, there is no problem at all.</p>",
        "id": 188877659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582480613
    },
    {
        "content": "<p>Is there a Lean command (such as or.assoc for a∨(b∨c)=(a∨b)∨c) to get the addition law, p implies p∨q?</p>",
        "id": 188894914,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582511899
    },
    {
        "content": "<p><code>or.intro_left</code>?</p>",
        "id": 188894935,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582511961
    },
    {
        "content": "<p>or just <code>or.inl</code></p>",
        "id": 188894981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582512008
    },
    {
        "content": "<p>Thanks.  Bear with me, there are tons of commands I don't know</p>",
        "id": 188894982,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582512008
    },
    {
        "content": "<p>or <code>left</code></p>",
        "id": 188894984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582512012
    },
    {
        "content": "<p>If you're in tactic mode, <code>left</code> will change a goal like <code>p∨q</code> to <code>p</code>.</p>",
        "id": 188894985,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582512016
    },
    {
        "content": "<p>Technically, <code>or.inl</code> isn't a command, it's a theorem. There are tens of thousands of them and probably no one knows the whole list so you shouldn't be ashamed to not know one. It is good to know how to find them though</p>",
        "id": 188895011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582512122
    },
    {
        "content": "<p>And just out of curiosity, are there Lean lemmas of this form?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_all_eq_ex_not</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_ex_eq_all_not</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Because I think they'd be useful to prove the well-ordering principle:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">WOP</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),(</span><span class=\"n\">pr</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),(</span><span class=\"n\">pr</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),(</span><span class=\"n\">pr</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 188895269,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582512552
    },
    {
        "content": "<p>Those are <code>not_forall</code> and <code>not_exists</code> in mathlib's <code>logic.basic</code>, respectively.</p>",
        "id": 188895411,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582512815
    },
    {
        "content": "<p>Okay, thanks.  I already wrote my own De Morgan's Laws lemmas for finite conjunctions and disjunctions (with some of your help), so I wonder if Lean has them builtin</p>",
        "id": 188895459,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582512871
    },
    {
        "content": "<p>and what you are calling the well ordering principle is <code>nat.find</code> and its lemmas</p>",
        "id": 188895463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582512896
    },
    {
        "content": "<p>We usually represent finite conjunctions by iterating <code>and</code>, and there are de morgan's laws for them, also in <code>logic.basic</code></p>",
        "id": 188895473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582512940
    },
    {
        "content": "<p>In fact, you should just browse through the file to get an idea of what to expect</p>",
        "id": 188895516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582512973
    },
    {
        "content": "<p>Okay, maybe I'll put my useless lemmas in another file XD</p>",
        "id": 188895535,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513024
    },
    {
        "content": "<p>Generally, you will get a feel for what \"should be in mathlib\", which is to say, it either already exists and so you should find it, or it doesn't exist and you should PR it</p>",
        "id": 188895582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513121
    },
    {
        "content": "<p>any logical manipulation involving 3 or fewer variables should already be proven</p>",
        "id": 188895602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513167
    },
    {
        "content": "<p>Anyway, I tried using nat.find:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">bezout</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">hp1</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">p_pos</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">hp1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">dh</span> <span class=\"o\">:=</span> <span class=\"n\">LCex</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">p_pos</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">dm</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">dh</span><span class=\"o\">),</span>\n<span class=\"c1\">-- ...</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>and now the hypotheses state dm is a natural number, but I don't see any assertion that it satisfies dh's condition or any assertion that nothing smaller does:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">divides</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">divides</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">zero_lt_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">p_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">dh</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">dm</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 188895652,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513210
    },
    {
        "content": "<p>don't use <code>have</code> to introduce functions, use <code>let</code></p>",
        "id": 188895743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513386
    },
    {
        "content": "<p>Okay...</p>",
        "id": 188895748,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513396
    },
    {
        "content": "<p>There is a definition called <code>nat.find</code>, a theorem saying that <code>P (nat.find h)</code> holds, and another theorem saying that nothing smaller than <code>nat.find h</code> satisfies <code>P</code></p>",
        "id": 188895792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513443
    },
    {
        "content": "<p>it's not in the context, it's just a global theorem about <code>nat.find</code></p>",
        "id": 188895803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513476
    },
    {
        "content": "<p>Hmm... what are their names?</p>",
        "id": 188895807,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513482
    },
    {
        "content": "<p><code>nat.find_spec</code> maybe? grep / find in files is your friend</p>",
        "id": 188895813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513504
    },
    {
        "content": "<p><code>nat.find_spec</code> says <code>nat.find</code> satisfies <code>P</code>, and <code>nat.find_min</code> or <code>nat.find_min'</code> say that nothing smaller does</p>",
        "id": 188895871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513594
    },
    {
        "content": "<p>Alright...</p>",
        "id": 188895872,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513609
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">dh</span><span class=\"o\">,</span>\n<span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">dh</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">dh</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">dh</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>Is there a way to replace \"nat.find dh\" with \"d\" throughout, given this?  rw doesn't work</p>",
        "id": 188895929,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513749
    },
    {
        "content": "<p>use <code>set</code> instead of <code>let</code></p>",
        "id": 188895931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513760
    },
    {
        "content": "<p>Oh okay</p>",
        "id": 188895933,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513774
    },
    {
        "content": "<p>you don't need <code>let</code> for theorems like <code>dx</code></p>",
        "id": 188895935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513782
    },
    {
        "content": "<p>just <code>d</code></p>",
        "id": 188895938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513787
    },
    {
        "content": "<p>because you want to retain the knowledge of what it is defined to be so you can assert additional facts about it</p>",
        "id": 188895980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513811
    },
    {
        "content": "<p>Okay, done that but \"rw d at dx\" still doesn't work</p>",
        "id": 188895986,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513830
    },
    {
        "content": "<p><code>set</code> should replace any instances of the let body in the current goal with the variable</p>",
        "id": 188895998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513862
    },
    {
        "content": "<p><code>dsimp</code> can be used to unfold a let but not to re-fold one</p>",
        "id": 188896010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513895
    },
    {
        "content": "<p>Ah okay thanks</p>",
        "id": 188896012,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582513903
    },
    {
        "content": "<p>I think <code>set</code> has an option to give you an equality as well, which can be used with <code>rw</code></p>",
        "id": 188896015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513914
    },
    {
        "content": "<p>What I would probably do in this case is just state the theorem the way you want it to be stated</p>",
        "id": 188896075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582514011
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bezout</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">hp1</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">p_pos</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">hp1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">dh</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">dh</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">dh</span>\n<span class=\"k\">have</span> <span class=\"n\">dm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d&#39;</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">d&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min&#39;</span> <span class=\"n\">dh</span><span class=\"o\">,</span>\n<span class=\"c1\">-- ...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188896123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582514058
    },
    {
        "content": "<p>As an additional stylistic point, specifying the expected types in your <code>have</code> statements makes proofs much easier to read. It also helps if you have to fix the code later on e.g. if you change other parts of the code or if mathlib changes.</p>",
        "id": 188896276,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582514391
    },
    {
        "content": "<p>or if, for instance, you post a code snippet lacking the context to interpret a line like <code>have dh := LCex a p p_pos,</code>. I reverse engineered the statement from your later post about the goal</p>",
        "id": 188896334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582514506
    },
    {
        "content": "<p>How can I prove this goal?  (norm_cast doesn't work or at least not so easily, because x_ex and y_ex are integers which have great chances of being negative)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">hq1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">x_ex</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y_ex</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x_ex</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">y_ex</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">r</span>\n</pre></div>",
        "id": 188896957,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582515647
    },
    {
        "content": "<p>context!</p>",
        "id": 188896967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582515718
    },
    {
        "content": "<p>I think I gave all the statements needed?</p>",
        "id": 188897010,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582515779
    },
    {
        "content": "<p>ask your question as a MWE</p>",
        "id": 188897016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582515795
    },
    {
        "content": "<p>MWE?</p>",
        "id": 188897017,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582515801
    },
    {
        "content": "<p>a minimum working example, i.e. a self contained file with the beginning of a proof</p>",
        "id": 188897026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582515823
    },
    {
        "content": "<p>notice that my code post above starts with <code>import</code> and stuff</p>",
        "id": 188897069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582515848
    }
]