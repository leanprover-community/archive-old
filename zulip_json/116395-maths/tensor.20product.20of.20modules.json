[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> I think that mathlib knows that R-modules are a monoidal category.</p>\n<ul>\n<li>Does it know the Tensor-Hom adjunction?</li>\n<li>I've shown that every module  <code>M</code> is the union of its fin.gen. submodules. Can we now deduce (easily) that <code>M \\otimes N</code> is the colimit of <code>P \\otimes N</code>, where <code>P</code> ranges over the fin.gen submodules of <code>M</code>?</li>\n</ul>",
        "id": 212700170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602168267
    },
    {
        "content": "<p>Application: branch <code>flat-module</code></p>",
        "id": 212700848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602168554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> would one of you have time to help me a bit with this?</p>",
        "id": 213154489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602596150
    },
    {
        "content": "<p>How far are we from having an internal hom for the category of modules? I guess this needs (self)-enriched categories, if we want to do it properly...</p>",
        "id": 213385611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602744771
    },
    {
        "content": "<p>isn't <code>M \\rl[R] N</code> already a module?</p>",
        "id": 213385705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602744874
    },
    {
        "content": "<p>Yes, but it's not a functor</p>",
        "id": 213385711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602744889
    },
    {
        "content": "<p><code>Module.of R (M \\rl[R] N)</code> is pretty usable locally, but doesn't really scale</p>",
        "id": 213385736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602744937
    },
    {
        "content": "<p>I can define the functor easily:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">Module.of</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">linear_map.llcomp</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 213385753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602744961
    },
    {
        "content": "<p>But if we want to do it <em>the right way</em> it probably needs to be generalised to a setting that I'm not that familiar with.</p>",
        "id": 213385817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602744999
    },
    {
        "content": "<p>I'm sure I'm missing something but how does what you want differ from the cartesian closed (or monoidal closed) structure? Or is your question, how hard is it currently to define this structure</p>",
        "id": 213565640,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602857828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Does mathlib already have internal homs? I wasn't aware of this... but I sort of lost track of some of the stuff that happened.</p>",
        "id": 213575466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602862107
    },
    {
        "content": "<p>mathlib has monoidal closed and cartesian closed categories</p>",
        "id": 213575748,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602862232
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/closed/monoidal.html\">https://leanprover-community.github.io/mathlib_docs/category_theory/closed/monoidal.html</a></p>",
        "id": 213575973,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602862346
    },
    {
        "content": "<p>I could be wrong about if this is what you're looking for though</p>",
        "id": 213576050,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602862388
    },
    {
        "content": "<p>Yup, that looks good. Of course it would still be nice to have an internal hom that is defeq to <code>linear_map R M N</code>. But I don't need it for the application at hand.</p>",
        "id": 213576156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602862442
    },
    {
        "content": "<p>Merci!</p>",
        "id": 213576202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602862447
    },
    {
        "content": "<p>I didn't know we had this</p>",
        "id": 213576219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602862454
    }
]