[
    {
        "content": "<p>I noticed that there is a lot of groupoid laws the proofs of which are repeated for each notion of equaity/iso which is introduced. Why are they not derived in a commond <code>groupoid</code> class? I'm thinking of <code>eq</code>, <code>equiv</code>, <code>add_equiv</code>, <code>mul_equiv</code>, ...</p>",
        "id": 245005239,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1625557496
    },
    {
        "content": "<p>My memory at trying to do this thing is that:</p>\n<ul>\n<li>It's difficult to state lawfulness of coercion because Lean 3's <code>has_coe_to_fun</code> doesn't take the codomain as an argument</li>\n<li>It's hard to avoid wanting (and then being unable) to quantify over universes when stating composition</li>\n</ul>",
        "id": 245006089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625558137
    },
    {
        "content": "<p>Ah, the second point is a really good one, thanks.</p>",
        "id": 245006866,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1625558726
    },
    {
        "content": "<p>I don't really get the first one, since most of the groupoid laws (cancellation, <code>trans_refl</code>, ...) don't use the <code>has_coe_to_fun</code> at all...</p>",
        "id": 245006948,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1625558769
    },
    {
        "content": "<p>Sure, but you probably want to also have your typeclass prove things like <code>f.comp g x = f (g x)</code></p>",
        "id": 245007237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625558960
    },
    {
        "content": "<p>Although that doesn't have to be the same typeclass I guess</p>",
        "id": 245007345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625559033
    }
]