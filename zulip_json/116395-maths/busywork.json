[
    {
        "content": "<p>I am not 100% sure I know what this word means, but I think it's interesting that three Imperial mathematician <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> and <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> all cut their teeth in the PR process with work doing stuff like bundling subobjects or morphisms (\"we've done subrings but now we want subsemirings\" or whatever). Why do we have a folder called <code>deprecated</code> in mathlib? Might removing this folder become quite a good summer project for mathematicians beginners? The mathematical material there is all very familiar to them. What needs to be done? I know I've asked this before, but I have a bunch of people looking for summer projects right now and need training material.</p>",
        "id": 244406974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625051322
    },
    {
        "content": "<p><code>deprecated/</code> shouldn't be removed. Instead, we need <code>is_group_hom</code> (and friends) to move from <code>class</code> to <code>structure</code>, and all the instances should become lemmas, etc...</p>",
        "id": 244407155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625051448
    },
    {
        "content": "<p>After that, they should just become part of regular mathlib, instead of living a poor and uncomfy life in <code>deprecated/</code></p>",
        "id": 244407183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625051476
    },
    {
        "content": "<p>In <code>subring.lean</code> (non-deprecated) it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Let</span> <span class=\"bp\">`</span><span class=\"n\">R</span><span class=\"bp\">`</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">ring.</span> <span class=\"n\">This</span> <span class=\"n\">file</span> <span class=\"n\">defines</span> <span class=\"n\">the</span> <span class=\"s2\">\"bundled\"</span> <span class=\"n\">subring</span> <span class=\"n\">type</span> <span class=\"bp\">`</span><span class=\"n\">subring</span> <span class=\"n\">R</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">type</span>\n<span class=\"n\">whose</span> <span class=\"n\">terms</span> <span class=\"n\">correspond</span> <span class=\"n\">to</span> <span class=\"n\">subrings</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">R</span><span class=\"bp\">`.</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">preferred</span> <span class=\"n\">way</span> <span class=\"n\">to</span> <span class=\"n\">talk</span>\n<span class=\"n\">about</span> <span class=\"n\">subrings</span> <span class=\"k\">in</span> <span class=\"n\">mathlib.</span> <span class=\"n\">Unbundled</span> <span class=\"n\">subrings</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">is_subring</span> <span class=\"n\">s</span><span class=\"bp\">`</span><span class=\"o\">)</span>\n<span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">this</span> <span class=\"n\">file</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">they</span> <span class=\"n\">will</span> <span class=\"n\">ultimately</span> <span class=\"n\">be</span> <span class=\"n\">deprecated.</span>\n</code></pre></div>\n<p>So This means \"unbundled subrings will still exist, they're just not in <code>simp</code> normal form\"?</p>",
        "id": 244407417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625051623
    },
    {
        "content": "<p>Yep, that's my understanding of what is the best design (as far as we can see now)</p>",
        "id": 244408841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625052521
    },
    {
        "content": "<p>My impression is that after doing what Johan describes, there may be benefits to redefining <code>abbreviation subring:= subtype is_subring</code>, since that gives us the ability to generalize statements like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.coe_add\">docs#subring.coe_add</a>.</p>",
        "id": 244409897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625053303
    },
    {
        "content": "<p>So that would be a massive <code>subring</code> refactor?</p>",
        "id": 244410226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625053547
    },
    {
        "content": "<p>I had not internalised this before</p>",
        "id": 244410295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625053586
    },
    {
        "content": "<p>You think the fundamental object from the point of view of CS is <code>is_subring</code>, and <code>subring</code> should be built on top?</p>",
        "id": 244410350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625053628
    },
    {
        "content": "<p>I think <code>subtype</code> gives us much more generalization power than building a new structure each time</p>",
        "id": 244410375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625053661
    },
    {
        "content": "<p>The idea behind <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like\">docs#set_like</a> is to say \"look, this is basically just a subtype of a set\". The alternative would be to make our subobjects defeq to subtypes of sets.</p>",
        "id": 244410537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625053768
    },
    {
        "content": "<p>I don't know to what extent that would pay off yet</p>",
        "id": 244410561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625053788
    },
    {
        "content": "<p>Does dot notation work with <code>abbreviation</code>s? <code>S.to_add_subgroup_mono</code> for <code>S : subring R</code>?</p>",
        "id": 244410669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625053851
    },
    {
        "content": "<p>It does, <code>abbreviation</code> is basically the same as <code>@[reducible] def</code> so it sticks around in expressions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">nat_abbr</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_abbr.zero</span> <span class=\"o\">:</span> <span class=\"n\">nat_abbr</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat_abbr.foo</span> <span class=\"o\">:</span> <span class=\"n\">nat_abbr</span> <span class=\"bp\">→</span> <span class=\"n\">nat_abbr</span> <span class=\"bp\">→</span> <span class=\"n\">nat_abbr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat_abbr.zero.foo</span> <span class=\"n\">nat_abbr.zero</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abbr.zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 244417430,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625057324
    },
    {
        "content": "<p>This is different from <code>notation</code>, which is only a parsing thing and doesn't appear in expressions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">nat_notation</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_notation.zero</span> <span class=\"o\">:</span> <span class=\"n\">nat_notation</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat_notation.foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat_notation.zero.foo</span> <span class=\"n\">nat_notation.zero</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abbr.zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- error, `nat.foo` undefined</span>\n</code></pre></div>",
        "id": 244417693,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625057446
    },
    {
        "content": "<p>Do abbreviations also mean that you're now stuck with _every_ <code>nat</code> appearing as <code>nat_abbr</code> in the prettyprinter until you've finished with the abbreviation?</p>",
        "id": 244418311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625057695
    },
    {
        "content": "<p>No, it really creates something new. So <code>ideal R</code> could have been defined as an <code>abbreviation</code> for <code>submodule R R</code> instead of <code>@[reducible] def</code> as it is now. There is still the distinction between <code>ideal R</code> and <code>submodule R R</code>.</p>",
        "id": 244418886,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625057971
    },
    {
        "content": "<p>So why aren't we using <code>vector_space</code> as an abbreviation for <code>module</code>? Then I could still use vector space in teaching materials and...oh, I then have to move over all of <code>module.foo</code> into <code>vector_space.foo</code> :-/</p>",
        "id": 244422344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625059323
    },
    {
        "content": "<p>Damn, I'm always half confused when I need to talk about the difference between abbreviation and notation. That's why I hesitated to write anything at all in this discussion.</p>",
        "id": 244423092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625059640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/busywork/near/244422344\">said</a>:</p>\n<blockquote>\n<p>So why aren't we using <code>vector_space</code> as an abbreviation for <code>module</code>? Then I could still use vector space in teaching materials and...oh, I then have to move over all of <code>module.foo</code> into <code>vector_space.foo</code> :-/</p>\n</blockquote>\n<p>That was exactly the old situation before <a href=\"https://github.com/leanprover-community/mathlib/issues/7322\">#7322</a>: <code>vector_space K V</code> is an <code>abbreviation</code> for <code>semimodule K V</code> with extra assumptions <code>[field K] [add_comm_group V]</code>.</p>",
        "id": 244423861,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625059994
    },
    {
        "content": "<p>I can't find where it was discussed, but there was also the possibility of defining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">vector_space</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>which should have a lot less drawbacks, although it's mathematically slightly lying.</p>",
        "id": 244424576,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625060326
    },
    {
        "content": "<p>So maybe <code>notation</code> would be perfect for <code>vector_space</code>, let it apply in all situations, the point being that what we are trying to do with <code>vector_space</code> is <em>shield</em> a beginner UG from the word <code>module</code> completely because it sounds intimidating.</p>",
        "id": 244424674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625060384
    },
    {
        "content": "<p>The moment they start using modules and vector spaces you just disable the notation because they're not scared of modules any more. Isn't this a perfect thing to do in localised notation? It seems to me that it might solve all the issues I had with the disappearance of <code>vector_space</code>.</p>",
        "id": 244424855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625060445
    },
    {
        "content": "<p>I think that would be perfect, i.e. <code>localized \"notation `vector_space` := module\" in vector_space</code></p>",
        "id": 244425068,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625060528
    },
    {
        "content": "<p>I try and explain all my code, but perhaps heuristically, when I'm teaching. I tend to minimise imports and say \"we need this one for subgroups\" or whatever. But when it comes to <code>open X</code> I just say \"we'll be using results about Xs\" and I can dismiss <code>open_locale X</code> in just the same way.</p>",
        "id": 244425450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625060706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/busywork/near/244423092\">said</a>:</p>\n<blockquote>\n<p>Damn, I'm always half confused when I need to talk about the difference between abbreviation and notation. That's why I hesitated to write anything at all in this discussion.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> But is all this somewhere documented?</p>",
        "id": 244432777,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625063729
    },
    {
        "content": "<p>Just wondering, what were the original motivations for switching to bundled subgroups/subrings/... ?</p>",
        "id": 244609086,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1625164660
    },
    {
        "content": "<p>I'm not sure either - perhaps it was to make <code>map</code> and <code>comap</code> easier in some way?</p>",
        "id": 244611136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625165633
    },
    {
        "content": "<p>That is, maybe <code>is_subring (f '' s)</code> couldn't be found by typeclass search</p>",
        "id": 244611226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625165665
    },
    {
        "content": "<p>My memory was that people were complaining that type class inference was not doing all the things which people wanted it to do, and the problem was diagnosed and my understanding was that the conclusion was that it was hard to fix in Lean 3, so we switched to a bundled approach which seems to have worked fine.</p>",
        "id": 244666496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625209771
    },
    {
        "content": "<p>From the mathlib paper:</p>\n<blockquote>\n<ul>\n<li>It is important for compositions of homs to be a hom, but problems of the form is_hom (f ◦ g) can be difficult for type class inference. With bundled homs, one instead defines a custom composition operator Hom(A, B) × Hom(B, C) → Hom(A, C) that is used explicitly, obviating the need to search for is_hom (f ◦ g).</li>\n<li>The type Hom(A, B) itself often has interesting structure. For example, the type M →l [R] N of R-linear maps from M to N is an R-module where the zero element is the constant zero map, and addition and scalar multiplication work pointwise (Section 5.1). Bundling the type makes it easier to reason about this structure.</li>\n</ul>\n</blockquote>",
        "id": 244677015,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625217010
    },
    {
        "content": "<p>(In particular, if we have an instance <code>is_hom (f ◦ g)</code> and <code>is_hom id</code>, you have to be very careful with reducibility etc that searching for <code>is_hom f</code> doesn't go through <code>is_hom (id ◦ f), is_hom (id ◦ id ◦ f), is_hom (id ◦ id ◦ id ◦ f), ...</code>)</p>",
        "id": 244677157,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625217124
    },
    {
        "content": "<p>That's the one I had internalized too - but was there a similar argument for not using <code>is_submonoid</code> as a typeclass?</p>",
        "id": 244677198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625217154
    },
    {
        "content": "<p>Presumably the same for <code>is_submonoid s, is_submonoid (id '' s), is_submonoid (id '' id '' s), ...</code>?</p>",
        "id": 244677234,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625217187
    },
    {
        "content": "<p>We also have a bunch of results about the lattice structure on <code>is_sub_X</code></p>",
        "id": 244677269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625217216
    },
    {
        "content": "<p>And <code>X.quotient</code> for <code>X = ideal/subgroup/submodule</code> etc...</p>",
        "id": 244677283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625217238
    },
    {
        "content": "<p>I don't think dot notation working is a particularly convincing argument</p>",
        "id": 244677349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625217269
    },
    {
        "content": "<p>Of course the latter is just a convenience, but not a crucial feature.</p>",
        "id": 244677357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625217274
    },
    {
        "content": "<p>Since if we found a new design, we would probably be motivated to adjust lean core to make notation nice like last time when we expanded dot notation</p>",
        "id": 244677382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625217298
    },
    {
        "content": "<p>My informal/unscientific intuition is that typeclasses are much easier to work with when there is a \"trivial theory of equalities\" on the arguments. Basically, you never have to use the fact that <code>zmod 0 = ℤ</code> in the way you would use the fact that <code>smul_alg_hom 1 = id</code>. As soon as you need a nontrivial equality, you need to make things reducible to infer well, and then you have a global condition on \"everything that reduces in typeclass search\" + \"every instance declared\" for termination of typeclass search.</p>",
        "id": 244678052,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625217735
    },
    {
        "content": "<p>I agree. Type classes work well when the proof of <code>P x</code> is usually/always determined by a kind of structural recursion on the syntactic form of <code>x</code>. But if <code>x</code> is a something like a real number or a <code>set int</code> or a function then a very common way to prove <code>P x</code> is to prove that <code>x = y</code> and <code>P y</code>, and if <code>P</code> is a type class then this becomes much more awkward.<br>\nThis doesn't arise for types because we don't have any general way to reason about isomorphism-invariance (such as univalence)--so the strategy \"<code>x</code> is isomorphic to <code>y</code> and <code>P y</code>\" isn't very convenient, and most proofs end up being of the structural form.</p>",
        "id": 244688733,
        "sender_full_name": "Reid Barton",
        "timestamp": 1625224887
    }
]