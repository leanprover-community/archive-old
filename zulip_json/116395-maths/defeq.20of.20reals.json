[
    {
        "content": "<p>No cheating and firing up Lean, now! </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>Which of these proofs do you think works? (a) <code>2 + 0 = 2</code>, (b) <code>0 + 2 = 2</code> and (c) <code>2 + 2 = 4</code>. I'm not asserting that precisely one works. I will tell you that at least one works though.</p>",
        "id": 202787621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593770989
    },
    {
        "content": "<p>all three should work?</p>",
        "id": 202787711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593771045
    },
    {
        "content": "<p>Whether or not they work is an implementation issue. They do not all work.</p>",
        "id": 202787738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593771065
    },
    {
        "content": "<p>The final one</p>",
        "id": 202787755,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593771086
    },
    {
        "content": "<p>0 is broken for some reason. Positive integers are <code>rfl</code>ing fine.</p>",
        "id": 202787785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593771111
    },
    {
        "content": "<p>Because <code>4</code> is <code>bit0 2</code></p>",
        "id": 202787841,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593771126
    },
    {
        "content": "<p>the final one obviously works, but I'm wondering whether 2+0 would correspond to the Cauchy sequence <code>fun n, (2+0 : \\Q)</code> and would therefore be defeq to <code>fun n, (2 : \\Q)</code></p>",
        "id": 202787849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593771132
    },
    {
        "content": "<p>And the reals are irreducible now so the other two don't work.</p>",
        "id": 202787866,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593771147
    },
    {
        "content": "<p>but <code>rfl</code> still works with irreducible right</p>",
        "id": 202787900,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593771170
    },
    {
        "content": "<p><code>4 + 1 = 5</code> works and <code>1 + 4 = 5</code> doesn't.</p>",
        "id": 202787905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593771178
    },
    {
        "content": "<p>There's some funny way of getting <code>rfl</code> to work with irreducible via <code>tactic.add_decl</code> or something like that.</p>",
        "id": 202788022,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593771244
    },
    {
        "content": "<p><code>0 + 0 = 0</code> isn't <code>rfl</code> (for <code>real</code> obviously: works fine for <code>rat</code>)</p>",
        "id": 202788026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593771245
    },
    {
        "content": "<p>Chris is exactly right. The only reason <code>rfl</code> will work for you on real numerals is when the numerals unfold to the same sum of 0 and 1. You can change some reducibility settings to make more work.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_aux</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 202788243,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593771425
    }
]