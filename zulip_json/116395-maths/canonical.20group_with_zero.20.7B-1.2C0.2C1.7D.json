[
    {
        "content": "<ul>\n<li>Do we have a canonical multiplicative group with zero of cardinality three? (Candidates: <code>zmod 3</code>)</li>\n<li>Related: Do we have a canonical multiplicative group of cardinality two? (Candidates: <code>units ℤ</code>, <code>units (zmod 3)</code>)</li>\n</ul>\n<p>I'm not so happy with <code>zmod 3</code>. Intuitively it's too ringy. A group_with_zero_hom <code>zmod 3 →* ℤ</code> (or any ring for that matter) just feels morally wrong.</p>",
        "id": 260451109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636139290
    },
    {
        "content": "<p>Should I ignore this feeling, and use <code>zmod 3</code> nonetheless? Or is there a better candidate? Or do we want/need a new type?</p>",
        "id": 260451158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636139320
    },
    {
        "content": "<p>Do we have a canonical cyclic group of any order? Maria has been using <code>multiplicative int</code> for the infinite cyclic group.</p>",
        "id": 260451177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636139335
    },
    {
        "content": "<p>So <code>with_zero (multiplicative (zmod 2))</code> is my suggestion for your first question.</p>",
        "id": 260451398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636139437
    },
    {
        "content": "<p>OTOH since addition was defined on <code>fin 2</code> to match <code>zmod 2</code> (despite my protestations ;-) ) you could also use that...</p>",
        "id": 260451514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636139513
    },
    {
        "content": "<p>I think it would be nice to have the notations <code>-1</code>, <code>0</code>, <code>1</code> for the three elements. Your <code>with_zero (multiplicate _)</code> will not have that out of the box, right?<br>\nAlso, it's a pretty long name for a simple thing...</p>",
        "id": 260452028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636139802
    },
    {
        "content": "<p>That notation should work for <code>with_zero (units Z)</code>, right?</p>",
        "id": 260452078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636139837
    },
    {
        "content": "<p>I mean, there are a ton of ways to do it</p>",
        "id": 260452100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636139850
    },
    {
        "content": "<p>Does it make sense to have a <code>units_or_zero</code> type?</p>",
        "id": 260452183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636139884
    },
    {
        "content": "<p>I see -- somehow the issue is not that Johan wants \"cyclic groups with zero\" at this point (although Maria did for valuation theory) -- he just wants {-1,0,1}. I hadn't read the title of the thread because it was cut off in the app :-)</p>",
        "id": 260452309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636139954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/canonical.20group_with_zero.20.7B-1.2C0.2C1.7D/near/260452078\">said</a>:</p>\n<blockquote>\n<p>That notation should work for <code>with_zero (units Z)</code>, right?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>  <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>  <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>  <span class=\"c1\">-- fail :(</span>\n</code></pre></div>",
        "id": 260452420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636140005
    },
    {
        "content": "<p>Your coercions are too eager</p>",
        "id": 260452585,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636140100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/canonical.20group_with_zero.20.7B-1.2C0.2C1.7D/near/260452100\">said</a>:</p>\n<blockquote>\n<p>I mean, there are a ton of ways to do it</p>\n</blockquote>\n<p>Exactly. Hence my question.</p>",
        "id": 260452605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636140113
    },
    {
        "content": "<p>Now I understand that you want the notation, I think zmod 3 is a clever choice ;-)</p>",
        "id": 260452692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636140150
    },
    {
        "content": "<p>You'll need ((-1 : units int) : with_zero blah), and hope that neg works properly for units int.</p>",
        "id": 260452719,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636140169
    },
    {
        "content": "<p>We're missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">with_zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">option.map</span> <span class=\"n\">has_neg.neg</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260452744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636140179
    },
    {
        "content": "<p>If we add that the example above works</p>",
        "id": 260452762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636140186
    },
    {
        "content": "<p>I think that's better than the zmod 3 hack</p>",
        "id": 260452786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636140205
    },
    {
        "content": "<p>Should we define <code>galois_field 1 n</code>? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> (sorry)</p>",
        "id": 260452889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636140251
    },
    {
        "content": "<p>IIRC doing the semireducible trick could make things annoying later on. We hit that with with_top before.</p>",
        "id": 260452919,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636140270
    },
    {
        "content": "<p>Rather, a with_zero.rec definition would be kinder to api users</p>",
        "id": 260452982,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636140314
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10194\">#10194</a></p>",
        "id": 260453135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636140394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/116395-maths/topic/canonical.20group_with_zero.20.7B-1.2C0.2C1.7D/near/260452919\">said</a>:</p>\n<blockquote>\n<p>IIRC doing the semireducible trick could make things annoying later on. We hit that with with_top before.</p>\n</blockquote>\n<p>I'm just copying what is already done for the <code>has_mul</code> instance</p>",
        "id": 260453390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636140528
    },
    {
        "content": "<p><code>-1</code> works for <code>zmod 3</code> too</p>",
        "id": 260453489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636140582
    },
    {
        "content": "<p>yeah but it's a hack</p>",
        "id": 260454222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636140944
    },
    {
        "content": "<p>One thing worth considering:<br>\nDo you ever want to define a map using pattern matching like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>    <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>    <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Depending on the choice this may not work. <br>\nBut maybe this is not important, because you might only care about <code>monoid_with_zero_hom</code> out of this type?</p>",
        "id": 260473230,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636152044
    },
    {
        "content": "<p>Does that actually work right now, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>?</p>",
        "id": 260480378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636158575
    },
    {
        "content": "<p>oh surely not (edit: no)</p>",
        "id": 260480618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636158849
    },
    {
        "content": "<p>Right. With <code>zmod 3</code> you can do something very close to that, I guess.</p>",
        "id": 260495444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636179142
    },
    {
        "content": "<p>Anyway, with any type, we can get reasonably close to that by writing a custom recursor.</p>",
        "id": 260495450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636179170
    },
    {
        "content": "<p>I just meant that there are ways to make it work, but if you do that you cannot reuse stuff from the library, so it's probably not worth it.</p>",
        "id": 260503773,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636192127
    }
]