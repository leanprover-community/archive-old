[
    {
        "content": "<p>I don't know what's going on, but I feel like I prefer unbundled objects, whereas we seem to be moving towards bundled \"morphisms\"...</p>",
        "id": 200765042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052943
    },
    {
        "content": "<p>Does anyone have some sort of explanation for this?</p>",
        "id": 200765048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052956
    },
    {
        "content": "<p>The instance for composition of unbundled homs doesn't work.</p>",
        "id": 200765920,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592054148
    },
    {
        "content": "<p>You haven't fully embraced the wonder of bundled objects.</p>",
        "id": 200766459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592054712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> If the errors in the DVR thread are examples of the \"wonder of bundled objects\", then...</p>",
        "id": 200766531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592054784
    },
    {
        "content": "<p>There are no bundled objects there though...?</p>",
        "id": 200766539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592054808
    },
    {
        "content": "<p>I guess there are multiple levels of bundling</p>",
        "id": 200766546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592054826
    },
    {
        "content": "<p>I agree that they are less bundled than <code>R : Ring</code></p>",
        "id": 200766551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592054839
    },
    {
        "content": "<p>I mean bundling a type with its operations</p>",
        "id": 200766559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592054847
    },
    {
        "content": "<p>Maybe I'm using the wrong term</p>",
        "id": 200766561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592054850
    },
    {
        "content": "<p><code>R : Ring</code> is kind of great. It's succinct and easy to work with, and you don't seem to give much up: there's still a coercion to Type, and a typeclass on that coercion, so you can still write <code>x  y : R</code>, and <code>x + x * y</code>.</p>",
        "id": 200766923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> But what do you do if you want a PID?</p>",
        "id": 200766941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055333
    },
    {
        "content": "<p>Or a field, or a DVR?</p>",
        "id": 200766946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055345
    },
    {
        "content": "<p>You mean the opposite --- if you have a <code>R : PID</code>, and you just want a <code>Ring</code>?</p>",
        "id": 200766997,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055376
    },
    {
        "content": "<p>Maybe I want a PID that is an algebra over a field.</p>",
        "id": 200766998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055377
    },
    {
        "content": "<p>How would you wish to write a <code>variables</code> line that says: let <code>R</code> be a PID that is an algebra over the field <code>K</code>?</p>",
        "id": 200767021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055411
    },
    {
        "content": "<p>Probably something like <code>R : Alg K</code> <code>h : is_PID R</code></p>",
        "id": 200767033,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592055440
    },
    {
        "content": "<p>What kind of parens around the thing on the right?</p>",
        "id": 200767040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055460
    },
    {
        "content": "<p>After which you can probably write <code>PID.of R</code> to obtain a bundled <code>PID</code>?</p>",
        "id": 200767086,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055499
    },
    {
        "content": "<p>You would never get rid of the unbundled typeclasses. They are still there to mediate notation, and all the bundled types are just a pair consisting of a carrier type and a typeclass (perhaps several).</p>",
        "id": 200767116,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055564
    },
    {
        "content": "<p>I don't like <code>PID.of R</code>. It's ok if we need it occasionally. But if we go full bundled objects... I guess this sort of repackaging will be all over the place.</p>",
        "id": 200767118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055570
    },
    {
        "content": "<p>So you can still do mixins when you want to talk about several interacting structures, and use <code>X.of</code> to recover the different bundled objects as needed.</p>",
        "id": 200767163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055606
    },
    {
        "content": "<p>You could get rid of unbundled typeclasses, and just keep only the notation classes, right?</p>",
        "id": 200767169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055611
    },
    {
        "content": "<p>Well -- I think Reid's answer above says no.</p>",
        "id": 200767180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/bundling/near/200767040\">said</a>:</p>\n<blockquote>\n<p>What kind of parens around the thing on the right?</p>\n</blockquote>\n<p><code>()</code></p>",
        "id": 200767190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592055657
    },
    {
        "content": "<p>Reid doesn't like typeclasses. :-)</p>",
        "id": 200767204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055681
    },
    {
        "content": "<p>I had been thinking <code>[]</code>, without which <code>PID.of R</code> wouldn't work.</p>",
        "id": 200767256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055733
    },
    {
        "content": "<p>I wish we could write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>and that it would be syntactic sugar for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_principal_ideal_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 200767260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055740
    },
    {
        "content": "<p>Being a PID is a theorem, and the one thing Lean is really good at is proving theorems</p>",
        "id": 200767280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592055793
    },
    {
        "content": "<p>It's a good point. There's \"nothing\" to bundle.</p>",
        "id": 200767287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055832
    },
    {
        "content": "<p>And if you do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>it should really add instances of <code>ring R</code> (unless it exists already??) and <code>is_principal_ideal_domain R</code>...</p>",
        "id": 200767288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055835
    },
    {
        "content": "<p>But maybe the latter idea isn't even needed...</p>",
        "id": 200767339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055892
    },
    {
        "content": "<p>Just the syntactic sugar for introducing hypotheses would already help a lot to improve readability while keeping a flexible system.</p>",
        "id": 200767349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592055916
    },
    {
        "content": "<p>Oh, you just reminded me of a bug in my <code>R-Alg</code> PR. I made separate <code>semimodule</code> and <code>algebra</code> instances, which then result in non-defeq <code>semimodule</code>s via <code>algebra.to_semimodule</code>... Oops. I've done this several times already. :-(</p>",
        "id": 200767355,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592055928
    },
    {
        "content": "<p>Oh, scratch that, of course the <code>semimodule</code> instance was there all along. Hrm. Oh well, a problem for tomorrow.</p>",
        "id": 200767429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592056064
    }
]