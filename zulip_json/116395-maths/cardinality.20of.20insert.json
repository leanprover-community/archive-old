[
    {
        "content": "<p>Hi all, I'm fruitlessly trying to prove <code>cardinal.mk ↥{x, y} ≤ ↑2</code>, where <code>{x, y} : set V</code>. Is there a lemma on the cardinality of inserts that I'm just missing?</p>",
        "id": 243319449,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624220035
    },
    {
        "content": "<p>It's probably easier to show <code>finset.card {x, y} ≤ 2</code>, but it would be nice to know how to show your version too</p>",
        "id": 243320802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624222170
    },
    {
        "content": "<p>Maybe the easiest way is to show that first and then lift the inequality to <code>cardinal</code></p>",
        "id": 243320877,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624222248
    },
    {
        "content": "<p>(the latter part seems to be the more difficult half)</p>",
        "id": 243321562,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624223096
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.card_insert\">docs#set.card_insert</a></p>",
        "id": 243322535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624224595
    },
    {
        "content": "<p>Oh, that has some fintype assumptions</p>",
        "id": 243322592,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624224640
    },
    {
        "content": "<p>There should be some lemma saying that if <code>f : X \\to Y</code> is surjective, then the cardinality of Y is at most that of <code>X</code>. You can then use that and produce a surjection from <code>fin 2</code> (maybe after a ulift?), for example</p>",
        "id": 243322829,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624224923
    },
    {
        "content": "<p>ahh, lean: <a href=\"/user_uploads/3121/VaaL2Aw9ntv8-FxmZNgqaiBl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VaaL2Aw9ntv8-FxmZNgqaiBl/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/VaaL2Aw9ntv8-FxmZNgqaiBl/image.png\"></a></div>",
        "id": 243323777,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624226374
    },
    {
        "content": "<p>(this is in cardinals, and the best solution that <code>library_search</code> suggests is <code>norm_num.one_succ</code>)</p>",
        "id": 243323843,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624226428
    },
    {
        "content": "<p>What's the type of <code>2</code> and each of the <code>1</code> there?</p>",
        "id": 243323939,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624226571
    },
    {
        "content": "<p>(I am still sore from the pain of equivocating between the real <code>2</code> and the nat <code>2</code> a lot recently)</p>",
        "id": 243323950,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624226601
    },
    {
        "content": "<p>E.g. try <code>have p : (2 : nat) = (1 : nat) + (1 : nat) := by norm_num</code> and then <code>convert p</code>, you might get error messages telling you what's wrong</p>",
        "id": 243324083,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624226804
    },
    {
        "content": "<p>they're cardinals haha, but it ends up being okay ^^</p>",
        "id": 243324165,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624226937
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">set.fintype_insert''</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_finset</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s.to_finset</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.mk</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinal.fintype_card</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">eq_or_ne</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.card_insert</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this can definitely be improved</p>",
        "id": 243325121,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624228546
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cardinal.mk_insert</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">cardinal.mk</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">set.union_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">cardinal.mk_union_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.mk</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">cardinal.mk_insert</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243325880,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624229771
    },
    {
        "content": "<p>(the simp is just <code>rw cardinal.mk_singleton _</code>, fwiw)</p>",
        "id": 243326006,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624230016
    },
    {
        "content": "<p>And what about what we have in <code>data.fintype.card_embedding</code>? Sounds like it would be worth adding the contrapositive of <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fintype/card_embedding.html#fintype.card_embedding_eq_zero\"><code>fintype.card_embedding_eq_zero</code></a>.</p>",
        "id": 243345329,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624258632
    },
    {
        "content": "<p>That's quite short in the end, thanks for the input, everyone!</p>",
        "id": 243346667,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624259814
    },
    {
        "content": "<p>I made it work with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←@</span><span class=\"n\">cardinal.finset_card</span> <span class=\"n\">V</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}],</span>\n                      <span class=\"n\">apply</span> <span class=\"n\">cardinal.nat_cast_le.mpr</span><span class=\"o\">,</span>\n                      <span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">card_insert_le</span> <span class=\"n\">x</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">},</span>\n                      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.card_singleton</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 243347837,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624260790
    },
    {
        "content": "<p>If anyone is up to some <span aria-label=\"golf\" class=\"emoji emoji-1f3cc\" role=\"img\" title=\"golf\">:golf:</span>, I couldnt find any better way to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">fin.init</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>than to go down all the way to <code>set</code> extensionality and manually going through the cases on both sides...</p>",
        "id": 243491989,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624354559
    },
    {
        "content": "<p>I can't avoid <code>ext</code> either. This is my attempt so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">fin.init</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.init_def</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243492936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624355140
    },
    {
        "content": "<p>Ah, <code>rintro</code> and especially <code>fin_cases</code> are tactics that I haven't found so far :)</p>",
        "id": 243497860,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624358485
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n<span class=\"n\">hli</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"n\">vs</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">vs</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">vs</span> <span class=\"n\">i'</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>That's still missing in my proof that the projective space actually forms a projective geometry. Switching between entire families and <code>fin</code>-matrices is still quite awkward...</p>",
        "id": 243674511,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624464407
    },
    {
        "content": "<p>Nvm, I think I foud a nice way to circumvent this :)</p>",
        "id": 243676505,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1624465395
    }
]