[
    {
        "content": "<p>First, to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> my problem: now that we know that <a href=\"https://github.com/leanprover-community/mathlib/pull/4046\">filtered colimits commute with finite limits in <code>Type</code></a>, I would like to conclude as cheaply as possible things like <code>X ↦ X × X</code> and <code>X ↦ X × X × X</code> preserved filtered colimits.</p>",
        "id": 209166964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599292715
    },
    {
        "content": "<p>I was hoping that I could prove that <code>PreservesFilteredColimits</code>, the category of functors <code>C ⥤ D</code> bundled with a witness that the functor preserves filtered colimits, itself <code>has_finite_limits</code>.</p>",
        "id": 209166978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599292802
    },
    {
        "content": "<p>(Assuming <code>D</code> has finite limits.)</p>",
        "id": 209167020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599292813
    },
    {
        "content": "<p>Then I'd plan to specialize to <code>C = D = Type u</code>, and notice that <code>X ↦ X × X</code> is the product of the identity functor with itself, and so preserves filtered colimits, etc.</p>",
        "id": 209167028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599292866
    },
    {
        "content": "<p>The problem I've run into is just that <code>has_limits D</code> is not enough to conclude <code>has_limits (C ⥤ D)</code> in our current setup --- or rather, we can do this, but only when <code>C</code> is a small category.</p>",
        "id": 209167042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599292911
    },
    {
        "content": "<p>And hence I wouldn't be able to specialize to <code>C = D = Type u</code>.</p>",
        "id": 209167043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599292921
    },
    {
        "content": "<p>maybe I am just being stupid about universes tonight (always?), but I'm confused about what I'm meant to be doing, so if anyone knows what I'm doing wrong please tell me about it!</p>",
        "id": 209167098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599292979
    },
    {
        "content": "<p>(For what it's worth, I did prove earlier, directly, that products of functors which preserve filtered limits themselves preserve filtered limits, so I'm not stuck. I'd just like to derive this from the general machinery, and not have to do any further arguments about filtered categories.)</p>",
        "id": 209167153,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599293089
    },
    {
        "content": "<p>(I did get bored proving the same thing for equalizers directly, so I would like to conclude this from the <a href=\"https://github.com/leanprover-community/mathlib/issues/4046\">#4046</a>.)</p>",
        "id": 209167168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599293146
    },
    {
        "content": "<p>Hmmm... I don't have a good solution... Refactoring to allow \"big\" limits sounds like it will cause a <em>lot</em> of pain in many other places.</p>",
        "id": 209183240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599319912
    },
    {
        "content": "<p>This is more like allowing \"small\" limits I guess. The category of functors from <code>Type u</code> to <code>Type u</code> only has <code>u</code>-small limits but its hom sets are bigger than that.</p>",
        "id": 209183703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599320517
    },
    {
        "content": "<p>But I think the statement \"the category of filtered colimit-preserving functors C -&gt; D has finite limits\" isn't actually the statement you want, anyways. For one thing, a priori those limits could differ from the ones in the ambient category of all functors C -&gt; D. But also, even if you know they're the same, you still need to then use the extra information that the latter ones can be computed objectwise.</p>",
        "id": 209183838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599320705
    },
    {
        "content": "<p>So I think what you want to say is really that an objectwise finite limit of filtered colimit-preserving functors is filtered colimit-preserving, or maybe even better, that given a cone on a finite diagram of filtered colimit-preserving functors which is objectwise a limit cone, the vertex functor is also colimit-preserving.</p>",
        "id": 209183910,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599320870
    },
    {
        "content": "<p>The statement got a lot longer, but I think it's closer to both what you want to apply and what you want to prove (I could be wrong though).</p>",
        "id": 209183950,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599320890
    },
    {
        "content": "<p>Thanks, that's helpful. (For my original plan, I'd wanted to prove not just <code>has_finite_limits</code> but also a <code>preserves_limits</code> for the forgetful functor, but I agree this would be cumbersome to use.)</p>\n<p>At some point we should work out how to formalise that <code>Type u ⥤ Type u</code> has <code>u</code>-small limits nicely, as it's not so great this is currently hard to state. Perhaps we just say for every <code>J</code> at the appropriate level, it has limits of shape <code>ulift J</code> (for some appropriate definition of <code>ulift</code> which I think doesn't currently exist).</p>",
        "id": 209208589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599366427
    },
    {
        "content": "<p>I'm not sure to what extent this helps, but for what's currently in <code>limits/functor_category</code> (and I imagine for what's in the new version too), you can generalise where the category you called C isn't small, but instead just has its objects living in the same universe as the morphisms of D - this lets you use the stuff that's already there to get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n\n<p>for instance</p>",
        "id": 209736955,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1599793615
    }
]