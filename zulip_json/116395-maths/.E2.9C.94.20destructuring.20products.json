[
    {
        "content": "<p>I do not understand what happens here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2.1</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2.2</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩⟩,</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">--it fails</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">--with implicit Types</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">Z</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2.1</span><span class=\"o\">),</span> <span class=\"n\">g₁</span> <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2.2</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">F₁</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">Z</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩⟩,</span> <span class=\"o\">(</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">g₁</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">F₁</span> <span class=\"bp\">=</span> <span class=\"n\">G₁</span> <span class=\"o\">:=</span>  <span class=\"c1\">--does not typecheck</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The first equality <code>F=G</code> looks <code>refl</code> to me, but it is not. And in the second, the statement does not even typecheck (it cannot infer the types of <code>G₁</code> and <code>F₁</code>).</p>",
        "id": 304834398,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1666124672
    },
    {
        "content": "<p>Are you sure you want to say that <code>F = G</code> where both <code>F</code> and <code>G</code> are functions of types?</p>",
        "id": 304835027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666124950
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 304835121,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1666124989
    },
    {
        "content": "<p>I would expect you to have meant <code>F A X Y f g = G A X Y f g</code></p>",
        "id": 304835128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666124992
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 304835156,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1666125003
    },
    {
        "content": "<p>Right</p>",
        "id": 304835206,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1666125007
    },
    {
        "content": "<p>And for the second one, <code>F f₁ g₁ = G f₁ g₁</code></p>",
        "id": 304835273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666125028
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">_x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">snd</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You just need to do more cases :-)</p>",
        "id": 304835294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666125037
    },
    {
        "content": "<p>Ah ok, I guess that the point is that <code>(x.y).fst = x</code> is not <code>rfl</code>?</p>",
        "id": 304835504,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1666125111
    },
    {
        "content": "<p>That one is <code>rfl</code>, it's the other way that isn't: <code>(xy.1, xy.2)=xy</code> isn't <code>rfl</code> in Lean 3 (but it is in Lean 4)</p>",
        "id": 304835710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666125181
    },
    {
        "content": "<p><code>snd : X × Y</code> so you need to do cases on it.</p>",
        "id": 304835749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666125200
    },
    {
        "content": "<p>Oh, great. I see, thanks.</p>",
        "id": 304835752,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1666125202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as resolved.</p>",
        "id": 304835827,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666125230
    },
    {
        "content": "<p>Fun fact: In Lean4 this is <code>rfl</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2.1</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2.2</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 304949069,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1666184102
    },
    {
        "content": "<p>Is this enough reason to regard <code>λ ⟨a, ⟨x, y⟩⟩ =&gt; (f (a, x), g (a, y))</code> as a good definition now? Or is it still awkward in practice (e.g. because it displays as <code>_match_1</code> or whatever)</p>",
        "id": 304978577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1666192766
    },
    {
        "content": "<p>It displays as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">h.h.h</span>\n<span class=\"n\">A</span><span class=\"bp\">✝</span><span class=\"n\">X</span><span class=\"bp\">✝</span><span class=\"n\">Y</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">✝</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">✝</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">✝</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">✝</span>\n<span class=\"n\">AXY</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">G</span> <span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n</code></pre></div>\n<p>which is a bit nicer than <code>_match_1</code></p>",
        "id": 304987472,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666195231
    }
]