[
    {
        "content": "<p>I am trying to prove :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Inter_nonempty_of'</span> <span class=\"o\">{</span><span class=\"n\">α</span>  <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I don't actually need the assumption <code>{ι : set β}</code>, but I am trying to use  the lemma <code>set.not_nonempty_iff_eq_empty</code>, since I can't think of any way to prove it apart from <code>contrapose</code>.</p>\n<p>Any help is appreciated, thank you!</p>",
        "id": 231386508,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1616447940
    },
    {
        "content": "<p>Untested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Inter_nonempty_of'</span> <span class=\"o\">{</span><span class=\"n\">α</span>  <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>AFAIR we have a lemma <code>∃ x : α, p x → nonempty α</code> but I forgot the name.</p>",
        "id": 231388349,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616448832
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> ! The <code>rcases</code> line gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">anonymous</span><span class=\"o\">]</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatype</span>\n</code></pre></div>\n<p>And I believe the lemma you mentioned is called <code>nonempty_of_exists</code>.</p>",
        "id": 231389182,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1616449269
    },
    {
        "content": "<p>I don't think this lemma is true. An empty intersection of subsets of X is just X.</p>",
        "id": 231389829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616449610
    },
    {
        "content": "<p>But it's true if you replace intersection with union</p>",
        "id": 231390058,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616449726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_Inter_nonempty_of'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span>  <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"bp\">∅</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"mi\">37</span><span class=\"o\">})</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231390266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616449817
    },
    {
        "content": "<p>Yes, that makes sense, thank you!</p>",
        "id": 231390624,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1616449998
    },
    {
        "content": "<p>Oh, it would be cool if slim check could find the \"obvious\" counter example. But I guess slim check can't generate random types?</p>",
        "id": 231390644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616450014
    },
    {
        "content": "<p>It could tried a couple of finite types.</p>",
        "id": 231390743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616450066
    },
    {
        "content": "<p>Actually now I can't even get slim check to generate a random natural number. What import am I missing? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 231391040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616450217
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"bp\">#</span><span class=\"n\">sample</span> <span class=\"n\">nat</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">0</span>\n<span class=\"cm\">1</span>\n<span class=\"cm\">6</span>\n<span class=\"cm\">1</span>\n<span class=\"cm\">1</span>\n<span class=\"cm\">0</span>\n<span class=\"cm\">6</span>\n<span class=\"cm\">212</span>\n<span class=\"cm\">7</span>\n<span class=\"cm\">9</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>so it <del>should work</del> should be possible to make it to work...</p>",
        "id": 231391123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616450269
    },
    {
        "content": "<p>Oh, the <code>slim_check.testable</code> class is only for props</p>",
        "id": 231391445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616450432
    },
    {
        "content": "<p>whereas <code>slim_check.sampleable</code> is for types</p>",
        "id": 231391493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616450446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Index.20of.20intersection/near/231390058\">said</a>:</p>\n<blockquote>\n<p>But it's true if you replace intersection with union</p>\n</blockquote>\n<p>I should've been more careful. I prove the statement that is correct but didn't fix the type.</p>",
        "id": 231392004,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616450718
    },
    {
        "content": "<p>Legendary post: what happens when Yury answers Zulip questions by typing Lean code away from Lean? He types the proof of the intended statement without reading the actual statement... Now we know how he needs Lean.</p>",
        "id": 231392742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616451067
    },
    {
        "content": "<p>What I am curious to know is how he typed the unicode characters in Zulip without cutting and pasting from Lean.</p>",
        "id": 231393792,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1616451749
    },
    {
        "content": "<p>I often assemble code snippets from the OP's code</p>",
        "id": 231398405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616454449
    },
    {
        "content": "<p>I thought of that, but at least he had to scrounge for the angle brackets. So I wondered whether there is some nifty trick.</p>",
        "id": 231399924,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1616455433
    },
    {
        "content": "<p>on android those angle brackets are on the long-press keyboard for &lt; (at least in gboard)</p>",
        "id": 231400090,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616455523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> <a href=\"https://wiki.debian.org/XCompose\">XCompose</a></p>",
        "id": 231401801,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616456690
    }
]