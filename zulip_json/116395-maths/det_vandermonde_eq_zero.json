[
    {
        "content": "<p>I've written two small lemmas about Vandermonde determinants (that I need somewhere else). Is there a branch I can get write access to, or should I create my own?<br>\nMy github username is bartmichels.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">det_vandermonde_eq_zero_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">vandermonde</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">det_vandermonde</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">hij.left</span><span class=\"o\">),</span> <span class=\"n\">hij.right</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">hij.left</span> <span class=\"k\">with</span> <span class=\"n\">hilt</span> <span class=\"n\">higt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hilt</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">symmetry</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hij.right</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">higt</span><span class=\"o\">,</span> <span class=\"n\">hij.right</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">det_vandermonde_ne_zero_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">vandermonde</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">function.injective</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">det_vandermonde_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">not_imp_not</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Also, if you can make the proof of the first one shorter, please do :)</p>",
        "id": 285670359,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654865279
    },
    {
        "content": "<p>At least, you'll want to use <code>squeeze_simp</code> or <code>simp?</code> on that first line, and put braces <code>{ }</code> around the subgoals after <code>split</code></p>",
        "id": 285671166,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654865677
    },
    {
        "content": "<p>I'm not sure if this is desirable, but you can \"golf\" the statement asserting that <code>v</code> is not injective.</p>",
        "id": 285671688,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654865989
    },
    {
        "content": "<p>Right, thanks. I added the braces and indentation for subgoals.</p>",
        "id": 285672202,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654866216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/det_vandermonde_eq_zero/near/285671688\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if this is desirable, but you can \"golf\" the statement asserting that <code>v</code> is not injective.</p>\n</blockquote>\n<p>Certainly desirable, I'll try.</p>",
        "id": 285674015,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654867144
    },
    {
        "content": "<p>I can replace the \"not injective\" part with a single term (or split and two terms) that's not so horrible, for the most part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">Exists₂.imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">h.left</span><span class=\"o\">,</span> <span class=\"n\">h.right.symm</span> <span class=\"o\">⟩)</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists.elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists.elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">min</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n          <span class=\"n\">min_lt_max.mpr</span> <span class=\"n\">h₁.left</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">fn_min_eq_fn_max_iff</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h₁.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">⟩))</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It would be nice to have an <code>exists₂.elim</code>.<br>\nI also didn't find any term-mode ways to <code>wlog</code> assume <code>i ≤ j</code>. Is there anything? Here it's hidden in <code>fn_min_eq_fn_max_iff</code>, which is another lemma (that does not exist yet), to show <code>v n = v m → v (min n m) = v (max n m)</code>.</p>",
        "id": 285698077,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654877461
    },
    {
        "content": "<p>I'm surprised that you're not using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_zero_of_row_eq\">docs#matrix.det_zero_of_row_eq</a></p>",
        "id": 285701768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654879131
    },
    {
        "content": "<p>Forgot about that along the way, thanks.</p>",
        "id": 285702267,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654879390
    },
    {
        "content": "<p>I'm interested in this. I have some prior work with vandermonde stuff myself and this looks nice.</p>",
        "id": 286156116,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655258999
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_vandermonde_eq_zero_iff\">docs#matrix.det_vandermonde_eq_zero_iff</a></p>",
        "id": 286156307,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655259203
    },
    {
        "content": "<p>I'm fairly sure this is your first.</p>",
        "id": 286156412,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655259291
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_vandermonde_ne_zero_iff\">docs#matrix.det_vandermonde_ne_zero_iff</a></p>",
        "id": 286156430,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655259310
    },
    {
        "content": "<p>And this is your second.</p>",
        "id": 286156433,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655259314
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 286156502,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655259378
    },
    {
        "content": "<p>So unfortunately I don't think this is much new.</p>",
        "id": 286156650,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655259536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span>, both of those lemmas were PR'd by <span class=\"user-mention\" data-user-id=\"501306\">@Bart Michels</span> after this thread was made</p>",
        "id": 286172251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655277127
    },
    {
        "content": "<p>Huh. I'm sure I used them before June!</p>",
        "id": 286193182,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655288997
    },
    {
        "content": "<p>Ah - it turns out I had proved very similar things myself, which is why they looked familiar.</p>",
        "id": 286196756,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655291423
    },
    {
        "content": "<p>Sorry about that though - naively I had assumed that because those messages were from only a few days ago there wouldn't be a PR!</p>",
        "id": 286198487,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655292590
    }
]