[
    {
        "content": "<p>The definition of a cone being a limit is as follows in mathlib : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lift</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">s.X</span> <span class=\"bp\">⟶</span> <span class=\"n\">t.X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">fac'</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">lift</span> <span class=\"n\">s</span> <span class=\"bp\">≫</span> <span class=\"n\">t.π.app</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">s.π.app</span> <span class=\"n\">j</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">uniq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">s.X</span> <span class=\"bp\">⟶</span> <span class=\"n\">t.X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≫</span> <span class=\"n\">t.π.app</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">s.π.app</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">s</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It contains the data of lifts from other cones as part of the definition, even though the these lifts should be uniquely determined by the universal property. So why keep the data?</p>\n<p>I came across this issue because I am trying to define the full subcategory of discrete fibrations in <code>over C</code> where <code>C : Cat.{v u}</code>. Specifically, I want discrete fibrations to be <code>X -&gt; C</code> such that <code>Arrow X</code> is the (1-categorical) pullback of <code>X</code> and <code>Arrow C</code> over <code>C</code>, where <code>Arrow X -&gt; X</code> and <code>Arrow C -&gt; C</code>takes target, <code>Arrow X -&gt; Arrow C</code> is induced from <code>X -&gt; C</code>.</p>",
        "id": 270419111,
        "sender_full_name": "Ken Lee",
        "timestamp": 1643821252
    },
    {
        "content": "<p>Sometimes it's nice to have the data around because it makes proofs cleaner since you don't have to invoke uniqueness whenever you want to use the specific construction of the limit.</p>\n<p>Can you work around the issue by using <code>nonempty (is_limit t)</code> in your application?</p>",
        "id": 270426412,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1643823546
    },
    {
        "content": "<p>Yes, I guess I can try that.</p>",
        "id": 270429313,
        "sender_full_name": "Ken Lee",
        "timestamp": 1643824505
    },
    {
        "content": "<p>I think the idea is that <code>has_limits(_of_shape)</code> is a <code>Prop</code>, but the library supports explicit limit constructions with good definitional properties. So to some extent, we need to record data.</p>",
        "id": 270432769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643825709
    },
    {
        "content": "<p>You can also use <code>\\Sigma (X : over C), is_limit [...]</code> as the objects of your category, even if it's not literally a subtype of anything--this is what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.induced_category\">docs#category_theory.induced_category</a> is about</p>",
        "id": 270438670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643828204
    }
]