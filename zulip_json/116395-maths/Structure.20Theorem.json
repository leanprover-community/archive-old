[
    {
        "content": "<p>I want to prove the structure theorem of finitely generated modules over a PID in Lean. <br>\nI'm trying to define free modules by isomorphic to direct sum <code>R^n</code>. <br>\nBut I don't understand why in <code>linear_algebra.direct_sum_module</code>, the indexing type  <code>iota</code> of a direct sum <code>direct_sum iota beta</code> needs to have decidable equality. In fact, I don't think I know what having \"decidable equality\" means, can someone explain please?</p>",
        "id": 182285384,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575207450
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions</a> is probably a good starting point</p>",
        "id": 182287361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575211280
    },
    {
        "content": "<p>For <code>p : Prop</code>, <code>p</code> is decidable is supposed to mean we can prove either <code>p</code> or <code>\\not p</code>.<br>\nThis is captured in Lean by the class <code>decidable p</code> since if<br>\none has either <code>hp : p</code> or <code>hnp : \\not p</code>, then one  has an instance of <code>decidable p</code>. <br>\nSo <code>decidable_eq \\iota</code> means equality of terms in <code>\\iota</code> is decidable?</p>",
        "id": 182288910,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575213883
    },
    {
        "content": "<p>And the reason we care about decidable propositions is because <br>\nsometimes we want to define data depending on the validity of a proposition? <br>\nSo for the case of index of direct sums... I'm not sure what this means <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 182289511,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575214983
    },
    {
        "content": "<p>In principle decidable instances could make things computable. But I don't anything about this. I simply fake decidability using <code>classical.prop_decidable</code> each time Lean complains.</p>",
        "id": 182289999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575215712
    },
    {
        "content": "<p>I think that this should probably be changed in line with <code>finsupp</code>, and we should just use classical decidable equality for direct sum</p>",
        "id": 182290083,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1575215846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> I think <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> has already made a start on this, maybe you want to talk to her on Thurs or before?</p>\n<p>\"Decidable equality\" is a computer science thing. If you switch on classical mode (i.e. mathematician mode) like Patrick says then it becomes automatic, that's why you've not heard of it. I think that if you've got an up to date mathlib you can just type <code>open_locale classical</code> and then never have to worry about this again.</p>",
        "id": 182290801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575217068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks for the fix. Yes, I have already talked with Amelia about this. <br>\nShe said she's looking to restart and do the Smith Normal Form proof since they did it in Algebra 3. <br>\nI was thinking of doing the proof via splitting the module into free and torsion, splitting torsion into p-torsion submodules, <br>\nthen doing structure theorem for p-torsion.</p>",
        "id": 182291482,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575218518
    },
    {
        "content": "<p>Ok great! The theorem will give you both the structure theorem for finite abelian groups and the Jordan canonical form which I think are the last two theorems from M2PM2 which need formalising</p>",
        "id": 182291531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575218595
    },
    {
        "content": "<p>Question about the definition of dimension of a vector space: <br>\nWhy is it not defined as the cardinality of some basis? (It is defined as the minimal cardinality.)<br>\nThe dimension theorem proves these definition match anyway.<br>\nIn other words, is it bad if I defined rank of a free module as cardinality of just some basis?</p>",
        "id": 182292032,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575219546
    },
    {
        "content": "<p>Over the zero ring, the zero module has the basis {} and the basis {0}. But this is a bit of a pathological case.</p>",
        "id": 182294059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575222856
    },
    {
        "content": "<p>For a non-zero ring, these definitions will all be equivalent so it doesn't matter (to me at least) which one you choose, although at some point I guess you'll have to prove that they're equivalent.</p>",
        "id": 182294079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575222920
    },
    {
        "content": "<p>(commutative ring)</p>",
        "id": 182298775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1575231341
    },
    {
        "content": "<p>Good point, I was proving this by reducing modulo a maximal ideal</p>",
        "id": 182300071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575233598
    },
    {
        "content": "<p>Since bases are indexed now, there are infinite bases for the zero module over the zero ring.</p>",
        "id": 182300277,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1575233994
    }
]