[
    {
        "content": "<p>Here's an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">ring_theory.localization</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_pic</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">list.nil</span> <span class=\"bp\">∧</span> <span class=\"n\">c.chain'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x.as_ideal</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.as_ideal</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pic</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">is_pic</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pic_len</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">pic</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hCne</span><span class=\"o\">,</span> <span class=\"n\">hCc</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">C.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">krull_dim</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">supr</span> <span class=\"o\">(</span><span class=\"n\">pic_len</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KD_le_n'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">krull_dim</span> <span class=\"n\">R</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KD_le_n</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pic</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">pic_len</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">le_equiv</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">KD_le_n</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">KD_le_n'</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">KD_le_n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">KD_le_n'</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">krull_dim</span><span class=\"o\">,</span>\n    <span class=\"c1\">--apply supr_le h,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It seems to me that this is exactly a situation where supr_le applies, but if I uncomment the commented line, I get an error which suggest Lean is struggling to match the types. Can anyone see what I'm doing wrong? Do I need to adjust any definitions?</p>",
        "id": 219141838,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377034
    },
    {
        "content": "<p>Is <code>nat</code> a <code>complete_lattice</code>?</p>",
        "id": 219142060,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607377171
    },
    {
        "content": "<p>None available, at least by <code>#check (show complete_lattice ℕ, by apply_instance)</code></p>",
        "id": 219142102,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607377201
    },
    {
        "content": "<p>What would be the <code>supr</code> for an arbitrary <code>set nat</code>?</p>",
        "id": 219142175,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607377223
    },
    {
        "content": "<p>a-ha</p>",
        "id": 219142417,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377366
    },
    {
        "content": "<p>so possibly I want to look at with_top ℕ instead?</p>",
        "id": 219142480,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377402
    },
    {
        "content": "<p>also known as <code>enat</code> I think</p>",
        "id": 219142643,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607377475
    },
    {
        "content": "<p>But, lists are finite btw.</p>",
        "id": 219142677,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607377489
    },
    {
        "content": "<p>Yes.</p>",
        "id": 219142695,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377499
    },
    {
        "content": "<p>That's intended in the context.</p>",
        "id": 219142721,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377510
    },
    {
        "content": "<p>A pic is a finite list of prime ideals of R, properly contained in one another.</p>",
        "id": 219142778,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377555
    },
    {
        "content": "<p>Actually I <em>kinda</em> want it to have a bot also</p>",
        "id": 219142834,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377571
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pic_len</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">pic</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">enat</span> <span class=\"o\">:=</span>\n<span class=\"n\">enat.coe_hom</span> <span class=\"o\">(</span><span class=\"n\">C.val.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">krull_dim</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">enat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">supr</span> <span class=\"o\">(</span><span class=\"n\">pic_len</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219142838,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607377573
    },
    {
        "content": "<p>(As in, a bot lower than 0: when R is trivial it should be, well, -1 or -infinity by convention.)</p>",
        "id": 219143064,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377687
    },
    {
        "content": "<p>Is there a one-line way of doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">supr_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 219143200,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607377778
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">supr_le</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 219143481,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607377917
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">ring_theory.localization</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_pic</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">list.nil</span> <span class=\"bp\">∧</span> <span class=\"n\">c.chain'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x.as_ideal</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.as_ideal</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pic</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">is_pic</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pic_len</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">pic</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">enat</span> <span class=\"o\">:=</span>\n<span class=\"n\">enat.coe_hom</span> <span class=\"o\">(</span><span class=\"n\">C.val.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">krull_dim</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">enat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">supr</span> <span class=\"o\">(</span><span class=\"n\">pic_len</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KD_le_n'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">krull_dim</span> <span class=\"n\">R</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">KD_le_n</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pic</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">pic_len</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">le_equiv</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">KD_le_n</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">KD_le_n'</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">KD_le_n</span><span class=\"o\">,</span> <span class=\"n\">KD_le_n'</span><span class=\"o\">,</span> <span class=\"n\">krull_dim</span><span class=\"o\">,</span> <span class=\"n\">supr_le_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 219143709,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607378038
    },
    {
        "content": "<p>We don't even need the rws, I realised (just makes it easier). Just found supr_le_iff and that's exactly what I wanted.</p>",
        "id": 219143869,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378108
    },
    {
        "content": "<p>Thank you :)</p>",
        "id": 219144073,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378220
    },
    {
        "content": "<p>If prime_spectrum R is an empty type, what will happen?</p>",
        "id": 219144159,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378269
    },
    {
        "content": "<p>(This happens I believe exactly when R is trivial.)</p>",
        "id": 219144221,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378289
    },
    {
        "content": "<p>The dimension of the 0 ring is one of those things where people disagree, maybe some people say it's -1, some say it's -infinity, but the truth is that nobody asks this question in practice.</p>",
        "id": 219144336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607378361
    },
    {
        "content": "<p>Aye. For the context, I think I <em>am</em> going to have to have it as -1 or at least, hmm, there's a good chance I will be plugging in the 0 ring into krull_dim.</p>",
        "id": 219144473,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378426
    },
    {
        "content": "<p>(I am trying to formalise a characterisation of the Krull dimension - though Kevin knows this, it's just for context.)</p>",
        "id": 219144523,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378452
    },
    {
        "content": "<p>The way it is now is it evaluates to 0, because, of course, 0 - 1 = 0.</p>",
        "id": 219144530,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607378456
    },
    {
        "content": "<p>Right.</p>",
        "id": 219144568,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378479
    },
    {
        "content": "<p>I sort of want \"the natural numbers, but also -1 is there for some reason\". I don't know what the most natural way to do that is.</p>",
        "id": 219144607,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378502
    },
    {
        "content": "<p>by the way, I read <code>pic</code> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">P</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">c</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Pic}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">P</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">c</span></span></span></span></span> and got pretty confused</p>",
        "id": 219144717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607378544
    },
    {
        "content": "<p>that's a good point (I need to think about naming, though this is going nowhere near mathlib, at least for now.)</p>",
        "id": 219144771,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378570
    },
    {
        "content": "<p>Happy to take suggestions!</p>",
        "id": 219144816,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607378590
    },
    {
        "content": "<p>I guess I would probably go for <code>prime_ideal_chain</code> myself</p>",
        "id": 219145511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607378930
    },
    {
        "content": "<p>Yes, I did have that, it just felt unwieldy. But clearer.</p>",
        "id": 219146394,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607379326
    }
]