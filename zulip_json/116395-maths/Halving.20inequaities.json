[
    {
        "content": "<p>Am I wrong or are the following inequalities missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.le_half_of_le_of_half_lt_sub</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.ge_half_of_sub_le_half</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 310429324,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1668610825
    },
    {
        "content": "<p>Do you really want to use <code>/</code> and <code>-</code> for natural numbers?</p>",
        "id": 310430168,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668611060
    },
    {
        "content": "<p>I mean, I don't even know if these are true (too lazy to check <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> )</p>",
        "id": 310430245,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668611089
    },
    {
        "content": "<p>\"want\" is a bit of a stretch but I have to <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 310432250,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1668611727
    },
    {
        "content": "<p>What does <code>slim_check</code> think about them?</p>",
        "id": 310457429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668618672
    },
    {
        "content": "<p>By the way, no <code>ge</code> lemmas should be in mathlib, always write inequalities as le.</p>",
        "id": 310457556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668618705
    },
    {
        "content": "<p>I was incidentally just checking it with <code>slim_check</code></p>",
        "id": 310457799,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668618770
    },
    {
        "content": "<p>they seem to be ok</p>",
        "id": 310457871,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668618790
    },
    {
        "content": "<p>Here's the first one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.le_half_of_half_lt_sub</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.le_div_iff_mul_le</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.div_lt_iff_lt_mul</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">lt_tsub_iff_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 310460760,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668619737
    },
    {
        "content": "<p>and the second:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.half_le_of_sub_le_half</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.le_div_iff_mul_le</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_right</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_two</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.mul_div_left</span> <span class=\"n\">b</span> <span class=\"n\">two_pos</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.div_le_div_right</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 310463190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668620487
    },
    {
        "content": "<p>I miss <code>omega</code>...</p>",
        "id": 310475026,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668624340
    },
    {
        "content": "<p>Why not write it in Lean 4 Alex!</p>",
        "id": 310503710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668633677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Oh wow, thats much shorter than my solution</p>",
        "id": 310513244,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1668637794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> What's <code>omega</code>?</p>",
        "id": 310513539,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1668637906
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#omega\">tactic#omega</a></p>",
        "id": 310513750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668637999
    },
    {
        "content": "<p>... and is it broken?</p>",
        "id": 310513961,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1668638110
    },
    {
        "content": "<p>It got banned from mathlib, for unreasonable behaviour.</p>",
        "id": 310514162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668638218
    },
    {
        "content": "<p>I thought mostly for it not being maintained and probably not ported to lean4 any time soon, but maybe both :)</p>",
        "id": 310514419,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668638342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Is it okay if I PR those lemmas together with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zmod.val_min_abs_neg_of_ne_half</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val_min_abs</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a.val_min_abs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zmod.val_min_abs_def_pos</span><span class=\"o\">,</span> <span class=\"n\">zmod.neg_val</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"n\">h''</span> <span class=\"n\">h''</span> <span class=\"n\">h'</span> <span class=\"n\">h''</span> <span class=\"n\">h''</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zmod.nat_cast_self</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_succ</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">neg_add_rev</span><span class=\"o\">,</span>\n       <span class=\"n\">zmod.val_zero</span><span class=\"o\">,</span> <span class=\"n\">neg_zero'</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">zero_le'</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">not_le.mpr</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h''</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.half_le_of_sub_le_half</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_sub</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">zmod.val_lt</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_sub</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">zmod.val_lt</span> <span class=\"n\">a</span><span class=\"o\">))],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_sub_cancel_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h''</span> <span class=\"o\">(</span><span class=\"n\">nat.le_half_of_half_lt_sub</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 310515814,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1668639061
    },
    {
        "content": "<p>We weirdly only have <code>zmod.nat_abs_val_min_abs_neg</code> right now</p>",
        "id": 310515977,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1668639140
    },
    {
        "content": "<p>Ah I guess the whole definition is tailored to the Eisenstein lemmas</p>",
        "id": 310516351,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1668639347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> Feel free to take the two lemmas as your own! They seem potentially useful to have around.</p>",
        "id": 310586008,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668682726
    }
]