[
    {
        "content": "<p>I just PR'd (<a href=\"https://github.com/leanprover-community/mathlib/pull/15667\">#15667</a>) our first fact about complex manifolds: a holomorphic function on a compact connected complex manifold is constant.  (This was unlocked by <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>'s latest version of the maximum principle, <a href=\"https://github.com/leanprover-community/mathlib/pull/15364\">#15364</a>.)</p>\n<p>I wanted to state also the corresponding result without connectedness,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A holomorphic function on a compact complex manifold is locally constant. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mdifferentiable.locally_const_of_compact_space</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">mdifferentiable</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_locally_constant</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but we are missing some API about locally constant functions, connected components, locally connected spaces, etc.  The result I need is that a function constant on clopen preconnected sets is locally constant.  I guess you could break this into two pieces,</p>\n<ul>\n<li>a function constant on connected components is locally constant</li>\n<li>a connected component is clopen -- <a href=\"https://math.stackexchange.com/a/2587488\">maybe this needs</a> the hypothesis that the space is locally connected?  That definition isn't in mathlib yet but is <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/5f8488b1280317b3554dbc2d2d3b7b2588e2f9fa/src/to_mathlib/topology/misc.lean#L442\">done in sphere eversion</a>, and could be PR'd from there.  And then I guess we also need that manifolds are locally connected.</li>\n</ul>\n<p>I won't get to any of this any time soon, posting it here in case anyone else feels like exercising their point-set topology muscles!</p>",
        "id": 290704266,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1658703297
    },
    {
        "content": "<p>Also just recorded this in an issue: <a href=\"https://github.com/leanprover-community/mathlib/pull/15669\">#15669</a></p>",
        "id": 290704440,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1658703517
    },
    {
        "content": "<p>I just want to record that this seems to be disjoint from the work on locally constant functions that has been done in LTE.<br>\n<span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> has written a proof that the completion of loc.const is ctu functions, and we have some random bits and pieces about the sup-norm.<br>\nSo, if you end up needing anything in that direction, please ping so that we can prioritise PRing those parts.</p>",
        "id": 290718055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658722820
    },
    {
        "content": "<p>I think you also need local connectedness for both your full goal and your first point. Otherwise the identity on rationals is a counter example to both, right ?</p>",
        "id": 290722727,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658729524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Missing.20facts.20about.20.60locally_constant.60/near/290704266\">said</a>:</p>\n<blockquote>\n<p>I just PR'd (<a href=\"https://github.com/leanprover-community/mathlib/pull/15667\">#15667</a>) our first fact about complex manifolds: a holomorphic function on a compact connected complex manifold is constant.  (This was unlocked by <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>'s latest version of the maximum principle, <a href=\"https://github.com/leanprover-community/mathlib/pull/15364\">#15364</a>.)</p>\n<p>I wanted to state also the corresponding result without connectedness,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A holomorphic function on a compact complex manifold is locally constant. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mdifferentiable.locally_const_of_compact_space</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">mdifferentiable</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_locally_constant</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but we are missing some API about locally constant functions, connected components, locally connected spaces, etc.  The result I need is that a function constant on clopen preconnected sets is locally constant.  I guess you could break this into two pieces,</p>\n<ul>\n<li>a function constant on connected components is locally constant</li>\n<li>a connected component is clopen -- <a href=\"https://math.stackexchange.com/a/2587488\">maybe this needs</a> the hypothesis that the space is locally connected?  That definition isn't in mathlib yet but is <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/5f8488b1280317b3554dbc2d2d3b7b2588e2f9fa/src/to_mathlib/topology/misc.lean#L442\">done in sphere eversion</a>, and could be PR'd from there.  And then I guess we also need that manifolds are locally connected.</li>\n</ul>\n<p>I won't get to any of this any time soon, posting it here in case anyone else feels like exercising their point-set topology muscles!</p>\n</blockquote>\n<p>It has been a while since I have looked at this stuff but I do have some results in the <code>p-adic</code> branch that might have proved/ will help in proving these results.</p>",
        "id": 290746698,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1658748249
    },
    {
        "content": "<p>I think the biggest problem with <code>locally_constant</code> in mathlib atm is that the metric_space instance isn't set up in the right generality.</p>",
        "id": 290747181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658748589
    },
    {
        "content": "<p>We should do <code>uniform_space</code> separately, etc... but it's all done in one go. That'll need a bit of a refactor.</p>",
        "id": 290747246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658748609
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15965\">#15965</a></p>",
        "id": 292631420,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660068991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> Looks like there's a spurious typo in the diff.</p>",
        "id": 292646088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660074554
    },
    {
        "content": "<p>Oh right, it's me hitting Shift instead of Control again <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 292646970,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660074888
    },
    {
        "content": "<p>Should be fixed now</p>",
        "id": 292648363,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660075381
    }
]