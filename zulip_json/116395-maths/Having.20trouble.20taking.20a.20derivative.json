[
    {
        "content": "<p>It seems so simple, yet is so difficult in Lean. I may well have went in a wrong direction with the partial proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">asymptotics</span> <span class=\"n\">normed_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">%</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffHasDeriv</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">has_deriv_at_iff_is_o_nhds_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_o_iff_forall_is_O_with.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">cGt0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">asymptotics.is_O_with</span><span class=\"o\">,</span> <span class=\"n\">filter.eventually</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">complex.norm_eq_abs</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300286818,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1663907409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385848\">@Mark Andrew Gerads</span> Are you sure you understand the paper proof?</p>",
        "id": 300287266,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663907826
    },
    {
        "content": "<p>You might like to try writing it out carefully with, e.g., Corollary 6.2.13 in <a href=\"https://www.jirka.org/ra/realanal.pdf\">https://www.jirka.org/ra/realanal.pdf</a></p>",
        "id": 300287381,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663907956
    },
    {
        "content": "<p>This is basically the Taylor series for the exponential function, except some terms are zeroed out. I would just take the derivative of each term, and the terms not zeroed out move to the left 1 spot as they are differentiated.</p>",
        "id": 300287640,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1663908216
    },
    {
        "content": "<p>Right, that's not a proof.</p>",
        "id": 300287729,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663908295
    },
    {
        "content": "<p>Does mathlib have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">expHasDeriv</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>If so, then I would be interested in reading it for inspiration. <code>library_search!</code> did not find it.</p>",
        "id": 300288349,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1663908696
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.has_strict_deriv_at_exp\">docs#complex.has_strict_deriv_at_exp</a> depends on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_at_iff_is_o_nhds_zero\">docs#has_deriv_at_iff_is_o_nhds_zero</a> so it's not based on termwise differentiation; <a href=\"https://github.com/leanprover-community/mathlib/pull/14090\">#14090</a> was recently merged though and you may be able to make use of it.</p>",
        "id": 300291216,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663911082
    },
    {
        "content": "<p>there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.has_deriv_at_exp\">docs#complex.has_deriv_at_exp</a> on the same page</p>",
        "id": 300291334,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663911178
    },
    {
        "content": "<p>I found it by searching <code>has_deriv_at exp</code> in the mathlib search box</p>",
        "id": 300291456,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663911293
    },
    {
        "content": "<p>I would encourage you to try that strategy in addition to library_search... I'm not familiar with this part of mathlib but I was able to find the lemma by choosing my search terms wisely</p>",
        "id": 300291664,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663911491
    },
    {
        "content": "<p>(I didn't see Junyan's comment until after I found it)</p>",
        "id": 300291687,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663911524
    },
    {
        "content": "<p>taking advantage of the search UI in the mathlib docs can save you a lot of time!</p>",
        "id": 300291812,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663911667
    },
    {
        "content": "<p>Let me just say that you shouldn’t take <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp\">docs#real.exp</a> as inspiration for anything. Instead, you might want to have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp\">docs#exp</a> (so the theorem you’re looking for is really <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_at_exp\">docs#has_deriv_at_exp</a>)</p>",
        "id": 300344458,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663933887
    },
    {
        "content": "<p>Since we don’t have the tools to do the termwise differentiation (IIUC), your best option is to argue that this defines an analytic functions and thus it is differentiable with the derivative you think</p>",
        "id": 300345498,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663934321
    },
    {
        "content": "<p>Oh actually no because the only thing it gives you for free is the derivative at zero</p>",
        "id": 300345992,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663934481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Having.20trouble.20taking.20a.20derivative/near/300287381\">said</a>:</p>\n<blockquote>\n<p>You might like to try writing it out carefully with, e.g., Corollary 6.2.13 in <a href=\"https://www.jirka.org/ra/realanal.pdf\">https://www.jirka.org/ra/realanal.pdf</a></p>\n</blockquote>\n<p>Before I try to understand the proof, I would like to know that the complex analysis proof is exactly the same as the real analysis proof.</p>",
        "id": 300573177,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664045927
    },
    {
        "content": "<p>You can do this (but it's not in mathlib):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">formal_multilinear_series.deriv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">curry_left</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_deriv</span> <span class=\"o\">:</span> <span class=\"n\">p.deriv.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">p.coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">apply_eq_iff_coeff_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q.coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_iff_coeff_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q.coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">change_origin_series_eq_deriv</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.change_origin_series</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">fin.snoc</span> <span class=\"n\">matrix.vec_empty</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.deriv</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_fpower_series_on_ball_deriv</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">has_fpower_series_on_ball</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_fpower_series_on_ball</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">p.deriv</span> <span class=\"n\">w</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(including some of the lemmas I had to use to prove the last one, which IIUC is essentially what you are looking for). In particular, the API around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.change_origin_series\">docs#formal_multilinear_series.change_origin_series</a> is helpful here, but not the easiest one to figure out. As far as I understand, these lemmas are not in mathlib because they are not at the right level of generality, but the <code>formal_multilinear_series 𝕜 𝕜 E</code> with <code>deriv</code> is a very common use case so it might make sense to include them.</p>",
        "id": 300584720,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664054859
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_at.has_deriv_at\">docs#has_fpower_series_at.has_deriv_at</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_at.has_strict_fderiv_at\">docs#has_fpower_series_at.has_strict_fderiv_at</a> which all lead to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_on_ball.fderiv\">docs#has_fpower_series_on_ball.fderiv</a></p>",
        "id": 300585257,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664055130
    },
    {
        "content": "<p>I still feel lost even with all these comments, so I decided to read \"Complex Analysis\" by John M. Howie. If I do not find my answer in that book, I will try a different Complex Analysis book.</p>",
        "id": 300747970,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664183847
    },
    {
        "content": "<p>My impression is that most of your issues will not be mathematical but linked to the mathlib API, which takes a while to figure out. To fit in there, your first goal would probably be to define a <code>formal_multilinear_series \\C \\C \\C</code> term corresponding to your function, show that it has infinite radius of convergence, and define the function itself using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.sum\">docs#formal_multilinear_series.sum</a> (and have the fact that it is the sum of the series using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.has_fpower_series_on_ball\">docs#formal_multilinear_series.has_fpower_series_on_ball</a>).</p>\n<p>Then, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_on_ball.fderiv\">docs#has_fpower_series_on_ball.fderiv</a> and related from my previous comment are close to what you need, but there is some impedance mismatch between the <code>fderiv</code> version in mathlib and the <code>deriv</code> version that you need, which AFAIK is not bridged by lemmas that you will find in that form in mathlib. Mostly it has to do with identifying linear maps in dimension 1 with scalars.</p>",
        "id": 300750865,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664184952
    },
    {
        "content": "<p>For instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plain_old_series</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map.mk_pi_field</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">plain_old_series</span> <span class=\"bp\">𝕜</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">,</span> <span class=\"n\">plain_old_series</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 300763841,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664190218
    },
    {
        "content": "<p>Here is something that will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv_analytic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">formal_multilinear_series</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plain_old_series</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map.mk_pi_field</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">plain_old_series_coeff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">plain_old_series</span> <span class=\"bp\">𝕜</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">,</span> <span class=\"n\">plain_old_series</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">formal_multilinear_series.deriv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">curry_left</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_deriv</span> <span class=\"o\">:</span> <span class=\"n\">p.deriv.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">p.coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.deriv</span><span class=\"o\">,</span> <span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.prod_cons</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_eq_prod_smul_coeff</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_multilinear_map.curry_left_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_const_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">apply_eq_iff_coeff_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q.coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">continuous_multilinear_map.ext_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_iff_coeff_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q.coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">apply_eq_iff_coeff_eq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">change_origin_series_eq_deriv</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.change_origin_series</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">fin.snoc</span> <span class=\"n\">matrix.vec_empty</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.deriv</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">p.change_origin_series</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">p.deriv</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">//</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">S.card</span> <span class=\"bp\">•</span> <span class=\"n\">p.coeff</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.deriv.coeff</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">change_origin_series</span><span class=\"o\">,</span> <span class=\"n\">change_origin_series_term</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_deriv</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finset.card_univ</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_fpower_series_on_ball.deriv</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">has_fpower_series_on_ball</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_fpower_series_on_ball</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">p.deriv</span> <span class=\"n\">w</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_linear_map.apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">ev.comp_has_fpower_series_on_ball</span> <span class=\"n\">hp.fderiv</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_iff_coeff_eq.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ev</span><span class=\"o\">,</span> <span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">,</span> <span class=\"n\">linear_isometry_equiv.coe_coe''</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_linear_map.comp_formal_multilinear_series_apply</span><span class=\"o\">,</span> <span class=\"n\">change_origin_series_eq_deriv</span><span class=\"o\">,</span>\n    <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">continuous_linear_map.comp_continuous_multilinear_map_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_multilinear_curry_fin1_apply</span><span class=\"o\">,</span> <span class=\"n\">continuous_linear_map.apply_apply</span><span class=\"o\">,</span> <span class=\"n\">matrix.zero_empty</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_fpower_series_on_ball.has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">has_fpower_series_on_ball</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">emetric.ball</span> <span class=\"n\">w</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p.deriv.sum</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">hp.deriv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"bp\">𝕜</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">hp.differentiable_on.differentiable_at</span> <span class=\"o\">(</span><span class=\"n\">is_open.mem_nhds</span> <span class=\"n\">emetric.is_open_ball</span> <span class=\"n\">hz</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">has_deriv_at_deriv_iff.mpr</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">emetric.ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">edist_comm</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">edist_sub_left</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.sum</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">h1.has_sum</span> <span class=\"n\">h4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tsum_eq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">------------------------</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues_series</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">plain_old_series</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">rues</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rues_series_radius</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rues_series.deriv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span> <span class=\"bp\">=</span> <span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_iff_coeff_eq.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_deriv</span><span class=\"o\">,</span> <span class=\"n\">rues_series</span><span class=\"o\">,</span> <span class=\"n\">plain_old_series_coeff</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- but this is a useful lemma anyway</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues_function</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffHasDeriv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">rues_function</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rues_function</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_fpower_series_on_ball</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">emetric.ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">rues_function</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h2.has_deriv_at</span> <span class=\"n\">h3</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300999896,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664283566
    },
    {
        "content": "<p>\"Above the fold\" is something that I believe should be in mathlib (but it is kind of messy and would need some refinement). \"Below the fold\" is domain specific, I did not fill the sorries but they should be fairly straightforward, and needed in any case for the initial question...</p>",
        "id": 301000463,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664283718
    },
    {
        "content": "<p>I made some progress.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_mul_other_mul_self_cancel</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">z1</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">z1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">z2</span> <span class=\"bp\">*</span> <span class=\"n\">z1</span> <span class=\"bp\">=</span> <span class=\"n\">z2</span><span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">field_simp</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rues_series.deriv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span> <span class=\"bp\">=</span> <span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_iff_coeff_eq.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_deriv</span><span class=\"o\">,</span> <span class=\"n\">rues_series</span><span class=\"o\">,</span> <span class=\"n\">plain_old_series_coeff</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rues</span><span class=\"o\">,</span><span class=\"n\">rues</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.factorial_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">≠</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inv_mul_other_mul_self_cancel</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.factorial</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301157034,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664339329
    },
    {
        "content": "<p>How does one get this lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rues_series_radius</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I understand that the normal way is to find a limit like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mo stretchy=\"false\">)</mo><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\lim_{n\\to\\infty}(a_n)^{1/n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>, but that limit does not exist when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> alternates between 0 and other numbers. I suspect the easiest way is to show the radius is infinite in the case of $\\exp(z)$, maybe using <code>(exp_series_div_summable ℂ (abs z))</code> or something similar, and use the absolute convergence to bound the absolute value of <code>rues_series n m z</code> via <code>rues_series n m (abs z)</code>. Something like that might work.<br>\nI would appreciate help.</p>",
        "id": 301385498,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664437642
    },
    {
        "content": "<p>You can try using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.radius_eq_liminf\">docs#formal_multilinear_series.radius_eq_liminf</a> to follow this idea, or you can ask here if there is a lemma saying that the radius of a series with smaller coefficients is larger (and possibly nerdsnipe someone into proving it) and then use this, which would be the most natural option. </p>\n<p>Alternatively you can have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_series_radius_eq_top\">docs#exp_series_radius_eq_top</a> and its proof and adapt it to your case.</p>",
        "id": 301387374,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664438492
    },
    {
        "content": "<p>Thanks. I look forward to you getting your 'above the fold' lemmas into mathlib.</p>",
        "id": 301390811,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664439933
    },
    {
        "content": "<p>I don't think this exists, but I have been nerdsniped. It's easy to combine this with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.radius_eq_liminf\">docs#formal_multilinear_series.radius_eq_liminf</a> to get that the radius of a series with smaller coefficients is larger. I encourage you to clean it up and PR it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.radius_liminf</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">at_top.liminf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n  <span class=\"n\">at_top.liminf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">liminf_le_liminf</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))),</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">Ioi_mem_at_top</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">ennreal.inv_le_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">ennreal.rpow_le_rpow_iff</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">nat.cast_pos.mpr</span> <span class=\"n\">hn</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301528347,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664484162
    },
    {
        "content": "<p>My version (I nerdsniped myself <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">radius_le_radius_of_nnnorm_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"bp\">∥₊</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"bp\">∥₊</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.radius</span> <span class=\"bp\">≤</span> <span class=\"n\">p.radius</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">radius_eq_liminf</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">liminf_le_liminf</span> <span class=\"n\">ennreal</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"n\">at_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.inv_le_inv</span><span class=\"o\">,</span> <span class=\"n\">ennreal.coe_le_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nnreal.rpow_le_rpow</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">radius_le_radius_of_nnnorm_le'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">p.coeff</span> <span class=\"n\">n</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">q.coeff</span> <span class=\"n\">n</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.radius</span> <span class=\"bp\">≤</span> <span class=\"n\">p.radius</span> <span class=\"o\">:=</span>\n<span class=\"n\">radius_le_radius_of_nnnorm_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">norm_to_nnreal</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 301529219,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664484513
    },
    {
        "content": "<p>I made progress again, but am stuck with <code>(list.of_fn 1).prod</code> not simplifying. It is the same problem located at both sorrys.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv_analytic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.radius_liminf</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">formal_multilinear_series</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plain_old_series</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map.mk_pi_field</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">plain_old_series_coeff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">plain_old_series</span> <span class=\"bp\">𝕜</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">,</span> <span class=\"n\">plain_old_series</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">formal_multilinear_series.deriv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">curry_left</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_deriv</span> <span class=\"o\">:</span> <span class=\"n\">p.deriv.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">p.coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.deriv</span><span class=\"o\">,</span> <span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.prod_cons</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_eq_prod_smul_coeff</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_multilinear_map.curry_left_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_const_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">apply_eq_iff_coeff_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q.coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">continuous_multilinear_map.ext_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_iff_coeff_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q.coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">apply_eq_iff_coeff_eq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">change_origin_series_eq_deriv</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.change_origin_series</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">fin.snoc</span> <span class=\"n\">matrix.vec_empty</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.deriv</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">p.change_origin_series</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">p.deriv</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">//</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">S.card</span> <span class=\"bp\">•</span> <span class=\"n\">p.coeff</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.deriv.coeff</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">change_origin_series</span><span class=\"o\">,</span> <span class=\"n\">change_origin_series_term</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_deriv</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finset.card_univ</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_fpower_series_on_ball.deriv</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">has_fpower_series_on_ball</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_fpower_series_on_ball</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">p.deriv</span> <span class=\"n\">w</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_linear_map.apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">ev.comp_has_fpower_series_on_ball</span> <span class=\"n\">hp.fderiv</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_iff_coeff_eq.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ev</span><span class=\"o\">,</span> <span class=\"n\">formal_multilinear_series.coeff</span><span class=\"o\">,</span> <span class=\"n\">linear_isometry_equiv.coe_coe''</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_linear_map.comp_formal_multilinear_series_apply</span><span class=\"o\">,</span> <span class=\"n\">change_origin_series_eq_deriv</span><span class=\"o\">,</span>\n    <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">continuous_linear_map.comp_continuous_multilinear_map_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_multilinear_curry_fin1_apply</span><span class=\"o\">,</span> <span class=\"n\">continuous_linear_map.apply_apply</span><span class=\"o\">,</span> <span class=\"n\">matrix.zero_empty</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_fpower_series_on_ball.has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">has_fpower_series_on_ball</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">emetric.ball</span> <span class=\"n\">w</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p.deriv.sum</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">hp.deriv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"bp\">𝕜</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">hp.differentiable_on.differentiable_at</span> <span class=\"o\">(</span><span class=\"n\">is_open.mem_nhds</span> <span class=\"n\">emetric.is_open_ball</span> <span class=\"n\">hz</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">has_deriv_at_deriv_iff.mpr</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">emetric.ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">edist_comm</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">edist_sub_left</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">formal_multilinear_series.sum</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">h1.has_sum</span> <span class=\"n\">h4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tsum_eq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">radius_le_radius_of_nnnorm_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"bp\">∥₊</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"bp\">∥₊</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.radius</span> <span class=\"bp\">≤</span> <span class=\"n\">p.radius</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">radius_eq_liminf</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">liminf_le_liminf</span> <span class=\"n\">ennreal</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"n\">at_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.inv_le_inv</span><span class=\"o\">,</span> <span class=\"n\">ennreal.coe_le_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nnreal.rpow_le_rpow</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">radius_le_radius_of_nnnorm_le'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">p.coeff</span> <span class=\"n\">n</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">q.coeff</span> <span class=\"n\">n</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.radius</span> <span class=\"bp\">≤</span> <span class=\"n\">p.radius</span> <span class=\"o\">:=</span>\n<span class=\"n\">radius_le_radius_of_nnnorm_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">norm_to_nnreal</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n\n<span class=\"c1\">------------------------</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">exp_series</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">exp_series</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">exp_series</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues_coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues_series</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">plain_old_series</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">rues_coeff</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rues_series_radius</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">k</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">exp_series</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">k</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff</span><span class=\"o\">,</span><span class=\"n\">coeff</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rues_series</span><span class=\"o\">,</span><span class=\"n\">exp_series</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">plain_old_series</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">continuous_multilinear_map.mk_pi_field_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_const_one</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">complex.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map.mk_pi_algebra_fin_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">absolute_value.map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_inv₀</span><span class=\"o\">,</span> <span class=\"n\">complex.abs_cast_nat</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">rues_coeff</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:=</span><span class=\"n\">classical.em</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h3</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">map_inv₀</span><span class=\"o\">,</span> <span class=\"n\">complex.abs_cast_nat</span><span class=\"o\">],</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h3</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">absolute_value.map_zero</span><span class=\"o\">],</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:=</span><span class=\"n\">radius_le_radius_of_nnnorm_le'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">exp_series_radius_eq_top</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_top_iff.mpr</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_mul_other_mul_self_cancel</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">z1</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">z1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">z2</span> <span class=\"bp\">*</span> <span class=\"n\">z1</span> <span class=\"bp\">=</span> <span class=\"n\">z2</span><span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">field_simp</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rues_series.deriv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span> <span class=\"bp\">=</span> <span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_iff_coeff_eq.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_deriv</span><span class=\"o\">,</span> <span class=\"n\">rues_series</span><span class=\"o\">,</span> <span class=\"n\">plain_old_series_coeff</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rues_coeff</span><span class=\"o\">,</span><span class=\"n\">rues_coeff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.factorial_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">≠</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inv_mul_other_mul_self_cancel</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.factorial</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues_function</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffHasDeriv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">rues_function</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rues_function</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_fpower_series_on_ball</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">emetric.ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">rues_function</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h2.has_deriv_at</span> <span class=\"n\">h3</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301592467,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664525816
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.prod_of_fn\">docs#list.prod_of_fn</a></p>",
        "id": 301599360,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664528530
    },
    {
        "content": "<p>The derivative is now proved with no sorry in sight! Thanks everyone, especially <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> .</p>",
        "id": 301616647,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664534937
    },
    {
        "content": "<p>I tried it on my side, here is my version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rues_series_radius</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">exp_series</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">exp_series_radius_eq_top</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">radius_le_radius_of_nnnorm_le'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rues_series</span><span class=\"o\">,</span> <span class=\"n\">rues</span><span class=\"o\">,</span> <span class=\"n\">exp_series</span><span class=\"o\">,</span> <span class=\"n\">coeff</span><span class=\"o\">,</span> <span class=\"n\">list.prod_of_fn</span><span class=\"o\">,</span> <span class=\"n\">plain_old_series</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rues_series.deriv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span> <span class=\"bp\">=</span> <span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_iff_coeff_eq.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ne_zero.ne</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rues_series</span><span class=\"o\">,</span> <span class=\"n\">rues</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">)],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">div_div</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues_function</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffHasDeriv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">rues_function</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rues_function</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_fpower_series_on_ball</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">emetric.ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">radius</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">rues_function</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h2.has_deriv_at</span> <span class=\"n\">h3</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301617190,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664535161
    },
    {
        "content": "<p>Is there any piece of additional API that you would have found useful? I will turn these lemmas into a PR at some point, and would like to know what to add or change before that ...</p>",
        "id": 301617442,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664535260
    },
    {
        "content": "<p>Well, I suppose I would like to show that your <code>rues_function</code> equals my other definition, which uses <code>tsum</code> in the first post of this thread.<br>\nAnother lemma that would be useful is showing something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffSummable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">%</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">):=</span>\n</code></pre></div>\n<p>using the fact that <code>(rues_series n m).radius = ⊤</code><br>\nI don't know how hard that would be because I haven't tried it yet.</p>",
        "id": 301618645,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664535737
    },
    {
        "content": "<p>For the first one, you can combine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.has_sum\">docs#formal_multilinear_series.has_sum</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum.tsum_eq\">docs#has_sum.tsum_eq</a> (up to the difference between nat and int).</p>\n<p>For the second, does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.summable_norm_mul_pow\">docs#formal_multilinear_series.summable_norm_mul_pow</a> with <code>r = 1</code> work for you? Or even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.summable\">docs#formal_multilinear_series.summable</a></p>",
        "id": 301620981,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664536640
    },
    {
        "content": "<p>It looks like <code>metric.emetric_ball_top</code> can be used with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.summable\">docs#formal_multilinear_series.summable</a> to get my desired result.</p>",
        "id": 301622855,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664537334
    }
]