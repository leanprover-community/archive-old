[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.noetherian</span> <span class=\"c1\">-- or anything to get ideals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine; in my mind this is because \"≤ is tagged with @[refl] somewhere\"</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- fails?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is something missing here? This should work, right?</p>",
        "id": 306996482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156070
    },
    {
        "content": "<p><code>exact le_refl J,</code> works fine</p>",
        "id": 306996537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156120
    },
    {
        "content": "<p>This is a somewhat common issue. I'm not sure why exactly anymore but it's something obscure like computability...</p>",
        "id": 306996642,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667156172
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- still fails ;-)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306996701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156210
    },
    {
        "content": "<p>There are definitely previous threads about it.</p>",
        "id": 306996748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667156233
    },
    {
        "content": "<p>It wouldn't surprise me if I started at least one of them ;-)</p>",
        "id": 306996774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156247
    },
    {
        "content": "<p>No but like computability of the instance, not decidability assumptions</p>",
        "id": 306996776,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667156248
    },
    {
        "content": "<p>I can't find another thread this year :-(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  invalid apply tactic, failed to unify</span>\n<span class=\"cm\">    J ≤ J</span>\n<span class=\"cm\">  with</span>\n<span class=\"cm\">    ∀ [_inst_1 : preorder ?m_1] (a : ?m_1), a ≤ a</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306997406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156560
    },
    {
        "content": "<p>Is it the apply bug?</p>",
        "id": 306997459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156587
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">--  apply le_refl, -- fails</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>OK so it's probably the apply bug (for me the apply bug is by definition anything when apply doesn't work, because I never understood it properly)</p>",
        "id": 306997519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156634
    },
    {
        "content": "<p>I haven't had a chance to check it within Lean to confirm whether it's the apply bug, but for reference here's where <code>apply</code> (well, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.apply_core\">docs#tactic.apply_core</a>) occurs when you use <code>refl</code>: <a href=\"https://github.com/leanprover-community/lean/blob/283f6ed8083ab4dd7c36300f31816c5cb793f2f7/library/init/meta/relation_tactics.lean#L17\">https://github.com/leanprover-community/lean/blob/283f6ed8083ab4dd7c36300f31816c5cb793f2f7/library/init/meta/relation_tactics.lean#L17</a></p>",
        "id": 306997706,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667156759
    },
    {
        "content": "<p>Now I know what I'm looking for I can indeed confirm I've asked this before: <a href=\"#narrow/stream/113488-general/topic/refl.20for.20.3C.3D.20on.20ennreal/near/281662943\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/refl.20for.20.3C.3D.20on.20ennreal/near/281662943</a></p>",
        "id": 306997753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156763
    },
    {
        "content": "<p>In a similar situation, Floris taught me that this kind of error can be caused by a missing <code>instantiate_mvars</code>.  However, if it is the apply-bug, likely this is not the issue!</p>",
        "id": 306997814,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667156809
    },
    {
        "content": "<p>and indeed <code>refl'</code> works fine here too.</p>",
        "id": 306997819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667156814
    },
    {
        "content": "<p>Something to understand about <code>@[refl]</code> is that for a give head there can be at most one associated lemma -- this means that in Kevin's original two examples they must both be (trying to be) using <code>le_refl</code>, and in particular <code>apply le_refl</code> is a pretty good approximation for what both are doing. (The only difference might be that it passes the <code>new_goals.non_dep_only</code> option?)</p>",
        "id": 306998223,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667157063
    },
    {
        "content": "<p>This is a limitation I forgot about recently, and one hopes that there are no <code>@[refl]</code>, <code>@[trans]</code>, or <code>@[symm]</code> lemmas in mathlib that accidentally override the expected general one for a given notation!</p>",
        "id": 306998386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667157182
    },
    {
        "content": "<p>Examples to illustrate the potential problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">@[refl]</span> <span class=\"kd\">lemma</span> <span class=\"n\">new_refl</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- error! the le refl lemma is specialized to nat</span>\n</code></pre></div>",
        "id": 306998731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667157420
    },
    {
        "content": "<p>Kyle, does <code>refl'</code> work in your example?  (I'm not at a computer now.)</p>",
        "id": 306998872,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667157544
    },
    {
        "content": "<p>No, that doesn't solve the problem that there's a <code>refl</code> database inside Lean that is indexed by the head of the expression.  The effect of the <code>@[refl]</code> line is to forget the old <code>@[refl]</code> lemma.</p>",
        "id": 306999222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667157830
    },
    {
        "content": "<p>Ooh, that is very sad!</p>",
        "id": 306999302,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667157857
    },
    {
        "content": "<p>The <code>refl'</code> tactic is exactly the same as <code>refl</code> but it uses something more like <code>apply'</code>. Here's the relevant line for <code>refl'</code> that looks up the refl lemma (the <code>refl</code> tactic has the same line): <a href=\"https://github.com/leanprover-community/mathlib/blob/7f5bf383ec988aa0ea700583c6449332003722a7/src/tactic/apply.lean#L102\">https://github.com/leanprover-community/mathlib/blob/7f5bf383ec988aa0ea700583c6449332003722a7/src/tactic/apply.lean#L102</a></p>",
        "id": 306999476,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667157962
    },
    {
        "content": "<p>(and if you trace through the code, for reflexivity the <code>op_for</code> function is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.refl_for\">docs#environment.refl_for</a>, which is what consults this refl database)</p>",
        "id": 306999554,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667157997
    },
    {
        "content": "<p>So, would it be possible to have a list of the \"current\" rfl-lemmas and check that each is proved by <code>refl</code> in all subsequent PRs?</p>",
        "id": 306999773,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667158189
    },
    {
        "content": "<p>Kind of a \"no <code>rfl</code>-lemma was harmed in the making of this PR\" linter.</p>",
        "id": 307000202,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667158512
    },
    {
        "content": "<p>I'm not sure what the right way to handle it is. One is your idea to make sure that any overriding is done in a strictly-more-general way, which is fairly robust. Another is to modify the <code>@[refl]</code>/<code>@[symm]</code>/<code>@[trans]</code> attributes to disallow overriding unless you do something like <code>@[refl override]</code> if you mean it (and disallow this in mathlib). Another is to have some output of all the mathlib refl/symm/trans lemmas in mathlib and make sure each head has at most one associated lemma.</p>",
        "id": 307000272,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667158555
    },
    {
        "content": "<p>Maybe this is not a good assumption, but I think mathlib probably doesn't need the ability to override lemmas associated to these tags.</p>",
        "id": 307000364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667158589
    },
    {
        "content": "<p>Oh, right, and fourth option, just sit tight and be aware of this possible problem and wait until Lean 4, where I <em>think</em> they use a typeclass for the databases. (Correct me if I'm wrong here.)</p>",
        "id": 307000425,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667158640
    },
    {
        "content": "<p>Since the database is there already, the check might simply be to see if <code>solve_aux &lt;type_of_rfl_lemma&gt; `[{ refl }]</code> succeeds.</p>",
        "id": 307000773,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667158904
    },
    {
        "content": "<p>Anyway, it may not be worth it, with Lean4 so close...</p>",
        "id": 307000963,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667159002
    },
    {
        "content": "<p>This is the apply bug. It was recently fixed in lean 4</p>",
        "id": 307002180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667159759
    },
    {
        "content": "<p>in lean 3 you should just use <code>refl'</code></p>",
        "id": 307002244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667159770
    }
]