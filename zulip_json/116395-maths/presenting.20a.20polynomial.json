[
    {
        "content": "<p>Hi Everyone,<br>\nI am thinking about the way that present a polynomial in Lean.<br>\nMy idea is using list, for example: 1 + x + 3 x^2 will be the list: [1,1,3]. Is there a standard way of presenting it to avoid conflict.</p>\n<p>My second question is if I want to have a Field K, how can I define it in Lean?</p>",
        "id": 163908130,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555944028
    },
    {
        "content": "<p>field is already in mathlib?</p>",
        "id": 163916681,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555951119
    },
    {
        "content": "<p>field is in core, it's been there since the beginning</p>",
        "id": 163916737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555951179
    },
    {
        "content": "<p>polynomials are in mathlib; they are represented as finitely supported functions (eventually zero) so that leading zeros don't count as different   polynomials</p>",
        "id": 163917340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555951641
    },
    {
        "content": "<p>Thanks you, <br>\nHow to declare the field and polynomial it in VS code?<br>\nAlso, where can I look for similar things, for example, if I want to declare a ring, where I can find to do it? Is there any reference in PDF file?</p>",
        "id": 163924807,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555957128
    },
    {
        "content": "<p>To prove a theorem about rings just do<br>\n<code>lemma my_lemma {α : Type*} [ring α] : whatever</code></p>",
        "id": 163925896,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555958017
    },
    {
        "content": "<p>To prove your type is a ring, do something like.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">my_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">my_type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 163926065,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555958151
    },
    {
        "content": "<p>Hi all,<br>\nis there any reference to see what is done or not in mathlib and in core?</p>",
        "id": 164034214,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1556057239
    },
    {
        "content": "<p>It's not very up to date, but there is this document: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/mathlib-overview.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/mathlib-overview.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/mathlib-overview.md</a></p>",
        "id": 164035758,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556058741
    },
    {
        "content": "<p>I usually search the source code of mathlib, then I search the Zulip chat, and then I ask here :)</p>",
        "id": 164035805,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556058814
    },
    {
        "content": "<p>Thanks</p>",
        "id": 164037916,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1556061011
    },
    {
        "content": "<p>I just ask here directly <em>grin</em></p>",
        "id": 164053264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556080953
    },
    {
        "content": "<p>Or at least, when I didn't know my way around _at all_, I just asked here. Now at least I sometimes know where to look.</p>",
        "id": 164053294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556081028
    }
]