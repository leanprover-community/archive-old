[
    {
        "content": "<p>What are the proper names of the following two construction?</p>\n<ol>\n<li>Given a map <code>f : α → α</code>, consider the space of sequences <code>x : ℕ → α</code> such that <code>x n = f (x (n + 1))</code>; the left shift is an injective map on this space, and it is bijective if <code>f</code> was surjective.</li>\n<li>Given a map <code>f : α → α</code>, consider the quotient of <code>ℕ × α</code> by <code>(n, x) ~ (n + 1, f x)</code>; if <code>f</code> was injective, then we have an embedding of <code>α</code> into this quotient and <code>f</code> lifts to a bijective map.</li>\n</ol>\n<p>Of course, both constructions can be generalized to an action of a monoid different from <code>multiplicative ℕ</code>.</p>",
        "id": 193345603,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586363693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 193345743,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586363763
    },
    {
        "content": "<p>The sequences in 1 are the usual model for the (projective) limit of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋯</mo><mo>→</mo><mi>α</mi><mo>→</mo><mi>α</mi><mo>→</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\cdots\\to\\alpha\\to\\alpha\\to\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>, with all the maps being <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span>.</p>",
        "id": 193351015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586366147
    },
    {
        "content": "<p>and the type in 2 is the usual model for the colimit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>→</mo><mi>α</mi><mo>→</mo><mi>α</mi><mo>→</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\alpha\\to\\alpha\\to\\alpha\\to\\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span>.</p>",
        "id": 193351184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586366234
    },
    {
        "content": "<p>Do we have some of these in <code>mathlib</code>?</p>",
        "id": 193351659,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586366454
    },
    {
        "content": "<p>I guess we might well have general limits and colimits now, so perhaps the question reduces to (a) do we have the small category with objects indexed by nat and Hom(a,b)=(a&lt;=b) (or more generally do we have the small category associated to a preorder) and (b) do we have the machinery to define a functor from this nat category to an arbitrary category (e.g. Type) by just saying where the maps associated to a proof of a&lt;=succ(a) go.</p>",
        "id": 193352026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586366630
    },
    {
        "content": "<p>We have an instance <code>preorder.small_category</code>.</p>",
        "id": 193352456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586366829
    },
    {
        "content": "<p>So it would be an amusing exercise to define a functor from nat to Type sending all objects to alpha, and sending h:a&lt;=b to f^{b-a}, but whether this is in already I don't know.</p>",
        "id": 193352690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586366935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Name.3F/near/193345603\" title=\"#narrow/stream/116395-maths/topic/Name.3F/near/193345603\">said</a>:</p>\n<blockquote>\n<p>What are the proper names of the following two construction?</p>\n<ol>\n<li>Given a map <code>f : α → α</code>, consider the space of sequences <code>x : ℕ → α</code> such that <code>x n = f (x (n + 1))</code>; the left shift is an injective map on this space, and it is bijective if <code>f</code> was surjective.</li>\n</ol>\n</blockquote>\n<p>In general, one considers instead the space of sequences <code>y : \\Z → α</code>such that <code>y (n + 1) = f (y n)</code> for all <code>n</code>. Noting that the values of such a sequence for <code>n &gt; 0</code> are completely determined by <code>y 0</code>, it suffices to fix the values <code>y n</code>for <code>n \\le 0</code>, so this is clearly equivalent to you definition. This is called the natural extension of the original system.</p>\n<blockquote>\n<ol start=\"2\">\n<li>Given a map <code>f : α → α</code>, consider the quotient of <code>ℕ × α</code> by <code>(n, x) ~ (n + 1, f x)</code>; if <code>f</code> was injective, then we have an embedding of <code>α</code> into this quotient and <code>f</code> lifts to a bijective map.</li>\n</ol>\n</blockquote>\n<p>I don't know a name for this one. It is a cousin of the suspension of <code>f</code> with roof function <code>r</code>, i.e., taking the quotient of <code>ℕ × α</code> by <code>(x, n + r(x)) ~ (f x, n)</code>.</p>",
        "id": 193352897,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586367014
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 193353063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586367096
    },
    {
        "content": "<ol start=\"2\">\n<li>is not really well behaved as it does not respect compatness. For instance, if <code>α</code> has two points and <code>f</code> is constant.</li>\n</ol>",
        "id": 193353243,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586367185
    },
    {
        "content": "<p>Sorry, you are assuming <code>f</code> is injective, so forget my comment.</p>",
        "id": 193353421,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586367272
    },
    {
        "content": "<p>What does it look like if <code>α = [0, 1]</code> and <code>f (x) = x / 2</code>?</p>",
        "id": 193353849,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586367517
    },
    {
        "content": "<ol start=\"2\">\n<li>looks like the inductive limit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>⊂</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>⊂</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mo>⊂</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]\\subset[0,2]\\subset[0,4]\\subset\\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> so it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>.</li>\n</ol>",
        "id": 193354992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586368133
    },
    {
        "content": "<p>I'm assuming alpha isn't a list here ;-)</p>",
        "id": 193355100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586368202
    },
    {
        "content": "<p>I'm also assuming that things which are the same, are equal.</p>",
        "id": 193355230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586368276
    },
    {
        "content": "<p>How would you call the following object?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">i_need_a_name</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bilin</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lin</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">i_need_a_name</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f.bilin</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f.lin</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f.c</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 229954976,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615509665
    },
    {
        "content": "<p>Do you mean <code>.bilin x x</code>?</p>",
        "id": 229955393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615509953
    },
    {
        "content": "<p>Perhaps <code>affine_bilin_form</code>?</p>",
        "id": 229955681,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615510088
    },
    {
        "content": "<p>You wouldn't call this anything, because it should be more generally defined using the tensor algebra.</p>",
        "id": 229956719,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615510732
    },
    {
        "content": "<p>But if I had to choose a name, I think Heather's suggestion is good!</p>",
        "id": 229956794,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615510796
    },
    {
        "content": "<p>I guess the tensor version would look something like<code>(⨁ n : fin 3, ⨂[k] _ : fin n, E) →ₗ[k] E</code>, composed with a function mapping <code>x</code> to <code>1 + x + x ⊗ x</code></p>",
        "id": 229958211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615511648
    },
    {
        "content": "<p>I mean, this is a special case of a linear map from the tensor algebra of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span></p>",
        "id": 229958275,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615511698
    },
    {
        "content": "<p>how would you define <code>i_need_a_name.as_tensor_algebra_linear_map</code>?</p>",
        "id": 229958514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615511829
    },
    {
        "content": "<p>Wait, not it's not. And I'm confused anyway. A bilinear form on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> takes values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>. How do you add that to an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>?</p>",
        "id": 229958528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615511846
    },
    {
        "content": "<p>I think there are problems with the above code.</p>",
        "id": 229958640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615511896
    },
    {
        "content": "<p>I assume Yuri wanted a bilinear map, not a bilinear form.</p>",
        "id": 229958661,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615511915
    },
    {
        "content": "<p>I guess I'd call it \"rejected by the typechecker\"</p>",
        "id": 229958667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615511919
    },
    {
        "content": "<p>The tensor algebra up to degree 2 looks like this:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>⊕</mo><mi>E</mi><mo>⊕</mo><mi>E</mi><msub><mo>⊗</mo><mi>k</mi></msub><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">k \\oplus E \\oplus E \\otimes_k E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span><br>\nSo a linear map from this to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> consists of the following data:</p>\n<ol>\n<li>a bilinear map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>×</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E \\times E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>.</li>\n<li>a linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E \\to E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>.</li>\n<li>a constant in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>.</li>\n</ol>",
        "id": 229959392,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615512385
    },
    {
        "content": "<p>That's exactly what <code>i_need_a_name</code> is (or at least I assume it should be, if one replaces <code>bilin_form</code> with <code>bilin_map</code> or something like that)</p>",
        "id": 229959431,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615512418
    },
    {
        "content": "<p>Note that the identification between bilinear forms and the tensor product only works in finite dimension. For instance, on a Hilbert space the scalar product is <em>not</em> an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo>∗</mo></msup><mo>⊗</mo><msup><mi>E</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">E^* \\otimes E^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.772026em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> (because the elements of the tensor product have finite rank). So, if you want to do this in more general situations, the tensor product approach is not a good choice.</p>",
        "id": 229983790,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615530896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Name.3F/near/229958667\">said</a>:</p>\n<blockquote>\n<p>I guess I'd call it \"rejected by the typechecker\"</p>\n</blockquote>\n<p>I'm sorry for the typos. Fixed now. <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>: I'm going to rewrite some of theorems about inner product in a Hilbert space in terms of this object. This is useful, e.g., to show (some day in the future) that the Dirichlet problem in the disc has a solution in the appropriate Sobolev space. In this case you have <code>f x = q x + l x + c</code> where <code>q</code> is a quadratic form (not necessarily the one coming from the inner product) and you need to minimize it. Another goal is to use theorems like <code>is_local_min_on.has_fderiv_within_at_eq_zero</code> instead of manually choosing <code>ε</code>s.</p>",
        "id": 229984576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615531570
    }
]