[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom_instances</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">add_monoid_hom</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">comp_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"c1\">-- oops</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">id_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">comp_id</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">comp_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">comp_add</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">add_comp</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">add_monoid_hom.add_comm_monoid</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Do we not have this instance? I couldn't find it. The proof is so beautiful, all the fields are there already in the <code>add_monoid_hom</code> namespace. But is this evidence that we got <code>add_monoid_hom.comp_assoc</code> backwards?</p>",
        "id": 241593485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622840904
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.endomorphism_semiring\">docs#linear_map.endomorphism_semiring</a></p>",
        "id": 241594332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622841426
    },
    {
        "content": "<p>and of course any add_comm_monoid is a nat-semimodule in a unique way.</p>",
        "id": 241594383,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622841455
    },
    {
        "content": "<p>I expected this to work, but it doesn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 241594658,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622841632
    },
    {
        "content": "<p>it does have the monoid instance though, so that's a bit of a shortcut</p>",
        "id": 241594680,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622841649
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid.End.monoid\">docs#add_monoid.End.monoid</a>, I assume?</p>",
        "id": 241595352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842106
    },
    {
        "content": "<p>Yeah, that's what I mean by \"the monoid instance\"</p>",
        "id": 241595364,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622842133
    },
    {
        "content": "<p>I guess there's a <code>semiring (additive (monoid.End M))</code> instance to be declared too?</p>",
        "id": 241595460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842209
    },
    {
        "content": "<p>No, I don't think so. The addition on <code>(additive (monoid.End M))</code> is almost never commutative</p>",
        "id": 241595493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622842241
    },
    {
        "content": "<p>Maybe I'm misunserstanding what you want here...</p>",
        "id": 241595629,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622842337
    },
    {
        "content": "<p>Hmm, I mean the semiring where <code>*</code> is composition and <code>+</code> is multiplication in the codomain</p>",
        "id": 241595632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842339
    },
    {
        "content": "<p>Maybe that's a bad way to spell that</p>",
        "id": 241595646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842349
    },
    {
        "content": "<p>Ah I see... so you want the <code>additive</code> to decorate <code>M</code>.</p>",
        "id": 241595676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622842378
    },
    {
        "content": "<p><code>semiring (monoid.End (additive M))</code></p>",
        "id": 241595715,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622842409
    },
    {
        "content": "<p>I guess that's probably <code>add_monoid.End (additive M)</code> anyway, which is the original instance</p>",
        "id": 241595717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842410
    },
    {
        "content": "<p>Kevin, I don't get your assoc claim; the instance that already proves it does not have the symm</p>",
        "id": 241595901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842538
    },
    {
        "content": "<p>Perhaps the proof is just rfl anyway so lean doesn't care if you get it backwards</p>",
        "id": 241595955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842563
    },
    {
        "content": "<p>Yes it's refl so I now agree that I could be wrong</p>",
        "id": 241596954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622843273
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.comp_assoc\">docs#add_monoid_hom.comp_assoc</a> for reference</p>",
        "id": 241597442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622843659
    },
    {
        "content": "<p>I think you're wrong?</p>",
        "id": 241597452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622843685
    },
    {
        "content": "<p>c.f. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_assoc\">docs#mul_assoc</a></p>",
        "id": 241597490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622843714
    },
    {
        "content": "<p><code>mul_assoc := λ _ _ _, comp_assoc _ _ _,</code> does work, so there's a chance I'm wrong, (and indeed <code>mul_assoc := λ _ _ _, rfl</code> works too, unsurprisingly) but <code>mul_assoc := comp_assoc</code> does _not_ work, so if I'm wrong, then why doesn't it work?</p>",
        "id": 241650393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622918189
    },
    {
        "content": "<p>Got it!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">comp_assoc</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>So my revised claim is that <code>add_monoid_hom.comp_assoc</code> has its inputs in the wrong order according to Lean's style.</p>",
        "id": 241650658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622918539
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.comp.assoc\">docs#function.comp.assoc</a> is in the right order</p>",
        "id": 241650743,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622918685
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">monoid_hom.comp_assoc</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→*</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">h.comp</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">h.comp</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The counter-argument is that \"we apply f first when composing these homs, so it must be the first input\". Do we buy this?</p>",
        "id": 241650746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622918690
    },
    {
        "content": "<p>So yes, I think this is an issue with <code>add_monoid_hom.comp_assoc</code></p>",
        "id": 241650748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622918699
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.comp_assoc\">docs#add_monoid_hom.comp_assoc</a> must have been written by a category theorist</p>",
        "id": 241650764,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622918731
    },
    {
        "content": "<p>Is Eric a category theorist?</p>",
        "id": 241650819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622918786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/add_monoid_hom.2Ecomp_assoc.20is.20the.20wrong.20way.20around/near/241650819\">said</a>:</p>\n<blockquote>\n<p>Is Eric a category theorist?</p>\n</blockquote>\n<p><em>future</em> category theorist ;)</p>",
        "id": 241650824,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622918804
    },
    {
        "content": "<p>Or maybe he's a future topologist who doesn't like monodromy.</p>",
        "id": 241650915,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622918928
    },
    {
        "content": "<p>I doubt I wrote that</p>",
        "id": 241652888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622921687
    },
    {
        "content": "<p>I probably just touched it in a refactor</p>",
        "id": 241652891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622921700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> is this a situation where it's impossible to please all of the people all of the time?</p>",
        "id": 241654427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622924126
    },
    {
        "content": "<p>I think the order of the arguments to <code>monoid_hom.comp_assoc</code> should be consistent with the order to <code>monoid_hom.comp</code>, so this is probably just an accident that can be fixed.</p>",
        "id": 241657213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622928996
    }
]