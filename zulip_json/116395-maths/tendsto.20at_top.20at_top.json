[
    {
        "content": "<p>I'm trying to work out how filters work. Is the following true/easy to prove. Which is the better way to state that a function goes to infinity.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">abs</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">abs</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">le_trans</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">abs</span>\n</pre></div>",
        "id": 148827429,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543533111
    },
    {
        "content": "<p>Okay. I managed to prove this. My first experience dealing with filters.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_at_top_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">directed</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">directed</span> <span class=\"n\">ge</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">}),</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hzx</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hz</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hzx</span><span class=\"o\">),</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hzx</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hz</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hzx</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tendsto_at_top</span><span class=\"o\">,</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">infi_sets_eq</span> <span class=\"n\">this</span> <span class=\"n\">hα</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 148833438,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543540942
    },
    {
        "content": "<p>Is there a better way of stating <code>directed has_le.le id</code>?</p>",
        "id": 148833637,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543541255
    },
    {
        "content": "<p>I don't think so; there are directed sets and directed images but directed types haven't come up. Using <code>directed (&lt;=) (@id a)</code> should work fine</p>",
        "id": 148837870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543547900
    },
    {
        "content": "<p>If you want to define convergence to infinity in C, or another metric space, it looks strange to introduce an artificial order. It would probably be more natural to introduce a filter <code>at_infinity</code>, generated by the complements of closed balls with arbitrary center and radius. Another good exercise with filters :) Even better, show that this filter is trivial if and only if the space is bounded (but you will need #PR464 for the notion of boundedness in a metric space)</p>",
        "id": 148845760,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543562052
    },
    {
        "content": "<p>I guess that the usual filter here is the one used in the alexandroff one point compactification - the complements of compact sets</p>",
        "id": 148846186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543562916
    },
    {
        "content": "<p>I agree the order thing looks very artificial</p>",
        "id": 148846197,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543562983
    },
    {
        "content": "<p>We could go straight to <a href=\"https://en.wikipedia.org/wiki/End_(topology)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/End_(topology)\">https://en.wikipedia.org/wiki/End_(topology)</a> but I guess that the infinity filter in a normed real vector space is a better first target</p>",
        "id": 148846260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543563104
    },
    {
        "content": "<p>You really have two natural filters, which do not coincide in general (but do coincide in proper spaces): the complements of compact sets, and the complements of bounded sets. I have had more use in my own research for the second one, but both are definitely relevant.</p>",
        "id": 148846681,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543563937
    },
    {
        "content": "<p>I guess the preorder looks strange to mathematicians because on the whole they don't usually deal with the concept of a preorder, like semirings look strange. Chris is taking a metric space and a point, and looking at the \"distance to that point\" real-valued function; and any function from any space to the reals gives a pre-order structure on the the space because in contrast to partial offers you can just pull back a preorder along an arbitrary map. Why this doesn't come up more often I don't know, but I agree that it looks strange.</p>",
        "id": 148846684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543563950
    },
    {
        "content": "<p>One problem with this order thing is that it depends on the choice of a basepoint, while this can be avoided with the more usual approaches.</p>",
        "id": 148846741,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543564026
    }
]