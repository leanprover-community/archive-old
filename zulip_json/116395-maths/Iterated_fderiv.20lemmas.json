[
    {
        "content": "<p>For the Schwartz functions, I have to PR some calculations for <code>iterated_fderiv</code>s (for example calculate the <code>iterated_fderiv</code> of a sum). I don't need the full generality, but this is obviously not the mathlib style. So I generalized to the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iterated_fderiv_within_add</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff_on</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff_on</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">iterated_fderiv_within</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n  <span class=\"n\">iterated_fderiv_within</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">iterated_fderiv_within</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but what I actually need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iterated_fderiv_add_apply</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">):</span>\n  <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Now the questions: is the first one sufficiently general? and do you want to have more 'trivial' lemmas in-between?<br>\n<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span></p>",
        "id": 292279802,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659821055
    },
    {
        "content": "<p>Mostly out of curiosity: can you replace the λ with <code>f + g</code>?</p>",
        "id": 292280102,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659821490
    },
    {
        "content": "<p>yes, that should be possible. At some point there were coercions there, this is why I had the λ</p>",
        "id": 292281711,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659823814
    },
    {
        "content": "<p>I have the proof</p>",
        "id": 292286657,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659831773
    },
    {
        "content": "<p>I have the proof</p>",
        "id": 292286658,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659831774
    },
    {
        "content": "<p>I’ll do it as soon as I get home</p>",
        "id": 292286659,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659831774
    },
    {
        "content": "<p>I needed the same things for distributions but I didn’t PR it</p>",
        "id": 292286660,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659831774
    },
    {
        "content": "<p>I have the proof</p>",
        "id": 292286661,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659831774
    },
    {
        "content": "<p>I needed the same things for distributions but I didn’t PR it</p>",
        "id": 292286662,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659831774
    },
    {
        "content": "<p>Whoops the subway mixed my messages</p>",
        "id": 292286677,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659831808
    },
    {
        "content": "<p>Shouldn't you only need differentiability for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>C</mi><mi>c</mi><mi mathvariant=\"normal\">∞</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">C_c^\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9303em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>? I need these because I actually have to estimate the derivative and for that reason I need only <code>add</code>, <code>neg</code>, and <code>const_smul</code>, but not <code>sub</code>.</p>",
        "id": 292287390,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659832811
    },
    {
        "content": "<p>I am curious to see your proofs as they are probably way better than mine (they are in <a href=\"https://github.com/leanprover-community/mathlib/pull/15850\">#15850</a> if you are interested)</p>",
        "id": 292287477,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659832965
    },
    {
        "content": "<p>Here are my proofs (not guaranteed to work with current mathlib, but I can fix this) : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iterated_fderiv_add</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">nf</span> <span class=\"n\">ng</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"n\">nf</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"n\">ng</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hif</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">nf</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hig</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ng</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hif'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nf</span> <span class=\"o\">:=</span>\n      <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">with_top.coe_lt_coe.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hif</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hig'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ng</span> <span class=\"o\">:=</span>\n      <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">with_top.coe_lt_coe.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hig</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hdf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">cont_diff_iff_continuous_differentiable.mp</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span> <span class=\"n\">hif'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hdg</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">cont_diff_iff_continuous_differentiable.mp</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span> <span class=\"n\">hig'</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n        <span class=\"bp\">=</span> <span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n            <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hi</span> <span class=\"n\">hif'.le</span> <span class=\"n\">hig'.le</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n              <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n            <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.add_def</span><span class=\"o\">,</span> <span class=\"n\">fderiv_add</span> <span class=\"n\">hdf.differentiable_at</span> <span class=\"n\">hdg.differentiable_at</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iterated_fderiv_smul</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">nf</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"n\">nf</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hif</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">nf</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hif'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nf</span> <span class=\"o\">:=</span>\n      <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">with_top.coe_lt_coe.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hif</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hdf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">cont_diff_iff_continuous_differentiable.mp</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span> <span class=\"n\">hif'</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n        <span class=\"bp\">=</span> <span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n            <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hi</span> <span class=\"n\">hif'.le</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n            <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_def</span><span class=\"o\">,</span> <span class=\"n\">fderiv_const_smul</span> <span class=\"n\">hdf.differentiable_at</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">iterated_fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292294346,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659842779
    },
    {
        "content": "<p>As you can see I have it only for <code>iterated_fderiv</code>, so that should definitely be generalized, <del>but I also take care of the case where <code>n</code> is infinite</del> (edit: this is stupid, I should read the statement I wrote before writing)</p>",
        "id": 292294375,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659842846
    },
    {
        "content": "<p>I think our proofs are fundamentally the same, and it is a shame that we have to do all this work, but at least mines are a bit structured (I actually thought it was much worse)</p>",
        "id": 292294681,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659843260
    },
    {
        "content": "<p>(Oh and sorry for the delay, I wasn't stuck in the subway, I just had to prepare some things because I'm flying back to France tomorrow)</p>",
        "id": 292294734,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659843358
    },
    {
        "content": "<p>Oh and what do you think about the <code>(i : with_top ℕ) ≤ nf</code> setup so that we don't have to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff.of_le\">docs#cont_diff.of_le</a> ? It was convenient in my case but I guess it would be more annoying in general, right ?</p>",
        "id": 292295229,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659843969
    },
    {
        "content": "<p>I've just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/15902\">#15902</a> with the core proofs adapted to the more general setup. I probably won't have a lot of time to finish the PR tomorrow, so feel free to add all the variants and take over the PR if you'd like it merged quickly</p>",
        "id": 292297558,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659847089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/116395-maths/topic/Iterated_fderiv.20lemmas/near/292287390\">said</a>:</p>\n<blockquote>\n<p>Shouldn't you only need differentiability for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>C</mi><mi>c</mi><mi mathvariant=\"normal\">∞</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">C_c^\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9303em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>? I need these because I actually have to estimate the derivative and for that reason I need only <code>add</code>, <code>neg</code>, and <code>const_smul</code>, but not <code>sub</code>.</p>\n</blockquote>\n<p>Yes you don't need it to define the <em>space</em>. But the topology is defined by pulling back the topology on bounded continuous maps along each <code>iterated_fderiv</code> and then take the infimum, so you definitely want linearity to get a bunch of properties for free (TVS, locally convex, family of seminorms, ...)</p>",
        "id": 292297642,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659847203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Iterated_fderiv.20lemmas/near/292297558\">said</a>:</p>\n<blockquote>\n<p>I've just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/15902\">#15902</a> with the core proofs adapted to the more general setup. I probably won't have a lot of time to finish the PR tomorrow, so feel free to add all the variants and take over the PR if you'd like it merged quickly</p>\n</blockquote>\n<p>Thanks, I've generalized the scalar multiplication and added the lemmas for <code>iterated_fderiv</code>.</p>",
        "id": 292309843,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659864811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Iterated_fderiv.20lemmas/near/292295229\">said</a>:</p>\n<blockquote>\n<p>Oh and what do you think about the <code>(i : with_top ℕ) ≤ nf</code> setup so that we don't have to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff.of_le\">docs#cont_diff.of_le</a> ? It was convenient in my case but I guess it would be more annoying in general, right ?</p>\n</blockquote>\n<p>I don't have strong feelings about that. I might be very slightly in favor of having the strict condition (with <code>i</code>, not <code>nf</code>), because it saves you from using <code>eq.le</code> in some places.</p>",
        "id": 292310262,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659865363
    },
    {
        "content": "<p>Have a save flight.</p>",
        "id": 292310354,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659865453
    }
]