[
    {
        "content": "<p>Here's a proof of Faulhaber's theorem:<br>\n<a href=\"https://github.com/mo271/faulhaber/blob/master/src/faulhaber_with_power_series.lean\">https://github.com/mo271/faulhaber/blob/master/src/faulhaber_with_power_series.lean</a><br>\nI did this together with Fabian Kruse. <br>\nI think there are some lemmas in that proof that might be nice to have in mathlib. It's probably looking quite ugly to more experienced lean users, but at least I see a \"goals accomplished <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>\" in the end.</p>\n<p>Is there a linter for lean somewhere?</p>",
        "id": 226874769,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613680052
    },
    {
        "content": "<p>Well done!</p>",
        "id": 226874957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613680119
    },
    {
        "content": "<p>There isn't a style linter. But you can write <code>#lint</code> at the bottom of the file to get some useful feedback</p>",
        "id": 226874996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613680137
    },
    {
        "content": "<p>Things like: your theorem doesn't use hypothesis <code>h</code>, or this <code>def</code> is missing a docstring (all <code>def</code>s in mathlib are required to have docstrings), or a lemma that shouldn't be marked <code>simp</code>, etc...</p>",
        "id": 226875141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613680199
    },
    {
        "content": "<p>There's a very basic style linter script used in mathlib's CI that just checks things like line length, but you might have to do some hacking to get it to run outside of mathlib: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/lint-style.sh\">https://github.com/leanprover-community/mathlib/blob/master/scripts/lint-style.sh</a></p>",
        "id": 226875248,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613680230
    },
    {
        "content": "<p>I guess I only care about the formatting and linting for the stuff I'd submit as a pr to mathlib. Reading naming conventions and code style guide now..</p>",
        "id": 226876011,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613680524
    },
    {
        "content": "<p>I think the whole thing would be welcome in mathlib, if you have the energy! (but of course it's reasonable to start by PR'ing just some of the supporting lemmas)</p>",
        "id": 226876234,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1613680613
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_power_series'</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℚ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">power_series.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">bernoulli</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I think <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> recently brought this to mathlib (-;</p>",
        "id": 226877012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613680938
    },
    {
        "content": "<p>Cool, I suppose small PRs are prefered, so submitting each of relevant lemmas separately is preferred to one larger PR</p>",
        "id": 226877055,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613680960
    },
    {
        "content": "<p>Yeah, certainly for a first PR I would aim for ~50 lines</p>",
        "id": 226877201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613681032
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">expk</span>\n</code></pre></div>\n<p><del>I think this is <code>power_series.exp</code></del></p>",
        "id": 226877264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613681045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226877012\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_power_series'</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℚ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">power_series.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">bernoulli</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> recently brought this to mathlib (-;</p>\n</blockquote>\n<p>That's great. I thought I had just synced I can't see it in bernoulli.lean</p>",
        "id": 226877312,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613681068
    },
    {
        "content": "<p>Ooh, scratch that... I can't read</p>",
        "id": 226877315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613681070
    },
    {
        "content": "<p>what was recently added is bernoulli_odd_eq_zero, which is most useful here of course..</p>",
        "id": 226877378,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613681101
    },
    {
        "content": "<p>Let me check the sources</p>",
        "id": 226877423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613681121
    },
    {
        "content": "<p>You are right... I'm too sloppy in my feedback. Sorry.</p>",
        "id": 226877699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613681245
    },
    {
        "content": "<p>good, I though there were some secret branches beside master or search was broken or something...</p>",
        "id": 226877809,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613681286
    },
    {
        "content": "<p>I think Ashvni has a Bernoulli polynomial branch, but I suggested that she waited until this PR was accepted before she made the next PR. I'll see if her next branch is ready.</p>",
        "id": 226877930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613681351
    },
    {
        "content": "<p>Looking forward to seeing what   <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span>  has!</p>",
        "id": 226878955,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613681756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226877012\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_power_series'</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℚ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">power_series.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">bernoulli</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> recently brought this to mathlib (-;</p>\n</blockquote>\n<p>Hello! Glad to know Faulhaber's theorem is on the way :) <br>\nAlso, the above theorem is in mathlib in bernoulli.lean, the name is <code>bernoulli_power_series</code>.</p>",
        "id": 226890355,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613686155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226874769\">said</a>:</p>\n<blockquote>\n<p>Here's a proof of Faulhaber's theorem:<br>\n<a href=\"https://github.com/mo271/faulhaber/blob/master/src/faulhaber_with_power_series.lean\">https://github.com/mo271/faulhaber/blob/master/src/faulhaber_with_power_series.lean</a><br>\nI did this together with Fabian Kruse. <br>\nI think there are some lemmas in that proof that might be nice to have in mathlib. It's probably looking quite ugly to more experienced lean users, but at least I see a \"goals accomplished <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>\" in the end.</p>\n<p>Is there a linter for lean somewhere?</p>\n</blockquote>\n<p>Also, I believe <code>expk</code> and <code>exp_inv</code> are now in <code>mathlib</code>,  as <code>rescale k (exp ℚ)</code> and <code>exp_mul_exp_neg_eq_one</code> respectively.</p>",
        "id": 226891585,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613686480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226878955\">said</a>:</p>\n<blockquote>\n<p>Looking forward to seeing what   <span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span>  has!</p>\n</blockquote>\n<p>The next PR (which I can make once <code>leanpkg build</code> confirms everything is okay) will be about Bernoulli polynomials. Here is the branch : <a href=\"https://github.com/leanprover-community/mathlib/tree/bernoulli-polynomials\">https://github.com/leanprover-community/mathlib/tree/bernoulli-polynomials</a></p>",
        "id": 226892074,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613686629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> Here's a style thing. Rather than doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"bp\">...</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"bp\">...</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 226892242,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613686693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226892242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> Here's a style thing. Rather than doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"bp\">...</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>you can do</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"bp\">...</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is this the recommended style now? I pretty much exclusively use the former as I always like there to be only 1 goal at a time wherever you click.</p>",
        "id": 226908492,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613697536
    },
    {
        "content": "<p>That's still be the case inside the <code>{ ... }</code>.</p>",
        "id": 226908784,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613697752
    },
    {
        "content": "<p>You shouldn't use <code>have := begin end</code> in tactic mode, because that nests a tactic block inside a term inside a tactic block, which takes longer to parse/elaborate and also leads to more nested contexts in error messages</p>",
        "id": 226908942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613697869
    },
    {
        "content": "<p>In <code>have : T, { ... }</code> the <code>...</code> is still part of the main tactic block structure</p>",
        "id": 226909015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613697940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226908784\">said</a>:</p>\n<blockquote>\n<p>That's still be the case inside the <code>{ ... }</code>.</p>\n</blockquote>\n<p>Of course, I was just explaining my weird internal reasoning <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> of not liking having two goals after writing comma lol.</p>",
        "id": 226909335,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613698174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226908942\">said</a>:</p>\n<blockquote>\n<p>You shouldn't use <code>have := begin end</code> in tactic mode, because that nests a tactic block inside a term inside a tactic block, which takes longer to parse/elaborate and also leads to more nested contexts in error messages</p>\n</blockquote>\n<p>Very good to know thanks, should we add this to the style guide then (assuming its not already there and I'm not missing it).</p>",
        "id": 226909420,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613698221
    },
    {
        "content": "<p>Looks like there are a few (&lt; 10) instances of this pattern in mathlib, at least one due to me...</p>",
        "id": 226909706,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613698470
    },
    {
        "content": "<p>It's not a really big deal, certainly nested tactic blocks come up in patterns like <code>exact foo (by simp) bar</code>, but if you want to shove a whole sequence of tactics in there you can always pop it out as a subgoal using <code>refine</code></p>",
        "id": 226909787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613698557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226890355\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226877012\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_power_series'</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℚ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">power_series.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">bernoulli</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> recently brought this to mathlib (-;</p>\n</blockquote>\n<p>Hello! Glad to know Faulhaber's theorem is on the way :) <br>\nAlso, the above theorem is in mathlib in bernoulli.lean, the name is <code>bernoulli_power_series</code>.</p>\n</blockquote>\n<p>I think <code>bernoulli_power_series</code> in bernoulli.lean is the version with bernoulli numbers without the (-1)^n (which only makes a difference for <code>bernoulli 1</code>, but still it is a different power series. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_power_series</span> <span class=\"o\">:</span>\n  <span class=\"n\">power_series.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bernoulli</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℚ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">ℚ</span>\n</code></pre></div>\n<p>In our proof for <code>bernoulli_power_series'</code> we use <code>bernoulli_power_series</code> this essentially then just follows by substituting (-X) for (X). </p>\n<p>In general some formulas would be prettier using a definition <code>bernoulli' n := (-1)^n*bernoulli n</code>. Wikipedia says  the convention currently used in lean is \"sometimes used in the older literature\".   However for Faulhaber's theorem the formula becomes slightly prettier with lean's definition, since using the convention with <code>bernoulli 1 = + 1/2</code>, there is no (-1)^k appearing. I have no strong opinion on what convention is better.</p>",
        "id": 226931397,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613722171
    },
    {
        "content": "<p>Eberl told me that when he was thinking about this stuff in Isabelle he couldn't figure out which one was \"the canonical Bernoulli number\" so just did both, which is why we also have both. Eberl told me that Knuth had a strong opinion about which one was \"right\" but that he couldn't really understand it. Knuth's opinion might be biased towards combinatorial applications anyway. My gut feeling is that it's something to do with the fact that the Riemann zeta function has a functional equation relating <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\zeta(s)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\zeta(1-s)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> and the two conventions somehow correspond to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>−</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">1-s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> points of view -- but there's something funny going on with the pole at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">s=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> which makes things inevitably asymmetric. Note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">s=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is in some sense the only positive odd integer value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> for which we understand <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\zeta(s)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> in some sense.</p>",
        "id": 226932004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613722561
    },
    {
        "content": "<p>What do you mean by \"we also have both\"? I see only the comment \"To get the \"minus\" convention, just use <code>(-1)^n * bernoulli n</code>.\" But then the formula for the corresponding power series is missing, and  <code>(-1)^n * bernoulli n</code> isn't used in any theorems or lemmas. The zeta function stuff makes sense.</p>",
        "id": 226932724,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613723083
    },
    {
        "content": "<p><a href=\"http://luschny.de/math/zeta/The-Bernoulli-Manifesto.html\">http://luschny.de/math/zeta/The-Bernoulli-Manifesto.html</a></p>",
        "id": 226933131,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613723385
    },
    {
        "content": "<p>Wow! That's pretty polemic</p>",
        "id": 226934683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613724415
    },
    {
        "content": "<p>Oh, in some earlier version of the work we had <code>bernoulli_neg n := ...</code> for the other variant. </p>\n<p>What convinced me that this was just bikeshedding was that the formula for sum of k'th powers for i&lt;n and i&lt;=n are different, of course they differ by n^k, and if you write down the polynomials of degree k+1 representing these sums then the smaller one has coefficient -1/2*n^k and the larger one +1/2*n^k. So asking about which one is best is like arguing which is best out of &lt; and &lt;=. It's not surprising that the computer scientists prefer &lt; for sums (because it's more functorial) and the number theorists prefer &lt;= (because product of power series uses i+j=n so 0&lt;=i&lt;=n). e.g. Knuth likes -1/2 and Conway likes +1/2.</p>",
        "id": 226935307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613724790
    },
    {
        "content": "<p>The other issue is that Bernoulli polynomials have this internal symmetry s -&gt; 1-s, related again I think to the functional equation of the zeta function, and the bernoulli numbers are either the values are 0 of these polynomials, or the values at 1, depending on which convention you use. The zeta function has a pole at 1 and everyone agrees with this, and I think that the two conventions are in some sense some weird consequence of this.</p>",
        "id": 226935653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613725022
    },
    {
        "content": "<p><code>bernoulli_neg</code> is now on its way! (<a href=\"https://github.com/leanprover-community/mathlib/pull/6309\">https://github.com/leanprover-community/mathlib/pull/6309</a>) Unfortunately, I removed the <code>bernoulli_neg_power_series</code> version at the last moment, so a proof exists in previous commits. I could take a look and PR that too, if you need it, <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> .</p>",
        "id": 226947304,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613731859
    },
    {
        "content": "<p>Is \"negative Bernoulli number\" standard terminology?</p>",
        "id": 226955806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613737357
    },
    {
        "content": "<p>Otherwise I would suggest calling them <code>bernoulli'</code> or something like that.</p>",
        "id": 226955874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613737393
    },
    {
        "content": "<p>They're called bernoulli and bernoulli' in <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Bernoulli/Bernoulli.html\">Isabelle</a>, however the primed one is our bernoulli. Perhaps we should go with the \"all the computer algebra packages say B_1=-1/2\" idea and rename our original bernoulli numbers to the primed ones?</p>",
        "id": 226956329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613737632
    },
    {
        "content": "<p>It would be good to be consistent, to the extent possible.</p>",
        "id": 226956845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613737949
    },
    {
        "content": "<p>Yeah I am now concerned that our choice of +1/2 is not used in pari-gp or on the Wolfram Alpha page. Wikipedia used two notations for them (and of course 99% of the time people are only talking about the even ones so you can use B_n unambiguously). Maybe we should redefine bernoulli to be bernoulli' and bernoulli_neg to be bernoulli.</p>",
        "id": 226957236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613738221
    },
    {
        "content": "<p>In sagemath bernoulli(1) is -1/2, so I guess switching the names between bernoulli and bernoulli_neg might make sense.</p>",
        "id": 226957260,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613738233
    },
    {
        "content": "<p>The guy from the Manifesto thinks we made the right choice, isn't it? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 226957396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613738317
    },
    {
        "content": "<p>Yeah I'm not sure I'm going to place too much weight on the manifesto guy.</p>",
        "id": 226957446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613738356
    },
    {
        "content": "<p>Ok so I'm assuming it's -1/2 in mathematica given that that's what it says on the wolfram alpha page, so I am definitely behind switching names. I'm not suggesting a refactor of the maths, just putting primes everywhere. I hadn't realised there was some essentially universally-agreed upon convention, I'd just read Wikipedia which as I say tended to treat both cases independently and not get drawn about \"the\" value of B(1).</p>",
        "id": 226957602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613738471
    },
    {
        "content": "<p>is it ok to have \"+\" or \"-\" in a name, then we could take bernoulli+ and bernoulli- or since utf is working we could go with  bernoulli♯  bernoulli♭ <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 226957745,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613738549
    },
    {
        "content": "<p><code>+</code> and <code>-</code> won't work</p>",
        "id": 226957825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613738608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226947304\">said</a>:</p>\n<blockquote>\n<p><code>bernoulli_neg</code> is now on its way! (<a href=\"https://github.com/leanprover-community/mathlib/pull/6309\">https://github.com/leanprover-community/mathlib/pull/6309</a>) Unfortunately, I removed the <code>bernoulli_neg_power_series</code> version at the last moment, so a proof exists in previous commits. I could take a look and PR that too, if you need it, <span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> .</p>\n</blockquote>\n<p>Yes, so to summarize, I think it would be useful to have :<br>\n (1) <code>bernoulli n</code>, defined to be consistent with sagemath, parigp etc, so that bernoulli 1 = -1/2<br>\n (2) <code>bernoulli' n</code>, defined in a way that bernoulli' 1 = 1/2 substituting the name \"bernoulli'\" for \"bernoulli\" everywhere. This would mean for example that there will be already a lemma bernoulli' = 1/2.<br>\n (3) a new power_series lemma for the new bernoulli<br>\n (4) perhaps even a lemma like lemma <code>bernoulli_to_bernoulli' (n:ℕ): bernoulli n = (-1)^n * bernoulli' n</code>  and <br>\n<code>bernoulli'_to_bernoulli (n:ℕ) bernoulli' n = (-1)^n * bernoulli n</code>, one of which should be true by definition. <br>\n (5) possibly something like <code>∀ x : ℕ , 1 &lt; n → bernoulli n = (-1)^n * bernoulli n</code>.</p>",
        "id": 226960464,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613740131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226957825\">said</a>:</p>\n<blockquote>\n<p><code>+</code> and <code>-</code> won't work</p>\n</blockquote>\n<p><code>bernoulli«+»</code> and <code>bernoulli«-»</code> are legal... (and identical to <code>«bernoulli+»</code> and <code>«bernoulli-»</code>)</p>",
        "id": 226961582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613740808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226960464\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226947304\">said</a>:</p>\n<blockquote>\n<p><code>bernoulli_neg</code> is now on its way! (<a href=\"https://github.com/leanprover-community/mathlib/pull/6309\">https://github.com/leanprover-community/mathlib/pull/6309</a>) Unfortunately, I removed the <code>bernoulli_neg_power_series</code> version at the last moment, so a proof exists in previous commits. I could take a look and PR that too, if you need it, <span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> .</p>\n</blockquote>\n<p>Yes, so to summarize, I think it would be useful to have :<br>\n (1) <code>bernoulli n</code>, defined to be consistent with sagemath, parigp etc, so that bernoulli 1 = -1/2<br>\n (2) <code>bernoulli' n</code>, defined in a way that bernoulli' 1 = 1/2 substituting the name \"bernoulli'\" for \"bernoulli\" everywhere. This would mean for example that there will be already a lemma bernoulli' = 1/2.<br>\n (3) a new power_series lemma for the new bernoulli<br>\n (4) perhaps even a lemma like lemma <code>bernoulli_to_bernoulli' (n:ℕ): bernoulli n = (-1)^n * bernoulli' n</code>  and <br>\n<code>bernoulli'_to_bernoulli (n:ℕ) bernoulli' n = (-1)^n * bernoulli n</code>, one of which should be true by definition. <br>\n (5) possibly something like <code>∀ x : ℕ , 1 &lt; n → bernoulli n = (-1)^n * bernoulli n</code>.</p>\n</blockquote>\n<p>I am not a fan of changing the definition of <code>bernoulli_neg</code> or <code>bernoulli</code> (since I have now done it twice). I think <code>bernoulli_pos</code> and <code>bernoulli_neg</code> are clear? If not, <code>bernoulli'</code> and <code>bernoulli</code> seem okay too. Everything except (3) exists in the new PR, and I can add (3) soon.</p>",
        "id": 226965249,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613742721
    },
    {
        "content": "<p>Just to be clear -- we're not suggesting changing any of the actual mathematics, just the names of the functions.</p>",
        "id": 226965389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613742794
    },
    {
        "content": "<p>And the new theorem doesn't have to be added in this PR either, but you may as well make the name change</p>",
        "id": 226965545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613742859
    },
    {
        "content": "<p>So I have prepared a commit with the first step towards Faulhaber's theorem.  For this I would like to obtain write access to the mathlib repo, please. My github username is mo271.</p>",
        "id": 227122390,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613859183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> invitation sent!</p>",
        "id": 227122524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613859303
    },
    {
        "content": "<p>Many thanks, that was quick! Made the pull request..</p>",
        "id": 227122850,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613859615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226965249\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/116395-maths/topic/Faulhaber's.20Theorem.20(sum.20of.20kth.20powers)/near/226960464\">said</a>:</p>\n<blockquote>\n<p>[...]<br>\n (3) a new power_series lemma for the new bernoulli<br>\n[...]</p>\n</blockquote>\n<p>I am not a fan of changing the definition of <code>bernoulli_neg</code> or <code>bernoulli</code> (since I have now done it twice). I think <code>bernoulli_pos</code> and <code>bernoulli_neg</code> are clear? If not, <code>bernoulli'</code> and <code>bernoulli</code> seem okay too. Everything except (3) exists in the new PR, and I can add (3) soon.</p>\n</blockquote>\n<p>I think the it's quite good to have now <code>bernoulli</code> and <code>bernoulli'</code>, thanks <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span>!</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/6409\">https://github.com/leanprover-community/mathlib/pull/6409</a> contains a proof of Faulhaber that uses the new lemmas I added during the last few days. It depends on a version of (3), namely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℚ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">power_series.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bernoulli</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>(this is using the new definition of <code>bernoulli</code>). Are you planning to add that <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> ?</p>",
        "id": 227739554,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1614245249
    },
    {
        "content": "<p>I have an almost complete proof, but if you have a proof ready, pls feel free to go ahead with it!</p>",
        "id": 227743817,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1614247454
    },
    {
        "content": "<p>Made a combination of both of our proofs here: <a href=\"https://github.com/leanprover-community/mathlib/pull/6456\">https://github.com/leanprover-community/mathlib/pull/6456</a></p>",
        "id": 228063301,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1614438233
    },
    {
        "content": "<p>Faulhaber's Theorem has now all dependencies resolved and is ready for review here: <a href=\"https://github.com/leanprover-community/mathlib/pull/6409\">#6409</a></p>",
        "id": 230468312,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615878855
    }
]