[
    {
        "content": "<p>I'm starting my algebraic geometry course today, M4P33. <a href=\"https://github.com/ImperialCollegeLondon/M4P33/blob/master/src/affine_algebraic_set/union.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M4P33/blob/master/src/affine_algebraic_set/union.lean\">Here are my notes for lecture 1</a>. Any comments welcome. The lecture is 4-5 in London, I'll use Lean on my laptop at some point and I'll leave Zulip on so that if anyone posts in this thread it'll flash up on the screen lol</p>",
        "id": 185481245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578911967
    },
    {
        "content": "<p>Will tidy it up later but need to do 100 other things first</p>",
        "id": 185481343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578912020
    },
    {
        "content": "<p>Good luck!</p>",
        "id": 185482239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578912967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> How did the first lecture go?</p>",
        "id": 185521398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578940260
    },
    {
        "content": "<p>Well I started late because something else over-ran beforehand, but it seemed to go fine. We talked about the union of two algebraic sets being an algebraic set.</p>",
        "id": 185533302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578946851
    },
    {
        "content": "<p>I'm going to be formalising the proof of the Nullstellensatz in my course soon. Do we already have this in Lean?</p>",
        "id": 185580100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578996081
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"231800\">@Lennard Henze</span> was working on this</p>",
        "id": 185580428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578996339
    },
    {
        "content": "<p>How are things going, Lennard?</p>",
        "id": 185580436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578996352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Did you show those 4th year students Lean during the lecture? If so, how did they react?</p>",
        "id": 185587858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579002608
    },
    {
        "content": "<p>It was a bit hectic :-) because I've got so much to do and had no real time to think about how to explain the Lean. It's in a better state now.</p>",
        "id": 185588465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579003076
    },
    {
        "content": "<p>Naive Question: This does not begin with the definition of affine algebraic sets. If that was not taught in Lecture 1 of Algebraic Geometry, in which course was it taught?</p>",
        "id": 185598087,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1579010615
    },
    {
        "content": "<p>Probably commutative algebra</p>",
        "id": 185598189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579010673
    },
    {
        "content": "<p>We're following <a href=\"https://homepages.warwick.ac.uk/staff/Martin.Orr/2017-8/alg-geom/\" target=\"_blank\" title=\"https://homepages.warwick.ac.uk/staff/Martin.Orr/2017-8/alg-geom/\">these notes</a> by Martin Orr.</p>",
        "id": 185603451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579013879
    },
    {
        "content": "<p>The definition is in there, except I have removed what I believe to be an unnecessary finiteness assumption.</p>",
        "id": 185603517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579013902
    },
    {
        "content": "<p>Yes I was working on that, but I discontinued my work because I was overwhelmed by the task. My work so far can be found here <a href=\"https://github.com/Forsetes/mathlib/blob/hilberts_nullstellensatz/src/ring_theory/noether_normalization.lean\" target=\"_blank\" title=\"https://github.com/Forsetes/mathlib/blob/hilberts_nullstellensatz/src/ring_theory/noether_normalization.lean\">https://github.com/Forsetes/mathlib/blob/hilberts_nullstellensatz/src/ring_theory/noether_normalization.lean</a></p>",
        "id": 185605274,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1579015070
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/M4P33/blob/master/src/abstract_V_and_I.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M4P33/blob/master/src/abstract_V_and_I.lean\">Lecture 3 of my course</a>. Can <em>anyone</em> tell me how to get rid of those bloody <code>P</code>s everywhere?</p>",
        "id": 185904131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579257562
    },
    {
        "content": "<p>Use parameters</p>",
        "id": 185905603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579258893
    },
    {
        "content": "<p>Alternatively, bake the application of <code>P</code> into the notations for V and I as in Sebastian's comment</p>",
        "id": 185905710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579258963
    },
    {
        "content": "<p>What automation does these proofs? Is there a good name for V and I? For all I know they are both <code>comp.left_distrib</code></p>",
        "id": 185906188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579259437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> how close am I to getting lecture 3 into a beautiful html file?</p>",
        "id": 185906212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579259474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I thought notation didn't work with variables?</p>",
        "id": 185906415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579259684
    },
    {
        "content": "<p>I don't know any relevant automation for the last proof, but it is what I would call a one-liner</p>",
        "id": 185906562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579259876
    },
    {
        "content": "<p>You have a lot of <code>??</code> in the proof, did you want to ask a question about it?</p>",
        "id": 185906615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579259905
    },
    {
        "content": "<p>I don't often put free variables in notations because it's confusing, but I think Sebastian's idea will work</p>",
        "id": 185906643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579259950
    },
    {
        "content": "<p>I cut and pasted one proof and then started switching V's to I's, and then it compiled before I had finished :-)</p>",
        "id": 185907002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579260358
    },
    {
        "content": "<blockquote>\n<p>I don't often put free variables in notations because it's confusing, but I think Sebastian's idea will work</p>\n</blockquote>\n<p>What is Sebastian's idea?</p>",
        "id": 185907064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579260387
    },
    {
        "content": "<p>Hm, I had to mess with it a bit, but with this preamble you can replace each <code>ùïç P</code> with <code>ùïç</code> and similarly for <code>ùïÄ</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">W</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">P</span>\n\n<span class=\"n\">def</span> <span class=\"err\">ùïç</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">ùïç</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"err\">ùïç</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"err\">ùïÄ</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">ùïÄ</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"err\">ùïÄ</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185907104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579260438
    },
    {
        "content": "<p>It also works, without the notation, if you just change all the variables to parameters</p>",
        "id": 185907279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579260613
    },
    {
        "content": "<p>Oh I see, your proof of <code>ùïÄùïçùïÄ_eq_ùïÄ</code> goes through because lean noticed that if it substitutes <code>X</code> for <code>S</code> and vice versa then <code>V</code> becomes <code>I</code> and vice versa... so <code>ùïÄùïçùïÄ_eq_ùïÄ</code> and <code>ùïçùïÄùïç_eq_ùïç</code> are actually the same proof</p>",
        "id": 185907402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579260734
    },
    {
        "content": "<p>See?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"err\">ùïÄùïçùïÄ</span><span class=\"bp\">_</span><span class=\"n\">eq_</span><span class=\"err\">ùïÄ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">ùïÄ</span> <span class=\"o\">(</span><span class=\"err\">ùïç</span> <span class=\"o\">(</span><span class=\"err\">ùïÄ</span> <span class=\"n\">V</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"err\">ùïÄ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"err\">ùïçùïÄùïç</span><span class=\"bp\">_</span><span class=\"n\">eq_</span><span class=\"err\">ùïç</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 185907407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579260747
    },
    {
        "content": "<p>If you use parameters, this trick doesn't work</p>",
        "id": 185907432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579260789
    },
    {
        "content": "<blockquote>\n<p>Patrick Massot how close am I to getting lecture 3 into a beautiful html file?</p>\n</blockquote>\n<p>What do you want the html file to look like? Are you aiming for something as on the mathlib website or something as in my lecture notes?</p>",
        "id": 185908985,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579262144
    },
    {
        "content": "<p>Something I could slap up before the end of this lecture at 1:50pm</p>",
        "id": 185914066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579266690
    },
    {
        "content": "<p>which I'm currently giving</p>",
        "id": 185914079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579266698
    },
    {
        "content": "<p>do we not have nilradical in Lean?</p>",
        "id": 185937369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579281467
    },
    {
        "content": "<p>Nope!</p>",
        "id": 185937631,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1579281642
    },
    {
        "content": "<p>Or nilpotents etc. I added some bits at <a href=\"https://github.com/leanprover-community/mathlib/blob/ece70146a142c8b04563c21edb34c87d192b172b/src/ring_theory/dedekind_finite.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/ece70146a142c8b04563c21edb34c87d192b172b/src/ring_theory/dedekind_finite.lean\">https://github.com/leanprover-community/mathlib/blob/ece70146a142c8b04563c21edb34c87d192b172b/src/ring_theory/dedekind_finite.lean</a> but its almost nothing</p>",
        "id": 185937787,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1579281751
    },
    {
        "content": "<p>Today my main achievement was that I managed to reproduce the proof which I knew as a kid of something which I knew couldn't possibly be the Nullstellensatz:</p>\n<p><a href=\"https://github.com/ImperialCollegeLondon/M4P33/blob/ac0a28f19936a7f861ff3c6c0dc57d9b6093e8e6/src/abstract_V_and_I.lean#L151\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M4P33/blob/ac0a28f19936a7f861ff3c6c0dc57d9b6093e8e6/src/abstract_V_and_I.lean#L151\">https://github.com/ImperialCollegeLondon/M4P33/blob/ac0a28f19936a7f861ff3c6c0dc57d9b6093e8e6/src/abstract_V_and_I.lean#L151</a></p>\n<p>I managed to abstract out all of the algebraic geometry completely :D I only import data.set.basic (although there's a joke at the top of the file)</p>",
        "id": 185941507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579284444
    },
    {
        "content": "<blockquote>\n<p>If you use parameters, this trick doesn't work</p>\n</blockquote>\n<p>Right, because P needs to be reversed.</p>",
        "id": 185944812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579286694
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"err\">ùïç</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">ùïç</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"err\">ùïç</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This hack enables me to state theorems the way mathematicians would expect to see them, but when I'm working on proofs I still see the <code>P</code> in the tactic state. Is there any way to get rid of this?</p>",
        "id": 185944869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579286761
    },
    {
        "content": "<p>Is there a one-line tactic which solves this sort of thing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚àà</span> <span class=\"err\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span> <span class=\"n\">i</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I really feel like I'm following my nose at all points and so am hoping this is just the sort of thing that CS people have tacticised</p>",
        "id": 185956929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579295103
    },
    {
        "content": "<p><code>simp, tauto</code></p>",
        "id": 185957312,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579295304
    },
    {
        "content": "<p>Do we have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Over an infinite integral domain a polynomial f is zero iff it</span>\n<span class=\"cm\">    evaluates to zero everywhere -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval_eq_zero</span>  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>? I think you can prove it in the case when n is finite, by induction on the size of n, and then for general n you write the polynomial ring as a filtered colimit of finite n's. </p>\n<p>I would like to prove this myself, if it's not there, but I suspect there might be some quite high-powered ways to do this. For example I don't know whether I'm supposed to be reducing to the case of <code>n = fin m</code> or <code>n : fintype</code> or what. The reduction needs the concept of the variables which appear in f, which might be some sort of monad bind thing?</p>",
        "id": 185961199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579297659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258511\">@Alexander Uhlmann</span> isolated this property at Xena yesterday.</p>",
        "id": 185961290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579297698
    },
    {
        "content": "<blockquote>\n<p><code>simp, tauto</code></p>\n</blockquote>\n<p>i was surprised <code>finish</code> couldn't do it alone, you have to spoon-feed it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚àà</span> <span class=\"err\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span> <span class=\"n\">i</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">finish</span><span class=\"o\">[</span><span class=\"n\">iff_iff_implies_and_implies</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 185982751,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1579329235
    },
    {
        "content": "<p>Urs Schreiber <a href=\"https://ncatlab.org/nlab/show/Nullstellensatz#GeneralAbstract\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/Nullstellensatz#GeneralAbstract\">pointed me to this nLab page</a> on Twitter. Does anyone have a clue what is going on here?</p>",
        "id": 185992349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579348345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I've no idea what's going on there, but I do know that it is completely useless for our purposes. We're miles away from cohesive sheaf toposes.</p>",
        "id": 185997417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579357476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I want to go to bed, so I'm just dumping what I hacked together:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">polynomial</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Over an infinite integral domain a polynomial f is zero if it</span>\n<span class=\"cm\">    evaluates to zero everywhere -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval_eq_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">infinite</span><span class=\"bp\">.</span><span class=\"n\">exists_not_mem_finset</span> <span class=\"o\">(</span><span class=\"n\">roots</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_roots</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Over an infinite integral domain a polynomial f is zero iff it</span>\n<span class=\"cm\">    evaluates to zero everywhere -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval_eq_zero_iff</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚ü®</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval_eq_zero</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span><span class=\"bp\">‚ü©</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">equiv_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">equiv_pempty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">pempty</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">pempty</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval_rename</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">‚àò</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">equiv_eval_eq_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">œÜ</span> <span class=\"o\">:=</span> <span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">k</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">œÜ</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">option</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">option</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span>  <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_succ_equiv_option</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">pempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">exists_equiv_fin</span> <span class=\"n\">X</span> <span class=\"k\">with</span> <span class=\"bp\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">e</span><span class=\"bp\">‚ü©‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">he</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">he</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">equiv_pempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h0</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">hs</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">he</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">fin_succ_equiv_option</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Over an infinite integral domain a polynomial f is zero if it</span>\n<span class=\"cm\">    evaluates to zero everywhere -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">fin_eval_eq_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inf</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfreezeI</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">inf</span> <span class=\"n\">int</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">int</span> <span class=\"n\">inf</span> <span class=\"n\">f</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pempty_ring_equiv</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">pempty_ring_equiv</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_equiv</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ring_equiv</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span> <span class=\"n\">k</span> <span class=\"n\">int</span> <span class=\"n\">inf</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">œÜ</span> <span class=\"o\">:=</span> <span class=\"n\">option_equiv_right</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">œÜ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span> <span class=\"n\">H</span> <span class=\"n\">k</span> <span class=\"n\">int</span> <span class=\"n\">inf</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">equiv_eval_eq_zero</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">H</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Over an infinite integral domain a polynomial f is zero iff it</span>\n<span class=\"cm\">    evaluates to zero everywhere -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval_eq_zero_iff</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186013426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579384655
    },
    {
        "content": "<p>Could probably use some cleaning...</p>",
        "id": 186013429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579384666
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 186015351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579388385
    },
    {
        "content": "<p>I'm reading proofs of the Nullstellensatz. Here is something which comes up more than once. Say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is a field (probably a commutative semiring would work fine) and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a finitely-generated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-algebra: this means that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring which is isomorphic to a quotient of a polynomial ring <code>mv_polynomial X k</code> with <code>X</code> a fintype -- alternatively it means that there's a ring map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>‚Üí</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">k\\to R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and there's some <code>Y : finset R</code> such that the induced ring hom <code>mv_polynomial Y k -&gt; R</code> is surjective. Mathematicians would write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi>k</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>‚Ä¶</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R=k[x_1,x_2,\\ldots,x_n]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">‚Ä¶</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> and note that this is not a polynomial ring -- it's \"the ring generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> and the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>‚Ä¶</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x_1,x_2,\\ldots,x_n\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">‚Ä¶</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>\", so it's a quotient of a polynomial ring.</p>\n<p>Now every text I've read just says \"after re-ordering the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> we can find some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>‚â§</mo><mi>t</mi><mo>‚â§</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1\\leq t\\leq n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> such that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>‚â§</mo><mi>t</mi><mo>‚â§</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1\\leq t\\leq n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> are independent transcendentals over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, and the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>+</mo><mn>1</mn><mo>‚â§</mo><mi>j</mi><mo>‚â§</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">t+1\\leq j\\leq n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69841em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> are algebraic over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>‚Ä¶</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(x_1,\\ldots,x_t)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">‚Ä¶</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>\". As a mathematician this does indeed feel like a triviality. One sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">R_0=k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (this ring will change but it will always be equipped with a map to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>) and simply loops through the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and does one of two things: if the map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R_0[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> to $$R$ sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is injective, then add <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to the \"transcendental\" pile and update <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R_0[x_i]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>. If the map isn't injective, add <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to the \"algebraic\" pile. Then renumber the  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> \"transcendental\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be the first few <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and renumber the \"algebraic\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be the rest. </p>\n<p>How do I do this in Lean? My algorithm above feels very natural to code in an imperative language. Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> changes one has to think a little carefully about doing this in a functional  language. I guess I'm just showing that I never learnt functional programming properly. </p>\n<p>Of course a lot of the ring theory above is of no relevance; what is really happening, I guess, is that I have a list <code>[x1,x2,...,xn]</code> and I want to break it into two sublists, the \"in\" ones and the \"out\" ones, but the predicate of whether you're \"in\" or not depends on what has happened so far. I have no doubt that this set-up is very well-understood, but not by me. I am a bit scared that if I hack my way through this then I will end up with something awful. </p>\n<p>Reference: I am reading \"A note on Zariski's Lemma\" by J. McCabe (AMM Vol 83 number 7, 1976). This proof seems to me to be easiest to formalise, out of the ones I have seen.</p>",
        "id": 186047827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579454294
    },
    {
        "content": "<p>It might be most natural to do this by induction</p>",
        "id": 186049597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579457633
    },
    {
        "content": "<p>Tangential remark: <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  have you also seen <a href=\"http://www.math.uchicago.edu/~may/PAPERS/MunshiFinal2.pdf\" target=\"_blank\" title=\"http://www.math.uchicago.edu/~may/PAPERS/MunshiFinal2.pdf\">Munshi's proof</a> of the Nullstellensatz?</p>",
        "id": 186050657,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1579459555
    },
    {
        "content": "<p>I hadn't -- many thanks!</p>",
        "id": 186051065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579460328
    },
    {
        "content": "<blockquote>\n<p>It might be most natural to do this by induction</p>\n</blockquote>\n<p>Oh -- not induction on the size, but on the finset itself? Maybe!</p>",
        "id": 186051076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579460360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> is there some less painless way to make an interface for <code>mv_polynomial.iter_to_sum</code> than this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec_comp_left</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"err\">‚äï</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚àò</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚àò</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eval‚ÇÇ_eval‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_semiring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">Œ≥</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">eval‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"kn\">eval</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_eq_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval‚ÇÇ_C</span><span class=\"o\">,</span> <span class=\"n\">map_C</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval‚ÇÇ_X</span><span class=\"o\">,</span> <span class=\"n\">map_X</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">])</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">100</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_eval‚ÇÇ&#39;</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_semiring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">Œ≥</span> <span class=\"n\">R</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">eval‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">‚àò</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">‚àò</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iter_to_sum</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iter_to_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eval‚ÇÇ_eval‚ÇÇ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span><span class=\"n\">eval‚ÇÇ_eq_eval_map</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hom_eq_hom</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">Œ≤</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">eval‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">‚àò</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">‚àò</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">‚àò</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span><span class=\"n\">rename</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eval‚ÇÇ_rename</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"err\">‚äï</span> <span class=\"n\">Œ≥</span><span class=\"o\">),</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">‚àò</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">‚àò</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">Œ≤</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"err\">‚àò</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">funext</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eval‚ÇÇ_comp_left</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eval‚ÇÇ_eval‚ÇÇ&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_semiring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">Œ≥</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">eval‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iter_to_sum</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eval‚ÇÇ_eval‚ÇÇ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">map_eval‚ÇÇ&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">iter_to_sum</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hom_eq_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">p&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval‚ÇÇ_C</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_C</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">]},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mv_polynomial</span>\n</pre></div>",
        "id": 186140945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579563159
    },
    {
        "content": "<p>I am trying to use multivariate polynomials to do things in MSc level commutative algebra and it's very interesting but I am also extremely slow.</p>",
        "id": 186141059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579563318
    },
    {
        "content": "<p>All the different ways of composing evaluation of polynomials is quite brittle in my experience. Lean of gets stuck on elaborating concise statements, and there are many holes in the library. This is one reason why I'm in favour of <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> proposal to ditch <code>eval2</code> (even though I may have been the one asking to introduce it), and only have <code>map</code> and <code>eval</code>. Because it significantly reduces the amount of library interface that one has to develop and maintain. Nevertheless it is frustrating that many statements about plugging polynomials into polynomials that look trivial in informal math (after years of usage, I agree) become pretty unreadable in Lean. To the point that I no longer understand the code that I wrote 25 seconds ago...<br>\n(End of rant <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span>)</p>",
        "id": 186162741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579595551
    },
    {
        "content": "<p>I don't think eval2 needs to be ditched, because it can be used to define the other two, but I'm fine with having only the basic theorems about it with everything else in <code>map</code> and <code>eval</code></p>",
        "id": 186163466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579596444
    },
    {
        "content": "<p>Does that mean that users should avoid it?</p>",
        "id": 186163726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579596724
    },
    {
        "content": "<p>Also, for <code>eval2</code> you need ring structure and a ring hom, etc. <code>map</code> could be defined coefficient-wise which avoids some tc search that has failed me several times.</p>",
        "id": 186163769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579596789
    },
    {
        "content": "<p>Johan and Mario, isn't 3am where you are?</p>",
        "id": 186163874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579596864
    },
    {
        "content": "<p>In a very small neighbourhood around me, it is 09:55. But I can't globalise that property (-;</p>",
        "id": 186164007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579596967
    },
    {
        "content": "<p>I will need to kill 3 more hours before I'm allowed to break my fast</p>",
        "id": 186164015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579596995
    },
    {
        "content": "<p>I see.</p>",
        "id": 186164156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579597172
    },
    {
        "content": "<p>My proposal was to use aeval, not just ditch eval2.</p>",
        "id": 186197310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579622700
    },
    {
        "content": "<p>Do we need <code>bind</code> for polynomials?</p>",
        "id": 186214223,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579632697
    },
    {
        "content": "<p>what would that look like?</p>",
        "id": 186221030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579636886
    },
    {
        "content": "<p><code>bind (f : A - &gt; polynomial B) (p : polynomial A) : polynomial B :=\np.eval2 f X</code> I think. It's the canonical map with that type.</p>",
        "id": 186222694,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579637920
    },
    {
        "content": "<p>Ooh right, it's one of those things that rolls out of an adjunction</p>",
        "id": 186222854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579638013
    },
    {
        "content": "<p>I don't actually think it's that useful. I remember these things requiring a surprising amount of thought to prove. Stuff like with M:L:K, then if a polynomial in K has a root in L it has a root in M.</p>",
        "id": 186223314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579638281
    },
    {
        "content": "<p>Right, that's exactly the kind of trivialities that are extremely hard to prove in the current library.</p>",
        "id": 186223418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579638360
    },
    {
        "content": "<p>I do remember something that looked a bit like bind popping up recently.</p>",
        "id": 186223494,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579638392
    },
    {
        "content": "<p>I remember Cyril explaining in Amsterdam that you should always use polynomials with coefficients a priori in the biggest field that could show up, with a predicate saying it actually has coefficients in a smaller field.</p>",
        "id": 186224729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579639193
    },
    {
        "content": "<p>I can't do that in my application, because I am doing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>‚Ä¶</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X_1,X_2,\\ldots,X_n]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">‚Ä¶</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> an arbitrary algebraically closed field.</p>",
        "id": 186229967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579642148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> You see what Kevin did there? You added <code>^n</code> notation to Lean 4, and now he's using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>... in a subscript...</p>",
        "id": 186243342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579652773
    },
    {
        "content": "<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mrow><mi>i</mi><mi>j</mi><mi>k</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">X_{ijk}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> right?</p>",
        "id": 186243361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579652821
    },
    {
        "content": "<blockquote>\n<p>My proposal was to use aeval, not just ditch eval2.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I like that idea. We only want <code>eval2</code> for algebras. For all the others, I guess a combo of <code>map</code> and <code>eval</code> is quite sufficient. And I would prefer a <code>map</code> that doesn't depend on ring hom conditions.</p>",
        "id": 186246757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579656263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> The whole proposal is here: <a href=\"https://github.com/leanprover-community/mathlib/issues/1864\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1864\">#1864</a>. Comments are welcome. Volunteers to actually implement this are more than welcome.</p>",
        "id": 186249247,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579658967
    },
    {
        "content": "<p>I am finding the following \"trivialities\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">option_equiv_right</span>\n<span class=\"c1\">-- mv_polynomial (option Œ≤) Œ± ‚âÉ+* mv_polynomial Œ≤ (polynomial Œ±)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">option_equiv_right</span>\n<span class=\"c\">/-</span><span class=\"cm\"> it&#39;s built from</span>\n\n<span class=\"cm\">. mv_polynomial.ring_equiv_of_equiv</span>\n<span class=\"cm\">. mv_polynomial.sum_ring_equiv</span>\n<span class=\"cm\">. mv_polynomial.ring_equiv_congr</span>\n\n<span class=\"cm\">glued together with</span>\n\n<span class=\"cm\">. ring_equiv.trans</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">g</span> <span class=\"o\">((</span><span class=\"n\">option_equiv_right</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">none</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"kn\">eval</span> <span class=\"n\">g</span> <span class=\"o\">((</span><span class=\"n\">option_equiv_right</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>very painful. What should I be doing here?</p>",
        "id": 186338055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579732058
    },
    {
        "content": "<p>I think maybe this should be the first line?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">g</span> <span class=\"o\">((</span><span class=\"n\">option_equiv_right</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">none</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">g</span> <span class=\"o\">(((</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">ring_equiv_congr</span>\n      <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">unit</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">punit_ring_equiv</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"err\">‚àò</span>\n    <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">sum_ring_equiv</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"n\">unit</span><span class=\"o\">))</span>\n    <span class=\"err\">‚àò</span>\n    <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">option_equiv_sum_punit</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">none</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186339248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579732846
    },
    {
        "content": "<p><code>option_equiv_right</code> lacks definition lemmas</p>",
        "id": 186339441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579732987
    },
    {
        "content": "<p>I see. So this first <code>show</code> should be done with a <code>rw</code>? And then after that there should be lemmas <code>eval_sum_ring_equiv_X</code> and <code>eval_ring_equiv_congr_X</code> and <code>eval_ring_equiv_of_equiv_X</code>?</p>",
        "id": 186339577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733072
    },
    {
        "content": "<p>Should it be beta not alpha which is explicit in <code>mv_polynomial.ring_equiv_congr : Œ† (Œ± : Type u_1) {Œ≤ : Type u_2} {Œ≥ : Type u_1} [_inst_1 : comm_semiring Œ±] [_inst_2 : comm_semiring Œ≥], Œ± ‚âÉ+* Œ≥ ‚Üí mv_polynomial Œ≤ Œ± ‚âÉ+* mv_polynomial Œ≤ Œ≥</code>?</p>",
        "id": 186339744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733173
    },
    {
        "content": "<p>I think so</p>",
        "id": 186339795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733231
    },
    {
        "content": "<p>I think the definitional lemmas should be stated using just application if possible, <code>eval</code> is some derived thing (but it should probably also be available)</p>",
        "id": 186339856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733283
    },
    {
        "content": "<p>Well, maybe not... I guess since it's a known ring hom you already have info on everything except what happens to constants and variables</p>",
        "id": 186339905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733354
    },
    {
        "content": "<p>there are lots of <code>blah_X</code> and <code>blah_C</code> lemmas</p>",
        "id": 186339986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733407
    },
    {
        "content": "<p>I am suggesting we add a few more ;-)</p>",
        "id": 186340000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733418
    },
    {
        "content": "<p>I think you are right</p>",
        "id": 186340003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733424
    },
    {
        "content": "<p>I'm slowly getting the hang of this Lean malarkey</p>",
        "id": 186340035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733450
    },
    {
        "content": "<p>I really hope it's a <code>rfl</code> proof because there are a whole bunch of definitions in the way</p>",
        "id": 186340055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733473
    },
    {
        "content": "<p>I can iterate the <code>show, rw</code> process ;-)</p>",
        "id": 186340147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733529
    },
    {
        "content": "<p>I'm still not even sure what <code>option_equiv_right Œ± Œ≤ (X none) = _</code> should complete to</p>",
        "id": 186340149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733530
    },
    {
        "content": "<p>you mean <code>option_equiv_right R n (X none) = _</code>?</p>",
        "id": 186340198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733596
    },
    {
        "content": "<p>I'm in the same context as the definition, they were called alpha and beta there</p>",
        "id": 186340209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733622
    },
    {
        "content": "<p>It's <code>C unit</code> or <code>C punit</code> or whatever</p>",
        "id": 186340214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733627
    },
    {
        "content": "<p>wait</p>",
        "id": 186340263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733645
    },
    {
        "content": "<p>I think it's <code>C polynomial.X</code></p>",
        "id": 186340265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733647
    },
    {
        "content": "<p>yeah, that :-)</p>",
        "id": 186340268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579733654
    },
    {
        "content": "<p>but lean times out when I write that</p>",
        "id": 186340269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733655
    },
    {
        "content": "<p>oh, nvm</p>",
        "id": 186340347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579733750
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">option_equiv_right_CX</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">option_equiv_right</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">sum_to_iter</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">unit</span>\n    <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">option_equiv_sum_punit</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">none</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_to_iter_Xr</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p><code>sum_to_iter_Xr</code> should be a simp lemma</p>",
        "id": 186340931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734233
    },
    {
        "content": "<p>oh nice!</p>",
        "id": 186340988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579734255
    },
    {
        "content": "<p>also <code>punit_ring_equiv</code> and like all the other involved functions should have definitional lemmas so I don't have to manually unfold them like this</p>",
        "id": 186341012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734277
    },
    {
        "content": "<p>To people not reading the details: what is happening here is that Lean has four(!) different ways of storing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X][n]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">]</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is one variable and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> is a set of variables; it's polynomials with coefficients in <code>option n</code>, or in <code>n + punit</code>, or polynomials in variables <code>n</code> over base ring <code>R[X]</code>, or polynomials in variables <code>n</code> over polynomials in variables <code>punit</code></p>",
        "id": 186341158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579734390
    },
    {
        "content": "<p>Of course, all of these are the same, and humans find it extremely easy to switch between representations at the drop of a hat</p>",
        "id": 186341171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579734414
    },
    {
        "content": "<p>the other case is similar, luckily:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">option_equiv_right_X_none</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">option_equiv_right</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">sum_to_iter</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">unit</span>\n    <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">option_equiv_sum_punit</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">none</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_to_iter_Xr</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">option_equiv_right_X_some</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">option_equiv_right</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">sum_to_iter</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">unit</span>\n    <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">option_equiv_sum_punit</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_to_iter_Xl</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 186341314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734568
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">option_equiv_right_C</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">option_equiv_right</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">sum_to_iter</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">unit</span>\n    <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">option_equiv_sum_punit</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_to_iter_C</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 186341455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734637
    },
    {
        "content": "<p>So all three of the <code>sum_to_iter_?</code> things should be simp lemmas?</p>",
        "id": 186341572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579734728
    },
    {
        "content": "<p>yes</p>",
        "id": 186341581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734738
    },
    {
        "content": "<p>Many thanks! And we can perhaps get rid of the <code>show</code> lines by coming up with some other simp lemmas?</p>",
        "id": 186341645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579734817
    },
    {
        "content": "<p>Or is this overoptimistic?</p>",
        "id": 186341650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579734823
    },
    {
        "content": "<p>I also brute forced my way through several other definitions here, that should have definitional lemmas: <code>ring_equiv_of_equiv</code>, <code>option_equiv_sum_punit</code> (the definition should not be simp), <code>sum_comm</code> (ditto), <code>sum_ring_equiv</code>, <code>punit_ring_equiv</code></p>",
        "id": 186341662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734839
    },
    {
        "content": "<p>Ideally this proof should be <code>dunfold option_equiv_right; simp</code></p>",
        "id": 186341712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734859
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> The whole proposal is here: <a href=\"https://github.com/leanprover-community/mathlib/issues/1864\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1864\">#1864</a>. Comments are welcome. Volunteers to actually implement this are more than welcome.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I didn't mean to imply that you and Mario should do all the work. (Sorry if it came across like that.) What I meant was that you seemed to have a pretty clear view of what you wanted as an end result. So I was inviting you and Mario to lead the discussion. Once it's clear what we want, I'm willing to write a bunch of code.</p>",
        "id": 186367454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579768265
    },
    {
        "content": "<p>Do we not have this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"c1\">-- two evaluations of one mv_polynomial coincide, if the evaluation functions</span>\n<span class=\"c1\">-- agree on the variables occurring in the polynomial</span>\n<span class=\"kn\">example</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"err\">‚àà</span> <span class=\"n\">vars</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">œÜ</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">œÜ</span> <span class=\"n\">g</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Johan -- I'm on a train, but thanks to Mario's heroic <code>simp</code> efforts yesterday and your efforts from a few days ago, I now have a proof in the finite variable case.</p>",
        "id": 186394059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579790121
    },
    {
        "content": "<p>The annoying thing about the example above is that so far I have never needed to penetrate the interface for <code>mv_polynomial</code>, but now I am maybe going to have to think about how the type is implemented?</p>",
        "id": 186394192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579790185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I guess we don't have this. Try</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186394443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579790353
    },
    {
        "content": "<p>Nice idea!</p>",
        "id": 186394560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579790421
    },
    {
        "content": "<p>I had just started with <code>unfold eval_2</code> :-) That looked much worse :-)</p>",
        "id": 186394581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579790436
    },
    {
        "content": "<p>So apparently I am crazy trying to prove this without assuming that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œï</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">œï</span></span></span></span> is a ring hom? I'm not sure we need it...</p>",
        "id": 186394655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579790507
    },
    {
        "content": "<p>aargh one of the goals is not true :-/</p>",
        "id": 186394921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579790699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm quite sure that you need <code>œÜ</code> to be a ring hom</p>",
        "id": 186395099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579790797
    },
    {
        "content": "<p>Ooh, no, you're right. You shouldn't (in theory).</p>",
        "id": 186395129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579790825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Which goal is false?</p>",
        "id": 186395142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579790833
    },
    {
        "content": "<p>Why? Not that it matters.</p>\n<p>Induction fails because one of the goals is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">œÜ</span> <span class=\"n\">f</span> <span class=\"n\">p0</span> <span class=\"bp\">=</span> <span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">œÜ</span> <span class=\"n\">g</span> <span class=\"n\">p0</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">œÜ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">œÜ</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and my hypothesis is that f and g agree on the variables mentioned in p, but here p0 is arbitrary.</p>",
        "id": 186395162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579790849
    },
    {
        "content": "<p>[sorry, on a train with sporadic connection]</p>",
        "id": 186395252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579790884
    },
    {
        "content": "<p>In the library there is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">hom_eq_hom</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">œÉ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">œÉ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">œÉ</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>but if the <code>p</code> were before the <code>hX</code> one could weaken <code>hX</code> and only ask that the equality held for variables in the support (in the obvious sense) of p</p>",
        "id": 186395489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579791010
    },
    {
        "content": "<p>I think I might have to modify the proof of <code>induction_on</code></p>",
        "id": 186395534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579791059
    },
    {
        "content": "<p>Aaah, I see.</p>",
        "id": 186395684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579791132
    },
    {
        "content": "<p>Annoying</p>",
        "id": 186395692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579791139
    },
    {
        "content": "<p>I'm going in...</p>",
        "id": 186395708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579791149
    },
    {
        "content": "<p>aargh we don't even have this as far as I can see:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">vars_map</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_semiring_hom</span> <span class=\"n\">œÜ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">œÉ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">œÜ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">vars</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 186396635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579791675
    },
    {
        "content": "<p>or this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mem_rename_range</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">œÉ</span> <span class=\"n\">œÑ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">œÉ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">œÑ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">œÑ</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_set</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">œÉ</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">rename</span> <span class=\"n\">g</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 186400038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579793629
    },
    {
        "content": "<p>/me hopes <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> is coming to Xena...</p>",
        "id": 186403065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579795280
    },
    {
        "content": "<p>He was!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eval‚ÇÇ_eq_of_eq_on_vars</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">œÉ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">œÉ</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">is_semiring_hom</span> <span class=\"n\">œÜ</span><span class=\"o\">]</span> <span class=\"c1\">-- do we need this??</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">œÜ</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">œÜ</span> <span class=\"n\">g</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">eval‚ÇÇ</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_bind</span><span class=\"o\">,</span> <span class=\"n\">exists_imp_distrib</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186420269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579804747
    },
    {
        "content": "<p>Doesn't that mean you can remove those first two lines with <code>unfold</code>s?</p>",
        "id": 186420408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579804833
    },
    {
        "content": "<p>However he also says that the definition of <code>vars</code> in <code>mv_polynomial</code> should be what he wants it to be :P</p>",
        "id": 186420461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579804879
    },
    {
        "content": "<p>oh we only just did it :-)</p>",
        "id": 186420472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579804887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I <a href=\"https://github.com/ImperialCollegeLondon/M4P33/blob/b7d0cc43317df8a67390dafc830f6d576ec6c318/src/for_mathlib/mv_polynomial.lean#L495\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M4P33/blob/b7d0cc43317df8a67390dafc830f6d576ec6c318/src/for_mathlib/mv_polynomial.lean#L495\">finally did it</a>. It's not mathlib-ready ;-)</p>",
        "id": 186576232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579964171
    },
    {
        "content": "<p>Nice!</p>",
        "id": 186576700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579964959
    },
    {
        "content": "<p>There are two steps mixed together in <code>mv_polynomial</code>. Currently both are done using <code>finsupp</code> but I think that this should be <code>mv_polynomial R Œ± := monoid_algebra R (multiplicative $ free_comm_monoid Œ±)</code>. Here <code>free_comm_monoid Œ±</code> could be either <code>finsupp Œ± nat</code> or <code>multiset Œ±</code>. I think that we should have both <code>monoid_algebra</code> and <code>free_comm_monoid</code>, and most definitions / lemmas about polynomials should combine lemmas about these two. A big advantage of this approach is that it will make much easier to define, e.g., <code>R[x, y, x‚Åª¬π, y‚Åª¬π]</code> as <code>monoid_algebra (free_comm_group Œ±)</code>, or quasipolynomials as the <code>monoid_algebra</code> of the monoid <code>multiplicative (complex √ó nat)</code> interpreted as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mi>a</mi><mi>t</mi></mrow></msup><msup><mi>t</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">e^{at}t^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>. It might make sense to have <code>free_comm_monoid</code> and <code>free_add_comm_monoid</code> with one being <code>multiplicative</code> or `additive of another.</p>",
        "id": 186583834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579977725
    },
    {
        "content": "<p>Didn't Kenny already define <code>free_comm_monoid</code>?</p>",
        "id": 186585054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579979789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  <code>git grep</code> doesn't find it. Are you talking about some PR/WIP?</p>",
        "id": 186585369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579980396
    },
    {
        "content": "<p><code>free_comm_monoid</code> is multiset.</p>",
        "id": 186585440,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579980493
    },
    {
        "content": "<p>Kenny did define <code>free_comm_group</code></p>",
        "id": 186585446,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579980510
    },
    {
        "content": "<p>Aah, right</p>",
        "id": 186585848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579981248
    },
    {
        "content": "<p>I am so confused by all of this. I thought the other day <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> was saying \"use dfinsupp not finsupp\" and Chris was agreeing, and now he's saying \"use monoid-algebra\" and Chris is agreeing. </p>\n<p>What is going on here? Is the idea that people are suggesting that the definition of <code>mv_polynomial</code> be changed -- and are possibly suggesting more than one change? If this change is made, then someone has to rewrite the 1000+ line <code>mv_polynomial.lean</code> with the new definition, I guess. I think that this would be an interesting exercise for someone like me. However I cannot begin to do it until someone formalises the definitions because I cannot see the difference between any of the definitions that people are suggesting -- they're all the same mathematically.</p>",
        "id": 186588462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579985911
    },
    {
        "content": "<p>monoid algebra should be defined to be dfinsupp I think.</p>",
        "id": 186588476,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579985962
    },
    {
        "content": "<p>So currently it starts like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">100</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">finsupp</span> <span class=\"n\">lattice</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">x</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ¥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Multivariate polynomial, where `œÉ` is the index set of the variables and</span>\n<span class=\"cm\">  `Œ±` is the coefficient ring -/</span>\n<span class=\"n\">def</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">œÉ</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÄ</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÄ</span> <span class=\"n\">Œ±</span>\n</pre></div>\n\n\n<p>How do you think it should start? Same imports?</p>",
        "id": 186588656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579986262
    },
    {
        "content": "<p>I think change <code>‚Üí‚ÇÄ</code> to <code>Œ†‚ÇÄ</code> and <code>‚Ñï</code> to an arbitrary monoid.</p>",
        "id": 186588723,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579986397
    },
    {
        "content": "<p>I also think <code>dfinsupp</code> should just be called <code>direct_sum</code>, since there are no applications I can think of where we don't want it to be this.</p>",
        "id": 186588923,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579986803
    },
    {
        "content": "<p>For me <code>monoid_algebra</code> and <code>free_comm_monoid</code> represent algebraic interface of what we need while <code>finsupp</code> / <code>dfinsupp</code> are specific types that can be used to fulfill this interface.</p>",
        "id": 186591677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579992111
    },
    {
        "content": "<p>Currently <code>mv_polynomial</code> uses <code>œÉ ‚Üí‚ÇÄ ‚Ñï</code> as an implementation of <code>free_comm_monoid œÉ</code> and <code>M ‚Üí‚ÇÄ Œ±</code> as an implementation of <code>monoid_algebra Œ± M</code>, <code>M = œÉ ‚Üí‚ÇÄ ‚Ñï</code>. The definitions and theorems heavily rely on using these specific types. I think that we should define <code>monoid_algebra</code> separately from polynomials, prove universal property etc, then have <code>mv_polynomial Œ± R := monoid_algebra R (multiplicative $ free_comm_monoid Œ±)</code>, where <code>free_comm_monoid Œ±</code> can be either <code>Œ± ‚Üí‚ÇÄ ‚Ñï</code> or <code>multiset Œ±</code>.</p>",
        "id": 186591927,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579992547
    },
    {
        "content": "<p>Only the definitions and theorems in <code>mv_polynomial.lean</code> rely on these, right? Everything else should just use the 1000-line interface made there. So why does it matter? I'm not saying it doesn't, I'm just trying to understand this way of thinking.</p>",
        "id": 186591992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579992655
    },
    {
        "content": "<p>We can implement <code>monoid_algebra</code> either on top of <code>finsupp</code>, or on top of <code>dfinsupp</code> ‚Äî I don't care too much. We may also want to reimplement <code>finsupp</code> on top of <code>dfinsupp</code> to reduce code duplication.</p>",
        "id": 186591999,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579992670
    },
    {
        "content": "<p>so here is a case where you think the implementation details don't matter.</p>",
        "id": 186592005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579992703
    },
    {
        "content": "<p>Few reasons:</p>\n<ol>\n<li>Reduce code duplication between <code>polynomial</code> and <code>mv_polynomial</code>.</li>\n<li>Make it easier to add other kinds of polynomial-like objects.</li>\n</ol>",
        "id": 186592053,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579992770
    },
    {
        "content": "<p>I see.</p>",
        "id": 186592061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579992787
    },
    {
        "content": "<p>Yes, you can imagine that people will want variants at some point</p>",
        "id": 186592065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579992805
    },
    {
        "content": "<p><strong>I</strong> will want quasipolynomials.</p>",
        "id": 186592070,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579992834
    },
    {
        "content": "<p>E.g., to write solutions of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo>Àô</mo></mover><mo>=</mo><mi>A</mi><mi>x</mi><mo>+</mo><msup><mi>e</mi><mrow><mi>a</mi><mi>t</mi></mrow></msup><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">\\dot x=Ax+e^{at}v</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\">x</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.11111000000000001em;\"><span class=\"mord\">Àô</span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> is an eigenvalue of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>.</p>",
        "id": 186592124,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579992929
    },
    {
        "content": "<p>Or to deal with some local normal forms of differential equations.</p>",
        "id": 186592127,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579992952
    },
    {
        "content": "<p>OK so I know a direct proof of Zariski's Lemma which does not go via Noether normalisation. I am not sure of the best way to formalise it though.</p>\n<p>Statement: say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is a field, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÉ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">œÉ</span></span></span></span> is a finite set, and $J$ is a maximal ideal of the polynomial ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>:</mo><mo>=</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>œÉ</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R:=k[\\sigma]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">œÉ</span><span class=\"mclose\">]</span></span></span></span>. Then the quotient field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>:</mo><mo>=</mo><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">K:=R/J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is a finite extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (we know the quotient is finitely-generated as a ring, the conclusion is that it is finitely-generated as a vector space).</p>\n<p>The beginning of the proof looks like this. Induction on size of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÉ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">œÉ</span></span></span></span>. If it's empty, no problem. For the inductive step, there are two cases. The easy case is when the image in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> of every element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÉ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">œÉ</span></span></span></span> is algebraic over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, because then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is finite by some tower law argument. In the other case, we choose some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>‚àà</mo><mi>œÉ</mi></mrow><annotation encoding=\"application/x-tex\">i\\in\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚àà</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">œÉ</span></span></span></span> for which the corresponding element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>‚àà</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">x_i\\in K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚àà</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is not algebraic over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (i.e. the subring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[x_i]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is isomorphic to a polynomial ring); we can then replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by the subfield <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(x_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> (field of fractions computed within <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span>) and now the induction hypothesis kicks in to give <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi mathvariant=\"normal\">/</mi><mi>k</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K/k(x_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> finite and the proof goes on from there. </p>\n<p>I am staring at this part of the proof and am not entirely sure of how to set things up so that they should in theory go smoothly. I need finitely-generated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-algebras, I need to set up the statement so that the induction procedure is not awful, I need to take a field of fractions within a bigger field, and so on. Does anyone dare to offer some suggestions as to how to formalise the relevant definitions? Once I am in a begin-end block I am a much happier person.</p>\n<p>It is not relevant to this post, but the end of the proof is then this: each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>=Ã∏</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">j\\not=i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\">ÓÄ†</span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span> is integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(x_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and hence over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>D</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[x_i][1/D]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">]</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span> some non-zero polynomial which is a multiple of all the denominators that show up in all the min polys of all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>. So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a field integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>D</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[x_i][1/D]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">]</span></span></span></span> and hence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>D</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[x_i][1/D]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">]</span></span></span></span> is a field (this is Prop 5.7 in Atiyah--Macdonald), and it is slightly fiddly but not too hard to verify that this can't happen (one can check, for example, that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span> must be in every maximal ideal of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> and hence that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">1+D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span> is a constant, contradiction)</p>",
        "id": 186628155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580056284
    },
    {
        "content": "<p>If we are going to refactor <code>mv_polynomial</code> ‚Äì which sounds like a good idea ‚Äì shall we also make <code>polynomial R</code> defeq to <code>mv_polynomial unit R</code>, and rebuild the current API around that?</p>",
        "id": 186663868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580116301
    },
    {
        "content": "<p>I'm... surprised that's not the case</p>",
        "id": 186663962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580116354
    },
    {
        "content": "<p>It seems like we are converging to a noncomputable representation anyway, so this seems like the best way to reduce on proof work</p>",
        "id": 186664020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580116406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> thoughts?</p>",
        "id": 186664050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580116423
    },
    {
        "content": "<p>Could it even be an <code>abbreviation</code>?</p>",
        "id": 186664112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580116458
    },
    {
        "content": "<p>no, I don't think so. Given the issues we have had with typeclasses in this area I don't want to make anything harder than it needs to be</p>",
        "id": 186664166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580116510
    },
    {
        "content": "<p>I'm thinking just restate all the theorems and prove by direct reference to the multivariate version</p>",
        "id": 186664190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580116545
    },
    {
        "content": "<blockquote>\n<p>I'm... surprised that's not the case</p>\n</blockquote>\n<p><code>mv_polynomial</code> imports <code>polynomial</code>!</p>",
        "id": 186671410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580122712
    },
    {
        "content": "<p>why?</p>",
        "id": 186671424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580122731
    },
    {
        "content": "<p>it's possible the import is just there for conjunction theorems, in which case either one can come first and the conjunction theorems can just go to whichever file comes second</p>",
        "id": 186671457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580122784
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> thoughts?</p>\n</blockquote>\n<p>I think making <code>polynomial</code> into <code>mv_polynomial unit</code> would be sensible. One part of the interface that's currently missing is to make a <code>polynomial</code> into <code>mv_polynomial</code> by providing a name. I guess this is just a special case of the more general theorem that a map between monoids induces a map between monoid algebras.</p>",
        "id": 186673407,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1580124676
    },
    {
        "content": "<p>I'm continuing this discussion in a new thread: <a href=\"#narrow/stream/116395-maths/topic/Refactoring.20polynomials/near/186676397\" title=\"#narrow/stream/116395-maths/topic/Refactoring.20polynomials/near/186676397\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Refactoring.20polynomials/near/186676397</a></p>",
        "id": 186676415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580127689
    }
]