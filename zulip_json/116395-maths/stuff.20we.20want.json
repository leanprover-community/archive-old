[
    {
        "content": "<p>I think it's time to update</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/wip.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/wip.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/wip.md</a></p>\n<p>and it's also perhaps a good idea to write a list of stuff which we'd like to have in mathlib.</p>\n<p>Everyone -- what maths would you like to see in mathlib? Some ideas are <a href=\"https://mathoverflow.net/questions/311071/which-mathematical-definitions-should-be-formalised-in-lean\" target=\"_blank\" title=\"https://mathoverflow.net/questions/311071/which-mathematical-definitions-should-be-formalised-in-lean\">on the mathoverflow question</a> -- which ones should be listed as \"todo\"? Are we ready for manifolds next? I don't know enough about the state of multivariable calculus in Lean to know how ready we are.</p>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> could you give me an update for these former WIPs? Did they happen? Will they happen? Shall I delete or edit those entries?</p>\n<p>We should mention the work of <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> and others on differentiable functions I guess.</p>\n<p>I don't think we have power series in 1 variable (although it's easier to code than polynomials in one variable!), and I don't think we have the basic theory of Dedekind domains; both of these should be easily accessible nowadays.</p>",
        "id": 163314770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555244288
    },
    {
        "content": "<p>I think it's time either get rid of that page or find someone who wants to take responsibility to update it. You can remove the line about calculus, and maybe indicate that Sébastien is working on manifolds.</p>",
        "id": 163330278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555269859
    },
    {
        "content": "<p>The documentation about what is already covered is also badly out of date, but I certainly intend to work on this once my teaching semester will be over</p>",
        "id": 163330300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555269908
    },
    {
        "content": "<p>I don't have an opinion on how / whether to maintain that page, but I thought I would mention that a student here, Zhouhang (Joe) Zhou, has started working on integration. He is aiming to define the Bochner integral following advice from Johannes. If all goes well,  the plan is to also prove suitably general versions of the FTC to link integration and differentiation.</p>",
        "id": 163336927,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1555279030
    },
    {
        "content": "<p>I agree we should get rid of that page, but I would really love to replace it with something better.</p>",
        "id": 163338860,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282125
    },
    {
        "content": "<p>One option is to use the issues list on leanprover-community/mathlib.</p>",
        "id": 163338865,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282140
    },
    {
        "content": "<p>We could tag things as \"bug\", \"chore\", \"roadmap\", \"easy\", \"medium\", \"good-first-PR\", etc.</p>",
        "id": 163338880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282172
    },
    {
        "content": "<p>Another option is trello, a \"kanban board\" app. I've used it in the past; it's very nice to use, but doesn't magically solve the problem of needing a commitment from a enough people to actually use it.</p>",
        "id": 163338984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282307
    },
    {
        "content": "<p>It seems there are reasonable integrations with zulip, github, and vscode.</p>",
        "id": 163339048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282389
    },
    {
        "content": "<p>I think writing a few \"roadmaps\" would be really helpful.</p>",
        "id": 163339058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282420
    },
    {
        "content": "<p>I think it would be great to have some more tutorials (_target/deps/mathlib/docs/tutorial/) so that the features that exist already (and new ones that are developed) are easier to understand.</p>",
        "id": 163372134,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555328373
    },
    {
        "content": "<p>I just added a tutorial to <a href=\"https://github.com/leanprover-community/mathlib/issues/938\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/938\">#938</a>, mostly demonstrating how far we have to go. :-)</p>",
        "id": 163373741,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555330099
    },
    {
        "content": "<p>Are ordinal numbers and cardinal number formalized yet?</p>",
        "id": 163834950,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555822233
    },
    {
        "content": "<p>yes</p>",
        "id": 163834951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822241
    },
    {
        "content": "<p><code>set_theory.ordinal</code> and <code>set_theory.cardinal</code></p>",
        "id": 163834953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822254
    },
    {
        "content": "<p>how about surreal numbers? lol</p>",
        "id": 163834965,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555822295
    },
    {
        "content": "<p>no surreals, go for it</p>",
        "id": 163835014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822335
    },
    {
        "content": "<p>There are hyperreals!</p>",
        "id": 163835362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823029
    },
    {
        "content": "<p>That Conway stuff -- I went back to Conway's book, and he's clearly aware of the foundational issues surrounding his constructions of numbers and games. It seems to me that these definitions are proper classes. Hence I would expect to be able to define a game recursively like before, except only using subsets of Game from Type 0 in some sense -- I want to stop the diagonalisation argument from failing because of ulift issues. Is this possible?</p>",
        "id": 163835434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823146
    },
    {
        "content": "<p>each individual surreal number is a set, but the collection of all surreals is a class</p>",
        "id": 163835519,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555823222
    },
    {
        "content": "<p>lean doesn't do classes, it does universe parametric types</p>",
        "id": 163835558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823266
    },
    {
        "content": "<p><code>ordinal.{u} : Type (u+1)</code></p>",
        "id": 163835606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823285
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">game</span><span class=\"o\">,</span> <span class=\"n\">game</span>\n</pre></div>\n\n\n<p>This was Scott's original formalization of Conway's notion of a game.</p>",
        "id": 163835632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823332
    },
    {
        "content": "<p>This version</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">game</span><span class=\"o\">,</span> <span class=\"n\">game</span>\n</pre></div>\n\n\n<p>is maybe not inconsistent, but is not strong enough to capture Conway's powerful notion.</p>",
        "id": 163835735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823409
    },
    {
        "content": "<p>Mario's diagonalisation argument is here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">function</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">game</span>\n<span class=\"kn\">constant</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">g</span>\n<span class=\"kn\">axiom</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec_eq</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">L</span> <span class=\"n\">R</span>\n\n<span class=\"n\">def</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">game</span> <span class=\"o\">:=</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right_eq</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">=</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">cantor_injective</span> <span class=\"n\">game</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">R</span> <span class=\"n\">R&#39;</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right_eq</span> <span class=\"err\">∅</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n  <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right_eq</span> <span class=\"err\">∅</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 163835757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823512
    },
    {
        "content": "<p>So it seems to me that thus far we have failed to define a Conway game in Lean and I for one am unsure how to proceed.</p>",
        "id": 163835804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823542
    },
    {
        "content": "<p>What if <code>game</code>s take a universe parameter</p>",
        "id": 163835864,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555823651
    },
    {
        "content": "<p>And their \"inner games\" are one universe lower</p>",
        "id": 163835867,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555823672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">pSurreal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pSurreal</span>\n</pre></div>\n\n\n<p>I'm reading the definition of le, well formed, and the equivalence relation, and it's a complicated mutual induction, but this is the basic structure</p>",
        "id": 163835937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823823
    },
    {
        "content": "<p>And what happens to the diagonal argument?</p>",
        "id": 163835945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823856
    },
    {
        "content": "<p>they are well founded just as in Conway's construction</p>",
        "id": 163835946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823878
    },
    {
        "content": "<p>you can't make a surreal number from any set of surreal numbers, only a set composed of previously constructed surreals</p>",
        "id": 163835991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823902
    },
    {
        "content": "<p>Here's where I get stuck trying to prove false:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  pSurreal.mk ↥∅ (subtype R)\nterm\n  subtype R\nhas type\n  Type (?+2) : Type (max 1 (?+3))\nbut is expected to have type\n  Type (?+1) : Type (?+2)\n</pre></div>",
        "id": 163838824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555829354
    },
    {
        "content": "<p>Given an arbirtrary R, I can't convince Lean that it's come from the universe below.</p>",
        "id": 163838882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555829413
    },
    {
        "content": "<p>Oh but this is great! There are a ton of things one can prove about that structure!</p>",
        "id": 163838884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555829447
    },
    {
        "content": "<p>I have a definition of the order:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">pSurreal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pSurreal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pSurreal</span>\n\n<span class=\"n\">def</span> <span class=\"n\">le_lt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">×</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">IHxl</span> <span class=\"n\">IHxr</span> <span class=\"n\">generalizing</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"n\">IHyl</span> <span class=\"n\">IHyr</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">IHxl</span> <span class=\"n\">i</span> <span class=\"bp\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">IHyr</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">IHxr</span> <span class=\"n\">i</span> <span class=\"bp\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">IHyl</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"n\">pSurreal</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">pSurreal</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_le_mk</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">xl</span><span class=\"o\">,</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"n\">xL</span><span class=\"o\">,</span> <span class=\"n\">xR</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"bp\">⟩</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xL</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">xl</span><span class=\"o\">,</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"n\">xL</span><span class=\"o\">,</span> <span class=\"n\">xR</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">yR</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_lt_mk</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">xl</span><span class=\"o\">,</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"n\">xL</span><span class=\"o\">,</span> <span class=\"n\">xR</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"bp\">⟩</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xR</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"bp\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">xl</span><span class=\"o\">,</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"n\">xL</span><span class=\"o\">,</span> <span class=\"n\">xR</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">yL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pSurreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">pSurreal</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">R</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pSurreal</span>\n</pre></div>\n\n\n<p>Proving that it's a good ordering is a mess though</p>",
        "id": 163840271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555832147
    },
    {
        "content": "<p>btw is galois theory done?</p>",
        "id": 163842792,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555836822
    },
    {
        "content": "<p>nope</p>",
        "id": 163843316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555837855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I extended the surreal number stuff into PR <a href=\"https://github.com/leanprover-community/mathlib/issues/958\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/958\">#958</a> . Maybe this is an interesting project for some of your minions.</p>",
        "id": 163845456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555841727
    },
    {
        "content": "<p>Scott has minions too. I already mentioned it to mine. They're all busy revising</p>",
        "id": 163852712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555854899
    },
    {
        "content": "<p>Some students at Imperial did a bunch of Galois theory stuff but it's not yet finished. I believe we still don't have algebraic closure but we might have the main basic theorem about normal extension = splitting field IIRC</p>",
        "id": 163854994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555858935
    },
    {
        "content": "<p>i see. how about representation theory?</p>",
        "id": 163856124,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555860972
    },
    {
        "content": "<p>Nothing</p>",
        "id": 163856132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555861012
    },
    {
        "content": "<p>We're just getting to the point where we can think about this stuff; we only got rings and modules working a few months ago. There were technical implementation issues involved in translating stuff into Lean's dependent type theory.</p>",
        "id": 163856149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555861056
    },
    {
        "content": "<p>i see...</p>",
        "id": 163856194,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555861091
    },
    {
        "content": "<p>The first implementation had a module attached to the ring it was a module over, and then in practice it turned out that we were constantly thinking of modules as modules over more than one ring at once, so it had to be re-done with the ring being given as an extra parameter</p>",
        "id": 163856200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555861112
    },
    {
        "content": "<p>They're clearly accessible, it's just that nobody did them yet. Imperial undergraduates might do it if you give them a year or so.</p>",
        "id": 163856231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555861189
    },
    {
        "content": "<p>is there anything that imperial undergrads have already that is not yet in mathlib?</p>",
        "id": 163856343,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555861360
    },
    {
        "content": "<p>have already done*</p>",
        "id": 163856402,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1555861455
    },
    {
        "content": "<p>Yes, they develop stuff and put it in all sorts of random places.</p>",
        "id": 163857160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555862722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  are the people to talk to about the current state of Galois theory and the like, but they have exams in a couple of weeks so might not be checking the chat so much.</p>",
        "id": 163857211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555862776
    },
    {
        "content": "<p>are homotopy groups done?</p>",
        "id": 164005253,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556036655
    },
    {
        "content": "<p>A student of mine did pi_1 but I don't think it made it into mathlib, so whilst there might be some code to work on, it might need work before it is in a fit state for the maths library. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> is probably the person to ask about higher homotopy groups</p>",
        "id": 164007023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556037894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218709\">@Adrian Chu</span> A bachelor student in Freiburg is about to start a project on pi_n</p>",
        "id": 164009773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556039924
    },
    {
        "content": "<p>I have code for simplicial sets, and we want to clean that up and define higher pi_n</p>",
        "id": 164009838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556039985
    },
    {
        "content": "<p>I found this (<a href=\"https://github.com/rwbarton/lean-homotopy-theory/tree/lean-3.4.2/src/homotopy_theory/topological_spaces\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/tree/lean-3.4.2/src/homotopy_theory/topological_spaces\">https://github.com/rwbarton/lean-homotopy-theory/tree/lean-3.4.2/src/homotopy_theory/topological_spaces</a>) by Reid Barton. He has weak homotopy equivalence too.</p>",
        "id": 164051568,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556078452
    },
    {
        "content": "<p>Yup, Reid has written enormous amounts of code. I haven't yet read all of it...</p>",
        "id": 164052376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556079684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> this code will presumably begin to rot if you don't get it into mathlib...</p>",
        "id": 164053173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556080853
    },
    {
        "content": "<p>May I ask what the procedure of getting a proof into matlib is?</p>",
        "id": 164053260,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556080948
    },
    {
        "content": "<p>you PR it on github</p>",
        "id": 164053467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556081282
    },
    {
        "content": "<p>and then it goes through a review process</p>",
        "id": 164053503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556081292
    },
    {
        "content": "<p>What geometric objects do we currently have? Spheres? Balls?</p>",
        "id": 164088636,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556118231
    },
    {
        "content": "<p>nothing :-)</p>",
        "id": 164088711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556118252
    },
    {
        "content": "<p>Is any of that actually hard to create though? Maybe it'd be useful to have balls defined, as that could lend itself naturally to a lot of analysis, especially dealing with manifolds</p>",
        "id": 164132901,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556152652
    },
    {
        "content": "<p>Speaking of which, do we have anything on manifolds?</p>",
        "id": 164132907,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556152675
    },
    {
        "content": "<p>Mathlib doesn't currently have anything on manifolds. But both <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> made a start, and there is good reason to hope that their combined efforts will lead to a nice library on manifolds in the (near?) future...</p>",
        "id": 164138107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556159800
    },
    {
        "content": "<blockquote>\n<p>Is any of that actually hard to create though?</p>\n</blockquote>\n<p>Nothing is impossible, but everything is  harder than you think, at least initially. For example someone was asking about partitions of unity. In theory this sounds fine, but then you realise that if you want to use C^infty functions, you will need to prove stuff like the sum and the product of C^infty functions is C^infty, and this is not hard, you prove that the sum and the product of C^n functions is C^n and then use induction on n, and after a while of doing all this you realise that actually it's not hard but sometimes it's just a lot of work. Even after you built bump functions you still have to make them usable, by making an API for them, and sometimes it's hard to work out what this API should even be until you start to apply your theory to do something else, and suddenly you need things like \"if I have two partitions of unity then I can put them together and get a third one\", and then you realise you need to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msub><mi mathvariant=\"normal\">Σ</mi><mi>i</mi></msub><msub><mi>f</mi><mi>i</mi></msub><mo>)</mo><mo>(</mo><msub><mi mathvariant=\"normal\">Σ</mi><mi>j</mi></msub><msub><mi>g</mi><mi>j</mi></msub><mo>)</mo><mo>=</mo><msub><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><msub><mi>f</mi><mi>i</mi></msub><msub><mi>g</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">(\\Sigma_i f_i)(\\Sigma_j g_j)=\\Sigma_{i,j}f_ig_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> and then you discover that for C^infinity functions this is only in the library for finite sums, and you have an infinite but locally finite sum, so now you need to do more basic stuff etc etc.</p>\n<p>Nothing is hard, but until all the basics are done there will be plenty of things left which are an annoying struggle. Once an entire undergraduate pure mathematics syllabus is done, things will start getting easier.</p>",
        "id": 164142961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556167386
    },
    {
        "content": "<p>LOL</p>",
        "id": 164144294,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556169371
    },
    {
        "content": "<p>maybe a topological manifold is easier..</p>",
        "id": 164144301,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556169409
    },
    {
        "content": "<p>The correct thing to do is to do the work and make the API. Someone has to do it. The computer scientists don't know what a partition of unity is, but if you write some crappy code which implements it then they can look at it and change it and make it much better and get it mathlib-ready, if they have the time.</p>",
        "id": 164144372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556169511
    },
    {
        "content": "<p>actually who are the computer scientists here? Or, who is responsible for maintaining mathlib?</p>",
        "id": 164144527,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556169737
    },
    {
        "content": "<p>Mathlib is maintained by the maintainers -- you can probably look on the githib page if you understand githib to see who they are. The people who have contributed the most to mathlib is certainly something you can see on github. Mario and Johannes wrote a lot of it originally -- this was the more CS stuff. Now more and more mathematicians are getting involved, but at the minute we write code like Noetherian rings, and they look at it and ask us questions about our use cases and then write better code for us which does the same thing. At some point they'll not understand the maths any more, and then it's up to us to write our own good code.</p>",
        "id": 164144844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556170258
    },
    {
        "content": "<p>But hopefully by then we have such a good API for basic maths that writing good code is not so hard.</p>",
        "id": 164144863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556170293
    },
    {
        "content": "<p>I don't understand the math books or whatever you are using to derive the things you write, but I do understand the lean code. When reading high end mathematics that's been formalized, the tricky part is figuring out the motivation for stuff, and figuring out what was meant when something goes wrong and the intent isn't clear</p>",
        "id": 164145412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556171166
    },
    {
        "content": "<p>is the corresponding question to group know?</p>",
        "id": 164149099,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556176971
    },
    {
        "content": "<p>(ignore the above comment)</p>",
        "id": 164149125,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556177028
    },
    {
        "content": "<p>there is a delete button</p>",
        "id": 164149129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556177040
    },
    {
        "content": "<p>Any possibility to get <a href=\"https://github.com/leanprover-community/mathlib/issues/955\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/955\">#955</a> merged in the near future, by the way? I need this (and then <a href=\"https://github.com/leanprover-community/mathlib/issues/956\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/956\">#956</a>) to submit more material on differentiation and higher order derivatives. I think Mario was happy with it, but maybe there is still something to be improved.</p>",
        "id": 164175632,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556202845
    },
    {
        "content": "<p>I think Mario was happy with it and I don't see any problems, so I marked it ready to merge.</p>",
        "id": 164191284,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1556213421
    }
]