[
    {
        "content": "<p>Anyone interested in sharpening his teeth on polynomials is encouraged to look here: <a href=\"https://gist.github.com/jcommelin/77240367c2815ca0c45da188ba78be19\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/77240367c2815ca0c45da188ba78be19\">https://gist.github.com/jcommelin/77240367c2815ca0c45da188ba78be19</a></p>",
        "id": 130216141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532443926
    },
    {
        "content": "<p>A bunch of stuff from the preamble will be obsolete as soon as Mario pushes his latest mathlib edits.</p>",
        "id": 130216160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532443953
    },
    {
        "content": "<p>In the final lemma there are a bunch of <code>sorry</code>s. The proof is extremely slow, and I am continuously struggling with deterministic timeouts.</p>",
        "id": 130216186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532443997
    },
    {
        "content": "<p>I have no idea why. It didn't feel to me like I was pushing limits.</p>",
        "id": 130216194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532444011
    },
    {
        "content": "<p>So there is about 180 lines of preamble. And then about 50 lines of interesting stuff <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 130216304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532444102
    },
    {
        "content": "<p>(A bit of motivation for these crazy polynomials: They are useful for defining rings of Witt vectors, and those show up all over the place in number theory. For example, the ring of p-adic integers turns out to be the ring of Witt vectors of the finite field with p elements.)</p>",
        "id": 130216538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532444326
    },
    {
        "content": "<blockquote>\n<p>In the final lemma there are a bunch of <code>sorry</code>s. The proof is extremely slow, and I am continuously struggling with deterministic timeouts.</p>\n</blockquote>\n<p>There is sometimes a reason for this (\"your code is crappy for a reason which you didn't realise\") but typically you have to get lucky with an expert looking at it and spotting what you did wrong. My valuation stuff got slow recently and I don't know why, but I didn't even bother posting 200 lines of Lean code and saying \"why does this take three seconds to compile and I had to put some type class thing up to 100 to make it work?\" because it's such a boring question; if I really cared I would try and minimise; currently I just grit my teeth and work around it.</p>",
        "id": 130220198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532448431
    },
    {
        "content": "<p>So how do you work around deterministic timeouts? What determines such a timeout? Can I set some option to let Lean work harder?</p>",
        "id": 130221163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532449581
    },
    {
        "content": "<p>Did you see the <code>1 &lt;= k &lt;= n</code> example? That one seemed to debate some discussion from the experts</p>",
        "id": 130221200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532449659
    },
    {
        "content": "<p>Here's a conjecture: these things are almost always caused by the type class inference system. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what do you think about my conjecture?</p>",
        "id": 130221240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532449684
    },
    {
        "content": "<p>that's a bit of a general claim. Another way to make lean take a long time is to use lots of definitional equality or kernel computation, possibly on accident; and elaboration can often take a suspiciously long time to complete (not crazy but like 10-15 seconds for a term proof) for reasons I don't well understand</p>",
        "id": 130259324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532502799
    },
    {
        "content": "<p>There's a file in the perfectoid repo which takes 10 seconds to compile and I was half-thinking about trying to work out why so really I was looking for clues here.</p>",
        "id": 130263224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532508786
    },
    {
        "content": "<p>Anyone care to take a look at <a href=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L107\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L107\">https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L107</a> ? That file is self-contained, but depends on the latest mathlib.</p>",
        "id": 131034587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533636466
    },
    {
        "content": "<p>I don't know what the type of anything is, but the lemma you're applying needs that the things you're applying it to are in a multiplicative group and the elements you're talking about look suspicious to me</p>",
        "id": 131036884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533639625
    },
    {
        "content": "<p>A field is not a group under multiplication. Are you using the right lemma?</p>",
        "id": 131036897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533639661
    },
    {
        "content": "<p>oh, good call</p>",
        "id": 131037022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533639805
    },
    {
        "content": "<p>there are mirror versions of all the group lemmas for fields with namespace <code>division_ring</code> or <code>field</code></p>",
        "id": 131037035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533639833
    },
    {
        "content": "<p>This has happened to me so many times :-)</p>",
        "id": 131037136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533639961
    },
    {
        "content": "<p>\"I can't find an instance of exactly what it says in the goal\" usually for me means \"the thing you want me to match with doesn't match because of something in square brackets\"</p>",
        "id": 131037218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533640046
    },
    {
        "content": "<p>heh, I remember so many questions from you like that</p>",
        "id": 131037272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533640089
    },
    {
        "content": "<p>I'm slowly making progress... <code>conv</code> is still confusing me.</p>",
        "id": 131038606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533641793
    },
    {
        "content": "<p><code>conv in (λ _, _)</code> gives an error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">mk_pattern</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">expr</span> <span class=\"kn\">parameter</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">occur</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">other</span><span class=\"o\">)</span> <span class=\"n\">expr</span> <span class=\"kn\">parameter</span> <span class=\"n\">types</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"n\">witt_polynomial</span> <span class=\"o\">(</span><span class=\"n\">X_in_terms_of_W</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">m</span>\n<span class=\"err\">⊢</span> <span class=\"n\">witt_polynomial</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n      <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"bp\">+</span>\n        <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n             <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"n\">witt_polynomial</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n               <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"n\">witt_polynomial</span> <span class=\"o\">(</span><span class=\"n\">X_in_terms_of_W</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</pre></div>",
        "id": 131038649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533641876
    },
    {
        "content": "<p>But there is clearly a lambda in there...</p>",
        "id": 131038700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533641899
    },
    {
        "content": "<p>Ok, I navigated to the lambda by hand.</p>",
        "id": 131039097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533642412
    },
    {
        "content": "<p>Then I did some rewrites using ring homomorphisms, but Lean couldn't find an instance for them, nor for some rings.</p>",
        "id": 131039113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533642439
    },
    {
        "content": "<p>Outside the <code>conv</code>, Lean found those instances without any trouble.</p>",
        "id": 131039123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533642455
    },
    {
        "content": "<p>Is this a known issue?</p>",
        "id": 131039128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533642460
    },
    {
        "content": "<p>I have this gut feeling that I've gone from never using <code>conv</code> (because I had no idea how it worked or what it did, before Patrick and I pushed the experts to explain it and then Patrick wrote <code>conv.md</code>) to over-using it. I tend to use it to do rewrites under a lambda -- but remember that <code>simp</code> does this too, so perhaps <code>simp only</code> will do what you're trying to do without having to use <code>conv</code>. One problem with <code>conv</code> is that if you're trying to find <code>f x = g x</code> in some <code>lam x, f x = g x</code> then <code>conv</code> won't match <code>f x</code> because it complains it doesn't know what <code>x</code> is. I don't know what your problem is but I look at pretty much every Lean function and it's some sort of lambda, so trying to match a lambda with so many holes sounds a bit scary to me, and trying to fill in the holes also looks hard for the reason I just mentioned above. Will <code>simp</code> not work for you?</p>",
        "id": 131041397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533645298
    },
    {
        "content": "<p>\"I worked my way around it...\"</p>",
        "id": 131041784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533645763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I have the feeling that I can not extract sublemmas for this proof. Yet I'm constantly plagued with deterministic timeouts. <a href=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L108\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L108\">https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L108</a></p>",
        "id": 131042169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646230
    },
    {
        "content": "<p>I fought the mess (and the mess won)</p>",
        "id": 131042206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646281
    },
    {
        "content": "<p>I wanted to ask: why are you using a <code>finset.univ.sum</code> over <code>fin n</code> when the function to sum over does not depend on the assumption <code>x.2</code>?</p>",
        "id": 131042285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533646379
    },
    {
        "content": "<p>It would be much easier to use <code>(finset.range n).sum (\\lam x, ...)</code></p>",
        "id": 131042296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533646403
    },
    {
        "content": "<p>Ok. The answer is: I've never used <code>finset.range</code> before, and didn't know about it.</p>",
        "id": 131042395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646527
    },
    {
        "content": "<p>deterministic time-outs usually mean that you've made a mistake in your code and Lean, instead of saying \"look an error\", is trying to coerce an int into a nat or something else that it can't do but is unfortunately bad at spotting that it can't do.</p>",
        "id": 131042772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533646978
    },
    {
        "content": "<p>bad coercions, and trying to prove things which aren't refl by refl, are sometimes the cause</p>",
        "id": 131042792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533647003
    },
    {
        "content": "<p>(even if they look refl)</p>",
        "id": 131042797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533647009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Ok, in the definition after the <code>witt_polynomial</code> I am using <code>i.2</code>.</p>",
        "id": 131042913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533647156
    },
    {
        "content": "<p>So now I need some hackery to make that recursive definition work.</p>",
        "id": 131042956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533647171
    },
    {
        "content": "<p>I see that... I'm working on the hackery</p>",
        "id": 131042975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533647184
    },
    {
        "content": "<p>This should get you started:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">range_sum_eq_fin_univ_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_pmap</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">pmap_eq_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">witt_polynomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">))))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X_in_terms_of_W</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X_in_terms_of_W</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))))))</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">X_in_terms_of_W_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X_in_terms_of_W</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">X_in_terms_of_W</span> <span class=\"n\">i</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">*</span>\n      <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">X_in_terms_of_W</span><span class=\"o\">,</span> <span class=\"n\">range_sum_eq_fin_univ_sum</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 131043298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533647528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Hey look, a nontrivial equation lemma</p>",
        "id": 131043305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533647548
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 131043423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533647654
    },
    {
        "content": "<p>That's a really sweet example of equation lemma hackery!</p>",
        "id": 131043492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533647733
    },
    {
        "content": "<p><code>finset.sum finset.univ (λ i : fin (n+1), (C p^i.val * (X i.val)^(p^(n-i.val))))</code></p>\n<p>Is this really still the best way to sum from 0 to n? It's the constant mentioning of <code>.val</code> which is a bit irritating. Is there some big operator or something which makes this better-looking?</p>",
        "id": 131046126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533650520
    },
    {
        "content": "<p>No, the best way is <code>(range (n+1)).sum ...</code></p>",
        "id": 131046219,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533650608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Mario suggested a better way. I'll push my current file.</p>",
        "id": 131046245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533650641
    },
    {
        "content": "<p>Oh yes I see the post now. I ignored it initially because I'd not even begun to look at the file, but I have WiFi for the next 10 minutes so I downloaded the version on GH and am now looking through it.</p>",
        "id": 131046341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533650706
    },
    {
        "content": "<p><a href=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L114\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L114\">https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L114</a></p>",
        "id": 131046344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533650711
    },
    {
        "content": "<p>Ok, make sure you download again (-;</p>",
        "id": 131046356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533650729
    },
    {
        "content": "<p>I've all sorts of rewrites that are failing, and it is beyond me why they fail...</p>",
        "id": 131046430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533650768
    },
    {
        "content": "<p>I see! Range is nice to look at, but summing over <code>fin n</code> is cool because <code>i.2</code> is exactly what you need to make the equation compiler swallow it. Then you switch back to get the equation lemma you really want.</p>",
        "id": 131046616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533650991
    },
    {
        "content": "<p>Yes. Pretty cool stuff, right? Kudos to Mario.</p>",
        "id": 131046705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651054
    },
    {
        "content": "<p>I feel I've made progress today.</p>",
        "id": 131046716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651066
    },
    {
        "content": "<p>But the proof is still extremely slow. And it is fragile beyond imagination.</p>",
        "id": 131046727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651090
    },
    {
        "content": "<p>on line 135 or so you have two different <code>n</code>'s.</p>",
        "id": 131046820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533651177
    },
    {
        "content": "<p>that's from the first two lines. You can ignore the first <code>n</code> after the first line</p>",
        "id": 131046849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533651221
    },
    {
        "content": "<p>Yes, I don't know why <code>strong_induction</code> introduces a new <code>n</code></p>",
        "id": 131046851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651225
    },
    {
        "content": "<p>I'll clear the first one</p>",
        "id": 131046859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651238
    },
    {
        "content": "<p>Inserting <code>repeat {sorry},end #exit</code> on line 124 and the proof still takes forever to compile (a second or two). I can't work with Lean when it's like this. Something you're doing is taking far longer than it should, and rather than biting the bullet nowadays I try to fix it.</p>",
        "id": 131047007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533651400
    },
    {
        "content": "<p>It's line 119</p>",
        "id": 131047028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533651439
    },
    {
        "content": "<p><code>  simp only [eval₂_mul, eval₂_add, eval₂_sub, eval₂_neg, eval₂_C, eval₂_X],</code></p>",
        "id": 131047040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533651453
    },
    {
        "content": "<p>How do you figure out which line it is?</p>",
        "id": 131047098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651497
    },
    {
        "content": "<p><code>elaboration: tactic execution took 3.44s</code>.</p>",
        "id": 131047100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533651500
    },
    {
        "content": "<p>I just keep cutting and pasting <code>repeat {sorry}, end #exit</code> higher and higher up the file until I find it</p>",
        "id": 131047112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533651521
    },
    {
        "content": "<p>Nowadays when I write Lean code I notice it straight away and deal with the problem when it appears.</p>",
        "id": 131047125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533651538
    },
    {
        "content": "<p>Ok... so somehow I need to speed up that line...</p>",
        "id": 131047143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651573
    },
    {
        "content": "<p>In mathspeak it says that the <code>eval2</code> is a ring homomorphism, and that it therefore commutes with mul and add.</p>",
        "id": 131047196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651609
    },
    {
        "content": "<p>And thus the ring hom can be moved \"inside\".</p>",
        "id": 131047210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval₂_mul</span><span class=\"o\">,</span> <span class=\"n\">eval₂_C</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval₂_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eval₂_X</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 131047369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651823
    },
    {
        "content": "<p>Somehow <code>simp only</code> succeeds, while <code>rw</code> doesn't...</p>",
        "id": 131047376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651838
    },
    {
        "content": "<p>Ok, it is still really ugly... but progress: <a href=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L115\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L115\">https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L115</a></p>",
        "id": 131050069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533654669
    },
    {
        "content": "<p>Now I need <code>i.property</code> but I no longer have access to it <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 131050137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533654736
    },
    {
        "content": "<p>And the proof is still relatively slow.</p>",
        "id": 131050148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533654749
    },
    {
        "content": "<p>Anyway, I need to go home now. See you later!</p>",
        "id": 131050156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533654758
    },
    {
        "content": "<p>After lots of testing, I think I know the problem: <code>eval₂_*</code> is a bad simp lemma, not because it is written incorrectly, but because it is too expensive to instantiate. It takes a second or so to figure out if one of these rules even applies, and simp has to go through tons of them at all parts of the expression</p>",
        "id": 131050849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533655447
    },
    {
        "content": "<p>I've just been dropping these <code>sorry,end #exit</code> lines in near the beginning and even the rewrites are taking time. <code>simp only [eval₂_sub]</code> seems to take about 200ms but <code>rw @eval₂_sub _ _ _ _ _ _ (X n) (finset.sum (finset.range n) (λ (i : ℕ), C ↑p ^ i * X_in_terms_of_W i ^ p ^ (n - i))) _ _ C _ witt_polynomial</code> also takes about 200ms</p>",
        "id": 131051808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533656354
    },
    {
        "content": "<p>and then <code>rw eval₂_X</code> takes about 600ms</p>",
        "id": 131051831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533656390
    },
    {
        "content": "<p>For me the <code>eval2_sub</code> proof works provided I have the <code>foobar</code> instance:</p>\n<div class=\"codehilite\"><pre><span></span>instance foobar : comm_ring (mv_polynomial ℕ ℚ) := by apply_instance\n</pre></div>",
        "id": 131053242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533657682
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">definition</span> <span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">definition</span> <span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">definition</span> <span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">definition</span> <span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">definition</span> <span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">X_in_terms_of_W_prop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X_in_terms_of_W</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"n\">witt_polynomial</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">X_in_terms_of_W_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval₂_mul</span><span class=\"o\">,</span> <span class=\"n\">eval₂_C</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">eval₂_sub</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"n\">inst_1</span> <span class=\"n\">inst_2</span> <span class=\"n\">inst_3</span>\n    <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">X_in_terms_of_W</span> <span class=\"n\">i</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n    <span class=\"n\">inst_4</span> <span class=\"n\">inst_5</span> <span class=\"n\">C</span> <span class=\"n\">inst_6</span> <span class=\"n\">witt_polynomial</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"kn\">end</span> <span class=\"bp\">#</span><span class=\"kn\">exit</span>\n</pre></div>\n\n\n<p>That last rw is taking 150ms. Is that a long time for a rewrite?</p>",
        "id": 131054040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533658532
    },
    {
        "content": "<p>I filled in every field.</p>",
        "id": 131054089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533658566
    },
    {
        "content": "<p>and <code>rw @eval₂_X ℚ (mv_polynomial ℕ ℚ) ℕ inst_1 inst_2 inst_3' inst_4' C inst_5' witt_polynomial n</code> (the line after) is taking over 300ms.</p>",
        "id": 131054347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533659016
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">inst_3&#39;</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">definition</span> <span class=\"n\">inst_4&#39;</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">definition</span> <span class=\"n\">inst_5&#39;</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>I thought that <code>rw</code> looked at the head of the expression, and it's not hard to find <code>eval_2</code>, there's only two possibilities, and one of them fits perfectly. I don't understand why these rewrites are taking so long.</p>",
        "id": 131054427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533659147
    },
    {
        "content": "<p>That's exactly what I was thinking.</p>",
        "id": 131054652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533659431
    },
    {
        "content": "<p>By the way, in the expression <code>(X_in_terms_of_W n).eval₂ C witt_polynomial = X n</code> are you aware that the <code>R</code> variable of <code>witt_polynomial</code> is instantiated as <code>Q</code>?</p>",
        "id": 131054696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533659515
    },
    {
        "content": "<p>if you try to assert that it has type <code>mv_polynomial ℕ R</code> it doesn't typecheck</p>",
        "id": 131054768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533659584
    },
    {
        "content": "<p>Oh wow, this has a 1000% improvement in speed:</p>\n<div class=\"codehilite\"><pre><span></span>generalize e : eval₂ C witt_polynomial = f,\nhaveI : is_ring_hom f := by subst f; apply eval₂.is_ring_hom,\n</pre></div>\n\n\n<p>Most of the proof only uses that <code>f</code> is a ring hom. For the rest, you can use the equality to recover the eval</p>",
        "id": 131055665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533660881
    },
    {
        "content": "<p>Mario, yes, I was aware of that. In the end, we want some identity over <code>\\Z</code>. I only wrote the general definition of <code>witt_polynomial</code> so that I didn't constantly have to <code>map</code> them to other rings.</p>",
        "id": 131056663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533662010
    },
    {
        "content": "<p>Ok, so I put that bit of code somewhere in the beginning of my proof? And then I get massive speedups, and afterwards it is recovered/unfolded towards the end?</p>",
        "id": 131056734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533662083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does your suggestion classify as best practice or is it a fragile hack? Is this a sign that we need to improve <code>eval2</code>, or is there nothing to worry about?</p>",
        "id": 131058032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533663407
    },
    {
        "content": "<p>It is a hack, although not that fragile, it's just a weird workaround for inexplicable slowdown</p>",
        "id": 131082758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533695548
    },
    {
        "content": "<p>I found another weird way to speed things up:</p>\n<div class=\"codehilite\"><pre><span></span>set_option profiler true\n\ninstance eval_witt_hom : is_ring_hom (eval₂ C (witt_polynomial R)) :=\n@mv_polynomial.eval₂.is_ring_hom _ _ _ _ _ _ _ _ _\n  (@C.is_ring_hom R ℕ _ (λ a b, _inst_2 a b) _) _\n\nlemma X_in_terms_of_W_prop (n : ℕ) : (X_in_terms_of_W n).eval₂ C (witt_polynomial ℚ) = X n :=\nbegin\n  apply nat.strong_induction_on n,\n  intros n H,\n  rw [X_in_terms_of_W_eq],\n  simp,\nend\n</pre></div>\n\n\n<p>the <code>simp</code> application runs fine as long as you have that instance. The elaboration of <code>eval_witt_hom</code> takes about 500 ms written like this, but if I write <code>_inst_2</code> instead of eta expanded, elaboration jumps to 8.3 s. If I use <code>by apply_instance</code> it takes about 1 s</p>",
        "id": 131082897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533695773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This stuff is closer to your area of expertise than mine, although I am not sure how easy it is to separate mathlib from this issue</p>",
        "id": 131082996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533695984
    },
    {
        "content": "<p>Okay, here's a complete proof with no unreasonable slowdowns:</p>\n<div class=\"codehilite\"><pre><span></span>instance eval_witt_hom : is_ring_hom (eval₂ C (witt_polynomial R)) :=\n@mv_polynomial.eval₂.is_ring_hom _ _ _ _ _ _ _ _ _\n  (@C.is_ring_hom R ℕ _ (λ a b, _inst_2 a b) _) _\n\nlemma X_in_terms_of_W_prop&#39;\n  (f : mv_polynomial ℕ ℚ → mv_polynomial ℕ ℚ) [is_ring_hom f]\n  (fC : ∀ (a : ℚ), f (C a) = C a)\n  (fX : ∀ (n : ℕ), f (X n) = witt_polynomial ℚ n)\n  (n : ℕ) : f (X_in_terms_of_W n) = X n :=\nbegin\n  apply nat.strong_induction_on n,\n  clear n, intros n H,\n  rw [X_in_terms_of_W_eq],\n  simp only [is_ring_hom.map_mul f, is_ring_hom.map_sub f, fC, fX, ring_hom_sum.finset f],\n  rw [finset.sum_congr rfl, (_ : witt_polynomial ℚ n -\n    (finset.range n).sum (λ i, C p ^ i * X i ^ p ^ (n - i)) = C (p ^ n) * X n)],\n  { rw [mul_right_comm, ← C_mul, mul_one_div_cancel, C_1, one_mul],\n    exact pow_ne_zero _ (nat.cast_ne_zero.2 $ ne_of_gt pp.pos) },\n  { simp [witt_polynomial, nat.sub_self],\n    rw ring_hom_powers (@C ℚ ℕ _ _ _) },\n  { intros i h,\n    simp [is_ring_hom.map_mul f, ring_hom_powers f, fC] at h ⊢,\n    rw H _ h }\nend\n\nlemma X_in_terms_of_W_prop (n : ℕ) : (X_in_terms_of_W n).eval₂ C (witt_polynomial ℚ) = X n :=\nbegin\n  letI : is_ring_hom (@C ℚ ℕ _ _ _) := by apply_instance,\n  haveI H := @eval_witt_hom _ ℚ _ _,\n  have fC := eval₂_C C (witt_polynomial ℚ),\n  have fX := eval₂_X C (witt_polynomial ℚ),\n  revert H fC fX, generalize : eval₂ C (witt_polynomial ℚ) = f,\n  introsI, exact X_in_terms_of_W_prop&#39; f fC fX n\nend\n</pre></div>",
        "id": 131087058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533702164
    },
    {
        "content": "<p>Wow! Thanks for your help Mario! I wouldn't have been able to come up with this myself.</p>",
        "id": 131088141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533704406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is it ok that your proof explicitly mentions <code>_inst_2</code>? I always assumed that was \"forbidden\".</p>",
        "id": 131088204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533704634
    },
    {
        "content": "<p>You should see if <code>λ a b, by apply_instance</code> also works without slowdown. If not, you can just name the instance and refer to it</p>",
        "id": 131088256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533704741
    },
    {
        "content": "<p>Ok, I'll merge this into my file as soon as I'm back at work.</p>",
        "id": 131088298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533704765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You also changed the definition of <code>witt_polynomial</code> to make the ring <code>R</code> explicit, didn't you?</p>",
        "id": 131091024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533709923
    },
    {
        "content": "<p>I did, it was making things a bit confusing. You don't have to</p>",
        "id": 131091040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533709969
    },
    {
        "content": "<p>Is there a way to tease more information out of Lean when it gives the error <code>command expected</code>?</p>",
        "id": 131092231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533712226
    },
    {
        "content": "<p>that means that the parser was reset, you are between definitions or something, and you give a non-keyword</p>",
        "id": 131092296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533712386
    },
    {
        "content": "<p>Or it means you have <code>checking visible lines</code> mode enabled and you should scroll down to refresh the parser</p>",
        "id": 131092301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533712420
    },
    {
        "content": "<p>I see... a very descriptive error message <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 131092457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533712756
    },
    {
        "content": "<blockquote>\n<p>Or it means you have <code>checking visible lines</code> mode enabled and you should scroll down to refresh the parser</p>\n</blockquote>\n<p>Johan -- we're talking about the little message in the blue bar at the bottom of the VS Code window which says something like \"checking visible lines and above\". I constantly refer to this as \"evil mode\" and it used to be the case that whenever I see a student whose blue bar said this, I would tell them to click on the blue bar and change it to \"checking visible files\". There is a place for the \"visible lines and above\" choice, but for my users it causes more trouble than it solves, because it means that sometimes the answer to \"there's a red line -- what is wrong with my code?\" is \"nothing is wrong with your code, it's just that Lean isn't reading all of it\". Nowadays I just show my students how to make it say \"checking visible files\" by selecting File-&gt;Preferences-&gt;Settings (ctrl-, on linux), then searching for <code>linesandabove</code> in the default user settings, hovering over <code>\"lean.roiModeDefault\": \"linesAndAbove\"</code> (if it says that -- you want it to say <code>visible</code>, clicking the little pencil just to the left of it [thus moving the variable into the part of the settings which you can edit], and then making sure it says <code>\"lean.roiModeDefault\": \"visible\"</code> in user settings.</p>",
        "id": 131095998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533718825
    },
    {
        "content": "<blockquote>\n<p>Nowadays I just show my students how to make it say \"checking visible files\"</p>\n</blockquote>\n<p>BTW, this is the default now.</p>",
        "id": 131096086,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533719016
    },
    {
        "content": "<p>Thanks for switching it back Gabriel. It's fine if you know what you're doing, but experience indicated that it was confusing for new users. I love the way that you just sit there in the background occasionally making things better for me.</p>",
        "id": 131096702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533719979
    },
    {
        "content": "<p>Thanks for the explanation Kevin!</p>",
        "id": 131097020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533720354
    },
    {
        "content": "<p>Aaaaahrg. I'm completely stuck again!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">quux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">X_in_terms_of_W_prop₂</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">X_in_terms_of_W</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">witt_polynomial</span><span class=\"o\">],</span>\n  <span class=\"n\">conv</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">quux</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- generalize e : eval X_in_terms_of_W = f,</span>\n  <span class=\"c1\">-- haveI : is_ring_hom f := by subst f; apply eval.is_ring_hom,</span>\n  <span class=\"c1\">-- simp only [ring_hom_sum.finset f],</span>\n  <span class=\"c1\">-- repeat {sorry}, end #exit</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 131101387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533726850
    },
    {
        "content": "<p>Yesterday's trick isn't working.</p>",
        "id": 131101390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533726863
    },
    {
        "content": "<p><del>After this sorry is removed, I think we are mostly good to go for the definition of witt vectors.</del> Meh... I forgot that I still need to convince Lean that I actually get a polynomial over <code>\\Z</code> instead of <code>\\Q</code>.</p>",
        "id": 131101554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533727106
    },
    {
        "content": "<p>But maybe we first need to figure out why Lean is misbehaving like a toddler...</p>",
        "id": 131101563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533727140
    },
    {
        "content": "<p>I pushed the stuff that I have right now: <a href=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L135\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L135\">https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L135</a></p>",
        "id": 131101710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533727351
    },
    {
        "content": "<p>Ok, so I have polynomials over <code>\\Q</code>, but actually all their coefficients lie in <code>\\Z</code>. What is the best way to extract this polynomial over <code>\\Z</code>? I currently have the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">witt_structure_int</span> <span class=\"o\">(</span><span class=\"err\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">bool</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_int_num</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">witt_structure_rat</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"err\">Φ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 131102445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533728419
    },
    {
        "content": "<p>Your rewrite on line 144 is, for me, trying to rewrite when the goal is <code>| X_in_terms_of_W</code>. But if I add another <code>skip</code> then I see Lean trying to do this:</p>\n<div class=\"codehilite\"><pre><span></span>_inst_1 : nat.Prime,\nk : ℕ,\nH : ∀ (m : ℕ), m &lt; k → eval₂ C X_in_terms_of_W (witt_polynomial m) = X m\n| finset.sum (finset.range (k + 1)) (λ (i : ℕ), C ↑p ^ i * X i ^ p ^ (k - i))\nscratch6.lean:145:4: error\n\nrewrite tactic failed, did not find instance of the pattern in the target expression\n  finset.sum (finset.range (k + 1)) (λ (i : ℕ), C ↑p ^ i * X i ^ p ^ (k - i))\nstate:\n10 goals\n_inst_1 : nat.Prime,\nk : ℕ,\nH : ∀ (m : ℕ), m &lt; k → eval₂ C X_in_terms_of_W (witt_polynomial m) = X m\n⊢ finset.sum (finset.range (k + 1)) (λ (i : ℕ), C ↑p ^ i * X i ^ p ^ (k - i)) = ?m_1\n</pre></div>\n\n\n<p>But when you <code>set_option pp.all true</code> I see a whole bunch of typeclass inference stuff which doesn't look like it matches up. The thing you're trying to rewrite has a whole bunch of unsolved metavariables. Your goal looks like this: </p>\n<div class=\"codehilite\"><pre><span></span> (@finset.sum.{0 0} nat\n       (@mv_polynomial.{0 0} nat rat\n...\n</pre></div>\n\n\n<p>and the thing you're trying to rewrite looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>  @finset.sum.{0 ?l_1} nat (@mv_polynomial.{0 ?l_1} nat ?m_2 ?m_3) ...\n</pre></div>\n\n\n<p>Maybe if you are more precise with your rewrite it might help, i.e. throw in some <code>@</code>s and say exactly what the type of some more things are. I am kind of wondering whether the type class inference system doesn't know enough about what your types are, and is making some bad guesses about what instances it should use.</p>",
        "id": 131103604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533729735
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/5254103e5f33b022636a9491fb6719e9\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/5254103e5f33b022636a9491fb6719e9\">https://gist.github.com/kbuzzard/5254103e5f33b022636a9491fb6719e9</a></p>\n<p>That's the beginning of the <code>set_option pp.all true</code> output. The <code>quux</code> thing is the thing at the top. The goal is the much longer thing at the bottom, most of which I've truncated. The much longer thing at the bottom corresponds to just the first three lines of the top. Lines 3 and 50 match perfectly. Lines 1 and 2 are supposed to match with lines 16 to 49. We have a universe metavariable <code>?l_1</code> which can be zero, then a term metavariable <code>?m_2</code> which can be <code>rat</code>. What I'm worried about is line 2, which says that type class inference wants to prove something is an add_comm_monoid, and it's going to do this by showing it's an add_comm_group and then it will use an instance called <code>add_comm_group.to_add_comm_monoid</code>. But lines 25 to 42 seem to be showing that the rationals are an add_comm_monoid by showing that they're a field, and then a comm_ring, and then a comm_semiring (note that we have now diverged from the plan, because a comm_semiring isn't an add_comm_group) and then an add_comm_monoid.</p>\n<p>Now this might not be the problem, but somehow it looks to me like it <em>might</em> be an obstruction to the rewrite succeeding. Can you somehow tell Lean that you're not working with <code>?m_2</code> but with <code>rat</code>?</p>",
        "id": 131105049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533731393
    },
    {
        "content": "<p>Like so?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"n\">quux</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span><span class=\"o\">)),</span>\n</pre></div>\n\n\n<p>Alas, that still fails.</p>",
        "id": 131105249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533731579
    },
    {
        "content": "<p>Hmm, now the output of <code>pp.all</code> shows an insane amount of similarities between the goal and what the rewrite offers.</p>",
        "id": 131105757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533732104
    },
    {
        "content": "<p>But it is not enough. The <code>rw</code> is using modules <span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span> whereas the goal is sane, and just works with rings.</p>",
        "id": 131105807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533732134
    },
    {
        "content": "<p>What you're trying to rewrite: <a href=\"https://gist.github.com/kbuzzard/8b4048c89309808fe829c5e59caaa503\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/8b4048c89309808fe829c5e59caaa503\">https://gist.github.com/kbuzzard/8b4048c89309808fe829c5e59caaa503</a></p>\n<p>Goal: <a href=\"https://gist.github.com/kbuzzard/f515877383946b5eb84f03e31cb988c3\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/f515877383946b5eb84f03e31cb988c3\">https://gist.github.com/kbuzzard/f515877383946b5eb84f03e31cb988c3</a></p>\n<p>They're not the same. The question perhaps is which differences are superficial and which ones are stopping the rewrite</p>",
        "id": 131105895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533732246
    },
    {
        "content": "<p>I'm scared by <a href=\"https://gist.github.com/kbuzzard/8b4048c89309808fe829c5e59caaa503#file-pattern-lean-L21\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/8b4048c89309808fe829c5e59caaa503#file-pattern-lean-L21\">https://gist.github.com/kbuzzard/8b4048c89309808fe829c5e59caaa503#file-pattern-lean-L21</a></p>",
        "id": 131106029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533732385
    },
    {
        "content": "<p>Sorry!!! I messed up. I did not have enough <code>skip</code>s in the <code>conv</code>. <span class=\"emoji emoji-1f62d\" title=\"sob\">:sob:</span></p>",
        "id": 131106164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533732559
    },
    {
        "content": "<p>Didn't I mention that? ;-)</p>",
        "id": 131106990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533733397
    },
    {
        "content": "<p>Hmmm, it seems to me that whenever I make any progress using <code>simp</code> or <code>dsimp</code>, afterwards everything breaks, because it cleans up to much.</p>",
        "id": 131108053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533734499
    },
    {
        "content": "<p>So I find my self doing long chains of <code>rw</code>s</p>",
        "id": 131108058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533734509
    },
    {
        "content": "<p>And now I have <code>(\\lam i, f i) i</code>. And I need <code>f i</code>. How do I do that without <code>dsimp</code>?</p>",
        "id": 131108116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533734539
    },
    {
        "content": "<p>Ok, so I think this is called beta-reduction. Is there a tactic that will do beta-reduction, and nothing else?</p>",
        "id": 131108302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533734751
    },
    {
        "content": "<p>Ok! \"I worked my way around it.\"</p>",
        "id": 131108886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533735286
    },
    {
        "content": "<p>All sorries are gone in this part! <span class=\"emoji emoji-1f419\" title=\"octopus\">:octopus:</span></p>",
        "id": 131108907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533735325
    },
    {
        "content": "<p>Now I need to figure out how to get some polynomials that are defined over Q to believe that they actually live over Z.</p>",
        "id": 131108917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533735349
    },
    {
        "content": "<p><a href=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L218\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L218\">https://github.com/jcommelin/mathlib/blob/witt/algebra/witt_vector.lean#L218</a></p>",
        "id": 131108918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533735352
    },
    {
        "content": "<p>You can have a look at <a href=\"https://github.com/leanprover/lean/blob/28f4143be31b7aa3c63a907be5443ca100025ef1/library/init/meta/simp_tactic.lean#L71\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/28f4143be31b7aa3c63a907be5443ca100025ef1/library/init/meta/simp_tactic.lean#L71\">https://github.com/leanprover/lean/blob/28f4143be31b7aa3c63a907be5443ca100025ef1/library/init/meta/simp_tactic.lean#L71</a></p>",
        "id": 131109022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533735461
    },
    {
        "content": "<p>turning off everything but beta</p>",
        "id": 131109042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533735473
    },
    {
        "content": "<p>I think you only need to specify that beta is turned on</p>",
        "id": 131109241,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533735608
    },
    {
        "content": "<p>but I'm not sure</p>",
        "id": 131109276,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533735667
    },
    {
        "content": "<p>I think we could have a tactic doing only this and unfolding composition (ie <code>rw comp_app</code>)</p>",
        "id": 131109373,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533735765
    },
    {
        "content": "<p>After almost a year I took another look at this code. I've almost proven the fundamental theorem about witt polynomials: <a href=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean\">https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean</a></p>",
        "id": 168051078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560436769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">witt_structure_int_exists_unique</span> <span class=\"o\">(</span><span class=\"err\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">bool</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span>\n<span class=\"err\">Φ</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 168051161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560436804
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L1199\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L1199\">https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L1199</a></p>",
        "id": 168051182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560436815
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/1906.03583\" target=\"_blank\" title=\"https://arxiv.org/abs/1906.03583\">https://arxiv.org/abs/1906.03583</a></p>\n<p>If you want a goal which looks accessible ;-)</p>",
        "id": 168051204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560436842
    },
    {
        "content": "<p>The only sorry on which that proof depends is on <a href=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L921\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L921\">https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L921</a> and it says:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"n\">modₑ</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"n\">modₑ</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 168051264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560436886
    },
    {
        "content": "<p>In other words, I need little Fermat for integers that are viewed as constant polynomials in an arbitrary multi-variate polynomial ring over the integers.</p>",
        "id": 168051353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560436925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think it makes more sense to first show that Witt vectors form a ring (-;</p>",
        "id": 168051408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560436963
    },
    {
        "content": "<p>(And to clean up the file.)</p>",
        "id": 168051423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560436978
    },
    {
        "content": "<p>There are some extremely crazy things going on, where type class search completely messes up.</p>",
        "id": 168051468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560437006
    },
    {
        "content": "<p>And what is annoying is that you can't even easily switch it off using <code>@</code>s. I wish I could tell Lean:<br>\n\"Hey, I want to apply this lemma. Try to do that without caring about the type class instances. Just give them to me as goals.\"<br>\nBut I'm not sure if it is easy to say that to Lean.</p>",
        "id": 168051570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560437072
    },
    {
        "content": "<p>If you want Lean to say that then does this mean that some things are classes which shouldn't be classes?</p>",
        "id": 168053571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560438265
    },
    {
        "content": "<p>Things like <code>add_comm_monoid</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 168054494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560438892
    },
    {
        "content": "<p>It can't figure out that quotient rings are <code>add_comm_monoid</code>, or that <code>quotient.mk</code> is a semiring hom, etc.. etc...</p>",
        "id": 168054563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560438932
    },
    {
        "content": "<p>Probably these issues go away with proper proof engineering... But I'm not a proof engineer.</p>",
        "id": 168054588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560438956
    },
    {
        "content": "<p>I use <code>by apply</code> when I get the pesky issue with inferred != unified</p>",
        "id": 168056875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560440417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> With underscores? As in, do you then manually have to fill in the typeclasses? Or does it usually figure out all the type classes itself?</p>",
        "id": 168067220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560447500
    },
    {
        "content": "<p>no underscores</p>",
        "id": 168072838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560450957
    },
    {
        "content": "<p>just <code>by apply foo</code> instead of <code>foo _ _</code> or <code>@foo _ _ _ _</code> or whatever</p>",
        "id": 168072910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560450981
    },
    {
        "content": "<p>I'll test this</p>",
        "id": 168073697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560451494
    },
    {
        "content": "<p>In the course of this file, I prove:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_sub_pow_of_dvd_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L261\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L261\">https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L261</a></p>",
        "id": 168073959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560451680
    },
    {
        "content": "<p>This proof is currently quite long and slow.</p>",
        "id": 168074014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560451690
    },
    {
        "content": "<p>But it is completely elementary maths...</p>",
        "id": 168074029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560451703
    },
    {
        "content": "<p>Here is what I currently have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_sub_pow_of_dvd_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_eq_iff_eq_add&#39;</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">add_pow</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_self</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_eq_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel&#39;</span><span class=\"o\">],</span> <span class=\"n\">clear</span> <span class=\"n\">hc</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">coe_nat_dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_dvd_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left&#39;</span> <span class=\"err\">$</span> <span class=\"n\">le_add_left</span> <span class=\"err\">$</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ge_two</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_two</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">i_pos</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_dvd_mul</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">generalize</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_one</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_dvd_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">dvd_choose</span> <span class=\"n\">i_pos</span> <span class=\"n\">hi</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168074096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560451753
    },
    {
        "content": "<p>If someone is looking for a golfing challenge... voila <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 168074136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560451776
    },
    {
        "content": "<blockquote>\n<p>It can't figure out that quotient rings are <code>add_comm_monoid</code></p>\n</blockquote>\n<p>This one in particular seems alarming</p>",
        "id": 168080734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560456623
    },
    {
        "content": "<p>I've done some refactoring, and removed a bunch of sorries.</p>",
        "id": 168218364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560623535
    },
    {
        "content": "<p>Witt vectors are now a <code>comm_ring</code>:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L1339\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L1339\">https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L1339</a></p>",
        "id": 168218367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560623544
    },
    {
        "content": "<blockquote>\n<p>I use <code>by apply</code> when I get the pesky issue with inferred != unified</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I've been trying this but is doesn't seem to work.</p>\n<p>I've cleaned up the code quite a bit. In the course of this, those sorries returned. I have no idea what is wrong, but for some weird reason I'm pushing Leans limits.<br>\nIf you could take a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L577\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L577\">https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L577</a> that would be great.</p>",
        "id": 168376810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560843613
    },
    {
        "content": "<p>This branch only changes <code>mv_polynomial.lean</code> and the new file <code>witt_vector.lean</code>.</p>\n<div class=\"codehilite\"><pre><span></span>git pull\ngit checkout 38d5c12022e001a221e279f035e3cc0734c4a189 <span class=\"c1\"># the lean-3.4.2 of yesterday</span>\ncache-olean --fetch\ngit checkout witt-vectors\n</pre></div>\n\n\n<p>That should give one a working version of the branch pretty quickly.</p>",
        "id": 168376951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560843819
    },
    {
        "content": "<p>To give an idea of how weird the situation is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">4</span> <span class=\"n\">goals</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">distrib</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))}))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">add_semigroup</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))}))</span>\n\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">modₑ</span> <span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">is_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))}))</span>\n\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">is_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))}))</span>\n</pre></div>\n\n\n<p>For none of these goals the \"obvious\" proof works. I.e. no <code>apply_instance</code> or <code>zero_mul</code> etc...</p>",
        "id": 168378405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560845144
    },
    {
        "content": "<p>does rfl work for the first?</p>",
        "id": 168378474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560845181
    },
    {
        "content": "<p>It does. But Johan you can see something is funny about this code. The 20 or so lines of proof of <code>witt_polynomial_mod_pow_p</code> are taking forever to compile on my machine. There is perhaps some gigantic monster term somewhere in there which needs to be tamed, or something is timing out somewhere...</p>",
        "id": 168379641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846294
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1 goal\np : nat,\nn : nat\n⊢ @eq.{1}\n    (@ideal.quotient.{0}\n       (@mv_polynomial.{0 0} nat int\n          (@comm_ring.to_comm_semiring.{0} int\n             (@nonzero_comm_ring.to_comm_ring.{0} int\n                (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))\n       (@mv_polynomial.comm_ring.{0 0} int nat (λ (a b : nat), nat.decidable_eq a b)\n          (λ (a b : int), int.decidable_eq a b)\n          (@nonzero_comm_ring.to_comm_ring.{0} int\n             (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))\n       (@ideal.span.{0}\n          (@mv_polynomial.{0 0} nat int\n             (@comm_ring.to_comm_semiring.{0} int\n                (@nonzero_comm_ring.to_comm_ring.{0} int\n                   (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))\n          (@mv_polynomial.comm_ring.{0 0} int nat (λ (a b : nat), nat.decidable_eq a b)\n             (λ (a b : int), int.decidable_eq a b)\n             (@nonzero_comm_ring.to_comm_ring.{0} int\n                (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))\n          (@singleton.{0 0}\n             (@mv_polynomial.{0 0} nat int\n                (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                   (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                      (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))\n             (set.{0}\n                (@mv_polynomial.{0 0} nat int\n                   (@comm_ring.to_comm_semiring.{0} int\n                      (@nonzero_comm_ring.to_comm_ring.{0} int\n                         (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))))\n             (@set.has_emptyc.{0}\n                (@mv_polynomial.{0 0} nat int\n                   (@comm_ring.to_comm_semiring.{0} int\n                      (@nonzero_comm_ring.to_comm_ring.{0} int\n                         (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))))\n             (@set.has_insert.{0}\n                (@mv_polynomial.{0 0} nat int\n                   (@comm_ring.to_comm_semiring.{0} int\n                      (@nonzero_comm_ring.to_comm_ring.{0} int\n                         (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))))\n             (@mv_polynomial.C.{0 0} int nat (λ (a b : nat), nat.decidable_eq a b)\n                (λ (a b : int), int.decidable_eq a b)\n                (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                   (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                      (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))\n                (@coe.{1 1} nat int\n                   (@coe_to_lift.{1 1} nat int\n                      (@coe_base.{1 1} nat int\n                         (@nat.cast_coe.{0} int\n                            (@mul_zero_class.to_has_zero.{0} int\n                               (@semiring.to_mul_zero_class.{0} int\n                                  (@comm_semiring.to_semiring.{0} int\n                                     (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                                        (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                                           (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))))\n                            (@monoid.to_has_one.{0} int\n                               (@semiring.to_monoid.{0} int\n                                  (@comm_semiring.to_semiring.{0} int\n                                     (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                                        (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                                           (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))))\n                            (@distrib.to_has_add.{0} int\n                               (@semiring.to_distrib.{0} int\n                                  (@comm_semiring.to_semiring.{0} int\n                                     (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                                        (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                                           (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))))))))\n                   (@has_pow.pow.{0 0} nat nat nat.has_pow p\n                      (@has_add.add.{0} nat nat.has_add n (@has_one.one.{0} nat nat.has_one))))))))\n    (@has_mul.mul.{0}\n       (@ideal.quotient.{0}\n          (@mv_polynomial.{0 0} nat int\n             (@comm_ring.to_comm_semiring.{0} int\n                (@nonzero_comm_ring.to_comm_ring.{0} int\n                   (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))\n          (@mv_polynomial.comm_ring.{0 0} int nat (λ (a b : nat), nat.decidable_eq a b)\n             (λ (a b : int), int.decidable_eq a b)\n             (@nonzero_comm_ring.to_comm_ring.{0} int\n                (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))\n          (@ideal.span.{0}\n             (@mv_polynomial.{0 0} nat int\n                (@comm_ring.to_comm_semiring.{0} int\n                   (@nonzero_comm_ring.to_comm_ring.{0} int\n                      (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))\n             (@mv_polynomial.comm_ring.{0 0} int nat (λ (a b : nat), nat.decidable_eq a b)\n                (λ (a b : int), int.decidable_eq a b)\n                (@nonzero_comm_ring.to_comm_ring.{0} int\n                   (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))\n             (@singleton.{0 0}\n                (@mv_polynomial.{0 0} nat int\n                   (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                      (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                         (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))\n                (set.{0}\n                   (@mv_polynomial.{0 0} nat int\n                      (@comm_ring.to_comm_semiring.{0} int\n                         (@nonzero_comm_ring.to_comm_ring.{0} int\n                            (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))))\n                (@set.has_emptyc.{0}\n                   (@mv_polynomial.{0 0} nat int\n                      (@comm_ring.to_comm_semiring.{0} int\n                         (@nonzero_comm_ring.to_comm_ring.{0} int\n                            (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))))\n                (@set.has_insert.{0}\n                   (@mv_polynomial.{0 0} nat int\n                      (@comm_ring.to_comm_semiring.{0} int\n                         (@nonzero_comm_ring.to_comm_ring.{0} int\n                            (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))))\n                (@mv_polynomial.C.{0 0} int nat (λ (a b : nat), nat.decidable_eq a b)\n                   (λ (a b : int), int.decidable_eq a b)\n                   (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                      (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                         (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain)))\n                   (@coe.{1 1} nat int\n                      (@coe_to_lift.{1 1} nat int\n                         (@coe_base.{1 1} nat int\n                            (@nat.cast_coe.{0} int\n                               (@mul_zero_class.to_has_zero.{0} int\n                                  (@semiring.to_mul_zero_class.{0} int\n                                     (@comm_semiring.to_semiring.{0} int\n                                        (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                                           (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                                              (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))))\n[many more lines cut]\n</pre></div>",
        "id": 168379816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846460
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/33fe4da55bcc83199306c133f6c4d865\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/33fe4da55bcc83199306c133f6c4d865\">https://gist.github.com/kbuzzard/33fe4da55bcc83199306c133f6c4d865</a> The goal is nearly 1000 lines long. Is this inevitable when dealing with complex algebraic types or is this an indication that something is wrong?</p>",
        "id": 168379924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846550
    },
    {
        "content": "<p>omg we need deduplicating pretty printer so much</p>",
        "id": 168379932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846572
    },
    {
        "content": "<p>this definitely isn't inevitable in the abstract</p>",
        "id": 168379996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846621
    },
    {
        "content": "<p>not sure how inevitable it is in lean, with the existing typeclass inference mechanism</p>",
        "id": 168380009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846647
    },
    {
        "content": "<p>This subterm</p>\n<div class=\"codehilite\"><pre><span></span>                            (@coe.{1 1} nat int\n                               (@coe_to_lift.{1 1} nat int\n                                  (@coe_base.{1 1} nat int\n                                     (@nat.cast_coe.{0} int\n                                        (@mul_zero_class.to_has_zero.{0} int\n                                           (@semiring.to_mul_zero_class.{0} int\n                                              (@comm_semiring.to_semiring.{0} int\n                                                 (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                                                    (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                                                       (@euclidean_domain.to_nonzero_comm_ring.{0} int\nint.euclidean_domain))))))\n</pre></div>\n\n\n<p>comes up around 10 times.</p>",
        "id": 168380015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846651
    },
    {
        "content": "<p>that's just <code>int.of_nat</code></p>",
        "id": 168380041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846686
    },
    {
        "content": "<p>It's about 10% of the term in terms of lines of output</p>",
        "id": 168380050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846706
    },
    {
        "content": "<p>I don't know why it's fixated on <code>int.euclidean_domain</code> for deriving everything</p>",
        "id": 168380105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846731
    },
    {
        "content": "<p>I thought the whole point of <code>int.of_nat</code> was that it was some primitive which was supposed to be fast</p>",
        "id": 168380143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846760
    },
    {
        "content": "<p>it is</p>",
        "id": 168380152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846773
    },
    {
        "content": "<p>but that doesn't stop lean from taking a gratuitous path to get there</p>",
        "id": 168380170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846790
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                  (@coe.{1 1} nat int\n                      (@coe_to_lift.{1 1} nat int\n                         (@coe_base.{1 1} nat int\n                            (@nat.cast_coe.{0} int\n                               (@mul_zero_class.to_has_zero.{0} int\n                                  (@semiring.to_mul_zero_class.{0} int\n                                     (@comm_semiring.to_semiring.{0} int\n                                        (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                                           (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                                              (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))))\n                               (@monoid.to_has_one.{0} int\n                                  (@semiring.to_monoid.{0} int\n                                     (@comm_semiring.to_semiring.{0} int\n                                        (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                                           (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                                              (@euclidean_domain.to_nonzero_comm_ring.{0} int int.euclidean_domain))))))\n                               (@distrib.to_has_add.{0} int\n                                  (@semiring.to_distrib.{0} int\n                                     (@comm_semiring.to_semiring.{0} int\n                                        (@nonzero_comm_semiring.to_comm_semiring.{0} int\n                                           (@nonzero_comm_ring.to_nonzero_comm_semiring.{0} int\n                                              (@euclidean_domain.to_nonzero_comm_ring.{0} int\nint.euclidean_domain)))))))))\n</pre></div>\n\n\n<p>In fact there's something even bigger which is coming up a lot.</p>",
        "id": 168380189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846807
    },
    {
        "content": "<p>oh wait, actually this isn't <code>int.of_nat</code></p>",
        "id": 168380247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846848
    },
    {
        "content": "<p>this is the \"wrong\" coe from nat to int</p>",
        "id": 168380254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846858
    },
    {
        "content": "<p><code>nat.cast</code></p>",
        "id": 168380255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846863
    },
    {
        "content": "<p>both of them are <code>nat.cast</code></p>",
        "id": 168380263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846873
    },
    {
        "content": "<p>try simp?</p>",
        "id": 168380272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560846884
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n                                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n                                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n                                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                                <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span><span class=\"o\">))))))</span>\n                                              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                                <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span><span class=\"o\">))))))</span>\n                                              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_distrib</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                                                                <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span><span class=\"o\">)))))))))</span>\n                                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_pow</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_pow</span> <span class=\"n\">p</span>\n                                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"n\">n</span>\n                                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"o\">)))))))))))))</span>\n</pre></div>\n\n\n<p>There's something slightly bigger. This shows up again and again in the term.</p>",
        "id": 168380273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846887
    },
    {
        "content": "<blockquote>\n<p>try simp?</p>\n</blockquote>\n<p>[waits 10 seconds] fails to simplify.</p>",
        "id": 168380297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560846930
    },
    {
        "content": "<p>are there dependencies? What is the pp form of the goal?</p>",
        "id": 168380496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560847134
    },
    {
        "content": "<p>The gist I posted above is the pp form of the goal.</p>",
        "id": 168380538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560847180
    },
    {
        "content": "<p>I mean with regular printing</p>",
        "id": 168381467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560848151
    },
    {
        "content": "<p>Sorry, I got distracted by teaching duties... I've tried <code>dsimp</code>, <code>simp</code>, <code>erw</code>, <code>congr</code>, etc... everything times out.</p>",
        "id": 168381482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560848162
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_10</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">idx</span><span class=\"o\">,</span>\n<span class=\"err\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">idx</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">witt_structure_int</span> <span class=\"n\">p</span> <span class=\"err\">Φ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">witt_structure_rat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"err\">Φ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span>\n  <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">witt_structure_rat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"err\">Φ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">witt_structure_int</span> <span class=\"n\">p</span> <span class=\"err\">Φ</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">idx</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">witt_structure_rat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"err\">Φ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">idx</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">witt_structure_int</span> <span class=\"n\">p</span> <span class=\"err\">Φ</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 168381537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560848182
    },
    {
        "content": "<p>I posted the other 4 goals somewhere upstairs.</p>",
        "id": 168381546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560848194
    },
    {
        "content": "<p>You are right that the first one could be closed by <code>refl</code>. Which is weird, because it was produced by <code>congr</code>, I think.</p>",
        "id": 168381567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560848218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I feel like I'm bitten by having to work explicitly with integers. But that cannot be avoided. It's crucial to show that these polynomials are defined over <code>int</code>, because <code>int</code> is the initial object in <code>CommRing</code>. And one cannot simply write down these polynomials over an arbitrary ring. Their coefficients are rational numbers that after a lot of work turn out to actually be integers.</p>",
        "id": 168382302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560849048
    },
    {
        "content": "<p>I have no idea how to make the code faster, more well-behaved.</p>",
        "id": 168382313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560849062
    },
    {
        "content": "<p><code>mod_e</code> should be a definition</p>",
        "id": 168382803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849590
    },
    {
        "content": "<p>Can you explain why?</p>",
        "id": 168382881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560849632
    },
    {
        "content": "<p>you should not make a notation for a very complex term. This increases the difference between what you see and what lean sees</p>",
        "id": 168382923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849686
    },
    {
        "content": "<p>Do you think it is a reasonable \"concept\" or is there a better way to do \"calculations modulo [ideal/element]\"</p>",
        "id": 168382925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560849687
    },
    {
        "content": "<p>You could use an equivalence relation</p>",
        "id": 168382944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849707
    },
    {
        "content": "<p>but I don't know if I should tweak the mathematics aspects too heavily</p>",
        "id": 168383010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849734
    },
    {
        "content": "<p>if you need ideals, so be it</p>",
        "id": 168383022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849743
    },
    {
        "content": "<p>I think it should be a general definition though; <code>a = b [MOD n]</code> should be generalized</p>",
        "id": 168383069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849802
    },
    {
        "content": "<blockquote>\n<p>I think it should be a general definition though; <code>a = b [MOD n]</code> should be generalized</p>\n</blockquote>\n<p>You mean from <code>ℤ</code> to an arbitrary ring?</p>",
        "id": 168383147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560849864
    },
    {
        "content": "<p>yes</p>",
        "id": 168383169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849881
    },
    {
        "content": "<p>and possibly to ideals</p>",
        "id": 168383175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849888
    },
    {
        "content": "<p>I see you needed a few variations on this</p>",
        "id": 168383189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849903
    },
    {
        "content": "<p>Do you think that <code>mod_e</code> is one of the reasons that the file is slow?</p>",
        "id": 168383270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560849963
    },
    {
        "content": "<p>it's a factor in the huge pp.all terms</p>",
        "id": 168383303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560849984
    },
    {
        "content": "<p>because <code>mod_e</code> hides an <code>ideal.span</code> and <code>quotient.mk</code> and each of these takes a bunch of typeclass args</p>",
        "id": 168383320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560850011
    },
    {
        "content": "<p>But <code>blur</code> doesn't even use it. And there the <code>rw this</code> still fails... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 168383329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560850023
    },
    {
        "content": "<p>where do you start sensing problems?</p>",
        "id": 168383351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560850048
    },
    {
        "content": "<p>Should we also build <code>eval_c</code> which is <code>eval₂ C</code>? I'm using <code>eval₂ C</code> a lot.</p>",
        "id": 168383373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560850076
    },
    {
        "content": "<p>I noticed</p>",
        "id": 168383435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560850100
    },
    {
        "content": "<p><code>witt_structure_rat_rec_aux</code> is slow</p>",
        "id": 168383440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560850109
    },
    {
        "content": "<p>I thought that this was one of the eval functions</p>",
        "id": 168383444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560850112
    },
    {
        "content": "<p>And <code>dvd_sub_pow_of_dvd_sub</code> is also incredibly slow, but I think that's completely orthogonal to the others.</p>",
        "id": 168383476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560850157
    },
    {
        "content": "<p>Lines 554–735 are very slow. And that's exactly the part that is hard for mathematicians. The rest is all \"math-trivial\".</p>",
        "id": 168383572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560850225
    },
    {
        "content": "<p>It is the part where we show that the polynomials have integral coefficients. It takes most textbooks half a page <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 168383596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560850256
    },
    {
        "content": "<blockquote>\n<p>I thought that this was one of the eval functions</p>\n</blockquote>\n<p>No, we don't have a wrapper for <code>eval₂ C</code>.</p>",
        "id": 168383698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560850329
    },
    {
        "content": "<p>Is it the bind operation for mv_polynomial as a monad that you're using?</p>",
        "id": 168383940,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560850535
    },
    {
        "content": "<p>I think it is, yes.</p>",
        "id": 168385933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560852088
    },
    {
        "content": "<p>Well, it's not exactly <code>bind</code>. Because I think:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span>\n</pre></div>\n\n\n<p>whereas</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span>\n</pre></div>",
        "id": 168396534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560861959
    },
    {
        "content": "<p>It is exactly <code>bind</code>. You're thinking of <code>join</code></p>",
        "id": 168396855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560862176
    },
    {
        "content": "<p>Aah...</p>",
        "id": 168396858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560862181
    },
    {
        "content": "<p>Crazy names</p>",
        "id": 168396867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560862186
    },
    {
        "content": "<p>(Or actually it's <code>bind</code> with the arguments flipped)</p>",
        "id": 168396875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560862191
    },
    {
        "content": "<p>The idea is you are binding the result of the non-function argument to the input variable of the function argument</p>",
        "id": 168397001,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560862268
    },
    {
        "content": "<p><code>join</code> joins two layers of the monad</p>",
        "id": 168397011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560862274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does this mean we should define <code>bind</code> and <code>join</code> and prove a whole bunch of API about them?</p>",
        "id": 168397204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560862426
    },
    {
        "content": "<p>sure</p>",
        "id": 168397278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560862470
    },
    {
        "content": "<p>Are there other ways in which I can make my code workable?</p>",
        "id": 168397308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560862499
    },
    {
        "content": "<p><code>bind</code> or <code>join</code> - they are interdefinable</p>",
        "id": 168397309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560862499
    },
    {
        "content": "<p>They are all special cases of <code>eval₂</code></p>",
        "id": 168397325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560862517
    },
    {
        "content": "<p>I don't think this will do that much to solve the problem, but it seems like a nice definition</p>",
        "id": 168397448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560862579
    },
    {
        "content": "<p>But I also don't think <code>mod_e</code> is the main culprit. The code is also slow in parts where I don't use that.</p>",
        "id": 168397524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560862638
    },
    {
        "content": "<p>Okay, so here's a minimized version of the first suspiciously slow tactic, on <a href=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L301\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors/src/ring_theory/witt_vector.lean#L301\">L301</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">nat</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">nat</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"n\">nat</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span> <span class=\"n\">α</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n            <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n      <span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">try_for</span> <span class=\"mi\">10000</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 168401087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560864971
    },
    {
        "content": "<p>The profiler says all the time (about 22s) is spent in <code>mk_eq_mp</code>. Here's a minimized tactic from the core of <code>simp</code> that triggers the long running <code>mk_eq_mp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">h_type</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">pr&#39;</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">[</span><span class=\"n\">h_type</span><span class=\"o\">],</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">simplify</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">[]</span> <span class=\"n\">h_type</span> <span class=\"o\">{}</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"n\">failed</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">pr&#39;</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">pr</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">mk_eq_mp</span> <span class=\"n\">pr</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>Replacing <code>pr</code> with the identical hand-rolled proof <code>pr'</code> takes no time at all. Perhaps metavariable instantiations are involved?</p>",
        "id": 168403526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560866435
    },
    {
        "content": "<p>I am totally lost at how you debug these things. The particular lemma that contains L301 seems very innocent. No weird universes or whatever.</p>",
        "id": 168404475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560867053
    },
    {
        "content": "<p><code>mk_eq_mp</code> is defined in terms of <code>mk_app</code>, which is also slow along with <code>mk_mapp</code>. Even this is long running:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">[</span><span class=\"n\">h_type</span><span class=\"o\">,</span> <span class=\"n\">h_type</span><span class=\"o\">,</span> <span class=\"n\">pr</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>It's not doing any inference! It's just typechecking</p>",
        "id": 168404522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560867098
    },
    {
        "content": "<p>I debug this by finding the part that is slow and then delete everything that doesn't matter until almost nothing is left</p>",
        "id": 168404605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560867140
    },
    {
        "content": "<p>Is there an obvious code smell, if you look at that proof?</p>",
        "id": 168404676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560867198
    },
    {
        "content": "<p>I'm still at the stage where I figure out why lean is stupid. Once I have that I can probably derive an appropriate code smell</p>",
        "id": 168404731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560867243
    },
    {
        "content": "<p>I'm sure I've hit this bug before but I haven't investigated it in depth</p>",
        "id": 168404814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560867286
    },
    {
        "content": "<p>the operative aspect here seems to be a slightly noncanonical typeclass path</p>",
        "id": 168404851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560867320
    },
    {
        "content": "<p>Thanks a lot for taking a look. I'm completely handicapped when it comes to debugging things like this. And I'm glad your thinking that Lean is stupid, instead of me being stupid <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 168404870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560867332
    },
    {
        "content": "<p>Feel free to push speed-ups upstream by the way.</p>",
        "id": 168404984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560867385
    },
    {
        "content": "<p>I don't know how useful adding workarounds on every line will be. I suspect that this issue comes up many many times in the file and that's the major problem</p>",
        "id": 168405056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560867434
    },
    {
        "content": "<p>Ok</p>",
        "id": 168405090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560867473
    },
    {
        "content": "<p>Feel free to push structural speed-ups upstream <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 168405144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560867491
    },
    {
        "content": "<p>Okay, it's completely barebones now. The problem arises when <code>mk_app</code> and friends are passed a non-canonical instance and asked to unify the results. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Do you know what's happening here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">ht</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">ht&#39;</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">h2</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">h2</span><span class=\"o\">),</span>\n  <span class=\"n\">pr</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">],</span>\n  <span class=\"n\">pr&#39;</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">[</span><span class=\"n\">ht&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">trace</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">pr&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">pr&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- takes 23s</span>\n</pre></div>",
        "id": 168407094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560868744
    },
    {
        "content": "<p>What is <code>P</code> doing in your example?</p>",
        "id": 168407212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560868813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks a lot for stripping this down to a MWE. I would have never managed to do that.</p>",
        "id": 168407501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560869001
    },
    {
        "content": "<p>oops, don't need P</p>",
        "id": 168407546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560869030
    },
    {
        "content": "<p>Mario, if you're in a debugging mood, chasing stupid Lean behavior, you might have fun looking at <a href=\"https://github.com/leanprover-community/mathlib/blob/d8d25e9adb01c87c355ae1358bba431c1237e2eb/src/analysis/normed_space/operator_norm.lean#L211\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/d8d25e9adb01c87c355ae1358bba431c1237e2eb/src/analysis/normed_space/operator_norm.lean#L211\">https://github.com/leanprover-community/mathlib/blob/d8d25e9adb01c87c355ae1358bba431c1237e2eb/src/analysis/normed_space/operator_norm.lean#L211</a> (that I already mentioned some time ago, but it was in a private branch then): it looks really strange to me that Lean is not able to infer the instance.</p>",
        "id": 168408145,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1560869401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No idea. Does the defeq trace show something interesting, or does that blow up Lean?</p>",
        "id": 168415168,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560873612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Do I understand correctly that it's not actually type class inference that is creating the problem? Lean should check that certain things are defeq, but it doesn't try hard enough. Is that right?</p>",
        "id": 168449670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560887832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Aha, it does show something interesting:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]:</span> <span class=\"o\">{</span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"o\">,</span>\n <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">α</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"o\">,</span>\n <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"o\">,</span>\n <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">α</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"o\">,</span>\n <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">α</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">α</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">α</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">α</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">left_distrib</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">left_distrib</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">right_distrib</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">right_distrib</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">zero_mul</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero_mul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">left</span><span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">zero_mul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n         <span class=\"o\">(</span><span class=\"n\">id</span>\n            <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n               <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_3</span><span class=\"o\">),</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">eq</span> <span class=\"n\">e_1</span><span class=\"o\">)</span> <span class=\"n\">e_2</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n                  <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_3</span> <span class=\"o\">:</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_3</span><span class=\"o\">),</span>\n                      <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">e_2</span><span class=\"o\">)</span> <span class=\"n\">e_3</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                     <span class=\"mi\">0</span>\n                     <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                     <span class=\"n\">a</span>\n                     <span class=\"n\">a</span>\n                     <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n               <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">eq_self_iff_true</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)))))</span>\n         <span class=\"n\">trivial</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">right_distrib</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))),</span>\n  <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero_mul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n         <span class=\"o\">(</span><span class=\"n\">id</span>\n            <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n               <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_3</span><span class=\"o\">),</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">eq</span> <span class=\"n\">e_1</span><span class=\"o\">)</span> <span class=\"n\">e_2</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n                  <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_3</span> <span class=\"o\">:</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_3</span><span class=\"o\">),</span>\n                      <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">e_2</span><span class=\"o\">)</span> <span class=\"n\">e_3</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                     <span class=\"mi\">0</span>\n                     <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                     <span class=\"n\">a</span>\n                     <span class=\"n\">a</span>\n                     <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n               <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">eq_self_iff_true</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)))))</span>\n         <span class=\"n\">trivial</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">right_distrib</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))),</span>\n  <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">right</span><span class=\"o\">:</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span>\n<span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>The trace goes for a very long time, but I think this is the important part. It needs to solve <code>@ring.to_semiring α (@comm_ring.to_ring α _inst_1) =?= @comm_semiring.to_semiring α (@comm_ring.to_comm_semiring α _inst_1)</code>, so it unfolds both structures, so far so good. It starts confirming each of the fields is equal, until it hits <code>ring.zero_mul =?= comm_semiring.zero_mul</code>, whereupon it decides to unfold both proofs and the subproofs and so on with no end in sight.</p>",
        "id": 168451494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560889052
    },
    {
        "content": "<p>Can anyone explain to me how this can happen? I thought that proofs were discarded right away, and that in any case they are irrelevant so that Lean should never have to check that two proofs are the same. Does it mean that there is a bug in Lean where in some exotic situations proof irrelevance is not used while it should?</p>",
        "id": 168483774,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1560929710
    },
    {
        "content": "<p>proofs are not discarded, but under almost all circumstances defeq problems involving them are trivial</p>",
        "id": 168484215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560930151
    },
    {
        "content": "<p>I think there is a bug in lean somewhere here</p>",
        "id": 168484243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560930169
    },
    {
        "content": "<p>Can this be debugged further inside Lean, or is the next step to run lean in some debugger like <code>gdb</code>?</p>",
        "id": 168485596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560931479
    },
    {
        "content": "<p>it goes to C++ from here</p>",
        "id": 168485769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560931567
    },
    {
        "content": "<p>we have to find out why the defeq trace is going into proof terms</p>",
        "id": 168485785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560931584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Do you think the issues in this file can be reasonable fixed with some version of Lean 3? Or will we not have Witt vectors before Lean 4? (That is certainly an acceptable answer to me.)</p>",
        "id": 168764526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561236065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Just to get expectations right. Is there any hope/reason to investigate these issues in Lean 3? Or should we just wait till Lean 4?</p>",
        "id": 168958570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561483799
    },
    {
        "content": "<p>More specifically, will Lean 3 have Witt vectors, or should I give up?</p>",
        "id": 168958645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561483816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Okay, I took a look at this issue and found the following nice comment: <a href=\"https://github.com/leanprover/lean/blob/e6764047a14ce4383d29b2858fa9e2e246d4f13b/src/library/type_context.cpp#L1978\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/e6764047a14ce4383d29b2858fa9e2e246d4f13b/src/library/type_context.cpp#L1978\">https://github.com/leanprover/lean/blob/e6764047a14ce4383d29b2858fa9e2e246d4f13b/src/library/type_context.cpp#L1978</a><br>\nIt looks like Leo independently found a performance issue with this code and fixed it for Lean 4: <a href=\"https://github.com/kha/lean4/commit/d85c30fde186b75dd00e04242fb8b05450a8daf8#diff-f56a907e917690c6815e55e0fe8540e9R798\" target=\"_blank\" title=\"https://github.com/kha/lean4/commit/d85c30fde186b75dd00e04242fb8b05450a8daf8#diff-f56a907e917690c6815e55e0fe8540e9R798\">https://github.com/kha/lean4/commit/d85c30fde186b75dd00e04242fb8b05450a8daf8#diff-f56a907e917690c6815e55e0fe8540e9R798</a><br>\nYou could try porting it to Lean 3 (using this version: <a href=\"https://github.com/kha/lean4/commit/f8cedb33e70c9d90c9d81a542340bba0b504f8e6\" target=\"_blank\" title=\"https://github.com/kha/lean4/commit/f8cedb33e70c9d90c9d81a542340bba0b504f8e6\">https://github.com/kha/lean4/commit/f8cedb33e70c9d90c9d81a542340bba0b504f8e6</a>), would be interesting to see if anything breaks. But I don't think it can be worked around without changing Lean.</p>",
        "id": 169124238,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1561633544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thanks for looking into this!</p>",
        "id": 169124744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561634060
    },
    {
        "content": "<p>Yes, many thanks Sebastian.</p>",
        "id": 169128149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561637292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/witt.20vectors/near/168407094\" title=\"#narrow/stream/116395-maths/topic/witt.20vectors/near/168407094\">said</a>:</p>\n<blockquote>\n<p>Okay, it's completely barebones now. The problem arises when <code>mk_app</code> and friends are passed a non-canonical instance and asked to unify the results. <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> Do you know what's happening here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">ht</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">ht&#39;</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">h2</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">h2</span><span class=\"o\">),</span>\n  <span class=\"n\">pr</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">],</span>\n  <span class=\"n\">pr&#39;</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">[</span><span class=\"n\">ht&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">trace</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">pr&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">pr&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- takes 23s</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Now that we have community Lean 3.10.0... can this bug be fixed? I just tried Mario's example, and it still takes 13s on my 16-threaded beastlet.</p>",
        "id": 196093021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588497245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/116395-maths/topic/witt.20vectors/near/169124238\" title=\"#narrow/stream/116395-maths/topic/witt.20vectors/near/169124238\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Okay, I took a look at this issue and found the following nice comment: <a href=\"https://github.com/leanprover/lean/blob/e6764047a14ce4383d29b2858fa9e2e246d4f13b/src/library/type_context.cpp#L1978\" title=\"https://github.com/leanprover/lean/blob/e6764047a14ce4383d29b2858fa9e2e246d4f13b/src/library/type_context.cpp#L1978\">https://github.com/leanprover/lean/blob/e6764047a14ce4383d29b2858fa9e2e246d4f13b/src/library/type_context.cpp#L1978</a><br>\nIt looks like Leo independently found a performance issue with this code and fixed it for Lean 4: <a href=\"https://github.com/kha/lean4/commit/d85c30fde186b75dd00e04242fb8b05450a8daf8#diff-f56a907e917690c6815e55e0fe8540e9R798\" title=\"https://github.com/kha/lean4/commit/d85c30fde186b75dd00e04242fb8b05450a8daf8#diff-f56a907e917690c6815e55e0fe8540e9R798\">https://github.com/kha/lean4/commit/d85c30fde186b75dd00e04242fb8b05450a8daf8#diff-f56a907e917690c6815e55e0fe8540e9R798</a><br>\nYou could try porting it to Lean 3 (using this version: <a href=\"https://github.com/kha/lean4/commit/f8cedb33e70c9d90c9d81a542340bba0b504f8e6\" title=\"https://github.com/kha/lean4/commit/f8cedb33e70c9d90c9d81a542340bba0b504f8e6\">https://github.com/kha/lean4/commit/f8cedb33e70c9d90c9d81a542340bba0b504f8e6</a>), would be interesting to see if anything breaks. But I don't think it can be worked around without changing Lean.</p>\n</blockquote>\n<p>Sebastian told us what needs to be done.</p>",
        "id": 196093022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588497260
    },
    {
        "content": "<p>I have no understanding of the underlying code here but I just applied the suggested changes on top of 3.10.0c and they seem to solve the issue in Mario's example. Here's the PR: <a href=\"https://github.com/leanprover-community/lean/issues/211\" title=\"https://github.com/leanprover-community/lean/issues/211\">lean#211</a>.</p>",
        "id": 196112965,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588525908
    },
    {
        "content": "<p>Fantastic! What time does it need now?</p>",
        "id": 196113042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588526001
    },
    {
        "content": "<p>Note that the \"23s\" is still in your test code:</p>",
        "id": 196113051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588526023
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/211/files#diff-40e3406d4b81ffee1556ec817f06e661R17\" title=\"https://github.com/leanprover-community/lean/pull/211/files#diff-40e3406d4b81ffee1556ec817f06e661R17\">https://github.com/leanprover-community/lean/pull/211/files#diff-40e3406d4b81ffee1556ec817f06e661R17</a></p>",
        "id": 196113054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588526040
    },
    {
        "content": "<p>Yeah, the test file probably needs more work (how do I wrap the whole thing in <code>try_for</code>?).</p>\n<p>Here's a trace from 3.10.0c (<code>tactic execution took 6s</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>$ elan run leanprover-community-lean-3.10.0 lean tests/lean/run/mario_type_context.lean\nparsing took 0.211ms\nelaboration of bar took 0.0243ms\ntype checking of bar took 0.0118ms\n/Users/chb/Documents/lean/lean/tests/lean/run/mario_type_context.lean:4:0: warning: declaration &#39;bar&#39; uses sorry\ncompilation of bar took 0.172ms\ndecl post-processing of bar took 0.241ms\nparsing took 0.567ms\ntype checking of foo took 0.0638ms\ncompilation of foo took 0.00106ms\ndecl post-processing of foo took 0.00109ms\nelaboration: tactic compilation took 30.3ms\n[bar α = bar α, bar α = bar α, eq.refl (bar α = bar α), h]\nelaboration: tactic execution took 6s\nnum. allocated objects:  55\nnum. allocated closures: 55\n 5998ms   100.0%   _interaction._lambda_3\n 5998ms   100.0%   scope_trace\n 5998ms   100.0%   tactic.mk_mapp\n 5998ms   100.0%   _interaction._lambda_2\n 5998ms   100.0%   tactic.istep._lambda_1\n 5998ms   100.0%   tactic.istep\n 5998ms   100.0%   tactic.step\n 5998ms   100.0%   _interaction\nelaboration of foo took 6.97s\n/Users/chb/Documents/lean/lean/tests/lean/run/mario_type_context.lean:6:0: warning: declaration &#39;foo&#39; uses sorry\ncumulative profiling times:\n        compilation 0.172ms\n        decl post-processing 0.241ms\n        elaboration 6.97s\n        elaboration: tactic compilation 30.3ms\n        elaboration: tactic execution 6s\n        parsing 0.778ms\n        type checking 0.0749ms\n</code></pre></div>\n\n\n<p>Here's a trace from the PR branch (<code>elaboration: tactic execution took 6ms</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>$ elan run local lean tests/lean/run/mario_type_context.lean\nparsing took 1.64ms\nelaboration of bar took 0.488ms\ntype checking of bar took 0.0185ms\n/Users/chb/Documents/lean/lean/tests/lean/run/mario_type_context.lean:4:0: warning: declaration &#39;bar&#39; uses sorry\ncompilation of bar took 1.08ms\ndecl post-processing of bar took 0.678ms\nparsing took 1.41ms\ntype checking of foo took 0.0687ms\ncompilation of foo took 0.00192ms\ndecl post-processing of foo took 0.00173ms\nelaboration: tactic compilation took 40ms\n[bar α = bar α, bar α = bar α, eq.refl (bar α = bar α), h]\nelaboration: tactic execution took 6ms\nnum. allocated objects:  55\nnum. allocated closures: 55\n    6ms   100.0%   _interaction._lambda_3\n    6ms   100.0%   scope_trace\n    6ms   100.0%   tactic.mk_mapp\n    6ms   100.0%   _interaction._lambda_2\n    6ms   100.0%   tactic.istep._lambda_1\n    6ms   100.0%   tactic.istep\n    6ms   100.0%   tactic.step\n    6ms   100.0%   _interaction\nelaboration of foo took 78.4ms\n/Users/chb/Documents/lean/lean/tests/lean/run/mario_type_context.lean:6:0: warning: declaration &#39;foo&#39; uses sorry\ncumulative profiling times:\n        compilation 1.08ms\n        decl post-processing 0.679ms\n        elaboration 78.9ms\n        elaboration: tactic compilation 40ms\n        elaboration: tactic execution 6ms\n        parsing 3.05ms\n        type checking 0.086ms\n</code></pre></div>",
        "id": 196113278,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588526331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Can you build mathlib with this change to see if it breaks anything?</p>",
        "id": 196113486,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588526684
    },
    {
        "content": "<p>Yes, let me try.</p>",
        "id": 196113490,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588526703
    },
    {
        "content": "<p>Sadly, it does seem to break mathlib. The first error is:</p>\n<div class=\"codehilite\"><pre><span></span><code>mathlib/src/algebra/opposites.lean:117:4: error: invalid &#39;or.cases_on&#39; application, elaborator has special support for this kind of application (it is handled as an &quot;eliminator&quot;), but term\n  eq_zero_or_eq_zero_of_mul_eq_zero (op_inj H)\nmust not contain metavariables because it is used to compute the motive\n</code></pre></div>",
        "id": 196114301,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588528007
    },
    {
        "content": "<p>Does it break badly, or is it just a few lemmas?</p>",
        "id": 196114376,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588528099
    },
    {
        "content": "<p>You might be able to just comment out that instance and the one after it...</p>",
        "id": 196114528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588528371
    },
    {
        "content": "<p>(just to see how badly it breaks)</p>",
        "id": 196114529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588528382
    },
    {
        "content": "<p>Good idea. Let me take a look.</p>",
        "id": 196114638,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588528525
    },
    {
        "content": "<p>The next two errors pop up at some <code>erw</code>s in <code>category_theory.opposites</code>, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>mathlib/src/category_theory/opposites.lean:192:29: error: rewrite tactic failed, did not find instance of the pattern in the target expression\n  (functor.op F).map ?m_3 ≫ α.app ?m_2\nstate:\nC : Type u₁,\n_inst_1 : category C,\nD : Type u₂,\n_inst_2 : category D,\nF G : C ⥤ D,\nα : functor.op F ⟶ functor.op G,\nX Y : C,\nf : X ⟶ Y\n⊢ G.map f ≫ has_hom.hom.unop (α.app (opposite.op Y)) = has_hom.hom.unop (α.app (opposite.op X)) ≫ F.map f\n</code></pre></div>\n\n\n<p>cf.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"kn\">protected</span> <span class=\"kn\">definition</span> <span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⟶</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span>         <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"kn\">end</span> <span class=\"o\">}</span>\n<span class=\"c1\">----------------------------^ error here</span>\n</code></pre></div>",
        "id": 196114916,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588528881
    },
    {
        "content": "<p>Clearly we have to choose between Witt vectors and opposites...</p>",
        "id": 196115032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588529029
    },
    {
        "content": "<p>Lean seems to have gotten stupider when trying to fill in underscores:</p>\n<div class=\"codehilite\"><pre><span></span><code>mathlib/src/data/pfun.lean:206:20: error: don&#39;t know how to synthesize placeholder\ncontext:\nα : Type u_1,\np : Prop,\nf : p → roption α,\nmem_assert : ∀ {a : α} (h : p), a ∈ f h → a ∈ assert p f,\n_x : p,\nh : (f _x).dom\n⊢ p\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mem_bind</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">roption</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">roption</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"c1\">-----------------------------^ error here</span>\n<span class=\"c1\">-- fixed by using `⟨⟨_x, h⟩, rfl⟩` instead</span>\n</code></pre></div>",
        "id": 196115346,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588529413
    },
    {
        "content": "<p>The build finally finished. It looks like there were &lt; 20 errors in total. <strong>edit</strong>: see <a href=\"https://gist.github.com/bryangingechen/8ebb9400835b54482f4d2246501f94be\" title=\"https://gist.github.com/bryangingechen/8ebb9400835b54482f4d2246501f94be\">gist</a></p>",
        "id": 196121187,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588537463
    },
    {
        "content": "<p>(not counting the thousands of downstream sorry warnings, of course)</p>",
        "id": 196121210,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588537501
    },
    {
        "content": "<p>21 errors doesn't seem too bad. Thanks for all the efforts Bryan!</p>",
        "id": 196139358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588567038
    },
    {
        "content": "<p>Did the build feel significantly slower or faster than usual?</p>",
        "id": 196139365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588567066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> What is your guesstimate? Is this approach hopeless? 21 errors sounds like it can be fixed. I was worried that every other underscore would break, and we would have to abandon this PR. But what do you think?</p>",
        "id": 196142176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588570543
    },
    {
        "content": "<p>Hard to say re: build times since there were lots of errors. I did happen to notice the build took a long time to get through <code>data.real.pi</code>, but maybe that's a slow file for the normal build too.</p>\n<p>Since this change is already in Lean 4, I do agree that we should make more of an effort with the PR.</p>",
        "id": 196142657,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588571297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> would you mind making a PR to mathlib (with <code>not-ready-to-merge</code> label)?</p>",
        "id": 196143929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588573071
    },
    {
        "content": "<p>But I guess I would need a modified Lean in order to contribute...</p>",
        "id": 196143974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588573085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do you think it's worth making this a <code>lean-3.10.1</code>?</p>",
        "id": 196143981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588573104
    },
    {
        "content": "<p>I'd be happy to open a new PR when there's a new release (which probably should be 3.11.0 since this a \"breaking\" change). As of right now, I don't really have anything to PR.</p>",
        "id": 196144735,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588574019
    },
    {
        "content": "<p>The code at <code>witt-vectors2</code> is almost compiling again.</p>",
        "id": 196821454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588880762
    },
    {
        "content": "<p>It's still very ugly, and I need to fix a couple of errors.</p>",
        "id": 196821523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588880780
    },
    {
        "content": "<p>Mostly related to bundling homs</p>",
        "id": 196821535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588880789
    },
    {
        "content": "<p>Already with <code>lean-3.10.0</code> the code is a lot faster. Looking forward to <code>lean-3.11.0</code> (-;</p>",
        "id": 196821596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588880821
    },
    {
        "content": "<p><code>lean-3.11.0</code> will unfortunately still take a while.  At the moment the CI is broken, concretely the part that uploads releases.  This is because the <code>gothub</code> tool stopped compiling.</p>",
        "id": 196821888,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588880992
    },
    {
        "content": "<p>Witt vectors are a ring again!<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/witt-vectors2/src/ring_theory/witt_vector.lean\">https://github.com/leanprover-community/mathlib/blob/witt-vectors2/src/ring_theory/witt_vector.lean</a></p>",
        "id": 199249444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590833525
    },
    {
        "content": "<p>Lots of ugly code is now gone. Lean is much better!</p>",
        "id": 199249446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590833537
    },
    {
        "content": "<p>(And the author maybe also improved a bit.)</p>",
        "id": 199249449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590833549
    },
    {
        "content": "<p>If you want an entertaining read for a Saturday afternoon, you can scroll back in this thread to see the pains I went through about a year ago <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 199249461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590833585
    },
    {
        "content": "<p>There is still a lot of cleanup to be done. But it is now much more straightforward.</p>",
        "id": 199249470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590833623
    },
    {
        "content": "<p>This is a huge success story for the community. Witt vectors are just an innocuous piece of algebra in some sense; they could be taught to MSc students. You ran into a brick wall for some reason when formalising them, and this led to isolating fundamental issues with Lean itself, and my understanding is that these have now been fixed.</p>",
        "id": 199249475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590833631
    },
    {
        "content": "<p>One thing that is really annoying, and dissapointing is that there are a lot of <code>convert ring_hom.ext_int _ _</code> that can't be turned into <code>apply</code>. (This is saying that <code>(f g : int →+* R)</code> implies <code>f = g</code>.)</p>",
        "id": 199249528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590833705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> if I were to define <code>(a ^ p - a) / p</code> in Lean I would use the integer division and then separately prove that <code>p \\| (a ^ p - a)</code></p>",
        "id": 200025213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591538038
    },
    {
        "content": "<p>sure we can pass through <code>\\Q</code> but that wouldn't be necessary</p>",
        "id": 200025250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591538057
    },
    {
        "content": "<p>could we do the same thing for the Witt polynomials?</p>",
        "id": 200025252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591538066
    },
    {
        "content": "<p>i.e. use integer division instead of passing through <code>\\Q</code></p>",
        "id": 200025262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591538087
    },
    {
        "content": "<p>I don't think it will make life easier...</p>",
        "id": 200026047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591539467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> have you looked at <a href=\"https://math.berkeley.edu/~hwl/papers/witt.pdf\">this construction of (universal) Witt vectors</a>?</p>",
        "id": 200077055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591610101
    },
    {
        "content": "<p>where the set is <code>1+TA[[T]]</code>, the addition is \"power series multiplication\", and the multiplication is \"coefficient-wise multiplication (aka Hadamard product)\"</p>",
        "id": 200077113,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591610143
    },
    {
        "content": "<p>No I haven't. I'll do that when I have time again (-;</p>",
        "id": 200077260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591610239
    },
    {
        "content": "<p>correction: it's only Hadamard product when one (or both) of the multiplicands is of the form <code>(1-aT)^-1 = sum a^i T^i</code></p>",
        "id": 200078330,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591610965
    },
    {
        "content": "<p>Together with <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I've finished (as in, sorry-free, not cleaned up yet) the ring isomorphism <code>witt_vector p (zmod p) →+* Z_[p]</code> .<br>\nExpect some PR soonish (-;</p>",
        "id": 209706690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599770760
    },
    {
        "content": "<p>how did you define the Teichmuller lift?</p>",
        "id": 209706901,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599770849
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">teichmuller_fun</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">𝕎</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 209707027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599770903
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">teichmuller</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"err\">𝕎</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">teichmuller_fun</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">one_coeff_zero</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">one_coeff_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">counit_surjective</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">counit_surjective</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">map_teichmuller_fun</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">teichmuller_mul_aux₂</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 209707065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599770922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> We have Teichmuller, Verschiebung, and Frobenius.</p>",
        "id": 209707480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771136
    },
    {
        "content": "<p>Frobenius isn't a ring hom yet, but that shouldn't be too hard.</p>",
        "id": 209707521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771168
    },
    {
        "content": "<p>Is Ver additive?</p>",
        "id": 209707542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599771181
    },
    {
        "content": "<p>Yes</p>",
        "id": 209707579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771203
    },
    {
        "content": "<p>but you don't need Techimuller (in Zp) to define the isom?</p>",
        "id": 209707625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599771234
    },
    {
        "content": "<p>Nope</p>",
        "id": 209707691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771251
    },
    {
        "content": "<p><code>W (F_p)</code> is the projective limit of truncated witt vector rings, which have cardinality <code>p ^ n</code>.</p>",
        "id": 209707746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771286
    },
    {
        "content": "<p>And <code>1</code> has order <code>p ^ n</code> in those rings. Hence done.</p>",
        "id": 209707765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771297
    },
    {
        "content": "<p>The other proof is too analytical for me. (I'm scared of <code>tsum</code>.)</p>",
        "id": 209707815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771324
    },
    {
        "content": "<p>this sounds a bit suspicious. I mean, what is <code>((2, 0, 0, ...) : W (F_p))</code> sent to?</p>",
        "id": 209708201,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599771514
    },
    {
        "content": "<p>What do you mean \"suspicious\"?</p>\n<p>We have a freaking formal proof, lol</p>",
        "id": 209708326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771576
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   <span class=\"mi\">406</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">compare</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">265</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">frobenius</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">145</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">155</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">init_tail</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">is_poly</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">108</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">mul_p</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">549</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">structure_polynomial</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n    <span class=\"mi\">94</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">teichmuller</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">488</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">truncated2</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">166</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">verschiebung</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">330</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">witt_polynomial</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n   <span class=\"mi\">631</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">witt_vector</span><span class=\"bp\">/</span><span class=\"n\">witt_vector_preps</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n  <span class=\"mi\">3517</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 209708346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771584
    },
    {
        "content": "<p>Anyway, if you have a ring that is the projective limit of rings <code>R n</code>, and <code>R n</code> has cardinality <code>p ^ n</code>, and <code>1 : R n</code> has order <code>p ^ n</code>, then this projective limit is isomorphic to <code>Z_p</code>.</p>",
        "id": 209708469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771634
    },
    {
        "content": "<p>That's not too surprising, right?</p>",
        "id": 209708481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771640
    },
    {
        "content": "<p>But of course this isom doesn't tell you where Teichmuller lifts are mapped.</p>",
        "id": 209708534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771667
    },
    {
        "content": "<p>It would be a nice application of Hensel's lemma. But I would like a better API for Henselian rings first.</p>",
        "id": 209708697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771735
    },
    {
        "content": "<p>why does 1 have order p^n?</p>",
        "id": 209709071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599771919
    },
    {
        "content": "<p>additive order.</p>",
        "id": 209709085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599771929
    },
    {
        "content": "<p>yeah, why does 1 have additive order p^n?</p>",
        "id": 209709175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599771969
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">frobenius_fun_verschiebung</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕎</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius_fun</span> <span class=\"o\">(</span><span class=\"n\">verschiebung</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">frobenius_fun_comp_verschiebung</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">verschiebung_zmod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕎</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">verschiebung</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">frobenius_fun_verschiebung</span><span class=\"o\">,</span> <span class=\"n\">frobenius_fun_zmodp</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- this should be true not just for `char_p R p` but for general `nontrivial R`.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">coeff_p_pow</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">𝕎</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_coeff_zero</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">is_unit_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">frobenius_fun_verschiebung</span><span class=\"o\">,</span> <span class=\"n\">coeff_frobenius_fun_char_p</span><span class=\"o\">,</span> <span class=\"n\">verschiebung_coeff_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_unit_pow</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209709183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599771975
    },
    {
        "content": "<p>The <code>i</code>-th coefficient of <code>p ^ i</code> is a unit. So <code>p ^ i</code> is nonzero in the <code>n</code>-truncated witt vectors, for <code>i &lt; n</code>.</p>",
        "id": 209709258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599772026
    },
    {
        "content": "<p>aha</p>",
        "id": 209709288,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599772043
    },
    {
        "content": "<p>There's some truncated valuation from W_n(k) to {0,1,...,n-1,top} which has the right behaviour. Unfortunately the corresponding multiplicative object is not a group with zero so we can't use lean's valuation stuff I don't think</p>",
        "id": 209711063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599772924
    },
    {
        "content": "<p>I don't have anything intelligent to say about this but this 𝕎 letter looks very cool</p>",
        "id": 209711662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599773189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/witt.20vectors/near/209711063\">said</a>:</p>\n<blockquote>\n<p>There's some truncated valuation from W_n(k) to {0,1,...,n-1,top} which has the right behaviour. Unfortunately the corresponding multiplicative object is not a group with zero so we can't use lean's valuation stuff I don't think</p>\n</blockquote>\n<p>Isn't this a <code>comm_monoid_with_zero</code>?</p>",
        "id": 209715173,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599775250
    },
    {
        "content": "<p>Well, rather <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>q</mi><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mrow><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow><mo stretchy=\"false\">}</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">q^{\\{0,1,\\ldots,n-1,\\mathrm{top}\\}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0824399999999998em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">{</span><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"minner mtight\">…</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">t</span><span class=\"mord mathrm mtight\">o</span><span class=\"mord mathrm mtight\">p</span></span><span class=\"mclose mtight\">}</span></span></span></span></span></span></span></span></span></span></span></span> is :)</p>",
        "id": 209715234,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599775292
    },
    {
        "content": "<p>Sure -- but valuations take values in a <code>linear_ordered_comm_group_with_zero</code> right now.</p>",
        "id": 209716318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599775989
    },
    {
        "content": "<p>Right. Now I'm thinking it might be really fun to define valuations as morphisms of hypperrings.</p>",
        "id": 209716854,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599776358
    },
    {
        "content": "<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>t</mi><mi>o</mi><mi>p</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1,\\ldots,n-1,top\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">}</span></span></span></span> is a quotient of the \"tropical\" hyperring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>, and the inverse image of the \"ideal\" defining this quotient is exactly the ideal in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> which you need to quotient out by to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/p^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 209716901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599776395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> wrote the <code>witt_simp</code> tactic, which allows us to prove in 4 lines:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The “product formula” for Frobenius and Verschiebung. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">verschiebung_mul_frobenius</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝕎</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">verschiebung</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">frobenius</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">verschiebung</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_poly₂</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span>\n    <span class=\"o\">(</span><span class=\"n\">verschiebung_is_poly</span><span class=\"bp\">.</span><span class=\"n\">comp₂</span> <span class=\"o\">((</span><span class=\"n\">mul_is_poly₂</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_right</span> <span class=\"o\">(</span><span class=\"n\">frobenius_is_poly</span> <span class=\"n\">p</span><span class=\"o\">)))</span>\n    <span class=\"o\">((</span><span class=\"n\">mul_is_poly₂</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_left</span> <span class=\"n\">verschiebung_is_poly</span><span class=\"o\">),</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟩;</span> <span class=\"n\">witt_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>On proving such identities, Hazewinkel wrote:</p>\n<blockquote>\n<p>There are pitfalls in calculating with ghost components as is done here. Such a calculation gives a valid proof of an identity or something else only if it is a universal calculation; that is, makes no use of any properties beyond those that follow from the axioms for a unital commutative ring only.</p>\n</blockquote>\n<p>Note that Rob wrote the tactic after we had 2 or 3 of such proofs done, but before I attempted to prove the product formula above.</p>\n<p>It doesn't really do the theory of commutative rings, but we can get pretty close to “universal calculations” and have the short proofs that you would expect on paper.</p>",
        "id": 210350242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600321430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and I have written a paper about this project! <a href=\"http://robertylewis.com/files/witt-vectors.pdf\">http://robertylewis.com/files/witt-vectors.pdf</a></p>\n<p>We'd love to hear if you have any comments about it.</p>",
        "id": 210859011,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600775716
    },
    {
        "content": "<p>line 399 do you really mean <code>R : Type</code> and not <code>R : Type u</code>? Not that this will cause any problems with mathematical applications of course.</p>",
        "id": 210870735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600781983
    },
    {
        "content": "<p>That line is taking advantage of the one right before it: the code snippet has been slightly edited for the sake of presentation!</p>",
        "id": 210871179,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600782169
    },
    {
        "content": "<p>It would be the only universe mentioned anywhere in the paper, either we'd have to give a totally irrelevant explanation or it would look like a typo.</p>",
        "id": 210871265,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600782216
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4236\">#4236</a> is the first <em>real</em> PR on Witt vectors</p>",
        "id": 211132595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600954995
    },
    {
        "content": "<p>Finally after 1.5 years or something... a first PR <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 211132860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600955114
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4268\">#4268</a> is the next one. Brace yourself, this is the ugliest part. We need to show that some polynomials are integral, and it's just a nasty job.</p>",
        "id": 211329135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601076657
    },
    {
        "content": "<p>There's now an improved draft of our paper on arxiv: <a href=\"https://arxiv.org/abs/2010.02595\">https://arxiv.org/abs/2010.02595</a></p>",
        "id": 212524233,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1602056751
    },
    {
        "content": "<p>Oops I missed the opportunity to comment because I wanted to find time to read carefully. The only comment I had after a very quick read was that the section about specialized tactics was frustrating because it was hard to understand what the tactics were doing and there were no hint about how to implement them.</p>",
        "id": 212524479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602056942
    },
    {
        "content": "<p>Luckily we've improved that section quite a bit, I think, although it's still not full of implementation details. Since the math is enough to scare off most of our readers it seemed better not to lose the rest with a bunch of metaprogramming talk!</p>",
        "id": 212524897,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1602057248
    },
    {
        "content": "<p>The approach we used in the perfectoid spaces paper was: the fact the set of potential readers is empty is a feature, it shows we are doing something really new.</p>",
        "id": 212527208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602058868
    },
    {
        "content": "<p>The typesetting looks great! You must have worked hard.</p>",
        "id": 212541766,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1602068162
    },
    {
        "content": "<p>Pay no attention to the column break on p7</p>",
        "id": 212541980,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1602068288
    },
    {
        "content": "<p>Sure. Which page did you say? ;)</p>",
        "id": 212541990,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1602068302
    },
    {
        "content": "<p>What happened to the real Johan? He wouldn't let that page break happen.</p>",
        "id": 212542235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602068481
    },
    {
        "content": "<p>The bigger question is, what happened to the arxiv tex install, because we built the paper in four different local environments and they all looked <a href=\"http://robertylewis.com/files/witt-vectors.pdf\">right</a></p>",
        "id": 212542385,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1602068561
    },
    {
        "content": "<p>There seems to be a stray \"S\" at the end of the Frobenius section on page 10</p>",
        "id": 212547202,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602071915
    },
    {
        "content": "<p>Hooray, another Witt vector PR was merged. The next one is <a href=\"https://github.com/leanprover-community/mathlib/issues/4332\">#4332</a> and it will tell mathlib the ring structure on Witt vectors.</p>",
        "id": 213795460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603118458
    },
    {
        "content": "<p>It's 475 lines of code, features two aux tactics, and a lot of comments.</p>",
        "id": 213795522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603118484
    },
    {
        "content": "<p>I've looked whether I could naturally split this into two smaller PRs, but there isn't an obvious point to split the PR</p>",
        "id": 213795981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603118672
    },
    {
        "content": "<p>Once this PR is merged, the fun will start! As in: no more crazy hard long computations, but juicy tactics that give unexpected results.</p>",
        "id": 213796054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603118706
    },
    {
        "content": "<p>Hmm, I think I did find a way to split the PR.</p>",
        "id": 213814385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603126443
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4693\">#4693</a> should now be reviewed before <a href=\"https://github.com/leanprover-community/mathlib/issues/4332\">#4332</a>. This new PR is rather easy. It moves a bunch of stuff from an old file to a new file.</p>",
        "id": 213821236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603129695
    },
    {
        "content": "<p>I've golfed away more than a 100 lines from <a href=\"https://github.com/leanprover-community/mathlib/issues/4694\">#4694</a></p>",
        "id": 214341047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603473686
    },
    {
        "content": "<p>I think this is now a pretty cute and readable explanation of why Witt vectors are a ring. (And it includes two marvelous helper tactics, thanks to Rob.)</p>",
        "id": 214341155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603473727
    },
    {
        "content": "<p>A happy status update from the Witt project. As you may have heard, our paper got accepted at CPP21. We're very happy about that.</p>\n<p>All contents of the Witt project have now been PR'd. The comparison isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(\\mathbb{F}_p)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> is <a href=\"https://github.com/leanprover-community/mathlib/issues/5164\">#5164</a><br>\nIt depends on 4 other PRs. There are currently 6 open PRs from the project (I opened 5 of them this morning). 3 PRs are unblocked, 3 are blocked by others.<br>\nThe most technical one is <a href=\"https://github.com/leanprover-community/mathlib/issues/4838\">#4838</a> on the Frobenius operator. (That's also the oldest PR, and blocking two of the others, among which the comparison isom.)</p>",
        "id": 218383789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606802643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> What is the state of the art of the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">W</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{W}(R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">W</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span> is the projective limit of truncated Witt vectors on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>? I read here <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/witt_vector/truncated.html\">https://leanprover-community.github.io/mathlib_docs/ring_theory/witt_vector/truncated.html</a> that this will be done in future work, and I was wondering if someone (you and <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> ?) is actively working on this.</p>",
        "id": 219818264,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1607939014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> there's an open PR</p>",
        "id": 219818422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607939114
    },
    {
        "content": "<p>it's about 200 of lines (waiting for review, hint) <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 219818440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607939134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/witt.20vectors/near/219818422\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> there's an open PR</p>\n</blockquote>\n<p>Oh great, I'll have a look.</p>",
        "id": 219818621,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1607939239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/witt.20vectors/near/219818440\">said</a>:</p>\n<blockquote>\n<p>it's about 200 of lines (waiting for review, hint) <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>\n</blockquote>\n<p>I  guess you are speaking about <a href=\"https://github.com/leanprover-community/mathlib/issues/5162\">#5162</a>, right?</p>",
        "id": 219819089,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1607939509
    },
    {
        "content": "<p>Nope, it's <a href=\"https://github.com/leanprover-community/mathlib/issues/5163\">#5163</a></p>",
        "id": 219819380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607939659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> and <a href=\"https://github.com/leanprover-community/mathlib/issues/5164\">#5164</a> shows that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">W</mi><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{W}(\\mathbb{F}_p) = \\mathbb{Z}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">W</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 219819429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607939697
    },
    {
        "content": "<p>The last Witt PR has been kicked onto the queue! Many thanks to all the reviewers! That certainly improved the code!</p>",
        "id": 220774747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608717154
    }
]