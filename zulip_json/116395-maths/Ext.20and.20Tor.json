[
    {
        "content": "<p>Thanks to Scott's efforts, backed up by the LTE project and Adam and Johan, we now have Ext and Tor, which means that homological algebra in Lean is looking like a real possibility. However am I right in thinking that we still don't have the construction of a long exact sequence of cohomology from a short exact sequence of complexes? How far are we from this? Is the issue that we can't face proving things like the snake lemma for a general abelian category?</p>",
        "id": 245882575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626208150
    },
    {
        "content": "<p>I think a more pressing issue is developing more of the API for Ext. The fact that it's contravariant in the first variable makes the definition pretty annoying. </p>\n<p>I started toward this by adding some isomorphisms between things like <code>kernel f</code> and <code>cokernel f.op</code> in <code>category_theory/abelian/opposite</code>, but there are more similarly silly things to add</p>",
        "id": 245884445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626208927
    },
    {
        "content": "<p>For the long exact sequence, it seems we should seriously think about formalizing (universal) delta functors</p>",
        "id": 245885479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626209412
    },
    {
        "content": "<p>The thing about short exact sequence of complexes gives long exact sequence of cohomology seems to me to be far more trivial than universal delta functors</p>",
        "id": 245892456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626211986
    },
    {
        "content": "<p>By the way, can we now define something like singular cohomology as a derived functor? If we define an etale morphism of rings can we define etale cohomology of schemes? How big is the gap?</p>",
        "id": 245892652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626212091
    },
    {
        "content": "<p>We don't have injective resolutions yet, unfortunately, and to compute sheaf-like cohomology theories we probably want to take an injective resolution of the sheaf</p>",
        "id": 245893011,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626212275
    },
    {
        "content": "<p>Aah -- both Ext and Tor can be computed using projective resolutions? Wait -- I'm now confused. We have injective resolutions in general in the sense that we can just take projective resolutions in the opposite category. Oh -- I'm unconfused .The point must be that we can't show that the specific sheaf categories have enough injectives.</p>",
        "id": 245895987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626214110
    },
    {
        "content": "<p>I see -- so just because we have Ext and Tor in some huge generality doesn't actually imply that we have Ext and Tor for the category of R-modules!</p>",
        "id": 245896016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626214142
    },
    {
        "content": "<p>I think we know that <code>R</code>-mod has enough projectives.</p>",
        "id": 245896046,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626214170
    },
    {
        "content": "<p>Well, at least it should be easy enough to show :)</p>",
        "id": 245896064,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626214180
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.Module_enough_projectives\">docs#Module.Module_enough_projectives</a></p>",
        "id": 245896243,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626214293
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.category_theory.abelian\">docs#Module.category_theory.abelian</a></p>",
        "id": 245896517,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626214461
    },
    {
        "content": "<p>So these are the two instances we need to be able to compute Ext and Tor as they're currently defined (for modules)</p>",
        "id": 245896538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626214479
    },
    {
        "content": "<p>I see. And for sheaves the analogous instances are still missing (and would make a nice project, probably!)</p>",
        "id": 245896592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626214517
    },
    {
        "content": "<p>Furthermore we'll need enough injectives for R-Mod in order to check that the other definition of Ext coincides with the one we have.</p>",
        "id": 245896675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626214566
    },
    {
        "content": "<p>I am very interested in this conversation but need some translation ... does this mean we are within reach of sheaf cohomology?</p>",
        "id": 245896807,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626214680
    },
    {
        "content": "<p>And when we get to the bare definition of sheaf cohomology, will it be usable for topological purposes (like, take the cohomology of the sheaf of locally constant functions to some coefficient ring, know some useful facts about it) or is there more work to do after that?</p>",
        "id": 245896936,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626214773
    },
    {
        "content": "<p>Random example:  how far away would it be to compute the cohomology of the sphere?</p>",
        "id": 245897035,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626214829
    },
    {
        "content": "<p>Or even of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 245897128,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626214905
    },
    {
        "content": "<p>Oh dear, I'm not sure we're going to be computing anything any time soon :-) Right now I am proposing an extremely long-winded way of defining cohomology groups by saying \"we know what H^0 is, and now apply some derived functor magic\".</p>",
        "id": 245897135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626214915
    },
    {
        "content": "<p>But that means that it is within reach to have a <em>definition</em> of the cohomology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">S^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> (via sheaf cohomology of a sheaf of locally constant functions), it's just that we won't immediately be able to prove anything using this definition.  Is that right?</p>",
        "id": 245897280,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626215001
    },
    {
        "content": "<p>I think we're actually closer to defining singular cohomology as bona fide singular cohomology (i.e. via the simplicial construction)</p>",
        "id": 245897357,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626215053
    },
    {
        "content": "<p>One thing which I think might be super-hard with this approach is changing X. It's all focussed on changing F.</p>",
        "id": 245897418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626215112
    },
    {
        "content": "<p>Right. The machine should spit out a bunch of groups H^i(X,F) and also a construction of a long exact sequence of cohomology associated to a short exact sequence of sheaves, and if we're lucky then later on it might also spit out a theorem of the form \"if you can come up with some other construction of H^n which agrees with the derived nonsense on H^0 and also has some nice long exact sequence properties then it will be isomorphic to the derived nonsense\"</p>",
        "id": 245897419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626215112
    },
    {
        "content": "<p>Right -- I have a branch which defines group cohomology as cocycles over coboundaries, and one could certainly imagine computing e.g. H^1(S_3,Z/2Z) this way. But I've never PR'ed it because Scott suggested that I related it to the abstract nonsense stuff, which needs a bunch of machinery which we didn't seem to have.</p>",
        "id": 245897529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626215182
    },
    {
        "content": "<p>FWIW right now I'm having issues even convincing lean that <code>Module A</code> has enough projectives (because of universes <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> )</p>",
        "id": 245897614,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626215261
    },
    {
        "content": "<p>The road is still long :-)</p>",
        "id": 245897730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626215340
    },
    {
        "content": "<p>Ok, at least lean understands that I'm allowed to (noncomputably) compute <code>Ext M N</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.ext</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.projective</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.abelian</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.enough_projectives</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Module.Module_enough_projectives.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">M</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 245897860,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626215426
    },
    {
        "content": "<p>Can you prove that Ext^0 is isomorphic to Hom?</p>",
        "id": 245897906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626215460
    },
    {
        "content": "<p>No</p>",
        "id": 245897924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626215474
    },
    {
        "content": "<p>OK so in summary, there's still a bit of work to do :-)</p>",
        "id": 245898045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626215553
    },
    {
        "content": "<p>What's max of u and u and u and u and u and u and u and u and u and u?</p>",
        "id": 245898053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626215558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Ext.20and.20Tor/near/245897357\">said</a>:</p>\n<blockquote>\n<p>I think we're actually closer to defining singular cohomology as bona fide singular cohomology (i.e. via the simplicial construction)</p>\n</blockquote>\n<p>I haven't really followed this, can you catch me up?  Has the theory developed in <code>algebraic_topology.simplicial_set</code> been related to topological spaces yet?</p>",
        "id": 245898059,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626215562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> not yet, but it's very doable.</p>",
        "id": 245898189,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626215649
    },
    {
        "content": "<p>I think Johan had some code in this direction in his old simplicial set branch?</p>",
        "id": 245898237,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626215687
    },
    {
        "content": "<p>OK, that's great!</p>",
        "id": 245898324,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626215743
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/144\">#144</a></p>",
        "id": 245898415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626215784
    },
    {
        "content": "<p>So, how far is mathlib along <a href=\"https://github.com/leanprover-community/mathlib/pull/144#issuecomment-425715546\">this roadmap</a> laid out by Reid in 2018? :(</p>",
        "id": 245900045,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626216955
    },
    {
        "content": "<p>Well, the module refactor got done :-) And we have at least 1, 4, and the beginning of 6, and probably some more. Maybe it's time for Patrick's big push?</p>",
        "id": 245900228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626217082
    },
    {
        "content": "<p>5 is also done and the second half of 6 is done in LTE in essentially sufficient generality, so it shouldn't be too hard to port to mathlib. Seems to me that item 2 is the main thing we're missing</p>",
        "id": 245900428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626217207
    },
    {
        "content": "<p>We also have the restricted yoneda embedding and its adjoint, so I think 2 is the only missing bit</p>",
        "id": 245904950,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626221105
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8305\">#8305</a> &lt;-- this gives items 2 and 3</p>",
        "id": 245913003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626230182
    },
    {
        "content": "<p>I updated <a href=\"https://github.com/leanprover-community/mathlib/issues/8305\">#8305</a> with the geometric realization and the associated adjunction.</p>",
        "id": 245952640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626265764
    },
    {
        "content": "<p>(both come for free using restricted Yoneda)</p>",
        "id": 245952677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626265787
    },
    {
        "content": "<p>How hard is it to show that the geometric realization of common objects is what we think it is?</p>",
        "id": 245953195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626266050
    },
    {
        "content": "<p>It's defined as some giant colimit. We should at least show that the representable simplicial sets go where we expect.</p>",
        "id": 245953269,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626266111
    },
    {
        "content": "<p>But I think this will be challenging</p>",
        "id": 245953299,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626266130
    },
    {
        "content": "<p>You should follow <a href=\"https://kerodon.net/tag/001X\">https://kerodon.net/tag/001X</a> (starting with the definition there)</p>",
        "id": 245953402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626266188
    },
    {
        "content": "<p>Yeah, I'm afraid that it will be quite a long journey.</p>",
        "id": 245953667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626266350
    },
    {
        "content": "<p>I have done part of this on <a href=\"https://github.com/leanprover-community/mathlib/tree/sset\">branch#sset</a>, but I didn't yet show that the adjunction gives an <code>is_geometric_realization</code>.</p>",
        "id": 245953715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626266385
    },
    {
        "content": "<p>Nevermind, it was easy using more general yoneda nonsense.</p>",
        "id": 245954124,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626266627
    },
    {
        "content": "<p>Pushed as <code>sSet.to_Top_simplex</code></p>",
        "id": 245954198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626266654
    },
    {
        "content": "<p>And since we know that geometric realization is a left adjoint, hence preserves colimits, it should be reasonable to compute the geometric realization of any simplicial set which you write down as a colimit of representables.</p>",
        "id": 245958591,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626269121
    },
    {
        "content": "<p>In case anyone is curious, here's a construction of integral singular homology of a topological space:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebraic_topology.Moore_complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebraic_topology.simplicial_set</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.abelian</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.homology.homology</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">algebraic_topology</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">singular_homology</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">sing</span> <span class=\"o\">:=</span> <span class=\"n\">Top.to_sSet.obj</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">Zsing</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">simplicial_object.whiskering</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Module.free</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">sing</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">normalized_Moore_complex.obj</span> <span class=\"n\">Zsing</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">homology</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I realized there are some universe restrictions on <code>Top.to_sSet</code> which I'll try to fix at some point, so for now this only works for <code>X : Top.{0}</code>.</p>",
        "id": 246037632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626307699
    },
    {
        "content": "<p>Also, this uses the normalized Moore complex, which we have in mathlib, but if I recall correctly this is homotopy equivalent to the alternating face map complex, so should yield the same homology.</p>",
        "id": 246037712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626307774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> This is great!</p>",
        "id": 246040028,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626310128
    },
    {
        "content": "<p>What would need to be done to be able to prove something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">singular_homology</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">punit</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 246040049,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626310160
    },
    {
        "content": "<p>Good question! We could probably come up with an ad-hoc proof of this, but it would be better to develop more of the homotopy theory of the situation, so that we can compute the singular homology of the geometric realization of a simplicial set without first passing to <code>Top</code>. In this case, <code>Top.of punit</code> is the geometric realization of the simplicial 0-simplex, whose homology should be easy to calculate.</p>",
        "id": 246040482,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626310725
    },
    {
        "content": "<p>Does that mean, you're saying that it should be easier to compute, for <code>sing : sSet.{0}</code>, the quantity</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">Zsing</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">simplicial_object.whiskering</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Module.free</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">sing</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">normalized_Moore_complex.obj</span> <span class=\"n\">Zsing</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">homology</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>than to add the extra layer of letting <code>sing := Top.to_sSet.obj X</code> in the above definition?</p>",
        "id": 246042014,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626312780
    },
    {
        "content": "<p>Well, what I mean is that when <code>X</code> is isomorphic to <code>sSet.to_Top.obj Y</code> for some explicit <code>Y</code>, then we should prove that <code>singular_homology X</code> is isomorphic to the homology of <code>normalized_Moore_complex.obj $ ((simplicial_object.whiskering _ _).obj (Module.free ℤ)).obj Y</code>. </p>\n<p>In the case of <code>X = Top.of punit</code>, we have <code>X</code> isomorphic to <code>sSet.to_Top.obj (sSet.standard_simplex.obj [0])</code>.</p>",
        "id": 246042915,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626313792
    },
    {
        "content": "<p>I'm so pleased it's possible to define <code>singular_homology</code> out of already available general machinery. :-)</p>",
        "id": 246061606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626335137
    },
    {
        "content": "<p>But how hard is it to prove that it's isomorphic to some derived functor definition?</p>",
        "id": 246061731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626335252
    },
    {
        "content": "<p>Is this definition functorial? I mean, do we get for each n a functor from <code>Top</code> to <code>Module ℤ</code>? Then the next step is of course to compute the homology of spheres (without cheating, starting with the sphere defined using Euclidean geometry, not as an abstract simplicial set).</p>",
        "id": 246062273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626335664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> yes, it's completely functorial, although I didn't formulate it in this way (but as you can see in the code I just applied a bunch of functors, except for the last <code>homology</code> step, for which we can use the functorial version <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homology_functor\">docs#homology_functor</a> instead).</p>",
        "id": 246087168,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626352550
    }
]