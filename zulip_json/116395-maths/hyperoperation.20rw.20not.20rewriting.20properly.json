[
    {
        "content": "<p>Can anyone tell me why the commented <code>rw</code> is not rewriting, and what work-around there might be?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_1_addition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">bn</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hyperoperation</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">bih</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- rw hyperoperation, --should work; does not work</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320276938,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673283667
    },
    {
        "content": "<p>I guess the issue is somehow caused by having all these overlapping patterns, maybe lean gives up generating all the equation lemmas or something:<br>\nIf I change your definition like this I think it means the same thing and lean is now happy to rewrite, but of course you should make sure the function still does what you intend</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_1_addition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">bn</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hyperoperation</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">bih</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320280167,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1673284465
    },
    {
        "content": "<p>You can have a look at the rewrite rules it generated with <code>#print prefix hyperoperation</code></p>",
        "id": 320285587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286006
    },
    {
        "content": "<p>I found another case where it does not rewrite correctly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_1_addition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">bn</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hyperoperation</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">bn.succ</span> <span class=\"bp\">=</span> <span class=\"n\">bn</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">bn</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_2_multiplication</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">bn</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.mul_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation</span><span class=\"o\">,</span><span class=\"n\">hyperoperation_1_addition</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_succn_2_2_eq_4</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">nn</span> <span class=\"n\">nih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation_1_addition</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">nn.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">nn</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- rw hyperoperation, --should work, fails to work</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320295266,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673288710
    },
    {
        "content": "<p>I would recommend adding an intermediate layer of lemmas, that explicitly state the equation lemmas you are expecting/hoping the equation compiler is going to produce for you, and rewrite via those rather than by <code>hyperoperation</code> directly. That will hopefully be easier to debug and more stable to changes to the definition / moving to Lean 4.</p>",
        "id": 320326791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673296812
    },
    {
        "content": "<p>I added all the intermediate lemmas, yet 1 of them (the one I need) stubbornly resists my attempt to unsorry it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Basic hyperoperation lemmas</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_0ab_b.succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_1a0_a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_2a0_0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_n3a0_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_n1ab1_recurse</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- rw hyperoperation, -- does not work; should work</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320357755,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673310622
    },
    {
        "content": "<p>You simply need to do some <code>cases</code>; since <code>(n+1)</code> overlaps with other cases where <code>n = 1</code> or <code>2</code>, Lean breaks equations into multiple cases, which you can see using <code>#print prefix hyperoperation</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_n1ab1_recurse</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320362033,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673313233
    },
    {
        "content": "<p>The relevant ones used in the above proof are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hyperoperation.equations._eqn_3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">hyperoperation.equations._eqn_5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">hyperoperation.equations._eqn_7</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n.succ.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n.succ.succ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n.succ.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 320362220,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673313361
    },
    {
        "content": "<p>Okay, thank you. I think I have all the interesting hyperoperation lemmas now.<br>\nAny help or advice on getting it added to mathlib would be appreciated. I do not know what would be the best place to add the file (maybe data.nat.hyperoperation ?), for example, and I am unsure how to make the branch for the pull request. Also, I do not know if my lemma names are good enough.<br>\nHere is the completed hyperoperation file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Basic hyperoperation lemmas</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_0ab_b.succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_1a0_a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_2a0_0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_n3a0_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_n1ab1_recurse</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hyperoperation</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyperoperation</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Interesting hyperoperation lemmas</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_1_addition</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">bn</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hyperoperation_1a0_a</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation_n1ab1_recurse</span><span class=\"o\">,</span><span class=\"n\">bih</span><span class=\"o\">,</span><span class=\"n\">hyperoperation_0ab_b.succ</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">bn</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_2_multiplication</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">bn</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation_2a0_0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.mul_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation_n1ab1_recurse</span><span class=\"o\">,</span><span class=\"n\">hyperoperation_1_addition</span><span class=\"o\">,</span><span class=\"n\">bih</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_3_exponentiation</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">3</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">bn</span> <span class=\"n\">bih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation_n3a0_1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pow_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation_n1ab1_recurse</span><span class=\"o\">,</span><span class=\"n\">hyperoperation_2_multiplication</span><span class=\"o\">,</span><span class=\"n\">bih</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pow_succ</span> <span class=\"n\">a</span> <span class=\"n\">bn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_n2a1_a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">nn</span> <span class=\"n\">nih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation_2_multiplication</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation_n1ab1_recurse</span><span class=\"o\">,</span><span class=\"n\">hyperoperation_n3a0_1</span><span class=\"o\">,</span><span class=\"n\">nih</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperoperation_succn_2_2_eq_4</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">nn</span> <span class=\"n\">nih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyperoperation_1_addition</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation_n1ab1_recurse</span><span class=\"o\">,</span><span class=\"n\">hyperoperation_n2a1_a</span><span class=\"o\">,</span><span class=\"n\">nih</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320365656,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673315918
    },
    {
        "content": "<p>After reading <a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a> , I supposed I should replace a and b with m and k.</p>",
        "id": 320367456,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673317344
    },
    {
        "content": "<p>I think the next challenge is to show <code>monotone</code> and <code>strict_mono</code> w.r.t. the three arguments, whenever applicable. And the relationship with the Ackermann function which is already in mathlib as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ack\">docs#ack</a>. There's also <a href=\"https://en.wikipedia.org/wiki/Ackermann_function#Definition:_as_m-ary_function\">relationship with Knuth's up-arrow</a> and <a href=\"https://en.wikipedia.org/wiki/Knuth%27s_up-arrow_notation#Generalizations\">Conway's chained arrow notation</a>, which however aren't in mathlib yet.  (Personally, I have <a href=\"https://github.com/alreadydone/fusible/blob/master/computation.pdf\">some computation</a> using Knuth's arrows that I may formalize sometime ...)</p>",
        "id": 320370415,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673320053
    },
    {
        "content": "<p>PR now awaiting review.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/18116\">https://github.com/leanprover-community/mathlib/pull/18116</a></p>",
        "id": 320374105,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673323641
    }
]