[
    {
        "content": "<p>I've started a <a href=\"https://github.com/leanprover-community/mathlib/pull/15646\">pull request</a> for a basic file containing the definition of <code>S</code>-integers and <code>S</code>-units for a set of primes <code>S</code> (of a Dedekind domain). There are some naming conventions I would like to get opinions for, particularly the name of the file and the name of the structures involved.</p>",
        "id": 295131014,
        "sender_full_name": "David Ang",
        "timestamp": 1661377180
    },
    {
        "content": "<p>/poll What should the name of the file be called?</p>",
        "id": 295131100,
        "sender_full_name": "David Ang",
        "timestamp": 1661377214
    },
    {
        "content": "<p>Let me point out that we're not held to following the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units\">docs#units</a> convention, because we don't have the homonymy problem with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unit\">docs#unit</a>.</p>",
        "id": 295131206,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661377281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span> <a href=\"#narrow/stream/116395-maths/topic/S-integers.20and.20S-units/near/295131100\">said</a>:</p>\n<blockquote>\n<p>/poll What should the name of the file be called?</p>\n</blockquote>\n<p>Whoops, the hyphens here are supposed to be underscores</p>",
        "id": 295131359,
        "sender_full_name": "David Ang",
        "timestamp": 1661377325
    },
    {
        "content": "<p>/poll What should the structures be called?</p>",
        "id": 295131393,
        "sender_full_name": "David Ang",
        "timestamp": 1661377352
    },
    {
        "content": "<p>Is the assumption that the ring is a Dedekind domain really necessary at this point?</p>",
        "id": 295131446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661377392
    },
    {
        "content": "<p>Oh I see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_dedekind_domain.height_one_spectrum.valuation\">docs#is_dedekind_domain.height_one_spectrum.valuation</a> requires a Dedekind domain, but this is true for any normal ring.</p>",
        "id": 295131876,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661377550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span> <a href=\"#narrow/stream/116395-maths/topic/S-integers.20and.20S-units/near/295131100\">said</a>:</p>\n<blockquote>\n<p>/poll What should the name of the file be called?</p>\n</blockquote>\n<p>After a basic API for these things, the plan is to ultimately to prove Dirichlet's <code>S</code>-unit theorem, so I would think calling the file <code>S_unit</code> or <code>S_units</code> make more sense over <code>S_integer</code> or <code>S_integers</code> (not a fan of the <code>ring</code> or <code>group</code> stuff now).</p>",
        "id": 295132188,
        "sender_full_name": "David Ang",
        "timestamp": 1661377665
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> for the review, by the way!</p>",
        "id": 295132385,
        "sender_full_name": "David Ang",
        "timestamp": 1661377745
    },
    {
        "content": "<p>BTW, you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation_subring\">docs#valuation_subring</a> and take the intersection of all subrings given by the valuation subrings assocaited to primes not contained in S to get the same result.</p>",
        "id": 295132390,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661377746
    },
    {
        "content": "<p>Similarly you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation_subring.unit_group\">docs#valuation_subring.unit_group</a> to get the units</p>",
        "id": 295132414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661377770
    },
    {
        "content": "<p>I.e. something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.valuation_subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain.adic_valuation</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">is_dedekind_domain</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">height_one_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S_integer</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⨅</span> <span class=\"n\">P</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P.valuation</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">K</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">valuation_subring.to_subring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S_unit</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⨅</span> <span class=\"n\">P</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P.valuation</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">K</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">valuation_subring.unit_group</span>\n</code></pre></div>",
        "id": 295132981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661378081
    },
    {
        "content": "<p>Ah, this is very nice.</p>",
        "id": 295133243,
        "sender_full_name": "David Ang",
        "timestamp": 1661378251
    },
    {
        "content": "<p>Dumb order theorist question: I assume you can't have <code>S_integer : valuation_subring K</code> because <code>valuation_subring K</code> is not a complete lattice?</p>",
        "id": 295133248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661378254
    },
    {
        "content": "<p><code>valuation_subring</code> doesn't have arbitrary joins</p>",
        "id": 295133261,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661378269
    },
    {
        "content": "<p>and it only had nonempty sups</p>",
        "id": 295133271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661378276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> this <code>valuation_subring</code> does have one peculiar property: Given any element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>, the subposet <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>v</mi><mo>≤</mo><mi>x</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x | v \\le x\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">}</span></span></span></span> is linearly ordered. Is there an order-theoretic name for such a thing?</p>",
        "id": 295133660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661378518
    },
    {
        "content": "<p>A tree?</p>",
        "id": 295133738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661378548
    },
    {
        "content": "<p>yeah I guess so.</p>",
        "id": 295133750,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661378556
    },
    {
        "content": "<p>do we have a way to speak about such things in mathlib?</p>",
        "id": 295133769,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661378571
    },
    {
        "content": "<p>Not per se, but you can already express many close properties. What kind of theorems do you want to state?</p>",
        "id": 295133852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661378637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/S-integers.20and.20S-units/near/295132981\">said</a>:</p>\n<blockquote>\n<p>I.e. something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.valuation_subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain.adic_valuation</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">is_dedekind_domain</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">height_one_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S_integer</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⨅</span> <span class=\"n\">P</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P.valuation</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">K</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">valuation_subring.to_subring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S_unit</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⨅</span> <span class=\"n\">P</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P.valuation</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">K</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">valuation_subring.unit_group</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Wouldn't the current definition be easier to work with, then having a separate lemma that it's the same as this definition?</p>",
        "id": 295134918,
        "sender_full_name": "David Ang",
        "timestamp": 1661379324
    },
    {
        "content": "<p>This should be defeq to what you have!</p>",
        "id": 295135096,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661379447
    },
    {
        "content": "<p>okay, maybe not defeq on the nose, but the only difference is some annoyances with the intersection not being defeq to \"forall ...\" in this case.</p>",
        "id": 295136910,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661380502
    },
    {
        "content": "<p>But that's a hole in the API for subrings and subgroups, and should be a separate issue altogether.</p>",
        "id": 295136973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661380535
    },
    {
        "content": "<p>Would it be reasonable to use the name <code>set.integers</code> and <code>set.units</code> so you can write <code>S.integers K</code> and <code>S.units K</code>? It would be nice to avoid the appearance of a variable in the declaration names and the duplication of <code>S</code>.</p>\n<p>If we don't want them to occupy the <code>set</code> namespace can we introduce <code>@[reducible] def set_height_one_spectrum R :=  set $ height_one_spectrum R</code> and use the names <code>set_height_one_spectrum.integers/units</code>?</p>",
        "id": 295142908,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661384994
    },
    {
        "content": "<p>Another question: is the S-integers always the localization at a certain submonoid (an intersection of prime_compl, probably)? If so, would be nice to connect to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization.subalgebra.of_field\">docs#localization.subalgebra.of_field</a> .</p>",
        "id": 295144428,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661386208
    },
    {
        "content": "<p>I think the answer to my question is no unfortunately, unless the Dedekind domain is a UFD (equivalently a PID); if it's a PID just take one generator of each prime ideal in S, and localize at the submonoid generated by them. If it's not a PID, for example Z[√-5], then the element x = 2/(1+√-5) = (1-√-5)/3 factorizes as the quotient (2,1-√-5)/(3,1+√-5) of two prime ideals, so x is an S-integer with S the singleton {(3, 1+√-5)}. If the S-integers is a localization of Z[√-5], then x can be written as a quotient of two elements in of Z[√-5] with denominator in the submonoid. The ideal (3, 1+√-5) must be a factor of the denominator, but since it's not a principal ideal, the factorization of the denominator must contain another ideal, so 1/denom is not an S-integer even though denom is in the submonoid, contradicting the S-integers being the localization at that submonoid.</p>",
        "id": 295150659,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661393592
    },
    {
        "content": "<p>Want to formalize that in <code>counterexamples/</code>? :)</p>",
        "id": 295170520,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661409716
    },
    {
        "content": "<p>The <code>set.integers/units</code> idea sounds good - I’ll see what I can do. One more thing though - does anyone ever use infinite <code>S</code>? Perhaps <code>finset</code> is more appropriate?</p>",
        "id": 295176405,
        "sender_full_name": "David Ang",
        "timestamp": 1661413142
    },
    {
        "content": "<p>Potentially infinite S's seen worth supporting to me, of course some results will only be true for finite S but I'd think there was some use keeping it general where possible.</p>",
        "id": 295195377,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661421395
    },
    {
        "content": "<p>If using possibly infinite set of S-units, maybe we can have a bridge between localizations at a submonoid and <code>{generating set for the monoid}</code>-units.</p>\n<p>As far as I recall, the localization API revolves around having a submonoid and I always found it a little cumbersome to work with inverting a single element.</p>",
        "id": 295207762,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661426813
    },
    {
        "content": "<p>Yes indeed S-integers is the more general notion (than localization). Given a submonoid M of a Dedekind domain R, you may take S to be the set of all prime ideals appearing in the factorization of some element of M. Clearly the localization at M is contained in the S-integers. Conversely, for x an S-integer, consider all prime ideals where its valuation is &gt; 1; every such prime ideal lies in S, so it's a factor of some element of M. If you multiply x by an appropriate power of the product of these elements of M (which is still an element of M), you get an element of K with valuation &gt;=0 everywhere, so it lies in R, and therefore x is the quotient of two elements of R with denominator in M, or equivalently it lies in the localization of R at M.<br>\nSo we can make the connection for all Dedekind domains after all!</p>",
        "id": 295255761,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661441567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/S-integers.20and.20S-units/near/295150659\">said</a>:</p>\n<blockquote>\n<p>I think the answer to my question is no unfortunately, unless the Dedekind domain is a UFD (equivalently a PID); if it's a PID just take one generator of each prime ideal in S, and localize at the submonoid generated by them. If it's not a PID, for example Z[√-5], then the element x = 2/(1+√-5) = (1-√-5)/3 factorizes as the quotient (2,1-√-5)/(3,1+√-5) of two prime ideals, so x is an S-integer with S the singleton {(3, 1+√-5)}. If the S-integers is a localization of Z[√-5], then x can be written as a quotient of two elements in of Z[√-5] with denominator in the submonoid. The ideal (3, 1+√-5) must be a factor of the denominator, but since it's not a principal ideal, the factorization of the denominator must contain another ideal, so 1/denom is not an S-integer even though denom is in the submonoid, contradicting the S-integers being the localization at that submonoid.</p>\n</blockquote>\n<p>I don't think this is right. If S={P} as above then P^2=(f) will be principal as the class group has size 2, and localising at S is the same as inverting f.</p>",
        "id": 295331887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661475434
    },
    {
        "content": "<p>But if you let S={P} where P is a point of infinite order in the class group (e.g. some random complex point of infinite order on an affine elliptic curve) then I believe this gives a Dedekind domain example which is not a localisation.</p>",
        "id": 295332003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661475548
    },
    {
        "content": "<p>Oh indeed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> So there are no counterexamples among global fields. The problem is apparently has some parallel with <a href=\"https://mathoverflow.net/a/7185/3332\">https://mathoverflow.net/a/7185/3332</a>, and your example works in both case.</p>",
        "id": 295345642,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661480657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/S-integers.20and.20S-units/near/295136910\">said</a>:</p>\n<blockquote>\n<p>okay, maybe not defeq on the nose, but the only difference is some annoyances with the intersection not being defeq to \"forall ...\" in this case.</p>\n</blockquote>\n<p>I can't seem to equate the two definitions of <code>S</code>-unit groups - one has <code>v.valuation x = 1</code> while the other has <code>v.valuation.valuation_subring.valuation x = 1</code>, and I'm not sure how to go between the two different <code>value_group</code>s. The two definitions of <code>S</code>-integer rings are equal though!</p>",
        "id": 295519756,
        "sender_full_name": "David Ang",
        "timestamp": 1661551384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/S-integers.20and.20S-units/near/295142908\">said</a>:</p>\n<blockquote>\n<p>Would it be reasonable to use the name <code>set.integers</code> and <code>set.units</code> so you can write <code>S.integers K</code> and <code>S.units K</code>? It would be nice to avoid the appearance of a variable in the declaration names and the duplication of <code>S</code>.</p>\n<p>If we don't want them to occupy the <code>set</code> namespace can we introduce <code>@[reducible] def set_height_one_spectrum R :=  set $ height_one_spectrum R</code> and use the names <code>set_height_one_spectrum.integers/units</code>?</p>\n</blockquote>\n<p>I've refactored them to <code>set.integer</code> and <code>set.unit</code> for now. If this file is not imported, I guess there shouldn't be any harm to have weird definitions in the <code>set</code> namespace?</p>",
        "id": 295525111,
        "sender_full_name": "David Ang",
        "timestamp": 1661554375
    },
    {
        "content": "<p>You're right, it's not defeq, but it's very simple:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.valuation_subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain.adic_valuation</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">is_dedekind_domain</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">K</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">v.valuation_subring.unit_group</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[(</span><span class=\"n\">valuation.is_equiv_iff_val_eq_one</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">v.is_equiv_valuation_valuation_subring</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 295525606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661554695
    }
]