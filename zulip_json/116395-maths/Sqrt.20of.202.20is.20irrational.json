[
    {
        "content": "<p>I am trying to prove <code>¬(∃ p : ℚ, p * p = 2)</code>. I have reached to a somewhat good place but there is a coercion issue</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">@</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_mul_eq_mul</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">h₁</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">h₀</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_denom</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- have h₅, from @eq.subst ℤ (λ x, (2 : ℚ).num * ↑((p * p).denom) = (p * p).num * x) ↑((2 : ℚ).denom) 1 h₄ h₃,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_num</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_int_denom</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₇</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_int_num</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₈</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_int_eq_of_int</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196294967,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588677946
    },
    {
        "content": "<p>has anyone done this proof in a better way?</p>",
        "id": 196295025,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588677974
    },
    {
        "content": "<p>I am having trouble getting rid of the <code>2.denom</code> part</p>",
        "id": 196295057,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588678000
    },
    {
        "content": "<p>I have zero experience using rational numbers in Lean but I would start with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h₀</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_mul_eq_mul</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_self_num</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_self_denom</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">h₀</span> <span class=\"o\">},</span>\n\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196296479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588679066
    },
    {
        "content": "<p>Of course you'll find much more by reading <a href=\"https://leanprover-community.github.io/mathlib_docs/data/real/irrational.html\" title=\"https://leanprover-community.github.io/mathlib_docs/data/real/irrational.html\">https://leanprover-community.github.io/mathlib_docs/data/real/irrational.html</a></p>",
        "id": 196296562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588679150
    },
    {
        "content": "<p>thanks, will try to continue from there</p>",
        "id": 196297604,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588679854
    },
    {
        "content": "<p>You should also study the use of <code>rintros</code> and <code>rw</code> here (and <code>simpa</code>). It will make your code much more efficient.</p>",
        "id": 196298146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588680183
    },
    {
        "content": "<p>Your handling of negation also strongly suggests you would benefit from going through the <a href=\"https://github.com/leanprover-community/tutorials\" title=\"https://github.com/leanprover-community/tutorials\">tutorials project</a>.</p>",
        "id": 196298289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588680261
    },
    {
        "content": "<p>thanks, will do. was trying to write everything out  to understand where thing have gone wrong</p>",
        "id": 196298692,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588680579
    }
]