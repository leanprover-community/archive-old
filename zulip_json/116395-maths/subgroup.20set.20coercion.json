[
    {
        "content": "<p>Here is a little type class failure experiment. In a Lean file, write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Both check succeed instantly. Now replace the first line by <code>import ring_theory.algebra</code>. The second check times out.</p>",
        "id": 176188940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568983616
    },
    {
        "content": "<p>Next, create a dummy copy of <code>ring_theory.algebra</code> where the instance on <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/algebra.lean#L537\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/algebra.lean#L537\">https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/algebra.lean#L537</a> is only a local instance. Then both checks succeed, but the second one is very slow.</p>",
        "id": 176188976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568983662
    },
    {
        "content": "<p>What should we do?</p>",
        "id": 176188986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568983682
    },
    {
        "content": "<p>what does the trace look like?</p>",
        "id": 176190238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568984613
    },
    {
        "content": "<p>It looks bad</p>",
        "id": 176190306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568984642
    },
    {
        "content": "<p>Do you mean the trace that works quickly, the one that works  slowly or the one that fail?</p>",
        "id": 176190365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568984685
    },
    {
        "content": "<p>both, what is the difference?</p>",
        "id": 176190415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568984734
    },
    {
        "content": "<p>I am guessing that it has to do with has lift vs has coe</p>",
        "id": 176190493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568984781
    },
    {
        "content": "<p>failure at <a href=\"https://pastebin.com/b9rgT8v7\" target=\"_blank\" title=\"https://pastebin.com/b9rgT8v7\">https://pastebin.com/b9rgT8v7</a></p>",
        "id": 176190731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568984957
    },
    {
        "content": "<p>fast success at <a href=\"https://pastebin.com/D804HUNU\" target=\"_blank\" title=\"https://pastebin.com/D804HUNU\">https://pastebin.com/D804HUNU</a></p>",
        "id": 176190877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568985056
    },
    {
        "content": "<p>Note how the lovely successful one still ends up in <code>(message too long, truncated at 262144 characters)</code></p>",
        "id": 176190950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568985104
    },
    {
        "content": "<p>After 3662 lines</p>",
        "id": 176190961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568985116
    },
    {
        "content": "<p>And let me conjecture we have a little problem anyway.</p>",
        "id": 176191021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568985137
    },
    {
        "content": "<p>So, any idea? Anyone?</p>",
        "id": 176213073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569000252
    },
    {
        "content": "<p>I think it's just a big instance problem</p>",
        "id": 176217475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569003242
    },
    {
        "content": "<p>and it has the usual exponential blowup stuff</p>",
        "id": 176217532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569003259
    },
    {
        "content": "<p>Note that the added import both significantly increases the number of available instances and also changes the type of the problem:<br>\nbefore:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">has_coe_to_fun</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span> <span class=\"bp\">ℤ</span> <span class=\"n\">A</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"bp\">ℤ</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span> <span class=\"bp\">ℤ</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span> <span class=\"bp\">ℤ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span> <span class=\"bp\">ℤ</span>\n                 <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">A</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">A</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span>\n</pre></div>\n\n\n<p>after:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">has_coe_to_fun</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span> <span class=\"bp\">ℤ</span> <span class=\"n\">A</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"bp\">ℤ</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_domain</span> <span class=\"bp\">ℤ</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span> <span class=\"bp\">ℤ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span> <span class=\"bp\">ℤ</span>\n                 <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">A</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"bp\">ℤ</span> <span class=\"n\">A</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">A</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">A</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 176217667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569003376
    },
    {
        "content": "<p>I think it's probably not good that the proof of <code>module ℤ A</code> changes to this more complicated one after the import</p>",
        "id": 176217733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569003460
    },
    {
        "content": "<p>we really need to think about using instance priorities in a systematic and coherent way across the library</p>",
        "id": 176217813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569003508
    },
    {
        "content": "<p>I don't even understand how we get a <code>has_coe_to_fun</code> search</p>",
        "id": 176217841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569003536
    },
    {
        "content": "<p>I think it's because <code>set A</code> is a function type</p>",
        "id": 176217862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569003559
    },
    {
        "content": "<p>How weird</p>",
        "id": 176217897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569003600
    },
    {
        "content": "<p>I agree, I would have expected a has_coe</p>",
        "id": 176217965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569003622
    },
    {
        "content": "<p>Should <code>set</code> be irreducible?</p>",
        "id": 176219018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569004339
    },
    {
        "content": "<p>That would prevent a lot of defeqness that we currently depend on...</p>",
        "id": 176219050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569004368
    },
    {
        "content": "<p>Doesn't sound good</p>",
        "id": 176219056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569004373
    },
    {
        "content": "<p>no, I think that's a bad idea</p>",
        "id": 176219828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569004925
    },
    {
        "content": "<p>it might work in principle but there isn't a strong argument for the distinction and we occasionally make use of the defeqness</p>",
        "id": 176219874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569004970
    },
    {
        "content": "<p>At least this explains why using a <code>(↑S : set A)</code> works better than <code>(S : set A)</code></p>",
        "id": 176223445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569007649
    }
]