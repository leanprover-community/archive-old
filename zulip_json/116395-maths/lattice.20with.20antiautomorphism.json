[
    {
        "content": "<p>In <a href=\"#narrow/stream/113488-general/topic/Group.20morphism/near/192132752\" title=\"#narrow/stream/113488-general/topic/Group.20morphism/near/192132752\">this piece of code</a> there's a lattice where inf is much easier to work with than sup. I defined inf and proved all the theorems to make a <code>semilattice_inf_bot</code>. I now wanted a <code>semilattice_sup_top</code> and I claim that I should be able to get it for free by applying an <code>inv</code> function to everything, e.g. <code>E ⊔ F = (F⁻¹ ⊓ E⁻¹)⁻¹</code> and so on (maybe I don't want this to be the definition of sup, but I want to prove this theorem about sup, and once I've proved it and that the inverse of top is bot, I want everything else for free). What is happening here? Is this some kind of <code>to_additive</code> on steroids?</p>",
        "id": 192132929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585416041
    },
    {
        "content": "<p>There is <code>lattice.copy</code>, and all its cousins.</p>",
        "id": 192133556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585417017
    },
    {
        "content": "<p>That allows you to take a lattice structure with ugly definitions, and replace them with good definitions, but maintain all the proofs.</p>",
        "id": 192133568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585417059
    },
    {
        "content": "<p>What's happening here is that I prove all the theorems about inf and top, but I don't want to prove any of the theorems about sup and bot because they all follow from the theorems about inf and top when I apply the involution.</p>",
        "id": 192134225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585418061
    },
    {
        "content": "<p>Maybe not all the machinery for transporting half of the structure across that involution is there.</p>",
        "id": 192134251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585418147
    },
    {
        "content": "<p>Can you do a galois connection with the dual to get <code>semilattice_sup_top</code> somehow?</p>",
        "id": 192134252,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585418149
    },
    {
        "content": "<p>However I was forced to prove them because I didn't know any automation which would do them, and asking <code>simp</code> to do it is I think too tall an order. You apply le_of_inv_ge_inv or eq_of_inv_eq_inv to everything and then apply the corresponding \"dual\" lemma, with the occasional inv_inv thrown in</p>",
        "id": 192134297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585418171
    },
    {
        "content": "<p>Galois connection: that is an interesting idea!</p>",
        "id": 192134308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585418196
    },
    {
        "content": "<p>I think I simply need that if <code>L ≃ M</code> is &lt;=-reversing then I can transfer an inf_bot on L to a sup_top on M</p>",
        "id": 192136199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585420960
    },
    {
        "content": "<p>Do we have the theorem that says that <code>semilattice_inf_bot X -&gt; semilattice_sup_top (dual X)</code>?</p>",
        "id": 192144789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585434904
    },
    {
        "content": "<p>If so, you should be able to apply it and then use <code>change</code> to fix up all the operations (the inverse function is not necessary)</p>",
        "id": 192144797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585434947
    },
    {
        "content": "<p>I think we need the other way round here</p>",
        "id": 192144800,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585434951
    },
    {
        "content": "<p>oh yes you are right</p>",
        "id": 192144806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585434962
    },
    {
        "content": "<p>But this doesn't solve the problem right?</p>",
        "id": 192147935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585440297
    },
    {
        "content": "<p>I now need to transport the typeclass along the isomorphism between the lattice and its dual</p>",
        "id": 192147951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585440331
    },
    {
        "content": "<p>Yeah, you have to do that. But you can do that once in great generality.</p>",
        "id": 192148218,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585440760
    },
    {
        "content": "<p>So you haven't saved yourself much work, but you've saved the next person some work.</p>",
        "id": 192148226,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585440799
    },
    {
        "content": "<p>But I thought we're supposed to doing this with the transfer tactic which didn't get written yet? I'm supposed to be giving a talk on this on Wednesday</p>",
        "id": 192148303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585440962
    },
    {
        "content": "<p>I'm not sure the transfer tactic will do that.</p>",
        "id": 192148483,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585441320
    },
    {
        "content": "<p>This doesn't feel like that, because the structures are different.</p>",
        "id": 192148535,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585441362
    },
    {
        "content": "<p>I mean after getting the suptop on the dual of L from the infbot on L, I then need to get a suptop on L from the suptop on the dual of L by transporting it along the isomorphism I have between L and its dual given by inv</p>",
        "id": 192149470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585443315
    },
    {
        "content": "<p>In my situation I have an isomorphism inv between L and its dual</p>",
        "id": 192149524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585443403
    },
    {
        "content": "<p>So I want to do only half the work for proving L is a bounded lattice. Other than the partial order it seems to be that the inf top structure and the sup bot structure are completely disjoint and dual in some way</p>",
        "id": 192149587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585443510
    },
    {
        "content": "<p>But that's a theorem that isn't inside the realm of transfer I think. Even though it's an easy tedious theorem. The fact that <code>sup</code> is dual to <code>inf</code> and so on.</p>",
        "id": 192149744,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585443765
    },
    {
        "content": "<p>I'm confused. The transfer tactic is not needed here</p>",
        "id": 192149804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585443861
    },
    {
        "content": "<p>There is a theorem, proven once, that <code>semilattice_sup_top X -&gt; semilattice_inf_bot (dual X)</code></p>",
        "id": 192149808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585443886
    },
    {
        "content": "<p>there is no automation involved in this theorem, you just unfold and apply the projections</p>",
        "id": 192149827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585443935
    },
    {
        "content": "<p>This is analogous to the theorem <code>group G -&gt; add_group (additive G)</code></p>",
        "id": 192149838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585443961
    },
    {
        "content": "<p>Once that is set up, a statement like <code>\\forall x y : X, x \\cap y = y \\cap x</code> can be proven by <code>@sup_comm (dual X) _</code></p>",
        "id": 192149880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585444058
    },
    {
        "content": "<p>In my situation I have an inf_bot on L. I want a sup_top on L. The theorem above, proven once, will give me a sup_top on dual(L). Now how do I get the sup_top on L? Answer: use <code>inv</code>, the isomorphism between L and dual(L). But now I need transfer, right? What am I missing?</p>",
        "id": 192149984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585444206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, sorry this answer is two days late, but we are on the verge of having this. From the <a href=\"https://github.com/leanprover-community/mathlib/compare/equiv_rw..transport\" title=\"https://github.com/leanprover-community/mathlib/compare/equiv_rw..transport\"><code>transport</code></a> branch, for which there is an open PR <a href=\"https://github.com/leanprover-community/mathlib/issues/2251\" title=\"https://github.com/leanprover-community/mathlib/issues/2251\">#2251</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- We verify that `transport` can move a `semiring` across an equivalence.</span>\n<span class=\"c1\">-- Note that we&#39;ve never even mentioned the idea of addition or multiplication to `transport`.</span>\n<span class=\"n\">def</span> <span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">transport</span><span class=\"bp\">.</span>\n\n<span class=\"c1\">-- Indeed, it can equally well move a `semilattice_sup_top`.</span>\n<span class=\"n\">def</span> <span class=\"n\">sup_top</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_sup_top</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">transport</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 192385289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585659609
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 192386327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585660151
    }
]