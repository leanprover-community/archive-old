[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hSf</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">hSf</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_subset</span> <span class=\"n\">hSf</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">diff_subset</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Is this what I should be doing? I am working with subalgebras of an algebra generated by a subset and I want to use <a href=\"https://github.com/leanprover-community/mathlib/blob/1bd23bf14f5fe61add70fd291886375928dbc7f0/src/ring_theory/integral_closure.lean#L75\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/1bd23bf14f5fe61add70fd291886375928dbc7f0/src/ring_theory/integral_closure.lean#L75\">results like this</a>, so I went with <code>set.finite</code> rather than <code>finset</code>. But I now want to prove things by induction on the size of the set and I'm running into issues such as the above.</p>",
        "id": 186990750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580394117
    },
    {
        "content": "<p>There should a <code>card</code> function on all types, that is noncomputable and returns <code>0</code> if the set is infinite.</p>",
        "id": 186990896,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1580394192
    },
    {
        "content": "<p>The type in question here is presumably <code>subtype \\alpha</code>? I am guessing we already have some <code>card</code> function in the cardinal library, and then we could have some function from cardinals to nat sending anything infinite to zero?</p>",
        "id": 186991020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580394259
    },
    {
        "content": "<p>Oh -- you mean on <code>Type</code>?</p>",
        "id": 186991048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580394278
    },
    {
        "content": "<p>Yes. Might as well be done like that and then cardinalities of sets are defeq to the cardinality of the corresponding subtype.</p>",
        "id": 186991117,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1580394320
    }
]