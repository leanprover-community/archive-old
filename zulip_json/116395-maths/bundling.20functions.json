[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If you are interested, would you mind looking into why we can not use <code>quotient_group.map _ _ id _</code> in the following definition: <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuations.lean#L583\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuations.lean#L583\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuations.lean#L583</a><br>\nCurrently we are using <code>quotient_group.lift</code> but this is a bit more roundabout then necessary I would say. Any attempt to use <code>quotient_group.map</code> results in deterministic timeouts or even frozen operating systems...</p>",
        "id": 158099293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549958399
    },
    {
        "content": "<p>how much of that file do I need?</p>",
        "id": 158099355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549958439
    },
    {
        "content": "<p>which <code>quotient</code> is here: <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuations.lean#L427\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuations.lean#L427\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuations.lean#L427</a></p>",
        "id": 158099483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549958560
    },
    {
        "content": "<p>That's <code>quotient_group.quotient</code></p>",
        "id": 158099603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549958693
    },
    {
        "content": "<p>the first thing I would try is <code>change quotient _ -&gt; quotient _</code> before the refine</p>",
        "id": 158099672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549958767
    },
    {
        "content": "<p>I think I already tried that at some point...</p>",
        "id": 158099686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549958816
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span><span class=\"o\">))))</span>\n</pre></div>",
        "id": 158100717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960143
    },
    {
        "content": "<p>short term, you can replace the proof with <code>is_group_hom.id</code></p>",
        "id": 158100736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960185
    },
    {
        "content": "<p>i.e. <code>refine @quotient_group.map _ _ _ _ _ _ _ _ id is_group_hom.id _,</code></p>",
        "id": 158100799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960217
    },
    {
        "content": "<p>Ouch... thanks for minimizing it! I tried but got stuck (both my hardware and my brainware)...</p>",
        "id": 158100905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549960376
    },
    {
        "content": "<p>oh shit, <code>discrete_field.has_decidable_eq</code> is an instance in core</p>",
        "id": 158100908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960379
    },
    {
        "content": "<p>that's not good at all</p>",
        "id": 158100914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960384
    },
    {
        "content": "<p>Fork! Fork! Fork!</p>",
        "id": 158100919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549960392
    },
    {
        "content": "<p>But is that the reason for your MWE failing?</p>",
        "id": 158100929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549960417
    },
    {
        "content": "<p>it's probably not the culprit, but it's responsible for a lot of wheel-spinning</p>",
        "id": 158100933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960435
    },
    {
        "content": "<p>Because that MWE looks very innocent. It's bit of a bad omen that Lean can't find that instance.</p>",
        "id": 158100977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549960445
    },
    {
        "content": "<p>Just make an instance of <code>has_undecidable_eq</code> with higher priority</p>",
        "id": 158100979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549960448
    },
    {
        "content": "<p>especially since the instance for <code>prop_decidable</code> is at the end of the list and you use it all the time</p>",
        "id": 158100991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960473
    },
    {
        "content": "<p>you might want to consider dropping the <code>priority 0</code></p>",
        "id": 158100993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960486
    },
    {
        "content": "<p>I wouldn't mind a Lean feature</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">foobar</span> <span class=\"c1\">-- removes an instance locally</span>\n</pre></div>",
        "id": 158101012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549960520
    },
    {
        "content": "<blockquote>\n<p>you might want to consider dropping the <code>priority 0</code></p>\n</blockquote>\n<p>That usually causes other breakage, doesn't it? I can try though.</p>",
        "id": 158101025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549960549
    },
    {
        "content": "<p>Can one edit the database of instances somehow?</p>",
        "id": 158101031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549960556
    },
    {
        "content": "<p>I mean, other than by adding to it?</p>",
        "id": 158101076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549960566
    },
    {
        "content": "<p>nope, at least not global instances</p>",
        "id": 158101087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960583
    },
    {
        "content": "<p>the worry is that it makes import order matter</p>",
        "id": 158101095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960595
    },
    {
        "content": "<p>So far, no breakage in this file, if I drop the <code>prio</code></p>",
        "id": 158101101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549960603
    },
    {
        "content": "<p>it does seem to improve the search, but it's still overflowing</p>",
        "id": 158101131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960670
    },
    {
        "content": "<p>Yeah, it doesn't solve the MWE</p>",
        "id": 158101180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549960709
    },
    {
        "content": "<p>oh, this is interesting:</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances] (1) ?x_60 : @is_group_hom (multiplicative (R →₀ ℤ)) (multiplicative (R →₀ ℤ))\n  (@multiplicative.group (R →₀ ℤ)\n     (@finsupp.add_group R ℤ (λ (a b : R), classical.prop_decidable (a = b))\n        (λ (a b : ℤ), classical.prop_decidable (a = b))\n        (@add_comm_group.to_add_group ℤ\n           (@ring.to_add_comm_group ℤ\n              (@domain.to_ring ℤ\n                 (@to_domain ℤ\n                    (@linear_ordered_comm_ring.to_linear_ordered_ring ℤ\n                       (@decidable_linear_ordered_comm_ring.to_linear_ordered_comm_ring ℤ\n                          int.decidable_linear_ordered_comm_ring))))))))\n  (@multiplicative.group (R →₀ ℤ)\n     (@finsupp.add_group R ℤ (λ (a b : R), classical.prop_decidable (a = b))\n        (λ (a b : ℤ), classical.prop_decidable (a = b))\n        (@add_comm_group.to_add_group ℤ\n           (@ring.to_add_comm_group ℤ\n              (@domain.to_ring ℤ\n                 (@to_domain ℤ\n                    (@linear_ordered_comm_ring.to_linear_ordered_ring ℤ\n                       (@decidable_linear_ordered_comm_ring.to_linear_ordered_comm_ring ℤ\n                          int.decidable_linear_ordered_comm_ring))))))))\n  (λ (x : multiplicative (R →₀ ℤ)), x) := @is_group_hom.id ?x_283 ?x_284\nfailed is_def_eq\n</pre></div>",
        "id": 158101338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960900
    },
    {
        "content": "<p>it found the right answer and passed it over</p>",
        "id": 158101386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549960924
    },
    {
        "content": "<p>I think it's because <code>id</code> has been unfolded at this point, but it's not reducible</p>",
        "id": 158101438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961021
    },
    {
        "content": "<p>Your use of \"interesting\" is… interesting…</p>",
        "id": 158101439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961023
    },
    {
        "content": "<p>looks like <code>is_group_hom.comp</code> is the culprit</p>",
        "id": 158101517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961104
    },
    {
        "content": "<p>this should not be an instance, it is applied in stupid ways</p>",
        "id": 158101543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961143
    },
    {
        "content": "<p>But if it is not an instance then it causes breakage... in stupid ways</p>",
        "id": 158101599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961176
    },
    {
        "content": "<p>I think <code>group_hom</code> should be a thing sooner rather than later</p>",
        "id": 158101613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961200
    },
    {
        "content": "<p>I'll be slamming my keyboard 10 times a day: \"Come on Lean, you're composing two group homs... of course that's a group hom\"</p>",
        "id": 158101618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961209
    },
    {
        "content": "<p>the evidence continues to mount in favor of bundled functions</p>",
        "id": 158101623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961218
    },
    {
        "content": "<p>I think bundling is cool<br>\n(And I don't know what I'm talking about <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>)</p>",
        "id": 158101624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961219
    },
    {
        "content": "<p>nonononono it has nothing to do with <code>is_group_hom.comp</code></p>",
        "id": 158101641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549961252
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (0) ?x_0 : @is_group_hom (multiplicative (ℤ →₀ ℤ)) (multiplicative (ℤ →₀ ℤ))\n  (@multiplicative.group (ℤ →₀ ℤ)\n     (@finsupp.add_group ℤ ℤ (λ (a b : ℤ), int.decidable_eq a b) (λ (a b : ℤ), int.decidable_eq a b)\n        (@add_comm_group.to_add_group ℤ\n           (@ring.to_add_comm_group ℤ\n              (@domain.to_ring ℤ\n                 (@to_domain ℤ\n                    (@linear_ordered_comm_ring.to_linear_ordered_ring ℤ\n                       (@decidable_linear_ordered_comm_ring.to_linear_ordered_comm_ring ℤ\n                          int.decidable_linear_ordered_comm_ring))))))))\n  (@multiplicative.group (ℤ →₀ ℤ)\n     (@finsupp.add_group ℤ ℤ (λ (a b : ℤ), int.decidable_eq a b) (λ (a b : ℤ), int.decidable_eq a b)\n        (@add_comm_group.to_add_group ℤ\n           (@ring.to_add_comm_group ℤ\n              (@domain.to_ring ℤ\n                 (@to_domain ℤ\n                    (@linear_ordered_comm_ring.to_linear_ordered_ring ℤ\n                       (@decidable_linear_ordered_comm_ring.to_linear_ordered_comm_ring ℤ\n                          int.decidable_linear_ordered_comm_ring))))))))\n  (λ (x : multiplicative (ℤ →₀ ℤ)), x) := @is_group_hom.id ?x_44 ?x_45\nfailed is_def_eq\n</pre></div>",
        "id": 158101655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549961278
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 158101699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549961287
    },
    {
        "content": "<p><code>comp</code> is reducible, if you try to unify <code>id</code> with <code>f o g</code> you get <code>f = \\lam x, x</code> and <code>g = id</code></p>",
        "id": 158101701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961288
    },
    {
        "content": "<p>but still yes for bundling</p>",
        "id": 158101702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549961294
    },
    {
        "content": "<p>it turned a perfectly normal first order problem into a higher order problem</p>",
        "id": 158101715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961317
    },
    {
        "content": "<p>we could have an instance for <code>is_group_hom (\\lam x, x)</code> which would also solve this problem but that's not the point</p>",
        "id": 158101738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961362
    },
    {
        "content": "<p>type class searches with explicit lambdas is never a good idea</p>",
        "id": 158101746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961380
    },
    {
        "content": "<p>so do we support bundling?</p>",
        "id": 158101800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549961405
    },
    {
        "content": "<p>it worked for linear maps, I think it will work just as well if not better for group theory</p>",
        "id": 158101816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961441
    },
    {
        "content": "<p>That's going to be a major refactor...</p>",
        "id": 158101818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961448
    },
    {
        "content": "<p>yep</p>",
        "id": 158101820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961451
    },
    {
        "content": "<p>And let's do <code>ring_hom</code> at the same time</p>",
        "id": 158101830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961462
    },
    {
        "content": "<p>This is also moving \"hands-on\" mathlib closer to \"categorical\" mathlib</p>",
        "id": 158101846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961479
    },
    {
        "content": "<p>I think that's a good thing.</p>",
        "id": 158101850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961487
    },
    {
        "content": "<p>the solution to higher order problems is to make them first order problems</p>",
        "id": 158101860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961512
    },
    {
        "content": "<p>Aah, and <code>continuous</code> can finally be <code>continuous</code>, instead of secretly meaning <code>is_continous</code>...</p>",
        "id": 158101862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961518
    },
    {
        "content": "<p>But previously we could mix <code>[is_group_hom f]</code> with <code>injective f</code>... will that kind of things become nastier after this refactor?</p>",
        "id": 158101916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961556
    },
    {
        "content": "<p>that becomes <code>injective f</code></p>",
        "id": 158101924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961571
    },
    {
        "content": "<p>Does it mean we'll have unification hints all over the place?</p>",
        "id": 158101926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549961574
    },
    {
        "content": "<p>no</p>",
        "id": 158101930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961578
    },
    {
        "content": "<p>This would be for bundled structures but not bundled maps?</p>",
        "id": 158101947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549961599
    },
    {
        "content": "<p>A lot of type class searches will go away though</p>",
        "id": 158101949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961600
    },
    {
        "content": "<p>no, the other way around</p>",
        "id": 158101955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961612
    },
    {
        "content": "<p>maps bundled, structures unbundled</p>",
        "id": 158101961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961625
    },
    {
        "content": "<p>I meant unification hints would be for bundled structures</p>",
        "id": 158102008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549961647
    },
    {
        "content": "<p>right... it's a good question if there are any applications for unification hints as a consequence of bundling structures</p>",
        "id": 158102025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961686
    },
    {
        "content": "<p>I guess the analogue is \"guess the linear map whose function part is <code>id</code>\"</p>",
        "id": 158102033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961703
    },
    {
        "content": "<p>exactly</p>",
        "id": 158102050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549961717
    },
    {
        "content": "<p>this is what I understood in Amsterdam anyway</p>",
        "id": 158102053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549961725
    },
    {
        "content": "<p>and we can still ask Assia or Cyril, they would be delighted to help</p>",
        "id": 158102057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549961739
    },
    {
        "content": "<p>but that's not nearly as common a problem as \"guess the group whose type is <code>int</code>\"</p>",
        "id": 158102060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961741
    },
    {
        "content": "<p>because here we will usually be specifying the linear maps directly rather than talking about lambdas</p>",
        "id": 158102114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961776
    },
    {
        "content": "<p>I guess it would mean that we can still write <code>id</code>, instead of writing <code>group_hom.id</code></p>",
        "id": 158102153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961855
    },
    {
        "content": "<p>you may be able to, depends on how well the disambiguation goes</p>",
        "id": 158102220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961885
    },
    {
        "content": "<p>I would be inclined to protect <code>group_hom.id</code> and just say that</p>",
        "id": 158102235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961920
    },
    {
        "content": "<p>or maybe use a local notation for it</p>",
        "id": 158102240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961929
    },
    {
        "content": "<p>Meh, ain't that ugly?</p>",
        "id": 158102251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961940
    },
    {
        "content": "<p>Well... we'll see.</p>",
        "id": 158102266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961951
    },
    {
        "content": "<p>I wouldn't mind trying uni-hints</p>",
        "id": 158102270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549961959
    },
    {
        "content": "<p>it is, but having <code>id</code> overloaded usually just means you can't use either one</p>",
        "id": 158102273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549961964
    },
    {
        "content": "<p>like when I typed <code>quotient</code> in your proof it complained about the overload, I had to write <code>quotient_group.quotient</code> (or <code>_root_.quotient</code> if I wanted the other one)</p>",
        "id": 158102355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549962038
    },
    {
        "content": "<p>In a lot of cases you can circumvent this with projection notation</p>",
        "id": 158102394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549962082
    },
    {
        "content": "<p>like <code>ideal.quotient</code> means you can write <code>I.quotient</code> where <code>I : ideal A</code></p>",
        "id": 158102409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549962102
    },
    {
        "content": "<p>ok so what do we want to bundle?</p>",
        "id": 158117674,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549978682
    },
    {
        "content": "<p>can we come up with an explicit list?</p>",
        "id": 158117707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549978689
    },
    {
        "content": "<p>all morphisms between algebraic structures</p>",
        "id": 158117727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549978723
    },
    {
        "content": "<p>that's not an explicit list</p>",
        "id": 158117746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549978743
    },
    {
        "content": "<p>whether we also want to touch topology, I don't know. Let's wait to hear the opinion of <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 158117750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549978745
    },
    {
        "content": "<p>should I test it on <code>is_field_hom</code>?</p>",
        "id": 158117758,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549978757
    },
    {
        "content": "<p><code>is_{,add_}group_hom</code>, <code>is_ring_hom</code></p>",
        "id": 158117769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549978775
    },
    {
        "content": "<p><code>is_{,add_}monoid_hom</code>, similar for <code>semigroup</code>s</p>",
        "id": 158117833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549978812
    },
    {
        "content": "<blockquote>\n<p>whether we also want to touch topology, I don't know. Let's wait to hear the opinion of <span class=\"user-mention silent\" data-user-id=\"110032\">@Reid Barton</span></p>\n</blockquote>\n<p>My only question about bundling functions with their properties is what the plan is for when we want to combine properties. For example, take continuous homomorphisms between topological groups.</p>",
        "id": 158121725,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549982331
    },
    {
        "content": "<p>FYI: I changed the topic of this discussion.</p>",
        "id": 158121872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549982455
    },
    {
        "content": "<p>Can we use unification hints for this? I.e. so I can use group him lemmas for ring homs etc.</p>",
        "id": 158122386,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549982838
    }
]