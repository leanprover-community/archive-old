[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- rwa is_ideal.neg_iff at h,</span>\n  <span class=\"n\">rwa</span> <span class=\"bp\">@</span><span class=\"n\">is_ideal</span><span class=\"bp\">.</span><span class=\"n\">neg_iff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">N</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Why can't I use the first line?</p>",
        "id": 135313777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538835300
    },
    {
        "content": "<p>Looks like it makes that lemma unusable</p>",
        "id": 135313787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538835349
    },
    {
        "content": "<p>Recall <code>lemma neg_iff {S : set α} [is_ideal S] : a ∈ S ↔ -a ∈ S := ⟨is_submodule.neg, λ h, neg_neg a ▸ is_submodule.neg h⟩</code></p>",
        "id": 135313830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538835369
    },
    {
        "content": "<p>The set should be explicit. I'm not sure why it happens, but it's the same with <code>rw</code>s for <code>is_group_hom</code>, the function that is a <code>group_hom</code> needs to be given explicitly.</p>",
        "id": 135313839,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538835456
    },
    {
        "content": "<p>So you suggest modifying the binder in the statement of the lemma?</p>",
        "id": 135313939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538835652
    },
    {
        "content": "<p>Maybe it's because <code>a ∈ S</code> is really just <code>S a</code>, that is, a variable function applied to a variable argument. Lean is probably unwilling to try to guess both the function and the argument.</p>",
        "id": 135314381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538836596
    },
    {
        "content": "<p>But it shouldn't be unfolding this at all, right?</p>",
        "id": 135314387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538836626
    },
    {
        "content": "<p>Yeah that part I am not sure about.</p>",
        "id": 135314392,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538836637
    }
]