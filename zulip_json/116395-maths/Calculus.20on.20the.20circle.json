[
    {
        "content": "<p>For one-dimensional domains, derivatives are just values. Because this special case is so important, we have a dedicated API for it. E.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv\">docs#deriv</a> essentially specialises <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fderiv\">docs#fderiv</a> to the case <code>E = ùïú</code>.</p>\n<p>However there is arguably one more important special case for which we do not have a dedicated API, namely the circle. It would be pretty easy to create one, starting perhaps like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.add_circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_circle.exists_rep</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">add_circle</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">add_circle</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient.exists_rep</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">quotient_add_group.left_rel</span> <span class=\"bp\">$</span> <span class=\"n\">add_subgroup.zmultiples</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_cderiv_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">add_circle</span> <span class=\"n\">p</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">add_circle</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"bp\">$</span> <span class=\"n\">add_circle.exists_rep</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cderiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">add_circle</span> <span class=\"n\">p</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">add_circle</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"bp\">$</span> <span class=\"n\">add_circle.exists_rep</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305005742,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666200579
    },
    {
        "content": "<p>I just spent a few minutes considering whether such an API should be built and I decided <strong>no</strong> because the gap between <code>cderiv</code> (defined above) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv\">docs#deriv</a> is much smaller than between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv\">docs#deriv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fderiv\">docs#fderiv</a>.</p>",
        "id": 305005809,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666200601
    },
    {
        "content": "<p>There's also manifold-differentiability -- once we get around to putting a manifold structure on free quotients by discrete groups, which shouldn't be too bad.</p>",
        "id": 305006011,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666200650
    },
    {
        "content": "<p>Still, I thought I'd make this remark publicly in case anyone else had thoughts on the matter. The circle does come up a lot (Fourier series, Cauchy integrals) and it would be handy to have something like this.</p>",
        "id": 305006043,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666200660
    },
    {
        "content": "<p>You're too fast for me: treating it as a manifold was to be my last remark.</p>",
        "id": 305006202,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666200704
    }
]