[
    {
        "content": "<p>Whatever's going on here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"c1\">-- real numbers</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Sht2Question5a</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ x + (2 - x) = 2</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- nothing happened?</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- normal service resumed, goal closed</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>If I'd not tried this out beforehand then I would have looked very silly in front of 300 people.</p>",
        "id": 177596666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570526594
    },
    {
        "content": "<p>Even with pp.all true I cannot figure out the problem. The first <code>ring</code> seems to not change the tactic state at all.</p>",
        "id": 177596747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570526663
    },
    {
        "content": "<p><code>example (x : ℝ) : x + (2 - x) = 2 := by ring</code> works fine</p>",
        "id": 177596765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570526691
    },
    {
        "content": "<p>I think <code>use</code> is leaving uninstantiated metavars in the goal. The first <code>ring</code> call is instantiating them but doing nothing else, then the second finishes the job.</p>",
        "id": 177597142,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570527078
    },
    {
        "content": "<p><code>existsi</code> instead of <code>use</code> works.</p>",
        "id": 177597146,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570527089
    },
    {
        "content": "<p>I thought <code>use</code> would be the culprit. I was surprised the metavars didn't manifest themselves in some way in the tactic state though.</p>",
        "id": 177597285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570527207
    },
    {
        "content": "<p>Thanks Rob.</p>",
        "id": 177597288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570527211
    },
    {
        "content": "<p>I don't see anything suspicious in <code>use</code> that would cause this. It's basically just a wrapper around <code>refine</code> and <code>fconstructor</code>. It feels a little hackish to just make <code>use</code> clean up the goal afterward, but I'm not sure how else to fix it.</p>",
        "id": 177597798,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570527704
    },
    {
        "content": "<p>Is there a \"clean up metavars in the goal\" tactic already? Something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">fix_goal</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">instantiate_mvars</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">change</span>\n</pre></div>",
        "id": 177597853,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570527727
    },
    {
        "content": "<blockquote>\n<p>I thought <code>use</code> would be the culprit. I was surprised the metavars didn't manifest themselves in some way in the tactic state though.</p>\n</blockquote>\n<p>The pretty printer instantiates metavars by default, you can disable it with <code>set_option pp.instantiate_mvars false</code> to see what's happening.</p>",
        "id": 177598135,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570528002
    },
    {
        "content": "<p>Hmm, maybe it's not so hackish. The alternative is asking <code>ring</code> to clean up the goal before it starts. I'm not sure there's a well-defined policy on whose job it is to instantiate metavars. Some tactics don't care if they're present, but it matters for things like <code>ring</code> that look at the structure of the target expression.</p>",
        "id": 177599246,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570529031
    },
    {
        "content": "<p>All this under-the-hood stuff that I as a non-meta person have very little understanding of. Still so much to learn!</p>",
        "id": 177604411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570534281
    },
    {
        "content": "<p>It's actually pretty simple to understand in this case. You're starting with one goal <code>∃ n : T, P n</code>. <code>use</code> begins by splitting this into two goals. The first goal is <code>T</code>, the second is to show that <code>P</code> holds of whatever value of <code>T</code> you give in the first goal. This missing value is represented with a metavariable <code>?m</code>. When you solve the first goal with <code>k : T</code> the metavariable gets assigned to <code>k</code>. For anything working \"up to defeq,\" the second goal is <code>P k</code>. But syntactically it's still <code>P ?m</code>, which confuses <code>ring</code>.</p>",
        "id": 177605126,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570534995
    },
    {
        "content": "<p>This sound like it's definitely <code>use</code>s job to clean up after itself... <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 177605231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570535071
    },
    {
        "content": "<p>If you were just solving the second goal by applying a proof of <code>P k</code>, it wouldn't matter.</p>",
        "id": 177605238,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570535087
    },
    {
        "content": "<p>Has this turned into a pull request?</p>",
        "id": 177605691,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570535595
    },
    {
        "content": "<p>Oh damn it was like 10mins ago</p>",
        "id": 177605694,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570535602
    },
    {
        "content": "<p>Heh. The PR should be adding </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">fix_goal</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">instantiate_mvars</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">change</span>\n</pre></div>\n\n\n<p>and applying it to all goals after a successful application of <code>use</code>.</p>",
        "id": 177605810,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570535705
    },
    {
        "content": "<p>Do you understand why <code>existsi</code> doesn't have this issue?</p>",
        "id": 177605827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570535741
    },
    {
        "content": "<p>It also might not be a bad idea to make <code>ring</code> instantiate mvars in the goal before it starts.</p>",
        "id": 177605828,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570535742
    },
    {
        "content": "<p>I find it very annoying that sometimes <code>use</code> doesn't work while <code>existsi</code> works. It means we have to keep both in our heads.</p>",
        "id": 177605885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570535771
    },
    {
        "content": "<p>I may be partly guilty, because I was on the side which pushed for <code>use</code> to try to close stupid goals after doing its main job. But I changed my mind. Now I'm ready to sacrifice this in favor or reliability and getting rid of <code>existsi</code> entirely.</p>",
        "id": 177605957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570535880
    },
    {
        "content": "<p>Unlike <code>use</code>, <code>existsi t</code> doesn't create any new goals under the hood. It's possible to hit this same problem with <code>existsi</code> too:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">Sht2Question5a&#39;</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177606035,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570535962
    },
    {
        "content": "<p>Assuming this issue with <code>use</code> is fixed, what are the other problems?</p>",
        "id": 177606059,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570536000
    },
    {
        "content": "<p><code>use</code> is somewhat more general than <code>existsi</code> because it supports things like this:</p>",
        "id": 177606186,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570536081
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"c1\">-- good</span>\n  <span class=\"c1\">-- existsi [1, 2] -- fails</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">2 goals</span>\n<span class=\"cm\">⊢ ℕ</span>\n\n<span class=\"cm\">⊢ true-/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177606189,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570536085
    },
    {
        "content": "<p>I'll try to grep for <code>existsi</code> in the perfectoid project, and see if I can get a minimized version</p>",
        "id": 177606208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570536110
    },
    {
        "content": "<p>So long as there aren't really any core tactics which are big metavariable offenders, it seems reasonable to me that a convention to clean up after yourself is optimal. On the other hand, unless tactics are being called automatically (as in by another tactic lots of times), probably <code>instantiate_mvars</code> can't be thaaat expensive to pointlessly run?</p>\n<p>Oh, but I see your example makes <code>existsi</code> mess up <code>ring</code>. Gotcha.</p>",
        "id": 177607468,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570537247
    },
    {
        "content": "<p>Yeah, the problem is it's not always possible to clean up, as in the <code>existsi</code> example. I think it's reasonable to ask interactive tactics to clean up as much as they can. But that's not a guarantee.</p>",
        "id": 177607917,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570537586
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1520\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1520\">https://github.com/leanprover-community/mathlib/pull/1520</a></p>",
        "id": 177618503,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570543878
    },
    {
        "content": "<p>Did you try to figure out the performance impact on ring?</p>",
        "id": 177618626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570543923
    },
    {
        "content": "<p>It should be negligible.</p>",
        "id": 177618902,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570544070
    },
    {
        "content": "<p>I guess it'd be <code>O(number of verts in the expression tree)</code> if the number of metavariables is low, and there are some pretty cray cray typeclass-related expression traces, but probably not in a goal <code>ring</code> should eat I guess.</p>",
        "id": 177619714,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570544481
    },
    {
        "content": "<p>The calls to <code>instantiate_mvars_in_target</code> take at most half a millisecond each. I'll keep going and see if there are any weird long ones, but I bet this adds under half a second total.</p>",
        "id": 177621486,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570545257
    },
    {
        "content": "<p>It does actually add a few ms to <code>complex.exp_add</code>.</p>",
        "id": 177621941,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570545468
    },
    {
        "content": "<p>Oh I need to look at this thread again later, but this is very interesting. I've seen the <code>ring, ring</code> thing before and I never imagined it could be the fault of something other than <code>ring</code> itself</p>",
        "id": 177626551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570548102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- by ring -- I think this used to work but now it doesn&#39;t</span>\n<span class=\"k\">by</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</pre></div>\n\n\n<p>Did <code>ring</code> change as a result of this conversation and now this? Or was this some other change? A project which I'm pretty sure used to compile now no longer does.</p>",
        "id": 177982825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570877504
    },
    {
        "content": "<p>Similarly <code>lam n, [a thing] = lam n, [a thing which ring can prove is equal]</code> can no longer be closed by <code>ring</code>. Am I just behind the times? If this is a design decision I'm fine.</p>",
        "id": 177982938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570877656
    },
    {
        "content": "<p>I don't think that was ever supposed to work</p>",
        "id": 177983048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570877863
    },
    {
        "content": "<p><code>ring</code> will rewrite in subterms if it isn't facing an equality of rings, but that's mostly for viewing purposes so you know why <code>ring</code> isn't working</p>",
        "id": 177983105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570877919
    },
    {
        "content": "<p>OK then no worries. I have an old project written before update-mathlib and I bumped mathlib to get update-mathlib working and it broke the project.</p>",
        "id": 177983108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570877924
    },
    {
        "content": "<p>All the fixes are easy. I neither know nor care why it broke.</p>",
        "id": 177983119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570877945
    },
    {
        "content": "<p>I would actually expect in the <code>abs</code> example that <code>ring</code> sees it as two atoms and tries to prove <code>x = y</code></p>",
        "id": 177983125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570877972
    }
]