[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span>, would it make sense to allow <code>P</code> to be empty in <code>add_torsor G P</code>. This is currently impossible due to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_torsor.nonempty\">docs#add_torsor.nonempty</a>. In fact, this instance is dangerous as it loops with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_subspace.add_torsor\">docs#affine_subspace.add_torsor</a> and, as noted by <span class=\"user-mention\" data-user-id=\"221653\">@Paul Reichert</span>, this means not all affine subspaces are add torsors.</p>",
        "id": 296804798,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662120252
    },
    {
        "content": "<p>It wouldn't make sense from a mathematical point of view, at least for the usual notion: an <code>add_torsor G P</code> is supposed to be a copy of <code>G</code> in which you have forgotten the identity.</p>",
        "id": 296805575,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1662120556
    },
    {
        "content": "<p>My guess is that the main effect would be to move around where <code>nonempty</code> hypotheses are needed. I ran into that dangerous instance recently in <a href=\"https://github.com/leanprover-community/mathlib/pull/16339\">#16339</a>, but my best guess as to the right way to avoid the typeclass loop would have been \"make <code>[nonempty P]</code> an argument to <code>add_torsor</code>\" rather than \"remove the <code>nonempty</code> requirement\".</p>",
        "id": 296807712,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1662121253
    },
    {
        "content": "<p>It might be useful to have a class <code>add_pseudo_torsor</code>, lacking the nonzero requirement. There are a lot of properties holding for pseudo-torsors and they have the nice property that there is a well-defined closure operator -- even the empty set has a well-defined closure.<br>\nHowever, it seems hard to tell Lean something like \"an <code>add_torsor</code> is an <code>add_pseudo_torsor</code> with a <code>nonzero</code> instance\" without producing a loop because we can produce <code>add_torsor</code> instances from <code>add_pseudo_torsor</code>instances and vice versa. Are there some \"tricks\" to avoid this problem, and is this even a sensible approach?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">add_pseudo_torsor</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_action</span> <span class=\"n\">G</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">has_vsub</span> <span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vsub_vadd'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">p1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">vadd_vsub'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">add_torsor</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_pseudo_torsor</span> <span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nonempty_pseudo_torsor</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_pseudo_torsor</span> <span class=\"n\">G</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">add_torsor</span> <span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"n\">nolint</span> <span class=\"n\">dangerous_instance</span><span class=\"o\">]</span> <span class=\"n\">add_torsor.nonempty</span>\n\n<span class=\"c1\">-- maximum class-instance resolution depth reached</span>\n<span class=\"kd\">instance</span> <span class=\"n\">add_group_is_add_torsor</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_torsor</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">vsub</span> <span class=\"o\">:=</span> <span class=\"n\">has_sub.sub</span><span class=\"o\">,</span>\n  <span class=\"n\">vsub_vadd'</span> <span class=\"o\">:=</span> <span class=\"n\">sub_add_cancel</span><span class=\"o\">,</span>\n  <span class=\"n\">vadd_vsub'</span> <span class=\"o\">:=</span> <span class=\"n\">add_sub_cancel</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 296818499,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1662124781
    },
    {
        "content": "<p>For example, I'd like to tell Lean \"don't worry; you already know the <code>add_pseudo_torsor</code> instance obtained from the <code>add_torsor</code> instance obtained from the <code>add_pseudo_torsor</code> instance and so you can ignore it\"</p>",
        "id": 296818882,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1662124919
    },
    {
        "content": "<p>Following preprime and preconnected it should perhaps be called pretorsor.</p>",
        "id": 296827204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662127450
    },
    {
        "content": "<p>If we have a class of pretorsors I'd be inclined not to have a separate one for torsors; just add <code>nonempty</code> hypotheses to the few lemmas or definitions that genuinely need a torsor not a pretorsor and where <code>nonempty</code> can't be deduced from the other hypotheses.</p>",
        "id": 296831273,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1662128835
    },
    {
        "content": "<p>Okay, this post is already outdated, but for reference:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/tree/pseudo_torsor\">This branch</a> is a proof of concept of the approach. I made the above-mentioned instance a <code>def</code> to avoid the problems. The build succeeded but this approach would introduce a new kind of boilerplate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_pseudo_torsor</span> <span class=\"n\">G</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_pseudo_torsor</span> <span class=\"n\">G'</span> <span class=\"n\">P'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_pseudo_torsor</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">×</span> <span class=\"n\">P'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v.1</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">v.2</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p.2</span><span class=\"o\">),</span>\n  <span class=\"n\">zero_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_vadd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_vadd</span><span class=\"o\">],</span>\n  <span class=\"n\">vsub</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p₁.1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p₂.1</span><span class=\"o\">,</span> <span class=\"n\">p₁.2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p₂.2</span><span class=\"o\">),</span>\n  <span class=\"n\">vsub_vadd'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p₁.1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p₂.1</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p₂.1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p₁</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">vadd_vsub'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">v.1</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p.1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">v.2</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p.2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p.2</span><span class=\"o\">)</span>  <span class=\"bp\">=</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_torsor</span> <span class=\"n\">G</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_torsor</span> <span class=\"n\">G'</span> <span class=\"n\">P'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_torsor</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">×</span> <span class=\"n\">P'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"n\">prod.nonempty</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If this is the way to go, I'd have to look for required <code>add_torsor</code> instances throughout mathlib and relax them to <code>add_pretorsor</code> instances.</p>",
        "id": 296832708,
        "sender_full_name": "Paul A. Reichert",
        "timestamp": 1662129316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/116395-maths/topic/Empty.20torsors/near/296831273\">said</a>:</p>\n<blockquote>\n<p>If we have a class of pretorsors I'd be inclined not to have a separate one for torsors; just add <code>nonempty</code> hypotheses to the few lemmas or definitions that genuinely need a torsor not a pretorsor and where <code>nonempty</code> can't be deduced from the other hypotheses.</p>\n</blockquote>\n<p>Yes, this seems also reasonable; at the same time, I understand concerns that torsors are just a bit more familiar for mathematicians than pretorsors. Let me just emphasize that this is just a proposal, we can also reject the whole <code>pretorsor</code> thing if it turns out to complicate things.</p>",
        "id": 296833190,
        "sender_full_name": "Paul A. Reichert",
        "timestamp": 1662129460
    },
    {
        "content": "<p>From a purely hierarchy design point of view, it would be cleaner to not make <code>nonempty P</code> a field of <code>add_torsor</code>.</p>",
        "id": 296902757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662156508
    },
    {
        "content": "<p>Just to be clear, if you're saying \"in Lean torsors should be allowed to be empty\" then torsors are nonempty by definition and you can't change that (like you can't decide that 1 is going to be prime in Lean). But if you're saying something else then sorry I misunderstood :-)</p>",
        "id": 296902937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662156600
    },
    {
        "content": "<p>I'm saying that maybe the way to say \"<code>P</code> is a torsor\" should be <code>[add_torsor G P] [nonempty P]</code> rather than <code>[add_torsor G P]</code>.</p>",
        "id": 296903243,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662156740
    },
    {
        "content": "<p>Even though that's not what I'm arguing about, <code>univ</code> isn't a filter but we still made it one in Lean <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 296903332,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662156799
    },
    {
        "content": "<p>In the real world, <code>univ</code> isn't a filter for the exact same reason that <code>⊤</code> isn't an ideal. Yet we made <code>⊤</code> an ideal in Lean anyway. /s</p>",
        "id": 296942698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662182391
    },
    {
        "content": "<p>The difference here is that it is known that mathematicians in the literature have two opinions on what a filter is, like they have two opinions on what the natural numbers are. As far as I know they only have one opinion on what a torsor is, like they only have one opinion on what a prime number is</p>",
        "id": 296947918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662187390
    }
]