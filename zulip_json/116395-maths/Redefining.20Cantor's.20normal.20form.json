[
    {
        "content": "<p>Right now, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.CNF\">docs#ordinal.CNF</a> has very little API. I presume a lot of the reason is the particularly odd data structure used, a list of pairs of ordinals.</p>",
        "id": 283323880,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653314915
    },
    {
        "content": "<p>Having a list instead of a set is a nice way to represent finiteness, but I think there's better approaches</p>",
        "id": 283323954,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653314949
    },
    {
        "content": "<p>I was thinking defining Cantor normal form as a finitely supported function from ordinals to nat. This would ditch support for bases other than w, but those are exceedingly rare anyways, and the w case has a lot more properties than the others.</p>",
        "id": 283324148,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653315031
    },
    {
        "content": "<p>One very nice advantage is that by doing this, we can state CNF (a # b) = CNF a + CNF b. This could probably be used to golf a bunch of lemmas on natural addition later down the line.</p>",
        "id": 283324259,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653315088
    },
    {
        "content": "<p>I don't know if lexicographic ordering is defined on finitely supported functions, but if it is, then we could also prove a &lt; b \\iff CNF a &lt; CNF b</p>",
        "id": 283324387,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653315137
    },
    {
        "content": "<p>We might even be able to define a polynomial-like multiplication in order to state the result on the Cantor normal form of the natural multiplication</p>",
        "id": 283324644,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653315252
    },
    {
        "content": "<p>Oh and also, we'd get an extensionality lemma from this</p>",
        "id": 283325540,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653315616
    },
    {
        "content": "<p>If CNF a i = CNF b i for all i, then a = b</p>",
        "id": 283325617,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653315649
    },
    {
        "content": "<p>I'm interested in <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s opinion (I presume he was the one who made the current CNF definition)</p>",
        "id": 283326189,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653315921
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/pi/lex.html\">https://leanprover-community.github.io/mathlib_docs/data/pi/lex.html</a></p>",
        "id": 283336696,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653320217
    },
    {
        "content": "<p>No, that's not it. I mean lexicographic order as in dictionary order.</p>",
        "id": 283337059,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320375
    },
    {
        "content": "<p><code>(1, 2, 3) &gt; (1, 1000, 2)</code></p>",
        "id": 283337153,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320407
    },
    {
        "content": "<p>Yeah, that's exactly what <code>pi.lex</code> does.</p>",
        "id": 283337185,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653320423
    },
    {
        "content": "<p>Ah, really?</p>",
        "id": 283337209,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320439
    },
    {
        "content": "<p>Oh wow</p>",
        "id": 283337222,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320447
    },
    {
        "content": "<p>Yeah. The definition reads \"<code>x</code> and <code>y</code> agree up to some point, and <code>x i &lt; y i</code>at that point\".</p>",
        "id": 283337271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653320471
    },
    {
        "content": "<p>Do we have this on <code>finsupp</code> though?</p>",
        "id": 283337310,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320486
    },
    {
        "content": "<p>No but I can cook it for you if needed.</p>",
        "id": 283337343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653320500
    },
    {
        "content": "<p>That would be much appreciated!</p>",
        "id": 283337461,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320534
    },
    {
        "content": "<p>Are you sure you want it, though? Can you not use <code>to_lex ⇑f ≤ to_lex ⇑g</code> directly?</p>",
        "id": 283337504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653320554
    },
    {
        "content": "<p>Oh</p>",
        "id": 283337534,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320569
    },
    {
        "content": "<p>That's probably a better idea</p>",
        "id": 283337551,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320575
    },
    {
        "content": "<p>You may be able to get the ring structure as a subring of <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/hahn_series.html\">https://leanprover-community.github.io/mathlib_docs/ring_theory/hahn_series.html</a></p>\n<p>I'd like to keep the general base, but maybe change one coordinate to the subtype of ordinals less than the base, then when the base is omega you can use the equiv between the subtype and N.</p>",
        "id": 283337866,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653320721
    },
    {
        "content": "<p><code>hahn_series</code> can have infinite support though, can't they?</p>",
        "id": 283338054,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320798
    },
    {
        "content": "<p>Also, the pseudo-polynomial multiplication on Cantor normal forms is a bit subtler, since you need to add the exponents via natural addition. So I don't think that's going to help much</p>",
        "id": 283338147,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320854
    },
    {
        "content": "<p>I don't like the idea of a general base, since it introduces a lot of complexity we just don't care about most of the time. Like having to use the conversion between <code>ω.out.α</code> and <code>ℕ</code>, and having to consistently exclude degenerate bases like 1 or 0.</p>",
        "id": 283338366,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653320948
    },
    {
        "content": "<p>Yes, so I said \"subring\". But maybe monoid_algebra works</p>",
        "id": 283338389,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653320960
    },
    {
        "content": "<p>I guess we could just have the API specialized for the <code>ω</code> case when appropriate, though</p>",
        "id": 283338541,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653321022
    },
    {
        "content": "<p>maybe add_monoid_algebra nat_ordinal</p>",
        "id": 283338560,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653321034
    },
    {
        "content": "<p>Hmm... that seems reasonable actually</p>",
        "id": 283338690,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653321104
    },
    {
        "content": "<p>I guess you could develop new API and don't replace the old one if the new one less general</p>",
        "id": 283338957,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653321231
    },
    {
        "content": "<p>Actually, I think non-<code>ω</code> bases might introduce further problem if we follow this approach, since the ordinals lesser than another are generally not closed under addition</p>",
        "id": 283339019,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653321247
    },
    {
        "content": "<p>Well, it's not like we make much use of the current API anyways</p>",
        "id": 283339055,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653321271
    },
    {
        "content": "<p>The few results below <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.CNF\">docs#ordinal.CNF</a> are all we have</p>",
        "id": 283339106,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653321297
    },
    {
        "content": "<p>And even if there's really any use for non-<code>ω</code> bases, I still think we should redefine what we currently have</p>",
        "id": 283339212,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653321351
    },
    {
        "content": "<p>maybe rename the original to CNFb, in analogy to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.logb\">docs#real.logb</a></p>",
        "id": 283340603,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653321943
    },
    {
        "content": "<p>log with base omega is really \"natural\" log!</p>",
        "id": 283340716,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653321983
    },
    {
        "content": "<blockquote>\n<p>Actually, I think non-<code>ω</code> bases might introduce further problem if we follow this approach, since the ordinals lesser than another are generally not closed under addition </p>\n</blockquote>\n<p>Maybe they are closed under addition iff the ordinal is of the form alpha*omega, and under multiplication iff it's of the form alpha^omega? I think I can show the if direction.</p>",
        "id": 283341911,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1653322539
    },
    {
        "content": "<p>I actually already proved which ordinals are closed under addition and multiplication</p>",
        "id": 283343371,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323219
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.principal_add_iff_zero_or_omega_opow\">docs#ordinal.principal_add_iff_zero_or_omega_opow</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.principal_mul_iff_le_two_or_omega_opow_opow\">docs#ordinal.principal_mul_iff_le_two_or_omega_opow_opow</a></p>",
        "id": 283343553,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323297
    },
    {
        "content": "<p>omega^omega is closed under addition but not of the form a * omega</p>",
        "id": 283343812,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323404
    },
    {
        "content": "<p>I do prove in that same file a * omega is either 0 or a power of omega, so the if direction is true</p>",
        "id": 283343849,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323419
    },
    {
        "content": "<p>Even then, turning a principal ordinal into an additive monoid seems like a hard thing to set up</p>",
        "id": 283343957,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323467
    },
    {
        "content": "<p>If we can't provide this polynomial structure on general Cantor normal forms, I think defining them as finsupp might be the best approach</p>",
        "id": 283344219,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323576
    },
    {
        "content": "<p>We could then provide glue between the general Cantor normal form and the one for omega</p>",
        "id": 283344248,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323592
    },
    {
        "content": "<p>... Although, I don't think the definition of CNF should depend on nat_ordinal</p>",
        "id": 283344498,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323705
    },
    {
        "content": "<p>Perhaps we can define it as a finsupp always, and then, in order to prove the theorem about the CNF of natural multiplication, we make another definition with this extra structure</p>",
        "id": 283344598,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323752
    },
    {
        "content": "<p>Because treating the CNF as a polynomial is a really niche thing you really only do to state those two theorems on natural operations</p>",
        "id": 283345024,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653323940
    },
    {
        "content": "<p>Yeah, I think defining CNFb and CNF as finsupps with a bit of glue between both is the best approach</p>",
        "id": 283345721,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653324235
    },
    {
        "content": "<p>I don't think the existing definition should be changed, but you are free to add another definition if you like, and possibly rename the original one if the new definition is significantly more useful</p>",
        "id": 283678837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653348962
    },
    {
        "content": "<p>in particular I don't think it would be a good idea to drop support for other bases. It's not like other bases can be written in terms of the omega-logarithm, so the analogy with ln doesn't really hold up</p>",
        "id": 283678931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653349027
    },
    {
        "content": "<p>If there are theorems that only hold for omega, well then state them using <code>CNF omega</code>, I don't really see the issue</p>",
        "id": 283679343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653349350
    },
    {
        "content": "<p>Hmm, I found a problem with the finsupp definition. I can't use <code>finsupp.sum</code> because ordinal addition isn't commutative</p>",
        "id": 283689791,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653358466
    },
    {
        "content": "<p>Is there an ordered version of that?</p>",
        "id": 283689807,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653358472
    },
    {
        "content": "<p>Doesn't seem to be</p>",
        "id": 283690441,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653359285
    },
    {
        "content": "<p>Well, I guess that's the end of that idea</p>",
        "id": 283690442,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653359292
    },
    {
        "content": "<p>Perhaps I should keep the current definition, which allows us to state results like \"the sum of the terms in the normal form is the ordinal\", but also define a <code>finsupp</code> in terms of it, which makes it easier to refer to specific coefficients and allows us to state theorems like when a CNF is less than another</p>",
        "id": 283690474,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653359389
    },
    {
        "content": "<p>Yeah you know, working with <code>CNF</code>, I'm beginning to see its virtues</p>",
        "id": 283693983,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653363358
    },
    {
        "content": "<p>I do still think it's missing a huge amount of API</p>",
        "id": 283693984,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653363359
    },
    {
        "content": "<p>I think what is there is everything I needed / everything I could think of, so if you have more ideas feel free to extend it</p>",
        "id": 283696522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653366680
    },
    {
        "content": "<p>in particular a coefficient extraction function sounds like a good idea</p>",
        "id": 283696530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653366697
    },
    {
        "content": "<p>Here's some missing theorems I've found, modulo exceptions with small bases: </p>\n<ul>\n<li>every term in the CNF is less or equal to the ordinal</li>\n<li>the terms are decreasing (not just the exponents)</li>\n<li>if (x, y) belongs to the CNF of o, then o / b ^ x % b = y, and viceversa for positive y</li>\n</ul>",
        "id": 283698581,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369372
    },
    {
        "content": "<p>I want the last theorem in order to code the coefficient extraction function</p>",
        "id": 283698603,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369420
    },
    {
        "content": "<p>Of course, these are just basic theorems. It would be nice to eventually have lemmas on how the normal form interacts with the ordinal operations</p>",
        "id": 283698620,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369447
    },
    {
        "content": "<p>the last one doesn't sound right</p>",
        "id": 283698706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653369534
    },
    {
        "content": "<p>Sorry, fixed</p>",
        "id": 283698717,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369556
    },
    {
        "content": "<p>Ah yeah that's better</p>",
        "id": 283698725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653369579
    },
    {
        "content": "<p>I also believe there should be some induction theorem to prove something about all entries of a CNF (CNF_rec inducts on ordinals, I want something more direct). I bet this could be used to golf a bunch of the proofs</p>",
        "id": 283698738,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369583
    },
    {
        "content": "<p>Can't quite figure out what this induction principle would be, though</p>",
        "id": 283698784,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369607
    },
    {
        "content": "<p>I'm not sure what you mean</p>",
        "id": 283698785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653369609
    },
    {
        "content": "<p>what kind of constructs do you expect in the induction statement?</p>",
        "id": 283698802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653369643
    },
    {
        "content": "<p>I mean it's obviously defined by recursive application of <code>^</code> and <code>%</code> so an induction principle that says as much wouldn't be hard</p>",
        "id": 283698828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653369685
    },
    {
        "content": "<p>Something like \"if when a proposition holds for all entries of CNF b (o / b ^ log b o), it also holds for all entries of CNF b o, then it holds for all entries of a CNF\"</p>",
        "id": 283698837,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369710
    },
    {
        "content": "<p>Again, I'm not quite sure if this is how the induction principle would work</p>",
        "id": 283698879,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369727
    },
    {
        "content": "<p>Maybe I'm just confused on this one</p>",
        "id": 283698889,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653369764
    },
    {
        "content": "<p>Yeah nevermind, I saw a few similar proofs and thought there was some induction principle where there was none</p>",
        "id": 283699575,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653370692
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14347\">#14347</a></p>",
        "id": 283703281,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653374754
    },
    {
        "content": "<p>I did some cleanup and proved a few extra statements</p>",
        "id": 283703347,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653374779
    },
    {
        "content": "<p>I mentioned that potential induction principle on the PR description, maybe you can figure out if I'm actually onto something</p>",
        "id": 283703488,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653374995
    },
    {
        "content": "<p>Oh here's some more useful theorems</p>",
        "id": 283785801,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653416351
    },
    {
        "content": "<p>The CNF is divisible by the base to the power of the last exponent</p>",
        "id": 283785844,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653416380
    },
    {
        "content": "<p>And CNF b o = CNF b (o / b ^ x * b ^ x) ++ CNF b (o % b ^ x)</p>",
        "id": 283785933,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653416412
    },
    {
        "content": "<p>Oh and of course, there should also be a lemma for CNF b (o * b ^ x)</p>",
        "id": 283789483,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653418195
    },
    {
        "content": "<p>Actually, we should probably have the lemma <code>CNF b (a * b ^ x + c) = (CNF b a).map (\\lam p, \\&lt;p.1 + x, p.2\\&gt;) ++ CNF b c</code> generalizing both</p>",
        "id": 283791755,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653419220
    }
]