[
    {
        "content": "<p>We have <code>1</code> all over maths.<br>\nIn the category_lib we have <code>\\b1</code> for identity morphisms.<br>\n<span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> has a PR that introduces bold-face 1 for <code>functor.id</code>.</p>\n<p>Is this desirable? <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> any thoughts?<br>\nRandom thought: would it be evil to give the functor category an instance of <code>has_one</code>? Then we could just reuse our familiar <code>1</code>...</p>",
        "id": 164994600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557158894
    },
    {
        "content": "<p>I usually use blackboard bold 1 for function 1</p>",
        "id": 164994623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557158931
    },
    {
        "content": "<p>I think I had <code>has_one</code> for the functor category at some point, then removed it again. Unfortunately I don't remember why. Probably it was \"don't have different names for the same thing --- you'll find yourself having to translate unnecessarily\".</p>",
        "id": 165011293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557170951
    },
    {
        "content": "<p>It will probably be bad to make an identity morphism an instance of <code>has_one</code>: I expect that will require every <code>has_one</code> typeclass inference to run though all of the <code>category</code> instances, because maybe the current type is the type of morphisms in some category.</p>",
        "id": 165032282,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557189869
    },
    {
        "content": "<p>For <code>functor.id</code> I don't think this is a problem (<code>real</code> does not unify with <code>functor ?m ?m</code>), so that might work. One potential problem is that we probably want to write <code>1 C : functor C C</code>, with an explicit argument - which we probably cannot do with a <code>has_one</code> instance.</p>",
        "id": 165032331,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557189959
    },
    {
        "content": "<p>I think that's the bigger issue - category 1 needs an explicit argument while regular 1 doesn't</p>",
        "id": 165032394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557190018
    },
    {
        "content": "<p>If that is the biggest issue, we could try making the <code>functor.id</code> argument implicit: often it can be inferred from context.</p>",
        "id": 165032511,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557190200
    },
    {
        "content": "<p>My guess is this won't work in most cases, lean's elaborator isn't designed to handle this</p>",
        "id": 165032600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557190286
    },
    {
        "content": "<p>and also it's introducing another way to write id, which will need normalization to be useful</p>",
        "id": 165032616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557190316
    },
    {
        "content": "<p>My preference would be to have a global notation using some unicode <code>1</code>. There are plenty of them, so it doesn't matter to much that the notation is global.</p>",
        "id": 165032829,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557190599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Are you ok with making boldface 1 a global notation  for <code>functor.id</code>?</p>",
        "id": 165038760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557199626
    },
    {
        "content": "<p>isn't it already?</p>",
        "id": 165038769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557199644
    },
    {
        "content": "<p>No, it's not yet</p>",
        "id": 165038776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557199659
    },
    {
        "content": "<p>well there's double struck 1, is that global?</p>",
        "id": 165038781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557199677
    },
    {
        "content": "<p>Floris is introducing it in a current PR, hence this discussion</p>",
        "id": 165038783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557199678
    },
    {
        "content": "<p>does that work as <a href=\"http://functor.id\" target=\"_blank\" title=\"http://functor.id\">functor.id</a>?</p>",
        "id": 165038833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557199694
    },
    {
        "content": "<p>Yes, that's for id-morphisms</p>",
        "id": 165038834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557199694
    },
    {
        "content": "<p>Nope, it doesn't because functors aren't morphisms atm</p>",
        "id": 165038839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557199713
    },
    {
        "content": "<p>it seems similar to the question of eliminating the nat-trans arrow</p>",
        "id": 165038842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557199717
    },
    {
        "content": "<p>We could build <code>CAT</code> as a 1-category... but that also seems like a hack</p>",
        "id": 165038851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557199736
    },
    {
        "content": "<p>Also, it means that we have to bundle categories... so it actually doesn't work</p>",
        "id": 165038867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557199764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does that justify the introduction of new notation?</p>",
        "id": 165039449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200509
    },
    {
        "content": "<p>Is there a vscode abbreviation for bold 1?</p>",
        "id": 165039508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200543
    },
    {
        "content": "<p>Not yet</p>",
        "id": 165039514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200552
    },
    {
        "content": "<p>then go for it</p>",
        "id": 165039526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 165039538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200584
    },
    {
        "content": "<p>if all else fails you can use emoji 1</p>",
        "id": 165039549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200599
    },
    {
        "content": "<p>Personally I prefer variegated ascii sentinels but you mathematicians like your high unicode</p>",
        "id": 165039612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200668
    },
    {
        "content": "<p>It's just that I'm a bit worried where this will end...</p>",
        "id": 165039707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200790
    },
    {
        "content": "<p>which one? Unicode crazy or ASCII crazy</p>",
        "id": 165039735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200829
    },
    {
        "content": "<p>or just long names</p>",
        "id": 165039739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200839
    },
    {
        "content": "<p>Notation crazy</p>",
        "id": 165039741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200843
    },
    {
        "content": "<p>We write <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">d</mi></mrow><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{id}_C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">d</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> and get on with life</p>",
        "id": 165039749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200865
    },
    {
        "content": "<p>Our brains use the type of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to figure out the rest</p>",
        "id": 165039753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200881
    },
    {
        "content": "<p>Oooh, that's not true</p>",
        "id": 165039800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200890
    },
    {
        "content": "<p>What's wrong with <code>1F</code>?</p>",
        "id": 165039801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200897
    },
    {
        "content": "<p>We use the type of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span> plus all available \"type class instances\"</p>",
        "id": 165039805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200914
    },
    {
        "content": "<p>the problem with bold vs double struck is you can't tell which is which</p>",
        "id": 165039810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200925
    },
    {
        "content": "<p>And whether you can figure those out is part of what makes you a \"knowledgeable reader\"</p>",
        "id": 165039823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200954
    },
    {
        "content": "<p>and I usually get the sense from the mathematician that \"yes that's the point, I want them to be indistinguishable\"</p>",
        "id": 165039828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200967
    },
    {
        "content": "<p>but of course in real use it matters which is which</p>",
        "id": 165039835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557200979
    },
    {
        "content": "<p>They should only be indistinguishable if they really are... I.e. if you type the same thing into VScode</p>",
        "id": 165039843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557200998
    },
    {
        "content": "<p>Otherwise users have to start remembering the differences... and in that case the difference better be self-explanatory</p>",
        "id": 165039896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557201022
    },
    {
        "content": "<p>So that is maybe an argument in favor of <code>1F</code></p>",
        "id": 165039902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557201035
    },
    {
        "content": "<p>Or maybe <code>\\b1 F</code></p>",
        "id": 165039907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557201050
    },
    {
        "content": "<p>they need to be attached to make it one symbol</p>",
        "id": 165039922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557201069
    },
    {
        "content": "<p>Sure</p>",
        "id": 165039924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557201078
    },
    {
        "content": "<p>using fancy unicode at that point serves no purpose</p>",
        "id": 165039930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557201090
    },
    {
        "content": "<p>But I wanted to indicate that it wasn't 1 VScode slash-code</p>",
        "id": 165039938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557201102
    },
    {
        "content": "<p>It does... it shows that it's related to ordinary <code>\\b1</code></p>",
        "id": 165039991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557201124
    },
    {
        "content": "<p>oh, is <code>\\b1</code> the double struck one?</p>",
        "id": 165040006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557201144
    },
    {
        "content": "<p>that's not confusing at all</p>",
        "id": 165040025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557201161
    },
    {
        "content": "<p>So, do we have a suggested way to enter the bold 1 in vscode/emacs?</p>",
        "id": 165377313,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557528231
    }
]