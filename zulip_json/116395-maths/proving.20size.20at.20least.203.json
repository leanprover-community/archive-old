[
    {
        "content": "<p>I would be interested in a relatively slick proof of either of the below examples:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"c1\">-- fintype</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- general</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>This is for pedagogical purposes and I don't really mind if we stick to fintypes or not.</p>\n<p>As a side issue, is <code>cardinal.mk</code> really the way to talk about the cardinality of a type? Is there not some interface function?</p>",
        "id": 132037729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534156542
    },
    {
        "content": "<p><code>cardinal.mk</code> is the interface function</p>",
        "id": 132037883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534156701
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">three</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">three</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">three</span>\n<span class=\"bp\">|</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">three</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">three</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">three</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">},</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">three</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">three</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">fintype_card</span> <span class=\"n\">three</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n<span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- fintype</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">card</span> <span class=\"n\">three</span> <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">card_le_of_injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">three</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cc</span>\n\n<span class=\"c1\">-- general</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"n\">three</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span> <span class=\"bp\">▸</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">three</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cc</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 132038796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534157916
    },
    {
        "content": "<p>hm, I needed some additional library functions for this, attached. The main proof is not so hard:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_coe</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"n\">card_attach</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">card_le_of_finset</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"bp\">_⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">fintype_card</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_coe</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- fintype</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">c</span><span class=\"bp\">::</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*⟩</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- general</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simpa</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">card_le_of_finset</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">c</span><span class=\"bp\">::</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 132038797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534157919
    },
    {
        "content": "<p>just 3 seconds apart!</p>",
        "id": 132038801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534157931
    },
    {
        "content": "<p>Thanks to both of you! [I've only just seen these].</p>",
        "id": 132063967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534185226
    },
    {
        "content": "<p>This is one of those \"easy in maths, hard in Lean\" moments :-/ I am going to need stuff like \"card X = 3 iff there exists a,b,c all distinct and every element of X must be a, b or c\" [but I've gotta scoot]. I think I can take it from here but this is all a bit ugly. Mathematicians are so good at 3 :-/</p>",
        "id": 132075090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534198524
    },
    {
        "content": "<p>that latter fact is essentially exactly the definition of a fintype instance where the underlying multiset has three elements</p>",
        "id": 132084120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534212287
    },
    {
        "content": "<p>Here's a proof for the cardinal case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">three</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hthree</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">Hthree</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">Hthree</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">Hequiv</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Hequiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Hequiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Hequiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H12</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hequiv</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H23</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hequiv</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H31</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hequiv</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">existsi</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">existsi</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">H12</span><span class=\"o\">,</span><span class=\"n\">H23</span><span class=\"o\">,</span><span class=\"n\">H31</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Hequiv</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">He</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span><span class=\"k\">show</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Hequiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">Hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">He</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span><span class=\"n\">left</span><span class=\"o\">,</span><span class=\"k\">show</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Hequiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">Hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">He</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span><span class=\"n\">right</span><span class=\"o\">,</span><span class=\"k\">show</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Hequiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">Hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span><span class=\"n\">apply</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">Hn</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Now I need to do <code>four</code> <span class=\"emoji emoji-1f622\" title=\"cry\">:cry:</span> (but that's the last one)</p>",
        "id": 132131438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534275372
    },
    {
        "content": "<p>noo... my heart, it hurts</p>",
        "id": 132131694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534275476
    },
    {
        "content": "<p><code>n</code> is easier than <code>3</code></p>",
        "id": 132131735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534275489
    },
    {
        "content": "<p>So 4 is easier than 3? :-)</p>",
        "id": 132131957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534275552
    },
    {
        "content": "<p>3 is easier than 3</p>",
        "id": 132131963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534275564
    },
    {
        "content": "<p>I did think about doing the general case but at the end of the day I want to extract exactly those things in the conclusion, and I wasn't entirely sure how easy it would be if I had a list of size n or whatever, so I decided to bite the bullet now rather than later.</p>",
        "id": 132132062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534275663
    },
    {
        "content": "<p>trust me, it's way easier to conclude from the general statement, even if the final goal is exactly the statement you wrote</p>",
        "id": 132132086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534275710
    },
    {
        "content": "<p>hint: if you have a list of length 3, then you can <code>match</code> it against <code>[a, b, c]</code></p>",
        "id": 132132147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534275743
    },
    {
        "content": "<p>I was a bit surprised to see <code>simp</code> leave me with a goal <code>not 0 = 1</code> in the H12 proof.</p>",
        "id": 132132148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534275744
    },
    {
        "content": "<p>and <code>d \\in [a, b, c]</code> and <code>list.nodup [a, b, c]</code> will simplify to the disjunctions you wrote</p>",
        "id": 132132170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534275791
    },
    {
        "content": "<p>This is the stupid cardinal version, because Richard Thomas complained that I was assuming unnecessary finiteness hypotheses.</p>",
        "id": 132132192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534275818
    },
    {
        "content": "<p>there are theorems showing equivalence to the finite versions in <code>cardinal</code></p>",
        "id": 132132241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534275846
    },
    {
        "content": "<p>Oh OK, maybe I'll take it from here. Thanks!</p>",
        "id": 132132253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534275865
    },
    {
        "content": "<p>It's just my lack of experience which made me do the 3 case explicitly. I could see I could try for the n case, but I figured that doing the 3 case directly would be less painful. I guess your instincts immediately told you otherwise.</p>",
        "id": 132132278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534275920
    },
    {
        "content": "<p>even 2 is sometimes tricky, but certainly <code>2 &lt; n &lt; 3</code></p>",
        "id": 132132331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534275970
    }
]