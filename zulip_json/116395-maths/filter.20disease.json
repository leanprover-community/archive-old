[
    {
        "content": "<p>This feels really strange: I just caught  myself writing a long string of manipulations involving filters pull-backed, push-forwarded, multiplied and compared, because it felt easier than thinking in terms of compositions of limits and such things</p>",
        "id": 131057798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533663191
    },
    {
        "content": "<p>The key point is how filters allow to talk about limits when x tends to x' while staying in the image of a dense embedding.</p>",
        "id": 131058064,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533663437
    },
    {
        "content": "<p>It's on my to-do list to understand if and when filters can be pulled back and pushed forward</p>",
        "id": 131059184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533664541
    },
    {
        "content": "<p>filters live on bare sets, hence can be pulled back and pushed forward by bare set morphisms</p>",
        "id": 131059283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533664642
    },
    {
        "content": "<p>aka any map</p>",
        "id": 131059294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533664653
    },
    {
        "content": "<p>both operation are order preserving. And f_*F \\le G iff F \\le f^*G</p>",
        "id": 131059431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533664772
    },
    {
        "content": "<p>Now let's do composition of limits. f goes to G along F (I don't know how to pronounce this) if, by definition, f_*F \\le G. Now it's an exercise for you</p>",
        "id": 131059536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533664841
    },
    {
        "content": "<p>of course f_* is covariantly functorial</p>",
        "id": 131059574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533664903
    },
    {
        "content": "<p>Are they adjoint functors? <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> you'd like this stuff</p>",
        "id": 131059776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533665105
    },
    {
        "content": "<p>You'll soon be complaining that they teach limits wrong at Imperial. Did you see my  filter blog post? Maybe you know all this stuff already</p>",
        "id": 131059802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533665161
    },
    {
        "content": "<p>What would be Hom between two filters?</p>",
        "id": 131060103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533665362
    },
    {
        "content": "<p>sorry</p>",
        "id": 131060239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533665459
    },
    {
        "content": "<p>you mean for the poset structure?</p>",
        "id": 131060254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533665469
    },
    {
        "content": "<p>Yes, we have f_*f^*G \\le G  and F \\le f^<em>f_</em>F  for all F and G</p>",
        "id": 131060330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533665525
    },
    {
        "content": "<p>I must be careful not to be carried away, or else I'll be tempted to teach this to innocent students</p>",
        "id": 131060390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533665603
    },
    {
        "content": "<p>where are adjoint functors in mathlib now that we got a category PR accepted?</p>",
        "id": 131060872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533666118
    },
    {
        "content": "<p>You're right, I guess it must be like the opens in a top space, the inclusions are the only morphisms, and the one equation you mentioned above is I guess precisely the affirmative answer</p>",
        "id": 131062286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533667721
    },
    {
        "content": "<p>I managed to abstract the lemma I was using three times in my proof.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\"> γ -f→ α</span>\n<span class=\"cm\">g↓     ↓e</span>\n<span class=\"cm\"> δ -h→ β</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">key</span>  <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">de</span> <span class=\"o\">:</span> <span class=\"n\">dense_embedding</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">vmap</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">lim1</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">vmap</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">map_vmap_le</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">lim1</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">vmap</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">d</span><span class=\"o\">)))</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">map_mono</span> <span class=\"n\">lim1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">map_le_iff_le_vmap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">lim1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">lim2</span> <span class=\"o\">:</span>  <span class=\"n\">vmap</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>  <span class=\"n\">vmap</span> <span class=\"n\">e</span>  <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">vmap_mono</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">de</span><span class=\"bp\">.</span><span class=\"n\">induced</span> <span class=\"n\">at</span> <span class=\"n\">lim2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">lim1</span> <span class=\"n\">lim2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 131070762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533677928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I hope you're proud of me. But I'd still be interested if there is a smarter proof (or if it's already in mathlib).</p>",
        "id": 131070803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533677989
    },
    {
        "content": "<p>By the way, why isn't <code>dense_embedding</code> a class?</p>",
        "id": 131070879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533678053
    },
    {
        "content": "<p>Also, I find it a bit painful that the map is an implicit argument in <code>map_mono</code> and <code>vmap_mono</code>.</p>",
        "id": 131070901,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533678092
    },
    {
        "content": "<p>Now I'll go sleeping, feeling I've learned some nice stuff today.</p>",
        "id": 131070985,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533678173
    },
    {
        "content": "<p>+1 for the commutative diagram!</p>",
        "id": 131071488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533678871
    },
    {
        "content": "<blockquote>\n<p>where are adjoint functors in mathlib now that we got a category PR accepted?</p>\n</blockquote>\n<p>Sorry to disappoint, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, but only the first epsilon of category theory has been PR'd. It's a ways to go before you have adjoint functors.</p>",
        "id": 131079718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533690757
    },
    {
        "content": "<p>However, adjoint functors between posets are Galois connections, and they are in mathlib (<code>order/galois_connection.lean</code>).</p>",
        "id": 131084690,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533698341
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I hope you're proud of me. But I'd still be interested if there is a smarter proof (or if it's already in mathlib).</p>\n</blockquote>\n<p>Looks good to me. I don't think there is a related proof in mathlib. I'm on a bike trip this week, I can check out next Monday.</p>",
        "id": 131089180,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1533706468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Sorry about this joke. I know it's only the beginning, I did look at your PR.</p>",
        "id": 131100297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533725047
    },
    {
        "content": "<p>There is no hurry at all. The more difficult question is: how should we name that?</p>",
        "id": 131101008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726296
    },
    {
        "content": "<p>And also I'm a bit confused by the relation between <code>dense_embedding</code> and <code>embedding</code> in mathlib. My lemma actually doesn't use the dense part, but it uses the way the <code>induced</code> axiom is stated. But I guess it could be stated that way for embeddings too, right?</p>",
        "id": 131101650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533727291
    }
]