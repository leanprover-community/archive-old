[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I have a question for you. Do you have a proof without <code>decidable</code> or <code>classical</code> of:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure_empty_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">not_eq_empty_iff_exists</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h&#39;</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">subset_closure</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">closure_empty</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129817429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531839591
    },
    {
        "content": "<p>Use <code>set.eq_empty_iff_forall_not_mem</code> instead I think</p>",
        "id": 129817776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531839994
    },
    {
        "content": "<p>for this case, contradiction is intuitionistically valid</p>",
        "id": 129818028,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531840318
    },
    {
        "content": "<p>Thanks Reid!</p>",
        "id": 129818071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531840336
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure_empty_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_iff_forall_not_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">subset_closure</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">closure_empty</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129818092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531840370
    },
    {
        "content": "<p>I'm very slowly working towards proving that the Hausdorff completion of a uniform space X is nonempty unless X is empty. This is no fun at all.</p>",
        "id": 129818174,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531840464
    },
    {
        "content": "<p>I can feel the dreaded spiral where I'm upset something is not obvious to Lean and I'm proving more and more stupid lemmas instead of cooling down and figure out what I exactly need</p>",
        "id": 129818681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531841077
    },
    {
        "content": "<p>I need a break. If anyone here is bored and loves zerology, I think I may need proofs of:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nonempty_iff_univ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nonempty_of_nonempty_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 129819050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531841558
    },
    {
        "content": "<p>What am I allowed to use?</p>",
        "id": 129819486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531842179
    },
    {
        "content": "<p>Excluded middle?</p>",
        "id": 129819498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531842193
    },
    {
        "content": "<p>Or nothing like this?</p>",
        "id": 129819501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531842205
    },
    {
        "content": "<p>Of course I don't care. Again, the goal is to prove the completion is empty only if the original space is empty. And this is only needed to implement Mario's trick allowing to totalize the function \"lift to completion\" so that any function from a uniform space to a complete Hausdorff space lifts, the lift being garbage is the function is not uniformly continuous.</p>",
        "id": 129819612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531842356
    },
    {
        "content": "<p>But at some point we hope to put all this into mathlib, so it would be nicer to avoid unnecessary decidability assumption or classical logic</p>",
        "id": 129819683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531842422
    },
    {
        "content": "<p><code>nonempty</code> needs data for its constructor, and <code>(univ : set α) ≠ ∅</code> is only a proposition</p>",
        "id": 129819773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531842548
    },
    {
        "content": "<p>You can have a look at <a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean</a>  to see where I stand</p>",
        "id": 129819777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531842558
    },
    {
        "content": "<p>Mario style lifting is defined at <a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L124\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L124\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L124</a></p>",
        "id": 129819790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531842587
    },
    {
        "content": "<p>For the first one you need something like <code>¬ (∀ a : α, false) → ∃ a : α, true</code></p>",
        "id": 129819865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531842644
    },
    {
        "content": "<p>Maybe I should use <code>inhabited</code> instead of <code>nonempty</code></p>",
        "id": 129819870,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531842654
    },
    {
        "content": "<p>Assuming α is nonempty, the assumption <code>decidable_eq (set α)</code> implies decidability of all propositions</p>",
        "id": 129819883,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531842685
    },
    {
        "content": "<p>Or maybe this is too much trouble, given that I already have a working lift for uniformly continuous functions</p>",
        "id": 129819888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531842702
    },
    {
        "content": "<p>I'm upset because none of this has any mathematical content</p>",
        "id": 129819935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531842732
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nonempty_iff_univ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">H2</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129820225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531843098
    },
    {
        "content": "<p>I used many of these same theorems in the proof of <code>dense_embedding.extend</code></p>",
        "id": 129820641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531843629
    },
    {
        "content": "<p>for the most part I just brute forced through all of it, using <code>exists_mem_of_ne_empty</code> to get elements out of nonempty sets</p>",
        "id": 129820666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531843681
    },
    {
        "content": "<p>and using <code>mem_closure_iff</code> to get a nonempty set from a closure</p>",
        "id": 129820713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531843721
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nonempty_of_nonempty_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">range</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">propext</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span><span class=\"n\">swap</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H3</span><span class=\"o\">,</span><span class=\"n\">cases</span> <span class=\"n\">H3</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">Ha</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129821218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531844508
    },
    {
        "content": "<p>What's the hurry :-)</p>",
        "id": 129821220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531844513
    },
    {
        "content": "<p>not so cleaned up:</p>\n<div class=\"codehilite\"><pre><span></span>lemma nonempty_completion_iff : nonempty (completion α) ↔ nonempty α :=\nbegin\n  split,\n  { rintro ⟨c⟩,\n    have := eq_univ_iff_forall.1 (to_completion.dense α) c,\n    have := mem_closure_iff.1 this _ is_open_univ trivial,\n    rcases exists_mem_of_ne_empty this with ⟨_, ⟨_, a, _⟩⟩,\n    exact ⟨a⟩ },\n  { rintro ⟨a⟩,\n    exact ⟨to_completion α a⟩ }\nend\n</pre></div>",
        "id": 129821261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531844541
    },
    {
        "content": "<p>Many thanks to both of you!</p>",
        "id": 129821269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531844574
    },
    {
        "content": "<p>In the mean time I saw Kevin's first lemma proof and then found some courage to write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nonempty_of_nonempty_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">exists_mem_of_ne_empty</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129821281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531844607
    },
    {
        "content": "<p>I don't know any of these lemmas which people are using :-)</p>",
        "id": 129821332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531844650
    },
    {
        "content": "<p>I find them using lots of suffering</p>",
        "id": 129821337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531844680
    },
    {
        "content": "<p>But now I need to understand Mario's proof</p>",
        "id": 129821344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531844696
    },
    {
        "content": "<p>I never quite know whether I should somehow attempt to learn exactly what is in mathlib and where it all is</p>",
        "id": 129821346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531844700
    },
    {
        "content": "<p>I'm doing a lot of work with multisets at the minute for a student, and now I really know my way around multiset.lean</p>",
        "id": 129821369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531844722
    },
    {
        "content": "<p>but I don't know my way around data.set.basic in that way</p>",
        "id": 129821424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531844776
    },
    {
        "content": "<p>It's worth a perusal (data.set.lattice is the other important one)</p>",
        "id": 129821456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531844869
    },
    {
        "content": "<p>but ideally you should be able to guess beforehand what is in there</p>",
        "id": 129821507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531844904
    },
    {
        "content": "<p><code>rintro ⟨c⟩</code> is already a nice trick</p>",
        "id": 129821513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531844909
    },
    {
        "content": "<p>But then I'm not sure this isn't too efficient. Don't you think <code>closure_empty_iff</code> should be in mathlib anyway?</p>",
        "id": 129821533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531844956
    },
    {
        "content": "<p>I hope <code>rintro</code> isn't as slow as <code>rsimp</code></p>",
        "id": 129821603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531845024
    },
    {
        "content": "<p>Never noticed any slowness there</p>",
        "id": 129821608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531845045
    },
    {
        "content": "<p>If you don't fear <code>rcases</code> then you don't fear <code>rintro</code></p>",
        "id": 129821678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531845149
    },
    {
        "content": "<p>and, together, they really make a difference in conciseness, without obfuscation (it's all about unpacking stuff that our mind would unpack unconsciously)</p>",
        "id": 129821701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531845201
    },
    {
        "content": "<p>Mario, I tried to use your trick in <a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L124\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L124\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L124</a> but I needed to assume uniform continuity of <code>f</code> is decidable. Now I want to state lemmas assuming uniform continuity, but Lean asks me for an instance of <code>decidable (uniform_continuous f)</code>. Did I do it wrong? What should I do?</p>",
        "id": 129822053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531845713
    },
    {
        "content": "<p>since that proof uses only structural tactics, I would normally compress it into a term proof</p>",
        "id": 129822112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531845761
    },
    {
        "content": "<p>which proof?</p>",
        "id": 129822131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531845791
    },
    {
        "content": "<p>the one I gave</p>",
        "id": 129822190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531845861
    },
    {
        "content": "<p>you should have local instance prop_decidable</p>",
        "id": 129822230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531845923
    },
    {
        "content": "<p>Oh I will happily add that if you don't tell me this will be an issue when trying to get all this into mathlib</p>",
        "id": 129822292,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531845987
    },
    {
        "content": "<p>My original version (with unique exists!) had no such assumption, but if course it makes no difference to me</p>",
        "id": 129822318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531846038
    },
    {
        "content": "<p>of course cases on uniform continuity is firmly classical, but we are not working in the constructive fragment here</p>",
        "id": 129822369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531846092
    },
    {
        "content": "<p>Nice. I should be able to move on tonight. But right now I'm too hungry, I need diner.</p>",
        "id": 129822444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531846221
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 129822446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531846227
    },
    {
        "content": "<p>totalizing functions often requires classical axioms</p>",
        "id": 129822721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531846639
    },
    {
        "content": "<p>I'm done totalizing. Now I'm back exactly where I was yesterday except that, in <code>uniform_space.completion_lift f</code>, <code>f</code> is now a function rather than a proof that a function is uniformly continuous. In particular fonctoriality now reads <code>completion_lift (g ∘ f) = (completion_lift g) ∘ completion_lift f</code>, as it should</p>",
        "id": 129832556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531858378
    },
    {
        "content": "<p>All this for the cheap price of a few hours and a <code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 129832572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531858418
    },
    {
        "content": "<p>And I can see wisdom is coming to Kenny. He didn't write anything about that last classical detail.</p>",
        "id": 129832630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531858471
    }
]