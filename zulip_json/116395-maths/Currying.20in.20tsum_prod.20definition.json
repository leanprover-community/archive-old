[
    {
        "content": "<p>The current statement of <code>ennreal.tsum_prod</code> differs from the more general <code>tsum_prod'</code> lemma in that it doesn't curry the arguments to the sum function. This means it doesn't work in situations like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n<span class=\"c1\">-- Current version</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.tsum_prod₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">tsum_prod'</span> <span class=\"n\">ennreal.summable</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ennreal.summable</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.tsum_prod₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">tsum_prod'</span> <span class=\"n\">ennreal.summable</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ennreal.summable</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ennreal.tsum_prod₂</span><span class=\"o\">,</span> <span class=\"n\">prod_map</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there any reason not to change this to use the second definition?</p>",
        "id": 320483451,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1673366057
    },
    {
        "content": "<p>The second version is also good to have. For <code>sigma</code> we have both: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tsum_sigma\">docs#ennreal.tsum_sigma</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.tsum_sigma'\">docs#ennreal.tsum_sigma'</a><br>\nThe first version is sometimes useful if you're picky about the exact form of the right-hand side, so it's better to just have both versions.</p>",
        "id": 320484934,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673366460
    },
    {
        "content": "<p>Sure, that makes sense. I'll open a PR to add the other version alongside it then</p>",
        "id": 320486500,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1673366855
    },
    {
        "content": "<p>The first one is best for backwards rewrites, the second is best for forwards rewrites</p>",
        "id": 320487819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673367224
    },
    {
        "content": "<p>A bit like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.exists\">docs#prod.exists</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.exists'\">docs#prod.exists'</a></p>",
        "id": 320487916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673367244
    }
]