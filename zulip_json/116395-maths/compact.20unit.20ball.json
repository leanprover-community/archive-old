[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248716\">@Lambert A'Campo</span> proved that <a href=\"https://github.com/LAC1213/compact_unit_ball\" target=\"_blank\" title=\"https://github.com/LAC1213/compact_unit_ball\">A Normed Real Vector Space with Compact Unit Ball is Finite Dimensional</a>. I forked the project and am trying to speed up compile time by fixing the import problems. But there are some far better speedrunners than me here. Are there better ways to formalise the <a href=\"https://github.com/LAC1213/compact_unit_ball/blob/11971ec194f4395b3bcb305630c1379f8c53824d/src/compact_unit_ball.lean#L253\" target=\"_blank\" title=\"https://github.com/LAC1213/compact_unit_ball/blob/11971ec194f4395b3bcb305630c1379f8c53824d/src/compact_unit_ball.lean#L253\">statement of the theorem</a>?</p>",
        "id": 182616840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575506957
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/normed_space.20timeouts/near/182576727\" title=\"#narrow/stream/116395-maths/topic/normed_space.20timeouts/near/182576727\">Sebastien's priority hack</a> cuts the compile down on my machine from 16 seconds to under 1.5.</p>",
        "id": 182620840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575511145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">banach</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">subset_properties</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">finite_dimension</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">v</span><span class=\"err\">∥</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"err\">•</span> <span class=\"n\">v</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">false</span>\n</pre></div>",
        "id": 182623159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575514637
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>elaboration of test took 4.81s\n</pre></div>",
        "id": 182623162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575514644
    },
    {
        "content": "<p>why does this take so long??</p>",
        "id": 182623168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575514654
    },
    {
        "content": "<p>You have to say the magic words</p>",
        "id": 182623173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575514666
    },
    {
        "content": "<p>ok that seems to fix the problem</p>",
        "id": 182623227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575514723
    },
    {
        "content": "<p>why?</p>",
        "id": 182623229,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575514729
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/compact_unit_ball/blob/53cc5b1164aaf3c9978e735fe4f88fca30e4f8a1/src/compact_unit_ball.lean#L7\" target=\"_blank\" title=\"https://github.com/kbuzzard/compact_unit_ball/blob/53cc5b1164aaf3c9978e735fe4f88fca30e4f8a1/src/compact_unit_ball.lean#L7\">the magic words</a><br>\nType class inference just goes crazy trying to prove V is a normed field and 100 other things.</p>",
        "id": 182623247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575514773
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/8c8ee22162b7f546b94df957538b5d2e\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/8c8ee22162b7f546b94df957538b5d2e\">262144 characters of really stupid guesses about the type of V given that it has no <code>*</code></a></p>",
        "id": 182623321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575514841
    },
    {
        "content": "<p>I tidied up <a href=\"https://github.com/kbuzzard/compact_unit_ball/blob/c13ffa54ce181c14599c49962519090b81747767/src/compact_unit_ball.lean#L29\" target=\"_blank\" title=\"https://github.com/kbuzzard/compact_unit_ball/blob/c13ffa54ce181c14599c49962519090b81747767/src/compact_unit_ball.lean#L29\">ball_span_ash</a> a bit.</p>",
        "id": 182623406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575514950
    },
    {
        "content": "<p>what a coincidence, I'm also working on that</p>",
        "id": 182623423,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575514972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">ball_span_ash</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">v</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">v</span><span class=\"err\">∥</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">add_pos_of_pos_of_nonneg</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">v</span><span class=\"err\">∥</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"err\">•</span> <span class=\"n\">v</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_smul</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"err\">$</span> <span class=\"n\">inv_pos</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n  <span class=\"err\">←</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h1</span><span class=\"o\">),</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_add_of_nonneg_left</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">v</span><span class=\"err\">∥</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">v</span><span class=\"err\">∥</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"err\">•</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">hyp</span> <span class=\"bp\">_</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h1</span><span class=\"o\">),</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n</pre></div>",
        "id": 182623595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575515282
    },
    {
        "content": "<p>what does <code>ash</code> mean?</p>",
        "id": 182623616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575515307
    },
    {
        "content": "<blockquote>\n<p>Are there better ways to formalise the <a href=\"https://github.com/LAC1213/compact_unit_ball/blob/11971ec194f4395b3bcb305630c1379f8c53824d/src/compact_unit_ball.lean#L253\" target=\"_blank\" title=\"https://github.com/LAC1213/compact_unit_ball/blob/11971ec194f4395b3bcb305630c1379f8c53824d/src/compact_unit_ball.lean#L253\">statement of the theorem</a>?</p>\n</blockquote>\n<p>The conclusion should rather be that the space is finite-dimensional. And the assumption should not be that the field is the real numbers, but any nondiscrete normed field :)</p>",
        "id": 182637904,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575534411
    },
    {
        "content": "<p>Do you even need nondiscrete? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 182637988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575534500
    },
    {
        "content": "<p>Depends on which ball you're considering. If you assume that the ball of radius <code>1/2</code> is compact, and in fact it is reduced to <code>0</code>, then you can't deduce anything. The statement with the ball of radius <code>1</code> is probably true in full generality.</p>",
        "id": 182638095,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575534616
    },
    {
        "content": "<p>No, it's not true in fact. Take real numbers with the trivial norm equal to <code>1</code> on all nonzero elements. This is a (discrete) normed field. Then take an infinite-dimensional real vector space with a norm equal to, say, 13, on every non-zero element.  I think it satisfies all the axioms of a normed vector space. Then the closed ball of radius <code>1</code> is compact, but the space is infinite-dimensional.</p>",
        "id": 182639206,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575535797
    },
    {
        "content": "<p>Don't the norm axioms require that <code>||1|| = 1</code>?</p>",
        "id": 182639551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575536158
    },
    {
        "content": "<p>In the field, yes, but that's satisfied by my example. In the vector space, <code>1</code>doesn't make sense.</p>",
        "id": 182640218,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575536698
    },
    {
        "content": "<p>Ooh, sorry. You're completely right</p>",
        "id": 182640343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575536813
    },
    {
        "content": "<p>You need the norm on the field to be nontrivial and this should do it I guess</p>",
        "id": 182681294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575566153
    },
    {
        "content": "<p>I have now generalised the proof to non discrete complete fields k. However <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> s priority magic doesn't work anymore so it's slow again. Also I'm now wondering whether there is a normed vector space over a non-complete field which contains a finite dimensional subspace that is not closed.</p>",
        "id": 182719593,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575593235
    },
    {
        "content": "<p>The code is here <a href=\"https://github.com/LAC1213/compact_unit_ball\" target=\"_blank\" title=\"https://github.com/LAC1213/compact_unit_ball\">https://github.com/LAC1213/compact_unit_ball</a></p>",
        "id": 182719609,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575593262
    },
    {
        "content": "<p>We need a tactic to generate the magic incantations!</p>",
        "id": 182719617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575593265
    },
    {
        "content": "<p>If you don't assume completeness, you can still deduce it from the existence of a compact ball (unless the space is <code>0</code>-dimensional, but then the result is obvious), as a ball in the field embeds isometrically in a ball in the space by the map <code>c -&gt; c x</code> (where <code>x</code> is a fixed non-zero vector).</p>",
        "id": 182735725,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575616533
    },
    {
        "content": "<p>And yes, if you drop completeness, finite-dimensional subspaces are generally not closed. A basic example is to consider <code>ℝ</code> as a <code>ℚ</code> vector space, but with its usual norm. Then the one-dimensional subspace <code>ℚ</code> is not closed, as it is dense!</p>",
        "id": 182737046,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575618571
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">20000</span><span class=\"o\">]</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_one</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">domain</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_has_scalar</span> <span class=\"n\">distrib_mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_mul_action</span>\n<span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">to_distrib_mul_action</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">to_vector_space</span>\n<span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span>\n<span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_group</span> <span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span>\n<span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_discrete_field</span> <span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_has_norm</span> <span class=\"n\">nondiscrete_normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_field</span>\n<span class=\"n\">zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span> <span class=\"n\">zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span> <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_zero_ne_one_class</span>\n<span class=\"n\">division_ring</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">to_division_ring</span> <span class=\"n\">discrete_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span>\n</pre></div>\n\n\n<p>all searches should be direct.</p>",
        "id": 182738337,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575620114
    },
    {
        "content": "<p>I just created <a href=\"https://github.com/LAC1213/compact_unit_ball/pull/1\" target=\"_blank\" title=\"https://github.com/LAC1213/compact_unit_ball/pull/1\">https://github.com/LAC1213/compact_unit_ball/pull/1</a>. I didn't think about the overall structure of the proof. I took the first lemmas and locally modified them using standard tricks.</p>",
        "id": 182742004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575624030
    },
    {
        "content": "<p>Thank you Patrick, I'll learn from it!</p>",
        "id": 182751319,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575631461
    }
]