[
    {
        "content": "<p>Is there a definition of the projective space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(V)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> over a vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> in mathlib that I'm missing?</p>",
        "id": 241790445,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623078344
    },
    {
        "content": "<p>Nope, unfortunately not yet</p>",
        "id": 241790597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623078388
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> has a branch.</p>",
        "id": 241790700,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623078428
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/proj-space-quot\">branch#proj-space-quot</a> it's very stale</p>",
        "id": 241790776,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623078457
    },
    {
        "content": "<p><del>Bah!</del></p>",
        "id": 241790903,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623078486
    },
    {
        "content": "<p>Thanks! I'll check it out</p>",
        "id": 241791446,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623078689
    },
    {
        "content": "<p>Feel free to adopt!</p>",
        "id": 241791479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623078703
    },
    {
        "content": "<p>I've just been too busy with other things to work on this</p>",
        "id": 241791607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623078745
    },
    {
        "content": "<p>I've been starting a little formalisation of (synthetic) projective geometry and it would be nice to have projective spaces as an example :)</p>",
        "id": 241795591,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623080215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> Is your code available somewhere?</p>",
        "id": 241799463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623081756
    },
    {
        "content": "<p>Not yet publicly, I'll post it here, when it's ready :)<br>\nI've been basing it on a collinearity relation as the only atomic judgment as in \"Modern Projective Geometry\" by Frölicher and Faure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">projective_geom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">col</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">refl13</span>        <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">col</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">trans_neq</span>     <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">col</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">col</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">col</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">intersect_mid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">col</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">col</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"n\">col</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">col</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 241800343,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623082155
    },
    {
        "content": "<p>One of my long term goals is to formalize the general version of the fundamental theorem of projective geometry that appears in that book. The one that characterizes general semilinear maps in terms of partially defined maps on projective spaces</p>",
        "id": 241800579,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623082256
    },
    {
        "content": "<p>It would also be nice to formalize the \"coordinatization\" theorems for axiomatic projective spaces, which tell you when an abstract thing defined as an incidence relation actually arises from a vector space over a field (or a division algebra)</p>",
        "id": 241801103,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623082364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> So <code>projective_geom</code> only models 2-dimensional projective space, is that right?</p>",
        "id": 241801129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623082377
    },
    {
        "content": "<p>Or is it actually more general? I never thought about these axiomatic approaches</p>",
        "id": 241801186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623082404
    },
    {
        "content": "<p>I think this works for arbitrary dimension</p>",
        "id": 241801409,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623082517
    },
    {
        "content": "<p>The assumptions in the third axiom essentially put you in a 2 dimensional context spanned by p a b c and d</p>",
        "id": 241801776,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623082695
    },
    {
        "content": "<p>You can add additional axioms if you want to fix a minimum or maximum dimension. I think most common is assuming the existence of a line and a point not on that line.</p>",
        "id": 241804210,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623083778
    },
    {
        "content": "<p>Working with all these coercions from <code>K</code> to <code>units K</code>what's the best way to replace <code>d</code> by an element of <code>units K</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">u'</span><span class=\"o\">)</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">v'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">u'</span>\n</code></pre></div>",
        "id": 242040710,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623232455
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.mk0\">docs#units.mk0</a></p>",
        "id": 242040743,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623232485
    },
    {
        "content": "<p>In particular, I'd try something along the lines of <code>rw ← units.coe_mk0 d hd</code></p>",
        "id": 242040950,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623232596
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a> work?</p>",
        "id": 242041169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623232740
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, that works.</p>",
        "id": 242041382,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623232865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Not yet, it seems to be lacking an instance of <code>can_lift</code></p>\n<blockquote>\n<blockquote>\n<p>Failed to find a lift from K to units K. Provide an instance of can_lift K (units K)</p>\n</blockquote>\n</blockquote>",
        "id": 242041405,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623232880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/projective.20space/near/242041169\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a> work?</p>\n</blockquote>\n<p>Gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dsimplify</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">can_lift.cond</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>Even though dsimp actually does reduce the above to <code>d ≠ 0</code>..</p>",
        "id": 242042302,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623233356
    },
    {
        "content": "<p>I think we should probide that instance</p>",
        "id": 242042619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623233601
    },
    {
        "content": "<p>I did, but it still fails.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">can_lift</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">units.coe_mk0</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}⟩</span>\n</code></pre></div>",
        "id": 242042708,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623233647
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">can_lift</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">units.coe_mk0</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(edit: <a href=\"https://github.com/leanprover-community/mathlib/issues/7857\">#7857</a>)</p>",
        "id": 242042819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623233735
    },
    {
        "content": "<p>(sorry, cross-post)</p>",
        "id": 242042851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623233754
    },
    {
        "content": "<p>Can you give a mwe?</p>",
        "id": 242042924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623233775
    },
    {
        "content": "<p>Ah, it was some mistake in my instance. Not sure what exactly, but it works with yours.</p>",
        "id": 242043821,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623234301
    },
    {
        "content": "<p>Perhaps <code>K</code> had too strong a typeclass</p>",
        "id": 242044134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623234462
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/5e3e16a6488be72497f3dc476ec5306cd294251d/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f333132312f656d6f6a692f696d616765732f31383532372e706e67\" title=\"merge\"></p>",
        "id": 242167094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623309054
    },
    {
        "content": "<p>with matlib's definition of linear independence, is it feasible to argue comfortably about (multi)sets of two or three vectors? coercing them to families over <code>fin 2</code> seems unwieldy...</p>",
        "id": 242280641,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623364740
    },
    {
        "content": "<p>Do multisets have a coercion to type?</p>",
        "id": 242280980,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623364980
    },
    {
        "content": "<p>if so, you can just take the multiset itself to be the indexing type</p>",
        "id": 242280995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623364991
    },
    {
        "content": "<p>No,  but finsets do. If a <code>multiset.to_finset</code> is not equal to the starting multiset, then it is surely not linearly independent, because you have a duplicate.</p>",
        "id": 242281094,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623365051
    },
    {
        "content": "<p>(Although it depends on how you treat the zero vector)</p>",
        "id": 242281110,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623365067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> do you know about matrix notation?</p>",
        "id": 242281222,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623365136
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 242281450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623365290
    },
    {
        "content": "<p>Thanks for the replies, I'll start toying around with this next week. The matrix notation looks cool!</p>",
        "id": 242390892,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623438886
    },
    {
        "content": "<p>The kind of statement I'm trying to prove is along the lines of \"if a, b, c are lin. dep., a, b, d are lin. dep. and c, d, are indep, then a, c, d are lin. dep.\". Not sure if I should maybe check out <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span>'s matroid to make this more abstract</p>",
        "id": 242391264,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623439120
    }
]