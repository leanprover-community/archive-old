[
    {
        "content": "<p>I would have liked to think that I am experienced enough to figure out how to make progress with the following goal in marthlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sets.opens</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.category.preorder</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">topological_space.opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V.unop</span> <span class=\"bp\">⊆</span> <span class=\"n\">U.unop</span><span class=\"o\">):</span>\n  <span class=\"n\">U</span> <span class=\"bp\">⟶</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- apply ulift.up, -- fails</span>\n  <span class=\"c1\">-- change opposite.unop V ⟶ opposite.unop U, -- fails</span>\n  <span class=\"n\">delta</span> <span class=\"n\">quiver.hom</span><span class=\"o\">,</span> <span class=\"c1\">--dreaded []</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Getting the system to unfold <code>quiver.hom</code> gives me the dreaded <code>[quiver.hom quiver.opposite] U V</code> and my rule of thumb is that when the <code>[]</code>s start appearing you unfolded too much. By using widgets you can dig into what the definition should be and it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `Vᵒᵖ` reverses the direction of all arrows of `V`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">opposite</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>so my <code>change</code> should work but this doesn't work either, I dunno if something was made irreducible or what, but anyway at the end of the day I'm stuck. This is for a lecture I'm giving today in 5 hours lol</p>",
        "id": 312595317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669631181
    },
    {
        "content": "<p>Not tested, but <code>exact (hom_of_le h).op</code> should work?</p>",
        "id": 312595524,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669631269
    },
    {
        "content": "<p>ha ha I just replaced the goal with <code>_</code> and clicked on every single lightbulb possibility, and <code>library_search</code> gave me <code>category_theory.op_hom_of_le h</code></p>",
        "id": 312595648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669631300
    },
    {
        "content": "<p>OK now to find out how I should be doing this. Thanks Andrew! Do you have any clue why my approaches didn't work?</p>",
        "id": 312595784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669631332
    },
    {
        "content": "<p>I'm still looking into it, but <code>dsimp [quiver.opposite]</code> seems to leave you with <code>opposite.unop V ⟶ opposite.unop U</code>.</p>",
        "id": 312596839,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669631701
    },
    {
        "content": "<p>It seems like <code>quiver.opposite</code> is marked as <code>irreducible</code> to force users into using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.quiver.hom.op\">docs#category_theory.quiver.hom.op</a></p>",
        "id": 312597536,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669631951
    },
    {
        "content": "<p>My first try would have been:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">V.unop</span> <span class=\"bp\">⟶</span> <span class=\"n\">U.unop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">α.op</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 312603510,
        "sender_full_name": "Joël Riou",
        "timestamp": 1669633870
    },
    {
        "content": "<p>I think we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_le.le.hom\">docs#has_le.le.hom</a> so you can use dot notation and write <code>h.hom</code> where <code>h : A \\le B</code>.</p>",
        "id": 312699034,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669661740
    },
    {
        "content": "<p>similarly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.hom.le\">docs#quiver.hom.le</a></p>",
        "id": 312699082,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669661752
    },
    {
        "content": "<p>So altogether Kevin should be able to write <code>h.hom.op</code> :)</p>",
        "id": 312700198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669662085
    },
    {
        "content": "<p>Not really. Kevin's <code>h</code> is in terms of <code>subset</code> and there isn't a <code>has_subset.subset.hom</code>. But to be fair, Kevin's example should use le to begin with.</p>",
        "id": 312704228,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669663364
    }
]