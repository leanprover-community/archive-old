[
    {
        "content": "<p>I'm typing lecture notes on basic algebra and I wanted to warn my readers that going too far with axiom optimization can lead to madness. I'm trying to quote one example of a single-axiom definition of groups, and I wanted to see whether there was anyway to write a proof there (I do have some masochistic students). Most papers on this topic seem to simply quote some dead specialized software, but   <a href=\"https://www.imo.universite-paris-saclay.fr/~pmassot/mccune.pdf\">this paper</a> has something that claims to be a proof on Page 10. Is anyone able to decipher that page? This should be pretty easy to formalize if it is true (we could even have that in the archive folder of mathlib).</p>",
        "id": 246741383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626883916
    },
    {
        "content": "<p>that looks like a fun project but I bet that the easiest way to do it is to actually fire up some of that ATP software and let it do it itself.</p>",
        "id": 246744052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885088
    },
    {
        "content": "<p>All this stuff was found by an ATP... which then bit-rot.  And all those papers replace most proofs with \"the reader should fire up our ATP\".</p>",
        "id": 246744301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885207
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">group</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>I failed to do the easy way :-)</p>",
        "id": 246744508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885306
    },
    {
        "content": "<p>There are about 10 rewrite lemmas due to Knuth and Bendix which are supposed to solve that problem, right?</p>",
        "id": 246744564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885331
    },
    {
        "content": "<p>Hey, this is not meant to fail.</p>",
        "id": 246744576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885340
    },
    {
        "content": "<p>then maybe I made a typo</p>",
        "id": 246744592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885350
    },
    {
        "content": "<p>I did!</p>",
        "id": 246744676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885378
    },
    {
        "content": "<p>I did it on paper.</p>",
        "id": 246744684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885384
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">group</span>\n</code></pre></div>",
        "id": 246744697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885390
    },
    {
        "content": "<p>the other direction is left as an exercise</p>",
        "id": 246744714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885401
    },
    {
        "content": "<p>Indeed that's not the correct relation</p>",
        "id": 246744755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885416
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">group</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 246744822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885450
    },
    {
        "content": "<p>I'm late but my super crappy internet connection is showing me messages late.</p>",
        "id": 246744893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885483
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 246744940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885493
    },
    {
        "content": "<p>Here's a setup. I failed on the first paramodulation step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mccune_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nonemp</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mccune</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mccune_group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mccune_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">mccune</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l7</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">l5</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">l5</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ???</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">classical.choice</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonemp</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">⟩</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv.inv</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246744946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626885497
    },
    {
        "content": "<p>Beware  I think the other direction has an implicit assumption that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is not empty.</p>",
        "id": 246744978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885517
    },
    {
        "content": "<p>for sure!</p>",
        "id": 246745033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885542
    },
    {
        "content": "<p>i thought all G had to have a 1</p>",
        "id": 246745050,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626885550
    },
    {
        "content": "<p>didn't know the rng debate went past ring theory</p>",
        "id": 246745072,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626885564
    },
    {
        "content": "<p>all groups have a 1, but we're trying to prove something is a group</p>",
        "id": 246745085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885571
    },
    {
        "content": "<p>And letting the other direction as an exercise is what I intend to do, but I'd like to have the answer somewhere.</p>",
        "id": 246745093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885575
    },
    {
        "content": "<p>Eric, one of the steps in the proof is meant to be that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mi>y</mi><mo separator=\"true\">,</mo><mi>x</mi><msup><mi>x</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>y</mi><msup><mi>y</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\forall x y, xx^{-1} = yy^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> and then, assuming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is not empty, this common value is defined to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 246745243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if only we could see 6!</p>",
        "id": 246745562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885764
    },
    {
        "content": "<p>The proof says that 7 is obtained by paramodulation of 5 into 5. I challenge folks to figure out what that means</p>",
        "id": 246745641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626885801
    },
    {
        "content": "<p>I decided it meant substitution of 5 into 5</p>",
        "id": 246745729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885839
    },
    {
        "content": "<p>Yes, this is where I arrived and got stuck.</p>",
        "id": 246745813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626885862
    },
    {
        "content": "<p>Perhaps the author knew that any sane person would have stopped reading by this line so he could write what he liked</p>",
        "id": 246745829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626885869
    },
    {
        "content": "<p>If you have <code>\\all x, l x = r x</code> and <code>\\all y, P y</code>, then paramodulation of the first into the second should mean instantiating both to <code>l a = r a</code> and <code>P b</code>, such that <code>l a</code> is a subterm of <code>P b</code>, i.e. <code>P b = Q (l a)</code>, resulting in the theorem <code>Q (r a)</code>. The non obvious parts are what <code>a</code>, <code>b</code> and <code>Q</code> should be chosen to be such that <code>Q (r a)</code> is the theorem you want</p>",
        "id": 246746190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626886031
    },
    {
        "content": "<p>(5) has 7 variables on the LHS, and (7) has 9, but there's no way you can rewrite 5 into itself to make the number of variables only go up by 2</p>",
        "id": 246746259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626886065
    },
    {
        "content": "<p>oh I see, you can first make the number go up by 8 and then down by 6</p>",
        "id": 246746538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626886155
    },
    {
        "content": "<p>and the \"up by 8\" equation is missing line 6</p>",
        "id": 246746621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626886184
    },
    {
        "content": "<p>Yeah when I first heard of the McCune theorem I thought that the first few steps must be gigantic because nothing cancels for a while</p>",
        "id": 246746784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626886240
    },
    {
        "content": "<p>I can feel I only need to wait a little longer and Mario and Kevin will do it for me. I <em>love</em> this place.</p>",
        "id": 246746929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626886314
    },
    {
        "content": "<p>I hope it gets easier than this first line!</p>",
        "id": 246747005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626886337
    },
    {
        "content": "<p>maybe we will need OTTER's help after all</p>",
        "id": 246747046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626886366
    },
    {
        "content": "<p>plot twist: OTTER was buggy and no one noticed</p>",
        "id": 246747102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626886392
    },
    {
        "content": "<p>Good luck resurrecting OTTER. I think you'll do it faster by hand + Lean.</p>",
        "id": 246747132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626886407
    },
    {
        "content": "<p>Mario, I'm taking it that here that our <code>∀ y, P y</code> is <code>rfl</code>?</p>",
        "id": 246747289,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626886466
    },
    {
        "content": "<p>surely we can just ask prover9 to do this</p>",
        "id": 246747297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626886470
    },
    {
        "content": "<p>Good luck resurrecting prover9 then.</p>",
        "id": 246747464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626886530
    },
    {
        "content": "<p>this is also dead?? These guys must use <em>something</em>?</p>",
        "id": 246747499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626886550
    },
    {
        "content": "<p>It was last updated in 2009, and it doesn't run here, even on a computer that still has python2 installed.</p>",
        "id": 246747693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626886622
    },
    {
        "content": "<p>Maybe McCune died, or he got bored with this kind of research.</p>",
        "id": 246747745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626886645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246747289\">said</a>:</p>\n<blockquote>\n<p>Mario, I'm taking it that here that our <code>∀ y, P y</code> is <code>rfl</code>?</p>\n</blockquote>\n<p>No, <code>\\all x, l x = r x</code> and <code>\\all y, P y</code> are two previously proven steps, specified as inputs. In the case of step 7 it is using step 5 for both</p>",
        "id": 246747761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626886653
    },
    {
        "content": "<p><code>P y</code> is an equality too, you are substituting into both sides of it (but the fact it's an equality doesn't matter much since you are only doing equalish stuff for the other lemma)</p>",
        "id": 246747866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626886690
    },
    {
        "content": "<p>There is a chance that step 6 has length 100, right?</p>",
        "id": 246747917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626886714
    },
    {
        "content": "<p>I think step 6 turned out not to be useful</p>",
        "id": 246748046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626886777
    },
    {
        "content": "<p>the numbering is gapped because the theorem was cleaned up after the fact</p>",
        "id": 246748101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626886797
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">gcc</span>  <span class=\"bp\">-</span><span class=\"n\">O</span> <span class=\"bp\">-</span><span class=\"n\">Wall</span> <span class=\"bp\">-</span><span class=\"n\">lm</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">prover9</span> <span class=\"n\">prover9.o</span> <span class=\"n\">index_lits.o</span> <span class=\"n\">forward_subsume.o</span> <span class=\"n\">demodulate.o</span> <span class=\"n\">pred_elim.o</span> <span class=\"n\">unfold.o</span> <span class=\"n\">semantics.o</span> <span class=\"n\">giv_select.o</span> <span class=\"n\">white_black.o</span> <span class=\"n\">actions.o</span> <span class=\"n\">search.o</span> <span class=\"n\">utilities.o</span> <span class=\"n\">provers.o</span> <span class=\"n\">foffer.o</span> <span class=\"bp\">../</span><span class=\"n\">ladr</span><span class=\"bp\">/</span><span class=\"n\">libladr.a</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">search.o</span><span class=\"o\">:</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">search'</span><span class=\"o\">:</span>\n<span class=\"n\">search.c</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x6745</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">round'</span>\n<span class=\"n\">collect2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ld</span> <span class=\"n\">returned</span> <span class=\"mi\">1</span> <span class=\"n\">exit</span> <span class=\"n\">status</span>\n<span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">Makefile</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">prover9</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n<span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">Leaving</span> <span class=\"n\">directory</span> <span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/</span><span class=\"n\">Downloads</span><span class=\"bp\">/</span><span class=\"n\">crap</span><span class=\"bp\">/</span><span class=\"n\">LADR</span><span class=\"bp\">-</span><span class=\"mi\">2009</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"n\">A</span><span class=\"bp\">/</span><span class=\"n\">provers.src'</span>\n<span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">Makefile</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">all</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">2</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">bob</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">Downloads</span><span class=\"bp\">/</span><span class=\"n\">crap</span><span class=\"bp\">/</span><span class=\"n\">LADR</span><span class=\"bp\">-</span><span class=\"mi\">2009</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"n\">A</span><span class=\"bp\">$</span>\n</code></pre></div>\n<p>Any ideas?</p>",
        "id": 246748596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626886966
    },
    {
        "content": "<p>My bet is on Mario finishing the proof before Kevin can compile that stuff.</p>",
        "id": 246748685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626887002
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/HM1tHsTHROllkBPsK1JAS_OI/prover9.png\">prover9.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HM1tHsTHROllkBPsK1JAS_OI/prover9.png\" title=\"prover9.png\"><img src=\"/user_uploads/3121/HM1tHsTHROllkBPsK1JAS_OI/prover9.png\"></a></div>",
        "id": 246749096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626887169
    },
    {
        "content": "<p>now how does it work?</p>",
        "id": 246749111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626887177
    },
    {
        "content": "<p>Patrick your mistake was not using Ubuntu, with its built in python2</p>",
        "id": 246749139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626887192
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Ob9RJFDEVI0-B-pnKQmsARPJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Ob9RJFDEVI0-B-pnKQmsARPJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Ob9RJFDEVI0-B-pnKQmsARPJ/image.png\"></a></div>",
        "id": 246749232,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626887237
    },
    {
        "content": "<p>Mario, I'm very disappointed.</p>",
        "id": 246749289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626887271
    },
    {
        "content": "<p>How long is it supposed to take to find this two-line proof?</p>",
        "id": 246749809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626887541
    },
    {
        "content": "<p>can't be that slow on modern computers</p>",
        "id": 246749893,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626887590
    },
    {
        "content": "<p>The paper spends a lot of pages explaining how to tweak the parameters of the previous software.</p>",
        "id": 246749929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626887615
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/XJFcOWGifZe0W1p7PEeztcow/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XJFcOWGifZe0W1p7PEeztcow/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XJFcOWGifZe0W1p7PEeztcow/image.png\"></a></div><p>I am way too young</p>",
        "id": 246750111,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626887695
    },
    {
        "content": "<p>do you know what a megabyte is? We used to have them in the old days</p>",
        "id": 246750150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626887718
    },
    {
        "content": "<p>I used to have a 486 computer <span aria-label=\"older man\" class=\"emoji emoji-1f474\" role=\"img\" title=\"older man\">:older_man:</span></p>",
        "id": 246750181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626887742
    },
    {
        "content": "<p>is it that \"MB\" thing that <code>leanproject get-cache</code> is on about ;b</p>",
        "id": 246750198,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626887751
    },
    {
        "content": "<p>I used to have a 6502 computer :P</p>",
        "id": 246750285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626887785
    },
    {
        "content": "<p>BBC Micro? My ICT professor loved those things, he taught us programming in its BASIC dialect actually</p>",
        "id": 246750356,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626887839
    },
    {
        "content": "<p>he brought one in one day and I blew one of the caps on it...</p>",
        "id": 246750367,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626887849
    },
    {
        "content": "<p>The one before -- an Acorn Atom, with a more primitive BASIC. Back to the point, prover9 is supposed to be giving up after 60 seconds but it's just sitting there pulsating and failing to solve the goal</p>",
        "id": 246750472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626887899
    },
    {
        "content": "<p>I wonder whether McCune originally included all steps and then the journal editor asked for a shorten version.</p>",
        "id": 246750698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626888016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246749289\">said</a>:</p>\n<blockquote>\n<p>Mario, I'm very disappointed.</p>\n</blockquote>\n<p>Don't count your chickens before they hatch; I haven't seen a proof of l7 yet</p>",
        "id": 246750739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626888042
    },
    {
        "content": "<p>\"remove 50% of steps because all arguments here are clearly trivial\"</p>",
        "id": 246750743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626888043
    },
    {
        "content": "<p>Maybe there was a page number limit from the beginning, as in computer science proceedings.</p>",
        "id": 246750846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626888101
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w'</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">'</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">#</span> <span class=\"n\">label</span><span class=\"o\">(</span><span class=\"n\">non_clause</span><span class=\"o\">)</span> <span class=\"bp\">#</span> <span class=\"n\">label</span><span class=\"o\">(</span><span class=\"n\">goal</span><span class=\"o\">)</span><span class=\"bp\">.</span>  <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span><span class=\"bp\">.</span>\n<span class=\"mi\">2</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">'</span> <span class=\"bp\">=</span> <span class=\"n\">u.</span>  <span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span><span class=\"bp\">.</span>\n<span class=\"mi\">3</span> <span class=\"n\">c1</span> <span class=\"bp\">*</span> <span class=\"o\">((((</span><span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">c2'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c3</span> <span class=\"bp\">*</span> <span class=\"n\">c4</span><span class=\"o\">)</span><span class=\"bp\">'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c5</span> <span class=\"bp\">*</span> <span class=\"n\">c5'</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c3</span> <span class=\"bp\">*</span> <span class=\"n\">c1</span><span class=\"o\">))</span><span class=\"bp\">'</span> <span class=\"bp\">!=</span> <span class=\"n\">c4.</span>  <span class=\"o\">[</span><span class=\"n\">deny</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)]</span><span class=\"bp\">.</span>\n<span class=\"mi\">5</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w'</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">'</span> <span class=\"bp\">=</span> <span class=\"n\">u.</span>  <span class=\"o\">[</span><span class=\"n\">para</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">),</span><span class=\"mi\">2</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">))]</span><span class=\"bp\">.</span>\n<span class=\"mi\">6</span> <span class=\"bp\">$</span><span class=\"n\">F.</span>  <span class=\"o\">[</span><span class=\"n\">resolve</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)]</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 246753038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626888956
    },
    {
        "content": "<p>My mistake was that I used \\-1 for inverse, and the terminal was full of \"hey this is not ASCII!\" errors</p>",
        "id": 246753124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626888979
    },
    {
        "content": "<p>lol does this help?</p>",
        "id": 246753383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889094
    },
    {
        "content": "<p>I also got some length otter output: <a href=\"https://gist.github.com/ericrbg/199c0679656f7a394b42dc0cf6a11fe4\">https://gist.github.com/ericrbg/199c0679656f7a394b42dc0cf6a11fe4</a></p>",
        "id": 246753467,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626889138
    },
    {
        "content": "<p>I think the only new information is that the hint <code>5 -&gt; 5</code> has been expanded to <code>para(2(a,1),2(a,1,2,1,2,1))</code></p>",
        "id": 246753500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889163
    },
    {
        "content": "<p>well Eric's answer is certainly more information</p>",
        "id": 246753612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889219
    },
    {
        "content": "<p>half of me is wondering whether these so-called \"provers\" just print out junk randomly, on the basis that humans are never going to actually check this stuff</p>",
        "id": 246753662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889263
    },
    {
        "content": "<p>yeah I have absolutely no clue what it did if I'm honest</p>",
        "id": 246753738,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626889307
    },
    {
        "content": "<p><a href=\"https://www.karlin.mff.cuni.cz/~stanovsk/math/bruck_wm.pdf\">https://www.karlin.mff.cuni.cz/~stanovsk/math/bruck_wm.pdf</a> is my favourite computer proof</p>",
        "id": 246753758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889318
    },
    {
        "content": "<p>half of the time I spent was turning the damn thing out of infix to prefix form</p>",
        "id": 246753760,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626889321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246753758\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://www.karlin.mff.cuni.cz/~stanovsk/math/bruck_wm.pdf\">https://www.karlin.mff.cuni.cz/~stanovsk/math/bruck_wm.pdf</a> is my favourite computer proof</p>\n</blockquote>\n<p>what is that trying to prove?!</p>",
        "id": 246753839,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626889347
    },
    {
        "content": "<p>Every Bruck loop with abelian inner mapping group has nilpotency class at most 2. The actual statement being proved is on the first page of the 1000 page pdf</p>",
        "id": 246753923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246753760\">said</a>:</p>\n<blockquote>\n<p>half of the time I spent was turning the damn thing out of infix to prefix form</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`</span><span class=\"o\">)</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">)</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>helps with that</p>",
        "id": 246754041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626889456
    },
    {
        "content": "<p>Then you can use <code>dsimp</code> to throw away the awful notation</p>",
        "id": 246754104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626889499
    },
    {
        "content": "<p>From the manual: \"para(47(a,1),28(a,1,2,2,1)) -- paramodulate from the clause 47 into clause 28 at the positions shown. \"</p>",
        "id": 246754557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889699
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mccune_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mccune</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mccune_group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mccune_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">mccune</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l7</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">l5</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l5</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mccune_group</span>\n</code></pre></div>\n<p>I haven't followed this thread but here's the first line</p>",
        "id": 246754559,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626889700
    },
    {
        "content": "<p>Discord FTW</p>",
        "id": 246754620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889726
    },
    {
        "content": "<p>Exactly as claimed, it is just paramodulation</p>",
        "id": 246754707,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626889774
    },
    {
        "content": "<p><del>Why does it fail without the <code>set</code> line?</del></p>",
        "id": 246754803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626889810
    },
    {
        "content": "<p>I got it first, the proof is just <code>para(2(a,1),2(a,1,2,1,2,1))</code></p>",
        "id": 246754811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889813
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 246754818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626889819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246754803\">said</a>:</p>\n<blockquote>\n<p><del>Why does it fail without the <code>set</code> line?</del></p>\n</blockquote>\n<p>I'm sure it's possible without that, with some more targeted rewrites, but it does the job :)</p>",
        "id": 246755012,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626889916
    },
    {
        "content": "<p>Next level:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l9</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246755218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626889992
    },
    {
        "content": "<p>hint: use l5 and l7</p>",
        "id": 246755234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626890003
    },
    {
        "content": "<p>A shorter version of l7 requiring less intuition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l7</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l5</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246755260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626890016
    },
    {
        "content": "<p>I had been trying with <code>convert</code> before I decided to go for the prover9 option (it was on my job list to play around with an ATP at some point in my life)</p>",
        "id": 246755384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626890060
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l9</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l7</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246755424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626890082
    },
    {
        "content": "<p>You beat me to it by a second, Eric! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 246755501,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890111
    },
    {
        "content": "<p>So <code>A -&gt; B</code> means <code>convert B</code>, <code>rw A</code>?</p>",
        "id": 246755521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626890119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246755234\">said</a>:</p>\n<blockquote>\n<p>hint: use l5 and l7</p>\n</blockquote>\n<p>this is most textbook hints summed up</p>",
        "id": 246755597,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626890152
    },
    {
        "content": "<p>I think a more faithful translation might be rewrite with the inverse of <code>A</code> at a specific place so that <code>B</code> applies</p>",
        "id": 246755602,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890154
    },
    {
        "content": "<p>But pragmatically it seems like <code>convert, rw</code> does the trick</p>",
        "id": 246755673,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890169
    },
    {
        "content": "<p>If my claim is true this should get us all the way to l15, and then we have to know what <code>:</code> means</p>",
        "id": 246755710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626890190
    },
    {
        "content": "<p><code>:</code> supposedly means simplify using that axiom</p>",
        "id": 246755774,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l10</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(((</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246755790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626890234
    },
    {
        "content": "<p>hint: 7 -&gt; 9</p>",
        "id": 246755813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626890245
    },
    {
        "content": "<p>Damn</p>",
        "id": 246755886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626890279
    },
    {
        "content": "<p>Eric's magic incantation doesn't do it :(</p>",
        "id": 246755940,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890287
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l10</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(((</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">l9</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">l7</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246756097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626890347
    },
    {
        "content": "<p>I don't know where those exacts came from, since it seems they have no requirements?</p>",
        "id": 246756115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626890355
    },
    {
        "content": "<p>What does <code>refine</code> spit out?</p>",
        "id": 246756502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626890511
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l12</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l10</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l10</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246756625,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626890544
    },
    {
        "content": "<p>Hmm that doesn't seem to work for me...</p>",
        "id": 246756815,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890640
    },
    {
        "content": "<p>I think Eric R must have implicit variables</p>",
        "id": 246757021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626890722
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l14</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">((</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [10 -&gt; 5]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l5</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l10</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246757024,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890723
    },
    {
        "content": "<p>oh I made implicits everywhere so just stick some _ s</p>",
        "id": 246757039,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626890728
    },
    {
        "content": "<p>Eric we're live streaming on the discord</p>",
        "id": 246757185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626890802
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l15</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [12 -&gt; 14 : 12]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l14</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l12</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l12</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246757211,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890813
    },
    {
        "content": "<p>Do any of these <code>exact</code>s matter?</p>",
        "id": 246757350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626890882
    },
    {
        "content": "<p>Their values don't, but they are important</p>",
        "id": 246757396,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890892
    },
    {
        "content": "<p>In <code>l15</code> after the first line it just wants that <code>y</code> is a product of two things</p>",
        "id": 246757416,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890906
    },
    {
        "content": "<p>and here <code>l12</code> says that it is, and it doesn't matter what the two things are; they just need to be given</p>",
        "id": 246757455,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626890925
    },
    {
        "content": "<p>I love that creative use of <code>convert</code>.</p>",
        "id": 246757648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626891034
    },
    {
        "content": "<p>Yes, it reminded me of that comment that Lean was supposed to be bridging the gap between ATP and ITP</p>",
        "id": 246757708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626891065
    },
    {
        "content": "<p>Of course we know that unification is a huge crucial piece of the puzzle. But we're not used it seeing it used in such a spectacular way.</p>",
        "id": 246757836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626891126
    },
    {
        "content": "<p>Let me ping <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> who wrote <code>convert</code> (at least the original implementation, see <a href=\"#narrow/stream/113488-general/topic/apply.20with.20new.20equality.20goals\">this thread</a>).</p>",
        "id": 246758294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626891379
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l17</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [15 → 5 : 5]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">l5</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l15</span> <span class=\"n\">v</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246758453,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626891471
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l19</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [17 → 15]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l15</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">l17</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'll stop with the constant updates, but I'm working on this in the discord with Kevin</p>",
        "id": 246758632,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626891570
    },
    {
        "content": "<p>How many lines are there total?</p>",
        "id": 246760307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626892366
    },
    {
        "content": "<p>Getting past 100, but I'm also adding notations and simp lemmas to make the proofs easier</p>",
        "id": 246760391,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626892395
    },
    {
        "content": "<p>(I mean in the LaTeX proof not lines of lean code, to be clear)</p>",
        "id": 246760471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626892440
    },
    {
        "content": "<p>is the plan to PR this to mathlib?</p>",
        "id": 246761169,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626892770
    },
    {
        "content": "<p>It probably would be nice in <code>archive</code> if it doesn't make it to <code>src</code></p>",
        "id": 246761240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626892803
    },
    {
        "content": "<p>(oh, I see Patrick already suggested <code>archive</code> at the start of the thread)</p>",
        "id": 246761341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626892842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> thanks for pinging me! It is indeed a pretty cool use of <code>convert</code>. I wonder if we could avoid all those superfluous <code>_</code>. We could make it more like <code>apply</code> and just automatically insert all the <code>_</code> it will take</p>",
        "id": 246762047,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1626893198
    },
    {
        "content": "<p>Yes, my main criticism of <code>convert</code> is that if you don't give enough arguments you get a nonsense goal state <del>that doesn't even typecheck</del> like <code>a + b = b + a = ∀ c, c + b = b + a</code></p>",
        "id": 246766203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626895322
    },
    {
        "content": "<p>Well <em>technically</em> it does typecheck, they're both Props</p>",
        "id": 246766633,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626895549
    },
    {
        "content": "<p>Ah you're right, the case I'm thinking of has another =</p>",
        "id": 246770144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626897223
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mccune_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mccune</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mccune_group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mccune_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">mccune</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l7</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l5</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l9</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l7</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l10</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(((</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">l9</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">l7</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l12</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [10 -&gt; 10]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l10</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l10</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l14</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">((</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [10 -&gt; 5]</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">convert</span> <span class=\"n\">l5</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l10</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l15</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [12 -&gt; 14 : 12]</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">convert</span> <span class=\"n\">l14</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l12</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l12</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l17</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [15 → 5 : 5]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">l5</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l15</span> <span class=\"n\">v</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l19</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [17 → 15]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l15</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">l17</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l20</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [17 → 10]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l22</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [17 → 5]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l25</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹*</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">w</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [19 → 7:20]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l32</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">⁻¹*</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [17 → 22]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l34</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹*</span><span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹*</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [17-&gt;25]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l36</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹=</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [5-&gt;25]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l44</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹*</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [36 -&gt;34:36]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l48</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [44-&gt;17]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l52</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [52-&gt;10:20]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l57</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹*</span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹=</span><span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [52-&gt;10:20]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l62</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">⁻¹=</span><span class=\"n\">x</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">--[32-&gt;57]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l65</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">⁻¹=</span><span class=\"n\">x</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">--[5-&gt;57:52]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l76</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">⁻¹=</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [57-&gt;62:57]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l88</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [65-&gt;32]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l92</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹=</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [65-&gt;20:12,76]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l116</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- 76-32:76,88</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l126</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- 76-&gt;5:92</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l201</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- 126 -&gt; 126</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l207</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"c1\">-- 19 -&gt; 126:52,201</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l215</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹*</span><span class=\"n\">u</span><span class=\"o\">)))</span><span class=\"bp\">=</span><span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"c1\">-- 5-&gt;126:207,201</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l227</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [126-&gt;36:207,52]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l229</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹=</span><span class=\"n\">x</span><span class=\"bp\">⁻¹*</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- 126-&gt;25:227,207</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l239</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">⁻¹*</span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [126-&gt;5:207,229,229,227,227]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l260</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [215-&gt;215:229,229,229,227,227,239]</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">mccune_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">introI</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv.inv</span><span class=\"o\">,</span>\n    <span class=\"n\">mccune</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">group</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">introI</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">l260</span><span class=\"o\">,</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">arbitrary</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">l207</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l116</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">npow</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">npow_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">npow_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv.inv</span><span class=\"o\">,</span>\n    <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">div_eq_mul_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">gpow</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">gpow_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">gpow_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">gpow_neg'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- there should be a constructor which fills in the last 9 sorries</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"gr\">sorry</span> <span class=\"kd\">end</span> <span class=\"o\">},</span> <span class=\"c1\">-- unfortunately `l17` is mul_right_inv</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"gr\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"c1\">-- need \"two groups structures on G are equal iff they have the same mul\"</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"c1\">-- need an ext for mccune_groups</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mccune_group</span>\n</code></pre></div>",
        "id": 246776473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626900539
    },
    {
        "content": "<p>Bhavik is up to l126</p>",
        "id": 246776530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626900571
    },
    {
        "content": "<p>Why didn't I need all that junk in the group constructor <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246744946\">here</a>?</p>",
        "id": 246776576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626900603
    },
    {
        "content": "<p>I don't think I'm on a relevantly old mathlib</p>",
        "id": 246776643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626900629
    },
    {
        "content": "<p>I just used the bottom but one hole-filler</p>",
        "id": 246776686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626900655
    },
    {
        "content": "<p>oh it's because </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">gpow</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">gpow_rec</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gpow_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">gpow</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">.</span> <span class=\"n\">try_refl_tac</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gpow_succ'</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">gpow</span> <span class=\"o\">(</span><span class=\"n\">int.of_nat</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">gpow</span> <span class=\"o\">(</span><span class=\"n\">int.of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span>  <span class=\"bp\">.</span> <span class=\"n\">try_refl_tac</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gpow_neg'</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">gpow</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">gpow</span> <span class=\"n\">n.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">.</span> <span class=\"n\">try_refl_tac</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>they all have default values, which \"generate a skeleton for the structure under construction\" doesn't ignore.</p>",
        "id": 246776860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626900735
    },
    {
        "content": "<p>you shouldn't need an ext for mccune groups, it's trivial</p>",
        "id": 246776882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626900752
    },
    {
        "content": "<p>cases, cases, refl should work</p>",
        "id": 246776905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626900762
    },
    {
        "content": "<p>Bhavik's code diverges from this too, I think I'll leave it here and he can post his final answer later when he's cracked 126</p>",
        "id": 246777058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626900839
    },
    {
        "content": "<p>Pretty mucky:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mccune_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mccune</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mccune_group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mccune_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">mccune</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l7</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l5</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">)]</span> <span class=\"n\">using</span> <span class=\"n\">l5</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l9</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l5</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span><span class=\"o\">)]</span> <span class=\"n\">using</span> <span class=\"n\">l7</span> <span class=\"n\">x</span> <span class=\"n\">w</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l10</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l9</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l7</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l12</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l10</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l10</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l14</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [10 -&gt; 5]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l5</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l10</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l15</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l12</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l14</span> <span class=\"n\">x</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l17</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [15 → 5 : 5]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">l5</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l15</span> <span class=\"n\">v</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">default</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l17'</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">l17</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l10'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">l10</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l20'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l10'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l17'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l17'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l5'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">l5</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l22'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [17 → 5]</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">l5'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l7'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">l7</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l25'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [19 → 7:20]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l7'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l17'</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">l20'</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l32'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [17 → 22]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l22'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l34'</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l25'</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l36'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l5'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l25'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l44'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l36'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l34'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l48'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">l44'</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l52'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l48'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l44'</span> <span class=\"n\">x</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l57'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l52'</span><span class=\"o\">,</span> <span class=\"n\">l20'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l10'</span> <span class=\"n\">u</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l62'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l32'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">l57'</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l76'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l57'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l62'</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l88'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l76'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l32'</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l116'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">l88'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l76'</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l88'</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this.symm</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">one_inv_inv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l48'</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">one_inv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l88'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l92'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l36'</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l126'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">l5'</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">l17'</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l92'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l201</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l126'</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l126'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l207'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l201</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l126'</span> <span class=\"n\">z</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l227</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l201</span> <span class=\"mi\">1</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_mul</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l17'</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l229</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"c1\">-- 126-&gt;25:227,207</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l126'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">l25'</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">thingy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [126-&gt;5:207,229,229,227,227]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">l5'</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_inv</span><span class=\"o\">,</span> <span class=\"n\">l17'</span><span class=\"o\">,</span> <span class=\"n\">l207'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l229</span><span class=\"o\">,</span> <span class=\"n\">l227</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l239</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [126-&gt;5:207,229,229,227,227]</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l229</span><span class=\"o\">,</span> <span class=\"n\">l126'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l5'</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l260</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [215-&gt;215:229,229,229,227,227,239]</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">l239</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">thingy</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">l260</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">inv_mul</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mccune_group</span>\n</code></pre></div>",
        "id": 246808105,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626928613
    },
    {
        "content": "<p>For some of the later ones I made new lemmas instead of the ones from the paper because they made more sense to me</p>",
        "id": 246808113,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626928644
    },
    {
        "content": "<p>Thank you very much for your patience Bhavik. This stuff is pretty fascinating in its own very weird way.</p>",
        "id": 246825393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626946091
    },
    {
        "content": "<p>Interesting enough for the archive, right?</p>",
        "id": 246826314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626946753
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8399\">#8399</a></p>",
        "id": 246861699,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626967069
    },
    {
        "content": "<p>For fun I did the abelian version too (theorem 2 from the paper Patrick linked):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">mccune_comm_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mccune</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mccune_comm_group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mccune_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l10</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mccune</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mccune</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l12</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mccune</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mccune</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l16</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mccune</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l10</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l18</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l10</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l12</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l23</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l10</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l18</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l37</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l23</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l16</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l39</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l12</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">l16</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l41</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mccune</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l16</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l43</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l39</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l12</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l51</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l41</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l18</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l53</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l37</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l37</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l55</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l53</span><span class=\"o\">,</span> <span class=\"n\">l37</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">l10</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l58</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l37</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mccune</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l60</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l37</span><span class=\"o\">,</span> <span class=\"n\">l55</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mccune</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l64</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l55</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l51</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l85</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l43</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l64</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l92</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l64</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l94</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l60</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l101</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l92</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"n\">y</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l108</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l92</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l37</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l114</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l94</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l136</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l114</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l101</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l172</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l58</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">l43</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l184</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l92</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">l172</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l244</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l184</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">l108</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"sd\">/-- Every McCune comm group is a comm group. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">l244</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l114</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">l108</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l108</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">l136</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l108</span><span class=\"o\">,</span> <span class=\"n\">l114</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mccune_comm_group</span>\n</code></pre></div>",
        "id": 246879236,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626974805
    },
    {
        "content": "<p>I never fully believed these axioms until you did this! Amazing work.</p>",
        "id": 246882601,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626976368
    },
    {
        "content": "<p>You didn't believe the computer??</p>",
        "id": 246882647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626976388
    },
    {
        "content": "<p>I had my doubts. Perhaps if I’d read the literature, they would have evaporated. (Or not!)</p>",
        "id": 246882831,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626976452
    },
    {
        "content": "<p>Since I'm on a roll with these, I'm now doing the Robbins conjecture too in the discord</p>",
        "id": 246885255,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626977585
    },
    {
        "content": "<p>If you are taking requests, you should try doing <a href=\"http://us.metamath.org/mpeuni/meredith.html\">Meredith's axiom</a> and <a href=\"https://www.wolfram.com/language/12/algebraic-computation/the-shortest-possible-axiom-for-boolean-logic.html\">Wolfram's axiom</a> too</p>",
        "id": 246893351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626981740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you know if there is such a minimal axiom for rings?</p>",
        "id": 246893665,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626981921
    },
    {
        "content": "<p>Wanna create <code>archive/minimal_axiom/</code>? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 246894364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626982305
    },
    {
        "content": "<p>When I started with Lean, I did the much easier independent vector space axioms from <a href=\"https://www.cambridge.org/core/journals/mathematical-gazette/article/abs/independent-axioms-for-vector-spaces/0D49E4127F5F5EBC788A4AF36E95F07E\">https://www.cambridge.org/core/journals/mathematical-gazette/article/abs/independent-axioms-for-vector-spaces/0D49E4127F5F5EBC788A4AF36E95F07E#</a></p>",
        "id": 246895568,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1626982935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I wouldn't be surprised if there is one out there, but I haven't heard of any</p>",
        "id": 246896152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626983279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246882601\">said</a>:</p>\n<blockquote>\n<p>I never fully believed these axioms until you did this! Amazing work.</p>\n</blockquote>\n<p>Once you start to think a bit about the proof, the unbelievable part is that any simplification will occur without knowing associativity. Even the first lemma is still a miracle for me (you can see more information using the version of the proof that I posted in the PR review).</p>",
        "id": 246898815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626984505
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">robbins_conjecture</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_compl</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_commutative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">⊔</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">is_associative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">⊔</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">robbins_axiom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>works! It's about 5x longer than the McCune group and about 10x longer than the McCune abelian group versions (and roughly the same scale of latex proof and time spent)</p>",
        "id": 246938807,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627014537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/McCune's.20axiom/near/246745641\">said</a>:</p>\n<blockquote>\n<p>The proof says that 7 is obtained by paramodulation of 5 into 5. I challenge folks to figure out what that means</p>\n</blockquote>\n<p>This is a paramodulation (or superposition) inference from and to the same clause. E.g. if you have <code>a = b \\/ p a</code>, doing such a paramodulation might yield <code>a = b \\/ a = b \\/ p b</code>.</p>",
        "id": 247089924,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1627155769
    }
]