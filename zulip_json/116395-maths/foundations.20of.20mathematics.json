[
    {
        "content": "<p>I spent some time over the last couple of days learning about Voevodsky's work in type theory. I found this paper <a href=\"https://arxiv.org/abs/1711.01477\" target=\"_blank\" title=\"https://arxiv.org/abs/1711.01477\">https://arxiv.org/abs/1711.01477</a> by Dan Grayson quite illuminating.</p>",
        "id": 124875861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348408
    },
    {
        "content": "<p>quite high</p>",
        "id": 124875865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523348419
    },
    {
        "content": "<p>It seems to me that univalent foundations is similar to, but not the same as, DTT</p>",
        "id": 124875869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348440
    },
    {
        "content": "<p><code>a = b</code> is not a Prop in univalent foundations</p>",
        "id": 124875870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348452
    },
    {
        "content": "<p>In fact there seems to me to be no impredicative Prop universe in univalent foundations</p>",
        "id": 124875877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348479
    },
    {
        "content": "<p>What happened to your project of documenting what's in mathlib?</p>",
        "id": 124875879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523348487
    },
    {
        "content": "<p>there are just some universes, and a Prop is basically defined to be a subsingleton</p>",
        "id": 124875882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348494
    },
    {
        "content": "<p>But the claim is the same as in Lean -- \"we can use this set-up as a way of doing all of maths\"</p>",
        "id": 124875923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348527
    },
    {
        "content": "<p>kenny would love hott</p>",
        "id": 124875924,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523348544
    },
    {
        "content": "<blockquote>\n<p>kenny would love hott</p>\n</blockquote>\n<p>nope</p>",
        "id": 124875926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523348560
    },
    {
        "content": "<p>One major weakness (possibly only temporary) is that the model you're supposed to carry around is that a type can be thought of as a topological space</p>",
        "id": 124875928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348569
    },
    {
        "content": "<p>but apparently they can't construct the n-sphere from the axioms</p>",
        "id": 124875932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348585
    },
    {
        "content": "<p>so they add n-spheres as new inductive types</p>",
        "id": 124875935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348591
    },
    {
        "content": "<p>and then they can't prove the theory is consistent</p>",
        "id": 124875936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348598
    },
    {
        "content": "<p>This does not bode well, as far as I can see.</p>",
        "id": 124875937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348606
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>kenny would love hott</p>\n</blockquote>\n<p>nope</p>\n</blockquote>\n<p>are you a fair-weather constructivist</p>",
        "id": 124875938,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523348606
    },
    {
        "content": "<p>I also re-watched Voevodsky's Newton Institute talk from last yeat</p>",
        "id": 124875941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348625
    },
    {
        "content": "<p>year</p>",
        "id": 124875944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348628
    },
    {
        "content": "<p>abuse of topology</p>",
        "id": 124875945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523348637
    },
    {
        "content": "<p>and his discussion about how he tried to persuade Suslin to re-prove some theorem of his constructively</p>",
        "id": 124875984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348653
    },
    {
        "content": "<p>because Voevodsky wanted to prove an old theorem of Voevodsky constructively in this univalent foundations way</p>",
        "id": 124875985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348681
    },
    {
        "content": "<p>but my impression was that Suslin had no interest in the question (perhaps unsurprisingly, as I know essentially 0 mathematicians who care about constructive maths)</p>",
        "id": 124875994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348718
    },
    {
        "content": "<p>1</p>",
        "id": 124875995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523348743
    },
    {
        "content": "<p>and it seemed that Voevodsky was losing interest in the whole project of checking the proof anyway (or perhaps he was stuck)</p>",
        "id": 124875996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348748
    },
    {
        "content": "<p>Alessio Corto</p>",
        "id": 124875997,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523348750
    },
    {
        "content": "<p>Alessio Corti</p>",
        "id": 124875998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348757
    },
    {
        "content": "<p>sure</p>",
        "id": 124876037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523348778
    },
    {
        "content": "<p>To me it settles the question: HoTT is constructive ⇒ I don't care</p>",
        "id": 124876039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523348780
    },
    {
        "content": "<p>I think Voevodsky is something else</p>",
        "id": 124876042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348799
    },
    {
        "content": "<p>I think HoTT might be a third thing</p>",
        "id": 124876045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348809
    },
    {
        "content": "<p>I'm not sure though</p>",
        "id": 124876046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348811
    },
    {
        "content": "<p>Is Univalent Foundations = HoTT? I'm not so sure</p>",
        "id": 124876049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348821
    },
    {
        "content": "<p>More precisely: it's constructive ⇒ I think it's irrelevant to most mathematics</p>",
        "id": 124876060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523348847
    },
    {
        "content": "<p>I completely agree.</p>",
        "id": 124876062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348861
    },
    {
        "content": "<p>So here are some questions.</p>",
        "id": 124876064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348864
    },
    {
        "content": "<p>We know that Lean will allow classical logic, and to be quite frank if it didn't allow it then I definitely would not be here.</p>",
        "id": 124876103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348887
    },
    {
        "content": "<p>I should say Lean 3, because at some point one has to talk about what Lean 2 was</p>",
        "id": 124876104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348902
    },
    {
        "content": "<p>Univalent Foundations seems to have been implemented in Coq, but there are lots of rules about commands in Coq which you are _not allowed to use_ in Univalent Foundations</p>",
        "id": 124876106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348940
    },
    {
        "content": "<p>e.g. you are not allowed to make new inductive types</p>",
        "id": 124876112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348955
    },
    {
        "content": "<p>you have to stick to the ones they made in the core files</p>",
        "id": 124876116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348976
    },
    {
        "content": "<p>But I should get to the point.</p>",
        "id": 124876118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348987
    },
    {
        "content": "<p>If I am interested in mathematics, done in classical logic</p>",
        "id": 124876119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523348997
    },
    {
        "content": "<p>then what are my options for doing this in type theory?</p>",
        "id": 124876159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349007
    },
    {
        "content": "<p>DTT I know, because Lean 3</p>",
        "id": 124876163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349014
    },
    {
        "content": "<p>HoTT?</p>",
        "id": 124876164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349017
    },
    {
        "content": "<p>Univalent Foundations?</p>",
        "id": 124876165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349022
    },
    {
        "content": "<p>Voevodsky is high</p>",
        "id": 124876167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349037
    },
    {
        "content": "<p>And if there is more than one option, why should I choose Lean 3?</p>",
        "id": 124876169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349040
    },
    {
        "content": "<p>that settles it</p>",
        "id": 124876170,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349040
    },
    {
        "content": "<p>Voevodsky is dead :-(</p>",
        "id": 124876171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349048
    },
    {
        "content": "<p>oh rip</p>",
        "id": 124876177,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349069
    },
    {
        "content": "<p>there are very few popular dtt languages; you've already listed two, coq and lean, and there is also agda and idris</p>",
        "id": 124876186,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349104
    },
    {
        "content": "<p>i think ats might also be based on dtt</p>",
        "id": 124876227,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349134
    },
    {
        "content": "<p>basically the only other contender is not based on dtt at all, which is isabelle</p>",
        "id": 124876229,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349163
    },
    {
        "content": "<p>how is she doing</p>",
        "id": 124876230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349180
    },
    {
        "content": "<p>It is worth noting that both Agda and Idris are primarily programming languages. Unlike Lean and Coq.</p>",
        "id": 124876287,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349266
    },
    {
        "content": "<p>isabelle is quite popular amongst mathematicians</p>",
        "id": 124876298,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349311
    },
    {
        "content": "<p>because it ain't constructive?</p>",
        "id": 124876300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349328
    },
    {
        "content": "<p>because they press Sledgehammer butan'</p>",
        "id": 124876302,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349340
    },
    {
        "content": "<p>What are Isabelle's foundations?</p>",
        "id": 124876303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349341
    },
    {
        "content": "<p>Isabelle is a metalanguage, you can instantiate it with whatever you feel like. Isabelle/HOL is the most popular.</p>",
        "id": 124876308,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349361
    },
    {
        "content": "<p>i know little of isabelle. but my impression is most people work in set theory</p>",
        "id": 124876351,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349413
    },
    {
        "content": "<p>This is what Hales used for Kepler, right?</p>",
        "id": 124876352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349423
    },
    {
        "content": "<p>one should make a proof-assistant based on ZFC</p>",
        "id": 124876358,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349461
    },
    {
        "content": "<p>As in ZF(C)? Mmm, I've always thought it's mostly just HOL.</p>",
        "id": 124876360,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349467
    },
    {
        "content": "<p>that's already been done 30 years ago</p>",
        "id": 124876361,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349469
    },
    {
        "content": "<p>who?</p>",
        "id": 124876366,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349476
    },
    {
        "content": "<p>Apparently proof assistants based on ZFC are hard to use</p>",
        "id": 124876369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349477
    },
    {
        "content": "<p>I think Mario told me this</p>",
        "id": 124876405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349483
    },
    {
        "content": "<p>the original big one was called mizar</p>",
        "id": 124876407,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349485
    },
    {
        "content": "<blockquote>\n<p>Apparently proof assistants based on ZFC are hard to use</p>\n</blockquote>\n<p>another reason why ZFC is BS</p>",
        "id": 124876410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349499
    },
    {
        "content": "<p>I believe Isabelle/ZFC is also a thing.</p>",
        "id": 124876411,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349501
    },
    {
        "content": "<p>i recall sebastian gouzel was also slightly annoyed with isabelle</p>",
        "id": 124876412,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349523
    },
    {
        "content": "<p>something about it being impossible to define the adeles</p>",
        "id": 124876414,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349530
    },
    {
        "content": "<p>(whatever they may be)(</p>",
        "id": 124876416,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349532
    },
    {
        "content": "<p>What do you mean by impossible?</p>",
        "id": 124876419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349541
    },
    {
        "content": "<p>Kenny is supposed to be defining the adeles in Lean</p>",
        "id": 124876425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349549
    },
    {
        "content": "<p>once he's finished revising his mechanics</p>",
        "id": 124876426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349554
    },
    {
        "content": "<p>discussion of the adeles is beyond my pay grade</p>",
        "id": 124876427,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span>:</p>\n<blockquote>\n<p>i think ats might also be based on dtt</p>\n</blockquote>\n<p><a href=\"https://groups.google.com/d/msg/ats-lang-users/k-6NMsZYllo/mePvbC3tCwAJ\" target=\"_blank\" title=\"https://groups.google.com/d/msg/ats-lang-users/k-6NMsZYllo/mePvbC3tCwAJ\">Not quite</a></p>",
        "id": 124876430,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523349560
    },
    {
        "content": "<p>There is certainly no obstruction to defining the adeles in Lean</p>",
        "id": 124876477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349608
    },
    {
        "content": "<p>There is once you don't have dependent types (a'la Isabelle).</p>",
        "id": 124876478,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349621
    },
    {
        "content": "<p>yes, iirc he said that was a major draw for him to work in dtt</p>",
        "id": 124876479,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349623
    },
    {
        "content": "<blockquote>\n<p>discussion of the adeles is beyond my pay grade</p>\n</blockquote>\n<p>it isn't quite hard to understand if you start simple, i.e. start with Q</p>",
        "id": 124876482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349633
    },
    {
        "content": "<p><a href=\"https://gitter.im/leanprover_public/Lobby?at=5a2daedfffa3e379191e9195\" target=\"_blank\" title=\"https://gitter.im/leanprover_public/Lobby?at=5a2daedfffa3e379191e9195\">https://gitter.im/leanprover_public/Lobby?at=5a2daedfffa3e379191e9195</a></p>",
        "id": 124876483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523349646
    },
    {
        "content": "<p>Kenny, the adeles of a general number field K are just (adeles of Q) tensor_Q K</p>",
        "id": 124876484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349663
    },
    {
        "content": "<p>and because you did tensor product</p>",
        "id": 124876491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349680
    },
    {
        "content": "<p>you can do adeles for a general number field</p>",
        "id": 124876493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349688
    },
    {
        "content": "<p>wonderful</p>",
        "id": 124876496,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349701
    },
    {
        "content": "<p>The adeles are an easy exercise given what we have</p>",
        "id": 124876537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349740
    },
    {
        "content": "<p>isabelle and coq currently have ::quite:: an advantage in library size</p>",
        "id": 124876538,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349743
    },
    {
        "content": "<p><strong><em>quite</em></strong></p>",
        "id": 124876539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349751
    },
    {
        "content": "<p>leaving aside isabelle, why would you use lean over coq? mostly for nicer unicode syntax</p>",
        "id": 124876540,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349763
    },
    {
        "content": "<p>But we seem to have a proof that isabelle is not suitable for all of mathematics?</p>",
        "id": 124876541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349765
    },
    {
        "content": "<p>Lean &gt; Coq -- because tactics</p>",
        "id": 124876543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349775
    },
    {
        "content": "<p>however if you wanted to jump straight into doing research mathematics, you can't in lean because mathlib is far smaller than its coq competitors</p>",
        "id": 124876552,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349797
    },
    {
        "content": "<p>far smaller than it is coq competitors</p>",
        "id": 124876556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349813
    },
    {
        "content": "<p>and I think that nicer unicode syntax, whilst this might just be superficial for CS people, will I think be important to undergraduate mathematicians</p>",
        "id": 124876560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349825
    },
    {
        "content": "<p>Coq &gt; Lean because of existing tactics. Lean &gt; Coq because of the way you write tactics.</p>",
        "id": 124876563,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349831
    },
    {
        "content": "<p>But I am playing the long game</p>",
        "id": 124876602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349849
    },
    {
        "content": "<p>So I choose Lean. However this thread was basically my attempt to review this choice.</p>",
        "id": 124876604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349867
    },
    {
        "content": "<p>If you're playing the very long game, it might still be the case Coq &gt; Lean, Ltac2 is coming.</p>",
        "id": 124876607,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349872
    },
    {
        "content": "<p>If I can understand the claim that \"Isabelle can't do the adeles\" then we can cross Isabelle off the list</p>",
        "id": 124876611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349892
    },
    {
        "content": "<p>But what about HoTT?</p>",
        "id": 124876618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349911
    },
    {
        "content": "<p>And what about UniMath?</p>",
        "id": 124876622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349927
    },
    {
        "content": "<p>hott is not ready for anything, it is a subject of research</p>",
        "id": 124876623,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349931
    },
    {
        "content": "<p>And this does not apply to DTT</p>",
        "id": 124876624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349943
    },
    {
        "content": "<p>because Coq</p>",
        "id": 124876625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523349945
    },
    {
        "content": "<p>let's do things over NBG</p>",
        "id": 124876627,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349957
    },
    {
        "content": "<p>or just second order peano arithmetic</p>",
        "id": 124876667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349967
    },
    {
        "content": "<p>The original univalence axiom is not constructive. There's cubical type theory extension thereof tho: <a href=\"https://arxiv.org/abs/1611.02108\" target=\"_blank\" title=\"https://arxiv.org/abs/1611.02108\">https://arxiv.org/abs/1611.02108</a></p>",
        "id": 124876669,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523349972
    },
    {
        "content": "<p>dtt without any funny additions has been proven sound</p>",
        "id": 124876670,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523349976
    },
    {
        "content": "<p>sound!</p>",
        "id": 124876672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349986
    },
    {
        "content": "<p>sound in what?</p>",
        "id": 124876673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523349987
    },
    {
        "content": "<p>as in you can do useful things with it and not summon false from anywhere</p>",
        "id": 124876674,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350001
    },
    {
        "content": "<p>how do you even define sound</p>",
        "id": 124876675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523350002
    },
    {
        "content": "<p>by \"proven sound\" you mean \"relative to ZFC + existence of infinitely many inaccessible cardinals\" right?</p>",
        "id": 124876676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Funny you should say that. My table currently contains \"Subsystems of second order arithmetic\".</p>",
        "id": 124876679,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350012
    },
    {
        "content": "<p>You can't prove that anything is sound, in some sense</p>",
        "id": 124876680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350013
    },
    {
        "content": "<p>exactly</p>",
        "id": 124876688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523350025
    },
    {
        "content": "<p>without assuming consistency of some less-likely-to-be-sound system</p>",
        "id": 124876693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350040
    },
    {
        "content": "<p>forget about the reals</p>",
        "id": 124876742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523350105
    },
    {
        "content": "<p>just do peano arithmetic</p>",
        "id": 124876744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523350109
    },
    {
        "content": "<p>and then embed ZFC within</p>",
        "id": 124876746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523350115
    },
    {
        "content": "<p>and then Goedel encode everything.</p>",
        "id": 124876747,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350119
    },
    {
        "content": "<p>and then you can do the reals</p>",
        "id": 124876748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523350120
    },
    {
        "content": "<p>i think for undergraduates who are not trying to do research mathematics, lean is nicer for reading and writing tactics (though i doubt they will get around to writing tactics)</p>",
        "id": 124876761,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350156
    },
    {
        "content": "<p>Actually, Coq has much nicer tactic-description syntax still.</p>",
        "id": 124876769,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350187
    },
    {
        "content": "<p>coq is the winner if you're trying to make something that will be around for years</p>",
        "id": 124876772,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350199
    },
    {
        "content": "<p>it has been around for decades</p>",
        "id": 124876814,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350205
    },
    {
        "content": "<p>feit thompson e.g.</p>",
        "id": 124876823,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523350213
    },
    {
        "content": "<p>You can pattern match on goals themselves for example. There's no obscure monad with arbitrary <code>pexpr</code> transforming functions.</p>",
        "id": 124876825,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350240
    },
    {
        "content": "<p>i think writing tactics is beyond most mathematician's interest</p>",
        "id": 124876835,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350269
    },
    {
        "content": "<p>realistically speaking</p>",
        "id": 124876837,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350275
    },
    {
        "content": "<p>Realistically speaking, using Lean is beyond most mathematician's interest :P.</p>",
        "id": 124876842,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350291
    },
    {
        "content": "<p>also true</p>",
        "id": 124876845,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350302
    },
    {
        "content": "<p>i think this has a sadder part though</p>",
        "id": 124876848,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350313
    },
    {
        "content": "<p>using Lean is beyond most CS peoeple interest as well</p>",
        "id": 124876851,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350320
    },
    {
        "content": "<p>well, most cs majors would rather have a tooth pulled than work with something that reminds them of their undergraduate discrete math course</p>",
        "id": 124876901,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350365
    },
    {
        "content": "<p>most people studying CS want to be \"programmers\", there's no clear distinction between CS and software engineering in academia, for worse or worse</p>",
        "id": 124876956,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350452
    },
    {
        "content": "<p>I agree about tactics. For now.</p>",
        "id": 124876958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350489
    },
    {
        "content": "<p>But I am going to make mathematicians interested in Lean.</p>",
        "id": 124876961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350499
    },
    {
        "content": "<p>if you split the two cleanly then academic CS may as well be in the math department along with the statisticians</p>",
        "id": 124876964,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350506
    },
    {
        "content": "<p>and logicians</p>",
        "id": 124876970,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350534
    },
    {
        "content": "<blockquote>\n<p>But I am going to make mathematicians interested in Lean.</p>\n</blockquote>\n<p>Then we need more documentation, for instance your old project of describing mathlib</p>",
        "id": 124876974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523350551
    },
    {
        "content": "<p>oh yeah sorry Patrick I didn't respond to your earlier question</p>",
        "id": 124877016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350573
    },
    {
        "content": "<p>I am still trying to figure out all the finite stuff</p>",
        "id": 124877019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350596
    },
    {
        "content": "<p>but multiset.lean is so long</p>",
        "id": 124877022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350603
    },
    {
        "content": "<p>My blog post about induction was just some consequence of me trying to understand finite stuff</p>",
        "id": 124877033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350651
    },
    {
        "content": "<p>For mathematicians, finite sets are so important and foundational</p>",
        "id": 124877035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350665
    },
    {
        "content": "<p>and I found them very hard to do in DTT</p>",
        "id": 124877036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350671
    },
    {
        "content": "<p>but I am slowly getting on top of them</p>",
        "id": 124877038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> well we then need to communicate better what to expect in a CS course at least... it is as you said, tooth extraction wins over discrete math for many students I teach...</p>",
        "id": 124877039,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350677
    },
    {
        "content": "<p>My middle child is a budding CS student and he was moaning about discrete maths only 2 days ago</p>",
        "id": 124877078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350711
    },
    {
        "content": "<p>surely he knows better than to moan about maths to you, haha</p>",
        "id": 124877082,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523350735
    },
    {
        "content": "<p>:-)</p>",
        "id": 124877084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350739
    },
    {
        "content": "<p>I know I'm always writing the same thing, but did you read that Coq bigoperator paper?</p>",
        "id": 124877085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523350740
    },
    {
        "content": "<p>I was reading it yesterday</p>",
        "id": 124877091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350749
    },
    {
        "content": "<p>I learnt some stuff</p>",
        "id": 124877093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350757
    },
    {
        "content": "<p>For example I didn't really know how to prove that sum from 0 to n of f(i) equalled sum from 0 to n of f(n-i)</p>",
        "id": 124877095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350780
    },
    {
        "content": "<p>but I can now see a nice way of doing it using bigoperators</p>",
        "id": 124877099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523350790
    },
    {
        "content": "<p>Discrete math was one of my favorite undergrad courses.</p>",
        "id": 124877102,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523350801
    },
    {
        "content": "<p>I teach Java to students that had compulsory discrete math one semester prior. They think I'm evil when I want them to, and I quote, \"remember what properties equivalence relations have\"... :-\\</p>",
        "id": 124877154,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523350882
    },
    {
        "content": "<p>In summary then, apparently HoTT isn't ready, UniMath I am still unsure about, Isabelle has problems with adeles, Mizar didn't catch on for some reason, so there's only DTT left?</p>",
        "id": 124877208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351036
    },
    {
        "content": "<p>And if it turns out that Coq &gt; Lean then I just switch to Coq</p>",
        "id": 124877248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351047
    },
    {
        "content": "<p>that is a bonus. if lean ever dies everything you've learnt moves easily over to coq</p>",
        "id": 124877250,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351078
    },
    {
        "content": "<p>Can I write a regular expression which turns all my Lean proofs into Coq proofs?</p>",
        "id": 124877260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351109
    },
    {
        "content": "<p>that's a little ambitious :)</p>",
        "id": 124877265,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351126
    },
    {
        "content": "<p>Oh Ok</p>",
        "id": 124877266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351130
    },
    {
        "content": "<p>I don't know what you CS guys can do</p>",
        "id": 124877267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351138
    },
    {
        "content": "<p>I don't think it's a completely ridiculous idea.</p>",
        "id": 124877310,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523351170
    },
    {
        "content": "<p>i mean, it's theoretically possible to write a transpiler. but who would do the work?</p>",
        "id": 124877318,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351191
    },
    {
        "content": "<p>Lean advantages over Coq are not only about unicode. You also get better overall ergonomics. And, most of all, less constructive stuff.</p>",
        "id": 124877329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523351225
    },
    {
        "content": "<p>And <em>much</em> better documentation</p>",
        "id": 124877335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523351242
    },
    {
        "content": "<p>How is less constructive stuff a good thing?!</p>",
        "id": 124877336,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523351243
    },
    {
        "content": "<p>It's a good thing for mathematics, not for everything</p>",
        "id": 124877340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523351260
    },
    {
        "content": "<p>well.. lean, instead of having less constructive stuff, just has _less_ stuff :)</p>",
        "id": 124877341,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351260
    },
    {
        "content": "<p>From what I understand, in Coq you need to spend more energy fighting constructivism</p>",
        "id": 124877382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523351296
    },
    {
        "content": "<p>In Dan Grayson's article he argues that constructive maths is better than normal maths because constructive maths is a generalisation of normal maths</p>",
        "id": 124877385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351317
    },
    {
        "content": "<p>I was like \"...\"</p>",
        "id": 124877386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351329
    },
    {
        "content": "<p>I should tell all the group theorists I know to move into monoid theory</p>",
        "id": 124877390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351344
    },
    {
        "content": "<p>Exactly what I was about to write</p>",
        "id": 124877393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523351352
    },
    {
        "content": "<p>let's all do monoids!</p>",
        "id": 124877395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523351361
    },
    {
        "content": "<p>actually let's just do set theory</p>",
        "id": 124877396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351370
    },
    {
        "content": "<p>who cares about structure</p>",
        "id": 124877398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351376
    },
    {
        "content": "<p>we have the classification theorem already</p>",
        "id": 124877399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351395
    },
    {
        "content": "<p>each one bijects with a unique cardinal</p>",
        "id": 124877446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351410
    },
    {
        "content": "<p>so off we go</p>",
        "id": 124877447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351415
    },
    {
        "content": "<p>this is surprisingly reminiscent of static vs dynamic typing discussion</p>",
        "id": 124877448,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523351419
    },
    {
        "content": "<p>also, unimath is basically hott</p>",
        "id": 124877449,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351421
    },
    {
        "content": "<p>unimath is dtt + univalence</p>",
        "id": 124877450,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351428
    },
    {
        "content": "<p>What is this documentation comment Patrick?</p>",
        "id": 124877451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351435
    },
    {
        "content": "<p>and then a bunch of mathematics</p>",
        "id": 124877452,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351437
    },
    {
        "content": "<p>I thought Coq had some big chunky tomes</p>",
        "id": 124877454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351452
    },
    {
        "content": "<p>like, actual math, like i recall seeing a construction of the reals using dedekind cuts</p>",
        "id": 124877455,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351458
    },
    {
        "content": "<p>so unimath is basically mathlib + univalence</p>",
        "id": 124877463,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351480
    },
    {
        "content": "<p>equality is not a prop in unimath</p>",
        "id": 124877464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351492
    },
    {
        "content": "<p>apparently</p>",
        "id": 124877465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351500
    },
    {
        "content": "<p>equality in unimath seems more like \\equiv in Lean</p>",
        "id": 124877466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351517
    },
    {
        "content": "<p>if i knew more homotopy theory i'd feel more eager to say things about hott :)</p>",
        "id": 124877508,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523351559
    },
    {
        "content": "<blockquote>\n<p>What is this documentation comment Patrick?</p>\n</blockquote>\n<p>Coq has <em>no</em> documentation targeting mathematicians. TPIL is written for us, and beats anything I've seen about Coq by a very wide margin.</p>",
        "id": 124877561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523351664
    },
    {
        "content": "<p>yes, the big three textbooks for coq are: <a href=\"https://softwarefoundations.cis.upenn.edu\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu\">software foundations</a>, <a href=\"http://adam.chlipala.net/cpdt/\" target=\"_blank\" title=\"http://adam.chlipala.net/cpdt/\">certified programming with dependent types</a>, and <a href=\"https://www.labri.fr/perso/casteran/CoqArt/coqartF.pdf\" target=\"_blank\" title=\"https://www.labri.fr/perso/casteran/CoqArt/coqartF.pdf\">coq'art</a>. ssreflect also has a good manual <a href=\"https://math-comp.github.io/mcb/book.pdf\" target=\"_blank\" title=\"https://math-comp.github.io/mcb/book.pdf\">here</a>. notice all but the last is focused towards programmers...</p>",
        "id": 124877956,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523352391
    },
    {
        "content": "<p>SSReflect manual is clearly going in the right direction compared to the other three, but it's still much harder to read that TPIL (I tried reading it before switching to Lean).</p>",
        "id": 124878169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523352834
    },
    {
        "content": "<p>I thought that Coq also had some useful introductory tutorials. But I agree with Patrick that TPIL is a very good read for mathematicians.</p>",
        "id": 124879260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354765
    },
    {
        "content": "<p>Patrick -- I was going to write something else for mathematicians, where I enter tactic mode on page 1 and basically never leave, and also on page 1 I do mathematics rather than goofing around with logic, doing basic mathematical proofs of familiar statements like stuff involving congruences right from square 1. I show them the tactics they need and we go from there.</p>",
        "id": 124879285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354876
    },
    {
        "content": "<p>I still think that term mode is too hard for mathematicians. You clearly have a programming background. I am guessing that you were happy with lambda notation for functions before you started reading these docs.</p>",
        "id": 124879333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354924
    },
    {
        "content": "<p>I would like to suppress lambda notation for as long as possible.</p>",
        "id": 124879336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354937
    },
    {
        "content": "<p>I agree wholeheartedly with all those goals</p>",
        "id": 124879345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523354964
    },
    {
        "content": "<p>OK! Thanks for your opinion, I genuinely value it.</p>",
        "id": 124879460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523355130
    },
    {
        "content": "<p>We are both in the same sort of boat, trying to read books written for computer scientists with in some sense an \"amateur\" background (with me rather more amateurish than you when it comes to computing) but I really want to appeal to people who know no CS at all.</p>",
        "id": 124879481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523355204
    },
    {
        "content": "<p>Back to the point -- does anyone here know if one can do classical mathematics in UniMath?</p>",
        "id": 124879699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523355604
    },
    {
        "content": "<p>I think so. <a href=\"https://github.com/HoTT/HoTT/issues/299\" target=\"_blank\" title=\"https://github.com/HoTT/HoTT/issues/299\">https://github.com/HoTT/HoTT/issues/299</a></p>",
        "id": 124879899,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523356048
    },
    {
        "content": "<p>speaking of, i linked this a long time ago, but here you can see a comparison of the most popular proof languages</p>",
        "id": 124880270,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523356881
    },
    {
        "content": "<p><a href=\"http://www.cs.ru.nl/~freek/100/\" target=\"_blank\" title=\"http://www.cs.ru.nl/~freek/100/\">http://www.cs.ru.nl/~freek/100/</a></p>",
        "id": 124880271,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523356882
    },
    {
        "content": "<blockquote>\n<p>yes, the big three textbooks for coq are: <a href=\"https://softwarefoundations.cis.upenn.edu\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu\">software foundations</a>, <a href=\"http://adam.chlipala.net/cpdt/\" target=\"_blank\" title=\"http://adam.chlipala.net/cpdt/\">certified programming with dependent types</a>, and <a href=\"https://www.labri.fr/perso/casteran/CoqArt/coqartF.pdf\" target=\"_blank\" title=\"https://www.labri.fr/perso/casteran/CoqArt/coqartF.pdf\">coq'art</a>. ssreflect also has a good manual <a href=\"https://math-comp.github.io/mcb/book.pdf\" target=\"_blank\" title=\"https://math-comp.github.io/mcb/book.pdf\">here</a>. notice all but the last is focused towards programmers...</p>\n</blockquote>\n<p>I think that suggests <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> has the right idea: if you want documentation for mathematicians, we need actual mathematicians to do it.</p>",
        "id": 124891320,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523376798
    },
    {
        "content": "<p>I don't if you count Avigad as mathematician but TPIL comes very close to what we want. You only to unemphasize term mode and put more math examples.</p>",
        "id": 124891477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523377027
    },
    {
        "content": "<p>Right. What I meant is that building a theorem prover is something done by programmers so it kind of colors what they'll use the prover for in the documentation.</p>",
        "id": 124891705,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523377407
    },
    {
        "content": "<p>That's the curious difference between a prover and an accounting software. In accounting software, you do it for / with accountants / people who want to do accounting. With a prover, I have a feeling you start one when you need a prover that does stuff that the other provers don't do. You're kind of the first user of the prover so you assume the other users will want the prover for the same reason. Not that I built a prover with more than 1.5 users but ...</p>",
        "id": 124891869,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523377668
    },
    {
        "content": "<blockquote>\n<p>I don't if you count Avigad as mathematician but TPIL comes very close to what we want. You only to unemphasize term mode and put more math examples.</p>\n</blockquote>\n<p>term mode is not the enemy! i feel like if one wants to get anything done, you'll end up needing to know both modes <br>\npersonally my favorite code style for math is the isabelle style, as seen <a href=\"https://github.com/sgouezel/mathlib/blob/d4836822a625677b9f292e26fcafb4870bbf9f91/order/conditionally_complete_lattice.lean\" target=\"_blank\" title=\"https://github.com/sgouezel/mathlib/blob/d4836822a625677b9f292e26fcafb4870bbf9f91/order/conditionally_complete_lattice.lean\">https://github.com/sgouezel/mathlib/blob/d4836822a625677b9f292e26fcafb4870bbf9f91/order/conditionally_complete_lattice.lean</a></p>",
        "id": 124892093,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523378005
    },
    {
        "content": "<p>Term mode is not the enemy. But for a mathematician there are many things which you have to learn in order to work this sort of language, and term mode is somehow one of the more obscure things. Let's give them time to wrestle with how to steer this thing whilst they're proving that the square root of 2 is irrational, or whatever, in tactic mode, before telling them that lambda is no longer supposed to mean a real number.</p>",
        "id": 124892290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523378284
    },
    {
        "content": "<p>if logic and proof (jeremy's other textbook) was fully worked out in lean 3, is that something you'd be looking for?</p>",
        "id": 124892502,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523378614
    },
    {
        "content": "<p>That's less Lean and less tactic mode!</p>",
        "id": 124892633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523378857
    },
    {
        "content": "<p>I didn't write \"completely remove term mode\" but \"unemphasize\" (I don't know if this word exists but I hope what I mean is clear)</p>",
        "id": 124892634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523378859
    },
    {
        "content": "<p>ah, true. only 50% of logic and proof is lean</p>",
        "id": 124892687,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523378900
    },
    {
        "content": "<p>I know exactly what I want, and I'm going to write it myself using Jeremy's cool org mode solution for generating books</p>",
        "id": 124892690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523378906
    },
    {
        "content": "<p>I'd be happy to help in any way</p>",
        "id": 124892694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523378933
    },
    {
        "content": "<p>very awesome, i think everyone here would love to peek at it as you write it</p>",
        "id": 124892704,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523378946
    },
    {
        "content": "<p>at least i would, i read all your blog posts, hah</p>",
        "id": 124892705,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523378969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think he moved from org-mode to Restructured Text, didn't he?</p>",
        "id": 124892755,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523379014
    },
    {
        "content": "<p>In some sense the main question I have for Patrick is how to write a book which has maths like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span> and <code>lean stuff like this</code> all coloured in correctly.</p>",
        "id": 124892773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523379082
    },
    {
        "content": "<p>Simon I was basing my org claim on this</p>",
        "id": 124892777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523379100
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mkleanbook\" target=\"_blank\" title=\"https://github.com/leanprover/mkleanbook\">https://github.com/leanprover/mkleanbook</a></p>",
        "id": 124892778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523379101
    },
    {
        "content": "<p>and the fact that the files were called <code>blah.org</code></p>",
        "id": 124892816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523379123
    },
    {
        "content": "<p>This is not how TPIL is currently produced</p>",
        "id": 124892832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523379156
    },
    {
        "content": "<p>You must be right</p>",
        "id": 124892838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523379173
    },
    {
        "content": "<p>do you know how it's currently done?</p>",
        "id": 124892840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523379177
    },
    {
        "content": "<p>Sphinx</p>",
        "id": 124892848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523379187
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/theorem_proving_in_lean\" target=\"_blank\" title=\"https://github.com/leanprover/theorem_proving_in_lean\">https://github.com/leanprover/theorem_proving_in_lean</a></p>",
        "id": 124892854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523379199
    },
    {
        "content": "<p>scroll down to README</p>",
        "id": 124892861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523379212
    },
    {
        "content": "<p>that said, there is nothing wrong with mkleanbook, the issue was other people didn't want to use emacs</p>",
        "id": 124892862,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523379212
    },
    {
        "content": "<p>what about getting things <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>s</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">in maths mode</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">i</span><span class=\"mord mathit\">n</span><span class=\"mord mathit\">m</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\">s</span><span class=\"mord mathit\">m</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span></span></span></span>?</p>",
        "id": 124892869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523379241
    },
    {
        "content": "<p>(although perhaps not regular sentences, they can stay in non maths mode)</p>",
        "id": 124892913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523379261
    },
    {
        "content": "<p>Do you mean that you would format Lean code in math mode? I'd really like to see that</p>",
        "id": 124894266,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523381238
    },
    {
        "content": "<p>I mean I want to write maths and Lean code (at different times)</p>",
        "id": 124895411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523382829
    },
    {
        "content": "<p>Ideally the maths I write would look as good as LaTeX and the Lean would be coloured in correctly</p>",
        "id": 124895465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523382861
    },
    {
        "content": "<p>Ah ok! I think the setup they have for Lean documents should allow that</p>",
        "id": 124895486,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523382904
    },
    {
        "content": "<p>I'm soon going to give Pandoc a try. I heard good things about it and it looks easier to set up than Sphinx</p>",
        "id": 124895597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523383079
    },
    {
        "content": "<p>Ideally, I'd like to get to a point where I don't have to switch between writing and checking Lean and writing and checking documentation.</p>",
        "id": 124895678,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523383186
    },
    {
        "content": "<blockquote>\n<p>One major weakness (possibly only temporary) is that the model you're supposed to carry around is that a type can be thought of as a topological space<br>\nbut apparently they can't construct the n-sphere from the axioms<br>\nso they add n-spheres as new inductive types<br>\nand then they can't prove the theory is consistent<br>\nThis does not bode well, as far as I can see.</p>\n</blockquote>\n<p>As far as I am aware, HoTT + all the HITs people care about, including S^n and quotients and things, is known consistent because of the existence of simplicial set models and such. The unknown consistency claim here may be particular to Univalent Foundations, I'm not sure.</p>",
        "id": 124900412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523390581
    },
    {
        "content": "<blockquote>\n<p>Is Univalent Foundations = HoTT? I'm not so sure</p>\n</blockquote>\n<p>I think Univalent Foundations = HoTT + Propositional resizing, which means that everything you can prove is a proposition lives in the lowest universe. This is similar to Lean's <code>Prop</code> universe, but in Lean you can't prove that something lives in <code>Prop</code>, it either is or isn't by virtue of the form of the expression. Regular HoTT does not have this resizing rule, so there are \"more propositions\" in higher universes, which talk about correspondingly large objects.</p>",
        "id": 124900578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523390776
    },
    {
        "content": "<blockquote>\n<p>If I am interested in mathematics, done in classical logic<br>\nthen what are my options for doing this in type theory?</p>\n</blockquote>\n<p>I think this is the wrong question. You can do mathematics in just about any system above a certain minimum threshold of complexity, which is somewhere around second order PA. It just gets less convenient as you remove features</p>",
        "id": 124900659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523390903
    },
    {
        "content": "<blockquote>\n<p>I believe Isabelle/ZFC is also a thing.</p>\n</blockquote>\n<p>Pretty much all Isabelle work is done in Isabelle/HOL. Metamath is similar in that it is a general framework which allows you to define DTT, HOL, ZFC, PA or anything else, but 99% of the actual theorem proving work has gone into the ZFC database.</p>\n<blockquote>\n<p>Apparently proof assistants based on ZFC are hard to use<br>\nI think Mario told me this</p>\n</blockquote>\n<p>I'm not 100% clear on this, because I hear conflicting messages, but this is the usual line:</p>\n<ul>\n<li>ZFC based stuff is hard to use in proof automation because there isn't much information on what is what, which helps in relevance filtering and eliminating proof steps that are not well typed</li>\n<li>Type theory based stuff is hard for proof automation because keeping track of all the types is hard, and all the major tools are built in FOL with one big FOL universe, i.e. ZFC (or smaller FOL systems like first order equational theories, PA, etc.)</li>\n</ul>",
        "id": 124900935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523391289
    },
    {
        "content": "<blockquote>\n<p>If you're playing the very long game, it might still be the case Coq &gt; Lean, Ltac2 is coming.</p>\n</blockquote>\n<p>If you are playing a sufficiently long game, the best bet doesn't exist yet</p>\n<blockquote>\n<p>dtt without any funny additions has been proven sound</p>\n</blockquote>\n<p>DTT with inductive types, quotients and proof irrelevance is also sound, courtesy of yours truly</p>",
        "id": 124901093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523391508
    },
    {
        "content": "<blockquote>\n<p>I am still trying to figure out all the finite stuff<br>\nbut multiset.lean is so long</p>\n</blockquote>\n<p>You don't need to read multiset.lean that carefully. The easy version is: it's lists up to permutation, with all the list functions lifted to multiset. All the lemmas are exactly what you would expect, given the definitions.</p>",
        "id": 124901174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523391622
    },
    {
        "content": "<blockquote>\n<p>i mean, it's theoretically possible to write a transpiler. but who would do the work?</p>\n</blockquote>\n<p>I would, if I understood Coq's metatheory as well as I do Lean's. Since they were not nearly so careful with their kernel as Lean has been, I don't know if I will find the acceptable Gallina terms written up anywhere that isn't an approximation or out of date</p>",
        "id": 124901284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523391742
    },
    {
        "content": "<blockquote>\n<p>equality in unimath seems more like \\equiv in Lean</p>\n</blockquote>\n<p>This is exactly the right idea. However, there is something you really need to pay attention to which I think you have missed and are using to get a \"free lunch\" in your conception of HoTT: equality (the type constructor) is <em>not</em> the same as definitional equality. In Lean this isn't that big a deal because of proof irrelevance, but you absolutely cannot hold the view that one thing is as good as an equal thing when doing HoTT. In particular, it will not save you from your \"up to equivalence\" problems in the other thread, but I will discuss this more there.</p>",
        "id": 124901543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523392109
    },
    {
        "content": "<blockquote>\n<p>I still think that term mode is too hard for mathematicians. You clearly have a programming background. I am guessing that you were happy with lambda notation for functions before you started reading these docs.<br>\nI would like to suppress lambda notation for as long as possible.</p>\n</blockquote>\n<p>I don't think this is a good idea. The idea of a lambda itself, a function giving a result, is quite integral to mathematics and it's a surprise they haven't picked up the notation already (or something isomorphic, like <code>x \\in A |-&gt; b(x)</code>).</p>\n<p>If you want to write a tactic-centric lean tutorial, I would suggest to begin with a brief overview of the terms of the language, i.e. lambda, application, constants and variables, make sure they understand what a bound variable is, then move on with some statement along the lines \"writing these terms directly is cumbersome, so here's a language for quickly constructing terms that is designed more for ease of use\". You don't need to mention the Isar-inspired terms like <code>match</code> and <code>have</code> and <code>show</code> until later if you want, but the core type theory should be at least briefly described.</p>",
        "id": 124902506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523393360
    },
    {
        "content": "<p>It is a good point that mathematicians know perfectly well about lambdas, they just write them $x \\mapsto f(x)$.</p>",
        "id": 124907734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523401603
    }
]