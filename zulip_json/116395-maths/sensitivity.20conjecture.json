[
    {
        "content": "<p>The sensitivity conjecture was 30 years old, and recently resolved. Can we formalise this? <a href=\"https://www.scottaaronson.com/blog/?p=4229\" target=\"_blank\" title=\"https://www.scottaaronson.com/blog/?p=4229\">https://www.scottaaronson.com/blog/?p=4229</a><br>\nSee also Donald Knuth's condensation of the proof: <a href=\"https://www.cs.stanford.edu/~knuth/papers/huang.pdf\" target=\"_blank\" title=\"https://www.cs.stanford.edu/~knuth/papers/huang.pdf\">https://www.cs.stanford.edu/~knuth/papers/huang.pdf</a></p>",
        "id": 172285808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564725270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> You've been doing a lot with matrices lately. Did you do things like row/column rank?</p>",
        "id": 172286621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564726608
    },
    {
        "content": "<p>And how far did you get with the inverse matrix?</p>",
        "id": 172286628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564726631
    },
    {
        "content": "<p>I used a noncomputable inverse in the end. I didn't use row and column rank either, but used the predicates <code>has_left_inverse</code> and <code>has_right_inverse</code> as well. Both of these look good enough for the sensitivity proof.</p>",
        "id": 172290859,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564732543
    },
    {
        "content": "<p>But this isn't in mathlib yet, right?</p>",
        "id": 172291016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564732722
    },
    {
        "content": "<p>No.</p>",
        "id": 172291026,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564732740
    },
    {
        "content": "<p>It's a bit unfinished, that's why. It would be nicer to have a pseudoinverse that worked on rectangular matrices.</p>",
        "id": 172292314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564734268
    },
    {
        "content": "<p>I thought about this also. How easy is it to do these block matrix calculations appearing in the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub><mo>=</mo><mi>n</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">A_n = nI</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span> (and in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)?<br>\nThis is another example where it's natural to consider a matrix with rows and columns indexed by a general finite type (in this case, the hypercube).</p>",
        "id": 172302263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564746887
    },
    {
        "content": "<p>Given what we have at the moment it might be easier to formulate the Knuth proof in terms of linear maps everywhere instead of matrices</p>",
        "id": 172302285,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564746908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> the matrices in Knuth's proof are indexed by {0,1}^n</p>",
        "id": 172302342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746964
    },
    {
        "content": "<p>My matrix pequiv thing might help with the block matrix computations. You can concatenate matrices algebraically using something like<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">(</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mi>a</mi></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mi>b</mi></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">(</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>1</mn></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mi>c</mi></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">(</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">(</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mi>a</mi></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mi>c</mi></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\"> \\begin{pmatrix} a &amp; b \\end{pmatrix} \\begin{pmatrix} 1 &amp; 0 \\\\0 &amp; 0 \\end{pmatrix} +  \\begin{pmatrix} c &amp; d \\end{pmatrix} \\begin{pmatrix} 0 &amp; 0 \\\\0 &amp; 1 \\end{pmatrix} = \\begin{pmatrix} a &amp; b \\\\c &amp; d \\end{pmatrix} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span></p>",
        "id": 172302847,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564747570
    },
    {
        "content": "<p>In the proof you'll probably end up with some big ugly sum, but with some terms like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">(</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>1</mn></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">(</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>0</mn></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\"> \\begin{pmatrix} 1 &amp; 0 \\\\0 &amp; 0 \\end{pmatrix}  \\begin{pmatrix} 0 &amp; 0 \\\\0 &amp; 1 \\end{pmatrix} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span>, which cancel quite easily.</p>",
        "id": 172303195,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564747967
    },
    {
        "content": "<p>I'm writing up a translation of Knuth's version into linear maps to compare</p>",
        "id": 172303474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564748301
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rwbarton/ed50d4340e2f654b9d778ccb3ec93442\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/ed50d4340e2f654b9d778ccb3ec93442\">https://gist.github.com/rwbarton/ed50d4340e2f654b9d778ccb3ec93442</a></p>",
        "id": 172305884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564750680
    },
    {
        "content": "<p>I haven't used the relevant parts of mathlib much but as far as I could tell while writing this everything ought to be fairly straightforward</p>",
        "id": 172306115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564750845
    },
    {
        "content": "<p>Is there an easy way to see the pdf version?</p>",
        "id": 172306466,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564751113
    },
    {
        "content": "<p>rofl kids these days</p>",
        "id": 172306511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564751156
    },
    {
        "content": "<p>One sec</p>",
        "id": 172306561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564751168
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/VNuGjVQNpDqyuE_fBRGXoVNU/sensitivity.pdf\" target=\"_blank\" title=\"sensitivity.pdf\">sensitivity.pdf</a></p>",
        "id": 172306589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564751204
    },
    {
        "content": "<p>That looks quite formalisable, I think.</p>",
        "id": 172307137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564751687
    },
    {
        "content": "<p>After all, Kenny formalised the dimension formula, and Fabian did the dual basis.</p>",
        "id": 172307228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564751767
    },
    {
        "content": "<p>Anything else that we need?</p>",
        "id": 172307232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564751773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> How far are you with the Lean version?</p>",
        "id": 172307398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564751900
    },
    {
        "content": "<p>Haven't started</p>",
        "id": 172307399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564751905
    },
    {
        "content": "<p>The only other general fact which gets used is the triangle inequality for summing over a finite set, do we have that?</p>",
        "id": 172307418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564751925
    },
    {
        "content": "<p>If we do, it should be <code>finset.abs_sum</code>, right? I don't think I've seen it.</p>",
        "id": 172307483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564751985
    },
    {
        "content": "<p>Then there is going to be some possibly tricky business relating the hypercube graph to the matrix entries of the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, but that would also appear in the matrix version</p>",
        "id": 172307486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564751989
    },
    {
        "content": "<p>Right, that final <code>calc</code> block seems the most tricky part.</p>",
        "id": 172307669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564752125
    },
    {
        "content": "<p>The rest is straight-forward, I think.</p>",
        "id": 172307680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564752136
    },
    {
        "content": "<p>This looks super doable. It's obviously a different kind of proof, but somehow it reminds me of the cap set proof in spirit.</p>",
        "id": 172307992,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564752402
    },
    {
        "content": "<p>I guess I'll just start typing and see at what point I get stuck.</p>",
        "id": 172308485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564752753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> How are things going so far? I finally have time to look at this</p>",
        "id": 172313175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564756222
    },
    {
        "content": "<p>So far I created a new repository and did other things while building mathlib <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 172313340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564756356
    },
    {
        "content": "<p>I was about to get started actually</p>",
        "id": 172313359,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564756381
    },
    {
        "content": "<p>Why do you build mathlib?</p>",
        "id": 172313459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564756446
    },
    {
        "content": "<p>I haven't built mathlib in 3 months</p>",
        "id": 172313471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564756463
    },
    {
        "content": "<p>I haven't been indoctrinated in the new ways yet and I had other things to do anyways</p>",
        "id": 172313488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564756487
    },
    {
        "content": "<p>Does this look sensible so far?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dimension</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The free vector space on vertices of a hypercube, defined inductively. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">introsI</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">introsI</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dim_V</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">dim_of_field</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dim_prod</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The linear operator f_n corresponding to Huang&#39;s matrix A_n. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 172314588,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564757323
    },
    {
        "content": "<p>And is there any special support for linear maps into/out of binary direct sums?</p>",
        "id": 172314746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564757432
    },
    {
        "content": "<p>Heh, I just started playing around with this and got to exactly the same place. Not that I saw (at a quick glance).</p>",
        "id": 172314905,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564757527
    },
    {
        "content": "<p>Ah yes, <code>linear_map.fst/snd/prod</code></p>",
        "id": 172314931,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564757555
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The linear operator f_n corresponding to Huang&#39;s matrix A_n. -/</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">pair</span>\n    <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">copair</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">copair</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>This definition needs an explicit <code>noncomputable</code> even though I have <code>noncomputable theory</code> at the top, is that supposed to happen?</p>",
        "id": 172315261,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564757813
    },
    {
        "content": "<p>Is noncomputable theory inside a section?</p>",
        "id": 172315559,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564758014
    },
    {
        "content": "<p><code>noncomputable theory</code> doesn't always propogate to aux decls.</p>",
        "id": 172315569,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564758022
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The linear operator f_n corresponding to Huang&#39;s matrix A_n. -/</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">pair</span>\n    <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">copair</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">copair</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">f_squared</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- The (n : ℝ) is necessary since `n • v` refers to the multiplication defined</span>\n<span class=\"c1\">-- using only the addition of V.</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">dunfold</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">f</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n      <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_smul</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IH</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">f</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n      <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">v&#39;</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_smul</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">abel</span> <span class=\"o\">},</span> <span class=\"c1\">-- ugh</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172318371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564759959
    },
    {
        "content": "<p>Maybe I'll put up a repository under leanprover-community?</p>",
        "id": 172318396,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564759978
    },
    {
        "content": "<p>This was weirdly hard to make it go through, I got caught on the <code>(n : R)</code> thing too for a bit.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fn2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn2</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">add_sub_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172318813,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564760279
    },
    {
        "content": "<p>Okay, I made <a href=\"https://github.com/leanprover-community/lean-sensitivity\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity\">https://github.com/leanprover-community/lean-sensitivity</a>. I don't know how the permissions work by default, but anyone who can add collaborators should feel free to do so.</p>",
        "id": 172318902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564760335
    },
    {
        "content": "<p>My gut feeling says that defining <code>V n := (fin n -&gt; bool) -&gt; real</code> would be nicer to work with. Then <code>V</code> is defined directly instead of recursively. You can use the following to go between <code>fin n</code> and <code>fin (n+1)</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"kn\">variable</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">def</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"n\">v</span> <span class=\"n\">j</span>\n</pre></div>",
        "id": 172319524,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564760797
    },
    {
        "content": "<p>I thought defining <code>V</code> recursively would be more convenient for defining and proving things about <code>f</code> and <code>g</code>--and it seems pretty convenient so far. I was thinking of defining the hypercube as <code>fin n -&gt; bool</code> though (in part because it seems a bit cheating to define it recursively).</p>",
        "id": 172319871,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564761086
    },
    {
        "content": "<p>I've started with the hypercube as <code>fin n -&gt; bool</code> but I'm not sure about the cleanest way to define the basis of <code>e_p</code>s.</p>",
        "id": 172319978,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564761158
    },
    {
        "content": "<p>Ok. Maybe that's right. Why do you say it feels like cheating?</p>",
        "id": 172319996,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564761183
    },
    {
        "content": "<blockquote>\n<p>I thought defining <code>V</code> recursively would be more convenient for defining and proving things about <code>f</code> and <code>g</code>--and it seems pretty convenient so far. I was thinking of defining the hypercube as <code>fin n -&gt; bool</code> though (in part because it seems a bit cheating to define it recursively).</p>\n</blockquote>\n<p>Why would that be cheating?</p>",
        "id": 172320024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564761213
    },
    {
        "content": "<blockquote>\n<p>I've started with the hypercube as <code>fin n -&gt; bool</code> but I'm not sure about the cleanest way to define the basis of <code>e_p</code>s.</p>\n</blockquote>\n<p>Dual basis is in mathlib</p>",
        "id": 172320047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564761240
    },
    {
        "content": "<p>Well just because it's part of the \"interface\" of the overall theorem and <code>fin n -&gt; bool</code> feels a bit more canonical. For example if the hypercube is defined recursively then it's not obvious how to construct the action of the symmetric group.</p>",
        "id": 172320151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564761337
    },
    {
        "content": "<p>Isn't the basis <code>e</code> just</p>\n<div class=\"codehilite\"><pre><span></span>def V (n : ℕ) : Type := (fin n → bool) → ℝ\ndef e (p : fin n → bool) : V n := λ q, if q = p then 1 else 0\n</pre></div>",
        "id": 172320156,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564761341
    },
    {
        "content": "<p>I agree it's not cheating by much.</p>",
        "id": 172320160,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564761345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> But you changed the definition of <code>V</code></p>",
        "id": 172320253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564761445
    },
    {
        "content": "<p>If you assume that the hypercube must be represented by <code>fin n -&gt; bool</code>, then at some point you have to make a recursive decomposition of building something for n+1 out of two somethings for n. I suggest doing that when we define the basis <code>e</code></p>",
        "id": 172320331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564761485
    },
    {
        "content": "<p>Which is I think what Rob was going to do</p>",
        "id": 172320344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564761496
    },
    {
        "content": "<p>I was responding to Rob, who said (as I understood it) that he was interested in the basis using this definition of <code>V</code></p>",
        "id": 172320347,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564761499
    },
    {
        "content": "<p>Probably it doesn't matter very much where you do it</p>",
        "id": 172320408,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564761565
    },
    {
        "content": "<p>Do we want to define <code>e</code> directly?</p>",
        "id": 172320501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564761633
    },
    {
        "content": "<p>I don't really care.</p>",
        "id": 172320506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564761638
    },
    {
        "content": "<p>I just thought that we would first define the basis for <code>V</code>.</p>",
        "id": 172320520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564761651
    },
    {
        "content": "<p>So something like <code>e (n+1) p := if p 0 then prod.inr (e n p.tail) else prod.inl (e n p.tail)</code></p>",
        "id": 172320529,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564761661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> That looks way cleaner than what I was doing, I was using the other definition of <code>V</code> though.</p>",
        "id": 172320544,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564761677
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">drop</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">drop</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>or something like that, I don't think it's gonna be convenient.</p>",
        "id": 172320571,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564761700
    },
    {
        "content": "<p>The recursive decomposition is easy:</p>\n<div class=\"codehilite\"><pre><span></span>def tail (p : fin (n+1) → α) : fin n → α := λ i, p i.succ\ndef tuple (x : α) (v : α → (fin n → α) → β) : (fin (n+1) → α) → β :=\nλ p, v (p 0) (tail p)\n</pre></div>\n\n\n<p>So if you have an element of <code>bool -&gt; V n</code> you get an element of <code>V (n+1)</code></p>",
        "id": 172320585,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564761716
    },
    {
        "content": "<p>I'm just worried that you will end up with only a linear isomorphism (not a definitional equality) between <code>V (n+1)</code> and <code>bool -&gt; V n</code> or <code>V n x V n</code> and that will make the computations involving <code>f</code> and <code>g</code> a lot more involved unless you can manage to cancel the isomorphisms automatically</p>",
        "id": 172320742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564761854
    },
    {
        "content": "<p>Ok, that might be a problem if we have to translate a lot between these two representations. I think it will be doable though.</p>",
        "id": 172320805,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564761932
    },
    {
        "content": "<p>but maybe in that aspect the recursive definition is easier.</p>",
        "id": 172320828,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564761961
    },
    {
        "content": "<p>How about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The hypercube.-/</span>\n<span class=\"n\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The basis of V indexed by the hypercube.-/</span>\n<span class=\"n\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n           <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n           <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 172320877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564761977
    },
    {
        "content": "<p>The alternative is to write down the basis and probably also the dual basis separately by this kind of recursive formula and then check that the dual basis is really dual and also the formula for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ε</mi><mi>q</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mi>n</mi></msub><msub><mi>e</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varepsilon_q (f_n e_p)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ε</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, by induction</p>",
        "id": 172320909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> That's probably slightly more convenient than the match, yeah.</p>",
        "id": 172321073,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564762194
    },
    {
        "content": "<p>Ok, but now we need to prove that this is a basis...</p>",
        "id": 172321268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564762335
    },
    {
        "content": "<p>It should suffice to prove linear independence</p>",
        "id": 172321302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564762368
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 172321332,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762422
    },
    {
        "content": "<blockquote>\n<p>Ok, but now we need to prove that this is a basis...</p>\n</blockquote>\n<p>Yeah that's true</p>",
        "id": 172321336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Is there a reason you don't want to use mathlibs dual basis?</p>",
        "id": 172321407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564762471
    },
    {
        "content": "<p>I fear you might get stuck when you need to calculate the matrix entries but I don't really know</p>",
        "id": 172321424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762489
    },
    {
        "content": "<p>because you won't have a formula for the dual basis like the one above</p>",
        "id": 172321464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762533
    },
    {
        "content": "<p>Unless there are already theorems that say if we have bases of V and W, then we get a basis of V x W and the formula for the dual basis is the expected one</p>",
        "id": 172321548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762598
    },
    {
        "content": "<p>Aha, but wouldn't it be better/easier to prove those formulas?</p>",
        "id": 172321589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564762637
    },
    {
        "content": "<p>Because otherwise you have to reprove that this thing is actually a dual basis.</p>",
        "id": 172321620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564762663
    },
    {
        "content": "<p>I guess we must already have a theorem about a basis of V x W so that we can compute its dimension</p>",
        "id": 172321690,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762698
    },
    {
        "content": "<p>You mean we should prove a mathlib theorem about the dual basis of V x W that comes from bases of V and W?</p>",
        "id": 172321725,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762729
    },
    {
        "content": "<p>I haven't seen the dual basis stuff in mathlib at all yet, let me take a look.</p>",
        "id": 172321826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564762810
    },
    {
        "content": "<p>So, there is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">is_basis_inl_union_inr</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ι&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">α</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv&#39;</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">α</span> <span class=\"n\">v&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"err\">∘</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"err\">∘</span> <span class=\"n\">v&#39;</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 172321990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564763001
    },
    {
        "content": "<p>Also, more trivialities:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The hypercube.-/</span>\n<span class=\"n\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">Q</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fun</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_bool</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 172322011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564763027
    },
    {
        "content": "<p>Ooh, that def should be a simp-lemma</p>",
        "id": 172322081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564763058
    },
    {
        "content": "<p>Maybe the right way to do all this is to just define the hypercube recursively after all, and then tack a translation onto <code>fin n -&gt; bool</code> at the end if we want to.</p>",
        "id": 172322172,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564763151
    },
    {
        "content": "<p>Then we can use that <code>is_basis_inl_union_inr</code> and add a formula to <code>linear_algebra.dual</code> about its dual basis</p>",
        "id": 172322233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564763185
    },
    {
        "content": "<p><code>Q (n+1) := Q n ⊕ Q n</code> and whatever definition of \"adjacent\" is the most convenient</p>",
        "id": 172322308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564763276
    },
    {
        "content": "<p>Or should we just prove that <code>Q n →₀ ℝ</code> is linearly equivelent to <code>V n</code>?</p>",
        "id": 172322358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564763291
    },
    {
        "content": "<p>Or maybe we should redefine <code>V n</code> to be that space?</p>",
        "id": 172322400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564763332
    },
    {
        "content": "<blockquote>\n<p>Or should we just prove that <code>Q n →₀ ℝ</code> is linearly equivelent to <code>V n</code>?</p>\n</blockquote>\n<p>This one sounds good</p>",
        "id": 172322417,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564763345
    },
    {
        "content": "<p>Maybe by first providing <code>Q (n+1) ≃ Q n ⊕ Q n</code></p>",
        "id": 172322688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564763550
    },
    {
        "content": "<p>Aha, that also sounds like a good idea. And then use <code>is_basis.comp</code>?</p>",
        "id": 172323009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564763819
    },
    {
        "content": "<p>Need to feed some kids <span aria-label=\"children crossing\" class=\"emoji emoji-1f6b8\" role=\"img\" title=\"children crossing\">:children_crossing:</span> brb</p>",
        "id": 172323100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564763885
    },
    {
        "content": "<p>Huh, there is no <code>has_xor</code> typeclass??</p>",
        "id": 172324222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564764850
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">Q</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">Q</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">xor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">bxor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">xor_comm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">xor</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">xor</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">bxor_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The distance between two vertices of the hypercube.-/</span>\n<span class=\"n\">def</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">xor</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span>  <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">dist_self</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">xor</span><span class=\"o\">,</span> <span class=\"n\">bxor_self</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">cond_ff</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">dist_symm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"o\">((</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xor_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Two vertices of the hypercube are adjacent if their distance is 1.-/</span>\n<span class=\"n\">def</span> <span class=\"n\">adjacent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The set of n-/</span>\n<span class=\"n\">def</span> <span class=\"n\">neighbours</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The cardinality of the hypercube.-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fun</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_bool</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sensitivity</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">neighbours</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Q</span>\n</pre></div>\n\n\n<p>Lean isn't yet happy with the theorem statement</p>",
        "id": 172327065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564767140
    },
    {
        "content": "<p>Voila: that's a statement that Lean likes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">sensitivity</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">neighbours</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 172328677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564768448
    },
    {
        "content": "<p>Hi everybody. I'd like to play this game too. Can we somehow distribute efforts? Where are you now?</p>",
        "id": 172331229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564770533
    },
    {
        "content": "<p>Hi Patrick! I just got back to this, currently trying to add a recursive definition of the hypercube and associated basis.</p>",
        "id": 172331694,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564770892
    },
    {
        "content": "<p>After that, I think there are some independent pieces to do</p>",
        "id": 172331720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564770916
    },
    {
        "content": "<p>Do you think you could push something and give me lemmas to prove?</p>",
        "id": 172331754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564770943
    },
    {
        "content": "<p>This is what I have now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The cardinality of the hypercube.-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fun</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_bool</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv_sum</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"err\">⊕</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">ff</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">cond_tt</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">cond_ff</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_pred</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 172331792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564770962
    },
    {
        "content": "<p>Johan, which definition of Q n is this using?</p>",
        "id": 172331838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564770991
    },
    {
        "content": "<p>Did you agree on the definitions of Q n and V n?</p>",
        "id": 172331844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564771006
    },
    {
        "content": "<p>Maybe I will just push something using a lot of <code>constant</code> and <code>axiom</code> as a starting point</p>",
        "id": 172331916,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564771073
    },
    {
        "content": "<p>then perhaps we can distribute the representation decisions</p>",
        "id": 172332039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564771135
    },
    {
        "content": "<p>It seems hard to decide independently the representations of V n and Q n</p>",
        "id": 172332080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564771174
    },
    {
        "content": "<p>This is with <code>Q n := fin n → bool</code></p>",
        "id": 172332304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564771349
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/c2d0b69cbe175f3125c2719f3b87f2f6f626f424\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/c2d0b69cbe175f3125c2719f3b87f2f6f626f424\">https://github.com/leanprover-community/lean-sensitivity/commit/c2d0b69cbe175f3125c2719f3b87f2f6f626f424</a> is enough to make the rest of the proof go through</p>",
        "id": 172332375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564771421
    },
    {
        "content": "<p>Except with a correct statement of <code>f_matrix_nonadjacent</code></p>",
        "id": 172332435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564771443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Shall I fill in the <code>Q</code> and <code>adjacent</code> constants?</p>",
        "id": 172332888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564771779
    },
    {
        "content": "<p>Feel free, I'm going to try to continue to sketch out the rest of the proof</p>",
        "id": 172332947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564771804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I've given you write permissions on the repo</p>",
        "id": 172333026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564771914
    },
    {
        "content": "<p>thanks!</p>",
        "id": 172333321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564772157
    },
    {
        "content": "<p>Reid I see you defined epsilon as the dual basis, but I liked the recursive definition</p>",
        "id": 172333547,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564772305
    },
    {
        "content": "<p>I'd like to work on the fact about |epsilon_q f_n e_p|</p>",
        "id": 172333590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564772360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> mind giving me access too? I was looking at this for a bit before dinner, might try to do a bit more.</p>",
        "id": 172333610,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564772388
    },
    {
        "content": "<p>Sure!</p>",
        "id": 172333618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564772396
    },
    {
        "content": "<p>I was intending that we'd add a lemma to mathlib that says that the dual basis element on <code>inl i</code> is given by projecting to the first factor, then applying the dual basis of the original basis</p>",
        "id": 172333627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564772401
    },
    {
        "content": "<p>With this definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The basis of V indexed by the hypercube.-/</span>\n<span class=\"n\">def</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>I can't make <code>{n}</code> implicit...</p>",
        "id": 172333699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564772423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Done, although I guess you also have admin rights by default...</p>",
        "id": 172333749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564772477
    },
    {
        "content": "<p>Since you are admin of leanprover-community, right?</p>",
        "id": 172333760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564772491
    },
    {
        "content": "<p>Gah, I keep running into \"maximum class-instance resolution depth has been reached\" issues, I think they are related to <code>decidable_eq</code> somehow...</p>",
        "id": 172333846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564772548
    },
    {
        "content": "<p>Oh, maybe. But thanks anyway!</p>",
        "id": 172333864,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564772573
    },
    {
        "content": "<blockquote>\n<p>I can't make <code>{n}</code> implicit...</p>\n</blockquote>\n<p>Why not? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 172334034,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564772731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> That proof will depend on the definition of <code>Q</code> and <code>e</code>, though</p>",
        "id": 172334052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564772749
    },
    {
        "content": "<p>I pushed another commit about <code>g</code></p>",
        "id": 172334182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564772825
    },
    {
        "content": "<p>I'm using the definition of e that Rob just pasted</p>",
        "id": 172334229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564772878
    },
    {
        "content": "<p>(which I indeed modified from Johan's message)</p>",
        "id": 172334284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564772895
    },
    {
        "content": "<p>i'm also happy to contribute</p>\n<p>what needs to be done besides the two <code>sorry</code>s Reid just pushed?</p>",
        "id": 172334489,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564773065
    },
    {
        "content": "<p>Oh dang, <code>H</code> is not a great name</p>",
        "id": 172334511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564773101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> I'll be pushing a couple more <code>sorry</code>s soon to complete the proof outline</p>",
        "id": 172334652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564773230
    },
    {
        "content": "<p>I'm inductively proving that <code>e</code> is a basis.</p>",
        "id": 172334939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564773455
    },
    {
        "content": "<p>See the <code>jmc</code> branch</p>",
        "id": 172335014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564773489
    },
    {
        "content": "<p>As I wrote earlier, I'm inductively calculating epsilon q e p</p>",
        "id": 172335308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564773752
    },
    {
        "content": "<p>I guess it should prove that e is a basis right?</p>",
        "id": 172335317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564773766
    },
    {
        "content": "<blockquote>\n<p>Lean isn't yet happy with the theorem statement</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> were you having trouble with type classes?</p>",
        "id": 172335401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564773844
    },
    {
        "content": "<p>Well, sets weren't finsets and such</p>",
        "id": 172335429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564773893
    },
    {
        "content": "<p>There is a working statement on the <code>jmc</code> branch</p>",
        "id": 172335434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564773901
    },
    {
        "content": "<p>I'm almost done with the proof that <code>e</code> is a basis</p>",
        "id": 172335445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564773918
    },
    {
        "content": "<p>Okay, I pushed a couple more bits (theorem statement adapted from your Johan--but it should be an exists)</p>",
        "id": 172335641,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564774090
    },
    {
        "content": "<p>Not sure if the next-to-last statement is phrased optimally</p>",
        "id": 172335705,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564774157
    },
    {
        "content": "<p>In those terms, I'm working on <code>f_matrix_adjacent</code> and <code>f_matrix_nonadjacent</code></p>",
        "id": 172336115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564774494
    },
    {
        "content": "<p><code>g_injective</code> was easy:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">g_injective</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">intros</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">H_eq</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H_eq</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172336158,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564774525
    },
    {
        "content": "<p>I'm going to tackle the inequality that's the last sentence of the PDF I posted</p>",
        "id": 172336162,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564774528
    },
    {
        "content": "<p>that leaves <code>f_image_g</code> and <code>exists_eigenvalue</code></p>",
        "id": 172336204,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564774552
    },
    {
        "content": "<p>I'll push what I have now.</p>",
        "id": 172336258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564774570
    },
    {
        "content": "<p>Ok, I pushed</p>",
        "id": 172336424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564774711
    },
    {
        "content": "<p>It does contain a <code>sorry</code>. Will work on that soon.</p>",
        "id": 172336438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564774722
    },
    {
        "content": "<p>i doubt <code>f_image_g</code> will be as easy but i can start on that. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  could i get push access as well?</p>",
        "id": 172336444,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564774727
    },
    {
        "content": "<p>afk</p>",
        "id": 172336483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564774750
    },
    {
        "content": "<p>What's your github username again?</p>",
        "id": 172336769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564774934
    },
    {
        "content": "<p><code>jesse-michael-han</code></p>",
        "id": 172336779,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564774945
    },
    {
        "content": "<p>Cool, added</p>",
        "id": 172336805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564774967
    },
    {
        "content": "<p>Do we have a nice way to define the two injections from <code>fin n  -&gt; bool</code> to <code>fin n+1 -&gt; bool</code>  that differ on the zeroth element of <code>fin n+1</code>?</p>",
        "id": 172337072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564775165
    },
    {
        "content": "<p>I guess I should use pattern matching</p>",
        "id": 172337105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564775202
    },
    {
        "content": "<p>Check what I did</p>",
        "id": 172337137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564775242
    },
    {
        "content": "<p>I've used <code>cond (x 0)</code> stuff</p>",
        "id": 172337165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564775263
    },
    {
        "content": "<p>This is not quite the same question, is it?</p>",
        "id": 172337233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564775293
    },
    {
        "content": "<p>Maybe not</p>",
        "id": 172337261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564775307
    },
    {
        "content": "<p>You're going i the easier direction (decreasing n)</p>",
        "id": 172337285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564775328
    },
    {
        "content": "<p>Right, I was too fast... sorry</p>",
        "id": 172337296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564775341
    },
    {
        "content": "<p>In principle I like building the equivalence <code>Q (n+1) ≃ Q n ⊕ Q n</code> out of stuff in <code>data.equiv.basic</code>/<code>data.equiv.fin</code> though it would be kind of verbose</p>",
        "id": 172337548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564775541
    },
    {
        "content": "<p>I found the library bit I was missing</p>",
        "id": 172337577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564775586
    },
    {
        "content": "<p>I can now write <code>Q n → Q (n+1) := λ p, λ k, if h : k = 0 then tt else p (k.pred h)</code></p>",
        "id": 172337582,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564775600
    },
    {
        "content": "<p>That's what I used</p>",
        "id": 172337588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564775616
    },
    {
        "content": "<p>I was missing pred</p>",
        "id": 172337590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564775617
    },
    {
        "content": "<p>I already pushed that equiv <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 172337595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564775626
    },
    {
        "content": "<p>Sorry Johan, I focused on your <code>cond</code> and missed <code>pred</code></p>",
        "id": 172337663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564775662
    },
    {
        "content": "<p>Oh I see, just defined manually yeah</p>",
        "id": 172337678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564775693
    },
    {
        "content": "<p>I changed <code>H</code> from a <code>finset</code> back to a <code>set</code> though I'm not yet entirely sure whether it was a good idea</p>",
        "id": 172338602,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564776548
    },
    {
        "content": "<p>Ooh, you should also feel free to refactor <code>Q.equiv_sum</code></p>",
        "id": 172339342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564777135
    },
    {
        "content": "<p>If you want to use more fancy library functions (-;</p>",
        "id": 172339357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564777151
    },
    {
        "content": "<p>finsets ftw.</p>",
        "id": 172339627,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564777382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>: I would suggest</p>\n<div class=\"codehilite\"><pre><span></span>def cons (x : α) (v : fin n → α) : fin (n+1) → α :=\nλ j, fin.cases x v j\n</pre></div>",
        "id": 172340338,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564778029
    },
    {
        "content": "<p>What is that?</p>",
        "id": 172340436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564778097
    },
    {
        "content": "<p>To define the maps <code>Q n → Q (n+1)</code>, <code>fin.cases</code> is there exactly for that purpose.</p>",
        "id": 172340552,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564778191
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 172340604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564778263
    },
    {
        "content": "<p>It's still totally mysterious to me that your definition cannot be rewritten as <code>fin.cases x v</code></p>",
        "id": 172340844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564778474
    },
    {
        "content": "<p>Lean is pretty bad at these kind of unification problems, unless it uses the <code>[elab_as_eliminator]</code> attribute. With that attribute it is hardcoded to look at the third explicit argument of <code>fin.cases</code>, and then figure out what to do using the type of the third argument. If you don't give it 3 arguments, it will do the standard unification procedure, which fails.</p>",
        "id": 172341742,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564779412
    },
    {
        "content": "<p>What do you get from using this definition rather than mine?</p>",
        "id": 172341760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564779440
    },
    {
        "content": "<p>It seems harder to prove lemmas about it</p>",
        "id": 172341767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564779447
    },
    {
        "content": "<p>but probably I'm missing library lemmas</p>",
        "id": 172341771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564779455
    },
    {
        "content": "<p>I'm calling it a day</p>",
        "id": 172342490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564780047
    },
    {
        "content": "<p>Unfortunately <code>e</code> is still not a basis</p>",
        "id": 172342503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564780058
    },
    {
        "content": "<p>I pushed the mess that I have so far.</p>",
        "id": 172342567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564780084
    },
    {
        "content": "<p>This is all very frustrating. I'm trying to learn how to make weird inductions in Lean</p>",
        "id": 172342583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564780115
    },
    {
        "content": "<p>And I'm very bad at it</p>",
        "id": 172342590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564780123
    },
    {
        "content": "<p>i'm halfway done with <code>f_image_g</code></p>",
        "id": 172342949,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564780458
    },
    {
        "content": "<p>My hope was that the lemmas you needed were already in the library. Although I don't see anything other than <code>cases_zero</code> and <code>cases_succ</code>. What else do you need?</p>",
        "id": 172343353,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564780834
    },
    {
        "content": "<p>i'm done with <code>f_image_g</code> except for these two annoying lemmas:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">cast_lemma_1</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cast_lemma_2</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 172378134,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564784857
    },
    {
        "content": "<p>oh nevermind, i just needed to make a <code>change</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">cast_lemma_1</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">suffices</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cast_lemma_2</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">change</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 172378341,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564785052
    },
    {
        "content": "<p>[edited] oops i missed the invite link</p>",
        "id": 172379531,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564786640
    },
    {
        "content": "<p>I'm done computing the matrix</p>",
        "id": 172382042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564790027
    },
    {
        "content": "<p>I haven't use <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> xor adjacency definition, see <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L232-L235\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L232-L235\">https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L232-L235</a>. I hope my definition is the same as his. At least I can <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L237\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L237\">compute the matrix</a> using it</p>",
        "id": 172382211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564790283
    },
    {
        "content": "<p>I also used the explicit inductive definition of the <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L167-L170\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L167-L170\">dual basis</a>, and proved the <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L198\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/058def458c9a4023ec95aaf211c0f7a22f77a05d/src/sensitivity.lean#L198\">duality equations</a>.</p>",
        "id": 172382252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564790385
    },
    {
        "content": "<p>Note that I spent most of my time trying to prove fancy induction principle on <code>Q n</code>, messing around with <code>elab_as_eliminator</code> and <code>induction ... using ...</code>. But nothing worked, so I reverted to good old <code>cases</code>.</p>",
        "id": 172382330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564790458
    },
    {
        "content": "<p>Is there any reason we use bool everywhere instead of Prop?</p>",
        "id": 172382987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564791504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> You don't need <code>bool_cases</code>. You can just write <code>cases h : x p</code>.</p>",
        "id": 172392812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564811042
    },
    {
        "content": "<p>Nice trick! I tried <code>by_cases hp : x p = tt</code> but this gave an inconvenient second case. I'm a bit disappointed that the proof wasn't finished while I slept. I'll be again away from Lean for the next 9 hours, so maybe this will be enough. Otherwise I'll play again tonight. Have fun!</p>",
        "id": 172400077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564825865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> I think you have slightly too much love for <code>tidy</code>. What about </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">f_image_g&#39;</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hv</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n  <span class=\"n\">erw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f_squared</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mul_self_sqrt</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">zero_le</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172415077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564854483
    },
    {
        "content": "<p>Do you mind if I replace your proof by this one? I looks closer to the paper proof</p>",
        "id": 172415092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564854543
    },
    {
        "content": "<p>oh, i didn't see <code>f_squared</code></p>\n<p>yeah that looks much better</p>",
        "id": 172415163,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564854655
    },
    {
        "content": "<p>Did you look at the pdf proof?</p>",
        "id": 172415171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564854669
    },
    {
        "content": "<p>yes, but i took a longer route in proving the left-side equality (because i essentially rederived <code>f_squared</code>)</p>",
        "id": 172415236,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564854788
    },
    {
        "content": "<p>Anyway,  is anybody working on the next lemma?</p>",
        "id": 172415282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564854885
    },
    {
        "content": "<p>I mean <code>exists_eigenvalue</code></p>",
        "id": 172415284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564854896
    },
    {
        "content": "<p>I know nothing about dimension in mathlib, but it looks like a good opportunity to learn</p>",
        "id": 172415296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564854935
    },
    {
        "content": "<p>i'm not working on it</p>\n<p>i was going to wait to hear back from reid</p>",
        "id": 172415346,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564854994
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/a33315d594731876aa780bb12fc79b3e67198302/src/linear_algebra/dimension.lean#L341\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/a33315d594731876aa780bb12fc79b3e67198302/src/linear_algebra/dimension.lean#L341\">exists_mem_ne_zero_of_dim_pos</a> looks very promising</p>",
        "id": 172415612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564855527
    },
    {
        "content": "<p>i started a bit on <code>degree_theorem</code>; feel free to overwrite or build on what's there</p>\n<p>i'm not sure if <code>finsupp.mem_span_if_total</code> is the correct way to extract a linear combination from a proof of membership in a span, but it reduces to a <code>finset.sum</code> which seems to be what we want.</p>",
        "id": 172420878,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564865454
    },
    {
        "content": "<p>I finished <a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/ecd89093017668d867feaaf734b0015d29aa7598\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/ecd89093017668d867feaaf734b0015d29aa7598\">e_is_basis</a> that <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>   almost did yesterday</p>",
        "id": 172421000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564865754
    },
    {
        "content": "<p>Wait. <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span>  did you proof start timeout?</p>",
        "id": 172421054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564865809
    },
    {
        "content": "<p>I tried to merge and I see it times out</p>",
        "id": 172421057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564865817
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/0f1468180a143ba8d40276b2bf7198fc2c250093\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/0f1468180a143ba8d40276b2bf7198fc2c250093\">https://github.com/leanprover-community/lean-sensitivity/commit/0f1468180a143ba8d40276b2bf7198fc2c250093</a> is my attempt at the dimension argument</p>",
        "id": 172421110,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564865890
    },
    {
        "content": "<p>But I don't know enough cardinal theory to do finite dimensional linear algebra <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 172421112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564865908
    },
    {
        "content": "<p>i'll take a look</p>",
        "id": 172421115,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564865920
    },
    {
        "content": "<p>For instance I need to prove:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n</pre></div>",
        "id": 172421125,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564865957
    },
    {
        "content": "<p>and </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"err\">↑</span><span class=\"n\">n</span>\n</pre></div>\n\n\n<p>Where at least some of this stuff is in cardinals</p>",
        "id": 172421130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564865999
    },
    {
        "content": "<p>I won't do more tonight.</p>",
        "id": 172421297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564866300
    },
    {
        "content": "<p>OK, <code>leanpkg test</code> succeeds at my commit, but indeed times out after the merge. <del>i'll fix it</del> i fixed it</p>",
        "id": 172421556,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564866858
    },
    {
        "content": "<p>If you know everything is finite dimensional, you probably shouldn't be using cardinals. Everything about infinite dimension should be transferred to <code>findim</code> really, or you have to faff with coercions</p>",
        "id": 172421739,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564867264
    },
    {
        "content": "<p>Chris, the problem is we seem to have a <em>lot</em> more  lemmas about <code>dim</code> than <code>findim</code></p>",
        "id": 172422087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564867935
    },
    {
        "content": "<p>For instance, do you have <a href=\"https://github.com/leanprover-community/mathlib/blob/a33315d594731876aa780bb12fc79b3e67198302/src/linear_algebra/dimension.lean#L275\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/a33315d594731876aa780bb12fc79b3e67198302/src/linear_algebra/dimension.lean#L275\">dim_sup_add_dim_inf_eq</a> for <code>findim</code>?</p>",
        "id": 172422156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564868141
    },
    {
        "content": "<p>Or do you have a nice way to import such theorems into the finite dimensional world?</p>",
        "id": 172422196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564868166
    },
    {
        "content": "<p>I have virtually nothing. I guess when transfer comes along it will be easier. But they'll just be <code>simp [nat.cast_add]</code> or something.</p>",
        "id": 172422205,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564868224
    },
    {
        "content": "<p>Was this mirroring discussed with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>? It seems a bit sad to duplicate all this, but we really want to be able to use finite dimensions as natural numbers</p>",
        "id": 172422257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564868370
    },
    {
        "content": "<p>most facts about numbers being equivalent to finite cardinals are proven</p>",
        "id": 172422308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564868459
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 172422316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564868493
    },
    {
        "content": "<p>Like cast is monotonic <code>etc</code>. Unfortunately, cardinals are not an ordered semiring, so the generic lemmas don't work.</p>",
        "id": 172422363,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564868582
    },
    {
        "content": "<p>Are they tagged for use by <code>norm_cast</code>?</p>",
        "id": 172422368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564868610
    },
    {
        "content": "<p>For instance <code>attribute [elim_cast] cardinal.nat_cast_in</code> seems to be missing</p>",
        "id": 172422411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564868684
    },
    {
        "content": "<p>i think the version of <code>2^n &lt; omega</code> you stated is parsed by Lean as <code>monoid.pow</code>, which is more annoying to deal with</p>\n<p>but if you ensure it's the cardinal pow of casted nats, it's 2 lemmas away:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n <span class=\"k\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">nat_cast_pow</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">nat_lt_omega</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 172423082,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564870010
    },
    {
        "content": "<p>Do we know that the restriction of linear_independent family to a subtype is linear_independent?</p>",
        "id": 172423357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564870537
    },
    {
        "content": "<p>Anyway, I said I would stop more than one hour ago, so I should really stop now</p>",
        "id": 172423644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871093
    },
    {
        "content": "<p>Modulo the restriction thing, the proof of the dimension argument is reduced to these 2^n &lt; omega things</p>",
        "id": 172423655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871142
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/af0e391f1d39d5448e3aff901f1dbe7eb10d3e32\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/af0e391f1d39d5448e3aff901f1dbe7eb10d3e32\">https://github.com/leanprover-community/lean-sensitivity/commit/af0e391f1d39d5448e3aff901f1dbe7eb10d3e32</a></p>",
        "id": 172423706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871185
    },
    {
        "content": "<p>the <code>monoid.pow</code> is annoying because you have to do an induction, but it's not bad:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">,</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">power_add</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">power_one</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>you can get the first one from this one, i believe</p>",
        "id": 172423709,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564871213
    },
    {
        "content": "<p>I followed Chris's advice to get rid of <code>dim</code> as soon as I applied the lemmas</p>",
        "id": 172423716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871229
    },
    {
        "content": "<p>Nice, feel free to remove those sorries and push. I'll go to bed</p>",
        "id": 172423758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871289
    },
    {
        "content": "<p>Maybe you can even finish the whole thing while I sleep</p>",
        "id": 172423770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871367
    },
    {
        "content": "<p>Or maybe <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> will come back and cross the finish line for us</p>",
        "id": 172423823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871426
    },
    {
        "content": "<p>Zulip says his local time is 6:30pm</p>",
        "id": 172423834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871482
    },
    {
        "content": "<p>This leaves him the whole evening and night</p>",
        "id": 172423836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871496
    },
    {
        "content": "<p>and same for you!</p>",
        "id": 172423839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871516
    },
    {
        "content": "<p>Have fun!</p>",
        "id": 172423882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564871547
    },
    {
        "content": "<p>As a spectator, I was looking around and found (via Terry Tao's blog post) this interpretation <a href=\"https://arxiv.org/abs/1907.11175\" target=\"_blank\" title=\"https://arxiv.org/abs/1907.11175\">https://arxiv.org/abs/1907.11175</a><br>\nnamely, the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>-dimensional space ought to be the exterior algebra (or Clifford algebra) of an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>-dimensional vector space.</p>",
        "id": 172434028,
        "sender_full_name": "Yao Liu",
        "timestamp": 1564893963
    },
    {
        "content": "<p>i'm trying to import <code>analysis.normed_space.basic</code> to use the triangle inequality, but this causes Lean on both my machines to start complaining about \"equation compiler failed to generate bytecode for <code>e._main</code>\", and something not being a <code>rfl</code> lemma, etc. the errors appear iff i have that import.</p>\n<p>does anyone know why this would happen?</p>",
        "id": 172464141,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564952843
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>equation compiler failed to generate bytecode for &#39;e._main&#39;\nnested exception message:\ncode generation failed, VM does not have code for &#39;real.normed_field&#39;\n</pre></div>",
        "id": 172464303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564953154
    },
    {
        "content": "<p>The entire file <code>analysis.normed_space.basic</code> is marked <code>noncomputable</code> so maybe it's no surprise the VM doesn't have code for <code>real.normed_field</code></p>",
        "id": 172464431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564953366
    },
    {
        "content": "<p>If you mark <code>e</code> noncomputable then most of the errors go away</p>",
        "id": 172464444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564953466
    },
    {
        "content": "<p>indeed, but i was alarmed that previous proofs which were <code>by refl</code> were somehow no longer so after adding <code>noncomputable</code></p>",
        "id": 172464492,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564953559
    },
    {
        "content": "<p>but that error can be fixed by changing <code>rfl</code> to <code>by rw e</code>...</p>",
        "id": 172464493,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564953583
    },
    {
        "content": "<p>you golfed me, I just found <code>by unfold e</code> :-)</p>",
        "id": 172464539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564953635
    },
    {
        "content": "<p>Can someone give a status update? Is the only thing that needs to be done the tying together of some loose ends?</p>",
        "id": 172482148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564986909
    },
    {
        "content": "<p>Looks like two sorries right now.</p>",
        "id": 172482418,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564987334
    },
    {
        "content": "<p>Neither are that hard.</p>",
        "id": 172482420,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564987340
    },
    {
        "content": "<p>I'm tackling adjacent_symm</p>",
        "id": 172482522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564987493
    },
    {
        "content": "<p>I just proved that.</p>",
        "id": 172482582,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564987577
    },
    {
        "content": "<p>There are two sorries in the final theorem. I'm doing the first.</p>",
        "id": 172482592,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564987600
    },
    {
        "content": "<p>One sorry left now.</p>",
        "id": 172483134,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564988378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Are you still working on this?</p>",
        "id": 172486847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564993042
    },
    {
        "content": "<p>I connected <code>adjacent</code> back to my definition that used <code>dist</code>.</p>",
        "id": 172486855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564993062
    },
    {
        "content": "<p>I'm not. The last sorry looked like you needed to understand what was going on. Everything else I proved did not require that.</p>",
        "id": 172489068,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564995587
    },
    {
        "content": "<p>Ok, I see.</p>",
        "id": 172489174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564995664
    },
    {
        "content": "<p>Johan, is there any use to the distance you defined, and relating it to adjacent? I'm not sure it makes <code>adjacent</code> so much more related to the usual definition. Maybe we could define a general graph class, and then adjacency in this context, and relate. But the real question is: what is the usual definition of the graph structure on Q n? Maybe the simplest answer goes through defining the (Z/2)^n action on Q n. For instance we could redefine Q n to be (Z/2)^n instead of this weird CS bool thing. Then define the canonical basis b for (Z/2)^n (it should already be in mathlib) and define <code>adjacent x y</code> by <code>exists i, b i bul x = y</code>.</p>",
        "id": 172491466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564998139
    },
    {
        "content": "<p>I'm almost done with the final sorry.</p>",
        "id": 172491809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564998586
    },
    {
        "content": "<p>I'll push what I have. Lunch time now.</p>",
        "id": 172491813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564998594
    },
    {
        "content": "<p>Oh, I was starting on this final sorry</p>",
        "id": 172491864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564998611
    },
    {
        "content": "<p>Do you mind if I finish during your lunch?</p>",
        "id": 172491912,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564998709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> should I push?</p>",
        "id": 172492173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564998980
    },
    {
        "content": "<p>Ok, let's say he was really having lunch</p>",
        "id": 172492215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564999045
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/f7be6abb34eafcd01df9417c99df34f8076362b9\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/f7be6abb34eafcd01df9417c99df34f8076362b9\">https://github.com/leanprover-community/lean-sensitivity/commit/f7be6abb34eafcd01df9417c99df34f8076362b9</a></p>",
        "id": 172492220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564999060
    },
    {
        "content": "<p>Now we have a lot of cleanup to do before telling people about it</p>",
        "id": 172492273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564999093
    },
    {
        "content": "<p>Nice, well done!</p>",
        "id": 172493442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565000559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> We have a theorem!</p>",
        "id": 172493450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565000575
    },
    {
        "content": "<p>Well done!</p>\n<p>I really like these \"oh look here's some relatively simple-looking maths, how hard is it <em>actually</em> to formalise?\" questions. A year or so ago my impression was \"in Lean, it's probably going to be tough\". Now my impression is turning to \"it might be not too bad\". We have cubing the cube, the IMO questions, working out pi to 7 decimal places, and now this.</p>",
        "id": 172493579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565000733
    },
    {
        "content": "<p>It's still a lot harder than it should be</p>",
        "id": 172493594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565000761
    },
    {
        "content": "<p>But I suspect it's a lot easier than it was.</p>",
        "id": 172493636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565000780
    },
    {
        "content": "<p>Unless you already know perfectly all the relevant part of mathlib</p>",
        "id": 172493640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565000785
    },
    {
        "content": "<p>Oh yes of course</p>",
        "id": 172493644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565000792
    },
    {
        "content": "<p>It's almost getting to the point where it's as easy as I thought it would be before I knew anything about how this stuff worked.</p>",
        "id": 172493649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565000804
    },
    {
        "content": "<p>Let's see if we can write <code>transfer</code> lemmas for this little project, to make things shorter</p>",
        "id": 172493694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565000858
    },
    {
        "content": "<p>What does that mean?</p>",
        "id": 172493703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565000873
    },
    {
        "content": "<p>Because we have <code>Q n →₀ ℝ</code> and <code>V n</code>, and they are canonically isomorphic.</p>",
        "id": 172493706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565000881
    },
    {
        "content": "<p>for sure</p>",
        "id": 172493752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565000891
    },
    {
        "content": "<p>Some proofs are easy on one side, others on the other.</p>",
        "id": 172493754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565000892
    },
    {
        "content": "<p>What do you think about starting the refactor with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Z</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">zmodp</span> <span class=\"mi\">2</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime_two</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n</pre></div>",
        "id": 172493762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565000902
    },
    {
        "content": "<p>This might be a good test case for the existing <code>transfer</code> api.</p>",
        "id": 172493770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565000917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Why would that help?</p>",
        "id": 172493776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565000935
    },
    {
        "content": "<p>I think your suggestion is a really worthwhile one Johan.</p>",
        "id": 172493778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565000941
    },
    {
        "content": "<p>And then try to understand that <code>std_basis</code> thing, and define adjacency as I wrote it should be defined?</p>",
        "id": 172493783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565000945
    },
    {
        "content": "<p>What does <code>Z/2</code> have that <code>bool</code> doesn't have?</p>",
        "id": 172493784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565000949
    },
    {
        "content": "<p>Looks</p>",
        "id": 172493786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565000955
    },
    {
        "content": "<p>A group structure</p>",
        "id": 172493787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565000956
    },
    {
        "content": "<blockquote>\n<p>Johan, is there any use to the distance you defined, and relating it to adjacent? I'm not sure it makes <code>adjacent</code> so much more related to the usual definition. Maybe we could define a general graph class, and then adjacency in this context, and relate. But the real question is: what is the usual definition of the graph structure on Q n? Maybe the simplest answer goes through defining the (Z/2)^n action on Q n. For instance we could redefine Q n to be (Z/2)^n instead of this weird CS bool thing. Then define the canonical basis b for (Z/2)^n (it should already be in mathlib) and define <code>adjacent x y</code> by <code>exists i, b i bul x = y</code>.</p>\n</blockquote>\n<p>See above</p>",
        "id": 172493793,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565000970
    },
    {
        "content": "<p>I think this would give a much more recognizable adjacency relation</p>",
        "id": 172493806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565001000
    },
    {
        "content": "<blockquote>\n<p>instead of this weird CS bool thing</p>\n</blockquote>\n<p>Mathematicians still failing to come to terms with weird CS stuff</p>",
        "id": 172493855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565001015
    },
    {
        "content": "<p>It's hard to express the fact that <code>x</code> and <code>y</code> are two different elements of a two elements sets in a nicer way than <code>x = y +1</code></p>",
        "id": 172493887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565001065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Ok, that seems fine.</p>",
        "id": 172493889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565001067
    },
    {
        "content": "<p><code>x \\ne y</code>?</p>",
        "id": 172493907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565001088
    },
    {
        "content": "<p>If I understand correctly mathlib still don't have the canonical basis of K^n (it has a more general <code>std_basis</code> for pi). It's time we fix that</p>",
        "id": 172493979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565001131
    },
    {
        "content": "<p>Anyway, I have a meeting scheduled in 10 minutes... so I can't help too much with the refactor now.</p>",
        "id": 172493980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565001132
    },
    {
        "content": "<p>I also need to go</p>",
        "id": 172493981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565001140
    },
    {
        "content": "<p>Something easy that anyone can do is to collect all lemmas from that file that should be in mathlib and PR them</p>",
        "id": 172493997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565001178
    },
    {
        "content": "<p>We should do that before refactoring because some of them will turn out to be unneeded for the sensitivity proof and will disappear if we don't rescue them first</p>",
        "id": 172494019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565001213
    },
    {
        "content": "<p>I was away from Lean for the weekend and it looks like I missed all the fun. Nice job, guys!</p>",
        "id": 172497801,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565005668
    },
    {
        "content": "<blockquote>\n<p>We should do that before refactoring because some of them will turn out to be unneeded for the sensitivity proof and will disappear if we don't rescue them first</p>\n</blockquote>\n<p>I'm going to start by moving them to their own file</p>",
        "id": 172498656,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565006651
    },
    {
        "content": "<p>Rob I think there's still plenty of clean up that would be nice to do. You had a shorter proof of <code>f_squared</code> right?</p>",
        "id": 172498672,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565006686
    },
    {
        "content": "<p>I just pushed it 20 seconds ago...</p>",
        "id": 172498683,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565006704
    },
    {
        "content": "<p>Looking at a few other proofs now that should be easy to clean up.</p>",
        "id": 172498712,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565006758
    },
    {
        "content": "<p>Give me a couple minutes to push what I have simplified already</p>",
        "id": 172498779,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565006806
    },
    {
        "content": "<p>Sure thing.</p>",
        "id": 172498867,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565006885
    },
    {
        "content": "<p>OK, pushed</p>",
        "id": 172499013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565007056
    },
    {
        "content": "<p>Next I was going to try to replace the definition of <code>adjacent</code> by <code>def adjacent' {n : ℕ} (p q : Q n) : Prop := ∃! i, p i ≠ q i</code> and get rid of the <code>dist</code> stuff</p>",
        "id": 172499038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565007105
    },
    {
        "content": "<p>Although I guess this means proving something similar to <code>adjacent_iff_dist</code></p>",
        "id": 172499105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565007178
    },
    {
        "content": "<p>By the way, what is this <code>run_cmd tactic.skip</code> magic about?</p>",
        "id": 172499146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565007232
    },
    {
        "content": "<p>I suspect that will be nicer, but I'm not sure... I'm gonna try some more local cleanup toward the bottom.</p>",
        "id": 172499154,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565007240
    },
    {
        "content": "<p>I was editing the theorem below, which was causing the one above to recompile constantly, and it was really slow. Putting no-op code in between makes it stop recompiling the one above.</p>",
        "id": 172499217,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565007292
    },
    {
        "content": "<p>It wasn't meant to be pushed though, I deleted it.</p>",
        "id": 172499232,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565007307
    },
    {
        "content": "<p>You're giving away your secrets!</p>",
        "id": 172499239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565007320
    },
    {
        "content": "<p>Isn't there supposed to be some way of doing this with a <code>.</code>?</p>",
        "id": 172499257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565007343
    },
    {
        "content": "<p><code>.</code> might have the same effect. Not sure.</p>",
        "id": 172499320,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565007380
    },
    {
        "content": "<p>I always use <code>.</code></p>",
        "id": 172499520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565007552
    },
    {
        "content": "<p>I'm constantly getting \"excessive memory consumption\" errors, is there some way to deal with these?</p>",
        "id": 172499983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565007945
    },
    {
        "content": "<p>The dependencies are definitely built</p>",
        "id": 172499993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565007956
    },
    {
        "content": "<p>I added some <code>foo_apply</code> lemmas and golfed <code>f_image_g</code>.</p>",
        "id": 172500764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565008575
    },
    {
        "content": "<blockquote>\n<p>I'm constantly getting \"excessive memory consumption\" errors, is there some way to deal with these?</p>\n</blockquote>\n<p>Hmm, something's funny with the simp set. It's spending over two seconds in the <code>simp only</code> in the 0 case of <code>f_squared</code>, that seems excessive.</p>",
        "id": 172501010,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565008820
    },
    {
        "content": "<p>Or, maybe not the simp set. Even the definition of <code>f</code> takes a while. Probably a big type class search.</p>",
        "id": 172501041,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565008863
    },
    {
        "content": "<p>I don't understand how anyone could have written any of this interactively. Did I break everything?</p>",
        "id": 172501078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565008913
    },
    {
        "content": "<p>It's a little slow but it works fine for me.</p>",
        "id": 172501134,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565008940
    },
    {
        "content": "<p>restart Lean?</p>",
        "id": 172501152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565008957
    },
    {
        "content": "<p>Adding this short-circuit helps in a few places:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Vn_module</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">Vn_module</span>\n</pre></div>",
        "id": 172501367,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565009211
    },
    {
        "content": "<p>Now <code>leanpkg build</code> has started printing goals and failing without printing any error message</p>",
        "id": 172501587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565009458
    },
    {
        "content": "<p>(not related to that module instance)</p>",
        "id": 172501612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565009484
    },
    {
        "content": "<p>reboot your computer??</p>",
        "id": 172501618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565009501
    },
    {
        "content": "<blockquote>\n<p>I don't understand how anyone could have written any of this interactively. Did I break everything?</p>\n</blockquote>\n<p>I noticed it was very slow, but wasn't sure whether it was because I'm using my laptop. Anyway, I was doing the usual sorry dance (every <code>have</code> that is proved is replaced by a commented out proof and sorry).</p>",
        "id": 172502073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565009997
    },
    {
        "content": "<p>I'd love to help refactoring but I'm on beach duty</p>",
        "id": 172502139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565010018
    },
    {
        "content": "<p>I found out how to increase the default memory limit for lean in emacs, so now I can load the whole file again</p>",
        "id": 172502349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565010188
    },
    {
        "content": "<p>Why does Lean not understand what I mean when I write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">RQ_equiv_V</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 172502395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010240
    },
    {
        "content": "<p>It takes ages to parse/elaborate/tc this</p>",
        "id": 172502442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010252
    },
    {
        "content": "<p>Result: 4 deterministic timeouts</p>",
        "id": 172502469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010265
    },
    {
        "content": "<p>Does adding this before help?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Vn_module</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"n\">def</span> <span class=\"n\">acg</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"n\">def</span> <span class=\"n\">acm</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"n\">def</span> <span class=\"n\">hsr</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"n\">def</span> <span class=\"n\">hav</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">100000</span><span class=\"o\">]</span> <span class=\"n\">acg</span> <span class=\"n\">acm</span> <span class=\"n\">hsr</span> <span class=\"n\">hav</span> <span class=\"n\">Vn_module</span>\n</pre></div>",
        "id": 172502491,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565010287
    },
    {
        "content": "<p>I'm timing right now, but it feels like a very significant speedup on the whole file.</p>",
        "id": 172502513,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565010310
    },
    {
        "content": "<p>Yeah, those short circuits reduce the compile time by more than 50%.</p>",
        "id": 172502538,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565010331
    },
    {
        "content": "<p>Doesn't help for this thing <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 172502547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010339
    },
    {
        "content": "<p>Btw, should we even use real numbers?</p>",
        "id": 172502615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010378
    },
    {
        "content": "<p>For this problem <code>nat.sqrt</code> is just as good as <code>real.sqrt</code>, isn't it?</p>",
        "id": 172502635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010399
    },
    {
        "content": "<p>So we could do the whole thing with <code>ℤ</code>-modules</p>",
        "id": 172502671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010439
    },
    {
        "content": "<p>Anyway, I don't mind using <code>real</code>.</p>",
        "id": 172502701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010472
    },
    {
        "content": "<p>Without this <code>RQ_equiv_V</code> I don't think we can get very far with \"transfer\"-like techniques.</p>",
        "id": 172502793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565010531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Have your problems gone away?</p>",
        "id": 172503971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565011492
    },
    {
        "content": "<p>Some of them</p>",
        "id": 172503985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565011505
    },
    {
        "content": "<p>Do you have local changes that are causing this? It compiles with <code>-T20000</code> for me, so there shouldn't be any memory issues.</p>",
        "id": 172504136,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565011634
    },
    {
        "content": "<blockquote>\n<p>I don't understand how anyone could have written any of this interactively.</p>\n</blockquote>\n<p>in the case of <code>degree_theorem</code>, very painfully...</p>\n<p>what is this \"insert no-op code\" magic? do i put a <code>.</code> or <code>run_cmd tactic.skip</code> above the current declaration i'm working on to stop recompilation of previous theorems?</p>",
        "id": 172504285,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565011745
    },
    {
        "content": "<p>The only suspicious thing I see in the profiling is that <code>simp</code> is spending a long time in <code>tactic.join_user_simp_lemmas</code>.</p>",
        "id": 172504317,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565011782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> Yes. <code>.</code> is gold.</p>",
        "id": 172504381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565011817
    },
    {
        "content": "<p>I used to have some local changes but I still had problems when I got rid of them</p>",
        "id": 172504848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565012258
    },
    {
        "content": "<p>Is the default memory limit different in VS code maybe?</p>",
        "id": 172504853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565012268
    },
    {
        "content": "<p>It's 100000 in VS Code I believe</p>",
        "id": 172504866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565012281
    },
    {
        "content": "<p>The T50000 challenge was what happened when I halved it</p>",
        "id": 172504922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565012302
    },
    {
        "content": "<p>That's the \"time\" limit I thought</p>",
        "id": 172505257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565012641
    },
    {
        "content": "<p>oh apologies. Memory limit is...</p>",
        "id": 172505325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565012688
    },
    {
        "content": "<p>4096 megs</p>",
        "id": 172505346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565012716
    },
    {
        "content": "<p>Ah okay, that explains some things. In emacs it's 1024 megs</p>",
        "id": 172505416,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565012774
    },
    {
        "content": "<p>looks like something we should patch in the community version of <code>lean-mode</code></p>\n<p>4096 megs and constantly swapping</p>",
        "id": 172505851,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565013151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Did you manage to clean things up at the bottom of the file?</p>",
        "id": 172508215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565015032
    },
    {
        "content": "<p>Do we have some sort of \"cleaning up\" roadmap?</p>",
        "id": 172508269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565015044
    },
    {
        "content": "<p>The reason I wrote my <code>dist</code> function is that I imagined that we might rename <code>Q</code> to <code>hypercube</code> and put it in mathlib, and show that it is a (discrete) metric space, etc....</p>",
        "id": 172508449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565015212
    },
    {
        "content": "<p>Not sure if we want to do things like that.</p>",
        "id": 172508461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565015220
    },
    {
        "content": "<p>I got distracted by trying to speed things up. I have no major changes right now.</p>",
        "id": 172508517,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565015281
    },
    {
        "content": "<p>But performance-wise, I don't see any more obvious places to optimize. It seems to behave pretty reasonably.</p>",
        "id": 172508693,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565015387
    },
    {
        "content": "<p>Can you get the statement of <code>RQ_equiv_V</code> to work?</p>",
        "id": 172508784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565015415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> What do you think of <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>'s suggestion for adjacency?</p>",
        "id": 172508828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565015453
    },
    {
        "content": "<p>It's quite similar to your <code>∃! i, x i ≠ y i</code> suggestion, but it exploits a bit of group structure.</p>",
        "id": 172508866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565015484
    },
    {
        "content": "<p><code>local attribute [instance, priority 10000] finsupp.module classical.prop_decidable</code> makes it work. The decidable instance isn't necessary but it speeds things up a little bit.</p>",
        "id": 172510675,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565016974
    },
    {
        "content": "<p>Once again, the type classes here are kind of a mess.</p>",
        "id": 172510693,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565016992
    },
    {
        "content": "<p>It's really sad that this creates a mess. It doesn't feel like we are doing something horrible.</p>",
        "id": 172510863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565017106
    },
    {
        "content": "<p>I just pushed a compression of <code>duality</code>.</p>",
        "id": 172510880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565017126
    },
    {
        "content": "<p>i'm working on turning <code>degree_theorem</code> into a <code>calc</code> proof after the existential instantiation of <code>q</code></p>\n<p>also thank you johan for the cleanup :^)</p>",
        "id": 172513475,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565019250
    },
    {
        "content": "<blockquote>\n<p>i'm working on turning <code>degree_theorem</code> into a <code>calc</code> proof after the existential instantiation of <code>q</code></p>\n</blockquote>\n<p>Oh cool, I wanted to do this as well but currently I'm trying to simplify <code>exists_eigenvalue</code> a bit</p>",
        "id": 172513679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565019454
    },
    {
        "content": "<p>Have you made any structural changes to <code>exists_eigenvalue</code>? I have a few cosmetic updates local, but nothing important.</p>",
        "id": 172513830,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565019601
    },
    {
        "content": "<p>I won't touch <code>degree_theorem</code> if Jesse is on it now.</p>",
        "id": 172513907,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565019637
    },
    {
        "content": "<p>I'm trying to do all the conversion between cardinals and naturals at once</p>",
        "id": 172514103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565019803
    },
    {
        "content": "<p>Pushed, I think it is somewhat better now...</p>",
        "id": 172514393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565019997
    },
    {
        "content": "<p>Nice.</p>",
        "id": 172514635,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565020178
    },
    {
        "content": "<p>also pushed my <code>calc</code>ification</p>\n<p>not sure what the correct style is for long <code>calc</code> proofs but i tried to prettify it</p>",
        "id": 172516076,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565021277
    },
    {
        "content": "<p>Nice work <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span></p>",
        "id": 172518912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565023652
    },
    {
        "content": "<p>I think that maybe we should just use <code>begin ... end</code> instead of <code>by { .. }</code> for the longer proofs in the <code>calc</code> block</p>",
        "id": 172518926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565023676
    },
    {
        "content": "<p>Of course that's a very minor issue</p>",
        "id": 172519036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565023790
    },
    {
        "content": "<p>Going to head out for a while, but I feel it should somehow be easier to show that <code>l q = ε q y</code></p>",
        "id": 172519906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565024488
    },
    {
        "content": "<p>Yep... that's the kind of \"transfer\" thing that I wanted to do</p>",
        "id": 172520329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565024850
    },
    {
        "content": "<p>But showing <code>Q n -&gt;0 R =_l V n</code> is already non-trivial...</p>",
        "id": 172520343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565024876
    },
    {
        "content": "<p>It seems that Rob found a fix.</p>",
        "id": 172520395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565024887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> what do you think of the following style?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">degree_theorem</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"err\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"err\">∩</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_eigenvalue</span> <span class=\"n\">H</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">H_mem&#39;</span><span class=\"o\">,</span> <span class=\"n\">H_mem&#39;&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H_nonzero</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_span_iff_total</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">H_mem&#39;</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">H_l₁</span><span class=\"o\">,</span> <span class=\"n\">H_l₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hHe</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hH</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hH</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">empty_card&#39;</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">H_mem_H</span><span class=\"o\">,</span> <span class=\"n\">H_max</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"err\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">q&#39;</span><span class=\"o\">,</span> <span class=\"n\">q&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">exists_mem_of_ne_empty</span> <span class=\"n\">hHe</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max_of_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">q&#39;</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q&#39;</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hr</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_of_max</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">q&#39;</span> <span class=\"n\">hq&#39;</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_max_of_mem</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hq&#39;</span><span class=\"o\">))</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H_q_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_pos_iff</span><span class=\"o\">],</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_supported&#39;</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H_l₁</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H_max&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q&#39;</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"n\">q&#39;</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">q&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hq&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">q&#39;</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">H_max</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">H_l₁</span> <span class=\"bp\">_</span> <span class=\"n\">hq&#39;</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hl0</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H_max&#39;</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">zero_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hl0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H_l₂</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H_nonzero</span> <span class=\"n\">H_l₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"n\">H_q_pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">calc</span>\n    <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n        <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">abs_sqrt_nat</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">abs_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">abs_mul</span><span class=\"o\">],</span>\n          <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_eq</span><span class=\"o\">,</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">H_l₂</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">total_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">],</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">q</span><span class=\"o\">],</span>\n              <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">duality</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n              <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">hne</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">duality</span><span class=\"o\">,</span> <span class=\"n\">hne</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n              <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h_q_ne_supp</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h_q_ne_supp</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">abs_nonneg</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n        <span class=\"kn\">end</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))))</span> <span class=\"o\">:</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">f_image_g</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">H_mem&#39;&#39;</span><span class=\"o\">),</span> <span class=\"err\">←</span> <span class=\"n\">H_l₂</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">total_apply</span><span class=\"o\">,</span>\n            <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">],</span>\n          <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">abs_triangle_sum</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n          <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">abs_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n        <span class=\"kn\">end</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"err\">∩</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"n\">H</span> <span class=\"err\">∩</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">ε</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))))</span> <span class=\"o\">:</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_subset</span><span class=\"o\">],</span>\n          <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Hx</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">H_mem</span> <span class=\"n\">H_not_mem</span><span class=\"o\">,</span>\n            <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n              <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H_mem</span> <span class=\"n\">H_not_mem</span><span class=\"o\">,</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">f_matrix</span><span class=\"o\">],</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">H_not_mem</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">),</span>\n                <span class=\"n\">change</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">adjacent_comm</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n              <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]},</span>\n                <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_supported&#39;</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H_l₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H_l₁</span> <span class=\"bp\">_</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n        <span class=\"kn\">end</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"err\">∩</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"n\">H</span> <span class=\"err\">∩</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_le_sum</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_matrix</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Hx</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">H_max</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_one</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n        <span class=\"kn\">end</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"err\">∩</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n          <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_subset</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n          <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_inter</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_to_finset&#39;</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_assoc</span><span class=\"o\">]</span>\n            <span class=\"kn\">using</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n        <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172520414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565024913
    },
    {
        "content": "<p>A fix to what? I'm playing around with changing the definition of <code>adjacent</code> right now.</p>",
        "id": 172520713,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565025188
    },
    {
        "content": "<p>Oh, to Lean not parsing <code>RQ_equiv_V</code>.</p>",
        "id": 172521526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565025893
    },
    {
        "content": "<p>So I'll get back to filling in that definition now.</p>",
        "id": 172521540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565025904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> What do you propose as new definition of <code>adjacent</code>?</p>",
        "id": 172521550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565025919
    },
    {
        "content": "<p>I was hoping <code>def adjacent {n : ℕ} (p : Q n) : set (Q n) := λ q, ∃! i, p i ≠ q i</code> would simplify things a bit. It basically exchanges the difficulty of <code>adjacent_iff_dist</code> for <code>adjacent_succ_iff</code> though.</p>",
        "id": 172521747,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565026054
    },
    {
        "content": "<p>My (not quite complete) proof of <code>adjacent_succ_iff</code> is a bit longer but arguably a bit simpler, and I don't think it's optimized.</p>",
        "id": 172521860,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565026116
    },
    {
        "content": "<p>For some reason</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">unique_single</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_same</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>is also extremely slow.</p>",
        "id": 172523213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565027118
    },
    {
        "content": "<p>And if I change <code>discrete_field</code> to <code>comm_ring</code> it doesn't find <code>add_comm_group</code> for the LHS.</p>",
        "id": 172523345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565027239
    },
    {
        "content": "<p>Even after importing <code>algebra.pi_instances</code></p>",
        "id": 172523365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565027252
    },
    {
        "content": "<p>yeah that looks good</p>\n<p>my original version actually had <code>begin .. end</code> instead of <code>by {}</code> as well, but i thought that mathlib style forbids nested <code>begin end</code> blocks</p>",
        "id": 172523454,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565027330
    },
    {
        "content": "<p>What's this??</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">equation</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">equiv_unique</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 172523614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565027465
    },
    {
        "content": "<p><code>V 0</code> is defeq to <code>real</code>.</p>",
        "id": 172523625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565027479
    },
    {
        "content": "<p>Why doesn't it see that?</p>",
        "id": 172523637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565027488
    },
    {
        "content": "<p>Is the module structure defeq?</p>",
        "id": 172523934,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565027752
    },
    {
        "content": "<p>I think so.</p>",
        "id": 172524025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565027808
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-sensitivity/tree/new_adj\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/tree/new_adj\">https://github.com/leanprover-community/lean-sensitivity/tree/new_adj</a></p>",
        "id": 172524029,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565027810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">introsI</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">introsI</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">dunfold</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172524053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565027832
    },
    {
        "content": "<p>Not thrilled with the proof of <code>adjacent_succ_iff</code>. I'm not sure this is an improvement.</p>",
        "id": 172524059,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565027836
    },
    {
        "content": "<p>But I need to head home and eat dinner now.</p>",
        "id": 172524092,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565027877
    },
    {
        "content": "<p>I pushed another cleanup of degree_theorem</p>",
        "id": 172531037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565033506
    },
    {
        "content": "<p>Maybe some parts at the top of the proof should be factored out into separate lemmas.</p>",
        "id": 172531092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565033529
    },
    {
        "content": "<p>(deleted - wrong topic)</p>",
        "id": 172536361,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565037693
    },
    {
        "content": "<p>Who could try to add the following lines after the definition of epsilon, and see if the commented lines timeout?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">Ψ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">equiv_fun_on_fintype</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">This following fails with `by apply_instance`, but defining it doesn&#39;t seem to help.</span>\n<span class=\"cm\">instance tata : vector_space ℝ (Q n →₀ ℝ) :=</span>\n<span class=\"cm\">{..finsupp.module (Q n) ℝ, .. }</span>\n<span class=\"cm\"> -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">coeffs</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">Ψ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">p</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">somme</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">coeffs</span> <span class=\"n\">v</span> <span class=\"c1\">-- coeffs v : Q n →₀ ℝ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">somme</span> <span class=\"n\">n</span>  <span class=\"c1\">-- somme : (Q n →₀ ℝ) →ₗ[ℝ] V n</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">somme</span>  <span class=\"c1\">-- somme.to_fun : (Q ?M_1 →₀ ℝ) → V ?M_1</span>\n\n<span class=\"c1\">-- The following lines timeout</span>\n<span class=\"c1\">--#check linear_map.to_fun somme (coeffs v)</span>\n<span class=\"c1\">--#check linear_map.to_fun (@somme n)</span>\n<span class=\"c1\">--#check (Q n →₀ ℝ) →ₗ[ℝ] V n</span>\n</pre></div>",
        "id": 172548535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049198
    },
    {
        "content": "<p>Independently of this, I still think that the way we prove <code>e</code> is a basis is not optimal. What we really care about is the decomposition of vectors <code>v : V n</code> as a sum over <code>p</code> in <code>Q n</code> of <code>(ε p v) • (e p)</code> (the issues above were met while trying to write down this formula using the linear algebra library). In our current proof of the main theorem, this formula is somewhat hidden, because we use the fact <code>e</code> is  a basis to get a mysterious sequence of coefficients unrelated to <code>ε</code>. One improvement could be to prove <code>ε</code> is equal to <code>dual_basis e</code> and use stuff in <code>dual.lean</code>. But we could just as well directly prove the decomposition formula</p>",
        "id": 172548714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049447
    },
    {
        "content": "<p>The key is:</p>",
        "id": 172548715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">epsilon_total</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"bp\">;</span>\n    <span class=\"o\">[</span> <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">ff</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">h</span><span class=\"o\">)],</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">cond_tt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">cond_ff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172548728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049470
    },
    {
        "content": "<p>Which we can apply to a vector minus its intended decomposition (using the duality lemma).</p>",
        "id": 172548788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049512
    },
    {
        "content": "<p>If we insist on keeping that <code>e</code> is a basis then the above lemma (together with the duality lemma) reproves it</p>",
        "id": 172548821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049549
    },
    {
        "content": "<p>(this is all assuming we can use lemmas about sums over finsupp...)</p>",
        "id": 172548827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049578
    },
    {
        "content": "<p>Another thing that is surprisingly painful is the proof of <code>have H_q_pos : 0 &lt; abs (l q),</code> in the main theorem. I think we should use that <code>fintype.normed_group</code> is using the supremum norm. So <code>abs (l q)</code> is actually the norm of <code>y</code>, hence positive using <code>norm_pos_iff</code></p>",
        "id": 172549034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049759
    },
    {
        "content": "<p>And then I think the big calc at the end should have more steps and use more general lemmas about linear maps and dual bases.</p>",
        "id": 172549151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565049950
    },
    {
        "content": "<p>I didn't think of a nice way to optimize the proof of <code>adj_succ_iff</code> with the \"exists unique\" definition of adjacent. But I did notice that the detour through <code>dist</code> is completely unnecessary. This is all we need about <code>adjacent</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">adjacent</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">adjacent</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">adjacent</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨</span><span class=\"n\">h_eq</span><span class=\"o\">,</span> <span class=\"n\">h_adj</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨</span><span class=\"n\">h_eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">h_adj</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span><span class=\"n\">h_ne</span><span class=\"o\">,</span> <span class=\"n\">h_eq</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span><span class=\"n\">h_ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">h_eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">adjacent_comm</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">adjacent</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">adjacent</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">adjacent_succ_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">adjacent</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_adjacent_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">_⟩;</span> <span class=\"n\">apply</span> <span class=\"n\">fin_zero_elim</span> <span class=\"n\">v</span>\n</pre></div>\n\n\n<p>Using an inductive prop for <code>adjacent</code> looks very slightly cleaner, I think, but forces some packing and unpacking in <code>adjacent_succ_iff</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">adjacent</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"n\">adjacent</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"n\">nonzero</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">adjacent</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">adjacent</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n</pre></div>",
        "id": 172585870,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565096624
    },
    {
        "content": "<p>I'm currently playing with this <code>adjacent_succ_iff</code> thing</p>",
        "id": 172585963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565096680
    },
    {
        "content": "<p>Using my proposed definition of <code>adjacent</code></p>",
        "id": 172585982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565096696
    },
    {
        "content": "<p>Which definition is that?</p>",
        "id": 172585988,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565096703
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `flip i p` flips the i-th bit of p -/</span>\n<span class=\"n\">def</span> <span class=\"n\">flip</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"n\">k</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjacent</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">flip</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 172586000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565096715
    },
    {
        "content": "<p>This is my proposal but still phrased in terms of bool rather than Z/2</p>",
        "id": 172586020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565096735
    },
    {
        "content": "<p>I think this is a pretty clean definition, very close to what you would say when explaining the statement</p>",
        "id": 172586089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565096766
    },
    {
        "content": "<p>But I'm not claiming it makes the proof of <code>adjacent_succ_iff</code> as short as we'd like it to be</p>",
        "id": 172586184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565096866
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 172586273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565096936
    },
    {
        "content": "<p>I returned to this and finished this proof. I add the following trivial preliminaries:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">ne_iff_eq_bnot</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">b&#39;</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">b&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">not_eq_bnot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_succ_iff_pred_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_pred</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172591951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565100718
    },
    {
        "content": "<p>And then the adjacency stuff becomes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `flip i p` flips the i-th bit of p -/</span>\n<span class=\"n\">def</span> <span class=\"n\">flip</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"n\">k</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The adjacency relation on Q^n: two vertices of the hypercube are adjacent if they differ at one bit. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">adjacent</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">flip</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">not_adjacent_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_false</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">adjacent_succ_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">adjacent</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">flip</span><span class=\"o\">],</span>\n      <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">flip</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n        <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">flip</span><span class=\"o\">],</span>\n        <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_succ_iff_pred_eq</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">flip</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">bnot</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">hl</span><span class=\"o\">),</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">flip</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_pred</span><span class=\"o\">],</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_succ_iff_pred_eq</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n        <span class=\"n\">conv_lhs</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span> <span class=\"o\">},</span>\n        <span class=\"n\">conv_rhs</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span> <span class=\"o\">},</span>\n        <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">flip</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">ne_iff_eq_bnot</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h₀</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_pred</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">hl</span><span class=\"o\">),</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp_app</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">flip</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172592101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565100798
    },
    {
        "content": "<p>It seems there is some kind of pain conservation law here</p>",
        "id": 172592118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565100819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span></p>",
        "id": 172592121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565100826
    },
    {
        "content": "<p>Maybe that solution is a bit orthogonal to the general design of our proof since it doesn't use induction on <code>n</code> at all</p>",
        "id": 172592209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565100864
    },
    {
        "content": "<p>I forget symmetry:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">flip_flip</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flip</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">flip</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">adjacent_comm</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">i</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">flip_flip</span>\n</pre></div>",
        "id": 172593902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565101957
    },
    {
        "content": "<blockquote>\n<p>Who could try to add the following lines after the definition of epsilon, and see if the commented lines timeout?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">Ψ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">equiv_fun_on_fintype</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">This following fails with `by apply_instance`, but defining it doesn&#39;t seem to help.</span>\n<span class=\"cm\">instance tata : vector_space ℝ (Q n →₀ ℝ) :=</span>\n<span class=\"cm\">{..finsupp.module (Q n) ℝ, .. }</span>\n<span class=\"cm\"> -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">coeffs</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">Ψ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">p</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">somme</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">coeffs</span> <span class=\"n\">v</span> <span class=\"c1\">-- coeffs v : Q n →₀ ℝ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">somme</span> <span class=\"n\">n</span>  <span class=\"c1\">-- somme : (Q n →₀ ℝ) →ₗ[ℝ] V n</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">somme</span>  <span class=\"c1\">-- somme.to_fun : (Q ?M_1 →₀ ℝ) → V ?M_1</span>\n\n<span class=\"c1\">-- The following lines timeout</span>\n<span class=\"c1\">--#check linear_map.to_fun somme (coeffs v)</span>\n<span class=\"c1\">--#check linear_map.to_fun (@somme n)</span>\n<span class=\"c1\">--#check (Q n →₀ ℝ) →ₗ[ℝ] V n</span>\n</pre></div>\n\n\n</blockquote>\n<p>Does anyone has any explanation for the above mystery?</p>",
        "id": 172595157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565102683
    },
    {
        "content": "<p>You're right that the induction isn't necessary. Ultimately we need these two facts; everything below goes through fine with just these. These proofs are for the \"exists unique\" definition of <code>adjacent</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">adj_succ</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_pred</span> <span class=\"bp\">_</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_fun</span> <span class=\"n\">heq</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h_eq</span><span class=\"o\">,</span> <span class=\"n\">h_uni</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">by_contradiction</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h_uni</span> <span class=\"bp\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h_uni</span> <span class=\"bp\">_</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">adj_succ_of_zeq</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h_eq</span><span class=\"o\">,</span> <span class=\"n\">h_uni</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"n\">h_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred_inj</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred_succ</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h_uni</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h_eq</span><span class=\"o\">,</span> <span class=\"n\">h_uni</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_i</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">h_i</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h0</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">h_i</span> <span class=\"n\">at</span> <span class=\"n\">h_eq</span><span class=\"o\">),</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">h_i</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">i</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">i</span> <span class=\"bp\">_</span><span class=\"o\">)),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_pred</span><span class=\"o\">]],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">h_uni</span> <span class=\"bp\">_</span> <span class=\"n\">hy</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172595625,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565103036
    },
    {
        "content": "<p>I don't have a strong opinion about this <code>exists_unique</code> vs <code>flip</code>. I think both definition directly relate to the intuitive definition.</p>",
        "id": 172595852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565103200
    },
    {
        "content": "<p>Why do you separate those two lemmas? Does it make later things easier?</p>",
        "id": 172595882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565103230
    },
    {
        "content": "<p>Could you try my finsupp.total mystery?</p>",
        "id": 172595968,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565103264
    },
    {
        "content": "<p>I don't have time to debug the type class thing right now, but you can look at the trace here and see if you can make any sense:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"n\">include</span> <span class=\"n\">v</span>\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">try_for</span> <span class=\"mi\">10000</span> <span class=\"o\">{</span><span class=\"n\">exact</span>  <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">somme</span> <span class=\"o\">(</span><span class=\"n\">coeffs</span> <span class=\"n\">v</span><span class=\"o\">)}</span>\n</pre></div>",
        "id": 172595988,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565103279
    },
    {
        "content": "<p>I think it ended up being a bit cleaner with them separate. But I generally try to avoid disjunctions, so that's why this feels cleaner to me.</p>",
        "id": 172596098,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565103354
    },
    {
        "content": "<p><code>(message too long, truncated at 262144 characters)</code></p>",
        "id": 172597800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565104411
    },
    {
        "content": "<p>It seems adding the shortcut</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">toto</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n</pre></div>\n\n\n<p>helps a lot</p>",
        "id": 172598493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565104868
    },
    {
        "content": "<p>Although the coercion from <code>linear_map</code> to function still doesn't kick in</p>",
        "id": 172598539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565104911
    },
    {
        "content": "<p>Yes, the messages get truncated, but 262144 characters is usually plenty to find the problem...</p>",
        "id": 172598690,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565104998
    },
    {
        "content": "<p>Unsurprisingly there are type class issues in this whole development. You can add that to the short circuit instances for V.</p>",
        "id": 172598733,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565105025
    },
    {
        "content": "<p>Why \"unsurprisingly\"?</p>",
        "id": 172598806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565105056
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-sensitivity/tree/new_adj\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/tree/new_adj\">https://github.com/leanprover-community/lean-sensitivity/tree/new_adj</a> is about as clean as I can get the <code>adjacent</code> stuff for now.</p>",
        "id": 172598817,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565105068
    },
    {
        "content": "<p>To me this is quite a surprise</p>",
        "id": 172598827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565105079
    },
    {
        "content": "<p>I think it's been clear for a while that we're kind of abusing type class search. Whether it's our setup, or the inference algorithm itself, these kinds of issues are showing up a lot.</p>",
        "id": 172598955,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565105175
    },
    {
        "content": "<p>It's pretty clear that either we are doing it wrong, or Lean 3's type class is doing it wrong</p>",
        "id": 172598984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565105205
    },
    {
        "content": "<p>Rob was quicker...</p>",
        "id": 172598990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565105214
    },
    {
        "content": "<p>Rob, I think you can merge into master, I don't think anyone has a much better idea</p>",
        "id": 172599136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565105313
    },
    {
        "content": "<p>Can someone summarise the problems you're having?</p>",
        "id": 172601433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565106855
    },
    {
        "content": "<p>Kevin, there are several problems. The one I was discussing with Rob is to get a definition of the adjacency relation on the hypercube which is both easily recognizable and convenient for the proofs. I think we sort of settled that.</p>",
        "id": 172604005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108507
    },
    {
        "content": "<p>Then I went outside to help my youngest daughter training to ride a bicycle without side wheels. She's making progress but was tired. So i returned, and took up the big problem.</p>",
        "id": 172604110,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108580
    },
    {
        "content": "<p>Which is the sum manipulation and basis and dual basis things.</p>",
        "id": 172604131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108595
    },
    {
        "content": "<p>Now that instances work, here is my proposal:</p>",
        "id": 172604148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108608
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">coeffs_module</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">coeffs</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">equiv_fun_on_fintype</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">p</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">somme</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"n\">e</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- For any v : V n, \\sum_{p ∈ Q n} (ε p v) • e p = v -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">decomposition</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">somme</span> <span class=\"o\">(</span><span class=\"n\">coeffs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">somme</span> <span class=\"err\">$</span> <span class=\"n\">coeffs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"n\">p</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">epsilon_total</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">somme</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">total_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">duality</span><span class=\"o\">,</span> <span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">q</span> <span class=\"n\">q_in</span> <span class=\"n\">q_ne</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">q_ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">p_not_in</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p_not_in</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172604164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108628
    },
    {
        "content": "<p>Note how this doesn <em>not</em> use <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/1d156fb773e0729678fcd816eea20c4812d5ba0e/src/sensitivity.lean#L162\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/1d156fb773e0729678fcd816eea20c4812d5ba0e/src/sensitivity.lean#L162\">e.is_basis</a> or <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/1d156fb773e0729678fcd816eea20c4812d5ba0e/src/sensitivity.lean#L75\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/1d156fb773e0729678fcd816eea20c4812d5ba0e/src/sensitivity.lean#L75\">equiv_sum</a></p>",
        "id": 172604284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108715
    },
    {
        "content": "<p>I think this is going more straightly to the point</p>",
        "id": 172604305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108733
    },
    {
        "content": "<p>Modulo all the finsupp weirdness, it says exactly what the docstring claims</p>",
        "id": 172604452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108849
    },
    {
        "content": "<p>I think this could be the basis for a refactor of the main proof</p>",
        "id": 172604474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108877
    },
    {
        "content": "<p>What's <code>somme</code>? I keep reading that as a misspelling of <code>some</code>...</p>",
        "id": 172604542,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565108903
    },
    {
        "content": "<p>Oh sorry</p>",
        "id": 172604551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108910
    },
    {
        "content": "<p>It's French for sum</p>",
        "id": 172604563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108919
    },
    {
        "content": "<p>Aha.</p>",
        "id": 172604573,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565108929
    },
    {
        "content": "<p>At some point I wanted to avoid name clash</p>",
        "id": 172604582,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108940
    },
    {
        "content": "<p>Of course it uses <code>epsilon_total</code> that I posted earlier</p>",
        "id": 172604623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108978
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">epsilon_total</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"bp\">;</span>\n    <span class=\"o\">[</span> <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">ff</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">h</span><span class=\"o\">)],</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">cond_tt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">cond_ff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>",
        "id": 172604639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565108996
    },
    {
        "content": "<p>and <code>duality</code>. Together those lemmas are equivalent to the fact that <code>e</code> and <code>epsilon</code> are dual bases.</p>",
        "id": 172604771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565109078
    },
    {
        "content": "<p>What do you think about this?</p>",
        "id": 172604807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565109107
    },
    {
        "content": "<p>I haven't worked through your earlier posts very carefully, but if there's a chance this could clean up the bottom of the file, I'm in favor of trying...</p>",
        "id": 172605103,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565109334
    },
    {
        "content": "<p>Ok, I pushed something. The main goal is to shorten the final proof, make it easier to read, and transfer as much as possible into <code>for_mathlib.lean</code>. I followed my plan of using the duality as outline in my previous messages. Maybe I went too far, and I'm actually fighting the linear algebra library. But I still like how the final proof looks like. And I guess that Lean night already lasted too long (looks like it's now almost 3am...)</p>",
        "id": 172642013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565139512
    },
    {
        "content": "<p>Nice, I think it looks great!</p>",
        "id": 172663166,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565170395
    },
    {
        "content": "<p>What I think it the final big thing is to generalize and move to mathlib <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/19c2800c9330ddf7130dac4ce22b7d2eb51afcfd/src/sensitivity.lean#L193-L247\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/19c2800c9330ddf7130dac4ce22b7d2eb51afcfd/src/sensitivity.lean#L193-L247\">https://github.com/leanprover-community/lean-sensitivity/blob/19c2800c9330ddf7130dac4ce22b7d2eb51afcfd/src/sensitivity.lean#L193-L247</a>. It should connect with <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/dual.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/dual.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/dual.lean</a>. We could have a lemma characterizing pairs of dual bases (taking as input our statements <code>duality</code> and <code>epsilon_total</code> and outputting the conjunction that <code>e</code> is a basis and <code>epsilon</code> is its dual basis). And then replace the rest of the what I outlined in the first link by general lemmas about dual bases. Or, maybe more flexibly, we could have a duality predicate about two families of vector saying they form dual bases, and then state all lemmas in <code>dual.lean</code> in term of this predicate. As usual with predicate vs construction, the gain appears in exactly the situation we are in, when we want an alternative construction for some reason.</p>",
        "id": 172666446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565174361
    },
    {
        "content": "<p>Honestly, I spent way too much time working on this sensitivity thing. Maybe someone who understands linear algebra in mathlib (and especially <code>dual.lean</code>) should take over (<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>?). Today I'll bring my son to <a href=\"https://www.grimper.com/media/guide_falaises/sites/pen_hir_escalade%C2%A9sam_bie_3__crop_995x516.jpg\" target=\"_blank\" title=\"https://www.grimper.com/media/guide_falaises/sites/pen_hir_escalade%C2%A9sam_bie_3__crop_995x516.jpg\">Penhir</a> for climbing.</p>\n<div class=\"message_inline_image\"><a href=\"https://www.grimper.com/media/guide_falaises/sites/pen_hir_escalade%C2%A9sam_bie_3__crop_995x516.jpg\" target=\"_blank\" title=\"Penhir\"><img src=\"https://www.grimper.com/media/guide_falaises/sites/pen_hir_escalade%C2%A9sam_bie_3__crop_995x516.jpg\"></a></div>",
        "id": 172666637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565174538
    },
    {
        "content": "<p>I'm frustrated that we can't advertise our sensitivity conjecture formalization so I tried again. I wrote <a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/ed3d288f0fe696cc5a8049cad612f503ae2f4da3\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/ed3d288f0fe696cc5a8049cad612f503ae2f4da3\">https://github.com/leanprover-community/lean-sensitivity/commit/ed3d288f0fe696cc5a8049cad612f503ae2f4da3</a> about pairs of maps constituting a dual basis. It was a nightmare because elaboration was failing everywhere. And when I try to use it in the main file I get random mismatches of <code>decidable_whatever</code>. Maybe I was wrong when I wrote that function coercions were the main issue. It seems that decidability classes are there each time we really suffer in mathlib (see also polynomials). I give up.</p>",
        "id": 172890105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565385795
    },
    {
        "content": "<p>I guess Rob is our last hope.</p>",
        "id": 172890134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565385826
    },
    {
        "content": "<blockquote>\n<p>working out pi to 7 decimal places,</p>\n</blockquote>\n<p>where was that done? I can't find it after a little look here in the chat.</p>",
        "id": 172919534,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1565433337
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/real/pi.lean#L193-L229\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/real/pi.lean#L193-L229\">https://github.com/leanprover-community/mathlib/blob/master/src/data/real/pi.lean#L193-L229</a> and the linked gist at <a href=\"https://gist.github.com/fpvandoorn/5b405988bc2e61953d56e3597db16ecf\" target=\"_blank\" title=\"https://gist.github.com/fpvandoorn/5b405988bc2e61953d56e3597db16ecf\">https://gist.github.com/fpvandoorn/5b405988bc2e61953d56e3597db16ecf</a></p>",
        "id": 172919943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565433976
    },
    {
        "content": "<p>I think it was our pi day activity</p>",
        "id": 172919955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565434005
    },
    {
        "content": "<p>They worked it out to a million decimal places in Coq once, but I would imagine the process took more than 24 hours in total. What has been interesting recently is that questions have come up and then a group of people have worked on them and within a day or two the code is up and running.</p>",
        "id": 172921002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565435935
    },
    {
        "content": "<p>Though the seven decimal places include the 3., that's still pretty nice.</p>",
        "id": 172924890,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1565443628
    },
    {
        "content": "<p>I also have the impression that <code>decidable_eq</code> requirements are somehow responsible for a lot of pain, though I have no data or understanding of why that would be.</p>",
        "id": 172926333,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565446400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What were the issues you were having here? It seems like things compile, and I don't see any nightmares in the file right now.</p>",
        "id": 173779470,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566381253
    },
    {
        "content": "<p>I was planning to try to move some of the lemmas to mathlib and put this in the archive. Are there still major changes you want to make?</p>",
        "id": 173779502,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566381297
    },
    {
        "content": "<p>I think I've explained it in previous messages. This minor nightmare is <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/sensitivity.lean#L154-L247\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/sensitivity.lean#L154-L247\">https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/sensitivity.lean#L154-L247</a> which was meant to be replaced by calling <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/for_mathlib.lean#L25-L103\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/for_mathlib.lean#L25-L103\">https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/for_mathlib.lean#L25-L103</a> but I couldn't make it work because of conflicting decidable instances (mixing actual instances and <code>classical.prop_decidable</code> I guess). Also <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/sensitivity.lean#L117-L140\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/sensitivity.lean#L117-L140\">https://github.com/leanprover-community/lean-sensitivity/blob/lean-3.4.2/src/sensitivity.lean#L117-L140</a> looks stupid since we then explicitly describe a basis.</p>",
        "id": 173782998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566385186
    },
    {
        "content": "<p>I would really love it if you could have a look at this decidability nightmare</p>",
        "id": 173783054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566385219
    },
    {
        "content": "<p>When we rushed to prove this theorem I thought that within one week we would be able to post comments to all blogs discussing this theorem to point out it was very quickly formalized. Instead we have one more proof that formalization is not practicable for stupid reasons.</p>",
        "id": 173783100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566385287
    },
    {
        "content": "<p>I'll see what I can do.</p>",
        "id": 173783757,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566386005
    },
    {
        "content": "<p>I wasn't involved but I thought that it was indeed quickly formalised</p>",
        "id": 173784660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566386938
    },
    {
        "content": "<p>It was quickly formalized but it's not a perfect formalization. To brag about something this short, it kind of has to be done canonically, and the problem (I think) is that Patrick struggled to get the canonical proof to work.</p>",
        "id": 173784884,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566387147
    },
    {
        "content": "<p>We don't need it to be perfect, but I'd like it to be recognizable maths</p>",
        "id": 173784923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566387185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I just pushed an update. Is this what you had in mind? The decidability issues were nothing major. We were missing a decidable_eq instance for <code>V n</code>, which was confusing things in a few places.</p>",
        "id": 173795003,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566395096
    },
    {
        "content": "<p>In fact, the specific dec_eq instance I gave it isn't necessary. Defining it using <code>classical.dec_eq</code> is fine too. But without the explicit instance, it seems to be inferring different dec_eqs in different places.</p>",
        "id": 173795690,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566395529
    },
    {
        "content": "<p>It's all kind of ironic since <code>V</code> definitely isn't decidable. There are non-defeq ways to pretend that it is.</p>",
        "id": 173795751,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566395575
    },
    {
        "content": "<p>Yes, it looks good. I'm happy you found it easy. I'm so upset by those kinds of problems that my mind refuse to work on them.</p>",
        "id": 173801473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566399245
    },
    {
        "content": "<p>What is the point of getting <code>calc_lemma</code> out of the theorem proof?</p>",
        "id": 173801521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566399277
    },
    {
        "content": "<p>We mathematicians just instinctively deny that such (decidability) issues can exist, because we've been ignoring them for centuries.</p>",
        "id": 173801531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566399284
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/a4b69d68217b7b8319a03f3406f4fba6147b2f91/src/sensitivity.lean#L194-L202\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/a4b69d68217b7b8319a03f3406f4fba6147b2f91/src/sensitivity.lean#L194-L202\">https://github.com/leanprover-community/lean-sensitivity/blob/a4b69d68217b7b8319a03f3406f4fba6147b2f91/src/sensitivity.lean#L194-L202</a> are not needed, we can use their proofs where we need them</p>",
        "id": 173801593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566399335
    },
    {
        "content": "<p>And we still have that silly dimension computation. We should have a mathlib lemma stating that if <code>V</code> has a basis index by a finite type then its <code>findim</code> is the cardinal of this finite type, and of course a lemma computing the cardinal of <code>fin n to bool</code></p>",
        "id": 173801811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566399477
    },
    {
        "content": "<blockquote>\n<p>What is the point of getting <code>calc_lemma</code> out of the theorem proof?</p>\n</blockquote>\n<p>That calc block is a memory hog. I moved it out to make it easier to fix, it doesn't have to stay out. Also gave me a chance to try <code>extract_goal</code>, which stumbles a bit with <code>let</code> statements.</p>",
        "id": 173801971,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566399580
    },
    {
        "content": "<blockquote>\n<p>I think <a href=\"https://github.com/leanprover-community/lean-sensitivity/blob/a4b69d68217b7b8319a03f3406f4fba6147b2f91/src/sensitivity.lean#L194-L202\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/blob/a4b69d68217b7b8319a03f3406f4fba6147b2f91/src/sensitivity.lean#L194-L202\">https://github.com/leanprover-community/lean-sensitivity/blob/a4b69d68217b7b8319a03f3406f4fba6147b2f91/src/sensitivity.lean#L194-L202</a> are not needed, we can use their proofs where we need them</p>\n</blockquote>\n<p>Yeah. Again, just slightly easier to put them there while making the updates.</p>",
        "id": 173802076,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566399624
    },
    {
        "content": "<blockquote>\n<p>And we still have that silly dimension computation. We should have a mathlib lemma stating that if <code>V</code> has a basis index by a finite type then its <code>findim</code> is the cardinal of this finite type, and of course a lemma computing the cardinal of <code>fin n to bool</code></p>\n</blockquote>\n<p>This is more annoying than it should be because of cardinal universes.</p>",
        "id": 173807927,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566403343
    },
    {
        "content": "<p>I really think mathlib should hide this to users who manipulate only finite-dimensional vector spaces (as we do in this proof)</p>",
        "id": 173808017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566403393
    },
    {
        "content": "<p>If we can't do that then the linear algebra library has a serious issue</p>",
        "id": 173808050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566403411
    },
    {
        "content": "<p>I think this is what <code>linear_algebra/finite_dimensional.lean</code> is trying to do, but there's still some glue missing.</p>",
        "id": 173808648,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566403797
    },
    {
        "content": "<p><code>fg</code> doesn't seem to be linked up with the existence of a finite basis, as far as I can tell.</p>",
        "id": 173808881,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566403937
    },
    {
        "content": "<p>Turns out I work better late at night and this was much easier than I thought. <a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/af28ecfab7f412f7d451a4ff4cf328aad322eae3\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/af28ecfab7f412f7d451a4ff4cf328aad322eae3\">https://github.com/leanprover-community/lean-sensitivity/commit/af28ecfab7f412f7d451a4ff4cf328aad322eae3</a></p>",
        "id": 173840611,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566429966
    },
    {
        "content": "<p>Thanks Rob! I finally had some time to look at it. I would still prefer to hide cardinal even more (or at least have only one of <code>dim_V</code> or <code>dim_V'</code>) but it's already much better. I feel sufficiently confident that we are close to something we could share (and I feel sufficiently confident I don't want to write that referee report I should be writing) that I made a cosmetic pass on the whole file: <a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/4feaed5a407676a45327854595bd3e4b319c4f7e\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/4feaed5a407676a45327854595bd3e4b319c4f7e\">https://github.com/leanprover-community/lean-sensitivity/commit/4feaed5a407676a45327854595bd3e4b319c4f7e</a> I hope there aren't too many controversial changes (especially for equation compiler addicts). Everyone is free to tweak it.</p>",
        "id": 173891541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566486990
    },
    {
        "content": "<p>I also reintegrated the calc block in the main proof.</p>",
        "id": 173891734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566487129
    },
    {
        "content": "<p>And now we can go on removing stuff that just got merged in mathlib, and continue emptying <code>for_mathlib.lean</code></p>",
        "id": 173892876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566487950
    },
    {
        "content": "<p>It looks good! I just pushed an update that gets rid of <code>dim_V'</code>. But updating mathlib breaks the <code>assumption_mod_cast</code>in <code>findim_V</code>, I'm not sure why.</p>",
        "id": 173895389,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566489629
    },
    {
        "content": "<p>Fixed. <a href=\"https://github.com/leanprover-community/lean-sensitivity/tree/upgraded_mathlib\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/tree/upgraded_mathlib\">https://github.com/leanprover-community/lean-sensitivity/tree/upgraded_mathlib</a> on a branch for now so it doesn't interfere with update-mathlib. After the next nightly comes out, we can upgrade to that and merge to master.</p>",
        "id": 173896379,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566490379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> At <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/cardinal.lean#L589\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/cardinal.lean#L589\">https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/cardinal.lean#L589</a>, is <code>nat_cast_pow</code> (and <code>nat_cast_le</code>) a good <code>elim_cast</code> lemma? Maybe I was wrong to add that.</p>",
        "id": 173896604,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566490534
    },
    {
        "content": "<p>Rob, do you understand the crazy <a href=\"https://github.com/leanprover-community/lean-sensitivity/commit/658b12067f73e85fe27e6108bed92b2148c454da\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-sensitivity/commit/658b12067f73e85fe27e6108bed92b2148c454da\">https://github.com/leanprover-community/lean-sensitivity/commit/658b12067f73e85fe27e6108bed92b2148c454da</a> or is it the result of random desperate modifications?</p>",
        "id": 173950756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566548178
    },
    {
        "content": "<p>That commit in particular, or the short circuits more generally? They were local to the namespace <code>V</code> before, which ended right after they were declared, so they were doing absolutely nothing.</p>",
        "id": 173952257,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566549943
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 173952311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566549975
    },
    {
        "content": "<p>I'm sorry I messed up that</p>",
        "id": 173952316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566549990
    },
    {
        "content": "<p>I just pushed some more tweaks to make statements look nicer (at least to my eye)</p>",
        "id": 173952347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566550043
    },
    {
        "content": "<p>Did you make progress on the mathlib bump issue?</p>",
        "id": 173952362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566550067
    },
    {
        "content": "<p>No worries. It was obvious something was wrong when I opened it on my laptop, the extra 25 seconds to compile are noticeable.</p>",
        "id": 173952414,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566550107
    },
    {
        "content": "<p>I think the next mathlib nightly goes up once the next PR gets merged and built, right?</p>",
        "id": 173952441,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566550162
    },
    {
        "content": "<p>Then we run <code>leanpkg upgrade</code> on the <code>upgraded_mathlib</code> branch and rebase.</p>",
        "id": 173952458,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566550186
    },
    {
        "content": "<p>I think the remaining ugliness in statements now all come from elaboration issues (the obvious ones like <code>(f (m + 1) : _) w = √(m + 1) • w</code> but also the sneaky ones like being forced to write <code>√(m + 1) ≤ Card (H ∩ q.adjacent)</code> instead of switching sides to match the way we would <em>say</em> it).</p>",
        "id": 173952521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566550233
    },
    {
        "content": "<p>Oh, I thought you had trouble with the question you asked PN</p>",
        "id": 173952562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566550265
    },
    {
        "content": "<p>Oh, that's fixed locally, I was just wondering if it should be a global change.</p>",
        "id": 173952635,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566550331
    },
    {
        "content": "<p><code>apply'</code> just got merged so we should get a new nightly soon</p>",
        "id": 173952666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566550369
    },
    {
        "content": "<p>Of course we can always trigger a new nightly build by hand if we are in a hurry</p>",
        "id": 173952686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566550387
    },
    {
        "content": "<p>Back to mathematics, I wonder why the theorem is stated (in our formalization and in the original paper) for positive n. Isn't the statement obviously true when n = 0?</p>",
        "id": 173952772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566550461
    },
    {
        "content": "<p>I'll need to run soon, got a friend in town visiting. But your changes look fine. There's dead code on lines 344-345.</p>",
        "id": 173952779,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566550479
    },
    {
        "content": "<p>oops, forgot to delete that. I'll do it right now</p>",
        "id": 173952803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566550513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  <code>nat_cast_le</code> is a good <code>elim_cast</code> lemma and <code>nat_cast_pow</code> should be a <code>move_cast</code> lemma.<br>\nsomething to keep in mind that I should also write explicitely in the documentation is that <code>move_cast</code> lemmas are going to be used from right to left.<br>\nso in that case, the <code>nat_cast_pow</code> lemma will turn <code>↑n ^ m</code> into <code>↑(pow n m)</code>, which can be a bit weird if the <code>^</code> notation is defined on cardinals.<br>\nI'll add these notes to the documentation as soon as I am done with the report.</p>",
        "id": 173954951,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1566552696
    },
    {
        "content": "<p>Ok, we are up to date with mathlib, and ready for the next round of PR</p>",
        "id": 173960407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566558766
    },
    {
        "content": "<p>on the <code>reduction</code> branch i started on the reduction of the original sensitivity conjecture to the degree theorem we formalized</p>",
        "id": 174050950,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1566673903
    },
    {
        "content": "<p>it looks manageable except that the proof of <code>gotsman_linial_equivalence</code> uses Fourier transforms</p>",
        "id": 174051001,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1566673944
    },
    {
        "content": "<p>That sounds like a big \"except\"</p>",
        "id": 174052457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566676743
    },
    {
        "content": "<p>Why can't Lean handle FT?  Not that I need it for my app or anything...</p>",
        "id": 174052788,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566677340
    },
    {
        "content": "<p>Oh, it can. But someone needs to explain it to Lean.</p>",
        "id": 174052986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566677645
    },
    {
        "content": "<p>And analysis is not mathlib's strong point</p>",
        "id": 174052995,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566677659
    },
    {
        "content": "<p>It's not really Fourier transforms in the Gotsman-Linial argument --- it's just the Z/2Z valued version, no analysis involved at all.</p>",
        "id": 174057909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566687553
    },
    {
        "content": "<p>In fact the proof is just a few lines, even easier than Huang's recent argument.</p>",
        "id": 174057916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566687588
    },
    {
        "content": "<p>I can attest to that.  Has to do with sums of roots of unity in any field.</p>",
        "id": 174058088,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566687932
    },
    {
        "content": "<p>oh, good</p>\n<p>then maybe soon we can say that we <em>really</em> formalized the sensitivity conjecture</p>",
        "id": 174058135,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1566687998
    },
    {
        "content": "<p>The Gotsman-Linial argument is in <a href=\"https://www.sciencedirect.com/science/article/pii/0097316592900608\" target=\"_blank\" title=\"https://www.sciencedirect.com/science/article/pii/0097316592900608\">https://www.sciencedirect.com/science/article/pii/0097316592900608</a>, which is free online. There's also a restatement of the proof at <a href=\"https://blog.computationalcomplexity.org/2019/07/degree-and-sensitivity.html\" target=\"_blank\" title=\"https://blog.computationalcomplexity.org/2019/07/degree-and-sensitivity.html\">https://blog.computationalcomplexity.org/2019/07/degree-and-sensitivity.html</a>.</p>",
        "id": 174058843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566689553
    },
    {
        "content": "<p>I'm not sure what EnjoysMath meant, but there's nothing in the argument about sums of roots of unity, it's just counting signs in the GL argument.</p>",
        "id": 174058895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566689665
    },
    {
        "content": "<p>I was trying to figure out why this project was so slow to compile on my laptop. Looks like we have another performance issue when we get deep into the mathlib file hierarchy: building the default <code>simp</code> set at the beginning of <code>for_mathlib.lean</code> takes 1.5 sec (on my laptop, 1 sec on my desktop). This happens once in every declaration that uses <code>simp</code> without <code>only</code>.</p>",
        "id": 174203212,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566891004
    },
    {
        "content": "<p>/me hears Kenny rolling on the floor lauging out loud</p>",
        "id": 174203429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566891279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> In how many different languages do you know the word “Schadenfreude”?</p>",
        "id": 174203447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566891302
    },
    {
        "content": "<p>Wow, that’s really bad.</p>",
        "id": 174206467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566894028
    },
    {
        "content": "<p>Like, maybe this enterprise is actually doomed, bad. :-)</p>",
        "id": 174206484,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566894048
    },
    {
        "content": "<p>I think this is maybe a case for being careful about minimising imports. It won't improve speed for everyone, but certainly it will improve speed a lot of the time. I think there were a lot of unnecessary imports for that proof.</p>",
        "id": 174207036,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566894536
    },
    {
        "content": "<blockquote>\n<p>[…] building the default <code>simp</code> set at the beginning of <code>for_mathlib.lean</code> takes 1.5 sec (on my laptop, 1 sec on my desktop). This happens once in every declaration that uses <code>simp</code> without <code>only</code>.</p>\n</blockquote>\n<p>Isn't this something that can be cached?</p>",
        "id": 174208113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566895305
    },
    {
        "content": "<p>It's not like it's an inherent problem -- I don't think Isabelle has the same behavior. Caching the simp set is probably pretty complicated because of multithreading. There's maybe something to be done there, but definitely not doable from mathlib.</p>",
        "id": 174208681,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566895880
    },
    {
        "content": "<p>It's the best case I've heard yet for minimizing imports. But I'm not sure how much it will really buy in the end. Maybe it helps this specific proof, but it will be a recurring issue.</p>",
        "id": 174208759,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566895958
    },
    {
        "content": "<p>It's fairly slow even just importing <code>analysis.normed_space.basic</code>.</p>",
        "id": 174208864,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566896068
    },
    {
        "content": "<p>I wonder if we should also be using <code>local attribute [simp]</code> more, or custom simp sets.</p>",
        "id": 174209480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566896595
    },
    {
        "content": "<p>I was always wondering whether the amount of <code>simp</code> declarations would cause performance issues. Limiting the number of imports might help a bit, but that is not a sustainable solution. Other potential solutions:</p>\n<ul>\n<li>Can we write a user command at the top of a file that generates and caches the standard simp set, which all declarations in that file can then use? (Potentially modifying them a little bit, since some new simp-lemmas might be added).</li>\n<li>As Scott said, make extensive use of simp-sets: instead of marking everything with <code>@[simp]</code> we mark things as <code>topology_simp</code> and <code>linear_algebra_simp</code> and with <code>simp with topology_simp</code>. Obviously this is a less nice user experience.</li>\n<li>Be more restrictive with marking declarations as <code>simp</code>. Maybe not every simplification should be a simp-lemma. This will probably not make a big enough impact, since most simp-lemmas should remain simp-lemmas.</li>\n</ul>",
        "id": 174240665,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566920113
    },
    {
        "content": "<blockquote>\n<p>Can we write a user command at the top of a file that generates and caches the standard simp set, which all declarations in that file can then use? (Potentially modifying them a little bit, since some new simp-lemmas might be added).</p>\n</blockquote>\n<p>And define a new tactic <code>simp'</code> to use our cache? That would probably be doable. I'm not sure how efficiently we can generate a cache compared to the built in methods. And I think it's pretty common to progressively prove a bunch of simp lemmas in a file, which may use each other, and then a lot of theorems that use these simp rules right after. We'd have to modify a lot of proofs and/or regenerate the cache a bunch of times per file.</p>",
        "id": 174247923,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566924824
    },
    {
        "content": "<blockquote>\n<p>I wonder if we should also be using <code>local attribute [simp]</code> more, or custom simp sets.</p>\n</blockquote>\n<p>This seems like the most effective way to speed things up, and also a huge pain.</p>",
        "id": 174247994,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566924852
    },
    {
        "content": "<p>The alternative, of course, is to not change anything for now and see how things look in <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> .</p>",
        "id": 174248029,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566924888
    },
    {
        "content": "<p>There are some simp sets that are pretty self-contained. I'm thinking of all the rules for making sense of filters. That would be a pretty natural thing to factor out of the default simp set.</p>",
        "id": 174248367,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566925132
    },
    {
        "content": "<p>Why is this not an issue in Isabelle?</p>",
        "id": 174248403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566925166
    },
    {
        "content": "<p>Johan, did you ever read <a href=\"https://github.com/leanprover/lean/wiki/Simplifier-Features\" target=\"_blank\" title=\"https://github.com/leanprover/lean/wiki/Simplifier-Features\">https://github.com/leanprover/lean/wiki/Simplifier-Features</a> to see what the simplifier could look like?</p>",
        "id": 174251117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566927094
    },
    {
        "content": "<p>Patrick, nope, I didn't.</p>",
        "id": 174251983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566927756
    },
    {
        "content": "<p>It's an inspiring wiki page, thanks for the link!</p>",
        "id": 174252245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566927954
    }
]