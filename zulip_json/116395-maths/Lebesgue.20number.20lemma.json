[
    {
        "content": "<p>In mathlib we have a <a href=\"https://github.com/leanprover-community/mathlib/blob/fd0dc27e5d35545c7a8723d0d0002bdd4d5b2850/src/topology/metric_space/basic.lean#L1273-L1280\" title=\"https://github.com/leanprover-community/mathlib/blob/fd0dc27e5d35545c7a8723d0d0002bdd4d5b2850/src/topology/metric_space/basic.lean#L1273-L1280\">strange version</a> of the Lebesgue number lemma which assumes compactness instead of sequential compactness. In particular it's not so useful when proving that sequentially compact subspaces of metric spaces are compact. This strange version however is derived from a <a href=\"https://github.com/leanprover-community/mathlib/blob/fd0dc27e5d35545c7a8723d0d0002bdd4d5b2850/src/topology/uniform_space/basic.lean#L881-L883\" title=\"https://github.com/leanprover-community/mathlib/blob/fd0dc27e5d35545c7a8723d0d0002bdd4d5b2850/src/topology/uniform_space/basic.lean#L881-L883\">version on uniform space</a> where sequential compactness is probably not enough. My current plan is to prove a uniform space version assuming sequential compactness but also assuming the uniformity is countably generated. Does it sound good? <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> it seems you wrote those.</p>",
        "id": 193952407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586895863
    },
    {
        "content": "<p>Is there any use of the versions of the Lebesgue assuming only compactness (provided we know that sequentially compact is equivalent to compact in metric spaces)?</p>",
        "id": 193952505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586895937
    },
    {
        "content": "<p>I don't know anything about sequential compactness. But certainly I only intended to ever apply the Lebesgue number lemma to spaces like [0, 1]^n.</p>",
        "id": 193954195,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586896841
    },
    {
        "content": "<p>Say I want to prove a subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is compact iff every sequence in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> has a converging subsequence.</p>",
        "id": 193954309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586896911
    },
    {
        "content": "<p>How would you do that?</p>",
        "id": 193954376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586896930
    },
    {
        "content": "<p>Look in a book on real analysis? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 193954391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586896937
    },
    {
        "content": "<p>The standard proof for the right to left implication using the Lebesgue number lemma.</p>",
        "id": 193954414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586896952
    },
    {
        "content": "<p>But of course if you assume compactness in this lemma then the proof becomes less convincing.</p>",
        "id": 193954446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586896968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, any thought on this topic?</p>",
        "id": 193954474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586896984
    },
    {
        "content": "<p>If every sequence in <code>S</code> has a converging subsequence, your set is clearly closed and bounded, therefore compact :) </p>\n<p>I agree that the classical proof goes through the Lebesgue number for sequentially compact spaces, but for me this is more of a historical curiosity (maths de classes prépa, say). I definitely used the Lebesgue number lemma for compact spaces in real maths, so the existing version is the right one for me, but probably not for teaching purposes.</p>",
        "id": 193954955,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586897249
    },
    {
        "content": "<p>Did you use it for compact spaces that are not first countable (hence may be not sequentially compact)?</p>",
        "id": 193955629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586897548
    },
    {
        "content": "<p>I'll probably put your proof in mathlib anyway. But the classical proof is nice to formalize.</p>",
        "id": 193955853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586897678
    },
    {
        "content": "<p>I mean it's nicely frustrating (involving discussing finite subsets).</p>",
        "id": 193955895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586897702
    },
    {
        "content": "<p>No, always in metric spaces, of course.</p>",
        "id": 193956977,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586898245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/Lebesgue.20number.20lemma/near/193954955\" title=\"#narrow/stream/116395-maths/topic/Lebesgue.20number.20lemma/near/193954955\">said</a>:</p>\n<blockquote>\n<p>If every sequence in <code>S</code> has a converging subsequence, your set is clearly closed and bounded, therefore compact :) </p>\n<p>I agree that the classical proof goes through the Lebesgue number for sequentially compact spaces, but for me this is more of a historical curiosity (maths de classes prépa, say). I definitely used the Lebesgue number lemma for compact spaces in real maths, so the existing version is the right one for me, but probably not for teaching purposes.</p>\n</blockquote>\n<p>I should really ask for a formal proof each time someone claims something about math. I was so tired yesterday night that I believed Sébastien without thinking at all. This \"proof\" is of course a joke.</p>",
        "id": 193997014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586938290
    },
    {
        "content": "<p>what's wrong with this proof?</p>",
        "id": 193997397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586938505
    },
    {
        "content": "<p>the crucial step that I^n is compact follows easily from the fact that I is compact and product of compact spaces is compact</p>",
        "id": 193997685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586938698
    },
    {
        "content": "<p>\"closed and bounded, therefore compact\" is wrong (Sébastien did put a smiley after this, but I was misled by the following paragraph).</p>",
        "id": 194000282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586940306
    },
    {
        "content": "<p>I thought S is a subset of R^n</p>",
        "id": 194000497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586940455
    },
    {
        "content": "<p>No, it's not.</p>",
        "id": 194003854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586942484
    },
    {
        "content": "<p>In your question, <code>S</code> was indeed a subset of <code>R^n</code>, therefore the proof works. But of course it doesn't work in the generality you would like, hence the smiley.</p>",
        "id": 194004050,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586942602
    },
    {
        "content": "<p>I guess you can replace \"closed and bounded\" with \"complete and totally bounded\" and deduce compactness by \"lion-hunting\", but Lebesgue number lemma is probably easier</p>",
        "id": 194007079,
        "sender_full_name": "David Wärn",
        "timestamp": 1586944412
    },
    {
        "content": "<p>We already have that a complete totally bounded set is compact.</p>",
        "id": 194007208,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586944491
    },
    {
        "content": "<p>Totally bounded is needed anyway. But I don't see how to get completeness.</p>",
        "id": 194007214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586944498
    },
    {
        "content": "<p>Do you already have that completeness is equivalent to the convergence of Cauchy sequences?</p>",
        "id": 194007295,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586944546
    },
    {
        "content": "<p>I didn't do that, but maybe it's already there somewhere.</p>",
        "id": 194007373,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586944587
    },
    {
        "content": "<p>Isn't that the definition?</p>",
        "id": 194007374,
        "sender_full_name": "David Wärn",
        "timestamp": 1586944587
    },
    {
        "content": "<p>No, not in this generality</p>",
        "id": 194007388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586944605
    },
    {
        "content": "<p>We are discussing uniform spaces having a countable basis of entourages here.</p>",
        "id": 194007450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586944644
    },
    {
        "content": "<p>So it's not the definition, but it should hold.</p>",
        "id": 194007464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586944658
    },
    {
        "content": "<p>Once you have this, start from a Cauchy sequence, say that it has a convergent subsequence, and therefore the whole sequence is converging (this last fact is already there, I know since I have used it for analytic maps)</p>",
        "id": 194008222,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586945028
    },
    {
        "content": "<p>Yes, I understand your plan.</p>",
        "id": 194008282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586945047
    },
    {
        "content": "<p>But I'm halfway through Lebesgue number so I think I'll finish that.</p>",
        "id": 194008307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586945063
    },
    {
        "content": "<p>Sure!</p>",
        "id": 194008343,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586945089
    },
    {
        "content": "<p>I hope it could be useful for other things.</p>",
        "id": 194008346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586945093
    },
    {
        "content": "<p>I even hope I'll get enough motivation to do some cleanup in <code>uniform_space.basic</code>.</p>",
        "id": 194008400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586945139
    },
    {
        "content": "<p>Cleaning up includes documenting of course.</p>",
        "id": 194008474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586945168
    },
    {
        "content": "<p>We have \"completeness from convergence of Cauchy sequences\" near the end of <code>cauchy.lean</code>.</p>",
        "id": 194014603,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586949474
    },
    {
        "content": "<p>And Patrick even updated it to use <code>is_countably_generated</code></p>",
        "id": 194014784,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586949598
    },
    {
        "content": "<p>I did those updates in automatic mode, without really reading...</p>",
        "id": 194015101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586949834
    },
    {
        "content": "<p>Ok, I'm done with this Lebesgue number lemma. I continue to experiment with writing non-trivial proofs in a readable way. I'd like to know whether someone can read the next proof. It depends on stuff not in mathlib, but my goal is to have it readable anyway, even without tactic state, simply through the use of <code>obtain</code> and <code>clear</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lebesgue_number_lemma_seq</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">seq_compact</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc₂</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">is_countably_generated</span> <span class=\"o\">(</span><span class=\"err\">𝓤</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"err\">∈</span> <span class=\"err\">𝓤</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">Vsymm</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"err\">𝓤</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_antimono_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span>  <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">has_seq_basis</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"bp\">.</span><span class=\"n\">to_has_basis</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"err\">⊆</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"kn\">using</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">forall_and_distrib</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">x₀_in</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">φ_mono</span><span class=\"o\">,</span> <span class=\"n\">hlim</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">strict_mono</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∘</span> <span class=\"n\">φ</span> <span class=\"err\">⟶</span> <span class=\"n\">x₀</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">hs</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">i₀</span><span class=\"o\">,</span> <span class=\"n\">x₀_in</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i₀</span><span class=\"o\">,</span> <span class=\"n\">x₀</span> <span class=\"err\">∈</span> <span class=\"n\">c</span> <span class=\"n\">i₀</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hc₂</span> <span class=\"n\">x₀_in</span> <span class=\"k\">with</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">i₀</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">x₀_in_c</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">i₀</span><span class=\"o\">,</span> <span class=\"n\">x₀_in_c</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">hc₂</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n₀</span><span class=\"o\">,</span> <span class=\"n\">hn₀</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n₀</span><span class=\"o\">,</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span> <span class=\"n\">n₀</span><span class=\"o\">]</span> <span class=\"n\">x₀</span> <span class=\"err\">⊆</span> <span class=\"n\">c</span> <span class=\"n\">i₀</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_iff_mem_nhds</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hc₁</span> <span class=\"n\">i₀</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">x₀_in</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">nhds_basis_uniformity</span> <span class=\"n\">hV</span><span class=\"bp\">.</span><span class=\"n\">to_has_basis</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">n₀</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n₀</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"err\">←</span> <span class=\"n\">ball_eq_of_symmetry</span> <span class=\"o\">(</span><span class=\"n\">Vsymm</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">hc₁</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">W_in</span><span class=\"o\">,</span> <span class=\"n\">hWW</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">W</span> <span class=\"err\">∈</span> <span class=\"err\">𝓤</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"err\">○</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"n\">n₀</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">comp_mem_uniformity_sets</span> <span class=\"o\">(</span><span class=\"n\">hV</span><span class=\"bp\">.</span><span class=\"n\">to_has_basis</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem</span> <span class=\"n\">trivial</span><span class=\"o\">),</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x_φ_N_in</span><span class=\"o\">,</span> <span class=\"n\">hVNW</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">x₀</span> <span class=\"bp\">∧</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">N₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N₁</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N₁</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">x₀</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">tendsto_at_top&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝓝</span> <span class=\"n\">x₀</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hlim</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_nhds_left</span> <span class=\"n\">x₀</span> <span class=\"n\">W_in</span><span class=\"o\">),</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">N₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N₂</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N₂</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hV</span><span class=\"bp\">.</span><span class=\"n\">to_has_basis</span><span class=\"bp\">.</span><span class=\"n\">mem_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">W_in</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hV</span><span class=\"bp\">.</span><span class=\"n\">decreasing</span> <span class=\"n\">trivial</span> <span class=\"n\">trivial</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">id_le_of_strict_mono</span> <span class=\"n\">φ_mono</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hN</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">N₂</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N₁</span> <span class=\"n\">N₂</span><span class=\"o\">),</span>\n      <span class=\"k\">from</span> <span class=\"n\">φ_mono</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">max</span> <span class=\"n\">N₁</span> <span class=\"n\">N₂</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hV</span><span class=\"bp\">.</span><span class=\"n\">decreasing</span> <span class=\"n\">trivial</span> <span class=\"n\">trivial</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">c</span> <span class=\"n\">i₀</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">i₀</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preimage_mono</span> <span class=\"n\">hVNW</span>\n                       <span class=\"bp\">...</span> <span class=\"err\">⊆</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span> <span class=\"n\">n₀</span><span class=\"o\">]</span> <span class=\"n\">x₀</span>   <span class=\"o\">:</span> <span class=\"n\">ball_subset_of_comp_subset</span> <span class=\"n\">x_φ_N_in</span> <span class=\"n\">hWW</span>\n                       <span class=\"bp\">...</span> <span class=\"err\">⊆</span> <span class=\"n\">c</span> <span class=\"n\">i₀</span>             <span class=\"o\">:</span> <span class=\"n\">hn₀</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194033514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586958815
    },
    {
        "content": "<p>If you want to make it readable, why not just add comments in between every line like <a href=\"https://github.com/ImperialCollegeLondon/M4P33/blob/master/src/for_mathlib/commutative_algebra/Zariski_lemma.lean#L211-L258\" title=\"https://github.com/ImperialCollegeLondon/M4P33/blob/master/src/for_mathlib/commutative_algebra/Zariski_lemma.lean#L211-L258\">I half-did here</a>?</p>",
        "id": 194034045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586959040
    },
    {
        "content": "<p>My question is precisely: can those <code>obtain</code> serve as comments?</p>",
        "id": 194034186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959087
    },
    {
        "content": "<p>They give all the steps in the proof, and the <code>clear</code> commands flag the fact that an assumption has just being used.</p>",
        "id": 194034297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959144
    },
    {
        "content": "<p>I don't really know the maths, and I think I can follow what's going on quite well.</p>",
        "id": 194034318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586959159
    },
    {
        "content": "<p>Oh I see! Yes this is an interesting style.</p>",
        "id": 194034526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586959228
    },
    {
        "content": "<p>Yes I think this is very interesting. The <code>obtain</code> steps say precisely what I would be saying in my comments.</p>",
        "id": 194034718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586959317
    },
    {
        "content": "<p>They also have the advantage that they name all the notation.</p>",
        "id": 194034795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586959341
    },
    {
        "content": "<p>I didn't find the <code>clear</code> commands particularly helpful, but where you've put them makes them easy to ignore.</p>",
        "id": 194035846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586959770
    }
]