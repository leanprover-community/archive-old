[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">phi_squared</span> <span class=\"o\">:</span> <span class=\"n\">phi</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">phi</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- First goal: get rid of divisions.</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_mul_div</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"c1\">-- kind of annoying that I have to stop my rewrite,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_div_iff_mul_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span><span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Now multiplying out will remove them so use ring</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Now use ring as a not-quite-goal-killing tactic</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- is this poor coding style? Feels safe to me</span>\n  <span class=\"c1\">-- Now get sqrt 5&#39;s together</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span><span class=\"err\">←</span><span class=\"n\">pow_two</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ... and kill them</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sqr_sqrt</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span><span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Now ring will do it.</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This came up today when talking to the UGs about some analysis. It's still a lot more painful than I'd like it to be. Am I missing any tricks which would make the argument shorter? I feel like my first instinct with all of these things is to get rid of denominators, so I can start using <code>ring</code>. Should it be? </p>\n<p>I feel like I could sometimes use a slightly beefed-up version of <code>ring</code> which starts by locating all denominators, multiplying everything up by a common denominator, introducing subgoals saying that all of them are non-zero (because they always  are in maths) and then killing the main identity with ring leaving me just the job of justifying that all the denominators are non-zero.</p>",
        "id": 159450921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551209646
    },
    {
        "content": "<p>Thinking about this more, I realise that actually this is different from the <code>ring</code> tactic -- I could do with a <code>clear_denominator</code> tactic, which takes a goal of the form e.g. <code>a +  b/c + (d+e-f)/g = h / i</code> with variables in a field, and reduces it to goals <code>c ne 0</code>, <code>g ne 0</code>, <code>i ne 0</code> and <code>a*c*g*i + b*g*i+(d+e-f)*c*i=h*c*g</code>. That looks to me like something one could write an algorithm for. Am I being naive? It could eliminate denominators one by one. I don't care how horrible the final goal is, because in many cases I'll be able to prove it using <code>ring</code>.</p>",
        "id": 159454506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551212272
    },
    {
        "content": "<p>I thought about this at some point, the difficulty is to push the multiplication through the expression, but it should be possible</p>",
        "id": 159455256,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551212815
    },
    {
        "content": "<p>There's a preprocessing step in <code>linarith</code> that does this for numeric denominators. If someone is interested in implementing this, maybe there's inspiration to be found there, although I can't promise it's the cleanest code.</p>",
        "id": 159457603,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551214625
    },
    {
        "content": "<p>IIRC, it walks through the term first to compute a coefficient that will cancel all denominators in the term. You need more than a bare coefficient though, you need some sort of tree to represent which part to distribute to which side of a product.</p>",
        "id": 159457718,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551214730
    },
    {
        "content": "<p>Does it deal with <code>(a/b)/(c/d) = e / f</code>?</p>",
        "id": 159457876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551214846
    },
    {
        "content": "<p>Ugh, apparently not.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 159458156,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551215046
    },
    {
        "content": "<p>Simon, stop playing with python, we need your super powers! <span aria-label=\"santa\" class=\"emoji emoji-1f385\" role=\"img\" title=\"santa\">:santa:</span></p>",
        "id": 159458433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551215243
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">phi_squared</span> <span class=\"o\">:</span> <span class=\"n\">phi</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">phi</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">phi</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_iff_eq_add&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">two_ne_zero</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">phi</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">phi</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_iff_eq_add&#39;</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">two_ne_zero</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">sqr_sqrt</span><span class=\"o\">],</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_mul_eq_mul_left</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159464333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551219839
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">phi_squared</span> <span class=\"o\">:</span> <span class=\"n\">phi</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">phi</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">phi</span><span class=\"o\">,</span> <span class=\"n\">div_pow</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_self_sqrt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</pre></div>",
        "id": 159465701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551221052
    },
    {
        "content": "<p>oh right, <code>ring</code> knows about div</p>",
        "id": 159466329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551221674
    }
]