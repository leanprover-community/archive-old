[
    {
        "content": "<p>Hi all, im wondering if there is any work being done on defining dagger categories in the mathlib. I have the end goal of defining a compact closed dagger category: <a href=\"https://ncatlab.org/nlab/show/compact+closed+dagger+category\">https://ncatlab.org/nlab/show/compact+closed+dagger+category</a></p>",
        "id": 288332644,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1656861781
    },
    {
        "content": "<p>More work on all sorts of monoidal categories would be cool!</p>",
        "id": 288399809,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1656935698
    },
    {
        "content": "<p>Even the definition of a dagger cat is still missing</p>",
        "id": 288399984,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1656935808
    },
    {
        "content": "<p>I have started working on the definition of dagger categories and I'm running into an issue at the moment, any help would be appreciated: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">dagger_cat</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⟶</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">id_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">double_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">comp_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I know that my line specifying the identity condition is written incorrectly as is, but im not quite sure how i should express it. I think I my have started off incorrectly in the way I defined the dagger function. What would be a correct way of writing this definition? Thanks</p>",
        "id": 289190043,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1657546172
    },
    {
        "content": "<p>I seemed to have fixed my issue with the identity condition, so the code is now written as: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">dagger_cat</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⟶</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">id_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">double_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">comp_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However I now get an error saying </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">hom_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⟶</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">id_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">quiver</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I do not know what this error means so I don't know exactly why what I have written is wrong.</p>",
        "id": 289191660,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1657546874
    },
    {
        "content": "<p>Ok i see that I have been writing \\hom when I meant to be writing \\-&gt; which is why I got the quiver related error</p>",
        "id": 289193274,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1657547569
    },
    {
        "content": "<p>In <code>double_dagger</code> and <code>comp_dagger</code>, <code>f</code> shouldn't be of type <code>C ⟶ C</code> (which isn't even defined, that's why Lean complains). It should be of type <code>x ⟶ y</code> for <code>x y : C</code>.</p>",
        "id": 289193488,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657547653
    },
    {
        "content": "<p>You do want to use \\hom and not \\-&gt; though</p>",
        "id": 289193553,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657547693
    },
    {
        "content": "<p>Great thank you! I'll write that up and see what new errors I potentially encounter</p>",
        "id": 289194318,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1657547985
    },
    {
        "content": "<p>I've made the suggested changes and now I have the following issue: with the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">dagger_cat</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">id_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"mi\">𝟙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">double_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">comp_dagger</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≫</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">≫</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I  get the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">C</span>\n</code></pre></div>\n<p>on the second line (the one with <code>hom_dagger</code>)</p>",
        "id": 289195665,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1657548485
    },
    {
        "content": "<p>I think now you have converted too many \\hom to \\-&gt;. Between x and y there should still be \\hom</p>",
        "id": 289200481,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1657550589
    },
    {
        "content": "<p>I think what you want is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category.basic</span>\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">class</span> <span class=\"n\">dagger_cat</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⟶</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">id_dagger</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">double_dagger</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">hom_dagger</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> `dagger_involutive` seems a better name. -/</span>\n<span class=\"o\">(</span><span class=\"n\">comp_dagger</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">⟶</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">hom_dagger</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289202061,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657551234
    },
    {
        "content": "<p>You were omitting two many parentheses (<code>hom_dagger 𝟙 x</code> instead of <code>hom_dagger (𝟙 x)</code>, <code>hom_dagger x → y</code> instead of <code>hom_dagger (x → y)</code>), and you didn't make <code>x</code> and <code>y</code> implicit in <code>hom_dagger</code> so you were bound to get an error when not providing <code>x</code> and <code>y</code> (for example you would need to write <code>hom_dagger x x (𝟙 x)</code>).</p>",
        "id": 289202407,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657551344
    },
    {
        "content": "<p>Ah that makes sense thank you so much <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> !</p>",
        "id": 289202593,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1657551388
    },
    {
        "content": "<p>My next step is to define dagger functors. Is the following definition coherent? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">dagger_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">dagger_category</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dagger_functor</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">blank</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">dagger_category.hom_dagger</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dagger_category.hom_dagger</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Thanks again</p>",
        "id": 289210769,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1657554417
    },
    {
        "content": "<p>Ok ive made some more progress and have now defined monoidal dagger categories and am now trying to define  braided monoidal dagger categories. The idea is that the braiding for a braided monoidal dagger category must be a natural isomorphism between dagger functors. My question is that if I want to define something like a dagger natural transformation, do I first need to define the category of dagger categories?</p>",
        "id": 289377318,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1657655758
    },
    {
        "content": "<p>For dagger natural transformations, I think you only need the category of dagger functors, which should be a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.full_subcategory\">docs#category_theory.full_subcategory</a> of the category of functors.</p>",
        "id": 289378738,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657656425
    },
    {
        "content": "<p>Hi all. Im trying to implement what is suggested here (showing that the category of dagger functors is a full subcategory of the category of functors) and I wanted to ask how I should go about doing this. Should I create the category of dagger functors as an instance of the category of functors? Will that give me immediate access to dagger natural transformations? If not, what is required? Thanks</p>",
        "id": 292269699,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1659807248
    },
    {
        "content": "<p>If you follow that approach then you can define<br>\n<code>def dagger_functor (C D : Type*) [dagger_category C] [dagger_category D] := full_subcategory is_dagger_functor</code> where  <br>\n<code>is_dagger_functor : (C \\functor D) \\to Prop</code> is the predicate saying that a given functor preserves the dagger structure.</p>",
        "id": 292296528,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659845690
    },
    {
        "content": "<p>Assuming that a dagger natural transformation is really just any natural transformation between <code>dagger_functors</code>, i.e. the dagger functor subcategory is full in the functor category.</p>",
        "id": 292296615,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659845779
    },
    {
        "content": "<p>And then yes you get dagger natural transformations for free, the hom-set of a <code>full_subcategory</code> is defined to be just the hom-set in the parent category.</p>",
        "id": 292296632,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659845851
    },
    {
        "content": "<p>By the way, you should probably start PRing what you have so far in small chunks! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I'd love to have dagger categories personally for doing representation theory.</p>",
        "id": 292296792,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659846044
    },
    {
        "content": "<p>Awesome thanks for the help. I'll make a PR soon with what I have</p>",
        "id": 292335890,
        "sender_full_name": "Alex Ghorbani",
        "timestamp": 1659901155
    },
    {
        "content": "<p>It's worth noting that most structure on categories in mathlib is given as propositions, for example limits and colimits; whereas your dagger structure is given as data - you should think about what's the right choice here, bearing in mind that the rest of cathlib would do this differently</p>",
        "id": 292559765,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660043951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/dagger.20categories/near/292559765\">said</a>:</p>\n<blockquote>\n<p>It's worth noting that most structure on categories in mathlib is given as propositions, for example limits and colimits; whereas your dagger structure is given as data - you should think about what's the right choice here, bearing in mind that the rest of cathlib would do this differently</p>\n</blockquote>\n<p>How would you give the dagger structure as a proposition? It seems to me that the dagger map is extra data that has to be specified.</p>",
        "id": 292584818,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1660053937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329754\">Antoine Labelle</span> <a href=\"#narrow/stream/116395-maths/topic/dagger.20categories/near/292584818\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/dagger.20categories/near/292559765\">said</a>:</p>\n<blockquote>\n<p>It's worth noting that most structure on categories in mathlib is given as propositions, for example limits and colimits; whereas your dagger structure is given as data - you should think about what's the right choice here, bearing in mind that the rest of cathlib would do this differently</p>\n</blockquote>\n<p>How would you give the dagger structure as a proposition? It seems to me that the dagger map is extra data that has to be specified.</p>\n</blockquote>\n<p>In exactly the same way as we do for, eg, the terminal object right now: the class says it exists and then the data is produced by choice. I'm not arguing that one option is better than the other by the way, just a warning that there are two options here! I invested quite a bit of time into the data-version of limits and colimits which is now wasted because it's now propositional; I don't want the same to happen to others!</p>",
        "id": 292848331,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660174395
    },
    {
        "content": "<p>But that's not the same thing, the dagger of a morphism is not defined by a universal property. There's in general more than one dagger structure on a given category (even up to isomorphism).</p>",
        "id": 292854207,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1660179459
    },
    {
        "content": "<p>So you need to give data.</p>",
        "id": 292854224,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1660179481
    }
]