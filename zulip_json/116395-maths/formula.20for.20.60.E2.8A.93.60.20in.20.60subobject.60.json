[
    {
        "content": "<p>I'd like to have the following formula for <code>inf</code> in <code>subobject A</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.subobject.lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf_eq_mk_fst_arrow</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">⊓</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">subobject.mk</span> <span class=\"o\">((</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">limits.pullback</span> <span class=\"n\">X.arrow</span> <span class=\"n\">Y.arrow</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">X.arrow</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf_eq_mk_snd_arrow</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">⊓</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">subobject.mk</span> <span class=\"o\">((</span><span class=\"n\">pullback.snd</span> <span class=\"o\">:</span> <span class=\"n\">limits.pullback</span> <span class=\"n\">X.arrow</span> <span class=\"n\">Y.arrow</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">Y.arrow</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can anyone fill this in? I don't see how to get it from the existing API for <code>⊓</code>. <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>?</p>\n<p>(If one needs to actually unfold the definition of <code>⊓</code>, perhaps the second lemma is easier because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.over.pullback\">docs#category_theory.over.pullback</a> is defined in terms of <code>pullback.snd</code>.)</p>",
        "id": 283849712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653465938
    },
    {
        "content": "<p>(I've found another solution to my problems that don't need these lemmas, but I'm still curious how they should be proved.)</p>",
        "id": 283861525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653472829
    },
    {
        "content": "<p>I'm pretty sure I had these lemmas in the topos project a while back, I will take a closer look later today if I can!</p>",
        "id": 283869822,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653478297
    },
    {
        "content": "<p>I did manage to prove <code>X ⊔ Y = subobject.mk (image.ι (coprod.desc X.arrow Y.arrow))</code> (although needed to assume <code>[has_equalizers C]</code>...).</p>",
        "id": 283870293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653478629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/formula.20for.20.60.E2.8A.93.60.20in.20.60subobject.60/near/283849712\">said</a>:</p>\n<blockquote>\n<p>I'd like to have the following formula for <code>inf</code> in <code>subobject A</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.subobject.lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf_eq_mk_fst_arrow</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">⊓</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">subobject.mk</span> <span class=\"o\">((</span><span class=\"n\">pullback.fst</span> <span class=\"o\">:</span> <span class=\"n\">limits.pullback</span> <span class=\"n\">X.arrow</span> <span class=\"n\">Y.arrow</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">X.arrow</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf_eq_mk_snd_arrow</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">⊓</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">subobject.mk</span> <span class=\"o\">((</span><span class=\"n\">pullback.snd</span> <span class=\"o\">:</span> <span class=\"n\">limits.pullback</span> <span class=\"n\">X.arrow</span> <span class=\"n\">Y.arrow</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">Y.arrow</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can anyone fill this in? I don't see how to get it from the existing API for <code>⊓</code>. <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span>?</p>\n<p>(If one needs to actually unfold the definition of <code>⊓</code>, perhaps the second lemma is easier because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.over.pullback\">docs#category_theory.over.pullback</a> is defined in terms of <code>pullback.snd</code>.)</p>\n</blockquote>\n<p>If it comes to it, I think using antisymm should give this</p>",
        "id": 283898564,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653492472
    },
    {
        "content": "<p>I've always been very hesitant about <code>subobject.arrow</code>, I expect the easiest way to prove this would be to show it for mono_over using antisymm, and then taking this special case</p>",
        "id": 283898695,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653492520
    },
    {
        "content": "<p>If you think it's a good idea I can try to do a refactor of the <code>subobject/</code> directory, moving as much as possible about <code>arrow</code> into a new <code>arrow.lean</code>.</p>",
        "id": 283954065,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653522122
    },
    {
        "content": "<p>I admit I do like to use the arrow API, but maybe it makes sense to make it clearer in the sources that it is an optional extra.</p>",
        "id": 283954112,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653522163
    },
    {
        "content": "<p>I'm curious what your preferred formulation of something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"n\">hypotheses</span> <span class=\"n\">on</span> <span class=\"n\">C...</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">is_compl</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⊞</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">X.arrow</span> <span class=\"bp\">=</span> <span class=\"n\">biprod.inl</span> <span class=\"bp\">≫</span> <span class=\"n\">i.hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(stating that \"complemented in the lattice sense\" and \"complemented in the biproduct sense\" agree, with whatever hypotheses are required to make it true) would be.</p>",
        "id": 283954258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653522305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/formula.20for.20.60.E2.8A.93.60.20in.20.60subobject.60/near/283954065\">said</a>:</p>\n<blockquote>\n<p>If you think it's a good idea I can try to do a refactor of the <code>subobject/</code> directory, moving as much as possible about <code>arrow</code> into a new <code>arrow.lean</code>.</p>\n</blockquote>\n<p>I think it might be nice but I don't have particularly strong feelings on it - I personally prefer to state things without using <code>arrow</code> but I agree there are times when it's needed.</p>",
        "id": 283956298,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653524131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> (or anyone else!!), any ideas on how to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_initial</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">initial_mono_class</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_binary_coproducts</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"n\">more</span> <span class=\"n\">hypotheses</span> <span class=\"n\">on</span> <span class=\"n\">C</span><span class=\"bp\">?...</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⊓</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">coprod.desc</span> <span class=\"n\">X.arrow</span> <span class=\"n\">Y.arrow</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>either on paper or in Lean? I hope it's true fairly generally, but don't see why yet. Perhaps replacing the coproduct with biproduct could make it easier?</p>",
        "id": 283974062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653546039
    },
    {
        "content": "<p>I expect you need <a href=\"https://ncatlab.org/nlab/show/disjoint+coproduct\">https://ncatlab.org/nlab/show/disjoint+coproduct</a> for this to be true</p>",
        "id": 284024804,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653580935
    },
    {
        "content": "<p><del>oops wrong way round - I don't think this is true</del> nope I'm not sure again, let me think about this harder</p>",
        "id": 284024972,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653581039
    },
    {
        "content": "<p>I have a rough idea of a proof which additionally requires that your category has images, and is extensive - namely condition 3 here <a href=\"https://ncatlab.org/nlab/show/extensive+category#extensive_categories\">https://ncatlab.org/nlab/show/extensive+category#extensive_categories</a>; I think I have a formalisation of the equivalence between 1,2,3 in a branch but I expect it's rotted quite a bit now</p>",
        "id": 284128737,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653656343
    },
    {
        "content": "<p>Hmm... it would be nice to have a proof that works for <code>Vect</code>, which is not extensive.</p>",
        "id": 284700384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1654146490
    }
]