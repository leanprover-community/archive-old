[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.preorder_hom</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">subset_system</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">sings</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">to_fun</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₘ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">to_fun</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">to_fun</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">subset_system</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">subset_system.to_fun</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">subset_system</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">complete</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">Z</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_sup</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">Z</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"n\">S</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span><span class=\"bp\">.</span>\n\n<span class=\"c1\">-- TODO: make this a complete lattice</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.partial_order</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">union_complete</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">subset_system</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">complete</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"n\">complete.sup</span> <span class=\"n\">S</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Here's the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">complete.sup</span> <span class=\"n\">S</span> <span class=\"n\">H</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">H</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"bp\">⇑</span><span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal.partial_order</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"bp\">⇑</span><span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete.to_partial_order</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">zcomp</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>I'm getting errors like this, and they're happening because Lean can't match up the two partial order instances in the last argument of Z.<br>\nThe only thing I can think of is to change complete to not use extends, but then I can't use bundled to make the category of complete things. I think what I want is for the partial_order instance inside of zcomp to be the one inferred rather than a new one, is there a nice way to fix this?</p>",
        "id": 211826828,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1601499759
    },
    {
        "content": "<p>Does <code>subset_system</code> need all those <code>partial_order</code> arguments?  If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subset_system</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">sings</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">to_fun</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₘ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">to_fun</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">to_fun</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>the errors go away.</p>\n<p>(Should <code>union_complete</code> be a class?)</p>",
        "id": 211828740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601500836
    },
    {
        "content": "<p>One of my cases is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">omega_complete_partial_order</span>\n<span class=\"kd\">def</span> <span class=\"n\">omega_chain</span> <span class=\"o\">:</span> <span class=\"n\">subset_system</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">I</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">chain</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">set.range</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">sings</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">I</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">⟨</span><span class=\"n\">preorder_hom.const</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"o\">}⟩,</span>\n  <span class=\"n\">mono</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">Iα</span> <span class=\"n\">Iβ</span> <span class=\"n\">f</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hS</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exactI</span> <span class=\"o\">⟨</span><span class=\"n\">chain.map</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}⟩,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>where there does need to be the partial_order instance, unless I change it so that <code>to_fun</code> gives junk values if there's no partial order available</p>",
        "id": 211828935,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1601500943
    },
    {
        "content": "<p>As for making <code>union_complete</code> a class; possibly but that doesn't fix any of the problems</p>",
        "id": 211828972,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1601500969
    },
    {
        "content": "<p>I noticed that removing <code>set_option old_structure_cmd true</code> makes the error go away, too.</p>",
        "id": 211829284,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601501155
    },
    {
        "content": "<p>Agh that was my first guess of how to fix it but I thought I'd already got rid of them all! Thanks</p>",
        "id": 211829403,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1601501214
    }
]