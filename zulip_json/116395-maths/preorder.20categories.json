[
    {
        "content": "<p>Now that categories live in <code>Prop</code>, should we turn preorder categories into <code>category</code> instead of <code>small_category</code> to get rid of the <code>ulift</code>-<code>plift</code> dance? <a href=\"https://github.com/leanprover-community/mathlib/blob/2f088fc1cb98c6e789f3c61e594e9c85a121d139/src/category_theory/category.lean#L117\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/2f088fc1cb98c6e789f3c61e594e9c85a121d139/src/category_theory/category.lean#L117\">https://github.com/leanprover-community/mathlib/blob/2f088fc1cb98c6e789f3c61e594e9c85a121d139/src/category_theory/category.lean#L117</a></p>",
        "id": 162893227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554800696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What do you think about this? (Also in light of <a href=\"https://github.com/leanprover-community/mathlib/issues/926\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/926\">#926</a>.)</p>",
        "id": 163265564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555162122
    },
    {
        "content": "<p>No, it turns out to be a bad idea. I spent a while using it</p>",
        "id": 163265579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162176
    },
    {
        "content": "<p>in fact, the whole generalisation to <code>Sort</code> was a bit dubious</p>",
        "id": 163265580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162191
    },
    {
        "content": "<p>Hmm... that's a pity</p>",
        "id": 163265624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555162209
    },
    {
        "content": "<p>it's _possible_ that there is a good fix, actually</p>",
        "id": 163265628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162246
    },
    {
        "content": "<p>the problem was that when morphisms are in <code>Prop</code>, because of proof irrelevance the simplifier won't touch them</p>",
        "id": 163265638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162268
    },
    {
        "content": "<p>so sometimes I'd have something I knew was the identity, but couldn't get there by simp</p>",
        "id": 163265642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162284
    },
    {
        "content": "<p>and then if I had a functor into a \"honest\" category, I couldn't show that <code>F.map f</code> was the identity.</p>",
        "id": 163265645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162305
    },
    {
        "content": "<p>Hmm... I see. So you would need simp-lemmas specialised to \"homs-in-Prop\" categories...</p>",
        "id": 163265703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555162370
    },
    {
        "content": "<p>a possible way to fix it is just to state the lemma that if <code>f : X \\hom X</code> is Prop level, then <code>F.map f = eq_to_hom (congr_arg F.obj X)</code></p>",
        "id": 163265706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162379
    },
    {
        "content": "<p>That simplify <code>F.map f</code> for any <code>f : X \\hom X</code> to the identity on <code>F.obj X</code></p>",
        "id": 163265718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555162394
    },
    {
        "content": "<p>no -- it's important to use <code>eq_to_hom</code> if you don't want eq.rec hell :-)</p>",
        "id": 163265719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162417
    },
    {
        "content": "<p>I may have actually tried this. It's too late for me to remember.</p>",
        "id": 163265722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162428
    },
    {
        "content": "<p>...</p>",
        "id": 163265724,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555162431
    }
]