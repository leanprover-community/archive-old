[
    {
        "content": "<p>Did you know that 144 is the largest square in the Fibonacci sequence?</p>",
        "id": 126977998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084471
    },
    {
        "content": "<p>The proof is elementary but delicate</p>",
        "id": 126977999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084479
    },
    {
        "content": "<p>I give talks about this to bright schoolchildren occasionally</p>",
        "id": 126978039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084488
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/2017nt2.pdf\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/2017nt2.pdf\">http://wwwf.imperial.ac.uk/~buzzard/2017nt2.pdf</a></p>",
        "id": 126978044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084497
    },
    {
        "content": "<p>There is a sketch of the idea</p>",
        "id": 126978047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084504
    },
    {
        "content": "<p>I'm giving one such talk on Saturday</p>",
        "id": 126978048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084508
    },
    {
        "content": "<p>to the British IMO team</p>",
        "id": 126978050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084515
    },
    {
        "content": "<p>and in fact I am giving two talks to these people on Saturday</p>",
        "id": 126978053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084529
    },
    {
        "content": "<p>one on this</p>",
        "id": 126978055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084534
    },
    {
        "content": "<p>and one on...whatever I like</p>",
        "id": 126978056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084538
    },
    {
        "content": "<p>So I have made the crazy decision to try and give my second talk on a Lean proof of this fact</p>",
        "id": 126978066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084558
    },
    {
        "content": "<p>The only problem is that today is Wednesday</p>",
        "id": 126978070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084567
    },
    {
        "content": "<p>which means that it's only three days to Saturday</p>",
        "id": 126978075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084577
    },
    {
        "content": "<p>So I did this</p>",
        "id": 126978087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084588
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/issues/1\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/issues/1\">https://github.com/kbuzzard/lean-squares-in-fibonacci/issues/1</a></p>",
        "id": 126978088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084589
    },
    {
        "content": "<p>and I will start this evening</p>",
        "id": 126978092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084595
    },
    {
        "content": "<p>but if anyone wants to help</p>",
        "id": 126978094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084600
    },
    {
        "content": "<p>then I would happily let them join in</p>",
        "id": 126978137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084609
    },
    {
        "content": "<p>give them push access, whatever</p>",
        "id": 126978138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084613
    },
    {
        "content": "<p>The link to the issues makes it clear what I think the problems are</p>",
        "id": 126978141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084627
    },
    {
        "content": "<p>(1) We either cheat and assume some UG-level facts about primes</p>",
        "id": 126978148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084642
    },
    {
        "content": "<p>(when -2 is a square mod p)</p>",
        "id": 126978152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084648
    },
    {
        "content": "<p>or we prove it</p>",
        "id": 126978154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084650
    },
    {
        "content": "<p>which will involve proving that a poly of degree n over a field has at most n roots</p>",
        "id": 126978157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084662
    },
    {
        "content": "<p>and that Z/pZ is a field</p>",
        "id": 126978164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084666
    },
    {
        "content": "<p>(2) we either use the real numbers or build our own Z[(1+sqrt(5))/2]</p>",
        "id": 126978171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084689
    },
    {
        "content": "<p>(3) a bunch of relatively simple arithmetic</p>",
        "id": 126978177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084704
    },
    {
        "content": "<p>but a fair amount of it, from a Lean point of view</p>",
        "id": 126978180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084711
    },
    {
        "content": "<p>I attained my schemes goal</p>",
        "id": 126978220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084726
    },
    {
        "content": "<p>so I want to spend a few days goofing around with this one</p>",
        "id": 126978224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084737
    },
    {
        "content": "<p>it's very easy arithmetic</p>",
        "id": 126978225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084741
    },
    {
        "content": "<p>and maybe I will do it all myself</p>",
        "id": 126978228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084753
    },
    {
        "content": "<p>but if anyone wants to help</p>",
        "id": 126978233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084761
    },
    {
        "content": "<p>this would be greatly appreciated :-)</p>",
        "id": 126978238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> and <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I might have to steal your work (with attribution of course).</p>",
        "id": 126978259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084821
    },
    {
        "content": "<p>Johannes -- who do I credit if I take your polynomial stuff from mason-stothers? [or mason-stother as you seem to have called it]? Is it you or JWageM?</p>",
        "id": 126978323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084910
    },
    {
        "content": "<p>I firmly believe I could do this entire thing in 3 days</p>",
        "id": 126978336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084948
    },
    {
        "content": "<p>it's a bit unfortunate about the marking I still have to do though :-/</p>",
        "id": 126978338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084958
    },
    {
        "content": "<p>Chris and Kenny will have finished their exams by Friday afternoon UK time so this would be a perfect all-night binge for them to do afterwards.</p>",
        "id": 126978382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084980
    },
    {
        "content": "<p>;-)</p>",
        "id": 126978384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527084987
    },
    {
        "content": "<p>OK now back to marking</p>",
        "id": 126978394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527085014
    },
    {
        "content": "<p>Mason-stother's polynomials are from us both, most parts were done by Jens, some by me. Its okay to only credit Jens.</p>",
        "id": 126978481,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527085142
    },
    {
        "content": "<p>Hi! How can I help best? Maybe start building Z[(1+sqrt(5))/2] ? I have a little experience with field extensions from abstract algebra this past semester ...</p>",
        "id": 126980169,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527087668
    },
    {
        "content": "<p>that’s really just Z[sqrt(5)] right? field operations will get you (1+-sqrt(5))/2 from that</p>",
        "id": 126980265,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527087788
    },
    {
        "content": "<p>He wants a ring, not a field</p>",
        "id": 126980273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527087808
    },
    {
        "content": "<p>And that's what this notation denotes</p>",
        "id": 126980283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527087828
    },
    {
        "content": "<p>Right -- there is Q(sqrt(5)) = Q(alpha) [alpha := (1+sqrt(5))/2] and there is Z[sqrt(5)] which is strictly smaller than Z[alpha] [it has index 2]</p>",
        "id": 126980547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088201
    },
    {
        "content": "<p>The only reason I suggested the ring not the field was (1) rings have fewer axioms than fields and (2) my instinct was to construct the smallest object which was mathematically reasonable [so no semirings or distribs, thank you] and which contained enough to formalise the statement \"u_m = (alpha^m - beta^m) / sqrt (5)\"...oh crap</p>",
        "id": 126980642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088296
    },
    {
        "content": "<p>maybe a field is fine :-)</p>",
        "id": 126980651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088302
    },
    {
        "content": "<p>One could prove sqrt(5) * u_m = alpha^m - beta^m</p>",
        "id": 126980667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088319
    },
    {
        "content": "<p>and then mumble about integral domains</p>",
        "id": 126980710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088326
    },
    {
        "content": "<p>OK so <span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> if you want to take a look at how the complex numbers were built from the real numbers in mathlib (in some file called complex.lean probably) then you could just copy this and build Q(sqrt(5)) from Q by adjoining a square root of 5</p>",
        "id": 126980735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088376
    },
    {
        "content": "<p>The only difficulty will be in proving that if a+b*sqrt(5) is non-zero then a^2-5b^2 is non-zero, which you need for division</p>",
        "id": 126980754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088396
    },
    {
        "content": "<p>For the complexes the argument is that everything is positive, that doesn't work here</p>",
        "id": 126980762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088408
    },
    {
        "content": "<p>you need that 5 isn't the square of a rational</p>",
        "id": 126980764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088417
    },
    {
        "content": "<p>but modulo that, there's your Q(sqrt(5))</p>",
        "id": 126980770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088424
    },
    {
        "content": "<p>at some point one would need this anyway, to prove Z[alpha] is an integral domain, so there's no getting away from it</p>",
        "id": 126980786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527088438
    },
    {
        "content": "<p>I've done some stuff on integers mod n which I'll send you when I get home.</p>",
        "id": 126981799,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527089622
    },
    {
        "content": "<p>Ah okay, I see ... I think I'll try to build Z[alpha], doesn't look like we'll need division</p>",
        "id": 126982536,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527090523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Very messy, but the most basic stuff about integers mod n is there. <a href=\"https://github.com/dorhinj/leanstuff/blob/master/Zmod1.lean\" target=\"_blank\" title=\"https://github.com/dorhinj/leanstuff/blob/master/Zmod1.lean\">https://github.com/dorhinj/leanstuff/blob/master/Zmod1.lean</a></p>",
        "id": 126985180,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527094361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> I also made a bit of a start on univariate polys, although I haven't done much more than copy Johannes stuff on multivariate polys.</p>",
        "id": 126985212,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527094433
    },
    {
        "content": "<p>I think Sean's finset.max would be a more appropriate definition of degree than <code>sup</code></p>",
        "id": 126985259,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527094467
    },
    {
        "content": "<p>okay I have a commutative ring instance for Z[alpha]!</p>",
        "id": 126985360,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527094649
    },
    {
        "content": "<p>with <code>sup</code> you don't need to use <code>iget</code>. <code>max</code> is the better name but I think <code>sup</code> has the better behaviour.</p>",
        "id": 126985419,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527094765
    },
    {
        "content": "<p>Thanks, but I don't know how to use <code>sup</code></p>",
        "id": 126989627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527099947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> have you pushed?</p>",
        "id": 126990758,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527101562
    },
    {
        "content": "<p>pushed what?</p>",
        "id": 126990917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101783
    },
    {
        "content": "<p>fibonacci</p>",
        "id": 126990921,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527101794
    },
    {
        "content": "<p>Chris -- Johannes and his student wrote some univariate poly stuff in their mason-stother repo</p>",
        "id": 126990927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101818
    },
    {
        "content": "<p>What Fibonacci is there for me to push?</p>",
        "id": 126991057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101835
    },
    {
        "content": "<p>I have epsilon</p>",
        "id": 126991060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101841
    },
    {
        "content": "<p>I proved <code>luc (m + 3) = 2 * fib (m + 3) + fib m</code></p>",
        "id": 126991062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101855
    },
    {
        "content": "<p>I will push some stuff</p>",
        "id": 126991064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101859
    },
    {
        "content": "<p>They didn't do the theorem you need I don't think.</p>",
        "id": 126991211,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527102058
    },
    {
        "content": "<p>I pushed some stuff</p>",
        "id": 126991755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527102715
    },
    {
        "content": "<p>I proved 2/3 of point 4</p>",
        "id": 126991798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527102727
    },
    {
        "content": "<p>Is <code>gcd (a + n * b) b = gcd a b</code> in lean or mathlib somewhere? (everything a nat)]</p>",
        "id": 126993768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527105322
    },
    {
        "content": "<p>If everything is a nat, this is almost certainly wrong in some edge case</p>",
        "id": 126993776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105345
    },
    {
        "content": "<p>there isn't, since gcd is well-defined for 0 in the real world</p>",
        "id": 126993922,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527105488
    },
    {
        "content": "<p>I knew it: edge case</p>",
        "id": 126994021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105609
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_rec</span> <span class=\"c1\">-- nat.gcd m n = nat.gcd (n % m) m</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gcd_comm</span><span class=\"o\">,</span> <span class=\"n\">gcd_rec</span><span class=\"o\">,</span> <span class=\"n\">add_mul_mod_self_right</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">gcd_rec</span><span class=\"o\">,</span> <span class=\"n\">gcd_comm</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 126994031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527105624
    },
    {
        "content": "<p>there is no edge case!</p>",
        "id": 126994032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527105627
    },
    {
        "content": "<p>This is an edge case to the general statement that every general statement about  nat is wrong</p>",
        "id": 126994097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105715
    },
    {
        "content": "<p>of course one could argue that gcd 0 0 = 0 is already wrong</p>",
        "id": 126994501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106171
    },
    {
        "content": "<p>given that 7 divides both 0 and 0</p>",
        "id": 126994507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106178
    },
    {
        "content": "<p>To be honest, that one has nothing to do with nat. It's also a problem in integers</p>",
        "id": 126994600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527106289
    },
    {
        "content": "<p>You know that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>ζ</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>k</mi><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac><mo>+</mo><msub><mi mathvariant=\"normal\">Σ</mi><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><msub><mi>σ</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>(</mo><mi>n</mi><mo>)</mo><msup><mi>q</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\frac{\\zeta(1-k)}{2} + \\Sigma_{n\\geq1}\\sigma_{k-1}(n)q^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.01em;\"></span><span class=\"strut bottom\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathrm mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is a modular form, right?</p>",
        "id": 126994670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106368
    },
    {
        "content": "<p>Here <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>σ</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma_{k-1}(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span></span></span></span> denotes the sum of the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span> st powers of the positive divisors of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span></span></span></span>.</p>",
        "id": 126994695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106395
    },
    {
        "content": "<p>but if you set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">0</span></span></span></span> in the sum you get the sum of the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span> st powers of the positive divisors of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span></span></span></span></p>",
        "id": 126994718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106441
    },
    {
        "content": "<p>so that's <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>1</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>3</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">1^{k-1} + 2 ^{k-1} + 3^{k-1} + \\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8491079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.9324379999999999em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathrm\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mbin\">+</span><span class=\"minner\">⋯</span></span></span></span></p>",
        "id": 126994777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106471
    },
    {
        "content": "<p>which is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ζ</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\zeta(1-k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">−</span><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> by...erm...definition...or something</p>",
        "id": 126994781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106482
    },
    {
        "content": "<p>but the sum is only over half of the integers</p>",
        "id": 126994808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106521
    },
    {
        "content": "<p>so you should only take the term at zero half as seriously</p>",
        "id": 126994813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106529
    },
    {
        "content": "<p>which gives you <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ζ</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>k</mi><mo>)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\zeta(1-k)/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">−</span><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">2</span></span></span></span></p>",
        "id": 126994819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106536
    },
    {
        "content": "<p>and that's how I remember it</p>",
        "id": 126994823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106544
    },
    {
        "content": "<p>And we are surprised formalizing maths is hard...</p>",
        "id": 126994876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527106575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Should I make a fork, or may I have commit access?</p>",
        "id": 126995026,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527106761
    },
    {
        "content": "<p>do I have commit access?</p>",
        "id": 126995041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527106777
    },
    {
        "content": "<p>what is the most sensible idea?</p>",
        "id": 126995177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106868
    },
    {
        "content": "<p>nobody has commit access except me</p>",
        "id": 126995196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106887
    },
    {
        "content": "<p>but I am happy to give it to anybody</p>",
        "id": 126995201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106892
    },
    {
        "content": "<p>unless someone has a good reason why I shouldn't do this</p>",
        "id": 126995212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106901
    },
    {
        "content": "<p>I need to know your github usernames I guess</p>",
        "id": 126995218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527106910
    },
    {
        "content": "<p>I'll kindly delete your alpha and beta :P (after proving points 4 and 6)</p>",
        "id": 126995291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527106942
    },
    {
        "content": "<p>If I were you I would fear seeing constructive stuff invading my repo</p>",
        "id": 126995295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527106952
    },
    {
        "content": "<p>OK Kenny and Nicholas you should have push access</p>",
        "id": 126995412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107069
    },
    {
        "content": "<p>thanks</p>",
        "id": 126995415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107075
    },
    {
        "content": "<blockquote>\n<p>If I were you I would fear seeing constructive stuff invading my repo</p>\n</blockquote>\n<p>much fear of the unknown :P</p>",
        "id": 126995424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107086
    },
    {
        "content": "<p>but lemme push some stuff</p>",
        "id": 126995425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107087
    },
    {
        "content": "<p>Constructive madness on the way...</p>",
        "id": 126995427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527107090
    },
    {
        "content": "<p>I need a job done</p>",
        "id": 126995432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107095
    },
    {
        "content": "<p>Selling your mathematician soul...</p>",
        "id": 126995455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527107121
    },
    {
        "content": "<p>OK I am pushed</p>",
        "id": 126995551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107192
    },
    {
        "content": "<p>waitttt where did the Z alpha come from</p>",
        "id": 126995598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107237
    },
    {
        "content": "<p>oh Nicholas built it...</p>",
        "id": 126995613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> do you think we'll really need it?</p>",
        "id": 126995631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107275
    },
    {
        "content": "<p>oops sorry, did I step on your push?</p>",
        "id": 126995633,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527107278
    },
    {
        "content": "<p>no</p>",
        "id": 126995668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107283
    },
    {
        "content": "<p>I'm just doubting whether we need sqrt(5) at all</p>",
        "id": 126995683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107292
    },
    {
        "content": "<p>Here's the reason I think we might need sqrt(5)</p>",
        "id": 126995698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107315
    },
    {
        "content": "<p>I think this might help along the way ;) :</p>\n<div class=\"codehilite\"><pre><span></span>lemma αβsum : α + β = 1 := rfl\nlemma αβprod : α * β = -1 := rfl\n</pre></div>",
        "id": 126995703,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527107322
    },
    {
        "content": "<p>that looks really good</p>",
        "id": 126995711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107333
    },
    {
        "content": "<p>it's a little bit better than my method</p>",
        "id": 126995719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107342
    },
    {
        "content": "<p>so, constructivism wins?</p>",
        "id": 126995738,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107358
    },
    {
        "content": "<p>To prove something like <code>luc (m + 3) = 2 * fib (m + 3) + fib m</code> you can just do it by induction</p>",
        "id": 126995747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107370
    },
    {
        "content": "<p>but to prove <code>luc (4 * n) = (luc (2 * n) ^ 2) - 2</code></p>",
        "id": 126995765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107398
    },
    {
        "content": "<p>the only method I know is to prove the general sqrt (5) formula</p>",
        "id": 126995813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107408
    },
    {
        "content": "<p>you just need the right lemmas</p>",
        "id": 126995817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107411
    },
    {
        "content": "<p>maybe some theorem of logic says you don't need square roots of 5</p>",
        "id": 126995822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107423
    },
    {
        "content": "<p>like the one I proved that day</p>",
        "id": 126995826,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">to_be_named</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">n</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">])</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">])</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))),</span>\n<span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n<span class=\"k\">calc</span>  <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ac_refl</span>\n</pre></div>",
        "id": 126995832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107440
    },
    {
        "content": "<p>but then you will end up defining some auxiliary function on Z x Z</p>",
        "id": 126995834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107442
    },
    {
        "content": "<p>Let me just read through the proof</p>",
        "id": 126995843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107457
    },
    {
        "content": "<p>Of course one might also argue that using sqrt(5) is a _natural_ thing to do</p>",
        "id": 126995867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107479
    },
    {
        "content": "<p>which might make it a good thing to do</p>",
        "id": 126995872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107484
    },
    {
        "content": "<p>I should add \"building the algebraic numbers\" to my want-to-do-but-god-knows-when list</p>",
        "id": 126995929,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527107530
    },
    {
        "content": "<p>Of course you could also take the ring Q[x] and quotient out by the ideal (x^2-5) right? ;-)</p>",
        "id": 126995944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107559
    },
    {
        "content": "<p>I will write comments about the proof in the issue</p>",
        "id": 126995972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107593
    },
    {
        "content": "<p>From an arithmetic point of view it makes much more sense than defining square root on nonnegative reals</p>",
        "id": 126996089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527107721
    },
    {
        "content": "<p>Hey, it might be too late for this remark but I built the ring Z[\\sqrt n] in <code>pell.lean</code>. Not directly applicable, but it might be useful</p>",
        "id": 126996291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527107954
    },
    {
        "content": "<blockquote>\n<p>of course one could argue that gcd 0 0 = 0 is already wrong<br>\ngiven that 7 divides both 0 and 0</p>\n</blockquote>\n<p>I think there are good reasons to believe that gcd 0 0 = 0 is <em>right</em> over both nat and int, and in traditional math, if you think about the integers in that calculation as representing their principal ideals. (gcd m n) = (m, n)</p>",
        "id": 126996458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527108207
    },
    {
        "content": "<p>so here \"greatest\" actually means greatest in the divisor order, putting 0 at the top not the bottom</p>",
        "id": 126996521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527108274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 7 divides both 0 and 0, and 7 divides gcd(0,0) = 0, consistent with the UMP of GCD</p>",
        "id": 126996708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527108510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> can I push?</p>",
        "id": 126997108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527109006
    },
    {
        "content": "<p>sure go ahead and push</p>",
        "id": 126997123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109031
    },
    {
        "content": "<p>I wrote a more detailed sketch of how to flesh out the argument in the issue</p>",
        "id": 126997133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109046
    },
    {
        "content": "<p>are you sure I have write access?</p>",
        "id": 126997191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527109096
    },
    {
        "content": "<p>I need to go and steer my children towards their beds now. Thanks for the help all of you. Mario and Kenny, I see the advantages of the \"zero bigger than everything\" approach here! Of course it's just the ideal-theoretic way of thinking about it -- gcd(x,y) = ideal generated by x and y, and if it's principal then let's choose a canonical generator if we can.</p>",
        "id": 126997208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109125
    },
    {
        "content": "<p>Kenny I think I invited you. Did you check your email or did I fail?</p>",
        "id": 126997214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109137
    },
    {
        "content": "<p>oh, I need to accept the invitation</p>",
        "id": 126997225,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527109149
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/issues/1\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/issues/1\">https://github.com/kbuzzard/lean-squares-in-fibonacci/issues/1</a></p>",
        "id": 126997228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109154
    },
    {
        "content": "<p>Note the last part -- point 12 is slightly delicate, it needs the following consequence of uniqueness of prime factorization: if gcd(x,y)=1 and x*y is a square then x and y are both squares (here x,y&gt;0).</p>",
        "id": 126997235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109193
    },
    {
        "content": "<p>and for that you need: n square iff v_p(n) even for all primes p (v_p(n) = largest power of p dividing n) and gcd(x,y)=1 iff min(v_p(x),v_p(y))=0 for all primes p</p>",
        "id": 126997316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109266
    },
    {
        "content": "<p>pretty sure that exact theorem is in my formalization</p>",
        "id": 126997456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527109436
    },
    {
        "content": "<p>and you don't need UFD for it</p>",
        "id": 126997502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527109448
    },
    {
        "content": "<p>well you do need something</p>",
        "id": 126997557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109521
    },
    {
        "content": "<p>because it's not true in a general ring</p>",
        "id": 126997562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109527
    },
    {
        "content": "<p>well I suppose it depends on what you mean by gcd in a general ring</p>",
        "id": 126997571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109535
    },
    {
        "content": "<p>you need nat.gcd facts and some induction</p>",
        "id": 126997580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527109544
    },
    {
        "content": "<p>I'm not saying it doesn't depend in a reverse mathematics way on UFD, but you don't need all that complexity for the proof</p>",
        "id": 126997644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527109589
    },
    {
        "content": "<p>a bit like the proof of UFD ;-)</p>",
        "id": 126997647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109589
    },
    {
        "content": "<p>[I mean, you need nat.gcd facts and some induction for that too]</p>",
        "id": 126997654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109604
    },
    {
        "content": "<p>For a general comm ring there are two natural defs of gcd, one more general than the other</p>",
        "id": 126997670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109624
    },
    {
        "content": "<p>and the weaker version of coprime doesn't cut it</p>",
        "id": 126997701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109655
    },
    {
        "content": "<p>oh there are also issues with units</p>",
        "id": 126997705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109662
    },
    {
        "content": "<p>-4 and -9 are coprime and their product is a square etc etc</p>",
        "id": 126997713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109672
    },
    {
        "content": "<p>so there are issues in general</p>",
        "id": 126997756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109685
    },
    {
        "content": "<p>but I take your point that you are saying you don't have to go through v_p(x)</p>",
        "id": 126997767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109697
    },
    {
        "content": "<p>right</p>",
        "id": 126997771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527109707
    },
    {
        "content": "<p>it's a nice way to conceptualize it, but it's technically complicated and not worth it for most problems IMO</p>",
        "id": 126997780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527109732
    },
    {
        "content": "<p>whenever you need a fact that would come from primality of the p in v_p(n), just use the coprime assumption instead, it's just as well for the purpose of the proof</p>",
        "id": 126997837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527109802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what's the fastest way to know that <code>n=1</code> or <code>n=2</code> given <code>n</code> divides 2?</p>",
        "id": 126998319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527110588
    },
    {
        "content": "<p>n | 2 implies n &lt;= 2</p>",
        "id": 126998321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527110606
    },
    {
        "content": "<p>2 is prime</p>",
        "id": 126998325,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527110628
    },
    {
        "content": "<p>alternatively, 2 is prime</p>",
        "id": 126998326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527110629
    },
    {
        "content": "<p>oh lol</p>",
        "id": 126998329,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527110635
    },
    {
        "content": "<p>Point 4 done!</p>",
        "id": 126998680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527111155
    },
    {
        "content": "<p>I want to prove this but I don't know how? <code>lemma Fib.is_fib (n : ℤ) : Fib (n+2) = Fib n + Fib (n + 1)</code> :P</p>",
        "id": 127001593,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527115345
    },
    {
        "content": "<p><code>  cases n, refl,\n  induction n using nat.case_strong_induction_on with n ih, refl,\n  cases n, refl,\n  cases n, refl,\n  have ih0 := ih n (nat.le_succ_of_le (nat.le_succ _)),\n  have ih1 : Fib (-[1+n+1] + 2) = Fib -[1+n+1] + Fib -[1+n] :=\n    ih (n+1) (nat.le_succ _),\n  have ih2 : Fib -[1+n] = Fib -[1+n+2] + Fib -[1+n+1] :=\n    ih (n+2) (le_refl _),\n  </code></p>",
        "id": 127001606,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527115370
    },
    {
        "content": "<p>write x^(n+2) as x^n x^2?</p>",
        "id": 127001612,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527115384
    },
    {
        "content": "<p>you might find <code>int.induction_on</code> useful</p>",
        "id": 127001619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527115412
    },
    {
        "content": "<p>Point 6 done except the last claim</p>",
        "id": 127009320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527129863
    },
    {
        "content": "<p>OK this is great.</p>",
        "id": 127017268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147566
    },
    {
        "content": "<p>Looking at what has been already done</p>",
        "id": 127017269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147571
    },
    {
        "content": "<p>I already easily have enough material to fill the session.</p>",
        "id": 127017270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147581
    },
    {
        "content": "<p>So actually the time pressure is over.</p>",
        "id": 127017271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147586
    },
    {
        "content": "<p>These kids are smart kids (my audience of 8)</p>",
        "id": 127017311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147614
    },
    {
        "content": "<p>but the Lean session will last 90 minutes</p>",
        "id": 127017312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147622
    },
    {
        "content": "<p>and even talking about how to construct Z[alpha] and computing Fibonacci numbers mod n throws up so much stuff</p>",
        "id": 127017317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147656
    },
    {
        "content": "<p>that my talk is already written.</p>",
        "id": 127017322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147666
    },
    {
        "content": "<p>However I am definitely still interested in finishing the job :-)</p>",
        "id": 127017325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147698
    },
    {
        "content": "<p>Here's a question.</p>",
        "id": 127017326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147704
    },
    {
        "content": "<p>Oh -- before I start -- thanks to Kenny and Nicholas for their contributions!</p>",
        "id": 127017363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147724
    },
    {
        "content": "<p>I'm still mired in marking and preparing these talks for Sat was beginning to become a worry.</p>",
        "id": 127017369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147749
    },
    {
        "content": "<p>The question is how to express the following assertion in Lean</p>",
        "id": 127017374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147798
    },
    {
        "content": "<p>We need to compute the Fibonacci sequence mod 16</p>",
        "id": 127017377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147805
    },
    {
        "content": "<p>The theorem is that mod 16 it goes like this:</p>",
        "id": 127017422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147887
    },
    {
        "content": "<p><code>[0, 1, 1, 2, 3, 5, 8, 13, 5, 2, 7, 9, 0, 9, 9, 2, 11, 13, 8, 5, 13, 2, 15, 1]</code></p>",
        "id": 127017424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147896
    },
    {
        "content": "<p>And the proof is \"trivial by induction\"</p>",
        "id": 127017427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147905
    },
    {
        "content": "<p>(because each term in that list is the sum of the previous two terms mod 16, and at the end we have 15 + 1 = 0 and 1 + 0 = 1 so we wrap back)</p>",
        "id": 127017433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147930
    },
    {
        "content": "<p>The question is how one can prove this in Lean in a way which actually looks reasonable</p>",
        "id": 127017472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527147964
    },
    {
        "content": "<p>This is not a question about how to do anything mod n, this is a specific question about mod 16 (there's an analogous one for mod 3 but I chose the most awkward one).</p>",
        "id": 127017478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148004
    },
    {
        "content": "<p>One issue is what to do the induction on.</p>",
        "id": 127017480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148019
    },
    {
        "content": "<p>You could do strong induction on m</p>",
        "id": 127017486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148033
    },
    {
        "content": "<p>or you could write m = 24 * n + t with 0 &lt;= t &lt; 24 and do induction on n</p>",
        "id": 127017488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148048
    },
    {
        "content": "<p>What I am (not really that) concerned about is that with either approach you end up writing essentially the same code block 24 or so times</p>",
        "id": 127017527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148138
    },
    {
        "content": "<p>In the direct strong induction argument you case on n mod 24 and I don't really know how to do that</p>",
        "id": 127017581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148209
    },
    {
        "content": "<p>hmm</p>",
        "id": 127017584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148219
    },
    {
        "content": "<p>maybe it's OK</p>",
        "id": 127017586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148222
    },
    {
        "content": "<p>if t &lt; 22 it's some lemma of the form <code>(a+b)%m = (a%m+b%m)%m</code> -- is that in Lean/mathlib?</p>",
        "id": 127017597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148269
    },
    {
        "content": "<p>and in the induction case you end up with a statement of the form <code>a0 and a1 and ... and a23</code></p>",
        "id": 127017599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148297
    },
    {
        "content": "<p>you would never write such a statement in python or whatever, you would somehow wrap everything up in a list</p>",
        "id": 127017602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148316
    },
    {
        "content": "<p>Hmm</p>",
        "id": 127017603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148320
    },
    {
        "content": "<p>I think my question is that I am seeing two competing methods for proving this and they book look a bit \"trivial in maths but a bit ugly to write in Lean\" at the minute. Anyone have any suggestions?</p>",
        "id": 127017644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148348
    },
    {
        "content": "<blockquote>\n<p>if t &lt; 14 it's some lemma of the form <code>(a+b)%m = (a%m+b%m)%m</code> -- is that in Lean/mathlib?</p>\n</blockquote>\n<p>int.modeq.modeq_add should help, since this is defeq to <code>a + b \\== a%m + b % m</code> Although I forgot <code>modeq_mod</code> i.e. , so you'll have to prove that.<br>\nWhy not just prove it as a lemma about integers mod n, and not naturals.</p>",
        "id": 127017725,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527148512
    },
    {
        "content": "<p>The problem with working with integers mod n is that if you want the _input_ to fib to be an integer mod n (n would be 24 here) then you have to prove that your definition is well-defined.</p>",
        "id": 127017789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148624
    },
    {
        "content": "<p>and that's basically the same question, or another way of writing it, as far as I can see. Am I missing your point?</p>",
        "id": 127017793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148657
    },
    {
        "content": "<p>Oh -- or are you just talking about the (a+b)%m lemma?</p>",
        "id": 127017798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148677
    },
    {
        "content": "<p>The definition is just <code>quot.mk \\circ fib</code></p>",
        "id": 127017835,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527148685
    },
    {
        "content": "<p>Chris I'm talking about the input not the output</p>",
        "id": 127017843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148697
    },
    {
        "content": "<p>I'm talking about the mod 16 lemma</p>",
        "id": 127017845,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527148706
    },
    {
        "content": "<p>I can get fib : N -&gt; N / 16 fine</p>",
        "id": 127017847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148711
    },
    {
        "content": "<p>But fib : (N / 24) -&gt; N / 16 is less fine</p>",
        "id": 127017849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148723
    },
    {
        "content": "<p>what am I saying</p>",
        "id": 127017851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148729
    },
    {
        "content": "<p>what has happened to me</p>",
        "id": 127017852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148732
    },
    {
        "content": "<p>(Z  / 24)</p>",
        "id": 127017853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148735
    },
    {
        "content": "<p>Just do nat \\r mod 16</p>",
        "id": 127017856,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527148741
    },
    {
        "content": "<p>what the hell is N mod 24</p>",
        "id": 127017861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148747
    },
    {
        "content": "<p>I understand how to build fib : N -&gt; Z / 16</p>",
        "id": 127017865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148776
    },
    {
        "content": "<p>The issue is proving that fib (n + 24) = fib n</p>",
        "id": 127017867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148791
    },
    {
        "content": "<p>The only proof I know of that statement is</p>",
        "id": 127017879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148802
    },
    {
        "content": "<p>\"consider n mod 24\"</p>",
        "id": 127017911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148807
    },
    {
        "content": "<p>Oh</p>",
        "id": 127017914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148808
    },
    {
        "content": "<p>I realised I made a mistake above</p>",
        "id": 127017918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148813
    },
    {
        "content": "<p>I am going to edit a bunch of 16s and change them to 24s</p>",
        "id": 127017923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148824
    },
    {
        "content": "<p>input mod 24, output mod 16</p>",
        "id": 127017924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148830
    },
    {
        "content": "<p>OK fixed</p>",
        "id": 127017982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148931
    },
    {
        "content": "<p>So the issue is proving a = b mod 24 implies fib a = fib b mod 16</p>",
        "id": 127017984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148952
    },
    {
        "content": "<p>hmm</p>",
        "id": 127017986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148971
    },
    {
        "content": "<p>this is an idea</p>",
        "id": 127017987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148981
    },
    {
        "content": "<p>one can prove fib (n + 24) = fib n mod 16</p>",
        "id": 127017993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148994
    },
    {
        "content": "<p>by induction on n</p>",
        "id": 127017995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149002
    },
    {
        "content": "<p>and one has to hope that Lean has the firepower to compute fib 24</p>",
        "id": 127017996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149013
    },
    {
        "content": "<p>to get the induction started</p>",
        "id": 127017998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149029
    },
    {
        "content": "<p>OK so</p>",
        "id": 127017999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149034
    },
    {
        "content": "<p>actually</p>",
        "id": 127018000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149036
    },
    {
        "content": "<p>one can define fibmod16</p>",
        "id": 127018041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149045
    },
    {
        "content": "<p>I see</p>",
        "id": 127018044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149051
    },
    {
        "content": "<p>fibmod16 : N -&gt; Z/16</p>",
        "id": 127018046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149060
    },
    {
        "content": "<p>then prove that forall n, fibmod16 (n + 24) = fibmod16 n by induction on n</p>",
        "id": 127018051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149077
    },
    {
        "content": "<p>and now no firepower needed</p>",
        "id": 127018052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149085
    },
    {
        "content": "<p>and now prove fib mod 16 is fibmod16 by induction on n</p>",
        "id": 127018055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149102
    },
    {
        "content": "<p>and you're done!</p>",
        "id": 127018058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149104
    },
    {
        "content": "<p>This is great!</p>",
        "id": 127018063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149108
    },
    {
        "content": "<p>Thanks Chris!</p>",
        "id": 127018064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149111
    },
    {
        "content": "<p>I could even make that discussion into 90 minutes, given that none of the kids will have seen Lean before</p>",
        "id": 127018068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149140
    },
    {
        "content": "<p>induction, bases case <code>rfl</code>, next case unfold 24 times, and hope things simplify</p>",
        "id": 127018109,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527149190
    },
    {
        "content": "<p>Yeah I think you've cracked it. Thanks Chris.</p>",
        "id": 127018162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149321
    },
    {
        "content": "<p>Now get back to stats revision ;-)</p>",
        "id": 127018165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149334
    },
    {
        "content": "<p>The correct way is to use the theorem I proved that day :P</p>",
        "id": 127019961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152707
    },
    {
        "content": "<p>Kenny</p>",
        "id": 127020007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152769
    },
    {
        "content": "<p>your comments are sometimes obscure</p>",
        "id": 127020008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152778
    },
    {
        "content": "<p>but \"the theorem I proved that day\" will take some beating</p>",
        "id": 127020010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152787
    },
    {
        "content": "<p><code>(a%m+b%m)%m=(a+b)%m</code> is horrible</p>",
        "id": 127020011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152806
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">to_be_named</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">n</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">])</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">])</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))),</span>\n<span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n<span class=\"k\">calc</span>  <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ac_refl</span>\n</pre></div>",
        "id": 127020012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152807
    },
    {
        "content": "<p>it's how it's done in proofwiki</p>",
        "id": 127020013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152814
    },
    {
        "content": "<p>this lemma, plus the fact that fib 16 and fib 17 are coprime</p>",
        "id": 127020014,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152821
    },
    {
        "content": "<p>OK so I will now home in on the other part of your sentence</p>",
        "id": 127020019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152838
    },
    {
        "content": "<p>\"The correct way\"</p>",
        "id": 127020020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152844
    },
    {
        "content": "<p>it's more general</p>",
        "id": 127020023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152859
    },
    {
        "content": "<p>you can prove that fib m | fib n iff m | n</p>",
        "id": 127020025,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152864
    },
    {
        "content": "<p>Oh so you're just talking about the correct way to do something random</p>",
        "id": 127020027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152876
    },
    {
        "content": "<p>I was rather hoping you were talking about the thing I was interested in :-)</p>",
        "id": 127020066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152887
    },
    {
        "content": "<p>m = 16?</p>",
        "id": 127020069,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152899
    },
    {
        "content": "<p>Oh yeah!</p>",
        "id": 127020070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152903
    },
    {
        "content": "<p>Let's talk about that!</p>",
        "id": 127020071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152906
    },
    {
        "content": "<p>that's a special case lol</p>",
        "id": 127020072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152914
    },
    {
        "content": "<blockquote>\n<p>this lemma, plus the fact that fib 16 and fib 17 are coprime</p>\n</blockquote>\n<p>Is this easy to prove, or are the numbers too big for lean to handle?</p>",
        "id": 127020073,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527152917
    },
    {
        "content": "<p>fib n is coprime to fib (n+1)</p>",
        "id": 127020075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152928
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>this lemma, plus the fact that fib 16 and fib 17 are coprime</p>\n</blockquote>\n<p>Is this easy to prove, or are the numbers too big for lean to handle?</p>\n</blockquote>\n<p>kevin already proved it</p>",
        "id": 127020076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527152929
    },
    {
        "content": "<p>by Euclid's algorithm</p>",
        "id": 127020079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152931
    },
    {
        "content": "<p>I can't face <code>(a%m+a%m)%m=(a+b)%m</code></p>",
        "id": 127020093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152978
    },
    {
        "content": "<p>I am going to work with Z/n</p>",
        "id": 127020095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152983
    },
    {
        "content": "<p>Where is this in Lean?</p>",
        "id": 127020096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152986
    },
    {
        "content": "<p>I currently have</p>",
        "id": 127020097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152989
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">fib_mod</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"err\">%</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"err\">%</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">fib_mod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">m</span>\n</pre></div>",
        "id": 127020120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153002
    },
    {
        "content": "<p>but I am going to go for a map from N to whatever Z/nZ is called</p>",
        "id": 127020145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153020
    },
    {
        "content": "<p>as long as it's an abelian group</p>",
        "id": 127020146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153024
    },
    {
        "content": "<p><a href=\"https://github.com/dorhinj/leanstuff/blob/master/Zmod1.lean\" target=\"_blank\" title=\"https://github.com/dorhinj/leanstuff/blob/master/Zmod1.lean\">https://github.com/dorhinj/leanstuff/blob/master/Zmod1.lean</a> I did it.</p>",
        "id": 127020151,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527153049
    },
    {
        "content": "<p>oh so it's not in Lean?</p>",
        "id": 127020155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153060
    },
    {
        "content": "<p>No.</p>",
        "id": 127020157,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527153063
    },
    {
        "content": "<p>I mean mathlib</p>",
        "id": 127020159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153064
    },
    {
        "content": "<p>OK</p>",
        "id": 127020163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153067
    },
    {
        "content": "<p>I will steal it</p>",
        "id": 127020164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153072
    },
    {
        "content": "<p>you only did Z mod 1?</p>",
        "id": 127020166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153080
    },
    {
        "content": "<p>The 1 is to distinguish it from another construction I did.</p>",
        "id": 127020209,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527153131
    },
    {
        "content": "<p>Oh OK :-)</p>",
        "id": 127020212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153148
    },
    {
        "content": "<p>That's a relief</p>",
        "id": 127020214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153154
    },
    {
        "content": "<p>I was hoping for Zmod16</p>",
        "id": 127020215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153160
    },
    {
        "content": "<p>wow</p>",
        "id": 127020223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153193
    },
    {
        "content": "<p><a href=\"https://github.com/dorhinj/leanstuff\" target=\"_blank\" title=\"https://github.com/dorhinj/leanstuff\">https://github.com/dorhinj/leanstuff</a></p>",
        "id": 127020224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153194
    },
    {
        "content": "<p>you have been pretty productive in the last 16 hours</p>",
        "id": 127020226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153199
    },
    {
        "content": "<p>about 50 lean files commited</p>",
        "id": 127020229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153230
    },
    {
        "content": "<p>lol</p>",
        "id": 127020230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527153233
    },
    {
        "content": "<p>it's Chrislib</p>",
        "id": 127020270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153252
    },
    {
        "content": "<p>I like the look of kbuzzard.lean</p>",
        "id": 127020275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153273
    },
    {
        "content": "<p>Is that one of my theorems?</p>",
        "id": 127020277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153275
    },
    {
        "content": "<p>something about modular forms maybe?</p>",
        "id": 127020279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153288
    },
    {
        "content": "<p>Actually, hopefully, one of my theorems really _will_ be in Lean soon</p>",
        "id": 127020282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153305
    },
    {
        "content": "<p>Ellen is going to formalize my dots and boxes paper</p>",
        "id": 127020286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153319
    },
    {
        "content": "<p>If Z mod n isn't in mathlib and requires a bunch of Chris' local imports it might be easier to just go for <code>def nat.mod_add (a b m : ℕ) : (a % m + b % m) % m = (a + b) % m := sorry</code></p>",
        "id": 127020520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153754
    },
    {
        "content": "<p>I am not enough of an expert in how to use <code>%</code> to see how to prove this</p>",
        "id": 127020524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153771
    },
    {
        "content": "<p>and it doesn't appear to be there already</p>",
        "id": 127020525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153776
    },
    {
        "content": "<p>KB &lt;- professional number theorist who is not an expert in mod</p>",
        "id": 127020532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153790
    },
    {
        "content": "<p>:-/</p>",
        "id": 127020535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153792
    },
    {
        "content": "<p>I added the sorried assertion to <a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/definitions.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/definitions.lean\">https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/definitions.lean</a></p>",
        "id": 127020583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153891
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_mod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_mod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127020647,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527154029
    },
    {
        "content": "<p>This is becoming slightly creepy</p>",
        "id": 127020695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527154109
    },
    {
        "content": "<p>Kevin, what have you created?</p>",
        "id": 127020697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527154115
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">definitions</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fib_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on_two</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">fib</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">fib</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span>  <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih1</span><span class=\"o\">,</span> <span class=\"n\">ih2</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ac_refl</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"n\">dvd_refl</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"n\">dvd_trans</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fib_dvd_mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">dvd_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span><span class=\"bp\">;</span>\n<span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_left</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_left</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 127020775,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527154301
    },
    {
        "content": "<p>done</p>",
        "id": 127020776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527154302
    },
    {
        "content": "<p>I don't need the fact that fib m and fib m+1 are coprime</p>",
        "id": 127020778,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527154317
    },
    {
        "content": "<p>I would need it to prove the converse though</p>",
        "id": 127020816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527154325
    },
    {
        "content": "<blockquote>\n<p>Kevin, what have you created?</p>\n</blockquote>\n<p>This is the new normal. Professors who can't prove things about mod so they ask the undergraduates</p>",
        "id": 127020843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154432
    },
    {
        "content": "<p>I really want that by December there are a bunch of undergraduates at my university asking their tutors questions which the tutors can't answer</p>",
        "id": 127020886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154460
    },
    {
        "content": "<p>or showing them code which the tutors can't understand</p>",
        "id": 127020888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154467
    },
    {
        "content": "<p>or saying \"I typed up your problem sheet into Lean and you made an off by one error\"</p>",
        "id": 127020892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154480
    },
    {
        "content": "<p>pushed</p>",
        "id": 127020894,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527154486
    },
    {
        "content": "<p>Thanks Kenny</p>",
        "id": 127020895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154493
    },
    {
        "content": "<p>I need a recursor for %</p>",
        "id": 127020903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154502
    },
    {
        "content": "<p>If I have a function F from nat to X</p>",
        "id": 127020913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154524
    },
    {
        "content": "<p>and a proof that F (n +  24) = F n</p>",
        "id": 127020915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154532
    },
    {
        "content": "<p>then I want a theorem that F n = F (n % 24)</p>",
        "id": 127020917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154545
    },
    {
        "content": "<p>Is that a recursor?</p>",
        "id": 127020919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154554
    },
    {
        "content": "<p>It's what I want, at any rate</p>",
        "id": 127020920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154558
    },
    {
        "content": "<p>ok a minute</p>",
        "id": 127020961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527154568
    },
    {
        "content": "<p>what I don't want</p>",
        "id": 127020962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154569
    },
    {
        "content": "<p>is what I have to do</p>",
        "id": 127020963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154572
    },
    {
        "content": "<p>which is marking 150 scripts about sup S</p>",
        "id": 127020964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154582
    },
    {
        "content": "<p>I think I need to go offline for 7 hours</p>",
        "id": 127020965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154590
    },
    {
        "content": "<p>I will push too</p>",
        "id": 127020966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154595
    },
    {
        "content": "<p>Before I go</p>",
        "id": 127020986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154655
    },
    {
        "content": "<p>just let me make one thing clear to Kenny and Chris</p>",
        "id": 127020987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154663
    },
    {
        "content": "<p>Last night I was a bit worried about all this</p>",
        "id": 127020988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154669
    },
    {
        "content": "<p>because I still have 10 hours of marking and I wanted to give a good talk on Sat</p>",
        "id": 127021000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154682
    },
    {
        "content": "<p>but now I know I have enough material to give a good talk</p>",
        "id": 127021035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154691
    },
    {
        "content": "<p>so feel free to stop thinking about this and worry about your stats exam</p>",
        "id": 127021039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154707
    },
    {
        "content": "<p>and come back to it on Friday</p>",
        "id": 127021042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154714
    },
    {
        "content": "<p>I will be at Xena tonight by the way, from 6pm</p>",
        "id": 127021046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154729
    },
    {
        "content": "<p>Thanks to all of you, as ever</p>",
        "id": 127021053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527154751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_rec</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n<span class=\"k\">by</span> <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mod_add_div</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127021167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527154937
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fib_gcd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">thing</span> <span class=\"n\">that</span> <span class=\"n\">works</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 127024645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527161801
    },
    {
        "content": "<p>pushed</p>",
        "id": 127024647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527161812
    },
    {
        "content": "<p>pushed</p>",
        "id": 127025051,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527162575
    },
    {
        "content": "<p>i'm going to eat and then revise statistics until tonight</p>",
        "id": 127025052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527162593
    },
    {
        "content": "<p>What is the prettiest way to prove that there's a positive real number alpha with the property that <code>alpha ^ 2 = alpha + 1</code>?</p>",
        "id": 127122627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328398
    },
    {
        "content": "<p>not to.</p>",
        "id": 127122630,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527328429
    },
    {
        "content": "<p>(why can't we just use the Zalpha)</p>",
        "id": 127122632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527328436
    },
    {
        "content": "<p>I would be really interested in an answer to this question before 2000 BST and ideally earlier</p>",
        "id": 127122664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328443
    },
    {
        "content": "<p>Kenny I am giving a talk to a bunch of schoolkids</p>",
        "id": 127122672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328450
    },
    {
        "content": "<p>I am going to give two talks</p>",
        "id": 127122674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328455
    },
    {
        "content": "<p>square root, or FTA</p>",
        "id": 127122675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527328457
    },
    {
        "content": "<p>In the first talk I will ask them to prove to me that alpha exists and I'll see what they come up with.</p>",
        "id": 127122676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328471
    },
    {
        "content": "<p>In the second talk I will show them how Lean does it</p>",
        "id": 127122677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328478
    },
    {
        "content": "<p>But I want it to look really sexy</p>",
        "id": 127122678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328488
    },
    {
        "content": "<p>IVT works too</p>",
        "id": 127122683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527328508
    },
    {
        "content": "<p>I want to define a real number alpha as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mn>1</mn><mo>+</mo><msup><mn>5</mn><mrow><mo>(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>)</mo></mrow></msup><mo>)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">(1+5^{(1/2)})/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathrm\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">2</span></span></span></span> or something that looks as close to that as possible</p>",
        "id": 127122687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328535
    },
    {
        "content": "<p>then use sqrt thm</p>",
        "id": 127122689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527328549
    },
    {
        "content": "<p>I would like a square root symbol ideally. Is there one of them?</p>",
        "id": 127122730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328578
    },
    {
        "content": "<p>Oh I saw one in Pell maybe?</p>",
        "id": 127122731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328588
    },
    {
        "content": "<p>I thought we did this a few months ago</p>",
        "id": 127122732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527328596
    },
    {
        "content": "<p>I know how to solve it</p>",
        "id": 127122733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328605
    },
    {
        "content": "<p>I just want to make it look maximally sexy</p>",
        "id": 127122734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328611
    },
    {
        "content": "<p>I want to write a human-readable proof</p>",
        "id": 127122735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328620
    },
    {
        "content": "<p>I think it is <code>\\surd</code></p>",
        "id": 127122741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527328636
    },
    {
        "content": "<p>it is in pell</p>",
        "id": 127122742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527328677
    },
    {
        "content": "<p>i.e. something where you show the exact proof to a smart schoolkid and whilst they don't know any of the precise syntax they can still kind of see that it's a proof that if alpha is (1+sqrt(5))/2 then alpha^2=alpha+1.</p>",
        "id": 127122781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328692
    },
    {
        "content": "<p>I'll see what I can come up with</p>",
        "id": 127122784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328715
    },
    {
        "content": "<p>I fear becoming mired in div_muls and mul_adds when expanding everything out</p>",
        "id": 127122836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527328809
    },
    {
        "content": "<p>complete the square</p>",
        "id": 127122842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527328845
    },
    {
        "content": "<p>using ring</p>",
        "id": 127122843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527328862
    },
    {
        "content": "<p><code>theorem root_5_squared : (sqrt 5) ^ 2 = 5 := by norm_num -- fails</code></p>",
        "id": 127128227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341429
    },
    {
        "content": "<p>Why can't it be easy</p>",
        "id": 127128228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341429
    },
    {
        "content": "<p><code>theorem root_5_squared : (sqrt 5) ^ 2 = 5 := by simp [(sqrt_prop 5).2] -- fails</code></p>",
        "id": 127128229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341429
    },
    {
        "content": "<p>I am so bad at reals</p>",
        "id": 127128230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341429
    },
    {
        "content": "<p><code>#check sqrt_prop -- ∀ (x : ℝ), 0 ≤ sqrt x ∧ sqrt x * sqrt x = max 0 x</code></p>",
        "id": 127128231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341429
    },
    {
        "content": "<p>you want <code>sqr_sqrt</code></p>",
        "id": 127128284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341527
    },
    {
        "content": "<p>it's already a simp lemma, so you just have to supply a proof of <code>0 &lt;= 5</code></p>",
        "id": 127128287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341550
    },
    {
        "content": "<p>why do I need to supply a proof of that?</p>",
        "id": 127128291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341564
    },
    {
        "content": "<p>It's clear it will yield to norm_num right?</p>",
        "id": 127128293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341571
    },
    {
        "content": "<p>Can I somehow add norm_num to simp?</p>",
        "id": 127128298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341587
    },
    {
        "content": "<p>sure, but norm_num and simp don't talk back and forth like that</p>",
        "id": 127128301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341597
    },
    {
        "content": "<p>I am still a million miles away from writing a clear readable statement and proof that if alpha = (1+sqrt(5))/2 then alpha^2=alpha+1</p>",
        "id": 127128304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341624
    },
    {
        "content": "<p>I will keep trying</p>",
        "id": 127128305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341627
    },
    {
        "content": "<p>norm_num doesn't know about square roots, and simp doesn't use norm_num as a discharger</p>",
        "id": 127128314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341642
    },
    {
        "content": "<p>you could try <code>simp {discharger := norm_num}</code>, not sure if that works</p>",
        "id": 127128351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341662
    },
    {
        "content": "<p>completely unrelated -- why do I have <code>imported file '/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/data/set/lattice.lean' uses sorry</code> and several other mathlib errors? This looks really unprofessional :-/ Can you tell me a quick fix?</p>",
        "id": 127128356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341690
    },
    {
        "content": "<p>still, I think <code>simp (dec_trivial : 0 &lt;= 5)</code> is easy enough</p>",
        "id": 127128357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341695
    },
    {
        "content": "<p>That's enough? It goes from nats to reals?</p>",
        "id": 127128362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341708
    },
    {
        "content": "<p>Oh wait no, le on real is not computable</p>",
        "id": 127128368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341737
    },
    {
        "content": "<p>you need to use norm_num</p>",
        "id": 127128371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341748
    },
    {
        "content": "<p><code>simp [(by norm_num : 0 &lt;= 5)]</code></p>",
        "id": 127128372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341757
    },
    {
        "content": "<p>I don't understand what you are saying</p>",
        "id": 127128412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341787
    },
    {
        "content": "<p>I don't understand this stuff well enough</p>",
        "id": 127128413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341792
    },
    {
        "content": "<p><code>theorem root_5_squared : (sqrt 5) ^ 2 = 5 := by simp [sqr_sqrt,(dec_trivial : 0 &lt;= 5)]-- fails</code></p>",
        "id": 127128414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341794
    },
    {
        "content": "<p>I am not even sure that's valid syntax</p>",
        "id": 127128416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341808
    },
    {
        "content": "<p>it should be...</p>",
        "id": 127128418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341818
    },
    {
        "content": "<p>the full proof is just <code>sqr_sqrt (by norm_num : 0 &lt;= 5)</code></p>",
        "id": 127128424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zero_le_5</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">root_5_squared</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sqr_sqrt</span><span class=\"o\">,</span><span class=\"n\">zero_le_5</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 127128472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341902
    },
    {
        "content": "<p>First molehill conquered</p>",
        "id": 127128473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341913
    },
    {
        "content": "<p>Oh, you might need to write <code>simp [(by norm_num : (0:R) &lt;= 5)]</code></p>",
        "id": 127128475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341923
    },
    {
        "content": "<p>Where?</p>",
        "id": 127128477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527341932
    },
    {
        "content": "<p>as a proof of the theorem</p>",
        "id": 127128478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341940
    },
    {
        "content": "<p>that proves zero_le_5 inline, and uses it as a simp lemma in the main proof</p>",
        "id": 127128485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527341965
    },
    {
        "content": "<p>It's really annoying to use Lean like this. Why do I have all these errors in mathlib?</p>",
        "id": 127128534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>imported file &#39;/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/order/complete_lattice.lean&#39; uses sorry\nreal_alpha.lean:1:0: warning\n\nimported file &#39;/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/order/bounded_lattice.lean&#39; uses sorry\nreal_alpha.lean:1:0: warning\n\nimported file &#39;/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/data/finset.lean&#39; uses sorry\nreal_alpha.lean:1:0: warning\n\nimported file &#39;/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/order/boolean_algebra.lean&#39; uses sorry\nreal_alpha.lean:1:0: warning\n\nimported file &#39;/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/data/equiv.lean&#39; uses sorry\nreal_alpha.lean:1:0: warning\n\nimported file &#39;/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/data/set/lattice.lean&#39; uses sorry\n</pre></div>",
        "id": 127128535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342045
    },
    {
        "content": "<p>What have I done wrong?</p>",
        "id": 127128536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342049
    },
    {
        "content": "<p>maybe those files use sorry</p>",
        "id": 127128537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342061
    },
    {
        "content": "<p>I thought I was all up to date</p>",
        "id": 127128540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342065
    },
    {
        "content": "<p>They're all your files</p>",
        "id": 127128543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342068
    },
    {
        "content": "<p>Look for an actual error</p>",
        "id": 127128546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342083
    },
    {
        "content": "<p>Usually lean will have some error in a theorem, and then since the theorem failed it uses sorry instead, and then every other file that imports that file complains about the sorry so you get hundreds of sorry warnings</p>",
        "id": 127128588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342141
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>complete_lattice.lean:119:36: error\n\nambiguous overload, possible interpretations\n  ⊥\n  ⊥\nAdditional information:\n/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/order/complete_lattice.lean:119:36: context: switched to basic overload resolution where arguments are elaborated without any information about the expected type because it failed to disambiguate overload using the expected type\n  ?m_1\nthe following overloaded terms were applicable\n  ⊥\n  ⊥\n</pre></div>",
        "id": 127128593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342178
    },
    {
        "content": "<p>Looks like much of a muchness to me</p>",
        "id": 127128601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342202
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>don&#39;t know how to synthesize placeholder\ncontext:\nα : Type u,\n_inst_1 : lattice.complete_lattice.{u} α\n⊢ Type ?l_1\ncomplete_lattice.lean:120:36: error\n\nambiguous overload, possible interpretations\n  @lattice.has_bot.bot.{?l_1} ?m_2 ?m_3\n  @lattice.has_bot.bot.{?l_4} ?m_5 ?m_6\nAdditional information:\n/home/buzzard/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib/order/complete_lattice.lean:120:36: context: switched to basic overload resolution where arguments are elaborated without any information about the expected type because it failed to disambiguate overload using the expected type\n  ?m_1\nthe following overloaded terms were applicable\n  @lattice.has_bot.bot.{?l_2} ?m_3 ?m_4\n  @lattice.has_bot.bot.{?l_5} ?m_6 ?m_7\n</pre></div>",
        "id": 127128609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342241
    },
    {
        "content": "<p>with pp_all on</p>",
        "id": 127128647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342246
    },
    {
        "content": "<p>what about <code>#print ⊥</code>?</p>",
        "id": 127128651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342271
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>`⊥`:1024 :=\n  | lattice.has_bot.bot _\n  | lattice.has_bot.bot _\n</pre></div>",
        "id": 127128657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342304
    },
    {
        "content": "<p>some file somewhere has declared ⊥ as a global notation</p>",
        "id": 127128661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342310
    },
    {
        "content": "<p>Thanks</p>",
        "id": 127128662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342315
    },
    {
        "content": "<p>I recently moved the location of the declaration of ⊥</p>",
        "id": 127128664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342351
    },
    {
        "content": "<p>it's possible you have an old version of one of the files and so are getting a double declaration</p>",
        "id": 127128704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342371
    },
    {
        "content": "<p>Thanks</p>",
        "id": 127128707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342381
    },
    {
        "content": "<p>I can't see any of these symbols or bot in my file</p>",
        "id": 127128708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342393
    },
    {
        "content": "<p>check lattice.lean</p>",
        "id": 127128712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342406
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>:~/lean-projects/lean-squares-in-fibonacci/_target/deps/mathlib$ git branch\n* (HEAD detached at 6811f13)\n  master\n</pre></div>",
        "id": 127128720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342437
    },
    {
        "content": "<p>I don't know what detached head means</p>",
        "id": 127128721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342448
    },
    {
        "content": "<p>or just search for <code>notation `⊥` </code></p>",
        "id": 127128722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342450
    },
    {
        "content": "<p>Should I switch to master?</p>",
        "id": 127128723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342456
    },
    {
        "content": "<p>it means you have a commit checked out, not a branch</p>",
        "id": 127128725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342465
    },
    {
        "content": "<p>what does <code>git status</code> give?</p>",
        "id": 127128771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342514
    },
    {
        "content": "<p>That sounds right</p>",
        "id": 127128773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342516
    },
    {
        "content": "<p>shall I checkout a branch?</p>",
        "id": 127128774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342516
    },
    {
        "content": "<p>I did everything with leanpkg as far as I know</p>",
        "id": 127128775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342516
    },
    {
        "content": "<p>leanpkg usually checks out commits, which is why it is like that</p>",
        "id": 127128786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ git status\nHEAD detached at 6811f13\nnothing to commit, working directory clean\n</pre></div>",
        "id": 127128790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342555
    },
    {
        "content": "<p>Instead of trying to debug</p>",
        "id": 127128793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342575
    },
    {
        "content": "<p>can you just tell me how to install the latest mathlib and get it all working?</p>",
        "id": 127128795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342585
    },
    {
        "content": "<p>You appear to have it already, from that status message</p>",
        "id": 127128845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342617
    },
    {
        "content": "<p>Is there just a brutal fix so I have a working version of mathlib? Should I just delete _target and run leanpkg something?</p>",
        "id": 127128848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342623
    },
    {
        "content": "<p>Or check out some other commit or branch?</p>",
        "id": 127128852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342637
    },
    {
        "content": "<p>I just want to get this fixed quickly, I am giving a talk in an hour</p>",
        "id": 127128860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342670
    },
    {
        "content": "<p>yes probably, but I'm not a leanpkg expert</p>",
        "id": 127128861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342672
    },
    {
        "content": "<p>and then another one at 8 where I want to show Lean off</p>",
        "id": 127128865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342679
    },
    {
        "content": "<p>and all its erros</p>",
        "id": 127128866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342679
    },
    {
        "content": "<p>errors</p>",
        "id": 127128867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342679
    },
    {
        "content": "<p>maybe back up the directory first, but sure just remove _target and do the usual leanpkg incantations</p>",
        "id": 127128870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342705
    },
    {
        "content": "<p>that folder only has cached stuff so it should be fine</p>",
        "id": 127128910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342731
    },
    {
        "content": "<p>I'm on a train :-/</p>",
        "id": 127128914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342771
    },
    {
        "content": "<p>try removing .olean files</p>",
        "id": 127128921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342796
    },
    {
        "content": "<p>and rebuild</p>",
        "id": 127128922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342801
    },
    {
        "content": "<p>i did that already</p>",
        "id": 127128924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342825
    },
    {
        "content": "<p>did you search for notation bot like I said?</p>",
        "id": 127128928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342842
    },
    {
        "content": "<p>git is working</p>",
        "id": 127128964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342845
    },
    {
        "content": "<p>really good</p>",
        "id": 127128966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342847
    },
    {
        "content": "<p>patchy 3g phone and hotspot</p>",
        "id": 127128974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342889
    },
    {
        "content": "<p>this line</p>\n<div class=\"codehilite\"><pre><span></span>notation `⊥` := has_bot.bot _\n</pre></div>\n\n\n<p>should appear exactly once in mathlib, in bounded_lattice.lean</p>",
        "id": 127128975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342895
    },
    {
        "content": "<p>I got bored trying to work out why it was broken</p>",
        "id": 127128978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342907
    },
    {
        "content": "<p>I am under time pressure</p>",
        "id": 127128983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342922
    },
    {
        "content": "<p>I'm hoping that the location of the second hit will hint at why you have old files</p>",
        "id": 127128984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527342931
    },
    {
        "content": "<p>had</p>",
        "id": 127128986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527342952
    },
    {
        "content": "<p>that's why I'm giving suggestions that are fast to check</p>",
        "id": 127129032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527343014
    },
    {
        "content": "<blockquote>\n<p>you could try <code>simp {discharger := norm_num}</code>, not sure if that works</p>\n</blockquote>\n<p>I can't get it to work</p>",
        "id": 127129094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343134
    },
    {
        "content": "<p>How about this for a readable proof?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">div_mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">sqr_sqrt</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127129100,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527343151
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">real</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">def</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">root_5_squared</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sqr_sqrt</span><span class=\"o\">,(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">5</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβsum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- ;-)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβprod</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span><span class=\"n\">mul_one</span><span class=\"o\">,</span><span class=\"n\">add_div</span><span class=\"o\">,</span><span class=\"n\">mul_add</span><span class=\"o\">,</span><span class=\"n\">add_mul</span><span class=\"o\">,</span><span class=\"n\">add_mul</span><span class=\"o\">],</span> <span class=\"c1\">-- meh</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">root_5_squared</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- unknown exception while type-checking theorem</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127129103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343174
    },
    {
        "content": "<p>I got an achievement -- \"unknown exception while type-checking theorem\"</p>",
        "id": 127129106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343192
    },
    {
        "content": "<p>Why isn't this easy</p>",
        "id": 127129150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343213
    },
    {
        "content": "<p>simp wants facts from norm_num but I don't know what facts</p>",
        "id": 127129151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343228
    },
    {
        "content": "<p>goal after simp is</p>",
        "id": 127129153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">+</span>\n      <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span>\n         <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))))))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">-</span><span class=\"mi\">1</span>\n</pre></div>",
        "id": 127129154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343259
    },
    {
        "content": "<p>I must have taken a wrong turn</p>",
        "id": 127129155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343263
    },
    {
        "content": "<p>I am not a competent driver when it comes to the reals</p>",
        "id": 127129162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343293
    },
    {
        "content": "<p>simp on its own will not know how to finish the job</p>",
        "id": 127129164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527343304
    },
    {
        "content": "<p>you need <code>ring</code> for all that</p>",
        "id": 127129165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527343312
    },
    {
        "content": "<p>All I want to do is prove that if alpha is (1+sqrt(5))/2 then alpha^2=alpha+1</p>",
        "id": 127129166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343320
    },
    {
        "content": "<p>in R</p>",
        "id": 127129204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343326
    },
    {
        "content": "<p>because if that's not easy</p>",
        "id": 127129208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343333
    },
    {
        "content": "<p>then what kind of an R have you got here</p>",
        "id": 127129209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343338
    },
    {
        "content": "<p>a computer scientist's one but not a mathematican's one</p>",
        "id": 127129211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343355
    },
    {
        "content": "<p>I completely understand the other approach</p>",
        "id": 127129219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343384
    },
    {
        "content": "<p>but for pedagogical reasons I would like to see this happening in R</p>",
        "id": 127129222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343397
    },
    {
        "content": "<p>I can always fall back on Nicholas' construction</p>",
        "id": 127129224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343423
    },
    {
        "content": "<p>which indeed I will ultimately fall back on</p>",
        "id": 127129226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343437
    },
    {
        "content": "<p>but my goal was not to explain how incredibly difficult it was to even the most trivial things</p>",
        "id": 127129266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343456
    },
    {
        "content": "<p>I get it</p>",
        "id": 127129267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527343471
    },
    {
        "content": "<p>1 sec</p>",
        "id": 127129269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527343478
    },
    {
        "content": "<p>Sorry to moan</p>",
        "id": 127129270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343492
    },
    {
        "content": "<p>I am giving an important talk</p>",
        "id": 127129271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343499
    },
    {
        "content": "<p>and I want it to be _really good_</p>",
        "id": 127129275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343504
    },
    {
        "content": "<p>I believe it can be done with a short tactic invoke</p>",
        "id": 127129280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527343519
    },
    {
        "content": "<p>so I want to make a really professional job of it</p>",
        "id": 127129281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343521
    },
    {
        "content": "<p>I think you can use <code>ring</code> to get it down to an expression involving <code>(sqrt 5)^2</code>, and then use <code>simp</code> and <code>norm_num</code> to finish</p>",
        "id": 127129285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527343555
    },
    {
        "content": "<p>Removed target and re-installed everything and I'm back up to speed :-)</p>",
        "id": 127129351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343664
    },
    {
        "content": "<p>one further step towards professional</p>",
        "id": 127129352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343664
    },
    {
        "content": "<p>No more errors</p>",
        "id": 127129353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343664
    },
    {
        "content": "<p>aargh that's a lie</p>",
        "id": 127129390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343686
    },
    {
        "content": "<p>I will sort this out later -- I've got until 8pm</p>",
        "id": 127129400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343774
    },
    {
        "content": "<p>what time is it now?</p>",
        "id": 127129403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527343789
    },
    {
        "content": "<blockquote>\n<p>I will sort this out later -- I've got until 8pm</p>\n</blockquote>\n<p>what do you need to sort out?</p>",
        "id": 127129404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527343793
    },
    {
        "content": "<p>I have loads of errors in mathlib</p>",
        "id": 127129448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343827
    },
    {
        "content": "<p>I've tried everything</p>",
        "id": 127129450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343840
    },
    {
        "content": "<p>I might reboot my computer</p>",
        "id": 127129451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343847
    },
    {
        "content": "<p>and recompile all .olean files</p>",
        "id": 127129452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343851
    },
    {
        "content": "<p>are you trying to prove anything?</p>",
        "id": 127129453,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527343854
    },
    {
        "content": "<p>but that's all I can think of</p>",
        "id": 127129454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343854
    },
    {
        "content": "<p>I'm tyring to prove that two real numbers are equal</p>",
        "id": 127129457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343867
    },
    {
        "content": "<p>I'll push</p>",
        "id": 127129460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343872
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/real_alpha.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/real_alpha.lean\">https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/real_alpha.lean</a></p>",
        "id": 127129502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343961
    },
    {
        "content": "<p>But I want it to look sexy</p>",
        "id": 127129504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527343965
    },
    {
        "content": "<p>you could import <code>data.real.basic</code> instead</p>",
        "id": 127129512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527344015
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.real.basic tactic.norm_num tactic.ring\n\nopen real\nnoncomputable theory\n\nprefix `√`:90 := sqrt\n\ndef α := (√5 + 1) / 2\ndef β := 1 - α\n\ntheorem root_5_squared : √5 ^ 2 = 5 :=\nby simp {discharger := `[norm_num]}\n\nlemma αβsum : α + β = 1 := begin\n  unfold α β,\n  ring\nend\n\nlemma αβprod : α * β = -1 := begin\n  unfold α β,\n  ring,\n  simp {discharger := `[norm_num]},\n  ring\nend\n</pre></div>",
        "id": 127129776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527344545
    },
    {
        "content": "<p>what</p>",
        "id": 127129779,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344569
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">√</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n\n<span class=\"n\">def</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">def</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">root_5_squared</span> <span class=\"o\">:</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mul_self_sqrt</span> <span class=\"err\">$</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβsum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"k\">from</span> <span class=\"n\">add_sub_cancel&#39;_right</span> <span class=\"n\">α</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβprod</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span>\n    <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_self_div_two</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">div_sub_div_same</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_sub_add_left_eq_sub</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">div_mul_div</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_self_sub_mul_self_eq</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">root_5_squared</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 127129879,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you like direct proofs?</p>",
        "id": 127129880,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344838
    },
    {
        "content": "<p>You could also half-cheat and write a plausible-looking sequence of equalities all proven by <code>ring</code></p>",
        "id": 127129922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527344883
    },
    {
        "content": "<p>but that defeats the purpose of the presentation</p>",
        "id": 127129927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344896
    },
    {
        "content": "<p>This is somehow awful</p>",
        "id": 127129928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527344903
    },
    {
        "content": "<p>it makes it look nice and readable</p>",
        "id": 127129929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527344906
    },
    {
        "content": "<p>but it's much better than nothing</p>",
        "id": 127129930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527344909
    },
    {
        "content": "<p>But I don't want it to be readable</p>",
        "id": 127129932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527344915
    },
    {
        "content": "<p>I want it to be trivial</p>",
        "id": 127129933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527344918
    },
    {
        "content": "<p>what</p>",
        "id": 127129934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344926
    },
    {
        "content": "<p>An obscure one-liner?</p>",
        "id": 127129935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527344928
    },
    {
        "content": "<p>you didn't like my ring solution?</p>",
        "id": 127129936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527344929
    },
    {
        "content": "<p>I thought you're teaching rigour</p>",
        "id": 127129937,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344941
    },
    {
        "content": "<p>if you asked me in m1f to prove that alpha * beta = -1, that is exactly what I would write down</p>",
        "id": 127129942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344953
    },
    {
        "content": "<p>minus the <code>by rw ...</code> things</p>",
        "id": 127129944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344959
    },
    {
        "content": "<p>I don't understand -- what ring solution?</p>",
        "id": 127129945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527344960
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/subject/Largest.20Square.20in.20the.20Fibonacci.20Sequence/near/127129776\" title=\"#narrow/stream/116395-maths/subject/Largest.20Square.20in.20the.20Fibonacci.20Sequence/near/127129776\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/Largest.20Square.20in.20the.20Fibonacci.20Sequence/near/127129776</a></p>",
        "id": 127129947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344972
    },
    {
        "content": "<p>:D</p>",
        "id": 127129951,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527344977
    },
    {
        "content": "<p>I can't delete my own messages...</p>",
        "id": 127130004,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345015
    },
    {
        "content": "<p>I want as many solutions as I can</p>",
        "id": 127130016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527345058
    },
    {
        "content": "<p>And we vote for the most beautiful</p>",
        "id": 127130024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527345072
    },
    {
        "content": "<p>beauty is in the eye of the beholder</p>",
        "id": 127130026,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345083
    },
    {
        "content": "<p>in this case, you</p>",
        "id": 127130027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345085
    },
    {
        "content": "<p>it's you who is/are presenting</p>",
        "id": 127130032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345100
    },
    {
        "content": "<p>semi-explicit, only one <code>ring</code></p>\n<div class=\"codehilite\"><pre><span></span>lemma αβprod : α * β = -1 := begin\n  unfold α β,\n  ring,\n  rw sqr_sqrt; norm_num\nend\n</pre></div>",
        "id": 127130082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527345184
    },
    {
        "content": "<p>I still don't know what <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> wants</p>",
        "id": 127130090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345207
    },
    {
        "content": "<p>what is the goal of this?</p>",
        "id": 127130092,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345211
    },
    {
        "content": "<p>or an intermediate one, still using calc</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">αβsum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">β</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβprod</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span>\n    <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqr_sqrt</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 127130208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527345375
    },
    {
        "content": "<p>I guess you could write the middle line as <code>(1 - √5^2) / 4</code> for extra clean</p>",
        "id": 127130231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527345445
    },
    {
        "content": "<p>low-tech one-liners:</p>",
        "id": 127130235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345452
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">√</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n\n<span class=\"n\">def</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">def</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">root_5_squared</span> <span class=\"o\">:</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mul_self_sqrt</span> <span class=\"err\">$</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβsum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_div</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβprod</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">div_mul_div</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_self_sub_mul_self_eq</span><span class=\"o\">,</span> <span class=\"n\">root_5_squared</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 127130237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345454
    },
    {
        "content": "<p>(is changing the definition allowed?)</p>",
        "id": 127130280,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345484
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma αβprod : α * β = -1 :=\ncalc ((√5 + 1) / 2) * (1 - (√5 + 1) / 2)\n    = (1 - √5^2) / 4 : by ring\n... = -1 : by rw sqr_sqrt; norm_num\n</pre></div>",
        "id": 127130356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527345630
    },
    {
        "content": "<p>not very different from the one above...</p>",
        "id": 127130362,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345656
    },
    {
        "content": "<p>it's based on reid's</p>",
        "id": 127130365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527345665
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">√</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n\n<span class=\"n\">def</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">def</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sqrt_5_mul_self</span> <span class=\"o\">:</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mul_self_sqrt</span> <span class=\"err\">$</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβsum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">add_div</span><span class=\"o\">,</span> <span class=\"n\">neg_div</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">one_div_eq_inv</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβprod</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">div_mul_div</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">sqrt_5_mul_self</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 127130416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345768
    },
    {
        "content": "<p>And I just took Kenny's long calc and deleted all the intermediate steps that could be handled by <code>ring</code>.</p>",
        "id": 127130417,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527345769
    },
    {
        "content": "<p>I like calc here because the fact <code>α * β = -1</code> is actually not immediately obvious to a human, and you'd write out about the same number of intermediate steps to explain the calculation to a human.</p>",
        "id": 127130427,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527345832
    },
    {
        "content": "<p>still avoiding ring as usual :P</p>",
        "id": 127130428,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345834
    },
    {
        "content": "<p>I like my new definition</p>",
        "id": 127130429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345841
    },
    {
        "content": "<p>who likes my new definition</p>",
        "id": 127130466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345844
    },
    {
        "content": "<p>I think your definition is nicer if you are going to define both alpha and beta</p>",
        "id": 127130472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527345878
    },
    {
        "content": "<p>In a human proof I would probably have an additional step in the middle with all four terms and cross out the cross terms</p>",
        "id": 127130485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527345959
    },
    {
        "content": "<p>that's what I did with the <code>add_mul</code> and <code>mul_add</code></p>",
        "id": 127130527,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527345976
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">√</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n\n<span class=\"n\">def</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">def</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">√</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sqrt_5_mul_self</span> <span class=\"o\">:</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"err\">√</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mul_self_sqrt</span> <span class=\"err\">$</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβsum</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">add_div</span><span class=\"o\">,</span> <span class=\"n\">neg_div</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">one_div_eq_inv</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">αβprod</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">div_mul_div</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">sqrt_5_mul_self</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num1</span>\n</pre></div>",
        "id": 127130532,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527346005
    },
    {
        "content": "<p>low-tech :P</p>",
        "id": 127130535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527346013
    },
    {
        "content": "<p>A long <code>rw</code> proof is hard to read though</p>",
        "id": 127130536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527346014
    },
    {
        "content": "<p>unless you step through it</p>",
        "id": 127130537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527346022
    },
    {
        "content": "<p>I thought <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> wants a one-liner</p>",
        "id": 127130542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527346031
    },
    {
        "content": "<p>and you can't even do that for a simp proof</p>",
        "id": 127130543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527346035
    },
    {
        "content": "<p>I think we have that already</p>",
        "id": 127130544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527346043
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma αβprod : α * β = -1 :=\nby unfold α β; ring; simp {discharger := `[norm_num]}; ring\n</pre></div>",
        "id": 127130552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527346080
    },
    {
        "content": "<p>ooh, with this modification to <code>norm_num</code>:</p>\n<div class=\"codehilite\"><pre><span></span>meta def norm_num (loc : parse location) : tactic unit :=\nlet t := orelse&#39; (norm_num1 loc) $\n  simp_core {} (norm_num1 (interactive.loc.ns [none])) ff [] [] loc in\nt &gt;&gt; repeat t\n</pre></div>\n\n\n<p>you can get away with just <code>by unfold α β; ring; norm_num</code></p>",
        "id": 127130655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527346280
    },
    {
        "content": "<p>I just want to explain to kids who don't know any better, what maths is</p>",
        "id": 127130933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527346919
    },
    {
        "content": "<p>then why wouldn't you write down every step</p>",
        "id": 127130973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527346934
    },
    {
        "content": "<p>All of this stuff is great</p>",
        "id": 127130974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527346936
    },
    {
        "content": "<p>Because what is a step when you are 16 years old?</p>",
        "id": 127130982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527346968
    },
    {
        "content": "<p>You have never thought about steps</p>",
        "id": 127130986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527346979
    },
    {
        "content": "<p>You just answer the question</p>",
        "id": 127130992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527346989
    },
    {
        "content": "<p>I presume that will be part of the talk</p>",
        "id": 127130993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527346995
    },
    {
        "content": "<p>at least, the idea that math is built on axioms and rules</p>",
        "id": 127130997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527347013
    },
    {
        "content": "<p>and you have to use those rules to prove things</p>",
        "id": 127131002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527347023
    },
    {
        "content": "<p>the sense of \"step\" is not far from this</p>",
        "id": 127131004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527347039
    },
    {
        "content": "<p>Yes exactly</p>",
        "id": 127131186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527347368
    },
    {
        "content": "<p>I will be here at 8pm UK time (i.e. now + 3h50m) asking more stupid questions about real numbers</p>",
        "id": 127131190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527347399
    },
    {
        "content": "<p><code>lemma α_sqr : α^2 = α + 1 := rfl</code> in ℤα ;)</p>",
        "id": 127133670,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527352648
    },
    {
        "content": "<p>but he doesn't want to use Zalpha in the presentation lol</p>",
        "id": 127133673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527352663
    },
    {
        "content": "<p>btw I proved point 3, should I leave it in Zalpha or move it to a <code>point3.lean</code>?</p>",
        "id": 127133714,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527352705
    },
    {
        "content": "<p>move it to <code>point3.lean</code></p>",
        "id": 127133717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527352717
    },
    {
        "content": "<p>done!</p>",
        "id": 127133772,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527352834
    },
    {
        "content": "<p>I tried and failed to prove that it is an integral domain, got any tips?</p>",
        "id": 127133829,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527353029
    },
    {
        "content": "<p>where are you stuck in?</p>",
        "id": 127133837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527353042
    },
    {
        "content": "<p>it’s something like<br>\n<code>a * c + b * d = 0 AND a * d + b * c + b * d = 0 IMPLIES THAT (a, b) = 0 OR (c, d) = 0</code></p>",
        "id": 127133987,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527353380
    },
    {
        "content": "<p>I understand that it’s equivalent to the fact that α is not an integer, and equivalent to the fact that 1 and α are linearly independent, but I don’t see how to do that from the definition of multiplication</p>",
        "id": 127134063,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527353522
    },
    {
        "content": "<p>Well, you could define an embedding of Zalpha into R.</p>",
        "id": 127134505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527354535
    },
    {
        "content": "<p>I think we now have about a dozen proofs of why that works <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 127134510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527354550
    },
    {
        "content": "<p>proving that it is injective needs work also</p>",
        "id": 127134511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527354561
    },
    {
        "content": "<p>That is the linear independence of 1 and alpha</p>",
        "id": 127134556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527354607
    },
    {
        "content": "<p>sure, why not ;D</p>",
        "id": 127134666,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527354912
    },
    {
        "content": "<p>oh right you need to prove that sqrt(5) is irrational</p>",
        "id": 127134669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527354946
    },
    {
        "content": "<p>Yeah, that's the analogue of showing that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>i</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">z=x+iy</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mrel\">=</span><span class=\"mord mathit\">x</span><span class=\"mbin\">+</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span> is a complex number which isn't zero, then you can divide by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span>, by multiplying by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>z</mi></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.63056em;\"></span><span class=\"strut bottom\" style=\"height:0.63056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.63056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-3.55056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> and then dividing by the non-zero real <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi><mover accent=\"true\"><mrow><mi>z</mi></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">z\\overline{z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.63056em;\"></span><span class=\"strut bottom\" style=\"height:0.63056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.63056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-3.55056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 127140546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527368944
    },
    {
        "content": "<p>In this instance it boils down to proving that the product of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mi mathvariant=\"normal\">√</mi><mrow><mn>5</mn></mrow></mrow><annotation encoding=\"application/x-tex\">a+b\\surd{5}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.2em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mbin\">+</span><span class=\"mord mathit\">b</span><span class=\"mord mathrm\">√</span><span class=\"mord\"><span class=\"mord mathrm\">5</span></span></span></span></span> and its Galois conjugate <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>−</mo><mi>b</mi><mi mathvariant=\"normal\">√</mi><mrow><mn>5</mn></mrow></mrow><annotation encoding=\"application/x-tex\">a-b\\surd{5}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.2em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mbin\">−</span><span class=\"mord mathit\">b</span><span class=\"mord mathrm\">√</span><span class=\"mord\"><span class=\"mord mathrm\">5</span></span></span></span></span> is non-zero if at least one of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">b</span></span></span></span> is non-zero</p>",
        "id": 127140598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527369019
    },
    {
        "content": "<p><code>\\surd</code>for square roots in maths mode, not <code>\\sqrt</code></p>",
        "id": 127140600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527369031
    },
    {
        "content": "<p>So as Kenny says it's precisely the irrationality of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">√</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">\\surd 5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.2em;\"></span><span class=\"base\"><span class=\"mord mathrm\">√</span><span class=\"mord mathrm\">5</span></span></span></span>, or, more precisely, it's the statement that no rational number squared is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">5</span></span></span></span> (rather than any statement about real numbers not being rational)</p>",
        "id": 127140601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527369039
    },
    {
        "content": "<p>So one way to do it is to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mi mathvariant=\"normal\">√</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">a+b\\surd 5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.2em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mbin\">+</span><span class=\"mord mathit\">b</span><span class=\"mord mathrm\">√</span><span class=\"mord mathrm\">5</span></span></span></span> is non-zero then the rational <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mn>5</mn><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">a^2-5b^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">5</span><span class=\"mord\"><span class=\"mord mathit\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is non-zero and then use that a non-zero rational has an inverse.</p>",
        "id": 127140603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527369049
    },
    {
        "content": "<p>I've just been telling some kids about Lean. Some of them got into it. We were doing induction on nat and on or and on false and stuff</p>",
        "id": 127140700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527369300
    },
    {
        "content": "<p>I did some Fibonacci stuff</p>",
        "id": 127140709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527369311
    },
    {
        "content": "<p>and some logic stuff</p>",
        "id": 127140710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527369314
    },
    {
        "content": "<p>and we looked at why induction was a theorem in Lean</p>",
        "id": 127140711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527369328
    },
    {
        "content": "<blockquote>\n<p>Well, you could define an embedding of Zalpha into R.</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think that worked ;) <a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/Zalpha_real.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/Zalpha_real.lean\">https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/Zalpha_real.lean</a><br>\nagain, ugly code, but it typechecks</p>",
        "id": 127141063,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527370139
    },
    {
        "content": "<p>and thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> for the alpha squared proof, such a time saver! :D</p>",
        "id": 127141257,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527370603
    },
    {
        "content": "<p>hmm, I wonder if we can shorten it</p>",
        "id": 127142885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527374474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> do you mind if I edit your files?</p>",
        "id": 127143270,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527375480
    },
    {
        "content": "<p>go for it!</p>",
        "id": 127143309,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527375496
    },
    {
        "content": "<p>I think I’m done for now, have to spend time on other things now</p>",
        "id": 127143311,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527375528
    },
    {
        "content": "<p>but I’m curious: what is norm_num? I haven’t found much documentation for it</p>",
        "id": 127143313,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527375541
    },
    {
        "content": "<p>It proves identities between explicit real numbers</p>",
        "id": 127143424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527375805
    },
    {
        "content": "<p>And inequalities etc</p>",
        "id": 127143425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527375813
    },
    {
        "content": "<p>cool <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 127143472,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527375951
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">α_fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">Fib</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">α</span><span class=\"bp\">*</span><span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">Fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127143761,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527376612
    },
    {
        "content": "<p>I golfed off a lot of lines from here</p>",
        "id": 127143762,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527376617
    },
    {
        "content": "<p>that’s great <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 127143810,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527376700
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">α_fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">Fib</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">α</span><span class=\"bp\">*</span><span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">Fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">Fib</span><span class=\"bp\">.</span><span class=\"n\">is_fib</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127143872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527376820
    },
    {
        "content": "<p>🤯 <code>change</code> sounds amazing, funny that I hadn’t run across it before</p>",
        "id": 127143928,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527376964
    },
    {
        "content": "<p>do you realize that the <code>show</code> in tactic mode is different from the <code>show</code> in term mode</p>",
        "id": 127143935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527377018
    },
    {
        "content": "<p>and then <code>change</code> is a generalization of that, that allows you to change the hypotheses as well</p>",
        "id": 127143939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527377035
    },
    {
        "content": "<p>I haven’t used show in term mode, what’s the difference?</p>",
        "id": 127144089,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527377392
    },
    {
        "content": "<p>well there's not a huge difference</p>",
        "id": 127144135,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527377418
    },
    {
        "content": "<p>I haven't used <code>show</code> in tactic mode!</p>",
        "id": 127144332,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527377910
    },
    {
        "content": "<p>that moment when computer programs understand analogies better than we expect <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 127144344,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527377991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> I hope you don't mind</p>",
        "id": 127147117,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527384455
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/commit/7ba981070187c25d322b0e8de14021ec7214ddb9#diff-44f4839567c6f9e6617b4e04801b926a\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/commit/7ba981070187c25d322b0e8de14021ec7214ddb9#diff-44f4839567c6f9e6617b4e04801b926a\">https://github.com/kbuzzard/lean-squares-in-fibonacci/commit/7ba981070187c25d322b0e8de14021ec7214ddb9#diff-44f4839567c6f9e6617b4e04801b926a</a></p>",
        "id": 127147159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527384500
    },
    {
        "content": "<p>TODO: incorporate <a href=\"https://github.com/leanprover/mathlib/blob/master/number_theory/pell.lean#L421\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/number_theory/pell.lean#L421\">this</a></p>",
        "id": 127147257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527384784
    },
    {
        "content": "<p>not at all, that’s cool! thanks!</p>",
        "id": 127147478,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527385333
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/commit/9106996916442e8f17239323d5a6cbe3e236efd3#diff-44f4839567c6f9e6617b4e04801b926a\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/commit/9106996916442e8f17239323d5a6cbe3e236efd3#diff-44f4839567c6f9e6617b4e04801b926a\">https://github.com/kbuzzard/lean-squares-in-fibonacci/commit/9106996916442e8f17239323d5a6cbe3e236efd3#diff-44f4839567c6f9e6617b4e04801b926a</a></p>",
        "id": 127147926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527386412
    },
    {
        "content": "<p>done</p>",
        "id": 127147927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527386412
    },
    {
        "content": "<p>I'm working on polys. I've just done the remainder theorem.</p>",
        "id": 127162054,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527422176
    },
    {
        "content": "<p>Polys in 1 variable need to go in mathlib so perhaps keep this in mind</p>",
        "id": 127162168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527422495
    },
    {
        "content": "<p>When I write code now, I realise that sometimes it's code for me and sometimes it's stuff I think should be in mathlib</p>",
        "id": 127162208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527422533
    },
    {
        "content": "<p>And I've started separating the two</p>",
        "id": 127162209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527422551
    },
    {
        "content": "<p>I think this is an interesting consequence of proving \"random\" things like 144 being the largest square in the Fibonacci sequence.</p>",
        "id": 127162356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527422976
    },
    {
        "content": "<p>I am pretty sure (am I right <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?) that mathlib has no interest in keeping and maintaining a proof of the curiosity that 144 is the largest square in the Fibonacci sequence.</p>",
        "id": 127162399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423030
    },
    {
        "content": "<p>However</p>",
        "id": 127162401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423041
    },
    {
        "content": "<p>When a mathematician looks at the proof, they expect to have to work in some areas</p>",
        "id": 127162403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423063
    },
    {
        "content": "<p>but conversely they expect some \"standard tools\" to be there</p>",
        "id": 127162408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423075
    },
    {
        "content": "<p>and this can be used to guide development of mathlib</p>",
        "id": 127162413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423098
    },
    {
        "content": "<p>For example, at some point someone is going to need quadratic reciprocity</p>",
        "id": 127162414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423115
    },
    {
        "content": "<p>and we will end up developing some of the tools needed to prove QR in this 144 proof</p>",
        "id": 127162453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423144
    },
    {
        "content": "<p>and I think there's a strong argument for QR going into mathlib as it's one of the jewels in the crown of mathematics</p>",
        "id": 127162454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423158
    },
    {
        "content": "<p>[as well as being a special case of Langlands Reciprocity ;-) ]</p>",
        "id": 127162456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423183
    },
    {
        "content": "<p>In the 144 proof we don't need full QR</p>",
        "id": 127162464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423223
    },
    {
        "content": "<p>but we need Gauss' Lemma and Euler's Criterion</p>",
        "id": 127162465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423229
    },
    {
        "content": "<p>so we're starting along the road to QR with these.</p>",
        "id": 127162502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527423243
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_linear_ordered_comm_ring</span> <span class=\"bp\">ℤ</span><span class=\"n\">α</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 127162963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527424158
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/Zalpha_Zsqrt5.lean#L38\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/Zalpha_Zsqrt5.lean#L38\">https://github.com/kbuzzard/lean-squares-in-fibonacci/blob/master/src/Zalpha_Zsqrt5.lean#L38</a></p>",
        "id": 127162964,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527424164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I find embedding into <code>ℤ√5</code> a better idea than embedding into the reals</p>",
        "id": 127162966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527424190
    },
    {
        "content": "<p>Mario's <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>[</mo><mi mathvariant=\"normal\">√</mi><mrow><mn>5</mn></mrow><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\surd{5}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8em;\"></span><span class=\"strut bottom\" style=\"height:1.05em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathrm\">√</span><span class=\"mord\"><span class=\"mord mathrm\">5</span></span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 127163332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527424999
    },
    {
        "content": "<p>(why doesn't sqrt work in LaTeX?)</p>",
        "id": 127163335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425023
    },
    {
        "content": "<p>He proved it was an ID?</p>",
        "id": 127163337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425036
    },
    {
        "content": "<blockquote>\n<p>He proved it was an ID?</p>\n</blockquote>\n<p>yes</p>",
        "id": 127163378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425101
    },
    {
        "content": "<p>(althought I didn't use that)</p>",
        "id": 127163382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425107
    },
    {
        "content": "<p>(I used norm to prove that Zalpha is ID)</p>",
        "id": 127163386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425116
    },
    {
        "content": "<p>So how do you deduce ID from norm? You need that if norm is 0 then term is 0, right?</p>",
        "id": 127163387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425150
    },
    {
        "content": "<p>yes</p>",
        "id": 127163388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425160
    },
    {
        "content": "<p>which is tantamount to proving that sqrt5 is irrational</p>",
        "id": 127163425,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425166
    },
    {
        "content": "<p>and so you need to prove irrationality#</p>",
        "id": 127163429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425168
    },
    {
        "content": "<p>right</p>",
        "id": 127163430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425169
    },
    {
        "content": "<p>on hindsight I should have used the embedding</p>",
        "id": 127163431,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425173
    },
    {
        "content": "<p>but I still want to have the norm</p>",
        "id": 127163433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425180
    },
    {
        "content": "<p>I was suggesting that Mario might have done that already</p>",
        "id": 127163434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425183
    },
    {
        "content": "<p>the norm is useful</p>",
        "id": 127163435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425183
    },
    {
        "content": "<p>Sure</p>",
        "id": 127163436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425189
    },
    {
        "content": "<p>sure</p>",
        "id": 127163438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425192
    },
    {
        "content": "<p>And your norm commutes with Mario's</p>",
        "id": 127163439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425196
    },
    {
        "content": "<p>so you could have deduced your norm result from Mario's</p>",
        "id": 127163445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425233
    },
    {
        "content": "<p>and this would have saved you the trouble of proving irrationality of sqrt(5)</p>",
        "id": 127163447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425247
    },
    {
        "content": "<p>you see, in my embedding, I multiply the \"real value\" by 2</p>",
        "id": 127163448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425259
    },
    {
        "content": "<p>because alpha is not an element of Z[sqrt5]</p>",
        "id": 127163449,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425264
    },
    {
        "content": "<blockquote>\n<p>and this would have saved you the trouble of proving irrationality of sqrt(5)</p>\n</blockquote>\n<p>I know</p>",
        "id": 127163450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425275
    },
    {
        "content": "<p>I'll do it when I finish lunch</p>",
        "id": 127163488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527425285
    },
    {
        "content": "<p>but I guess it's nice to check it every now and then</p>",
        "id": 127163491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527425288
    },
    {
        "content": "<p>that’s cool! I’ll have to see how Zsqrt is decidable, I just avoided it because it’s irrational xD</p>",
        "id": 127163597,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527425599
    },
    {
        "content": "<p>oh duh: <code>def sq_le (a c b d : ℕ) : Prop := c*a*a ≤ d*b*b</code></p>",
        "id": 127163646,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527425740
    },
    {
        "content": "<p>done</p>",
        "id": 127168247,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527435317
    },
    {
        "content": "<p>now the long proof that 5 is irrational is gone</p>",
        "id": 127168250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527435325
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">char_eq</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">α</span> <span class=\"bp\">∨</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">H1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span>\n  <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">∘</span> <span class=\"n\">eq_of_sub_eq_zero</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">∘</span> <span class=\"n\">eq_of_sub_eq_zero</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127168635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527436206
    },
    {
        "content": "<p>completely pointless theorem</p>",
        "id": 127168638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527436211
    },
    {
        "content": "<p>Gal(Zalpha/Z) = C2</p>",
        "id": 127168639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527436228
    },
    {
        "content": "<p>I guess <code>z * z - z - 1 = (z - α) * (z - β)</code> is also a way to prove alpha*beta = -1</p>",
        "id": 127168646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436296
    },
    {
        "content": "<p>sure</p>",
        "id": 127168649,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527436319
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">gal</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">conj</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 127169687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438255
    },
    {
        "content": "<p>lol I did it</p>",
        "id": 127169688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438257
    },
    {
        "content": "<p>nice!</p>",
        "id": 127170066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527439037
    },
    {
        "content": "<p>Did you develop any tools for proving polys of degree n have at most n roots?</p>",
        "id": 127170068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527439055
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Zalpha</span><span class=\"bp\">.</span><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">α</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- -3 +   2α</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">--  2 +  -1α</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- -1 +   1α</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">--  1 +   0α</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">--  0 +   1α</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">--  1 +   1α</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span> <span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">--  1 +   2α</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">α</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- 89 + 144α</span>\n</pre></div>",
        "id": 127171159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527441138
    },
    {
        "content": "<p>look at what I did</p>",
        "id": 127171160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527441140
    },
    {
        "content": "<blockquote>\n<p>Did you develop any tools for proving polys of degree n have at most n roots?</p>\n</blockquote>\n<p>I thought Chris is doing that</p>",
        "id": 127171161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527441147
    },
    {
        "content": "<p>Theorem (reverse mathematics): you need to use induction to prove that L(n) = F(n) + F(n-3).<br>\nProof: <a href=\"http://www.wolframalpha.com/input/?i=%28%28%CE%B1%5Ex%2B%CE%B2%5Ex%29-%28%28%CE%B1%5Ex-%CE%B2%5Ex%29%2B%28%CE%B1%5E%28x-3%29-%CE%B2%5E%28x-3%29%29%29%2Fsqrt%285%29%29+where+%CE%B1%3D%281%2Bsqrt%285%29%29%2F2%2C%CE%B2%3D%281-sqrt%285%29%29%2F2\" target=\"_blank\" title=\"http://www.wolframalpha.com/input/?i=%28%28%CE%B1%5Ex%2B%CE%B2%5Ex%29-%28%28%CE%B1%5Ex-%CE%B2%5Ex%29%2B%28%CE%B1%5E%28x-3%29-%CE%B2%5E%28x-3%29%29%29%2Fsqrt%285%29%29+where+%CE%B1%3D%281%2Bsqrt%285%29%29%2F2%2C%CE%B2%3D%281-sqrt%285%29%29%2F2\">link</a>.</p>",
        "id": 127173701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527447353
    },
    {
        "content": "<p>and if you define L(n) := F(n) + F(n-3), you would have to use induction to prove other things later</p>",
        "id": 127173791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527447534
    },
    {
        "content": "<p>how are those defined?</p>",
        "id": 127174670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527449761
    },
    {
        "content": "<p>From that plot it looks like it's not even true</p>",
        "id": 127174808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527450083
    },
    {
        "content": "<p>L(3) = 4, F(3)+F(0) = 2</p>",
        "id": 127174857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527450189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm an idiot. L(n) = 2F(n) + F(n-3).</p>",
        "id": 127176377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527453863
    },
    {
        "content": "<p>what am i doing</p>",
        "id": 127176378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527453867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> should we actually call it Zphi instead of Zalpha?</p>",
        "id": 127176388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527453926
    },
    {
        "content": "<p>Wikipedia calls its little brother psi</p>",
        "id": 127176389,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527453941
    },
    {
        "content": "<p>that one is true for the continuous extension too</p>",
        "id": 127177700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527456977
    },
    {
        "content": "<p>I call the little brother phi bar</p>",
        "id": 127177702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527456988
    },
    {
        "content": "<p>because it's the conjugate of phi</p>",
        "id": 127177703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527457001
    },
    {
        "content": "<p>they’re alpha equivalent so I don’t care ;) feel free to rename it</p>",
        "id": 127178931,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527459844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what do you think?</p>",
        "id": 127178994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527460025
    },
    {
        "content": "<p>patchily converted everything to Zalpha</p>",
        "id": 127182144,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527467294
    },
    {
        "content": "<p>I don't care about names</p>",
        "id": 127186344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527477170
    },
    {
        "content": "<p>I call things lemma 3.1</p>",
        "id": 127186347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527477178
    },
    {
        "content": "<p>What do I know about names</p>",
        "id": 127186351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527477186
    }
]