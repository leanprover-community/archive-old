[
    {
        "content": "<p>Would it be sensible and/or possible to change <code>monoid M</code> etc to be defined with an additional <code>{eqv : M → M → Prop := eq} [equivalence eqv]</code> argument, so that they can be reused for equivalences other than <code>eq</code>?</p>\n<p>Asking in the context of <a href=\"https://github.com/leanprover-community/mathlib/issues/3531\">#3531</a>, where it seems we end up rebuilding a lot of the algebra hierarchy</p>",
        "id": 204933070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595606122
    },
    {
        "content": "<p>Equality is the only relation which allows you to make substitutions, so proving all of monoid theory for relations other than equality would be a pain. If you had a relation other than <code>eq</code> you would usually just take the quotient by that relation, and prove that this quotient is a monoid. I don't understand how this is related to <a href=\"https://github.com/leanprover-community/mathlib/issues/3531\">#3531</a>.</p>",
        "id": 204933993,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595606620
    },
    {
        "content": "<p>The relevance is inductive types like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">one_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>which might be nicer to write as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">monoid</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">rel</span>\n</code></pre></div>\n\n\n<p>rather than having to repeat the definition of a monoid again.</p>\n<p>I suppose that would require some clever elaboration of mutually inductive types that probably isn't supported.</p>",
        "id": 204935263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595607293
    },
    {
        "content": "<p>I think inductive types like that are not used often enough to make it worth generalizing monoid. What may well be worth doing is writing meta code that generates that inductive relation given the definition of a monoid. </p>\n<p>One issue to consider is the fact that the inductive relation idea does not work for all type classes. For example there is no corresponding way to inductively define the analogue of your relation <code>rel</code> for fields. There has to be a mechanism to check that the intersection of relations satisfying <code>monoid.of</code> also satisfies <code>monoid.of</code>. This would not be the case for <code>field.of</code>.</p>",
        "id": 204936490,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595607958
    },
    {
        "content": "<p>Yeah, just like Chris said, this trick only works for anything coming from universal algebra.</p>",
        "id": 204940024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595609786
    },
    {
        "content": "<p>What you can do (and I've experimented with this in the past), is to have a \"monoid builder\", even without introducing any new automation.<br>\nJust take any type <code>T</code> endowed with a constant called <code>one</code> and a binary operation <code>mul</code> and construct the maximal quotient of <code>T</code> compatible with <code>mul</code>such that <code>one</code>and <code>mul</code> induce a monoid structure.</p>",
        "id": 204940694,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595610128
    },
    {
        "content": "<p>Then, if you want to construct the free monoid, say, you could apply this monoid builder construction to an inductive type like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">pre</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"n\">pre</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"n\">pre</span>\n</code></pre></div>\n\n\n<p>where one and mul are the two constants you feed into the monoid builder machine.</p>",
        "id": 204940797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595610199
    },
    {
        "content": "<p>Here's a sketch:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"n\">class</span> <span class=\"n\">raw_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">monoid_builder</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">raw_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_one</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">one_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">compatl</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">compatr</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">raw_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">monoid_builder</span>\n</code></pre></div>",
        "id": 204941596,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595610642
    },
    {
        "content": "<p>BTW: this could be useful here too: <a href=\"https://github.com/leanprover-community/mathlib/blob/47efcf3c7f7dadd98f47372c8bdcc1d220773201/src/algebra/category/Mon/colimits.lean#L66\">https://github.com/leanprover-community/mathlib/blob/47efcf3c7f7dadd98f47372c8bdcc1d220773201/src/algebra/category/Mon/colimits.lean#L66</a></p>",
        "id": 204948742,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595614264
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con/src\">src#con</a> for relations such that the quotient type has a monoid structure.</p>",
        "id": 204959428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595620534
    },
    {
        "content": "<p>Oh nice. But this (and things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con_gen.rel/src\">src#con_gen.rel</a> ) ensure that multiplication descends to the quotient, but not necessarily that it satisfies the other axioms of a monoid.</p>",
        "id": 204960665,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595621175
    },
    {
        "content": "<p>But I understand what you're saying. The <code>rel</code>from above could have been easily replaced with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">prerel</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">raw_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_one</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">one_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"n\">rel</span> <span class=\"o\">:=</span> <span class=\"n\">con_gen</span><span class=\"bp\">.</span><span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">prerel</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204960855,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595621306
    },
    {
        "content": "<p>Looking at this PR, I realise we have some cases of duplication involving these universal-algebra-constructions-via-inductive-types. It doesn't apply directly to the tensor algebras PR, but for example when we build colimits in Group, or when we build free groups, we're doing very similar things. Is there some single construction out of which both of these things fall out? I feel like this should be some elementary category theory magic, but I'm blanking on it.</p>",
        "id": 204975696,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595632465
    },
    {
        "content": "<p>Yes. Lawvere theories</p>",
        "id": 204976025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595632892
    },
    {
        "content": "<p>Forgetful functors between categories of algebras associated to morphisms of lawvere theories always have left adjoints, and they can all be constructed like this</p>",
        "id": 204976101,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595632976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315523\">@Colter MacDonald</span></p>",
        "id": 204976134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595633033
    },
    {
        "content": "<p>So that gives the free constructions. And mumble-mumble-mumble gives the construction of colimits for some value of mumble-mumble-mumble? :-)</p>",
        "id": 204976207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595633111
    },
    {
        "content": "<p>Yeah! <span class=\"user-mention\" data-user-id=\"315523\">@Colter MacDonald</span> and I have a repo where we're doing this exact thing</p>",
        "id": 204976221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595633142
    },
    {
        "content": "<p>Start PRing it. :-)</p>",
        "id": 204976223,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595633158
    },
    {
        "content": "<p>There are still some issues were working out.</p>",
        "id": 204976270,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595633174
    },
    {
        "content": "<p>(My general advice would be: work in branches of mathlib, not other repos. :-)</p>",
        "id": 204976276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595633179
    },
    {
        "content": "<p>With these general categorical frameworks the problem generally gets pushed backed to proving that the framework's version of the category is equivalent to the normal direct definition. For example, proving that the category of models of the theory of rings is equivalent to the category of rings.</p>",
        "id": 204978611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595635973
    },
    {
        "content": "<p>Yeah I agree. The main thing we're trying to solve is to make this usable in practice.</p>",
        "id": 204978640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595636028
    },
    {
        "content": "<p>If the goal is only to prove that rings (say) have colimits, then I'm pretty sure it's considerably less work to do it directly than to go through Lawvere theories (or monads etc).</p>",
        "id": 204978642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595636032
    },
    {
        "content": "<p>We didn't define Lawvere theories</p>",
        "id": 204978647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595636034
    },
    {
        "content": "<p>oh, so what do you do then?</p>",
        "id": 204978719,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595636096
    },
    {
        "content": "<p>We do thing in the classical \"universal algebra way\"</p>",
        "id": 204978735,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595636116
    },
    {
        "content": "<p>I.e. n-ary operations and universal axioms</p>",
        "id": 204978742,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595636143
    },
    {
        "content": "<p><a href=\"https://github.com/adamtopaz/UnivAlg\">https://github.com/adamtopaz/UnivAlg</a></p>",
        "id": 204978826,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595636276
    },
    {
        "content": "<p>Ignore the readme</p>",
        "id": 204978869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595636288
    },
    {
        "content": "<p>And we were a bit careless about the finite tuple stuff -- it needs to be integrated better with mathlib</p>",
        "id": 204978887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595636344
    },
    {
        "content": "<p>But the mathematical idea is that this <code>lang.gen</code> construction is essentially a monad whose algebras are exactly Lawvere theories</p>",
        "id": 204978960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595636482
    },
    {
        "content": "<p>I feel like this kinda has to merge with flypitch’s first-order-structures eventually...</p>",
        "id": 204981338,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595639905
    },
    {
        "content": "<p>As most of universal algebra uses the same basic definitions as model theory, but with languages with no relations</p>",
        "id": 204981361,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595639980
    },
    {
        "content": "<p>Agreed</p>",
        "id": 204981413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595640031
    },
    {
        "content": "<p>Does flypitch actually provide interpretations of first order theories in types?</p>",
        "id": 204981424,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595640065
    },
    {
        "content": "<p>They have a few examples</p>",
        "id": 204981469,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595640124
    },
    {
        "content": "<p>I’m not 100% sure what you mean, but if the answer is “yes”, some of it is in their file <code>abel.lean</code></p>",
        "id": 204981474,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595640158
    },
    {
        "content": "<p>I guess my question is if/how they define models of a first order theory.</p>",
        "id": 204981707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595640556
    },
    {
        "content": "<p>Ok I think I understand. They can define an interpretation of a language on a type, and then define the associated complete theory, so you can speak about models.</p>",
        "id": 204983782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595644118
    },
    {
        "content": "<p>They also have a notion of whether a structure realizes a particular sentence or set thereof (see lines starting around 1200 in <code>fol.lean</code>), but perhaps it'd be better to move most of this discussion back to the existing model theory thread.</p>",
        "id": 204986514,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595649101
    }
]