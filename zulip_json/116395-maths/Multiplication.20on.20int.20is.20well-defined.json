[
    {
        "content": "<p>In other words,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">],</span>\n  <span class=\"c1\">--uv cancels tv cancels qr cancels</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Are there better techniques for this? Note that this is all nat hell.</p>",
        "id": 202240104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593356228
    },
    {
        "content": "<p>This is what you get when you try to define multiplication on the quotient.</p>",
        "id": 202240116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593356261
    },
    {
        "content": "<p>Here's the most organized proof I can make based on your script:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_cancel</span> <span class=\"err\">$</span> <span class=\"k\">calc</span>\n      <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">h2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 202241110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593357889
    },
    {
        "content": "<p>Where is my automation? Is this hard?</p>",
        "id": 202243810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593361821
    },
    {
        "content": "<p>Aah -- it suffices to prove it for all the variables in<code>int</code>, and <code>ring</code> can do that</p>",
        "id": 202243817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593361840
    },
    {
        "content": "<p>Of course you can also coerce everything to <code>int</code> and then this is easy by <code>ring</code> but I'm assuming you don't have that</p>",
        "id": 202244609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593363128
    },
    {
        "content": "<p>The general automation for things like this is the <code>ring_rw</code> / <code>groebner</code> tactics we've been talking about</p>",
        "id": 202244637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593363201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Multiplication.20on.20int.20is.20well-defined/near/202244609\">said</a>:</p>\n<blockquote>\n<p>Of course you can also coerce everything to <code>int</code> and then this is easy by <code>ring</code> but I'm assuming you don't have that</p>\n</blockquote>\n<p><code>zify at *</code> coerces everything to <code>int</code>s, but it doesn't seem to help much in this case.</p>",
        "id": 202244862,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593363526
    },
    {
        "content": "<p>just wanted to check if the Lean community is aware of Coq's ongoing modernization of <a href=\"https://coq.inria.fr/refman/addendum/micromega.html\">Micromega</a> (<code>lia</code>, <code>nia</code>, etc., tactics)? For example, <code>lia</code> in Coq 8.11 directly solves the above goal. (<code>Finished transaction in 0.042 secs (0.034u,0.s) (successful)</code>)</p>",
        "id": 202244952,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593363632
    },
    {
        "content": "<p>Oh, <code>nlinarith</code> solves it too! (but it's kind of slow: <code>elaboration: tactic execution took 1.78s</code>.)</p>",
        "id": 202245031,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593363787
    },
    {
        "content": "<p>What sorcery is this?</p>",
        "id": 202248581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593369188
    },
    {
        "content": "<p>so why is Coq so much faster?</p>",
        "id": 202248655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593369300
    },
    {
        "content": "<p>Does the <code>lia</code> proof in Coq solve it over <code>int</code> or <code>nat</code>? Looking at that link, it seems that <code>lia</code> uses arithmetic over <code>int</code>, so it's not exactly the same problem as this one</p>",
        "id": 202248740,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593369403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> has been working on this for weeks.</p>",
        "id": 202248742,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593369404
    },
    {
        "content": "<p><code>lia</code> transforms goals with <code>nat</code>, <code>Z</code>, etc., to an abstract internal representation. The Coq <code>zify</code> tactic is modular and allows one to inject types that map into <code>Z</code>/<code>nat</code> using type classes, which allows <code>lia</code> to solve goals on them. For example, this has been done for MathComp's <code>nat</code>/<code>int</code>, which are subtly different from those in the Coq stdlib: <a href=\"https://github.com/pi8027/mczify\">https://github.com/pi8027/mczify</a></p>",
        "id": 202248972,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593369808
    },
    {
        "content": "<p>for completeness, there is also some other more general automation in Coq for similar more abstract problems: <a href=\"https://github.com/coq-community/aac-tactics\">https://github.com/coq-community/aac-tactics</a> <a href=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/ssreflect/ssrAC.v\">https://github.com/math-comp/math-comp/blob/master/mathcomp/ssreflect/ssrAC.v</a> <a href=\"https://github.com/coq-community/atbr\">https://github.com/coq-community/atbr</a> (we also have two flavors of Gröbner bases <a href=\"https://github.com/coq-community/buchberger\">https://github.com/coq-community/buchberger</a> <a href=\"https://github.com/thery/grobner\">https://github.com/thery/grobner</a>)</p>",
        "id": 202249069,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593369956
    },
    {
        "content": "<p>I'm surprised that <code>lia</code> solves this, since it doesn't look linear! <code>omega</code> is the closest Lean equivalent to <code>lia</code>, but it has a bunch of bugs and its implementer doesn't seem interested in fixing them. One of the bugs is relevant here, it doesn't atomize multiplication of variables properly. I don't know if this is in scope for <code>omega</code> even if this bug were fixed, since I don't immediately see the linear problem it should pick up.</p>",
        "id": 202296671,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593429673
    },
    {
        "content": "<p>I'm also surprised by why <code>nlinarith</code> is so slow on this. It's spending over half its time... checking whether variables are defeq, even though it's only unfolding <code>reducible</code> definitions.</p>",
        "id": 202296776,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593429764
    },
    {
        "content": "<p>for completeness, this was on Coq 8.11.2:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">Require</span> <span class=\"kn\">Import</span> <span class=\"n\">Lia</span><span class=\"o\">.</span>\n<span class=\"kn\">Lemma</span> <span class=\"n\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">q</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"n\">q</span> <span class=\"o\">*</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">*</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"n\">u</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"n\">p</span> <span class=\"o\">*</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">q</span> <span class=\"o\">*</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">*</span> <span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"n\">u</span> <span class=\"o\">*</span> <span class=\"n\">w</span><span class=\"o\">).</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n <span class=\"n\">Time</span> <span class=\"n\">lia</span><span class=\"o\">.</span>\n<span class=\"kn\">Qed</span><span class=\"o\">.</span>\n</code></pre></div>\n\n\n<p>Also perhaps of interest that Coq's <code>omega</code> is going to be deprecated in 8.12.0 in favor of <code>lia</code>.</p>",
        "id": 202302824,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593434138
    },
    {
        "content": "<p>Oh, yeah, I'm not saying I don't believe that <code>lia</code> solved it :) I tried it myself. But it means my idea of what <code>lia</code> does must be wrong.</p>",
        "id": 202303331,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593434454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> if you have any questions about the functionality/limitations of <code>lia</code>, you should reach out to <a href=\"http://people.rennes.inria.fr/Frederic.Besson/\">Frédéric Besson</a> via email (his preferred contact method from when I asked). He is the main implementer and from what I can tell drives the effort of improving <code>lia</code>/<code>zify</code>/etc.</p>",
        "id": 202311135,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593438607
    }
]