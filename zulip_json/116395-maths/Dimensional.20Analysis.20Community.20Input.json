[
    {
        "content": "<p>A recent project of mine has been formalizing <a href=\"https://en.wikipedia.org/wiki/Dimensional_analysis#Properties\">dimensional analysis</a> in Lean. So far, I am at a point where the code is better than Sympy and nearing on par or surpassing wolfram. However, I'm at a point where I'm stuck with defining addition.  To give background, I defined a new inductive type, called dimension, which has one constructor, a function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">dimension</span>\n<span class=\"bp\">|</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span>\n<span class=\"c1\">-- L → M → N → I → θ → T → J → dimension</span>\n</code></pre></div>\n<p>This corresponds to the function Q = L^a*M^b*N^c*I^d*O^e*T^f*J^g, which allows any dimension to be constructed (assuming the seven common base dimensions )<br>\nThus, length is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">length</span>               <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Defining multiplication looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>since the exponents just get added. The difficult part is addition. Two dimensions can be added together if they are the same, so we can add length, and get length + length = length. The other thing is we want addition to combine two of the same elements into one element, rather then multiply that element by two. This was done by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">h</span><span class=\"bp\">∧</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">i</span><span class=\"bp\">∧</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">j</span><span class=\"bp\">∧</span><span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"n\">k</span><span class=\"bp\">∧</span><span class=\"n\">e</span><span class=\"bp\">=</span><span class=\"n\">l</span><span class=\"bp\">∧</span><span class=\"n\">f</span><span class=\"bp\">=</span><span class=\"n\">m</span><span class=\"bp\">∧</span><span class=\"n\">g</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">dimensionless</span>\n</code></pre></div>\n<p>where dimensionless is defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dimensionless</span>        <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>In this case, dimensionless is used as a junk value that is thrown for improper addition. This definition encompasses most of the addition, but there is one more case. Adding a dimensionless number with a dimension simplifies to that dimension. So, dimensionless_number + length = length. The dimensionless number takes on the role of the identity element. For multiplication, it acts like 1 and for addition, it acts like zero. <br>\nI wanted to get feedback from the community and suggestions on how to implement this functionality. Specifically, defining addition so that the only acceptable cases are either addition of two of the same elements or an element with a dimensionless number.</p>",
        "id": 297626339,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662568325
    },
    {
        "content": "<p>Can't you just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">Q₁</span> <span class=\"n\">Q₂</span><span class=\"o\">,</span>\n     <span class=\"k\">if</span> <span class=\"n\">Q₁</span> <span class=\"bp\">=</span> <span class=\"n\">Q₂</span> <span class=\"k\">then</span> <span class=\"n\">Q₁</span>\n<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Q₁</span> <span class=\"bp\">=</span> <span class=\"n\">dimensionless</span> <span class=\"k\">then</span> <span class=\"n\">Q₂</span>\n<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Q₂</span> <span class=\"bp\">=</span> <span class=\"n\">dimensionless</span> <span class=\"k\">then</span> <span class=\"n\">Q₁</span>\n<span class=\"k\">else</span> <span class=\"n\">dimensionless</span>\n</code></pre></div>",
        "id": 297627680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662568789
    },
    {
        "content": "<p>I don't think adding a dimensionless number with one with a dimension makes sense though?<br>\nWhat is <code>2 seconds + π</code> ? Is <code>(2 seconds + π) * 1 second</code> equal to <code>6 seconds ^ 2 + π seconds</code>?</p>",
        "id": 297628694,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1662569099
    },
    {
        "content": "<p>Maybe you want to talk about <code>\\Q[length, time, ...]</code>?</p>",
        "id": 297629376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662569317
    },
    {
        "content": "<p>Or rather the corresponding <code>add_monoid_algebra</code></p>",
        "id": 297629457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662569346
    },
    {
        "content": "<p>I think <code>fin n -&gt; rat</code> might be a better approach than what you have now. Also I wouldn't restrain to the case <code>n = 7</code> since there are cases where introducing additional base units are useful.</p>",
        "id": 297630658,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1662569733
    },
    {
        "content": "<p>Another option is to effectively use <code>option dimension</code>, with <code>none</code> signalling that there is an error in the dimensional analysis.<br>\nIf you want, you can encode that as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">dimension</span>\n<span class=\"bp\">|</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">rat</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span>\n<span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span>\n</code></pre></div>\n<p>and then you have that any operation that involves a dimension error yields a dimension error. It's like a NaN for dimensions.</p>\n<p>If you make errors yield <code>dimensionless</code>, then you can get weird situations like <code>(1 second + 1 ft) * 3 kg = 6 kg</code></p>",
        "id": 297632247,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1662570278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input/near/297628694\">said</a>:</p>\n<blockquote>\n<p>I don't think adding a dimensionless number with one with a dimension makes sense though?<br>\nWhat is <code>2 seconds + π</code> ? Is <code>(2 seconds + π) * 1 second</code> equal to <code>6 seconds ^ 2 + π seconds</code>?</p>\n</blockquote>\n<p>I see the contradiction you are trying to show, but I don't think there ends up being a problem. If you had seconds*(seoncds+dimensionless) = seconds^2+seconds. If we used the addition rule, we would get seconds = seconds^2+seconds, and we could factor the right side to get seconds = seconds. We are looking at dimensional congruity. The reason I think we have to have this rule is Buckingham Pi Theorem stipulates that the dimensions form a vector field over the rational numbers. In Lean, the module definition requires the module part to be an add_comm_monoid, which requires this idea of adding an identity element.</p>",
        "id": 297633789,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662570857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input/near/297629376\">said</a>:</p>\n<blockquote>\n<p>Maybe you want to talk about <code>\\Q[length, time, ...]</code>?</p>\n</blockquote>\n<p>Could you elaborate on what the <code> \\Q[length, time, ...]</code> means? I've never used something like that in Lean before</p>",
        "id": 297634121,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662570964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input/near/297630658\">said</a>:</p>\n<blockquote>\n<p>I think <code>fin n -&gt; rat</code> might be a better approach than what you have now. Also I wouldn't restrain to the case <code>n = 7</code> since there are cases where introducing additional base units are useful.</p>\n</blockquote>\n<p>I can try out this, I see what you that its much more manageable then seven rat and arrows, but I would need to learn how to properly use <code> fin n</code> so it translate to what I've been doing so far.</p>",
        "id": 297634370,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662571059
    },
    {
        "content": "<p>I don't really get what you mean by factor out <code>seconds^2+seconds</code>. I think we both agree that adding two different dimensions (as in this expression) is meaningless?<br>\nThe dimension forms a <code>Q</code>-vector field because multiplying two dimensions corresponds to adding the exponents of each base units. The <code>Q</code>-action refers to taking powers. There is no \"addition of dimensions\" involved, and there should be no need to adjoin an identity: the <code>dimensionless</code> is already a multiplicative identity.</p>",
        "id": 297635763,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1662571503
    },
    {
        "content": "<p>Yes, I see the contradictions that could form. I'm not trying to advocate for adding two different dimensions. The problem I'm having is showing that this <code>Q</code>-vector field exists. Using the module class that Lean already defines requires that dimension be an <code>add_comm_monoid</code>, which requires the idea of a zero element and adding the identity element. Plus, to use the definitions of the basis vectors requires this same property as well as being a <code>module</code>. I could just define a vector space and basis vectors and such without these requirements, but I didn't think this would be necessary and I could just use the <code>module</code> class already definined</p>",
        "id": 297638185,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662572274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input/near/297635763\">said</a>:</p>\n<blockquote>\n<p>I don't really get what you mean by factor out <code>seconds^2+seconds</code>. I think we both agree that adding two different dimensions (as in this expression) is meaningless?<br>\nThe dimension forms a <code>Q</code>-vector space because multiplying two dimensions corresponds to adding the exponents of each base units. The <code>Q</code>-action refers to taking powers. There is no \"addition of dimensions\" involved, and there should be no need to adjoin an identity: the <code>dimensionless</code> is already a multiplicative identity.</p>\n</blockquote>\n<p>However, doesn't it mean that if dimension forms a <code>Q</code> - vector space, then dimension must be an additive abelian group?</p>",
        "id": 297639117,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662572603
    },
    {
        "content": "<p>The <code>add_comm_monoid</code> is given by realizing each dimension as a <code>n</code>-tuple of exponents, and adding each exponent correspondingly. This in turn corresponds to <strong>multiplication</strong> of the dimensions and not the <strong>addition</strong> of the dimension.</p>",
        "id": 297639281,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1662572650
    },
    {
        "content": "<p>By modeling dimensions as <code>fin n -&gt; rat</code>, this vector space structure will come for free.</p>",
        "id": 297639685,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1662572781
    },
    {
        "content": "<p>Ok, just had the break thought I needed. Thank you so much, that clears things up. I think that was the blockade that was confusing me, but I'm now on the same page. Thank you for your time and help! After I finish class, I'm going to try this out</p>",
        "id": 297639707,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662572789
    },
    {
        "content": "<p>Ok, that's perfect. I'll try that out tonight</p>",
        "id": 297639744,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662572803
    },
    {
        "content": "<p>Since dimension is more the analog of a \"type\" of a physical quantity, would including the dimension information at the type level help here?</p>\n<p>What I had in mind is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">physical_quantity</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n</code></pre></div>\n<p>where this inductive type either has no constructors, or has a single constructor for introducing a \"value\".</p>\n<p>This way the problem of type-safe addition of physical quantities can be delegated to Lean.</p>",
        "id": 297643270,
        "sender_full_name": "Anand Rao",
        "timestamp": 1662573137
    },
    {
        "content": "<p>I would suggest using a <code>structure</code> instead of a plain <code>inductive</code> to be able to index into each base through keywords</p>",
        "id": 297651049,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1662575907
    },
    {
        "content": "<p>I think I can already do that with <code>inductive</code> though. Since, I can use <code>def</code> to define the seven base dimensions</p>",
        "id": 297656708,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1662577953
    },
    {
        "content": "<p>This got me interested how to do dimensional analysis in Lean 4, I also got into a <a href=\"#narrow/stream/270676-lean4/topic/dimensional.20analysis.20and.20arithmetic.20in.20type\">problem with addition</a></p>\n<p>To me it seems you are not making the distinction between the unit itself and a value that has a unit. I would say you can't add units but you can add values with the same units. </p>\n<p>Also I would argue that the unit checking should be done on the type checking level i.e. I do not like that adding two different units produce a junk value. I think such addition should be disallowed by the type system.</p>",
        "id": 297948629,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662721443
    },
    {
        "content": "<p>what if two units are propeq but not defeq? would seem like a pain</p>",
        "id": 297949065,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662721629
    },
    {
        "content": "<p>What about just using formal series? Then you can add two values with different units without junk values.</p>",
        "id": 297949248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662721683
    },
    {
        "content": "<p>Yes that is exactly the problem I got into :/</p>",
        "id": 297949251,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662721684
    },
    {
        "content": "<p>also maybe it's worth to have physical quantity just be <code>fin n -&gt; rat</code> or something, because that way a) you can reuse API b) you can add random units that maybe don't exist but are useful theoretically or exclude units you don't care about at the time</p>",
        "id": 297949282,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662721700
    },
    {
        "content": "<p><code>fin 7 -&gt; rat</code> also makes sense</p>",
        "id": 297949299,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662721708
    },
    {
        "content": "<p>multiplication should then come automatically from <code>pi.has_mul</code>, addition would need a specific definition but</p>",
        "id": 297949386,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662721751
    },
    {
        "content": "<p>The <code>fin n -&gt; rat</code> would be used for the unit not a quantity(value + unit), right?</p>",
        "id": 297950475,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662722245
    },
    {
        "content": "<p>yea</p>",
        "id": 297957369,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662725076
    },
    {
        "content": "<p>Why would you need multiplication on that type then?</p>",
        "id": 297958897,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662725669
    },
    {
        "content": "<p>meters squared * per seconds for example</p>",
        "id": 297959646,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662725910
    },
    {
        "content": "<p>When do <code>rat</code>-valued powers of units show up? (I only ever studied physics in high school...)</p>",
        "id": 297960112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662726068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input/near/297959646\">said</a>:</p>\n<blockquote>\n<p>meters squared * per seconds for example</p>\n</blockquote>\n<p>Maybe I'm misunderstanding something , but then you are adding or subtracting the powers: <code>m^1 * m^1 * s^(-1) = m^(1+1) * s^(-1)</code>, no?</p>",
        "id": 297963958,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662727355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input/near/297960112\">said</a>:</p>\n<blockquote>\n<p>When do <code>rat</code>-valued powers of units show up? (I only ever studied physics in high school...)</p>\n</blockquote>\n<p><a href=\"https://physics.stackexchange.com/questions/350121/what-is-the-unit-dimension-of-the-3-dimensional-position-space-wavefunction\">Wave functions in quantum mechanics</a></p>",
        "id": 297963989,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1662727371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input/near/297963958\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input/near/297959646\">said</a>:</p>\n<blockquote>\n<p>meters squared * per seconds for example</p>\n</blockquote>\n<p>Maybe I'm misunderstanding something , but then you are adding or subtracting the powers: <code>m^1 * m^1 * s^(-1) = m^(1+1) * s^(-1)</code>, no?</p>\n</blockquote>\n<p>ahh, sure, you definitely have to take care with the multiplication. sorry!</p>",
        "id": 297965810,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662728027
    },
    {
        "content": "<p>Now I'm thinking about it. A unit should be <code>fin n -&gt; rat × rat</code>, it needs scaling and power.</p>\n<p>For example this should be expressible: <code>feet * km = 0,3048 m * 1000 m = 306,8 m^2</code>. So we need multiplication in the first(scale) component and addition in the second(power).</p>",
        "id": 297976432,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662731210
    },
    {
        "content": "<p>I don't think we should focus on units rather than dimensions. And I don't think we should care about adding or multiplying concrete physical quantities since we would like the results to cover arbitrary transcendental functions. In particular, If a function <code>f : (fin n -&gt; real) -&gt; real</code> whose arguments have dimensions <code>d : fin n -&gt; dimension</code> scales like some <code>d' : dimension</code> under the scalings induced by <code>d</code> on <code>fin n -&gt; real</code>, it should be considered \"physically meaningful\" with dimension <code>d'</code> and our result should apply on it.</p>",
        "id": 297982156,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1662732552
    },
    {
        "content": "<p>Makes sense, I guess it depends what is the application. My interest in this is to write code that prevents another Mars Climate Orbiter crash :)</p>",
        "id": 297984836,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662733409
    },
    {
        "content": "<p>Does the defeq problem actually come up? It seems quite unusual for your dimensions not to be known constants rather than free variables</p>",
        "id": 298139564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662818003
    },
    {
        "content": "<p>In my Lean 4 <a href=\"#narrow/stream/270676-lean4/topic/dimensional.20analysis.20and.20arithmetic.20in.20type\">attempt</a> the defeq problem definitely comes up. For example 'meter per second' times 'second' is not defeq to meter, or at least I don't know how to make it so.</p>",
        "id": 298147247,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662821965
    },
    {
        "content": "<p>I don't see how that could be the case, that sounds like claiming that <code>{s := -1 + 1, m := 1}</code> is not defeq to <code>{s := 0, m := 1}</code></p>",
        "id": 298180717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662846043
    },
    {
        "content": "<p>It looks like your problem in that thread is that lean is not attempting to unify the types and check if they're defeq</p>",
        "id": 298180742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662846071
    },
    {
        "content": "<p>And instead is using typeclass inference to match syntactically</p>",
        "id": 298180752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662846091
    },
    {
        "content": "<p>Ohh I see, that makes sense. Well, it looks like that I do not understand defeq properly.</p>",
        "id": 298186876,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662852539
    },
    {
        "content": "<p>I don't know what the solution to your issue is though; I think this is a problem that Lean 3 solves by only having homogenous multiplication, which forces lean to unify the two types into a single defeq type</p>",
        "id": 298187973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662853752
    }
]