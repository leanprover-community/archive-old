[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">HP1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HP2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HP3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">HP4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ih</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">iha</span> <span class=\"n\">ihb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">HP1</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- goal P 1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">HP2</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- goal P a⁻¹</span>\n    <span class=\"n\">exact</span> <span class=\"n\">HP3</span> <span class=\"n\">a</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- goal P (a * b)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">HP4</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">iha</span> <span class=\"n\">ihb</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>All the goals are multiplicative.</p>",
        "id": 160388815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552174280
    },
    {
        "content": "<p>In real life I have much more complex goals, and I just failed to use mul_one to deal with <code>v * 1</code> and then I realised that it might be any of <code>mul_zero</code>, <code>add_one</code> or <code>add_zero</code></p>",
        "id": 160388852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552174322
    },
    {
        "content": "<p>turned out it was <code>mul_zero</code></p>",
        "id": 160388868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552174336
    },
    {
        "content": "<p>does <code>add_group.closure</code> have a defined recursor?</p>",
        "id": 160389018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552174610
    },
    {
        "content": "<p><code>in_closure.rec_on</code></p>",
        "id": 160389028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552174651
    },
    {
        "content": "<p>this is all XXX's fault of not allowing variable operation</p>",
        "id": 160389171,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552174901
    }
]