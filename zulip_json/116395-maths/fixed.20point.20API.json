[
    {
        "content": "<p>Building on Sébastien's <a href=\"https://github.com/leanprover-community/mathlib/pull/788\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/788\">https://github.com/leanprover-community/mathlib/pull/788</a> I propose an API for the Banach fixed point theorem that would look like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">metric</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric</span> <span class=\"n\">filter</span>\n<span class=\"n\">def</span> <span class=\"n\">fixed_point</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"err\">$</span> <span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">at_top</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fixed_point_fixed</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">fixed_point</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fixed_point</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">α</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">cauchy_seq_of_le_geometric</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x₀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">))</span> <span class=\"n\">hK</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">iterate_succ</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">iterate</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">cauchy_seq_tendsto_of_complete</span> <span class=\"n\">this</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">fxx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">fixed_point_of_tendsto_iterate</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_continuous</span><span class=\"bp\">.</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fixed_point</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top_ne_bot</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">lim_spec</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">fxx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fixed_point_spec</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fixed_point</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lipschitz_with</span><span class=\"bp\">.</span><span class=\"n\">fixed_point_unique_of_contraction</span> <span class=\"n\">hK</span> <span class=\"n\">hf</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">fixed_point_fixed</span> <span class=\"n\">hK</span> <span class=\"n\">hf</span><span class=\"o\">),</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">fixed_point_fixed</span> <span class=\"n\">hK</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">metric</span>\n</pre></div>\n\n\n<p>What do you think? Do you have nicer names? Nicer proofs? An even better API?</p>",
        "id": 159956411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551737872
    },
    {
        "content": "<p>Sample use (which motivated this API):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">banach_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lipschitz_with_translate</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lipschitz_with</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">hu</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">dist_eq_norm</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">x&#39;</span><span class=\"err\">∥</span>        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span>  <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">dist_eq_norm</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span>         <span class=\"o\">:</span> <span class=\"n\">hu</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The inverse of `id - u` -/</span>\n<span class=\"n\">def</span> <span class=\"n\">lipschitz_global_inverse</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">fixed_point</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">lipschitz_global_inverse</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">lipschitz_with</span> <span class=\"n\">classical</span> <span class=\"n\">metric</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">banach_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">hK</span> <span class=\"n\">hu</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_inverse</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lipschitz_global_inverse</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">inverse_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">fixed_point</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">fixed_point_spec</span> <span class=\"n\">hK</span> <span class=\"o\">(</span><span class=\"n\">lipschitz_with_translate</span> <span class=\"n\">hu</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">eq_sub_of_add_eq</span>  <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">lipschitz_global_inverse</span>\n</pre></div>",
        "id": 159958356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551739527
    },
    {
        "content": "<p><code>fixed_point_spec</code> should be called either <code>fixed_point_unique</code> or <code>apply_eq_self_iff_eq_fixed_point</code></p>",
        "id": 159958838,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551739958
    },
    {
        "content": "<p>You should define <code>fixed_point</code> in a more general setting, removing all the type classes except <code>nonempty α</code> and choosing a fixed point if there is one and something arbitrary otherwise (using <code>epsilon</code>). This definition will be useful in many different settings!</p>",
        "id": 159985995,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551775475
    },
    {
        "content": "<p>I was also thinking this in my bed last night. I'll try it</p>",
        "id": 159986038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551775536
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">open</span><span class=\"w\"> </span><span class=\"n\">classical</span><span class=\"w\"></span>\n<span class=\"n\">variables</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">Type</span><span class=\"o\">*</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">nonempty</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">fixed_point</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">epsilon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">fixed_point_spec</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fixed_point</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fixed_point</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"n\">epsilon_spec</span><span class=\"w\"> </span><span class=\"err\">⟨</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"err\">⟩</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Done</p>",
        "id": 159986790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551776310
    },
    {
        "content": "<p>And it works even better in the application to Banach fixed point</p>",
        "id": 159986831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551776382
    }
]