[
    {
        "content": "<p>Why does this not work? Also, <code>library_search</code> and <code>suggest</code> don't work here either... </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_Ioo</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n</code></pre></div>",
        "id": 203200708,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594154826
    },
    {
        "content": "<p>Am I using these things correctly?</p>",
        "id": 203200776,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594154881
    },
    {
        "content": "<p><code>apply</code> is misbehaving</p>",
        "id": 203200862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154916
    },
    {
        "content": "<p>messing up tc search</p>",
        "id": 203200883,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154931
    },
    {
        "content": "<p>Try <code>exact</code></p>",
        "id": 203200901,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154944
    },
    {
        "content": "<p>(or refine)</p>",
        "id": 203200943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154963
    },
    {
        "content": "<p>Weird, I'm on a version of mathlib from today</p>",
        "id": 203200946,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594154965
    },
    {
        "content": "<p>It's more frustrating that library search didn't work, I had to go searching through topology/algebra to find this name</p>",
        "id": 203200992,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594154998
    },
    {
        "content": "<p>Everybody is. Who would want to be lagging so much?</p>",
        "id": 203201039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155003
    },
    {
        "content": "<p>So this isn't the recent apply bug that got fixed?</p>",
        "id": 203201070,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594155022
    },
    {
        "content": "<p>It doesn't seem to be.</p>",
        "id": 203201420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155191
    },
    {
        "content": "<p>I tried pretty hard but I haven't been able to reproduce this bug outside mathlib. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you have anything to say about</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span>  <span class=\"bp\">@</span><span class=\"n\">is_open_Ioo</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- apply is_open_Ioo, -- fails</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_open_Ioo</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203208847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594159268
    },
    {
        "content": "<p>This is the usual apply bug</p>",
        "id": 203216166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594164865
    },
    {
        "content": "<p>openness for a subset of <code>real</code> is presumably a Pi type of some kind</p>",
        "id": 203216197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594164915
    },
    {
        "content": "<p>There's also</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">topological_space</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"err\">⊓</span> <span class=\"n\">Q</span> <span class=\"bp\">≤</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">topological_space</span>\n</code></pre></div>",
        "id": 203217283,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594165835
    },
    {
        "content": "<p>again <code>refine</code> works but <code>apply</code> doesn't</p>",
        "id": 203217289,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594165841
    },
    {
        "content": "<p>same issue</p>",
        "id": 203217319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594165874
    },
    {
        "content": "<p>and same, without the <code>real</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"err\">⊓</span> <span class=\"n\">Q</span> <span class=\"bp\">≤</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">topological_space</span>\n</code></pre></div>",
        "id": 203217367,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594165917
    },
    {
        "content": "<p>same issue, it doesn't have anything to do with <code>real</code></p>",
        "id": 203217559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594166125
    },
    {
        "content": "<p>Oh so it's that openness for a subset in general is a Pi type, not just for the usual topology on R?</p>",
        "id": 203217611,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594166162
    },
    {
        "content": "<p>no, it's precisely because openness in general is <em>not</em> a Pi type</p>",
        "id": 203217632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594166185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/open.20subset.20of.20the.20reals/near/203216197\">said</a>:</p>\n<blockquote>\n<p>openness for a subset of <code>real</code> is presumably a Pi type of some kind</p>\n</blockquote>\n<p>am I misreading this then?</p>",
        "id": 203217644,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594166205
    },
    {
        "content": "<p>it happens when specializing the lemma to the relevant type(s) causes it to grow more <code>-&gt;</code>s in its type, usually because of a type class instance</p>",
        "id": 203217648,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594166218
    },
    {
        "content": "<p>openness in general is not a Pi type, it's a field of a variable (<code>topology</code>)</p>",
        "id": 203217668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594166239
    },
    {
        "content": "<p>but in the topology on <code>real</code> (and lots of other specific examples) that field is defined as a Pi type</p>",
        "id": 203217686,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594166255
    },
    {
        "content": "<p>same for <code>&lt;=</code> versus subset which is a Pi type</p>",
        "id": 203217695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594166267
    },
    {
        "content": "<p>the standard workaround seems to be <code>apply' is_open_Ioo,</code></p>",
        "id": 203232213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594185304
    }
]