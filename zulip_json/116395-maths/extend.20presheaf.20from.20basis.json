[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Somehow this is not doing what I hoped:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaves</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">examples</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùí±</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùí±</span>\n\n<span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_topological_basis</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">B</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"o\">((</span><span class=\"n\">full_subcategory_embedding</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">U&#39;</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">U&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">map&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 135529957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539164390
    },
    {
        "content": "<p>The embedding is complaining about universes. I don't get why.</p>",
        "id": 135530007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539164407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I'm just guessing here, but there are universe constraints in taking limits.</p>",
        "id": 135530180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539164613
    },
    {
        "content": "<p>I don't know anything about your errors but even seeing that you're daring to write this sort of code -- \"extending a presheaf from a basis might be possible\" -- makes me quite excited for the future.</p>",
        "id": 135530263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539164649
    },
    {
        "content": "<p>In particular, the index category is meant to be a category.{v v}, and the target category is meant to be a category.{u v}.</p>",
        "id": 135530292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539164673
    },
    {
        "content": "<p>If you don't satisfy those constraints to begin with, you're going to have to ulift.</p>",
        "id": 135530306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539164693
    },
    {
        "content": "<p>Me too, by the way --- I'm very excited to see things like this work!</p>",
        "id": 135530319,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539164713
    },
    {
        "content": "<p>But it is looking for some <code>Type w</code>. I really don't know where it is getting that from?</p>",
        "id": 135530322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539164720
    },
    {
        "content": "<p>Do you have comma categories somewhere?</p>",
        "id": 135530326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539164728
    },
    {
        "content": "<p>One thing which might be obvious to everyone already is that of course when you extend, you don't literally \"extend\", you define a new object on all open sets, and its values on basic open sets are isomorphic to, but not defeq to, the values taken by the old object.</p>",
        "id": 135530327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539164728
    },
    {
        "content": "<p>I just want the category of opens contained in <code>U</code>.</p>",
        "id": 135530330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539164741
    },
    {
        "content": "<p>Maybe you already have this somewhere...</p>",
        "id": 135530334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539164750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Do you want me to include the scare-quotes in the definition <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span> ?</p>",
        "id": 135530386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539164794
    },
    {
        "content": "<p>I am just being reminded of the nightmares I had when doing sheaves by hand in the schemes project.</p>",
        "id": 135530402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539164841
    },
    {
        "content": "<p>Sorry, I will try to look at this soon. I'm working on installation instructions, still. :-)</p>",
        "id": 135531230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539165991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , is that code available somewhere? I'd like to look at the universe issue.</p>",
        "id": 135531457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539166315
    },
    {
        "content": "<p>(universes scare the bejeebus out of me, and I'm perpetually terrified that someone is going to discover I've still got them wrong in the category theory library)</p>",
        "id": 135531508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539166384
    },
    {
        "content": "<p>You have made V a category.{v w} which means you can only form limits of size w</p>",
        "id": 135531525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539166425
    },
    {
        "content": "<p>(phew, that's Reid agreeing with me... my heart rate is dropping again. :-)</p>",
        "id": 135531577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539166474
    },
    {
        "content": "<p>Hmmm, let me take another look.<br>\n<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> All the code I have is what I posted above.</p>",
        "id": 135532719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539168113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I still don't get what is wrong with my code.</p>",
        "id": 135533061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539168536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Here is a snippet that is probably useful for <code>over.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">over</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùíû</span>\n\n<span class=\"n\">def</span> <span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">Z</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">map&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">over</span>\n</pre></div>",
        "id": 135533127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539168612
    },
    {
        "content": "<p>Thanks, I added <code>over.forget</code>.</p>",
        "id": 135533245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539168798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Ok, so I should take <code>X : Top.{w}</code>. It is important that I don't take <code>Top.{u}</code>. Can you explain why?</p>",
        "id": 135533671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539169417
    },
    {
        "content": "<blockquote>\n<p>Reid Barton: You have made V a category.{v w} which means you can only form limits of size w</p>\n</blockquote>",
        "id": 135533722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539169471
    },
    {
        "content": "<p>Ok... I don't think I care too much. It is a bit tricky to get right. I wouldn't mind if Lean just scaled everything into the right universe. But I guess that brings some tradeoff in foundations that I don't understand.</p>",
        "id": 135533800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539169615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> May we <em>please</em> have presheaves be contravariant. My head is breaking without the <code>op</code>s.</p>",
        "id": 135534835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539171012
    },
    {
        "content": "<p>no problem</p>",
        "id": 135534843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539171039
    },
    {
        "content": "<p>We need to make a PR to mathlib to fix this, right?</p>",
        "id": 135534855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539171066
    },
    {
        "content": "<p>No, presheaves aren't in mathlib</p>",
        "id": 135534862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539171079
    },
    {
        "content": "<p>Or did you break the definition of <code>open_set</code>?</p>",
        "id": 135534868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539171093
    },
    {
        "content": "<p>Yes :-)</p>",
        "id": 135534920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539171129
    },
    {
        "content": "<p>Aaah, ok. Hmmz.</p>",
        "id": 135534931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539171154
    },
    {
        "content": "<p>Well... yes. Then we need a PR.</p>",
        "id": 135534940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539171174
    },
    {
        "content": "<p>Regarding automating the copy-and-paste: I really doubt this can work in most of my cases here, where the rewrites are occurring in auto_params for structure fields.</p>",
        "id": 135534954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539171201
    },
    {
        "content": "<p>The tactic <code>obviously</code> doesn't even appear.</p>",
        "id": 135534963,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539171215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm stuck on</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">‚ä¢</span> <span class=\"o\">(</span><span class=\"n\">U‚ÇÅ</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">U‚ÇÇ</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U‚ÇÅ</span><span class=\"bp\">.</span><span class=\"n\">s</span>\n</pre></div>\n\n\n<p>After that we have extended presheaves.</p>",
        "id": 135535588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539171920
    },
    {
        "content": "<p>That goal looks like very trivial. But I don't know how to extract the inclusion from the hom.</p>",
        "id": 135535607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539171956
    },
    {
        "content": "<p>try <code>intro</code>, then <code>cases</code>?</p>",
        "id": 135535652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539171973
    },
    {
        "content": "<p>Aah <code>cases</code>.</p>",
        "id": 135535661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539171992
    },
    {
        "content": "<p>or commit something I can poke at</p>",
        "id": 135535664,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539171997
    },
    {
        "content": "<p>remember that hom there is probably some ulift plift gadget</p>",
        "id": 135535697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539172067
    },
    {
        "content": "<p>to turn a Prop into a Type at whatever universe you're living in</p>",
        "id": 135535704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539172081
    },
    {
        "content": "<p>Right, it's working now. Except that it couldn't figure out <code>comp'</code> on its own <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 135535763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539172133
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaves</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">examples</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">extend</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùí±</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùí±</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_topological_basis</span> <span class=\"o\">((</span><span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">B</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"o\">((</span><span class=\"n\">full_subcategory_embedding</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">U&#39;</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">U&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">map&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span>\n    <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_embedding</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">U&#39;</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">U&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_embedding</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">U&#39;</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">U&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U‚ÇÅ</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n      <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"bp\">_</span> <span class=\"bp\">‚ü®</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_‚ü©</span> <span class=\"err\">‚â´</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Œπ</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">ùüô</span> <span class=\"bp\">_</span> <span class=\"o\">}</span> <span class=\"kn\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">extend</span>\n</pre></div>",
        "id": 135535779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539172150
    },
    {
        "content": "<p>Perhaps giving a name to <code>full_subcategory_embedding ...</code> will make this look nicer.</p>",
        "id": 135537106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539173952
    },
    {
        "content": "<p>I'd be curious to see that goals after <code>tidy</code> on <code>comp'</code>.</p>",
        "id": 135537134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539173993
    },
    {
        "content": "<p>I wonder if we need some extra help for posets here.</p>",
        "id": 135537207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539174055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Here is what I have now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaves</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">examples</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">under_set</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">under_set</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">U&#39;</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">U&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">under_set</span> <span class=\"n\">B</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">under_set</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">under_set</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"err\">‚•§</span> <span class=\"n\">under_set</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">Œπ</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">map&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">U&#39;</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"o\">:</span> <span class=\"n\">under_set</span> <span class=\"n\">B</span> <span class=\"n\">U</span> <span class=\"err\">‚•§</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">full_subcategory_embedding</span> <span class=\"o\">(</span><span class=\"n\">under_set</span> <span class=\"n\">B</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">under_set</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">extend</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùí±</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùí±</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_topological_basis</span> <span class=\"o\">((</span><span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">B</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"o\">((</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">map&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span>\n    <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">((</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span> <span class=\"o\">((</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÅ</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n      <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"bp\">_</span> <span class=\"bp\">‚ü®</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">Œπ</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">‚ü©</span> <span class=\"err\">‚â´</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n       <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">extend</span>\n</pre></div>",
        "id": 135537749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539174742
    },
    {
        "content": "<p>Goal is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"err\">ùí±</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">,</span>\n<span class=\"n\">j_val_val</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">j_val_property</span> <span class=\"o\">:</span> <span class=\"n\">j_val_val</span> <span class=\"err\">‚àà</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">j_property</span> <span class=\"o\">:</span> <span class=\"bp\">‚ü®</span><span class=\"n\">j_val_val</span><span class=\"o\">,</span> <span class=\"n\">j_val_property</span><span class=\"bp\">‚ü©</span> <span class=\"err\">‚àà</span> <span class=\"n\">under_set</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">,</span>\n<span class=\"n\">j&#39;_val_val</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">j&#39;_val_property</span> <span class=\"o\">:</span> <span class=\"n\">j&#39;_val_val</span> <span class=\"err\">‚àà</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">j&#39;_property</span> <span class=\"o\">:</span> <span class=\"bp\">‚ü®</span><span class=\"n\">j&#39;_val_val</span><span class=\"o\">,</span> <span class=\"n\">j&#39;_val_property</span><span class=\"bp\">‚ü©</span> <span class=\"err\">‚àà</span> <span class=\"n\">under_set</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j_val_val</span> <span class=\"bp\">‚â§</span> <span class=\"n\">j&#39;_val_val</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">j_val_val</span><span class=\"o\">,</span> <span class=\"n\">j_val_property</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span> <span class=\"err\">‚â´</span>\n      <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">down</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">down</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">}})</span> <span class=\"bp\">=</span>\n    <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">j&#39;_val_val</span><span class=\"o\">,</span> <span class=\"n\">j&#39;_val_property</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span>\n</pre></div>",
        "id": 135537756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539174760
    },
    {
        "content": "<p>Here is a version where the auto_param gets the job done:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">B</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"o\">((</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">map&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">B</span> <span class=\"n\">Œπ</span> <span class=\"err\">‚ãô</span> <span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n      <span class=\"k\">by</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"o\">((</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÅ</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">B</span> <span class=\"n\">Œπ</span><span class=\"o\">),</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 135542499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539179687
    },
    {
        "content": "<p>I still don't like the <code>rw show</code>, but I don't know how to get rid of it.</p>",
        "id": 135542532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539179713
    },
    {
        "content": "<p>Don't we have a gentleman agreement that any use of Scott's category theory must begin with a local notation reintroducing the proper composition symbol everywhere?</p>",
        "id": 135542709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539179878
    },
    {
        "content": "<p><span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span> I didn't think about it. Sorry...</p>",
        "id": 135543280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539180447
    },
    {
        "content": "<p>And we now have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"err\">Œì</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w‚ÇÅ</span> <span class=\"n\">w‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">C</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">extend_val</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">B</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Œì</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">limit</span> <span class=\"o\">((</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">extend_val_basic_open</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">B</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Œì</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚âÖ</span> <span class=\"err\">Œì</span> <span class=\"n\">U</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">extend_val</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">‚ü®</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"err\">Œì</span> <span class=\"n\">U</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U&#39;</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"n\">U&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 135546628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539183063
    },
    {
        "content": "<p>That latter thing is really slow )-; But I don't see how to speed it up.</p>",
        "id": 135546669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539183120
    },
    {
        "content": "<p>Lots of proofs are provided in the background</p>",
        "id": 135546721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539183146
    },
    {
        "content": "<blockquote>\n<p>elaboration: tactic execution took 16.8s<br>\nnum. allocated objects:  146<br>\nnum. allocated closures: 146<br>\n16762ms   100.0%   tactic.seq<br>\n16762ms   100.0%   tactic.step<br>\n16762ms   100.0%   tactic.istep._lambda_1<br>\n16762ms   100.0%   tactic.istep<br>\n16762ms   100.0%   scope_trace<br>\n16762ms   100.0%   interaction_monad.monad._lambda_9<br>\n16759ms   100.0%   all_goals_core<br>\n16759ms   100.0%   tactic.interactive.exact<br>\n16759ms   100.0%   _private.3346078393.all_goals_core._main._lambda_2<br>\n16759ms   100.0%   tactic.all_goals<br>\n16756ms   100.0%   tactic.to_expr<br>\n    3ms     0.0%   rw_core<br>\n    3ms     0.0%   tactic.exact<br>\n    3ms     0.0%   _private.3200700535.rw_goal._lambda_4<br>\n    3ms     0.0%   _private.3200700535.rw_goal._lambda_2<br>\n    3ms     0.0%   interaction_monad.orelse'<br>\n    3ms     0.0%   tactic.rewrite_target<br>\n    3ms     0.0%   interactive.loc.apply<br>\n    3ms     0.0%   tactic.interactive.propagate_tags<br>\n    3ms     0.0%   _interaction._lambda_2<br>\n    2ms     0.0%   tactic.rewrite<br>\n    2ms     0.0%   tactic.rewrite_core<br>\n    1ms     0.0%   tactic.replace_target<br>\n    1ms     0.0%   tactic.mk_eq_mpr</p>\n</blockquote>",
        "id": 135546842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539183257
    },
    {
        "content": "<p>The next step would be to define sheaves on a basis, and show that their extensions are sheaves on the space.</p>",
        "id": 135558576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539195391
    },
    {
        "content": "<p>I have the vague feeling that maybe we just want a general statement about sites.</p>",
        "id": 135558620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539195444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you know if the inclusion of a basis <code>B</code> into <code>open_set X</code> is some sort of geometric morphism?</p>",
        "id": 135558749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539195593
    },
    {
        "content": "<p>If so, then I'dd rather just start attacking the general case...</p>",
        "id": 135558814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539195628
    },
    {
        "content": "<p>I've never learned these topos theory words</p>",
        "id": 135559318,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196142
    },
    {
        "content": "<p>It seems that the answer might be yes... so now we want topos theory in mathlib <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 135559476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Did you ever do things with Kan extensions in your library?</p>",
        "id": 135559723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196517
    },
    {
        "content": "<p>Nope, near the top of my list for post-colimits.</p>",
        "id": 135559838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196624
    },
    {
        "content": "<p>Ok... cool. How close do you think this is to being mathlib-ready?</p>",
        "id": 135559851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196655
    },
    {
        "content": "<p>Which?</p>",
        "id": 135559913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196695
    },
    {
        "content": "<p>Kan extensions</p>",
        "id": 135559924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196711
    },
    {
        "content": "<p>Oh, I haven't actually started on them at all yet.</p>",
        "id": 135559937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196730
    },
    {
        "content": "<p>If Scott's limit and colimit stuff is in mathlib. Would that be a follow-up PR? Or would you need other stuff before that?</p>",
        "id": 135559940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196741
    },
    {
        "content": "<p>Are you going to need general Kan extensions? Or just extending a functor on C to presheaves on C</p>",
        "id": 135560032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196810
    },
    {
        "content": "<p>The latter is good enough</p>",
        "id": 135560067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196857
    },
    {
        "content": "<p>I see. We may want adjunctions, too.</p>",
        "id": 135560069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196860
    },
    {
        "content": "<p>We do</p>",
        "id": 135560073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196866
    },
    {
        "content": "<p>But I guess that will be the third PR that Scott has on his list (-;</p>",
        "id": 135560089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196883
    },
    {
        "content": "<p>In order to state the characterization of Kan extension as left adjoint to restriction</p>",
        "id": 135560110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196914
    },
    {
        "content": "<p>I guess we can define them without that though</p>",
        "id": 135560152,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196929
    },
    {
        "content": "<p>:plane: but should be back online in not too long</p>",
        "id": 135560168,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539196954
    },
    {
        "content": "<p>Good luck!</p>",
        "id": 135560185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539196978
    },
    {
        "content": "<blockquote>\n<p>Nope, near the top of my list for post-colimits.</p>\n</blockquote>\n<p>What about formalizing what you told us about reflective subcategory?</p>",
        "id": 135561537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Hmmm, a topological basis doesn't give a site. You don't have intersections = products. So the generalisation doesn't apply. Too bad.</p>",
        "id": 135561999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539198667
    },
    {
        "content": "<p>Reflective subcategories are in the same bulleted list in my notes. I forget which one is listed first :)</p>",
        "id": 135562984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539199669
    },
    {
        "content": "<p>Perfectoid spaces vote for reflexive subcategories first</p>",
        "id": 135563212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199880
    },
    {
        "content": "<blockquote>\n<p>Aah <code>cases</code>.</p>\n</blockquote>\n<p>You needed that for that <code>option</code> question yesterday too. It works for any inductive type.</p>",
        "id": 135567536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539204881
    },
    {
        "content": "<p>Hmm, your profiling output is not very helpful, because everything is hidden behind the <code>to_expr</code> that <code>exact</code> is calling.</p>",
        "id": 135572559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539210951
    },
    {
        "content": "<p>Is it possible to make another lemma for the <code>exact</code>?</p>",
        "id": 135572563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539210961
    },
    {
        "content": "<p>(Also, this is fabulous.)</p>",
        "id": 135572602,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539210970
    },
    {
        "content": "<p>I've been really busy over the last couple of days -- but have you (<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ) just extended a presheaf from a basis and then shown that the restriction back to the basis is isomorphic to the original presheaf, in about 10 lines? Heh, I guess you should really have shown that the restriction was isomorphic as a presheaf on the basis to F ;-) But still -- who cares if it's slow, it's a small number of lines and that feels right to a mathematician.</p>",
        "id": 135572927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539211453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I finally looked at your actual code (too many missing Unicode characters on my phone to be practical) and I think you can use something called <code>limit.pre</code> or similar to simplify your <code>extend</code> even further.<br>\nIf you have a diagram <code>X : J -&gt; C</code> and a functor <code>F : I -&gt; J</code> then you get an induced map <code>lim_I X -&gt; lim_J (X \\o F)</code> and this map is called <code>limit.pre</code>.<br>\nIf you have a map <code>a -&gt; b</code> in <code>C</code> then you get a functor <code>C/a -&gt; C/b</code> and I think your <code>extend</code> is <code>limit.pre</code> of this functor.</p>",
        "id": 135583396,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539228281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'm sorry, I think you have been looking at old code. The new code already uses <code>limit.pre</code>: <a href=\"https://github.com/jcommelin/lean-perfectoid-spaces/blob/huber_tate/src/for_mathlib/presheaves.lean\" target=\"_blank\" title=\"https://github.com/jcommelin/lean-perfectoid-spaces/blob/huber_tate/src/for_mathlib/presheaves.lean\">https://github.com/jcommelin/lean-perfectoid-spaces/blob/huber_tate/src/for_mathlib/presheaves.lean</a></p>",
        "id": 135584496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539230455
    },
    {
        "content": "<p>It isn't as nice as I wish. I would like to get rid of the ugly <code>rw, congr, exact</code>.</p>",
        "id": 135584509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539230493
    },
    {
        "content": "<p>Ah, I see. I think maybe I missed the <code>limit.pre</code> in there, indeed</p>",
        "id": 135584558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539230568
    },
    {
        "content": "<p>I guess <code>convert</code> might be slightly better?</p>",
        "id": 135584570,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539230585
    },
    {
        "content": "<p>change <code>exact</code> to <code>convert</code> and move it first, then see what happens?</p>",
        "id": 135584573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539230596
    },
    {
        "content": "<p>I'm a little confused how <code>congr</code> proved something without producing any new goals</p>",
        "id": 135584578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539230631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, I did. Isn't it delightful? But proving that the extension of a sheaf is a sheaf will be a lot harder.</p>",
        "id": 135584579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539230634
    },
    {
        "content": "<blockquote>\n<p>change <code>exact</code> to <code>convert</code> and move it first, then see what happens?</p>\n</blockquote>\n<p>I think that didn't work: deterministic timeout or something.</p>",
        "id": 135584624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539230665
    },
    {
        "content": "<p>In some sense it was really brittle.</p>",
        "id": 135584627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539230677
    },
    {
        "content": "<p>Odd</p>",
        "id": 135584637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539230709
    },
    {
        "content": "<p>That file doens't need anything from the perfectoid project. So if you want to hack on it, you can just copy-paste it.</p>",
        "id": 135584645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539230742
    },
    {
        "content": "<p>Of course you need Scott's libs</p>",
        "id": 135584814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539231003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I was able to replace the whole <code>map'</code> field by</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">map&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"o\">((</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">B</span> <span class=\"n\">U‚ÇÅ</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">under_set</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">B</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Everything is quite slow in the editor, I believe because there are errors in the imports (stuff under <code>category_theory.limits</code>)</p>",
        "id": 135619434,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539274873
    },
    {
        "content": "<p>Cool! Thanks a lot. Somehow I think I got deterministic timeouts when I tried that. Maybe it is related to the errors in the imports that you mentioned.</p>",
        "id": 135629183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539285094
    },
    {
        "content": "<p>My understanding is that <code>lean --make</code> doesn't write out <code>.olean</code> files when the build was unsuccessful, which means if your imports have errors then lean in the editor will be much slower.</p>",
        "id": 135629306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539285228
    },
    {
        "content": "<p>It looks like the errors are rather trivial in this case (some tactics failed because there were no goals remaining) but I didn't try to just fix them because they are in lean-category-theory</p>",
        "id": 135629362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539285253
    },
    {
        "content": "<p>Ok, now it worked for me as well.</p>",
        "id": 135659126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539328720
    },
    {
        "content": "<p>I think the following is pretty ugly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_topological_basis</span> <span class=\"o\">((</span><span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Does this mean that I should define <code>is_basis</code> for <code>B</code> directly? It feels like duplicating a lot of stuff. Is this the curse of bundling?</p>",
        "id": 135813243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539588434
    },
    {
        "content": "<p>I don't understand what you are trying to do</p>",
        "id": 135813787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539589279
    },
    {
        "content": "<p>I'm trying to say that a collection of open sets is a basis. But the open sets are bundled.</p>",
        "id": 135813797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539589318
    },
    {
        "content": "<p>I guess you can write <code>open_set.s</code> instead of the lambda</p>",
        "id": 135813997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539589606
    },
    {
        "content": "<p>Ok, and would that be the <em>morally correct</em> way? Or should I \"develop the theory of a basis of bundled open sets\"?</p>",
        "id": 135814020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539589673
    },
    {
        "content": "<p>I'm not sure if you want the forward image or preimage yet, but I think this is what you want</p>",
        "id": 135814069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539589715
    },
    {
        "content": "<p>Well, you could redefine <code>is_basis</code> for a set of opens, right? Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">\\</span><span class=\"k\">forall</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">U</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">U&#39;</span> <span class=\"err\">‚àà</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">U&#39;</span> <span class=\"bp\">‚àß</span> <span class=\"n\">U&#39;</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U</span>\n</pre></div>",
        "id": 135814235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539589974
    },
    {
        "content": "<p>I would define <code>open_set.is_basis</code> using the image formulation, and then prove that version as a theorem</p>",
        "id": 135814375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539590170
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 135814380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539590192
    },
    {
        "content": "<p>also that's not the right condition</p>",
        "id": 135814394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539590246
    },
    {
        "content": "<p>the exists is satisfied by <code>U</code></p>",
        "id": 135814398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539590257
    },
    {
        "content": "<p>No, <code>U</code> is not <code>‚àà B</code>. (In general.)</p>",
        "id": 135814450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539590289
    },
    {
        "content": "<p>oh... but what about intersections?</p>",
        "id": 135814452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539590307
    },
    {
        "content": "<p>What's with them?</p>",
        "id": 135814458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539590324
    },
    {
        "content": "<p>a basis should be closed under intersection (ish)</p>",
        "id": 135814475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539590347
    },
    {
        "content": "<p>Oooo... maybe. I'll see when I start proving things (-;</p>",
        "id": 135814486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539590390
    },
    {
        "content": "<p>This just says B covers the space</p>",
        "id": 135814491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539590401
    },
    {
        "content": "<p>It says that <code>B</code> covers every open.</p>",
        "id": 135814542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539590418
    },
    {
        "content": "<p>oh, actually I think you have the intersection property then</p>",
        "id": 135814567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539590465
    },
    {
        "content": "<p>if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi><mo separator=\"true\">,</mo><mi>V</mi><mo>‚àà</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">U, V \\in B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span><span class=\"mrel\">‚àà</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>‚àà</mo><mi>U</mi><mo>‚à©</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">x \\in U \\cap V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">‚àà</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mbin\">‚à©</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi><mo>‚à©</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">U\\cap V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mbin\">‚à©</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is open so you can find <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>‚àà</mo><mi>W</mi><mo>‚àà</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">x\\in W\\in B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">‚àà</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">W</span><span class=\"mrel\">‚àà</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>W</mi><mo>‚äÜ</mo><mi>U</mi><mo>‚à©</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">W\\subseteq U\\cap V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">W</span><span class=\"mrel\">‚äÜ</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mbin\">‚à©</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span></p>",
        "id": 135814672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539590541
    },
    {
        "content": "<p>That looks good, right?</p>",
        "id": 135814712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539590608
    },
    {
        "content": "<p>yeah</p>",
        "id": 135815120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539591160
    },
    {
        "content": "<p>actually now I recall Kevin saying that this was the obvious definition and he was confused by mathlib's</p>",
        "id": 135815128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539591188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Proving that the two definitions are equivalent is a major headache. I feel like we are missing an induction principle for generated topologies. But maybe it is <em>me</em> who is missing it.</p>",
        "id": 135826125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539605343
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- set.lean</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">‚ãÉ‚ÇÄ</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">110</span> <span class=\"o\">:=</span> <span class=\"n\">sUnion</span>\n</pre></div>\n\n\n<p>Does this mean that we can't use <code>‚ãÉ‚ÇÄ</code> to take the union of <code>Us : set (open_set X)</code>? Or can/should I overload notation?</p>",
        "id": 135826813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539606115
    },
    {
        "content": "<p>I would expect that this notation is meaningful for every type that has a union-operator.</p>",
        "id": 135827571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539606988
    },
    {
        "content": "<p>try it wthout 0?</p>",
        "id": 135828259,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539607893
    },
    {
        "content": "<p>That gives a weird error: <code>invalid expression starting at 27:51</code></p>",
        "id": 135828350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539607987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> How is this supposed to work? I tried</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">is_basis_iff‚ÇÅ</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">is_basis</span> <span class=\"n\">B</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">Us</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"err\">‚ãÉ</span> <span class=\"n\">U&#39;</span> <span class=\"err\">‚àà</span> <span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"n\">U&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Clearly this is not what Lean wants to see...</p>",
        "id": 135828554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539608259
    },
    {
        "content": "<p>you need : not \\in</p>",
        "id": 135828610,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539608289
    },
    {
        "content": "<p>and it‚Äôs called bUnion</p>",
        "id": 135828619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539608305
    },
    {
        "content": "<p>Right, so for this we need a lattice structure on <code>open_set</code>. Which we will need at some point anyway.</p>",
        "id": 135828914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539608629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I know you are busy. Just posting this in case you have a couple of minutes where you are bored <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">examples</span><span class=\"bp\">.</span><span class=\"n\">topological_spaces</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">tactics</span><span class=\"bp\">.</span><span class=\"n\">obviously</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">examples</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">open_set</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">back</span><span class=\"o\">]</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_open_inter</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">back</span><span class=\"o\">]</span> <span class=\"n\">is_open_union</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">back</span><span class=\"o\">]</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">is_open</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inter</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inter</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"err\">‚à©</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">obviously</span> <span class=\"bp\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"err\">‚à™</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">obviously</span> <span class=\"bp\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span>\n  <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">has_union</span><span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"o\">,</span>\n  <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">has_inter</span><span class=\"bp\">.</span><span class=\"n\">inter</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÅ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÇ</span><span class=\"bp\">;</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_left</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÅ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_right</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sup_le</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_left</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_inf</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">preorder</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tidy</span>\n</pre></div>\n\n\n<p>What incantations do I need to get <code>tidy</code> up to speed?</p>",
        "id": 135837316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539615797
    },
    {
        "content": "<p>I guess you need the rules how <code>union</code> and <code>intersection</code> behave under <code>subset</code>, like <code>set.subset_union_left</code>. So try add this as <code>back</code>.</p>",
        "id": 135837545,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539616031
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, I see a galois insertion...</p>",
        "id": 135839090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539617485
    },
    {
        "content": "<p>Do we have an emoji for galois insertion</p>",
        "id": 135839344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539617720
    },
    {
        "content": "<p>Thanks, I'll try that tomorrow.</p>",
        "id": 135839838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539618223
    },
    {
        "content": "<blockquote>\n<p>Do we have an emoji for galois insertion</p>\n</blockquote>\n<p>So we need to choose one, right? People should vote on Reid's question.</p>",
        "id": 135842162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539620492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I implemented Johannes suggestion. Now I have the following bunch of code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">examples</span><span class=\"bp\">.</span><span class=\"n\">topological_spaces</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">tactics</span><span class=\"bp\">.</span><span class=\"n\">obviously</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">examples</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">open_set</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">back</span><span class=\"o\">]</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_open_inter</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">back</span><span class=\"o\">]</span> <span class=\"n\">is_open_union</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">back</span><span class=\"o\">]</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">is_open</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">back</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_union_left</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">back</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_union_right</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inter</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inter</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"err\">‚à©</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">obviously</span> <span class=\"bp\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"err\">‚à™</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">obviously</span> <span class=\"bp\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">has_union</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">has_union</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span>\n  <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">has_union</span><span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"o\">,</span>\n  <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">has_inter</span><span class=\"bp\">.</span><span class=\"n\">inter</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÅ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÇ</span><span class=\"bp\">;</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_left</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_right</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÅ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sup_le</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_left</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_inf</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">preorder</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tidy</span>\n</pre></div>",
        "id": 135881584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539672342
    },
    {
        "content": "<p>The <code>tidy</code> in the proof of <code>le_sup_left</code> leaves me with the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">Œ±</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"n\">a_1</span> <span class=\"err\">‚àà</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">s</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">a_1</span> <span class=\"err\">‚àà</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">‚à®</span> <span class=\"n\">a_1</span> <span class=\"err\">‚àà</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">s</span>\n</pre></div>",
        "id": 135881631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539672399
    },
    {
        "content": "<p>Ooh wait! Does this mean that I have to mark <code>or.inl</code> with <code>[back!]</code> or something like that?</p>",
        "id": 135881644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539672437
    },
    {
        "content": "<p>Does <code>@[simp] instance : has_union (open_set X)</code> do the same as <code>attribute [simp] open_set.has_union.equations._eqn_1</code>?</p>",
        "id": 135881646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539672442
    },
    {
        "content": "<p>or.inl is not a good <code>back!</code> lemma</p>",
        "id": 135881700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672567
    },
    {
        "content": "<p>Hmmm, why not?</p>",
        "id": 135881711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539672598
    },
    {
        "content": "<p>because it will try to prove everything by the left disjunct</p>",
        "id": 135881757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672612
    },
    {
        "content": "<p>Only if the assumptions are satisfied, right?</p>",
        "id": 135881760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539672626
    },
    {
        "content": "<p>not with the <code>!</code></p>",
        "id": 135881761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672634
    },
    {
        "content": "<p>I think <code>simp</code> should work</p>",
        "id": 135881768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672656
    },
    {
        "content": "<p>because it will turn the goal into <code>true \\/ ...</code> and then <code>true</code></p>",
        "id": 135881773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672673
    },
    {
        "content": "<p>Well, it doesn't. Because <code>tidy</code> would try that.</p>",
        "id": 135881774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539672681
    },
    {
        "content": "<p>did you see if <code>simp * at *</code> works by hand?</p>",
        "id": 135881775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672703
    },
    {
        "content": "<p>what about <code>simp *</code>?</p>",
        "id": 135881777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672709
    },
    {
        "content": "<p>Ok, that works. Is that a bug in <code>tidy</code>?</p>",
        "id": 135881838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539672809
    },
    {
        "content": "<p>or a bug in <code>simp * at *</code></p>",
        "id": 135881911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672951
    },
    {
        "content": "<p>wait, which is \"that\"</p>",
        "id": 135881952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539672972
    },
    {
        "content": "<p>I have a very unclear idea about what all these things like <code>tidy</code> and <code>obviously</code> and <code>backwards_reasoning</code> do. It seems to me that they \"all do the same thing\" -- they just \"try a bunch of stuff like simp and split and stuff\". Does <code>tidy</code> have a sufficiently formal specification that one can ask if there is a \"bug\" in it? Do you actually mean \"let's make <code>tidy</code> try more stuff\"?</p>",
        "id": 135881966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539673046
    },
    {
        "content": "<p><code>back</code> has a \"spec\", but you are right about the others</p>",
        "id": 135881994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673083
    },
    {
        "content": "<p><code>obviously</code> is <code>tidy</code> + <code>rewrite_search</code></p>",
        "id": 135882015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673096
    },
    {
        "content": "<p>which is that graph thing that Keeley Hoek did</p>",
        "id": 135882019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673115
    },
    {
        "content": "<p><code>simp *</code> worked. I would imagine that <code>tidy</code> should try that as well. Of course it is not a bug in the strict sense; but I meant a \"bug\" in the sense that it would be a nice feature to add to <code>tidy</code>.</p>",
        "id": 135882029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539673155
    },
    {
        "content": "<p><code>tidy</code> is just a kitchen sink tactic right now, although I understand it is loosely based on the Gowers-Ganesalingam prover</p>",
        "id": 135882030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673167
    },
    {
        "content": "<p>I'm struggling with finding  a statement that type checks. I just proved that <code>open_set X</code> has a lattice structure. Now I want to take a union of a bunch of opens. What should I tell Lean to make sense of this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">is_basis_iff‚ÇÅ</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">is_basis</span> <span class=\"n\">B</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">Us</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"err\">‚ãÉ</span> <span class=\"n\">U&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"n\">U&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 135882245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539673501
    },
    {
        "content": "<p>Currently it doesn't like the <code>‚ãÉ</code> symbol.</p>",
        "id": 135882253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539673517
    },
    {
        "content": "<p>use the sup symbol</p>",
        "id": 135882319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673640
    },
    {
        "content": "<p>Isn't there <code>union</code> and <code>Union</code> and <code>bUnion</code> and <code>sUnion</code> or something? Usage depends on whether you're taking a union of two things, or a set of things, or a type of things etc. One of them is that big union symbol -- aren't there other notations too though? I can never remember which is which here.</p>",
        "id": 135882321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539673646
    },
    {
        "content": "<p>most of the union/inter notation is specific to <code>set</code></p>",
        "id": 135882324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673680
    },
    {
        "content": "<p>the generic version is <code>Sup</code> and <code>Inf</code></p>",
        "id": 135882364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673692
    },
    {
        "content": "<p>Ok, I see. So for everything else we want to use lattice notation?</p>",
        "id": 135882367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539673710
    },
    {
        "content": "<p>yes</p>",
        "id": 135882369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673715
    },
    {
        "content": "<p>And turning something into a lattice doesn't automatically give you a <code>has_Sup</code>. Is that on purpose?<br>\nI don't know anything about lattices.</p>",
        "id": 135882385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539673766
    },
    {
        "content": "<blockquote>\n<p><code> ‚àÉ Us ‚äÜ set B, </code></p>\n</blockquote>\n<p>what should this mean?</p>",
        "id": 135882386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673768
    },
    {
        "content": "<p>a complete lattice, not a lattice</p>",
        "id": 135882393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673783
    },
    {
        "content": "<p>That there is a bunch of basic opens such that...</p>",
        "id": 135882394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539673784
    },
    {
        "content": "<p>lattice just gives you binary sup</p>",
        "id": 135882398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673795
    },
    {
        "content": "<p>Ok, so I should prove that <code>open_set</code> is a complete lattice.</p>",
        "id": 135882399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539673798
    },
    {
        "content": "<p>yes</p>",
        "id": 135882437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673804
    },
    {
        "content": "<p>again, galois insertion should make it easy</p>",
        "id": 135882443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539673816
    },
    {
        "content": "<p>I propose <span class=\"emoji emoji-1f504\" title=\"return\">:return:</span> for galois connections and adjunctions. I don't understand the <span class=\"emoji emoji-1f3c0\" title=\"basketball\">:basketball:</span> symbol. Maybe it's because I'm Dutch <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 135882525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539673974
    },
    {
        "content": "<p>Ok, I have no idea what boilerplate I should write for that Galois insertion. What is the best way to find this out?</p>",
        "id": 135882544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539674014
    },
    {
        "content": "<p>you need a pair of functions with a galois connection, from the complete lattice to the type you want a complete lattice structure on, and one round trip should be the identity</p>",
        "id": 135882677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539674174
    },
    {
        "content": "<p>The basketball was the only emoji I found which looked like anything being inserted into anything, that's all</p>",
        "id": 135882881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539674517
    },
    {
        "content": "<p>I didn't even look for an emoji of something being connected to something</p>",
        "id": 135882927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539674561
    },
    {
        "content": "<p>Ok, so one of the maps is <code>open_set.s</code> and the other is ?? the interior? Or the smallest open containing some set <code>S</code>?</p>",
        "id": 135882938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539674588
    },
    {
        "content": "<p>interior, certainly</p>",
        "id": 135882948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539674635
    },
    {
        "content": "<p>Brainfart, that doesn't even make sense. So it should be the interior.</p>",
        "id": 135882949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539674636
    },
    {
        "content": "<p>actually I'm a bit worried you will end up the wrong way around, i.e. you will get the <code>u</code> function being injective instead of the <code>l</code> function</p>",
        "id": 135883011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539674716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> How do you want to do galois coinsertions?</p>",
        "id": 135883021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539674737
    },
    {
        "content": "<p>Ok, so <code>l = interior</code> and <code>u = open_set.s</code>. Is this good or bad news for our complete_lattice?</p>",
        "id": 135883518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539675473
    },
    {
        "content": "<p>try to prove galois insertion?</p>",
        "id": 135883614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539675592
    },
    {
        "content": "<p>Oops, I switched <code>l</code> and <code>u</code>. I still find those names confusing... Ok, so it is going to be a <code>coinsertion</code>.</p>",
        "id": 135883814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539675861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is the Galois connection enough to get the complete lattice structure? Or do I need to work out <code>galois_coinsertion</code> first? I really don't know the maths here.</p>",
        "id": 135884099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539676206
    },
    {
        "content": "<p>the insertion is important</p>",
        "id": 135884124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676226
    },
    {
        "content": "<p>it is basically making an order embedding</p>",
        "id": 135884128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676240
    },
    {
        "content": "<p>and you pull the relation back along that</p>",
        "id": 135884134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676251
    },
    {
        "content": "<p>You mean coinsertion?</p>",
        "id": 135884143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539676258
    },
    {
        "content": "<p>that too</p>",
        "id": 135884151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676264
    },
    {
        "content": "<p>Hmmm, I will try to dualize all the stuff about <code>insertion</code>s.</p>",
        "id": 135884171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539676293
    },
    {
        "content": "<p>it should work just as well, it will just pull a lattice from left to right instead of right to left</p>",
        "id": 135884173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676298
    },
    {
        "content": "<p>or vice versa</p>",
        "id": 135884175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676305
    },
    {
        "content": "<p>you know, just put co everywhere</p>",
        "id": 135884179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676315
    },
    {
        "content": "<p>look into how it is done for <code>filter</code>. Here I use <code>dual_order</code> to get the other way round</p>",
        "id": 135884238,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539676368
    },
    {
        "content": "<p>I was just about to suggest that</p>",
        "id": 135884245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676381
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">gi_generate</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">galois_insertion</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">generate</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">sets</span>\n</pre></div>",
        "id": 135884258,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539676414
    },
    {
        "content": "<p>but filter is dualized on only one side</p>",
        "id": 135884260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676417
    },
    {
        "content": "<p>I guess a coinsertion is dualized on both sides</p>",
        "id": 135884275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676442
    },
    {
        "content": "<p>is it enough to add <code>order_dual</code> on both sides?</p>",
        "id": 135884308,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539676445
    },
    {
        "content": "<p>I wonder whether we want a separate definition though since otherwise the names will be even more confusing than they already are</p>",
        "id": 135884341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676481
    },
    {
        "content": "<p>plus <code>galois_coinsertion</code> should extend <code>galois_connection</code> with no duals</p>",
        "id": 135884361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676523
    },
    {
        "content": "<p>do we know that <code>galois_connection</code> is self-dual?</p>",
        "id": 135884413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539676571
    },
    {
        "content": "<p>to its symmetric form:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"kn\">lemma</span> <span class=\"n\">dual</span> <span class=\"o\">[</span><span class=\"n\">pŒ±</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pŒ≤</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">galois_connection</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>",
        "id": 135884424,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539676593
    },
    {
        "content": "<p>in <a href=\"https://github.com/leanprover/mathlib/blob/master/order/galois_connection.lean#L160\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/order/galois_connection.lean#L160\">https://github.com/leanprover/mathlib/blob/master/order/galois_connection.lean#L160</a></p>",
        "id": 135884427,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539676606
    },
    {
        "content": "<p>then it should just be called <code>galois_nnection</code></p>",
        "id": 135884663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539676906
    },
    {
        "content": "<p>it's shorter</p>",
        "id": 135884719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539676927
    },
    {
        "content": "<p>Aaahrg, all those design decisions. Is there a choice procedure for such design decisions?<br>\nI think we should make the same choice as for the <code>limit</code> vs <code>colimit</code> story in category theory.</p>",
        "id": 135884777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539677028
    },
    {
        "content": "<p>So we just copy-paste all the code and dualize it. Right?</p>",
        "id": 135884833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539677049
    },
    {
        "content": "<p>[or write a tactic which generates the code for you...]</p>",
        "id": 135884837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539677067
    },
    {
        "content": "<p>usually you copy all statements from the Galois insertion anyway. I don't see a problem to use a Galois insertion and <code>dual_order</code> twice. You only want to use it to get the complete lattice, afterwards you don't care anymore.</p>",
        "id": 135884873,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539677118
    },
    {
        "content": "<p>Ok, now I've got</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">interior</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_interior</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">interior</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">interior_maximal</span> <span class=\"n\">h</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">is_open</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"n\">interior_subset</span><span class=\"bp\">‚ü©</span>\n\n<span class=\"n\">def</span> <span class=\"n\">gco</span> <span class=\"o\">:</span> <span class=\"n\">galois_coinsertion</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">interior</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">choice</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">interior</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">gc</span> <span class=\"o\">:=</span> <span class=\"n\">gc</span><span class=\"o\">,</span>\n  <span class=\"n\">u_l_le</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">interior_subset</span><span class=\"o\">,</span>\n  <span class=\"n\">choice_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÅ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÇ</span><span class=\"bp\">;</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n   <span class=\"bp\">..</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">preorder</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">galois_coinsertion</span><span class=\"bp\">.</span><span class=\"n\">lift_complete_lattice</span> <span class=\"n\">gco</span>\n\n<span class=\"n\">def</span> <span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_univ</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I guess that this definition of <code>univ</code> is not correct? Should it be a theorem about <code>‚ä§</code> somehow?</p>",
        "id": 135887809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539680800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> Those <code>order_dual</code>s are completely blowing up my brain. Does this look good or am I missing something?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">interior</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_interior</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">interior</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">interior_maximal</span> <span class=\"n\">h</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">is_open</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"n\">interior_subset</span><span class=\"bp\">‚ü©</span>\n\n<span class=\"n\">def</span> <span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">galois_insertion</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">choice</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">interior</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">gc</span> <span class=\"o\">:=</span> <span class=\"n\">galois_connection</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">gc</span><span class=\"o\">,</span>\n  <span class=\"n\">le_l_u</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">interior_subset</span><span class=\"o\">,</span>\n  <span class=\"n\">choice_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÅ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÇ</span><span class=\"bp\">;</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n   <span class=\"bp\">..</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">preorder</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">galois_insertion</span><span class=\"bp\">.</span><span class=\"n\">lift_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">gi</span>\n</pre></div>",
        "id": 135894415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539689907
    },
    {
        "content": "<p>looks good to me. Is there something wrong?</p>",
        "id": 135894662,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539690346
    },
    {
        "content": "<p>Yes, I'm getting the dual order.</p>",
        "id": 135894967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539690741
    },
    {
        "content": "<p>So now I need a function that takes an order, and flips it around.</p>",
        "id": 135894982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539690785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> Is there a way to unfold something only once?</p>",
        "id": 135895221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539691110
    },
    {
        "content": "<p>hm, <code>rw [h] {occs := occurrences.pos [1]}</code> is the only thing I know</p>",
        "id": 135895354,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539691280
    },
    {
        "content": "<p>for the dual, lets take a look at filters again:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">original_complete_lattice</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">order_dual</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">gi_generate</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift_complete_lattice</span>\n</pre></div>",
        "id": 135895452,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539691414
    },
    {
        "content": "<p>I hacked around it like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">order_dual</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">galois_insertion</span><span class=\"bp\">.</span><span class=\"n\">lift_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">gi</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">order_dual_order_dual</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">))),</span>\n  <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">order_dual_order_dual</span> <span class=\"n\">at</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foo</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> I am not so sure that the coinsertions are useless. This is causing me quite some pain...</p>",
        "id": 135895460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539691434
    },
    {
        "content": "<p><code>order_dual.lattice.complete_lattice</code> does what you want</p>",
        "id": 135895503,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539691454
    },
    {
        "content": "<p>and it doesn't have the <code>rw</code> problem</p>",
        "id": 135895514,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539691486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> I don't see how to apply it. It can only put orders on <code>order_dual _</code>, it can't go the other way.</p>",
        "id": 135895594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539691585
    },
    {
        "content": "<p>you are sure it doesn't work? <code>preorder (order_dual (order_dual A)) = preorder A</code> should be (in your case) by definition</p>",
        "id": 135895688,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539691753
    },
    {
        "content": "<p>can you put your theory on a gist?</p>",
        "id": 135895698,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539691777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> Voila: <a href=\"https://gist.github.com/jcommelin/c9d04b7770f89a0fadc11aae5ca90d87\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/c9d04b7770f89a0fadc11aae5ca90d87\">https://gist.github.com/jcommelin/c9d04b7770f89a0fadc11aae5ca90d87</a><br>\nThis is what I have so far.</p>",
        "id": 135896091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539692230
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U‚ÇÅ</span> <span class=\"n\">U‚ÇÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÅ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">U‚ÇÇ</span><span class=\"bp\">;</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n   <span class=\"bp\">..</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">preorder</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">order_dual</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">galois_insertion</span><span class=\"bp\">.</span><span class=\"n\">lift_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">gi</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>now you have the dual</p>",
        "id": 135896557,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539692840
    },
    {
        "content": "<p>is this what you want?</p>",
        "id": 135896558,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539692845
    },
    {
        "content": "<p>I think it is. Let me try.</p>",
        "id": 135896566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539692869
    },
    {
        "content": "<p>But this still isn't proved by <code>rfl</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">Lub_s</span> <span class=\"o\">{</span><span class=\"n\">Us</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">‚®Ü</span> <span class=\"n\">U</span> <span class=\"err\">‚àà</span> <span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">‚ãÉ‚ÇÄ</span> <span class=\"o\">(</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>And I think that with coinsertions it could have been <code>rfl</code>, right?</p>",
        "id": 135896627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539692956
    },
    {
        "content": "<p>only if you setup <code>choice</code> correctly</p>",
        "id": 135896694,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539693019
    },
    {
        "content": "<p>and this is also with insertion a <code>rfl</code></p>",
        "id": 135896728,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539693100
    },
    {
        "content": "<p>so, no <code>coinsertion</code> doesn't give you a rfl by default. It will only be a <code>rfl</code> when you use the proof in <code>choice</code> to construct <code>rfl</code> data. And since <code>insertion</code> and <code>coinsertion</code> are just dual, it works also with insertion.</p>",
        "id": 135896788,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539693166
    },
    {
        "content": "<p>So what you need to do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">galois_insertion</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">choice</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">interior</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">gc</span> <span class=\"o\">:=</span> <span class=\"n\">galois_connection</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">gc</span><span class=\"o\">,</span>\n  <span class=\"n\">le_l_u</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">interior_subset</span><span class=\"o\">,</span>\n  <span class=\"n\">choice_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Instead of <code>choice := Œª s _, interior s,</code> you need to write something like:<br>\n<code>choice := Œª s _, (s, proof that s is open),</code></p>",
        "id": 135896817,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539693223
    },
    {
        "content": "<p>Huuh, but <code>s</code> isn't open.</p>",
        "id": 135896890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539693300
    },
    {
        "content": "<p>yes it is, the <code>_</code> is actually a proof from which you can show that it is open</p>",
        "id": 135896917,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539693343
    },
    {
        "content": "<p>it says: <code>interior s = s</code></p>",
        "id": 135896964,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539693377
    },
    {
        "content": "<p>then you also need to adapt your <code>choice_eq</code> proof accordingly</p>",
        "id": 135896994,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539693433
    },
    {
        "content": "<p>Ok, I see. I'll try to do this.</p>",
        "id": 135897076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539693530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> Sorry, but the following still doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">Us</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 135897497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539694059
    },
    {
        "content": "<p>you should get:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">Us</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">‚®Ü</span><span class=\"n\">a</span><span class=\"err\">‚àà</span><span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 135898099,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539694775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> That gives me</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kn\">constant</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</pre></div>\n\n\n<p>I now have the following ugly proof myself:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">Sup_s</span> <span class=\"o\">{</span><span class=\"n\">Us</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">Us</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">‚ãÉ‚ÇÄ</span> <span class=\"o\">(</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">galois_connection</span><span class=\"bp\">.</span><span class=\"n\">l_Sup</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">gc</span><span class=\"o\">)</span> <span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sUnion_image</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 135898427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539695104
    },
    {
        "content": "<p>what about <code>have foo : (Sup Us).s = (‚®Üa‚ààUs, open_set.s a) := rfl</code></p>",
        "id": 135898448,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539695139
    },
    {
        "content": "<p>Still fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">Us</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">‚®Ü</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">s</span>\n</pre></div>",
        "id": 135898745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539695449
    },
    {
        "content": "<p>how does your <code>gi</code> look like?</p>",
        "id": 135898976,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539695762
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">galois_insertion</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">choice</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">interior_eq_iff_open</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"err\">$</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">interior_subset</span> <span class=\"n\">hs</span> <span class=\"o\">},</span>\n  <span class=\"n\">gc</span> <span class=\"o\">:=</span> <span class=\"n\">galois_connection</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">gc</span><span class=\"o\">,</span>\n  <span class=\"n\">le_l_u</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">interior_subset</span><span class=\"o\">,</span>\n  <span class=\"n\">choice_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">interior_subset</span> <span class=\"n\">hs</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 135899032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539695842
    },
    {
        "content": "<p>hm</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n</pre></div>\n\n\n<p>somewhere <code>set</code> gets unfolded and the <code>pi</code> instance is used. Then we get different <code>Sup</code> and <code>Inf</code>.</p>",
        "id": 135900200,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539696984
    },
    {
        "content": "<p>Kudos to the individual who came up with <span class=\"emoji emoji-1f52b\" title=\"gun\">:gun:</span> for Galois insertion btw</p>",
        "id": 135900203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539696990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> Hmmm... I think I'm giving up on debugging this. It is too annoying. If you feel like debugging it, I haven't made much progress since my gist.</p>",
        "id": 135900316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539697086
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">order_dual</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">galois_insertion</span><span class=\"bp\">.</span><span class=\"n\">lift_complete_lattice</span>\n    <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">gi</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Sup_s</span> <span class=\"o\">{</span><span class=\"n\">Us</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">Us</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">‚®Ü</span><span class=\"n\">s</span><span class=\"err\">‚àà</span><span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"n\">open_set</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>this works</p>",
        "id": 135900464,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539697231
    },
    {
        "content": "<p><code>(order_dual (set _))</code> is already enough. Then the elaborator finds the right instance, instead of the instance for <code>X -&gt; Prop</code></p>",
        "id": 135900784,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1539697565
    },
    {
        "content": "<p>Ok, so my instance is wrong... hmmzzz. Thanks for finding this bug!</p>",
        "id": 135900908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539697717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  Thanks, after trying to teach myself some lean on the side and lurking here a lot without doing anything I'm glad someone found my first \"contribution\" as funny as I did</p>",
        "id": 135907294,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1539703521
    },
    {
        "content": "<blockquote>\n<p>then it should just be called <code>galois_nnection</code></p>\n</blockquote>\n<p>or a cogalois-nnection (sorry)</p>",
        "id": 135958522,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1539766197
    }
]