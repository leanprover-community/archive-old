[
    {
        "content": "<p>There is an instance to say that a product family groups is a group, but I couldn't find functions <br>\nthat create group morphisms from that group to other groups, such as :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod.commprod_map</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">finset.prod</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n<span class=\"n\">map_one'</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_const_one</span><span class=\"o\">],</span>\n<span class=\"n\">map_mul'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">],</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod.noncomm_prod_map</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">commute</span> <span class=\"o\">((</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">φ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">hφ'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">commute</span> <span class=\"o\">((</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">φ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))):</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">finset.noncomm_prod</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">hφ</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n<span class=\"n\">map_one'</span>  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.noncomm_prod_eq_pow_card</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_pow</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">map_mul'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.noncomm_prod_mul_distrib</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hφ'</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Should I have looked better? Should I make a PR (with some other similar functions) ?<br>\n(is the universal property already somewhere ?)</p>",
        "id": 299572895,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663596938
    },
    {
        "content": "<p>I think the name would involve <code>pi</code>, not <code>prod</code> if we had it. I looked in <code>algebra/group/pi</code>, which is where I would expect it to be, but it doesn't seem to be there. So, as far as I can tell, we don't have it, but perhaps someone who knows the algebra part of the library  better will correct me.</p>",
        "id": 299574054,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663597386
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.eval_monoid_hom\">docs#pi.eval_monoid_hom</a> what you are looking for?</p>",
        "id": 299574522,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663597531
    },
    {
        "content": "<p>That's not into a different group, that's just projection onto one of the factors.</p>",
        "id": 299574799,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663597610
    },
    {
        "content": "<p>Ah, sure</p>",
        "id": 299574861,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663597641
    },
    {
        "content": "<p>I suppose one should use the direct sum in this case, and not the product. We probably have the isomorphism between the two in the finite case</p>",
        "id": 299575040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663597704
    },
    {
        "content": "<p>OMG, it's in the wrong direction!</p>",
        "id": 299575144,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663597736
    },
    {
        "content": "<p>But of course that wouldn't take care of the noncommutative case</p>",
        "id": 299575150,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663597738
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.noncomm_pi_coprod\">docs#monoid_hom.noncomm_pi_coprod</a></p>",
        "id": 299575885,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663597985
    },
    {
        "content": "<p>But it would be nice to have it directly for a <code>comm_group</code> codomain</p>",
        "id": 299575940,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663598012
    },
    {
        "content": "<p>Cool ! I'll add that.</p>",
        "id": 299579455,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663599166
    },
    {
        "content": "<p>This was <a href=\"#narrow/stream/116395-maths/topic/.E2.9C.94.20direct.20product.20of.20sylow.20groups/near/269943885\">suggested by me</a> and and added by Joachim Breitner in <a href=\"https://github.com/leanprover-community/mathlib/pull/11744\">#11744</a> in March as part of his work on the characterization of finite nilpotent groups. Since you're working on finite groups, you might want to look into the tracking issue <a href=\"https://github.com/leanprover-community/mathlib/pull/11723\">#11723</a> to see if you missed something else ...</p>\n<p>I also suggested a generalization to the infinite case, but I only thought about a subgroup of pi or a quotient of free_product, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum\">docs#direct_sum</a> (which don't seem to be intended for multiplicative groups since the latter requires <code>add_comm_monoid</code> and the former only admits the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.add_group\">docs#dfinsupp.add_group</a> but not <a href=\"http://dfinsupp.group\">dfinsupp.group</a>).</p>",
        "id": 299582035,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663600022
    }
]