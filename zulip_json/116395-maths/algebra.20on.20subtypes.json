[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Simon has been working for us, and Mario promptly merged. You can update mathlib to at least c2f54ad03 and try to understand how to use the magic in <a href=\"https://gist.github.com/PatrickMassot/8afef3917a917300cf31c1396a895705\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/8afef3917a917300cf31c1396a895705\">https://gist.github.com/PatrickMassot/8afef3917a917300cf31c1396a895705</a></p>",
        "id": 129923410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531994240
    },
    {
        "content": "<p>Looks interesting! I'm updating (-;</p>",
        "id": 129926331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531998252
    },
    {
        "content": "<p>I really like where this is going! You give it the data (zero, addition, ...) and for the properties (assoc, comm, ...) you just tell Lean: look, follow your nose and you'll get there.</p>",
        "id": 129926592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531998698
    },
    {
        "content": "<p>Indeed. This now really looks like what you would wrote on paper: explain why operations make sense and then write either nothing  or \"algebraic axioms follow from the parent structure axiom\"</p>",
        "id": 129926847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531999097
    },
    {
        "content": "<p>And this will be reused a lot. Each algebraic structure need subtype instances</p>",
        "id": 129926851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531999131
    },
    {
        "content": "<p>Note that <code>refine_struct</code> is an ongoing long-term collaboration effort using all available strengths: I do the whining and Simon does the coding. It started with the <code>pi_instance</code> tactic back in February I think</p>",
        "id": 129926923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531999258
    },
    {
        "content": "<p>Ok, so here are some explicit kudos to <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> <span class=\"emoji emoji-1f419\" title=\"octopus\">:octopus:</span> <span class=\"emoji emoji-1f370\" title=\"cake\">:cake:</span> <span class=\"emoji emoji-1f6e0\" title=\"hammer and wrench\">:hammer_and_wrench:</span> <span class=\"emoji emoji-1f4aa\" title=\"muscle\">:muscle:</span></p>",
        "id": 129927028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531999457
    },
    {
        "content": "<p>I do wonder, in how far is this overlapping with Scott's tactics? I don't fully understand what his <code>obviously</code> does, but it is also related to deriving obvious results from fields in structures and such, right?</p>",
        "id": 129927113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531999629
    },
    {
        "content": "<p><code>obviously</code> is one of several \"hammer\" style tactics by scott</p>",
        "id": 129927179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531999773
    },
    {
        "content": "<p>i.e. \"throw every automation we have at the problem until it buckles\"</p>",
        "id": 129927180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531999791
    },
    {
        "content": "<p>I don't think <code>refine_struct</code> does anything like this</p>",
        "id": 129927242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531999850
    },
    {
        "content": "<p>Agreed, but vice versa? Would most of these goals buckle under <del>Thor's</del> Scott's hammer?</p>",
        "id": 129927259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531999903
    },
    {
        "content": "<p>No, <code>refine_struct</code> by itself carefully understand and name what Lean wants to be proved. Then specialized automation like <a href=\"https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L16\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L16\">https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L16</a> or <a href=\"https://gist.github.com/PatrickMassot/8afef3917a917300cf31c1396a895705#file-subtypes-lean-L9\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/8afef3917a917300cf31c1396a895705#file-subtypes-lean-L9\">https://gist.github.com/PatrickMassot/8afef3917a917300cf31c1396a895705#file-subtypes-lean-L9</a> take over.</p>",
        "id": 129927315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532000025
    },
    {
        "content": "<p>Since Lean supports unicode, I think we really should have a tactic called <a href=\"https://en.wikipedia.org/wiki/Mj%C3%B6lnir\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Mj%C3%B6lnir\">Mjölnir</a>.</p>",
        "id": 129927370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532000066
    },
    {
        "content": "<p>You should propose a unicode character for that thing</p>",
        "id": 129927543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532000324
    },
    {
        "content": "<p>Let's ask google how to spell that in runes</p>",
        "id": 129927555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532000354
    },
    {
        "content": "<p>And then we can email Jasmin and give him one more incentive to bring us that hammer thing</p>",
        "id": 129927563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532000383
    },
    {
        "content": "<p>Looks like this could be our winner: <a href=\"https://static1.fjcdn.com/comments/Spelled+the+right+way+_47df3c7a85289a0912599c30d252cf08.jpg\" target=\"_blank\" title=\"https://static1.fjcdn.com/comments/Spelled+the+right+way+_47df3c7a85289a0912599c30d252cf08.jpg\">https://static1.fjcdn.com/comments/Spelled+the+right+way+_47df3c7a85289a0912599c30d252cf08.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://static1.fjcdn.com/comments/Spelled+the+right+way+_47df3c7a85289a0912599c30d252cf08.jpg\" target=\"_blank\" title=\"https://static1.fjcdn.com/comments/Spelled+the+right+way+_47df3c7a85289a0912599c30d252cf08.jpg\"><img src=\"https://static1.fjcdn.com/comments/Spelled+the+right+way+_47df3c7a85289a0912599c30d252cf08.jpg\"></a></div>",
        "id": 129927614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532000429
    },
    {
        "content": "<blockquote>\n<p>Let's ask google how to spell that in runes</p>\n</blockquote>\n<p>ᛗᛃᛟᛚᚾᛁᚱ</p>",
        "id": 129927691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532000536
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"err\">ᛗᛃᛟᛚᚾᛁᚱ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"err\">ᛗᛃᛟᛚᚾᛁᚱ</span>\n</pre></div>",
        "id": 129927701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532000562
    },
    {
        "content": "<p>Too bad: I tried <code>meta def ᛗᛃᛟᛚᚾᛁᚱ : tactic unit := sorry</code> but Lean complains <code>invalid declaration, identifier expected</code></p>",
        "id": 129927730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532000627
    },
    {
        "content": "<p>It seems we'll need some help from <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 129927771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532000656
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def «ᛗᛃᛟᛚᚾᛁᚱ» : tactic unit := sorry\n</pre></div>",
        "id": 129927772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532000663
    },
    {
        "content": "<p>Guillemets: how appropriate.</p>",
        "id": 129927808,
        "sender_full_name": "Sean Leather",
        "timestamp": 1532000723
    },
    {
        "content": "<p>problem solved:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"err\">«ᛗᛃᛟᛚᚾᛁᚱ»</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">ᛗᛃᛟᛚᚾᛁᚱ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"err\">«ᛗᛃᛟᛚᚾᛁᚱ»</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"err\">ᛗᛃᛟᛚᚾᛁᚱ</span>\n</pre></div>",
        "id": 129927817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532000755
    },
    {
        "content": "<p>This works! We're almost set. It only remains to whine long enough for someone to unsorry this</p>",
        "id": 129927870,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532000789
    },
    {
        "content": "<p>obviously <code>meta def «ᛗᛃᛟᛚᚾᛁᚱ» : tactic unit :=  by ᛗᛃᛟᛚᚾᛁᚱ</code></p>",
        "id": 129927879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532000831
    },
    {
        "content": "<p>I like your use of \"obviously\"</p>",
        "id": 129927891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532000870
    },
    {
        "content": "<p>We shouldn't forget the PR to <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">https://github.com/leanprover/vscode-lean/blob/master/translations.json</a></p>",
        "id": 129927939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532000925
    }
]