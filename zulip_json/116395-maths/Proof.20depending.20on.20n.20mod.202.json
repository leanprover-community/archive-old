[
    {
        "content": "<p>I need to prove a fact about <code>(-a)^n</code>, with <code>n : nat</code>. I would like to split into two cases, depending on whether <code>n</code> is odd or even. What is the best way to do this in mathlib?</p>",
        "id": 129743513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531739763
    },
    {
        "content": "<p>what is it that you want to prove?</p>",
        "id": 129744299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531740793
    },
    {
        "content": "<p>you might be able to rewrite <code>n</code> into <code>(n/2)*2 + (n%2)</code> if you use the division algorithm</p>",
        "id": 129744303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531740810
    },
    {
        "content": "<p><code>nat.mod_two_eq_zero_or_one</code> I believe</p>",
        "id": 129744396,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531740933
    },
    {
        "content": "<p>my point is, sometimes you don't need to split into two cases</p>",
        "id": 129744408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531740951
    },
    {
        "content": "<p>Ok, I'll try that.</p>",
        "id": 129744766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531741536
    },
    {
        "content": "<p>So, here is another substep that I currently have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_eq_neg_one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 129744770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531741558
    },
    {
        "content": "<p>could you include the types of <code>v</code> and <code>a</code>?</p>",
        "id": 129744815,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531741585
    },
    {
        "content": "<p>Should <code>ring</code> be able to do those rewrites itself? I think it would make sense to me to teach <code>ring</code> about negatives...</p>",
        "id": 129744818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531741601
    },
    {
        "content": "<p><code>v</code> and <code>a</code> live in some comm ring.</p>",
        "id": 129744829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531741611
    },
    {
        "content": "<p>it isn't about negatives</p>",
        "id": 129744918,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531741768
    },
    {
        "content": "<p>it's about powers</p>",
        "id": 129744920,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531741772
    },
    {
        "content": "<p><code>ring</code> can't prove this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>",
        "id": 129744924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531741777
    },
    {
        "content": "<p>Should ring be able to prove it, by <code>rw mul_pow</code> whenever possible?</p>",
        "id": 129745010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531741893
    },
    {
        "content": "<p>I don't know what <code>ring</code> knows</p>",
        "id": 129745014,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531741908
    },
    {
        "content": "<p>My \"Should\" was a <em>moral</em> should. As in, does it make sense to give <code>ring</code> these extra powers?</p>",
        "id": 129745076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531741988
    },
    {
        "content": "<p>No. It is not a rewrite system, it is a decision procedure for polynomial equalities. <code>x^n</code> is not a polynomial (of two variables <code>x</code>, <code>n</code>)</p>",
        "id": 129745230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742254
    },
    {
        "content": "<p>fair enough</p>",
        "id": 129745235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531742273
    },
    {
        "content": "<p>Mario, so would it make sense to rename <code>ring</code> into <code>semiring</code>, and have a <code>ring</code> tactic that is <code>semiring</code> + some other superpowers?</p>",
        "id": 129745425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531742509
    },
    {
        "content": "<p><code>ring</code> deals with commutative rings and commutative semirings</p>",
        "id": 129745483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742540
    },
    {
        "content": "<p>Negatives are supported</p>",
        "id": 129745495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742553
    },
    {
        "content": "<p>Ok, so what is the fastest way to prove <code>H : ∀ {n : ℕ}, ((-1 : R)^n = 1) ∨ ((-1 : R)^n = -1)</code>, where <code>R</code> is a <code>comm_ring</code>.</p>",
        "id": 129746954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531744574
    },
    {
        "content": "<p>that could probably go in <code>group_power.lean</code></p>",
        "id": 129747046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531744692
    },
    {
        "content": "<p>That's the fastest way: have Mario write it in mathlib</p>",
        "id": 129747062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531744716
    },
    {
        "content": "<p>but you can prove it either by induction or by quotient remainder theorem like kenny suggested</p>",
        "id": 129747072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531744733
    },
    {
        "content": "<p>I'm halfway a proof by induction, but everytime I need a stupid little fact from mathlib it costs me 15 minutes to find it...</p>",
        "id": 129747095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531744787
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_inj&#39;</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_iff_neg_eq</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">or_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129747269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531745004
    },
    {
        "content": "<p>that's 7 minutes :P</p>",
        "id": 129747273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531745011
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"n\">ih</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129747459,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531745202
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"n\">ih</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129747482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531745248
    },
    {
        "content": "<p>You win (-;</p>",
        "id": 129747491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531745272
    },
    {
        "content": "<p>Now you are just showing off :P</p>",
        "id": 129747550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531745317
    },
    {
        "content": "<p>What's it look like using the equation compiler for the induction?</p>",
        "id": 129747557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531745332
    },
    {
        "content": "<p>not much difference, I think</p>",
        "id": 129747574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531745369
    },
    {
        "content": "<p>I think it's a bit neater</p>\n<div class=\"codehilite\"><pre><span></span>theorem neg_one_pow_eq_or {R} [comm_ring R] : ∀ n : ℕ, ((-1 : R)^n = 1) ∨ ((-1 : R)^n = -1)\n| 0     := by simp\n| (n+1) := by cases neg_one_pow_eq_or n; simp [pow_succ, h]\n</pre></div>\n\n\n<p>also <code>left</code> and <code>right</code> are unnecessary</p>",
        "id": 129747711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531745523
    },
    {
        "content": "<p>I see</p>",
        "id": 129747723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531745530
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129747746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531745601
    }
]