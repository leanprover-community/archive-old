[
    {
        "content": "<p>Hi everyone,<br>\nI am quite new to lean, I want to prove some stuff like these:<br>\n3 &lt; 7,<br>\n2 * 4 &lt; 9</p>\n<p>or some other logical statement:<br>\np /\\ q &lt;-&gt; q /\\ p,<br>\nor <br>\np /\\ q -&gt; p</p>\n<p>Do you know a good way to prove these stuffs?</p>",
        "id": 163758727,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555702020
    },
    {
        "content": "<p>For numerical stuff, you can use <code>norm_num</code>. For logic, you should read Theorem Proving In Lean, which covers all this stuff in great detail.</p>",
        "id": 163758768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555702068
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 163758840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555702113
    },
    {
        "content": "<p>Thanks, I read the Theorem Proving in Lean. So for logical statement, we have to do it manually, by applying: <a href=\"http://iff.mp\" target=\"_blank\" title=\"http://iff.mp\">iff.mp</a>, iff.mpr and so on.<br>\nNo, faster way, right?</p>",
        "id": 163759301,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555702522
    },
    {
        "content": "<p>There are super-short ways to do it in term mode, and super-clear ways to do it in tactic mode. But to understand what's going on, you have to read Theorem Proving In Lean.</p>",
        "id": 163759377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555702574
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 163759447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555702642
    },
    {
        "content": "<p>This is all explained in Theorem Proving In Lean.</p>",
        "id": 163759460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555702653
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hpq</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hp</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hqp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hqp</span> <span class=\"k\">with</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hq</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This is also all explained in Theorem Proving In Lean. They spend a lot of time on basic logic stuff like this!</p>",
        "id": 163759588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555702756
    },
    {
        "content": "<p>Chapter 5 is on tactic mode and in my mind tactic mode is the best place to start, although I have a more mathematical background than the computer science users of the software, who prefer term mode.</p>",
        "id": 163759757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555702885
    },
    {
        "content": "<p>I'm not sure I understand the question. There are magic tactic that will prove such a goal in one line, but this won't teach you much</p>",
        "id": 163760534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555703668
    },
    {
        "content": "<p>Oh yeah that's true; you can solve it all using heavy machinery :D</p>",
        "id": 163760544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555703692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span>\n</pre></div>\n\n\n<p>These tactics are not explained in TPIL though.</p>",
        "id": 163760580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555703734
    },
    {
        "content": "<p>Thank you,<br>\nI know the way that is presented in chapter 5. It is useful to know 'tauto'.</p>",
        "id": 163809706,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555777613
    }
]