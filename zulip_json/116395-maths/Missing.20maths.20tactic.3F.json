[
    {
        "content": "<p><code>example (a b c d : ℤ) (H : a - b = c * d) : b - a = c * (-d) := by simp [H] -- fails</code>.</p>\n<p>Is this one of those instances when someone familiar with Coq says \"oh, it would work if you had &lt;insert name of tactic which I don't know what it does, but it turns out it does this&gt;\"? I'm teaching equivalence relations shortly, and this stuff comes up with congruences; I want to give Lean a big push if possible but I want to make it look slick, ideally.</p>\n<p>I remark that <code>example (a b c d : ℤ) (H : a - b = c * d) : b - a = c * (-d) := by simp [H.symm]</code> works! But I am stuck with having it this way round because it's how <code>has_dvd.dvd</code> unfolds on int :-( [I'm trying to prove congruence mod c is symmetric in a completely transparent way]</p>",
        "id": 148250605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543009171
    },
    {
        "content": "<p>heh:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- works (of course)</span>\n</pre></div>\n\n\n<p>but the surprise is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works!</span>\n</pre></div>\n\n\n<p>For this one I knew the tactic, but then I realised I didn't need it.</p>",
        "id": 148251400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543010729
    },
    {
        "content": "<p>I think last year we had an extended discussion about how to define this equivalence relation in order to get an easy proof</p>",
        "id": 148251450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543010842
    },
    {
        "content": "<p>But I really want a one-liner for this if possible:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hj</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">Hj</span><span class=\"o\">,</span><span class=\"err\">←</span><span class=\"n\">Hk</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ a - c = a - b + (b - c)</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- works if tactic.ring imported</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I want to do ring [Hj,Hk] or something, but I'm well aware that life isn't so easy.</p>",
        "id": 148251456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543010860
    },
    {
        "content": "<blockquote>\n<p>I think last year we had an extended discussion about how to define this equivalence relation in order to get an easy proof</p>\n</blockquote>\n<p>Yes, the trick is to define congruence mod m (it was mod 37 last time) in a different way -- the order matters. But unfortunately in my lectures I defined congruence mod m to mean <code>m | (a - b)</code> so now I'm stuck with it and it unfolds to something which is not in the optimal order.</p>",
        "id": 148251513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543010921
    },
    {
        "content": "<p>Is this one of those things which is done by omega or cooper or something -- these tactics that I have no idea what they are?</p>",
        "id": 148251525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543010973
    },
    {
        "content": "<p>Omega only handles presburger arithmetic, ie no multiplication.</p>",
        "id": 148251577,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543011042
    },
    {
        "content": "<p>Hmm. I suspect <code>by Groebner_basis</code> might do it.</p>",
        "id": 148251584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543011086
    },
    {
        "content": "<p>Cooper might do it, but I don't have lean in front of me to try it</p>",
        "id": 148251585,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543011090
    },
    {
        "content": "<p>I have Lean in front of me -- how do I get cooper working?</p>",
        "id": 148251588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543011117
    },
    {
        "content": "<p>Maybe you can add <a href=\"https://github.com/skbaek/qe\" target=\"_blank\" title=\"https://github.com/skbaek/qe\">https://github.com/skbaek/qe</a> as a dependency now</p>",
        "id": 148251643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543011200
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hj</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">Hj</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">Hk</span><span class=\"o\">,</span> <span class=\"n\">sub_add</span><span class=\"o\">,</span> <span class=\"n\">sub_sub_self</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 148251707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543011307
    },
    {
        "content": "<p>(but I don't know how to actually <em>use</em> it)</p>",
        "id": 148251708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543011308
    },
    {
        "content": "<p>I think the examples in <a href=\"https://github.com/skbaek/qe/blob/master/src/examples.lean\" target=\"_blank\" title=\"https://github.com/skbaek/qe/blob/master/src/examples.lean\">https://github.com/skbaek/qe/blob/master/src/examples.lean</a> are self explanatory</p>",
        "id": 148251711,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543011357
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">cong_mod_37</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">37</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cong_mod_37</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">cong_mod_37</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cong_mod_37</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hk</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">cong_mod_37</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">cong_mod_37</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cong_mod_37</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H1</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">Hj</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H2</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span><span class=\"n\">Hj</span><span class=\"o\">,</span><span class=\"n\">Hk</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148251716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543011362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I know how to do it, but the problem is that your proof is a great example of how to put first year undergraduates off Lean.</p>",
        "id": 148251753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543011391
    },
    {
        "content": "<p>Compare with my 37 proofs, where everything is just simp.</p>",
        "id": 148251754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543011404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> about <code>example (m a b c j k : ℤ) (Hj : a - b = m * j) (Hk : b - c = m * k) : a - c = m * (j + k)</code>. For students I think a two-liner is good enough. The proof you would tell them is: \"add equations Hj and Hk, then compute\". Having a tactic <code>add_eq Hk Hj</code> is clearly within reach (actually we should both know how to do that by now). It would replace the first line in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hj</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">Hj</span><span class=\"o\">)</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148252152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543012223
    },
    {
        "content": "<p>... can someone teach me how to write tactics</p>",
        "id": 148252226,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543012341
    },
    {
        "content": "<p>Yes</p>",
        "id": 148252241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543012386
    },
    {
        "content": "<p>Johannes, Mario, Simon, Rob, Scott...</p>",
        "id": 148252248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543012415
    },
    {
        "content": "<p>The textbook everyone recommends is Handbook of Practical Logic and Automated Reasoning</p>",
        "id": 148252389,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543012675
    },
    {
        "content": "<p>Term rewriting and all that is good too, so is Modern Computer Algebra, depending on what you want your tactics to do</p>",
        "id": 148252503,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543012814
    },
    {
        "content": "<p>Andrew, our problem stops us before needing anything from these books. It's about Lean meta programming (especially parsing arguments in our case).</p>",
        "id": 148252856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543013623
    },
    {
        "content": "<p>Our only immediate hope is <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> will pity us, and we'll wake up with a <code>add_eq</code> tactic PR'ed to mathlib.</p>",
        "id": 148252902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543013700
    },
    {
        "content": "<p>How can you be sure that he heard you?</p>",
        "id": 148252955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543013775
    },
    {
        "content": "<p>That's the magic of Zulip's notification</p>",
        "id": 148252971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543013825
    },
    {
        "content": "<p>And it's midnight here, so I'm allowed to dream</p>",
        "id": 148252974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543013847
    },
    {
        "content": "<p>You sure are</p>",
        "id": 148252975,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543013865
    },
    {
        "content": "<p>What's the gist of this <code>add_eq</code> that you're looking for?</p>",
        "id": 148253023,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543013884
    },
    {
        "content": "<p>It replaces</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hj</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">Hj</span><span class=\"o\">)</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>by</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hj</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">add_eq</span> <span class=\"n\">Hj</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148253036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543013967
    },
    {
        "content": "<p>It's similar in spirit to the <code>mul_left</code> tactic that we never finished writing</p>",
        "id": 148253099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543014019
    },
    {
        "content": "<p>Wouldn't a lemma work just as well?</p>",
        "id": 148253117,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543014083
    },
    {
        "content": "<p>I don't understand how you can miss such opportunities to save the world with a new tactic</p>",
        "id": 148253233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543014334
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">H&#39;</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hj</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">add_eq</span> <span class=\"n\">Hj</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148253234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543014343
    },
    {
        "content": "<p>My favorite tactics are those I don't have to write :P</p>",
        "id": 148253274,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543014381
    },
    {
        "content": "<p>(btw, you type faster than I do, I was about to write that!)</p>",
        "id": 148253283,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543014427
    },
    {
        "content": "<p>I wonder whether this lemma is already in mathlib, the hypothesis <code>has_add α</code> is really weak</p>",
        "id": 148253285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543014434
    },
    {
        "content": "<p>Maybe a two-argument <code>congr_arg₂</code> would be nice?</p>",
        "id": 148253331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543014486
    },
    {
        "content": "<p>Yes, I also thought about that when writing the first version of the proof</p>",
        "id": 148253333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543014510
    },
    {
        "content": "<blockquote>\n<p>Maybe a two-argument <code>congr_arg₂</code> would be nice?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/mathlib/pull/118#discussion_r183841541\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/118#discussion_r183841541\">https://github.com/leanprover/mathlib/pull/118#discussion_r183841541</a></p>",
        "id": 148253445,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543014724
    },
    {
        "content": "<p>But for students I would still prefer to have the <code>add_eq</code> lemma and its friends that the abstract version</p>",
        "id": 148253449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543014731
    },
    {
        "content": "<p>Same story as ever: an impressive proof from Kenny</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">congr_arg₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"n\">y₂</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec</span> <span class=\"n\">rfl</span> <span class=\"n\">Hy</span><span class=\"o\">)</span> <span class=\"n\">Hx</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg₂</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">H</span> <span class=\"n\">H&#39;</span>\n</pre></div>\n\n\n<p>and then Mario wins:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">congr&#39;</span>\n</pre></div>",
        "id": 148253515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543014949
    },
    {
        "content": "<p>I still think all versions deserve to be in mathlib: <code>congr_arg₂</code> and <code>add_eq</code> with its one-word proof</p>",
        "id": 148253565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543015038
    },
    {
        "content": "<p>And now, I really go to sleep</p>",
        "id": 148253595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543015078
    },
    {
        "content": "<p>man these 10 lines took me 1.5 hours to write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_eq</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n<span class=\"n\">e1</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">e2</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"err\">%%</span><span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"n\">e2</span><span class=\"o\">),</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">note</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">e</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hj</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">add_eq</span> <span class=\"n\">Hj</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148256302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543020910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I wrote my first tactic just by browsing through core / mathlib</p>",
        "id": 148256304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543020921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> are you going to replace my 5-line tactic with 1 line now?</p>",
        "id": 148256360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543021068
    },
    {
        "content": "<p>golfed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_eq</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e1</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">e2</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n   <span class=\"err\">«</span><span class=\"k\">have</span><span class=\"err\">»</span> <span class=\"n\">h</span> <span class=\"n\">none</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"err\">%%</span><span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"n\">e2</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hj</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">add_eq</span> <span class=\"n\">Hj</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148256569,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543021454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, why not reuse the lemma, and save yourself constructing the expression by hand:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.ring\n\nlemma add_eq {α : Type*} [has_add α] {b c d e : α} (H : b = c) (H&#39; : d = e) :\n  b + d = c + e := by congr&#39;\n\nnamespace tactic.interactive\nopen lean.parser tactic interactive\nmeta def add_eq (h1 : parse ident) (h2 : parse ident)\n  (h : parse (optional (tk &quot;with&quot; *&gt; ident))) : tactic unit :=\ndo e1 ← get_local h1,\n   e2 ← get_local h2,\n   «have» h none ```(add_eq %%e1 %%e2)\nend tactic.interactive\n\nexample (m a b c j k : ℤ) (Hj : a - b = m * j) (Hk : b - c = m * k) :\n  a - c = m * (j + k) :=\nbegin\n  add_eq Hj Hk,\n  ring at *,\n  assumption\nend\n</pre></div>",
        "id": 148256983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543022451
    },
    {
        "content": "<p>fair enough</p>",
        "id": 148256990,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543022517
    },
    {
        "content": "<p>Quotations are your friend, both for constructing <code>expr</code> instances and pattern matching on them.</p>",
        "id": 148257035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543022613
    },
    {
        "content": "<p>Doesn't this mean that we should provide <code>instance {A : Type*} [has_add A] : has_add (eq A)</code>? And then prove that it is associative and commutative in the appropriate cases...</p>",
        "id": 148265264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543040929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is it possible to do <code>ring at * using [foo,bar]</code>?</p>",
        "id": 148265271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543040972
    },
    {
        "content": "<p>This sounds unlikely as it sounds like you're asking Lean to figure out if an element of a ring is in the ideal generated by the inputs, which is surely well beyond the ring tactic</p>",
        "id": 148267312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543045521
    },
    {
        "content": "<p>Right. As you have identified this needs groebner bases, which could be a future generalization of <code>ring</code> but is a completely different algorithm</p>",
        "id": 148268834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543048865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , be careful golfing tactic code. Because we don't have the same assurances on correctness of meta code, it's much more like conventional programming, and it is important to be clear rather than compact, for maintainability</p>",
        "id": 148268884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543049003
    },
    {
        "content": "<p>FYI, a student of ours who just started his BS thesis project is interested in Grobner basis algorithms. I'm not sure exactly which direction his project will go. Hopefully we'll get the core of an algorithm for this kind of thing, and then either he or we will turn it into a tactic.</p>",
        "id": 148271134,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543053708
    },
    {
        "content": "<p>Wouldn't it be faster (both  development, and user experience) to piggyback on some other CAS? You already have the Mathematica interface. I guess a pari or sage interface would also be helpful. And we would get grobner basis tactics \"for free\"...</p>",
        "id": 148280564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543071979
    },
    {
        "content": "<p>Oh! It's just like the matrix inverse isn't it! You ask magma or whatever for a proof that the element is in the ideal, it supplies an explicit linear combination claiming to prove this but which hasn't been formally verified, and then you formally verify it in Lean with the <code>ring</code> tactic.</p>",
        "id": 148281161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543073202
    },
    {
        "content": "<p>Sure, but there are upsides to implementing the algorithm natively too. Our student will learn how it works, of course. And it would be portable, so the tactic would be usable in mathlib without external dependencies. There's also theoretical interest in implementing the algorithm in non-meta Lean and proving it correct, even if it can't be efficiently executed in the kernel. And any tactic built on this should be modular enough to use an external oracle too.</p>",
        "id": 148281219,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543073292
    },
    {
        "content": "<p>By the way, I think my question about <code>ring using [foo,bar]</code> was misunderstood. I didn't want it to find relations on its own. I wanted to be able to type something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ring</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">add_eq</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 148284554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543079670
    },
    {
        "content": "<p>And using notation, that might be improved to <code>ring using [H1 + H2]</code></p>",
        "id": 148284566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543079718
    },
    {
        "content": "<p>that seems more reasonable. You give some linear combination of hypotheses, like <code>a * h1 + x^2 * h2</code>, and it checks that <code>goal - (a*h1 + x^2 * h2)</code> is an equality of ring expressions</p>",
        "id": 148296295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543104458
    }
]