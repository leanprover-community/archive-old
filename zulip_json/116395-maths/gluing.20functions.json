[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">presheaf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">res_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">res_res</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kn\">structure</span> <span class=\"n\">covering</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_of_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">sheaf</span> <span class=\"kn\">extends</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">locality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gluing</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span> <span class=\"err\">⊓</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span> <span class=\"err\">⊓</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Func</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">HVU</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">res_self</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">res_res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">OC</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hui</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">exists_of_mem</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"k\">in</span>\n    <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hui</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">gluing</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">OC</span> <span class=\"n\">S</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">exists_of_mem</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"err\">$</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">exists_of_mem</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">exists_of_mem</span> <span class=\"n\">u</span> <span class=\"err\">$</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span> <span class=\"n\">hu</span><span class=\"o\">)</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"err\">$</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">exists_of_mem</span> <span class=\"n\">u</span> <span class=\"err\">$</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span> <span class=\"n\">hu</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 171359646,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563691848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> That looks great!!</p>",
        "id": 171395304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563757198
    },
    {
        "content": "<p>Maybe we should forget about sites for the moment. I do want to use functors though. I don't see any reason why you would handroll your own presheaves if their definition is defeq to functors (up to iota/eta for records [I always forget which Greek letter I need to invoke]).</p>",
        "id": 171395373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563757288
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">opens</span>\n<span class=\"n\">def</span> <span class=\"n\">covering_res</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">⊓</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">map_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n  <span class=\"n\">exists_of_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">exists_of_mem</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">hxV</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">opens</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subpresheaf</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_set</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">res_mem_to_set</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">to_set</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">to_set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subpresheaf</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">to_set</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">to_set</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">)</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_subsheaf</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subpresheaf</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_set</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">res_mem_to_set</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">OC</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">covering_res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">OC</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"o\">((</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">covering_res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">OC</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">res_mem_to_set</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_res</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"err\">⊢</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">le_to_subsheaf</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">to_subsheaf</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">{</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">map_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">exists_of_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_self</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_presheaf</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">res_self</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_self</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">res_res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subpresheaf</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subsheaf</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">subpresheaf</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem_of_res_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">to_set</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">to_set</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subsheaf</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_sheaf</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span> <span class=\"n\">OC</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">locality</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">OC</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">gluing</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">OC</span> <span class=\"n\">ss</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">gluing</span> <span class=\"n\">U</span> <span class=\"n\">OC</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">mem_of_res_mem</span> <span class=\"n\">OC</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hs</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">to_subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subsheaf</span>\n\n<span class=\"n\">def</span> <span class=\"n\">continuous_subsheaf</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subsheaf</span> <span class=\"o\">(</span><span class=\"n\">Func</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_set</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">},</span>\n  <span class=\"n\">res_mem_to_set</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"err\">$</span> <span class=\"n\">continuous_induced_rng</span> <span class=\"n\">continuous_induced_dom</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_of_res_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">OC</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">continuous_iff_continuous_at</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">exists_of_mem</span> <span class=\"n\">x</span> <span class=\"n\">hxU</span> <span class=\"k\">in</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span> <span class=\"n\">HV</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">htV</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hut</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hxt</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_nhds_sets_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">continuous_iff_continuous_at</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"n\">HV</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"n\">mem_nhds_sets_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n      <span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hzt</span><span class=\"o\">,</span> <span class=\"n\">hzy</span><span class=\"bp\">⟩;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">hzy</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">hzy</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">htV</span> <span class=\"n\">hzt</span><span class=\"o\">,</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">u</span> <span class=\"err\">∩</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open_inter</span> <span class=\"n\">hu</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hut</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">image_preimage_val</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hxt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 171402068,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563769306
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">subpresheaf</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_sup</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">U</span> <span class=\"err\">∪</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inf</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Sup</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">SS</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"err\">⋃</span> <span class=\"n\">S</span> <span class=\"err\">∈</span> <span class=\"n\">SS</span><span class=\"o\">,</span> <span class=\"n\">to_set</span> <span class=\"n\">S</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">HS</span><span class=\"o\">,</span> <span class=\"n\">hsS</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_bUnion_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hs</span> <span class=\"k\">in</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_bUnion_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">HS</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span> <span class=\"n\">hsS</span><span class=\"bp\">⟩⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">SS</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"err\">⋂</span> <span class=\"n\">S</span> <span class=\"err\">∈</span> <span class=\"n\">SS</span><span class=\"o\">,</span> <span class=\"n\">to_set</span> <span class=\"n\">S</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_bInter</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">HS</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_bInter_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hs</span> <span class=\"n\">S</span> <span class=\"n\">HS</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">subpresheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_sup_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_union_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_union_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sup_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S1</span> <span class=\"n\">S2</span> <span class=\"n\">S3</span> <span class=\"n\">H13</span> <span class=\"n\">H23</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">union_subset</span> <span class=\"o\">(</span><span class=\"n\">H13</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H23</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"n\">inf_le_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S1</span> <span class=\"n\">S2</span> <span class=\"n\">S3</span> <span class=\"n\">H12</span> <span class=\"n\">H13</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_inter</span> <span class=\"o\">(</span><span class=\"n\">H12</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H13</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">empty_subset</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_Sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">SS</span> <span class=\"n\">S</span> <span class=\"n\">HS</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_bUnion_of_mem</span> <span class=\"n\">HS</span><span class=\"o\">,</span>\n  <span class=\"n\">Sup_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">SS</span> <span class=\"n\">S</span> <span class=\"n\">HS</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">bUnion_subset</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">T</span> <span class=\"n\">HT</span><span class=\"o\">,</span> <span class=\"n\">HS</span> <span class=\"n\">T</span> <span class=\"n\">HT</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">SS</span> <span class=\"n\">S</span> <span class=\"n\">HS</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">bInter_subset_of_mem</span> <span class=\"n\">HS</span><span class=\"o\">,</span>\n  <span class=\"n\">le_Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">SS</span> <span class=\"n\">S</span> <span class=\"n\">HS</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_bInter</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">T</span> <span class=\"n\">HT</span><span class=\"o\">,</span> <span class=\"n\">HS</span> <span class=\"n\">T</span> <span class=\"n\">HT</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_sup</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_inf</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Sup</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subpresheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_bot</span> <span class=\"n\">F</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subpresheaf</span>\n</pre></div>",
        "id": 171403565,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563771889
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">subsheaf</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">to_set</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">to_set</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy1</span><span class=\"o\">,</span> <span class=\"n\">hy2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">)</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inf</span> <span class=\"o\">(</span><span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span><span class=\"o\">),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">OC</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"n\">OC</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"n\">OC</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">SS</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"err\">⋂</span> <span class=\"n\">S</span> <span class=\"err\">∈</span> <span class=\"n\">SS</span><span class=\"o\">,</span> <span class=\"n\">to_set</span> <span class=\"n\">S</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_bInter</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">HS</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HVU</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_bInter_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hs</span> <span class=\"n\">S</span> <span class=\"n\">HS</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">OC</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_bInter</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">HS</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"n\">OC</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_bInter_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"n\">HS</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">subsheaf</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf_top</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_inf_top</span> <span class=\"o\">(</span><span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S1</span> <span class=\"n\">S2</span> <span class=\"n\">S3</span> <span class=\"n\">H12</span> <span class=\"n\">H13</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_inter</span> <span class=\"o\">(</span><span class=\"n\">H12</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H13</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subsheaf</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subsheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_inf</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subsheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subsheaf</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span> <span class=\"n\">F</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Inf_le</span> <span class=\"o\">(</span><span class=\"n\">SS</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">∈</span> <span class=\"n\">SS</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"n\">SS</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">bInter_subset_of_mem</span> <span class=\"n\">HS</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">le_Inf</span> <span class=\"o\">(</span><span class=\"n\">SS</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subsheaf</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">SS</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"n\">SS</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_bInter</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">T</span> <span class=\"n\">HT</span><span class=\"o\">,</span> <span class=\"n\">HS</span> <span class=\"n\">T</span> <span class=\"n\">HT</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subsheaf</span>\n</pre></div>",
        "id": 171404225,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563773050
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">section_subsheaf</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsheaf</span> <span class=\"o\">(</span><span class=\"n\">Func</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_set</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"n\">res_mem_to_set</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hs</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_of_res_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">OC</span> <span class=\"n\">H</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">exists_of_mem</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"k\">in</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 171404315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563773255
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">continuous_section_subsheaf</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsheaf</span> <span class=\"o\">(</span><span class=\"n\">Func</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_subsheaf</span> <span class=\"n\">Y</span> <span class=\"err\">⊓</span> <span class=\"n\">section_subsheaf</span> <span class=\"n\">Y</span> <span class=\"n\">π</span>\n</pre></div>",
        "id": 171404373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563773302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> What is your objection against using functors on <code>(opens X)^op</code>?</p>",
        "id": 171404842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563774145
    },
    {
        "content": "<p>the large amount of unop required</p>",
        "id": 171404872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563774236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Should we make a <code>cv_functor</code>?</p>",
        "id": 171404935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563774348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Given that you already have this <code>covering</code> class. How hard do you think it is to generalise to sites?</p>",
        "id": 171405068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563774550
    },
    {
        "content": "<p>Do you see particular troubles on the road?</p>",
        "id": 171405071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563774564
    },
    {
        "content": "<p>I dont know</p>",
        "id": 171405075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563774579
    },
    {
        "content": "<p><code>cv_functor</code> feels like we’d be unnecessarily multiplying entities.</p>",
        "id": 171405342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563774900
    },
    {
        "content": "<p>I’m not so sure there is so much <code>unopened required. This is certainly the way I felt at first when you guys insists I couldn’t just define </code>opens X<code> as what is now </code>(opens X)^op`, but it never got particularly bad.</p>",
        "id": 171405432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563774982
    },
    {
        "content": "<p>I don’t like essentially redefining functors here. It’s a recipe for duplication and confusion.</p>",
        "id": 171405443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563775012
    },
    {
        "content": "<p>Is there a coordinated approach to navigate ourselves out of this mess? We've been talking about sheafy things for more than a year, and mathlib still doesn't have them.<br>\nI'm fine with ignoring sites for the moment. There is loads of interesting stuff to say about sheaves on topological spaces.</p>",
        "id": 171406066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563775876
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">germ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hxU</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">germ</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">germ</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g1</span> <span class=\"n\">g2</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">≤</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">≤</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"n\">H1</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"n\">H2</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">g1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"n\">g3</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">H4</span><span class=\"o\">,</span> <span class=\"n\">H5</span><span class=\"o\">,</span> <span class=\"n\">H6</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">inf_le_left</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">inf_le_right</span> <span class=\"n\">H5</span><span class=\"o\">,</span>\n      <span class=\"k\">calc</span>  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">inf_le_left</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">s</span>\n          <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"n\">H1</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_res</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"n\">H2</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">H3</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">H4</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_res</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_res</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">g3</span><span class=\"bp\">.</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">H5</span> <span class=\"n\">g3</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">H6</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">g3</span><span class=\"bp\">.</span><span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">inf_le_right</span> <span class=\"n\">H5</span><span class=\"o\">)</span> <span class=\"n\">g3</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_res</span><span class=\"bp\">⟩⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">germ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">stalk</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">germ</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_stalk</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxU</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"err\">⟦</span><span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span><span class=\"err\">⟧</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">to_stalk_res</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxV</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">V</span> <span class=\"n\">hxV</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"n\">hxV</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">HVU</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"err\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">hxU</span> <span class=\"o\">:</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">U</span> <span class=\"n\">hxU</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">hpU</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"n\">U</span> <span class=\"n\">hpU</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">g</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">HS</span> <span class=\"n\">HT</span> <span class=\"n\">x</span> <span class=\"n\">hxST</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hsx</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">HS</span> <span class=\"n\">x</span> <span class=\"n\">hxST</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">htx</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">HT</span> <span class=\"n\">x</span> <span class=\"n\">hxST</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hxW</span><span class=\"o\">,</span> <span class=\"n\">HWU</span><span class=\"o\">,</span> <span class=\"n\">HWV</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hsx</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">htx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hxW</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"n\">HWU</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">to_stalk_res</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hsx</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">hqW</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">to_stalk_res</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">to_stalk_res</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ht</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">SS</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">htSS</span><span class=\"o\">,</span> <span class=\"n\">hxt</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_sUnion</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hsx</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">t</span> <span class=\"n\">htSS</span> <span class=\"n\">x</span> <span class=\"n\">hxt</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hsx</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_sUnion_of_mem</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">p</span> <span class=\"n\">hpU</span><span class=\"o\">)</span> <span class=\"n\">htSS</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">continuous_of_espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">of_espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">HU</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⟩</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">g</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hpV</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">HU</span><span class=\"bp\">⟩</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">hpV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"bp\">_</span> <span class=\"n\">inf_le_right</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">to_stalk_res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">hqUV</span><span class=\"o\">,</span> <span class=\"n\">hqUV</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 171421457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563793802
    },
    {
        "content": "<p>Kenny, you realise that presheaves and stalks are already in mathlib?</p>",
        "id": 171421618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563794000
    },
    {
        "content": "<p>But are those presheaves usable? Kenny has <a href=\"https://github.com/ramonfmir/lean-scheme/blob/master/src/Kenny/sheaf_of_rings_on_opens.lean\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme/blob/master/src/Kenny/sheaf_of_rings_on_opens.lean\">glued sheaves of rings</a> and proved the universal property. Last time I talked to Scott he was still trying to work out the best way to define a sheaf. The schemes project has a definition of presheaf which is not the same as the one in mathlib but we are miles ahead of mathlib and it is my firm belief that because the mathlib definition is not the best way of doing sheaves in dependent type theory, that gap is only set to grow.</p>",
        "id": 171426874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563799607
    },
    {
        "content": "<p>To define products of schemes we do it in the affine case and then glue the top space and glue the sheaves of rings. We need products and pullbacks etc to define cohomology. We have a system that works and is moving fast. You have a definition of a presheaf. Some serious decisions need to be made.</p>",
        "id": 171426994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563799710
    },
    {
        "content": "<p>I tried to <em>state</em> the construction of glueing presheaves of types using the mathlib language and it was a nightmare.</p>",
        "id": 171427038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563799771
    },
    {
        "content": "<p>I really don't understand this. Your definition of a presheaf is a special case of a contravariant functor. The mathlib definition is the same. I cannot see where the trouble lies.</p>",
        "id": 171427279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563799987
    },
    {
        "content": "<p>Sure, with the sheaf condition there might be trouble.</p>",
        "id": 171427298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563800000
    },
    {
        "content": "<p>I would very much like to see PR's going from the schemes project to mathlib. But I haven't seen any PR's apart from a 20 line thingy on kernels of ring morphisms.</p>",
        "id": 171427322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563800036
    },
    {
        "content": "<p>And I'm not saying that we have to use the category lib per se. But (i) avoiding duplication seems a good thing, and (ii) we'll need categorical machinery to build machines for cohomology theories. Unless we don't want those machines.</p>",
        "id": 171427461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563800132
    },
    {
        "content": "<p>I agree that we'll have to the the categorical language in the end.</p>",
        "id": 171427520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563800164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> are you going to PR glueing sheaves of rings?</p>",
        "id": 171427532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563800185
    },
    {
        "content": "<blockquote>\n<p>Sure, with the sheaf condition there might be trouble.</p>\n</blockquote>\n<p>We had no trouble at all with the sheaf condition. What is the trouble you are having? You say your presheaves are \"the same\" as ours but then sheaves might be trouble for you, and not for us?</p>",
        "id": 171427656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563800300
    },
    {
        "content": "<p>I mean that if you want to state the sheaf condition using categorical language, saying that some diagram is an equalizer.</p>",
        "id": 171427917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563800456
    },
    {
        "content": "<p>Kenny said he didn't like the <code>unop</code>s that our definition gave. Ok, I understand that. But that's life.</p>",
        "id": 171428060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563800529
    },
    {
        "content": "<p>We have lot's of annoying little things popping up in our goals that you can't see in maths.</p>",
        "id": 171428087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563800559
    },
    {
        "content": "<p>I don't like all the <code>to_additive</code> statements in mathlib. They are complete stupid. But it is the best solution we have.</p>",
        "id": 171428119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563800587
    },
    {
        "content": "<p>Kenny and Mario did a wonderful job with the gluing of sheaves thing. Now it should go to mathlib, instead of rot away on a Zulip thread.</p>",
        "id": 171428255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563800685
    },
    {
        "content": "<p>But they use a different definition of presheaf to the one in mathlib. I am not clear about how you want to take this forward.</p>",
        "id": 171433738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563804635
    },
    {
        "content": "<p>Is it different from the one Kenny is using in this thread? Because the one in this thread is only syntactically different from the one in mathlib.</p>",
        "id": 171436657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563806728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span>     <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">res</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hid</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcomp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"err\">∘</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171436748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563806790
    },
    {
        "content": "<p>Mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"err\">ᵒᵖ</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span>\n</pre></div>",
        "id": 171437001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563806990
    },
    {
        "content": "<p>But <code>⥤</code> expands to your <code>structure</code> (up to contravariance).</p>",
        "id": 171437085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563807038
    },
    {
        "content": "<p>so ours is slightly better for this use case because we don't have the <code>op</code> issues.</p>",
        "id": 171437242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807152
    },
    {
        "content": "<p>I don't know how serious they are to deal with though, I have never used categories seriously.</p>",
        "id": 171437292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807197
    },
    {
        "content": "<p>I can see Kenny's point of view though, he made what he needed in the simplest way and he knows how to work with it.</p>",
        "id": 171437418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807272
    },
    {
        "content": "<p>The issue that was holding me back was another one, namely the question on how to define a sheaf on an open subset of X.</p>",
        "id": 171437454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807303
    },
    {
        "content": "<p>Kenny just defined it to be a sheaf on X.</p>",
        "id": 171437476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807316
    },
    {
        "content": "<p>and then never used <code>=</code></p>",
        "id": 171437494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807328
    },
    {
        "content": "<p>Sure, but that is orthogonal to whether you use the category library.</p>",
        "id": 171437673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563807468
    },
    {
        "content": "<p>Kenny is just using the definition which is most convenient for doing what it is he wants to do</p>",
        "id": 171437748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807509
    },
    {
        "content": "<p>The category theory library offers this slightly more bundled experience and the added inconvenience of the ops.</p>",
        "id": 171437770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807532
    },
    {
        "content": "<p>I can see why he's chosen to do it this way.</p>",
        "id": 171437791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563807545
    },
    {
        "content": "<p>Do you already have the adjunction between ^* and _*?</p>",
        "id": 171438441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563807979
    },
    {
        "content": "<p>If you have that, I'll shut up.</p>",
        "id": 171438446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563807986
    },
    {
        "content": "<p>We only have pullback along an open map because we don't have sheafification.</p>",
        "id": 171438477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563808020
    },
    {
        "content": "<p>Wait -- are you asking about presheaves or sheaves? We don't define presheaf pullback</p>",
        "id": 171438502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563808043
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171438528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563808071
    },
    {
        "content": "<p>I'm asking about sheaves.</p>",
        "id": 171439077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563808461
    },
    {
        "content": "<p>But I think we want both.</p>",
        "id": 171439091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563808480
    },
    {
        "content": "<p>I'm not married to the category library. It's just that there's a bunch of general purpose tools there that I feel we are now duplicating. I think it might pay of to debug any problems that show up when using the category library. Because if we make the category lib usable, we can apply it in other situations as well.</p>",
        "id": 171439244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563808585
    },
    {
        "content": "<p>We haven't defined pullback because we haven't defined sheafification.</p>",
        "id": 171440737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563809605
    },
    {
        "content": "<p>I have a working local implementation of sheafification (for presheaves abelian groups). Can I help out with this somehow?</p>",
        "id": 171466155,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563828288
    },
    {
        "content": "<p>Did you prove the adjointness? :-) </p>\n<p>Here's the situation. Johan is concerned that an MSc student of mine came up with another definition of presheaf (following me, who defined a presheaf 18 months ago in Lean without knowing anything about how category theory worked in Lean). Now this is becoming an issue because there's another definition of presheaf in mathlib, but various Imperial students are just pushing ahead and developing a nice little theory of schemes mostly by themselves:</p>\n<p><a href=\"https://github.com/ramonfmir/lean-scheme\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme\">https://github.com/ramonfmir/lean-scheme</a></p>\n<p>The initial purpose of that repo was an MSc project, which is now done. Johan is concerned that if the work doesn't get PR'ed to mathlib it will bitrot; however it is using an incompatible definition of presheaf.  It would not surprise me if Kenny Lau was interested in your sheafification stuff. Which definition of presheaf did you use? :-)</p>",
        "id": 171470883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563831979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"231775\">@Brendan Seamas Murphy</span> Nice! Well done!</p>",
        "id": 171488482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563855835
    },
    {
        "content": "<p>Oh I haven't got the adjointness down (well I was planning on doing the universal property but I think that's the same thing)</p>",
        "id": 171488524,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563855872
    },
    {
        "content": "<p>I used the definition in the lean-schemes repo</p>",
        "id": 171488526,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563855881
    },
    {
        "content": "<p>Copied the ring stuff and changed the type classes</p>",
        "id": 171488529,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563855892
    },
    {
        "content": "<p>Thanks Johan!</p>",
        "id": 171488531,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563855897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Let me stress that in the end I don't really care about the shape and form of the solution. I would be very happy to (i) reach some synthesis sooner than later, and (ii) see things moving towards mathlib.</p>",
        "id": 171489040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563856849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I have \"relative\" sheafification</p>",
        "id": 171490301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563858934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you believe this work on gluing schemes should be in mathlib and do you have an opinion on the two definitions of presheaf?</p>",
        "id": 171501620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563872993
    },
    {
        "content": "<p>I would consult <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 171504587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563875989
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">to_stalk_res</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxV</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">V</span> <span class=\"n\">hxV</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"n\">hxV</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">HVU</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res_res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"err\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">espace_etale</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">U</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">hxU</span> <span class=\"o\">:</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">U</span> <span class=\"n\">hxU</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">hpU</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"n\">U</span> <span class=\"n\">hpU</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">g</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">HS</span> <span class=\"n\">HT</span> <span class=\"n\">x</span> <span class=\"n\">hxST</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hsx</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">HS</span> <span class=\"n\">x</span> <span class=\"n\">hxST</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">htx</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">HT</span> <span class=\"n\">x</span> <span class=\"n\">hxST</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hxW</span><span class=\"o\">,</span> <span class=\"n\">HWU</span><span class=\"o\">,</span> <span class=\"n\">HWV</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hsx</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">htx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hxW</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"n\">HWU</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">to_stalk_res</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hsx</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">hqW</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">to_stalk_res</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">to_stalk_res</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ht</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">SS</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">htSS</span><span class=\"o\">,</span> <span class=\"n\">hxt</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_sUnion</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hsx</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">t</span> <span class=\"n\">htSS</span> <span class=\"n\">x</span> <span class=\"n\">hxt</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hsx</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_sUnion_of_mem</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">p</span> <span class=\"n\">hpU</span><span class=\"o\">)</span> <span class=\"n\">htSS</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">continuous_of_espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">of_espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">HU</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⟩</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">g</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hpV</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">HU</span><span class=\"bp\">⟩</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">hpV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"bp\">_</span> <span class=\"n\">inf_le_right</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">to_stalk_res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">hqUV</span><span class=\"o\">,</span> <span class=\"n\">hqUV</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">continuous_to_espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">to_espace_etale</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">HS</span><span class=\"o\">,</span> <span class=\"n\">is_open_iff_forall_mem_open</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hqV</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">hts</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hqW</span><span class=\"o\">,</span> <span class=\"n\">HWV</span><span class=\"o\">,</span> <span class=\"n\">HWU</span><span class=\"o\">,</span> <span class=\"n\">HW</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">hts</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">W</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hpW</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:</span> <span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">to_stalk_res</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"n\">hpW</span> <span class=\"n\">HWU</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">HW</span><span class=\"o\">,</span> <span class=\"n\">to_stalk_res</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n<span class=\"n\">continuous_subtype_val</span> <span class=\"bp\">_</span> <span class=\"n\">W</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hqW</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">espace_etale</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"o\">(</span><span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">hxU</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">U</span> <span class=\"n\">hxU</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩⟩⟩</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_res</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">inv_fun</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">inv_fun</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_res</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">locality&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">U</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">locality</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">H</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"err\">$</span> <span class=\"n\">H</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"err\">$</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩⟩</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"err\">$</span> <span class=\"n\">H</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">locality&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">U</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">x</span> <span class=\"n\">U</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">x</span> <span class=\"n\">U</span> <span class=\"n\">H</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">locality&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">HVU</span><span class=\"o\">,</span> <span class=\"n\">HVU&#39;</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">hxU</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">HVU</span><span class=\"o\">,</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">germ</span><span class=\"bp\">.</span><span class=\"n\">eta</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">germ</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">germ</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span> <span class=\"err\">⊓</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span> <span class=\"err\">⊓</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">gluing</span> <span class=\"n\">U</span> <span class=\"n\">OC</span> <span class=\"n\">S</span> <span class=\"n\">H</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">res_glue</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"n\">U</span> <span class=\"n\">OC</span> <span class=\"n\">S</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">gluing</span> <span class=\"n\">U</span> <span class=\"n\">OC</span> <span class=\"n\">S</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">glue_eq</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"n\">U</span> <span class=\"n\">OC</span> <span class=\"n\">S</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">locality</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">OC</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">res_glue</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">to_stalk_glue</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_stalk</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">p</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">i</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"n\">U</span> <span class=\"n\">OC</span> <span class=\"n\">S</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_stalk</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H2</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">to_stalk_res</span><span class=\"bp\">;</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">res_glue</span>\n</pre></div>",
        "id": 171524227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563892475
    },
    {
        "content": "<p>Fundamental theorem of sheaf theory:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">equiv_continuous_section_espace_etale</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">continuous_section_subsheaf</span> <span class=\"o\">(</span><span class=\"n\">espace_etale</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_espace_etale</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_sheaf</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">to_espace_etale</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">continuous_to_espace_etale</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"n\">U</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"n\">espace_etale</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n        <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hv1</span><span class=\"o\">,</span> <span class=\"n\">hv2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">espace_etale</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n          <span class=\"o\">(</span><span class=\"n\">espace_etale</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">in</span>\n        <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hv2</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">image_preimage_val</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_open_inter</span> <span class=\"n\">hv1</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">hrq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hrq</span> <span class=\"bp\">▸</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hpU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hpU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hpU</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n        <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_stalk</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">germ</span><span class=\"bp\">.</span><span class=\"n\">eta</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out_eq</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩⟩</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hsr1</span><span class=\"o\">,</span> <span class=\"n\">hsr2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hrq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hrq</span> <span class=\"bp\">▸</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">r</span> <span class=\"bp\">▸</span> <span class=\"n\">hsr1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">locality&#39;&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hsu1</span><span class=\"o\">,</span> <span class=\"n\">hsu2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hur</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hsv1</span><span class=\"o\">,</span> <span class=\"n\">hsv2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hvr</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">hur</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hvr</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hsu</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">clear_</span><span class=\"o\">,</span> <span class=\"n\">iterate</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">to_stalk_res</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">substs</span> <span class=\"n\">huv</span> <span class=\"n\">hur</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">u</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">equiv_continuous_section_espace_etale</span><span class=\"bp\">._</span><span class=\"n\">match_3</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">u</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">equiv_continuous_section_espace_etale</span><span class=\"bp\">._</span><span class=\"n\">match_3</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">q</span> <span class=\"n\">u</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"n\">revert</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hsu</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">hsu2</span><span class=\"o\">,</span> <span class=\"n\">hsv2</span><span class=\"o\">]</span>\n      <span class=\"kn\">end</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">glue_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">locality&#39;&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hsu1</span><span class=\"o\">,</span> <span class=\"n\">hsu2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">huq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">clear_</span><span class=\"bp\">;</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">to_stalk_res</span><span class=\"o\">,</span> <span class=\"n\">to_stalk_res</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">huq</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hsu2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"k\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_espace_etale</span><span class=\"o\">],</span>\n    <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">to_espace_etale</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span> <span class=\"n\">U</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"n\">to_stalk_glue</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_stalk</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">germ</span><span class=\"bp\">.</span><span class=\"n\">eta</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out_eq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">erw</span> <span class=\"n\">to_stalk_res</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_stalk</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">germ</span><span class=\"bp\">.</span><span class=\"n\">eta</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out_eq</span><span class=\"o\">]</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun_res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"n\">to_stalk_res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 171524295,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563892526
    },
    {
        "content": "<p>thanks for attending my \"live\" coding session</p>",
        "id": 171524337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563892542
    },
    {
        "content": "<p>:-)</p>",
        "id": 171524350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563892547
    },
    {
        "content": "<p>Did you PR to lean-scheme?</p>",
        "id": 171524362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563892554
    },
    {
        "content": "<p>no</p>",
        "id": 171524368,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563892558
    },
    {
        "content": "<p>I mean push</p>",
        "id": 171524373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563892560
    },
    {
        "content": "<p>I would like to amalgamate this with the extra power of bundled top spaces at some point</p>",
        "id": 171524452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563892581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Thanks for sharing your coding session with us <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 171525986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563893590
    },
    {
        "content": "<p>What's the notation for <code>sum</code>? I don't know how to work it out without asking</p>",
        "id": 171526020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563893622
    },
    {
        "content": "<p>Which <code>sum</code>?</p>",
        "id": 171526036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563893635
    },
    {
        "content": "<p>Sum of types?</p>",
        "id": 171526041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563893638
    },
    {
        "content": "<p>yes</p>",
        "id": 171526063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563893642
    },
    {
        "content": "<p>disjoint union. I'm making a category, I think</p>",
        "id": 171526093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563893649
    },
    {
        "content": "<p>Does <code>\\oplus</code> work?</p>",
        "id": 171526095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563893650
    },
    {
        "content": "<p>Well, I'm making a partially ordered set. I'm assuming I can get a category from it.</p>",
        "id": 171526107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563893665
    },
    {
        "content": "<p>Yep, that's done by type class inference.</p>",
        "id": 171526123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563893681
    },
    {
        "content": "<p>Once you've imported the right files, of course.</p>",
        "id": 171526138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563893695
    },
    {
        "content": "<p>Do I just import the same files as in Scott's tutorial?</p>",
        "id": 171526166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563893717
    },
    {
        "content": "<p>I don't know where to look for information</p>",
        "id": 171526176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563893725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ git grep preorder <span class=\"p\">|</span> grep category_theory\nsrc/category_theory/category.lean:namespace preorder\nsrc/category_theory/category.lean:instance small_category <span class=\"o\">[</span>preorder α<span class=\"o\">]</span> : small_category α :<span class=\"o\">=</span>\nsrc/category_theory/category.lean:end preorder\n</pre></div>",
        "id": 171526667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563894027
    },
    {
        "content": "<p>So, it's in the most basic file, and you'll be fine.</p>",
        "id": 171526694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563894053
    },
    {
        "content": "<p>Are there any special functions for dealing with Prop-valued diagrams? I only care about maps from partial orders to Top and I'm having trouble defining functors because inductive props can't eliminate into type :-/</p>",
        "id": 171532006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563897443
    },
    {
        "content": "<p>If I want to do a simple diagram like one with three objects U, V, and U intersect V, and maps corresponding to inclusions, because I want to take a colimit, should I make the diagram category using props as homs or subsingletons?</p>",
        "id": 171535302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563899936
    },
    {
        "content": "<p>I want to glue open sets <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> over common open subsets <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">U_{ij}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> which are morally <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>U</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i\\cap U_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 171535332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563899964
    },
    {
        "content": "<p>Trying to define the functor I am stuck with goals like</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nA B C : Type,\nh : A = B ∨ A = C,\nb : B,\nc : C\n⊢ A\n</pre></div>",
        "id": 171535474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563900068
    },
    {
        "content": "<p>so I have to use classical.some in a situation where I don't feel like I need classicality.</p>",
        "id": 171535502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563900096
    },
    {
        "content": "<p>What do I do with a term of type <code>plift h</code> where h is a proposition? I want to do cases on it without dropping into Prop world.</p>",
        "id": 171536235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563900675
    },
    {
        "content": "<p><code>pilft.down</code> or something</p>",
        "id": 171536400,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563900829
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">⊕</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 171536466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563900861
    },
    {
        "content": "<p>Is that a thing?</p>",
        "id": 171536471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563900866
    },
    {
        "content": "<p>I'll have classical, noncomputable, anything you like.</p>",
        "id": 171536485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563900895
    },
    {
        "content": "<p>Yes</p>",
        "id": 171536525,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563900938
    },
    {
        "content": "<p>I've always found the definition of <code>up</code> and <code>down</code> rather beautiful.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Universe lifting operation from Sort to Type -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">up</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>(that's it). Is it proved to be a subsingleton?</p>",
        "id": 171536659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563901037
    },
    {
        "content": "<p><code>classical.choice $ h.down.elim (sum.inl \\circ plift.up) (sum.inr \\circ plift.up)</code> I think</p>",
        "id": 171536826,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563901139
    },
    {
        "content": "<p>I forgot some <code>nonempty.intro</code></p>",
        "id": 171536871,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563901182
    },
    {
        "content": "<p>Why do you need <code>plift</code>? I believe proofs as homs are allowed these days.</p>",
        "id": 171537172,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563901362
    },
    {
        "content": "<p>I thought I let type class inference turn my poset into a category and that's what I got. Let me check this again.</p>",
        "id": 171537215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563901415
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">⟶</span> <span class=\"n\">y</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Π (X : Type u) [_inst_3 : preorder X] (x y : X), x ⟶ y : Type (u+1)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 171537317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563901503
    },
    {
        "content": "<p>Maybe the library hasn't been updated to take advantage of this yet.</p>",
        "id": 171537325,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563901505
    },
    {
        "content": "<p>I'm on Xena, that's usually bleeding edge because I don't care if it doesn't compile any more. Future explorers can just see which commit of mathlib I was using at the time ;-)</p>",
        "id": 171537386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563901555
    },
    {
        "content": "<p>Maybe the preorder to category instance in bleeding edge hasn't been uodated</p>",
        "id": 171537470,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563901609
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">⊕</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"err\">$</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">down</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">∘</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">∘</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">∘</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">∘</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171537773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563901877
    },
    {
        "content": "<p>my \"live\" coding session can be found in <a href=\"https://github.com/kckennylau/Lean/blob/master/sheaf_fundamental.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/sheaf_fundamental.lean\">https://github.com/kckennylau/Lean/blob/master/sheaf_fundamental.lean</a></p>",
        "id": 171537805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563901912
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"n\">P</span> <span class=\"err\">⊕</span> <span class=\"n\">plift</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"err\">$</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">down</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">∘</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">∘</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">∘</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">∘</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Now I formalise the correct statement, and Chris' proof is so beautiful that the same proof proves the correct theorem</p>",
        "id": 171537876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563901956
    },
    {
        "content": "<p>Kenny I really think you should consider writing a lot of this in the language of lattices.</p>",
        "id": 171538065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563902040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"n\">p</span> <span class=\"err\">⊕</span> <span class=\"n\">plift</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">∘</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">∘</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171538120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563902052
    },
    {
        "content": "<p>When you bundled ideals, you really wanted to use lattices and I was quite anti the idea.</p>",
        "id": 171538130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563902063
    },
    {
        "content": "<p>But now I've started to use lattices I think it's a really good idea.</p>",
        "id": 171538138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563902072
    },
    {
        "content": "<p>The fact that mathematicians want to see a different symbol should not be the problem of the code designer. This is some translation issue which is coming later.</p>",
        "id": 171538184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563902114
    },
    {
        "content": "<p>These issues should be solved using controlled natural language stuff leaving Lean to be as latticey as it wants to be.</p>",
        "id": 171538223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563902159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Chris is right. This line should be changed: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category.lean#L137\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category.lean#L137\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category.lean#L137</a></p>",
        "id": 171539534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563903048
    },
    {
        "content": "<p>Changing it might break some other parts of mathlib, but the refactor should make things easier (-;</p>",
        "id": 171539560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563903073
    },
    {
        "content": "<p>Every time Patrick or I try something, there's always some issue. You guys need to do some recruitment. I thought Australians were experts at category theory?</p>",
        "id": 171540722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563903854
    },
    {
        "content": "<p>I can't refactor a library I've barely used. I am still staring at</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">cylinder</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Top</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"c1\">-- To define a map to the cylinder, we give a map to each factor.</span>\n<span class=\"c1\">-- `binary_fan.mk` is a helper method for constructing a `cone` over `pair X Y`.</span>\n<span class=\"n\">def</span> <span class=\"n\">cylinder_0</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">cylinder</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">binary_fan</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_pt</span> <span class=\"n\">X</span> <span class=\"err\">≫</span> <span class=\"n\">I_0</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>and thinking \"that's how you do <code>example (b : B) : A -&gt; A \\prod B := \\lam a, (a, b)</code> now is it? :-(</p>",
        "id": 171540889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563903976
    },
    {
        "content": "<p>The last time I tried to do modular forms in mathlib I had loads of issues (-; There was really nothing at all.</p>",
        "id": 171540914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563903997
    },
    {
        "content": "<p>Well, to be honest, in the example you give, you also have to include the fact that your easy definition is continuous.</p>",
        "id": 171541105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563904105
    },
    {
        "content": "<p>If you do that, I think the total count of characters won't be too far away from Scott's example.</p>",
        "id": 171541130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563904131
    },
    {
        "content": "<p>Do you think type class inference would do it?</p>",
        "id": 171541152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563904149
    },
    {
        "content": "<p>No, because <code>continuous</code> is not a class.</p>",
        "id": 171541171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563904168
    },
    {
        "content": "<p>Oh! Why not?</p>",
        "id": 171541197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563904187
    },
    {
        "content": "<p>I think we've had this discussion before</p>",
        "id": 171541215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563904197
    },
    {
        "content": "<p>So you are kind of elevating it to class status</p>",
        "id": 171541282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563904219
    },
    {
        "content": "<p>Ooh, and snap... <code>ulift $ plift</code> stuff for preorder cats is there to make the category small )-;</p>",
        "id": 171541296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563904230
    },
    {
        "content": "<p>I have no idea why <code>continuous</code> is not a class. But it was never done.</p>",
        "id": 171541315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563904249
    },
    {
        "content": "<p>I tried fixing the <code>preorder.category</code>, but Prop homs aren't small categories any more, so the limit stuff doesn't work because that is all on small categories.</p>",
        "id": 171541978,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563904663
    },
    {
        "content": "<p>Stupid non-cumulative universes <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 171542157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563904761
    },
    {
        "content": "<p>I guess we'll have to live with <code>uplift</code>... taking non-small limits comes with its own bucket of headaches.</p>",
        "id": 171542566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563904965
    },
    {
        "content": "<p>I'm trying to prove that my homsets are subsingletons and Lean is asking me whether the left inclusion <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi><mo>∩</mo><mi>U</mi><mo>→</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U\\cap U\\to U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span></span></span></span> is equal to the right inclusion.</p>",
        "id": 171555088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563913729
    },
    {
        "content": "<p>What am I supposed to say to that??</p>",
        "id": 171555097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563913740
    },
    {
        "content": "<p>They're definitely the same :-/</p>",
        "id": 171555108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563913748
    },
    {
        "content": "<p>I think I mustn't implement the hom sets as abstract types. I think I actually need to think about them as explicit functions and then I can extensionality.</p>",
        "id": 171555228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563913836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I don't know how to steer the category theory library. All I want to do is glue a bunch of unbundled top spaces together. I need to make the appropriate category. The objects I can make. For the morphisms I tried first making a partial order on the objects and then making the associated small category, and I was forever having to deal with goals like <code>plift (X or Y)</code> not being able to decompose easily. I'm now trying to build the morphisms but I can't prove that hom sets are subsingletons and I don't know whether I should be trying to do that or not.</p>",
        "id": 171556026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563914488
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"c1\">-- Want to create X from an open cover U_i, as a colimit.</span>\n<span class=\"c1\">-- So we&#39;re given the U_i for i in an index type I, and</span>\n<span class=\"c1\">-- also the &quot;glue&quot;</span>\n\n<span class=\"c1\">-- unbundled data</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">i</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- index type</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Uij</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Uij</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">inc_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">Uij</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Ui</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc_l_cts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inc_l</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">inc_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">Uij</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Ui</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc_r_cts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inc_r</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_I</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_glue</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">J</span>\n\n<span class=\"c1\">-- In general, things are easier if homs are props.</span>\n<span class=\"c1\">-- But in category theory I had problems defining maps</span>\n<span class=\"c1\">-- from a proppyhom category because I was always having</span>\n<span class=\"c1\">-- to solve goals of the form plift (X ∨ Y) -&gt; plift X ⊕ plift Y.</span>\n<span class=\"c1\">-- So I gave up on</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">inductive le : J I → J I → Prop</span>\n<span class=\"cm\">| refl (j : J I) : le j j</span>\n<span class=\"cm\">| res_l (i₁ i₂ : I) : le (of_I i₁) (of_glue i₁ i₂)</span>\n<span class=\"cm\">| res_r (i₁ i₂ : I) : le (of_I i₂) (of_glue i₁ i₂)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- and went for homs in Type u.</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">j</span> <span class=\"n\">j</span>\n<span class=\"bp\">|</span> <span class=\"n\">res_l</span> <span class=\"o\">(</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">of_I</span> <span class=\"n\">i₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_glue</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">res_r</span> <span class=\"o\">(</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">of_I</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_glue</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">hom</span>\n\n<span class=\"n\">def</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">I</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">I</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">hom</span> <span class=\"n\">I</span> <span class=\"n\">X</span> <span class=\"n\">Z</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- these next lines should match the line above, right?</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">of_I</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_glue</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_glue</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">res_l</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">of_glue</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">res_l</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">of_I</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_glue</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_glue</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">res_r</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">of_glue</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">res_r</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">category_struct</span> <span class=\"o\">:</span> <span class=\"n\">category_struct</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"n\">hom</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">I</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- wait this might not actually be true. Is res_l i i equal to res_r i i?</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Do I care about subsingletons?</p>",
        "id": 171556497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563914845
    },
    {
        "content": "<p>Is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi><mo>∩</mo><mi>U</mi><mo>=</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U\\cap U=U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span></span></span></span> abstractly or not?</p>",
        "id": 171556531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563914871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> if I just want to mimic taking the union of some subspaces of a topological space as a colimit, what diagram should I use?</p>",
        "id": 171560569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563918287
    },
    {
        "content": "<p>Making <code>hom</code> live in Type like that is actually a big difference than making it live in Prop and applying <code>plift</code> to the result. <code>hom</code> is not a subsingleton; your statement in the comment is false</p>",
        "id": 171562459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563920363
    },
    {
        "content": "<p>It's just not true; the category you're defining does not have subsingleton homsets.</p>",
        "id": 171569015,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563928578
    },
    {
        "content": "<p>Do I care? Maybe I just decide not to care at this point</p>",
        "id": 171585026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563954011
    }
]