[
    {
        "content": "<p>In mathematics, people constantly invoke the idea that an object is \"defined up to unique isomorphism\".</p>",
        "id": 124877520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351631
    },
    {
        "content": "<p>I have seen this really full in the face in my work on schemes</p>",
        "id": 124877560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351651
    },
    {
        "content": "<p>I am defining a certain gadget in algebraic geometry called \"the structure sheaf on an affine scheme\"</p>",
        "id": 124877565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351701
    },
    {
        "content": "<p>and in the mathematics literature it typically goes like this: \"the open set is of the form <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>f</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> (f is an element of a ring) and define the structure sheaf on this set to be <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span>\" (this is just some ring)</p>",
        "id": 124877586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351762
    },
    {
        "content": "<p>and the catch is that the open set can be of the form <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>g</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> for other elements <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span> of the ring</p>",
        "id": 124877624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351781
    },
    {
        "content": "<p>but <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> are isomorphic</p>",
        "id": 124877627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351820
    },
    {
        "content": "<p>and moreover there is a unique isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> which has some properties, and this is the isomorphism which mathematicians use to hide behind the issue that they have not actually defined the structure sheaf on this open set.</p>",
        "id": 124877637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351868
    },
    {
        "content": "<p>Now if this isomorphism were an equality, then <code>eq.rec</code> would be really helpful</p>",
        "id": 124877682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351935
    },
    {
        "content": "<p>because I would be able to promote a claim involving <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span> to a claim involving any <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 124877691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351958
    },
    {
        "content": "<p>But it's not an equality -- <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> are most definitely different types</p>",
        "id": 124877697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523351991
    },
    {
        "content": "<p>You can make it into an equality, by taking a quotient on the ring extensions.  Not sure this makes it any simpler, though.</p>",
        "id": 124877700,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523351999
    },
    {
        "content": "<p>However there is a special map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo><mo>→</mo><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]\\to R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 124877755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352019
    },
    {
        "content": "<p>which I can produce</p>",
        "id": 124877760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352027
    },
    {
        "content": "<p>with an inverse</p>",
        "id": 124877764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352038
    },
    {
        "content": "<p>and I think what I want is a recursor which enables me to effortlessly change between these rings</p>",
        "id": 124877771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352062
    },
    {
        "content": "<p>and just push through all the theorems I want</p>",
        "id": 124877779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352076
    },
    {
        "content": "<p>from theorems about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 124877780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352086
    },
    {
        "content": "<p>Hmm, do you care about elements of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 124877781,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523352098
    },
    {
        "content": "<p>to theorems about any choice of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 124877782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352101
    },
    {
        "content": "<p>I do care about elements of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 124877786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352109
    },
    {
        "content": "<p>however</p>",
        "id": 124877823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352124
    },
    {
        "content": "<p>because I am doing maths and not type theory</p>",
        "id": 124877826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352132
    },
    {
        "content": "<p>there is some sort of implicit understanding</p>",
        "id": 124877827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352141
    },
    {
        "content": "<p>that any theorem I prove will only depend on my object up to \"canonical isomorphism\"</p>",
        "id": 124877831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352156
    },
    {
        "content": "<p>and the map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo><mo>→</mo><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]\\to R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> is a canonical isomorphism</p>",
        "id": 124877834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352177
    },
    {
        "content": "<p>The word \"canonical\" does not have a general definition, but in any given case one can supply one</p>",
        "id": 124877840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352194
    },
    {
        "content": "<p>for example in this case I can supply some technical maths definition of the form \"the unique map with some property\"</p>",
        "id": 124877844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352207
    },
    {
        "content": "<p>But I do have maps between products of such rings and want to make claims about sets of elements which go to certain other sets of elements</p>",
        "id": 124877891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352263
    },
    {
        "content": "<p>And whilst I have not yet embarked upon writing what will be the last proof that I will need for proving that an affine scheme is a scheme</p>",
        "id": 124877897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352290
    },
    {
        "content": "<p>I have planned the proof</p>",
        "id": 124877898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352297
    },
    {
        "content": "<p>and I know that at some point I will have to replace <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> and instantly I will be hit with 10 proof obligations</p>",
        "id": 124877908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352318
    },
    {
        "content": "<p>all of which will be of the form \"you need to check that the composite of this canonical map with this canonical map is this canonical map\"</p>",
        "id": 124877913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352354
    },
    {
        "content": "<p>I know how to prove all of these things</p>",
        "id": 124877914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352361
    },
    {
        "content": "<p>but I was idly wondering whether I could set up the infrastructure more cleverly</p>",
        "id": 124877954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352375
    },
    {
        "content": "<p>because I have just been reading about UniMath</p>",
        "id": 124877958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352404
    },
    {
        "content": "<p>and I see that equality is not a Prop there</p>",
        "id": 124877959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352412
    },
    {
        "content": "<p>and indeed equality is much more strongly related to equiv than in DTT</p>",
        "id": 124877967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352427
    },
    {
        "content": "<p>which made me think that maybe I was missing a trick here.</p>",
        "id": 124877970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352443
    },
    {
        "content": "<p>I think that perhaps the way forward here is to actually write the proof</p>",
        "id": 124878015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352492
    },
    {
        "content": "<p>and when the explosion of obligations occurs</p>",
        "id": 124878016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352502
    },
    {
        "content": "<p>to really think about the simp lemmas I need to kill all of them</p>",
        "id": 124878019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352514
    },
    {
        "content": "<p>(or maybe they won't be valid lemmas for simp)</p>",
        "id": 124878020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352528
    },
    {
        "content": "<p>and then to ask again.</p>",
        "id": 124878024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352536
    },
    {
        "content": "<p>is <code>transfer</code> as written for the integers at all helpful? here's the paper from isabelle (<a href=\"https://www21.in.tum.de/~kuncar/documents/huffman-kuncar-cpp2013.pdf\" target=\"_blank\" title=\"https://www21.in.tum.de/~kuncar/documents/huffman-kuncar-cpp2013.pdf\">https://www21.in.tum.de/~kuncar/documents/huffman-kuncar-cpp2013.pdf</a>)</p>",
        "id": 124878029,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523352544
    },
    {
        "content": "<p><code>transfer</code> is not only for integers</p>",
        "id": 124878033,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523352561
    },
    {
        "content": "<p>of course, i only meant in lean that's where you'll find it used</p>",
        "id": 124878036,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523352595
    },
    {
        "content": "<p>At first glance, this looks like it might be the sort of thing I need</p>",
        "id": 124878085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352634
    },
    {
        "content": "<p>there are still many things are missing. I never continued to work on it, I think with all the subtypes and quotient types we have now it may worth a try</p>",
        "id": 124878097,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523352667
    },
    {
        "content": "<p>Here is a toy example of the kind of thing I might need</p>",
        "id": 124878101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352692
    },
    {
        "content": "<p>It is ridiculous to continually write <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span>, I may as well write <code>X f</code> where <code>f : R</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring but may as well be a type) and <code>X : Π (f : R), Type</code></p>",
        "id": 124878164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352814
    },
    {
        "content": "<p>There is an equivalence relation on <code>R</code>, and if <code>f</code> and <code>g</code> are equivalent then, in my language, <code>X f</code> and <code>X g</code> are canonically isomorphic.</p>",
        "id": 124878215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352896
    },
    {
        "content": "<p>This means in practice that if <code>f</code> and <code>g</code> are equivalent then there is a map <code>Y f g : X f -&gt; X g</code></p>",
        "id": 124878225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352938
    },
    {
        "content": "<p>satisfying <code>Y f f = id</code></p>",
        "id": 124878226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352951
    },
    {
        "content": "<p>and <code>Y f g</code> composed with <code>Y g h</code> equals <code>Y f h</code></p>",
        "id": 124878261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523352963
    },
    {
        "content": "<p>Now I might have maps <code>X f₁ -&gt; X f₂</code> and <code>X f₂ -&gt; X f₃</code> and a theorem saying that the image of the first map is precisely the preimage of <code>0</code> of the second map</p>",
        "id": 124878275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353051
    },
    {
        "content": "<p>(X f is a ring and Y f g sends 0 to 0)</p>",
        "id": 124878277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353073
    },
    {
        "content": "<p>and now I want to know _immediately_ that if <code>f_1</code> is equivalent to <code>g_1</code> etc</p>",
        "id": 124878321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353102
    },
    {
        "content": "<p>then the image of <code>X g_1 -&gt; X g_2</code> equals the preimage of 0 in <code>X g_2 -&gt; X g_3</code></p>",
        "id": 124878322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353130
    },
    {
        "content": "<p>The proof in Lean is a diagram chase</p>",
        "id": 124878337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353158
    },
    {
        "content": "<p>but I have a gazillion of such diagram chases</p>",
        "id": 124878339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353169
    },
    {
        "content": "<p>I want the proof to be a tactic or something</p>",
        "id": 124878341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353176
    },
    {
        "content": "<p>I want the proof to follow from some foundational properties which I do not need to invoke explicitly.</p>",
        "id": 124878378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353203
    },
    {
        "content": "<p>That's what going on in my head as a mathematician</p>",
        "id": 124878390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353213
    },
    {
        "content": "<p>I don't want to have to invoke lemmas from the mathlib set files</p>",
        "id": 124878391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353225
    },
    {
        "content": "<p>I want to say that this is all obvious</p>",
        "id": 124878395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353242
    },
    {
        "content": "<p>What about using the limit ring?</p>",
        "id": 124878397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353257
    },
    {
        "content": "<p>Yes, the projective limit. I have considered this</p>",
        "id": 124878402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353271
    },
    {
        "content": "<p>But do you think that this is what mathematicians do?</p>",
        "id": 124878405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353286
    },
    {
        "content": "<p>I am not so sure</p>",
        "id": 124878406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353293
    },
    {
        "content": "<p>This is what they do when then get cornered</p>",
        "id": 124878409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353309
    },
    {
        "content": "<p>I have seen Lean do impressive things</p>",
        "id": 124878410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353312
    },
    {
        "content": "<p>But not otherwise</p>",
        "id": 124878412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353315
    },
    {
        "content": "<p>automatically</p>",
        "id": 124878413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353315
    },
    {
        "content": "<p>I have seen quite complex goals being solved by refl because I set stuff up right</p>",
        "id": 124878457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353339
    },
    {
        "content": "<p>but this will not be refl because <code>X f</code> is not _equal_ to <code>X g</code></p>",
        "id": 124878459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353357
    },
    {
        "content": "<p>Can you see my point Patrick? If <code>X f_i</code> were _equal_ to <code>X g_i</code> then this [image = kenel] would be refl</p>",
        "id": 124878471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353390
    },
    {
        "content": "<p>and they're not equal, but they're sufficiently equal that everything that I will be doing with them would yield to some analogue of refl</p>",
        "id": 124878484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353434
    },
    {
        "content": "<p>I think that's my point. I have seen the power of <code>rfl</code> and I want it more generally</p>",
        "id": 124878534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353493
    },
    {
        "content": "<p>and I don't see why I can't have something like it here</p>",
        "id": 124878547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353531
    },
    {
        "content": "<p>because I must be only using some specific collection of ideas which are invariant under canonical isomorphism</p>",
        "id": 124878550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353555
    },
    {
        "content": "<p>and I would love to just be able to write down these ideas in this specific case and then just get everything for free</p>",
        "id": 124878594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353590
    },
    {
        "content": "<p>Of course we all want magic for free</p>",
        "id": 124878613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353639
    },
    {
        "content": "<p>But <code>rfl</code> magic is very special. It's meta-theoretic magic</p>",
        "id": 124878619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353662
    },
    {
        "content": "<p>eq.refl is just some constructor</p>",
        "id": 124878664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353693
    },
    {
        "content": "<p>Definitional (or judgemental) equality is not inside type theory</p>",
        "id": 124878671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353717
    },
    {
        "content": "<p>(I suspect Kevin wants univalence here, but having read the HoTT book doesn't seem to qualify me to speak coherent sentences about univalence in practice...)</p>",
        "id": 124878681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523353747
    },
    {
        "content": "<p><code>eq.refl</code> is something else</p>",
        "id": 124878689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353783
    },
    {
        "content": "<p>You could try to write a proof and then see if some tactic could help. But the mathematical way to solve this problems seems to be using the projective limit</p>",
        "id": 124878740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353839
    },
    {
        "content": "<p>It doesn't solve the problem</p>",
        "id": 124878742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353857
    },
    {
        "content": "<p>The fact that we don't need it in the real world is the power of sloppy maths discussion</p>",
        "id": 124878743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523353858
    },
    {
        "content": "<p>does it?</p>",
        "id": 124878744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353861
    },
    {
        "content": "<p>It just moves the work I think</p>",
        "id": 124878748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353866
    },
    {
        "content": "<p>I prove that some image equals some kernel</p>",
        "id": 124878752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353881
    },
    {
        "content": "<p>wait</p>",
        "id": 124878754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353890
    },
    {
        "content": "<p>the theorem I have is that the image equals the kernel in the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span> world</p>",
        "id": 124878757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353907
    },
    {
        "content": "<p>I then have to promote this theorem to the projective limit world</p>",
        "id": 124878800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353940
    },
    {
        "content": "<p>so I get some canonical object which depends only on the equivalence class of <code>f</code> and is canonically isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 124878801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353976
    },
    {
        "content": "<p><code>X f</code></p>",
        "id": 124878806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523353983
    },
    {
        "content": "<p>and now I still have to prove that the image equals the kernel in the projective limit world</p>",
        "id": 124878819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354004
    },
    {
        "content": "<p>the only difference being that before <code>X g</code> depended on <code>g</code>, known to be in the same equivalence class of <code>f</code>, whereas now I have some new object <code>X-univ [[f]]</code> which depends only on the equivalence class of <code>f</code></p>",
        "id": 124878875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354067
    },
    {
        "content": "<p>You need to do the full proof in the limit world</p>",
        "id": 124878878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523354088
    },
    {
        "content": "<p>I guess</p>",
        "id": 124878880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523354092
    },
    {
        "content": "<p>that can't happen</p>",
        "id": 124878881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354097
    },
    {
        "content": "<p>the proof only works</p>",
        "id": 124878885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354103
    },
    {
        "content": "<p>in the world where I have one f</p>",
        "id": 124878888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354108
    },
    {
        "content": "<p>because the proof depends on f</p>",
        "id": 124878889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354113
    },
    {
        "content": "<p>The maps don't</p>",
        "id": 124878890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354116
    },
    {
        "content": "<p>but the proof does</p>",
        "id": 124878891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354121
    },
    {
        "content": "<p>the proof of exactness</p>",
        "id": 124878892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354124
    },
    {
        "content": "<p>What are you proving exactly?</p>",
        "id": 124878894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523354129
    },
    {
        "content": "<p>I want to go from this:</p>",
        "id": 124878896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354146
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/00EJ\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/00EJ\">https://stacks.math.columbia.edu/tag/00EJ</a></p>",
        "id": 124878938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354173
    },
    {
        "content": "<p>to the statement that the sheaf axiom holds for finite covers of Spec(R) by basic open sets of the form D(f_i)</p>",
        "id": 124878949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354207
    },
    {
        "content": "<p>and the proof is \"those two statements say the same thing\"</p>",
        "id": 124878957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354225
    },
    {
        "content": "<p>just like Chris' lemma the other day which he found hard to prove, which was that sum from 1 to n of f(i) equalled sum from 1 to n of f(i) formalised in a different way</p>",
        "id": 124878976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354270
    },
    {
        "content": "<p>But the problem is that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> is an open set which equals <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>f</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span></p>",
        "id": 124879020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354312
    },
    {
        "content": "<p>then it is almost certainly equal to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>g</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> for lots of other <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span></p>",
        "id": 124879024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354336
    },
    {
        "content": "<p>and I am not allowed to define the global sections on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>f</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> to be <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 124879033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354373
    },
    {
        "content": "<p>because this involves choosing <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>.</p>",
        "id": 124879035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354383
    },
    {
        "content": "<p>So like you say I can do some projective limit construction over all <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>f</mi><mo>)</mo><mo>=</mo><mi>D</mi><mo>(</mo><mi>g</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(f)=D(g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 124879080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354414
    },
    {
        "content": "<p>[the equivalence relation on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is that <code>f</code> and <code>g</code> are equivalent iff <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>f</mi><mo>)</mo><mo>=</mo><mi>D</mi><mo>(</mo><mi>g</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(f)=D(g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>]</p>",
        "id": 124879084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354441
    },
    {
        "content": "<p>or I could also do some construction involving inverting all <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span> which are non-vanishing on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span></p>",
        "id": 124879091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354464
    },
    {
        "content": "<p>and either way I get a new ring which is not definitionally equal to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 124879096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354477
    },
    {
        "content": "<p>but which is uniquely isomorphic to it as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra</p>",
        "id": 124879099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354485
    },
    {
        "content": "<p>and now I have to push the diagram chase over</p>",
        "id": 124879102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354513
    },
    {
        "content": "<p>It's just a little thing</p>",
        "id": 124879103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354517
    },
    {
        "content": "<p>but I feel like it's some variant of <code>rfl</code></p>",
        "id": 124879145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354534
    },
    {
        "content": "<p>\"you're only chasing around images and kernels of maps, so everything is fine if you replace your rings with isomorphic rings\"</p>",
        "id": 124879147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523354559
    },
    {
        "content": "<blockquote>\n<p>\"you're only chasing around images and kernels of maps, so everything is fine if you replace your rings with isomorphic rings\"</p>\n</blockquote>\n<p>I though about this, and I think you are cheating a bit here. You still need the maps in your exact sequence to commute with your canonical isomorphisms. I think you can only hope for automation if you have a really fancy categorical way of defining both your canonical isomorphisms <em>and</em> the maps entering the exact sequence. Otherwise you can still define standard open subsets as equivalence classes of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, the associated system of rings <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span></span></span></span>, and the sheaf on such an open subsets as the limit of this system. And you can have many lemmas about diagrams of rings (or modules), their limits and how to build exact sequences of limits out of exact sequences and commutation relations. Actually this should probably all be provided by <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span>'s category theory lib.</p>",
        "id": 124880478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523357346
    },
    {
        "content": "<p>(getting there...)</p>",
        "id": 124880767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523357952
    },
    {
        "content": "<p>My maps are also \"canonical\" in the sense that they are \"built from\" the unique R-algebra maps between these rings.</p>",
        "id": 124880888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523358175
    },
    {
        "content": "<p>By which I mean the map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo><mo>→</mo><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f]\\to R[1/fg]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> is the unique <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra map, and then everything is put together just from such maps in such a way as to not break anything.</p>",
        "id": 124880941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523358280
    },
    {
        "content": "<p>Maybe this is going towards telling me exactly which lemmas I need to prove.</p>",
        "id": 124880951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523358308
    },
    {
        "content": "<p>Two weeks later and I have all the infrastructure I need to prove that all my diagrams commute painlessly</p>",
        "id": 125763232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815547
    },
    {
        "content": "<p>In particular, Patrick said \"I though about this, and I think you are cheating a bit here. You still need the maps in your exact sequence to commute with your canonical isomorphisms.\", and he's right, and I now have this</p>",
        "id": 125763237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815584
    },
    {
        "content": "<p>so now I start the painful task of taking some exact sequence, replacing every term with an isomorphic term, and then proving that it's still exact</p>",
        "id": 125763243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815641
    },
    {
        "content": "<p>not painful because it's hard, but painful because it's obvious :-)</p>",
        "id": 125763283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815659
    }
]