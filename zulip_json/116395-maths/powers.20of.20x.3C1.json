[
    {
        "content": "<p>We have that in a normed field <code>K</code> the power function with basis bigger than <code>1</code> is (strictly) monotone, but I think we don't have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zpow_strict_anti</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">strict_anti</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">inv_inv₀</span> <span class=\"n\">x</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inv_zpow₀</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">inv_lt_inv</span> <span class=\"o\">(</span><span class=\"n\">zpow_pos_of_pos</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">hx₀</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zpow_pos_of_pos</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">hx₀</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zpow_strict_mono</span> <span class=\"o\">(</span><span class=\"n\">one_lt_inv</span> <span class=\"n\">hx₀</span> <span class=\"n\">hx₁</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Unless my proof is really horrible, <code>zpow_strict_anti </code>does not seem to me to be an immediate consequence of <code>zpow_strict_mono</code>. In general, many results in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/integer-power-operation-on-fields-and-division-rings\">docs#integer-power-operation-on-fields-and-division-rings</a> only treat the case <code>x&gt;1</code>; so I was thinking about a general tool containing the first three lines of my proof above, automatically converting all these results  into the corresponding one for <code>0&lt;x&lt;1</code>. Is it a good idea?</p>",
        "id": 265779591,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1640163211
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zpow_strict_anti\">docs#zpow_strict_anti</a></p>",
        "id": 265854641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640208284
    },
    {
        "content": "<p>I added it in <a href=\"https://github.com/leanprover-community/mathlib/pull/10895\">#10895</a></p>",
        "id": 265854866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640208388
    },
    {
        "content": "<p>Thanks</p>",
        "id": 265899760,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1640252643
    }
]