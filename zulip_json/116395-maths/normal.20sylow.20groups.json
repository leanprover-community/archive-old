[
    {
        "content": "<p>A math questions (but with a hint of “which proof might be easiest to do”).<br>\nI’m in the process of proving various definitions for <code>nilpotent</code> equivalent (for finite groups).<br>\nI already have nilpotent → normalizer condition → all max subgroups are normal.<br>\nNow I want to prove that all sylow subgroups are normal.<br>\n<a href=\"https://en.wikipedia.org/wiki/Nilpotent_group#Properties\">Wikipedia</a> goes from “normalizer condition” to that directly, but I found the proofs on that page to be too vague to be very helpful, and had more luck on the groupprops wiki. There, <a href=\"https://groupprops.subwiki.org/wiki/Equivalence_of_definitions_of_finite_nilpotent_group\">the list of equivalente conditions</a> puts “all max groups normal” before “all sylow groups normal”, and I wonder if that hints at a simple proof of that implication. But it’s not clear to me if that implication really holds (or rather, it certainly holds, they are all equivalent, but whether there is a small proof). Sylow subgroups need not be maximal, right? But maybe there is a simple argument?</p>",
        "id": 268963835,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642866671
    },
    {
        "content": "<p>You're correct that Sylow groups definitely don't need to be maximal: think about the direct sum of three cyclic groups of different prime orders.</p>",
        "id": 268965382,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642868601
    },
    {
        "content": "<p>Ok, guess I should then go from “normalizer condition” to “sylow groups normal”. The argument seems to go via characteristic subgroups, so I might need some extra lemmas about characteristic</p>",
        "id": 268965825,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642869302
    },
    {
        "content": "<p>What do you think about the proof of <a href=\"http://www.math.buffalo.edu/~badzioch/MTH619/Lecture_Notes_files/MTH619_week8.pdf\">24.18 Theorem here</a>?</p>",
        "id": 268965997,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642869577
    },
    {
        "content": "<p>Mathlib knows that characteristic subgroups of normal subgroups are characteristic, so you just need to know that normal sylow subgroups are characteristic.<br>\nYou could also prove (normalizer condition) -&gt; (sylow subgroups normal) from the useful fact N_G(N_G(P))=N_G(P), which can be proved from Frattini's argument (which is already in mathlib).</p>",
        "id": 268969826,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1642874679
    },
    {
        "content": "<p>To spell the latter proof out a bit more:<br>\nLemma 1: If <code>P</code> is a Sylow <code>p</code>-subgroup of <code>G</code>, and if <code>N_G(P)</code> is a normal subgroup of <code>G</code>, then <code>N_G(P) = G</code>.<br>\nProof: Frattini's argument (#sylow.normalizer_sup_eq_top) gives <code>N_G(P) ⊔ N_G(P) = G</code>. It follows that <code>N_G(P) = G</code>.</p>\n<p>Lemma 2: If <code>P</code> is a Sylow <code>p</code>-subgroup of <code>G</code>, then <code>N_G(N_G(P))=N_G(P)</code><br>\nProof: Let <code>H = N_G(N_G(P))</code>. Then <code>P</code> is a Sylow <code>p</code>-subgroup of <code>H</code>, and <code>N_H(P)=N_G(P)</code> is a normal subgroup of <code>H</code>, so Lemma 1 gives <code>N_H(P)=H</code>, so <code>N_G(P)=N_G(N_G(P))</code>.<br>\n(This proof might be a bit fiddly to formalize in Lean, due to the passing back and forth between <code>G</code> and <code>H</code>)</p>\n<p>From here it's easy to go from \"normalizers grow\" to \"sylow subgroups normal\"</p>",
        "id": 268970312,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1642875342
    },
    {
        "content": "<p>Thanks for the hints! Should be enough to get me going :-)</p>",
        "id": 268970383,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642875387
    },
    {
        "content": "<p>I am trying to find a function given <code>P : sylow p G</code> and <code>P.1 &lt; N</code>, it’s unclear to me how to consider <code>P</code> a sylow subgroup of `N. Are the definitions for that missing?</p>\n<p>If so, would this be a good start?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P.1</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n   <span class=\"o\">⟨</span> <span class=\"n\">comap</span> <span class=\"n\">N.subtype</span> <span class=\"n\">P.1</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span> <span class=\"gr\">sorry</span> <span class=\"kd\">end</span> <span class=\"o\">,</span>\n    <span class=\"kd\">begin</span> <span class=\"gr\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 269014175,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642939438
    },
    {
        "content": "<p>I am not very deep in this, but as I see it, it should be easy to prove if you know that <code>N.subtype</code> is injective (which doesn't seem to be in the library?). Then $p$-groupness should be in the library and maximality should be pretty easy.</p>",
        "id": 269015569,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642941492
    },
    {
        "content": "<p>Right, I’m not worried about the proofs (yet :-)), merely checking back that this is the right way to define this conversion.</p>",
        "id": 269015924,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642942054
    },
    {
        "content": "<p>The statement itself looks fine to me: maybe you would also need the iso, but the iso should really be defined for <code>N.subtype</code> as I said.</p>",
        "id": 269016338,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642942635
    },
    {
        "content": "<p>Indeed easy to get lost passing back and forth between <code>G</code> and <code>H</code>. I do that by applying <code>comap H.subtype</code> to go from the subgroups of <code>G</code> to the subgroups of <code>H</code>. In particular your <code>N_H(P)=N_H(P)</code> in Lemma 2, which seems to elaborate to <code>N_H(comap H.subtype P) = comap H.subtype(N_G(P))</code> is not a trivial result, it seems to me.<br>\nI could prove <code>H ≤ P.normalizer → comap H.subtype P.normalizer = (comap H.subtype P).normalizer</code> for any subgroup <code>P</code>, but the inequality in the assumption goes the wrong way.</p>",
        "id": 269019590,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642946993
    },
    {
        "content": "<p>Look like some Sylow API is needed for passing back and forth between <code>G</code> and <code>H</code>, but I agree that it will be messy either way. The relevant lemmas are the <code>is_p_group.map</code> and <code>is_p_group.comap</code> lemmas in <code>p_group.lean</code>.</p>",
        "id": 269029579,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1642959648
    },
    {
        "content": "<p>I think that this kind of problem is fascinating. I used to think it was really annoying -- you're in a situation here where in set theory the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>⊆</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">P\\subseteq G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> and the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>⊆</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">P\\subseteq N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> are actually <em>the same object</em>, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>⊆</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">N\\subseteq G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>. In type theory they're not, and I used to think that this was a serious problem; however now I think that in fact it's just a case of keeping your head and making sure the API is there. Once you've got over the fact that the two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> s aren't the same, but you know that they're isomorphic, this should be enough to make a <em>messy</em> proof. And then the art is to turn the messy proof into a more beautiful proof by writing the API which is required to make it clean.</p>",
        "id": 269030386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642960622
    },
    {
        "content": "<p>Another approach is to replace the subgroups with an injective homomorphism. This way you have only one <code>P</code>, but get some other annoyances (which are perhaps not as bad?). I was talking with one of my students about free product with amalgamation in lean the other day, and this is the approach we took. (PS. We don't yet have free products with amalgamation in mathlib, except for the categorical formulation using colimits.)</p>",
        "id": 269030992,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642961276
    },
    {
        "content": "<p>And I wonder how many manual proofs out there might accidentially go from <code>N_G(P)</code> to <code>N_H(P)</code> (both “the normalizer of <code>P</code>”) without justifying that step.</p>",
        "id": 269034025,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642965151
    }
]