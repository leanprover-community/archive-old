[
    {
        "content": "<p>I'm looking at this lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inf_mem_then_set_bounded</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"n\">Inf</span> <span class=\"n\">S</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">bdd_below</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>While playing around with the lattices API ; but I'm not sure how to prove the statement.</p>\n<p>I cannot use Inf_ge because it requires bdd_below, so my only option is to say that an Inf which is in the set, is a Min, i.e. is_least S (Inf S) is true.</p>\n<p>So I tried to go for this but it requires Inf S to be in lower_bounds, which appears to be true by def?</p>\n<p>Even if I'm in a conditional complete lattice, I can always wrap it into a complete lattice by adding bottom and top to extend X.<br>\nUsing this, I can take Inf of anything, including empty sets, etc. As I have Inf S in S, it fix my problem.</p>\n<p>But I'm unsure how to proceed to promote X into a X' with complete_linear_order over it and bring my assumptions over there, finish my proof, come back to the X world.</p>",
        "id": 192816737,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585925922
    },
    {
        "content": "<p>The theorem is false</p>",
        "id": 192816941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926002
    },
    {
        "content": "<p>If the set fails to be bounded below, <code>Inf</code> returns garbage, and that garbage value may happen to lie in the set</p>",
        "id": 192817099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926041
    },
    {
        "content": "<p>Ah, so that's the problem</p>",
        "id": 192817131,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585926052
    },
    {
        "content": "<p>for example if the garbage value is 0, then <code>Inf (-inf, 0] \\in  (-inf, 0]</code></p>",
        "id": 192817176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926069
    },
    {
        "content": "<p>But I don't understand why Inf does not use option-types, wouldn't it make more sense?</p>",
        "id": 192817188,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585926074
    },
    {
        "content": "<p>That would amount to a predicate formulation, and that already exists without any conditionally complete anything</p>",
        "id": 192817283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926109
    },
    {
        "content": "<p><code>is_glb</code></p>",
        "id": 192817297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926113
    },
    {
        "content": "<p>Okay, makes more sense then, I'll use this, thank you!</p>",
        "id": 192817356,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585926127
    },
    {
        "content": "<p>We want to write <code>Sup s</code> or <code>Inf s</code> before we prove that <code>s</code> has a <code>lub</code>/<code>glb</code>.</p>",
        "id": 192876002,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585956607
    },
    {
        "content": "<p>Once you have <code>is_least</code>, AFAIR we have <code>is_least.bdd_below</code>.</p>",
        "id": 192876031,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585956644
    },
    {
        "content": "<p>And I hope that we have <code>is_least.cInf_eq</code> (or is it <code>is_least.is_glb.cInf_eq</code>?)</p>",
        "id": 192876070,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585956682
    }
]