[
    {
        "content": "<p>I want to prove that the derivative of sin is cos as part of a project. Where do I start?</p>",
        "id": 179253422,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1572283061
    },
    {
        "content": "<p>This is a great question! <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> what is the status of the definition of differentiation? Are we allowed to define the derivative of a function from C to C or does it still have to be all part of some theory of locally analytic topological Frechet Banach seminormed modules?</p>",
        "id": 179254140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572283522
    },
    {
        "content": "<p>Do we even have this definition yet? Is it time?</p>",
        "id": 179254170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572283543
    },
    {
        "content": "<p>Ultimately we will want to generalize to the locally analytic topological Frechet Banach seminormed case but writing it for C -&gt; C first seems like a good way to keep a student project focused, and a domain expert can do the generalization later</p>",
        "id": 179254568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572283794
    },
    {
        "content": "<p>define the univariate derivative for functions R -&gt; R (or a trivial generalization thereof)</p>",
        "id": 179254569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572283794
    },
    {
        "content": "<p>oh, my message broke causality</p>",
        "id": 179254672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572283828
    },
    {
        "content": "<p>R=C is true in HoTT, right?</p>",
        "id": 179254713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572283860
    },
    {
        "content": "<p>A class generalizing both is the first order trivial generalization</p>",
        "id": 179254818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572283922
    },
    {
        "content": "<blockquote>\n<p>R=C is true in HoTT, right?</p>\n</blockquote>\n<p>As types, yes, but not if you take into account any structure.</p>",
        "id": 179256460,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572284916
    },
    {
        "content": "<p>It's true for the group structure.</p>",
        "id": 179256628,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572285014
    },
    {
        "content": "<p>The univariate derivative is not defined yet, but it is trivial to define it in terms of the general derivative, just by identfying a linear map from <code>𝕜</code> to  <code>F</code> with an element of <code>F</code> through its value at <code>1</code>. Then it remains to translate the <code>fderiv</code> API to this setting, which should be trivial but tedious. But please, do not start from scratch, use the general results that are already available! Inspired by the beginning of the file <code>analysis/calculus/deriv.lean</code>, the definitions would start with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">has_deriv_at_filter</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_fderiv_at_filter</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">scalar_prod_space_iso</span> <span class=\"n\">id</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">L</span>\n\n<span class=\"n\">def</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_deriv_at_filter</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_deriv_at_filter</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">deriv_within</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>Note that properties such as <code>differentiable_within_at</code> or <code>differentiable_on</code> or <code>differentiable</code> would not need new definitions in the one-dimensional context, as the general definitions are already enough.</p>",
        "id": 179257884,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1572285740
    },
    {
        "content": "<p>I remember that <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>  said at some point that one of his students would be working on this, but I don't know if this has happened concretely.</p>",
        "id": 179259707,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1572286815
    },
    {
        "content": "<p>IIRC <span class=\"user-mention\" data-user-id=\"198364\">@Paula Neeley</span>  was working on derivatives and <span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> was working on integration, perhaps they can give an update?</p>",
        "id": 179262782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572288605
    },
    {
        "content": "<p>Thanks everyone. I want to be more extremely basic so I just want to show that the derivative of sine is cosine, and so I just need to get the derivative of a function from C to C working. So using stuff in <code>analysis/calculus/deriv.lean</code> I have to use <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span></span></span></span> and <code>F</code> and then ... \"make it work\"?</p>",
        "id": 179263686,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1572289108
    },
    {
        "content": "<p>And then after that I'll need differentiability of power series within their radius of convergence. Do we have this? Do we have ROC?</p>",
        "id": 179263918,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1572289219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span> The strategy I call \"trivial generalization\" is to <em>write</em> the statement with K like Sebastien suggests, but pretend it says R instead, and apply theorems as if it was R and hoping it all just works. As soon as something fails because you are missing an assumption, switch to R for that theorem (or ask here and we can probably suggest the right structure class to use)</p>",
        "id": 179264334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572289452
    },
    {
        "content": "<p>Ah, ok. Will do</p>",
        "id": 179264432,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1572289521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> what is that scalar prod thing? has deriv at filter is supposed to be the common generalization of the other two</p>",
        "id": 179264806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572289800
    },
    {
        "content": "<p>If you have an element <code>c : F</code> and want to construct a linear map from <code>𝕜</code> to <code>F</code> mapping <code>1</code> to <code>c</code>, you need to do something. This is precisely what <code>scalar_prod_space_iso</code> does. Here is its type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Associating to a scalar-valued linear map and an element of `γ` the</span>\n<span class=\"cm\">`γ`-valued linear map obtained by multiplying the two (a.k.a. tensoring by `γ`) -/</span>\n<span class=\"n\">def</span> <span class=\"n\">scalar_prod_space_iso</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">γ</span>\n</pre></div>",
        "id": 179265152,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1572290017
    },
    {
        "content": "<p>Paula is working on epistemic logic now, and isn't planning on working on the analysis library. I am still hoping Joe will finish the Bochner integral (where \"finish\" means leave it in a state where others can work on it without having to deal with the low-level definitions).</p>",
        "id": 179267384,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1572291538
    },
    {
        "content": "<p>Why are we doing the bochner integral specifically? If the reason is generality, is there not a more general integral?</p>",
        "id": 179309537,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1572338584
    },
    {
        "content": "<p>Bochner integral (the straightforward generalization to higher dimensions of Lebesgue integral) is the right integral, i.e., the one that every mathematician uses every day. There is also the Pettis integral, but it takes values in the bidual of the space so it is harder to use in practice. And the Kurzweil-Henstock integral, which is a one-dimensional curiosity that is very seldom used, and lacks many of the good properties of Lebesgue integral.</p>",
        "id": 179311314,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1572340371
    },
    {
        "content": "<p>If someone has the time to write it, I’d love to read an article expanding on the above very helpful remarks (and maybe also commenting on Riemann-Stieltjes, Haar, ...). It could even be a vehicle to get passing mathematicians to hear about Mathlib.</p>",
        "id": 179311652,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572340755
    },
    {
        "content": "<p>There's a hard theorem before we get Haar measure/integral -- I can't imagine that this Bochner stuff does it. The theorem is that every sufficiently nice topological group has a measure with some nice property. This is a bunch of abstract functional analysis which will, I guess, take a long time to do in Lean. I'm assuming that Bochner is just a story about the real numbers in some sense. Haar gives you an integral for real-valued functions on the group <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb{Q}_p)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for example.</p>",
        "id": 179315342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572344079
    },
    {
        "content": "<p>I guess you don't actually need the theorem to build the Haar integral though, if you just have a typeclass saying \"a type with a designated Haar measure\"</p>",
        "id": 179315871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572344526
    },
    {
        "content": "<p>and then the big theorem says that every sufficiently nice type can be equipped with a Haar structure. We still wouldn't want to use it because the choice is not even unique up to equality let alone defeq</p>",
        "id": 179315941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572344594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> The Bochner integral generalizes the <em>codomain</em> of integrable functions, i.e. you can integrate functions that go into a Banach space.  The domain can be any measure space you want.  You can e.g. integrate a function f : GL_n(QQ_p) -&gt; L^2(CC).</p>",
        "id": 179316206,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1572344854
    },
    {
        "content": "<p>So the main theorem regarding Haar measure is: \"so you see this huge infinite-dimensional space of measures on GL_n(Q_p)? There is a very special line in there called the Haar measure (defined up to a positive real scaling factor)\".</p>",
        "id": 179316335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572344980
    },
    {
        "content": "<p>The beautiful theorem is that for any locally compact Hausdorff topological group there's a measure which is invariant under left translation (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mi>U</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu(gU)=\\mu(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>), and the measure of an open set is positive, and the measure of a compact set is finite. Its existence is \"just copy the proof of existence of Lebesgue measure, and in a few places work a lot harder because you don't have the starting point \"measure of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a,b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">]</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">b-a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>\" so you need to come up with some approximation to this and fiddle around a lot more.</p>",
        "id": 179316548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572345130
    }
]