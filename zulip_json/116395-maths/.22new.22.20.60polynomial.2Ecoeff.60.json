[
    {
        "content": "<p>Dear All,</p>\n<p>I have been playing around a little bit with the definition below, and I find that it works very smoothly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">polynomial.zcoeff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f.coeff</span> <span class=\"n\">n.to_nat</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Compared to <code>polynomial.coeff</code>,</p>\n<ul>\n<li>it often creates side goals that are easier to solve, since they are in <code>ℤ</code>, rather than in <code>ℕ</code> (e.g. better <code>linarith</code> support);</li>\n<li>it sometimes removes proof obligations that were required when you compute the <code>f.coeff (0 - 1)</code> and you \"clearly want to get <code>0</code>, but you get the constant coefficient of <code>f</code>, because of nat-subtraction.</li>\n</ul>\n<p>Of course, this would be alongside <code>polynomial.coeff</code>, it would not be a replacement.</p>\n<p>Finally, feel free to suggest a different name!</p>\n<p>Thanks!</p>",
        "id": 278299747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649422650
    },
    {
        "content": "<p>If you think that you would like it in mathlib, let me know and I will prepare a PR!</p>",
        "id": 278299955,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649422754
    },
    {
        "content": "<p>Here is an example where you get a statement that I consider \"better\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">coeff_mul_X_pow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.coeff</span> <span class=\"n\">d</span>\n<span class=\"n\">zcoeff_mul_X_pow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mc</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p.zcoeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So you do not have to fight to get the <code>+n</code> in the <code>coeff</code>, you get it for free and everything \"just works\".</p>",
        "id": 278300020,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649422799
    },
    {
        "content": "<p>Another option would be to give <code>with_bot ℕ</code> a subtraction, such that <code>x - y = if y ≤ x then x - y else ⊥</code>, which might work nicely with <code>polynomial.degree</code>.</p>",
        "id": 278300606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649423044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span>, you might have thoughts here!</p>",
        "id": 278300733,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649423101
    },
    {
        "content": "<p>Eric, I like your suggestion.  I have not worked with <code>with_bot ℕ</code>, but I know that the API for <code>ℤ</code> is very good!  Also, it is a ring, which might make it easier to work with.</p>",
        "id": 278300902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649423194
    },
    {
        "content": "<p>I think that we may have both: a <code>with_bot_coeff</code> to work with degree and <code>zcoeff</code> to work with <code>nat_degree</code>.</p>",
        "id": 278300974,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649423228
    },
    {
        "content": "<p>I think only with_bot has the right semantics for <code>(p.div_X * X).coeff n = p.coeff (n - 1 + 1)</code></p>",
        "id": 278301045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649423264
    },
    {
        "content": "<p>\"negative\" monomials can't be made into regular ones just by multiplying by X, just like ⊥ can't be changed by addition</p>",
        "id": 278301298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649423387
    },
    {
        "content": "<p><code>with_bot ℕ</code> is neither a semiring nor a ring, it doesn't respect zero_mul.</p>",
        "id": 278301387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649423416
    },
    {
        "content": "<p>I see your point.  Mine was going the opposite direction: I prefer to work with a ring, whenever I can.  Not every result will work better with <code>zcoeff</code>, but I think a good proportion might.</p>",
        "id": 278301466,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649423482
    },
    {
        "content": "<p>For instance, when working with the previous-to-last coefficient, converting <code>a+b-1</code> to <code>a+(b-1)</code> or <code>(a-1)+b</code> is always a pain and you always have to provide proofs that something is non-negative.  With <code>zcoeff</code> this disappears and you have an easier time formalizing stuff.</p>",
        "id": 278301620,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649423560
    },
    {
        "content": "<p>I feel that this issue would not be addressed by <code>with_bot</code>, since you will have to tell lean that you are not a the <code>\\bot</code> level, rather than not at the <code>0</code> level.</p>",
        "id": 278301879,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649423659
    },
    {
        "content": "<p>Also, I imagine working with both <code>coeff</code> and <code>zcoeff</code>, even at the same time.  They should complement each other, not substitute each other: the API around <code>coeff</code> is great.  I am simply suggesting using a different tool, in the cases where <code>coeff</code> gets clunky.</p>",
        "id": 278302045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649423759
    },
    {
        "content": "<p>Remind me of the \"previous-to-last\" statement that motivates this?</p>",
        "id": 278305220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649425264
    },
    {
        "content": "<p>The \"previous-to-last\" statement is the computation of the coefficient \"just below the top\" of a product of two polynomials/power of a single polynomial.</p>",
        "id": 278306049,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649425620
    },
    {
        "content": "<p>I have not a working version where I no longer need the assumptions that the polynomials are non-constant and the proof is shorter (modulo the brief API for <code>zcoeff</code> which relies on the one for <code>coeff</code>).</p>",
        "id": 278306141,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649425660
    },
    {
        "content": "<p>Here is the \"final\" lemma, before clean-up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zcoeff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ptl</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">induction_with_nat_degree_le</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zcoeff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pl</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">pl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">gb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">r0</span> <span class=\"n\">nb</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">nb</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">nb</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">pl</span><span class=\"o\">,</span> <span class=\"n\">zcoeff_C</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">zcoeff_mul_X_pow</span><span class=\"o\">,</span> <span class=\"n\">zcoeff_mul_C</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">zcoeff_eq_coeff</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel'_right</span><span class=\"o\">],</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_C</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_pos_of_nonneg_of_pos</span> <span class=\"o\">(</span><span class=\"n\">int.coe_zero_le</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">flt</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.nat_degree</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">fa.trans_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_C</span><span class=\"o\">,</span> <span class=\"n\">c1</span><span class=\"o\">,</span> <span class=\"n\">zcoeff_eq_zero_of_nat_degree_lt</span><span class=\"o\">,</span> <span class=\"n\">flt</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">pq</span> <span class=\"n\">qb</span> <span class=\"n\">fq</span> <span class=\"n\">gq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fq</span><span class=\"o\">,</span> <span class=\"n\">gq</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_add_add_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278306357,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649425732
    },
    {
        "content": "<p>(Note that this does not work in current mathlib, since I have some API before that in my file.)</p>",
        "id": 278306502,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649425783
    },
    {
        "content": "<p>To bring the attention to something relevant: in the assumptions, <code>a b</code> are natural numbers, but <code>a + b - 1</code> is shielded by <code>zcoeff</code>.  Thus, the edge cases where <code>a</code> or <code>b</code> are <code>0</code> no longer cause pain.</p>",
        "id": 278307080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649425998
    },
    {
        "content": "<p>(Also, I redefined <code>ptl</code> to use <code>zcoeff</code> instead of <code>coeff</code>, so those <code>a - 1</code> and <code>b - 1</code> that you see there are \"safe\".)</p>",
        "id": 278307227,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649426050
    },
    {
        "content": "<p>what's <code>ptl</code>?</p>",
        "id": 278307420,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649426138
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- \"Previous-To-Last coefficient\":</span>\n<span class=\"sd\">`ptl (a : ℤ) (b : ℤ) (c : ℤ) (d : ℤ) (f : R[X]) (g : R[X]) = f_a * g_b + f_c * g_d`,</span>\n<span class=\"sd\">where `p_i` is the `i`th coefficient of the polynomial `p`.</span>\n<span class=\"sd\">`ptl` is an auxilliary definition whose main purpose is to prove</span>\n<span class=\"sd\">lemma `coeff_mul_nat_degree_add_sub_one`.  The intended application is to compute</span>\n<span class=\"sd\">`(f * g)_(deg f + deg g - 1)`, the coefficient of `f * g` just before the top.  -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ptl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.zcoeff</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g.zcoeff</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">f.zcoeff</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">g.zcoeff</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>The context is <a href=\"https://github.com/leanprover-community/mathlib/pull/13200\">#13200</a>.</p>",
        "id": 278307990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649426369
    },
    {
        "content": "<p>To get an idea, you should substitute</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f.nat_degree</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">g.nat_degree.</span>\n</code></pre></div>",
        "id": 278308334,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649426506
    },
    {
        "content": "<p>I produced a quick PR with what I had: <a href=\"https://github.com/leanprover-community/mathlib/pull/13240\">#13240</a>.</p>",
        "id": 278309985,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649427209
    },
    {
        "content": "<p>I've been doing some work with with_bot recently. It's nice, though needs a bit of work.</p>",
        "id": 278334275,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1649437645
    },
    {
        "content": "<p>Fundamentally it is true that there are two, maybe three conventions for the degree of the zero polynomial: negative infinity, 0, and -1. Of these, we only support the first two, and it's the first we call degree. I strongly believe this to be the conceptually \"right\" choice, but that's mainly because I've been staring at this for a little while now (for other reasons).</p>",
        "id": 278334653,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1649437806
    },
    {
        "content": "<p>I think it is a good idea to look at supporting integer indexing of coefficients because in practice this is indeed a thing people tend to sort of assume.</p>",
        "id": 278334853,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1649437912
    },
    {
        "content": "<p>I note that in a sense there is a natural extension here: namely defining polynomials in R[x, 1/x]...</p>",
        "id": 278335035,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1649438001
    },
    {
        "content": "<p>I'm not yet fully convinced integer coefficients are actually useful, but I won't be able to try anything out in lean (or properly review any PRs) for around a week</p>",
        "id": 278342375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649441647
    },
    {
        "content": "<p>Eric, here are some thoughts.  The short summary is that</p>\n<ul>\n<li><code>f.coeff (0 - 1)</code> returns <code>f.coeff 0</code>,</li>\n<li><code>f.zcoeff (0 - 1)</code> returns <code>0</code>.<br>\nI am pretty sure that If you asked a mathematician, they would say that the $$-1$$st-coefficient of a polynomial is <code>0</code>, not its constant coefficient.</li>\n</ul>\n<p>The current work-around to this, is to avoid lemmas that imply a out-of-range-nat-subtraction.  This constraint shows up in some awkwardness in proofs.</p>",
        "id": 278447040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649563996
    },
    {
        "content": "<p>More in detail, the two statements <code>coeff_ident</code> and <code>zcoeff_ident</code> highlight some of the differences between <code>coeff</code> and <code>zcoeff</code>.</p>\n<p>I can prove either one of these statements, but the proof of the second version is somewhat cleaner.  As you can see, using <code>zcoeff</code>, there is no need for the assumptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g0</span> <span class=\"o\">:</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>that appear in <code>coeff_ident</code>.  Note that <code>coeff_ident</code> is false if either one of those assumptions<br>\nis not satisfied, because the computation <code>0 - 1</code> yields <code>0</code>, when done in <code>ℕ</code> and <code>-1</code> when done in <code>ℤ</code>.  This difference means that <code>coeff</code> picks up an erroneous <code>f.coeff 0</code>, instead of <code>f.zcoeff (-1)</code>, giving an incorrect result.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.definitions</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span>\n\n<span class=\"c1\">-- the two assumptions are not present below in `zcoeff_ident`</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_ident</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g0</span> <span class=\"o\">:</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">f.nat_degree</span> <span class=\"bp\">+</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">f.coeff</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">*</span> <span class=\"n\">g.coeff</span> <span class=\"o\">(</span><span class=\"n\">g.nat_degree</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n    <span class=\"n\">f.coeff</span> <span class=\"o\">(</span><span class=\"n\">f.nat_degree</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g.coeff</span> <span class=\"n\">g.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zcoeff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f.coeff</span> <span class=\"n\">n.to_nat</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zcoeff_ident</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zcoeff</span> <span class=\"o\">(</span><span class=\"n\">f.nat_degree</span> <span class=\"bp\">+</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">f.zcoeff</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">*</span> <span class=\"n\">g.zcoeff</span> <span class=\"o\">(</span><span class=\"n\">g.nat_degree</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n    <span class=\"n\">f.zcoeff</span> <span class=\"o\">(</span><span class=\"n\">f.nat_degree</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g.zcoeff</span> <span class=\"n\">g.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">polynomial</span>\n</code></pre></div>",
        "id": 278447045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649564014
    },
    {
        "content": "<p>As I mentioned above, what makes the proof easier in the second case is that <code>ℤ</code> is a (commutative) ring, as opposed to just a (commutative) semi_ring.  In particular, <code>linarith</code> works better and the lemmas<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.coeff_mul_X_pow\">docs#polynomial.coeff_mul_X_pow</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.coeff_mul_X_pow'\">docs#polynomial.coeff_mul_X_pow'</a><br>\ncan be restated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zcoeff_mul_X_pow</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zcoeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f.zcoeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(The same applies to the sibling-lemmas without <code>pow</code> of with <code>mul</code> at the end.)</p>",
        "id": 278447048,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649564026
    },
    {
        "content": "<p>I think it's irrelevant to ask what a mathematician thinks <code>0-1</code> is, we all know that natural subtraction is a pathological operation</p>",
        "id": 278450726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649570851
    },
    {
        "content": "<p>Oh, sorry for the confusion: I meant to ask for the coefficient of <code>x^(-1)</code>!</p>",
        "id": 278452386,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649573753
    },
    {
        "content": "<p>What about if they want to ask for the coefficient of <code>x^0.5</code> or <code>x^√2</code> or .... It's not clear to me where you draw the \"that's not a reasonable question to ask a polynomial\" line</p>",
        "id": 278452859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649574485
    },
    {
        "content": "<p>Would it be better to introduce the type of Laurent polynomials which really do have a <code>x^-1</code> term?</p>",
        "id": 278453006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649574727
    },
    {
        "content": "<p>My point of view is that Laurent polynomials are a good \"stopping point\".</p>",
        "id": 278453010,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649574736
    },
    {
        "content": "<p>I would be happy with converting to Laurent polynomials, though would need to see how much of the API for coefficients \"just works\".</p>",
        "id": 278453032,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649574807
    },
    {
        "content": "<p>I would think \"promote my polynomials to Laurent polynomials, then use <code>laurent_polynomial.coeff</code> would produce a cleaner proof</p>",
        "id": 278453076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649574847
    },
    {
        "content": "<p>Ok, I like this suggestion: I'll try it out once I'm back at a computer!</p>",
        "id": 278453236,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649575156
    },
    {
        "content": "<p>Presumably since they're used a lot less, it's not worth writing the hundreds of lines of boilerplate to make Laurent polynomials irreducible</p>",
        "id": 278454438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649577122
    },
    {
        "content": "<p>And instead just do something like <code>abbreviation laurent_polynomial := add_monoid_algebra R ℤ</code> (maybe those arguments are backwards)</p>",
        "id": 278454509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649577197
    },
    {
        "content": "<p>Is there a coercion from <code>R[X]</code> to <code>laurent_series R</code>?</p>\n<p>I cannot find one, but I have missed out on instances several times!</p>",
        "id": 278462596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649589548
    },
    {
        "content": "<p>It will start with <code>to_finsupp</code></p>",
        "id": 278463057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649590222
    },
    {
        "content": "<p>How's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/laurent_series\">docs#laurent_series</a> defined?</p>",
        "id": 278463061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649590242
    },
    {
        "content": "<p>Via <code>hahn_series/power_series</code>.</p>",
        "id": 278463089,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649590304
    },
    {
        "content": "<p>I think you might need to chain together a lot of conversions</p>",
        "id": 278463231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649590478
    },
    {
        "content": "<p>The design of polynomial vs power_series are quite different compared to <code>mv_polynomial</code> vs <code>mv_power_series</code></p>",
        "id": 278463257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649590517
    },
    {
        "content": "<p>Yes, I am seeing this.  I am hoping that, as long as I have the coercion, I'd be able to piggy-back on the <code>polynomial.coeff</code> API.</p>\n<p>I'll try to get the coercion working!</p>",
        "id": 278463340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649590587
    },
    {
        "content": "<p>Note I was suggesting defining <code>laurent_polynomial</code>, not trying to use <code>laurent_series</code></p>",
        "id": 278464234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649591834
    },
    {
        "content": "<p>Eric, thank you for patiently pointing out that we are talking about Laurent <em>polynomials</em>.  Although I had this in mind, I kept reading not seeing that I was using Laurent <em>series</em> and was convinced that they were <em>polynomials</em>.</p>",
        "id": 278497871,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649637034
    },
    {
        "content": "<p>Where did we reach on this?</p>",
        "id": 280488980,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651150650
    },
    {
        "content": "<p>I think the most recent progress was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.map_domain_alg_hom\">docs#add_monoid_algebra.map_domain_alg_hom</a>, for turning polynomials into laurent polynomials (with <code>f=algebra_map N Z</code> or some equivalent spelling)</p>",
        "id": 280489137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651150711
    },
    {
        "content": "<p>Aha.</p>",
        "id": 280489294,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651150791
    },
    {
        "content": "<p>Do we have much API for laurent polynomials?</p>",
        "id": 280489435,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651150820
    },
    {
        "content": "<p>Not until <a href=\"https://github.com/leanprover-community/mathlib/pull/13415\">#13415</a></p>",
        "id": 280489515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651150855
    },
    {
        "content": "<p>I have a number of thoughts on this - I'm currently working with a paper that uses, uh - a bunch of stuff, and freely converts between them.</p>",
        "id": 280489614,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651150890
    },
    {
        "content": "<p>Unless you phrase your question as \"do we have API for <code>add_monoid_algebra Z R</code>?\", in which the asnwer is \"probably\".</p>",
        "id": 280489626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651150895
    },
    {
        "content": "<p>Not my paper, to be clear.</p>",
        "id": 280489635,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651150899
    },
    {
        "content": "<p>But for a field k, they use, uh:</p>\n<ul>\n<li>polynomials k[x]</li>\n<li>the field of rational functions k(x)</li>\n<li>k [[x]] (formal power series with nonnegative powers)</li>\n<li>k[[1/x]] (formal power series with nonpositive powers)</li>\n<li>k((x)) (formal power series with finitely many negative powers)</li>\n<li>k((1/x)) (formal power series with finitely many positive powers)</li>\n</ul>\n<p>(And they also claim that k(x), the field of rational functions, is contained in k((1/x)) - is this even true??)</p>\n<p>Also they merrily use notions of <code>coeff</code> and <code>degree</code> on this (as well as, essentially, <code>leading_degree</code>).</p>",
        "id": 280490837,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651151455
    },
    {
        "content": "<p>This is all, uh, A Lot. I was wondering how much of the above hierarchy we actually had.</p>",
        "id": 280490878,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651151479
    },
    {
        "content": "<p>I note that that Laurent implementation doesn't even define the degree of a Laurent polynomial. And at the very least, surely R[1/X] would be a useful thing to have? Which corresponds interestingly with <code>leading_degree</code>, I note - in some sense the most general codomain of degree/leading_degree, and domain of coeff, is <code>with_top (with_bot Z)</code> - which would at least put it all on the same footing..</p>",
        "id": 280491093,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651151588
    },
    {
        "content": "<p>I think as much as possible, results on <code>polynomial</code> should at least be generalised to results on <code>laurent_polynomial</code> and backported.</p>",
        "id": 280491243,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651151646
    },
    {
        "content": "<p><code>eint</code>, in the same fashion as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ereal\">docs#ereal</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal\">docs#ennreal</a>?</p>",
        "id": 280491267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651151659
    },
    {
        "content": "<p>Yes - do we not already have it?</p>",
        "id": 280491304,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651151674
    },
    {
        "content": "<p>Well, it's <code>with_top (with_bot ℤ)</code>, but nothing more. At this point, we really ought to find a proper way to handle it alongside <code>ennreal</code> and <code>ereal</code>, because handmade lemmas only go so far. Maybe <code>linear_ordered_ring_with_bot_top</code>?</p>",
        "id": 280491758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651151861
    },
    {
        "content": "<p>Is <code>R[1/X] </code> different in any meaningful way from <code>R[X] </code>?</p>",
        "id": 280491851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651151888
    },
    {
        "content": "<p>The type of the degree :)</p>",
        "id": 280491891,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651151905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, we really need a working version of <code>covariant_class</code> for \"extended ordered rings\"</p>",
        "id": 280491935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651151928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280491243\">said</a>:</p>\n<blockquote>\n<p>I think as much as possible, results on <code>polynomial</code> should at least be generalised to results on <code>laurent_polynomial</code> and backported.</p>\n</blockquote>\n<p>This amounts to stating the results about <code>add_monoid_algebra</code> I think</p>",
        "id": 280491953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651151939
    },
    {
        "content": "<p>I got a little side-tracked with the <code>laurent_polynomial</code> PR, but I was more or less happy with it, modulo the stuff that got merged in <code>monoid_algebra</code>.</p>",
        "id": 280491963,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651151944
    },
    {
        "content": "<p>The degree of the 0 polynomial in 1/X should really be +infinity.</p>",
        "id": 280491989,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651151956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280490837\">said</a>:</p>\n<blockquote>\n<p>(And they also claim that k(x), the field of rational functions, is contained in k((1/x)) - is this even true??)</p>\n</blockquote>\n<p>Note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k((1/x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">((</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span> is a field which contains both <code>k</code> and <code>x</code>, so this must be true :)</p>",
        "id": 280492024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651151977
    },
    {
        "content": "<p>And indeed the degrees are nonpositive integers...</p>",
        "id": 280492038,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651151985
    },
    {
        "content": "<p>I could make it <code>available-for-review</code>, if people want.  I find it a little longish for a single PR, but it is a new file, which comes with copyright and some docmodule...</p>",
        "id": 280492053,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651151990
    },
    {
        "content": "<p>Why not dualize? <code>order_dual (with_bot ℕ)</code></p>",
        "id": 280492061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651151994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280492024\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280490837\">said</a>:</p>\n<blockquote>\n<p>(And they also claim that k(x), the field of rational functions, is contained in k((1/x)) - is this even true??)</p>\n</blockquote>\n<p>Note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k((1/x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">((</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span> is a field which contains both <code>k</code> and <code>x</code>, so this must be true :)</p>\n</blockquote>\n<p>so it is - thank you.</p>",
        "id": 280492076,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280492061\">said</a>:</p>\n<blockquote>\n<p>Why not dualize? <code>order_dual (with_bot ℕ)</code></p>\n</blockquote>\n<p>That's definitely what you want to do.</p>",
        "id": 280492131,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152014
    },
    {
        "content": "<p>But these things are useful. In particular in this paper there's an offhand remark \"many of these results and proofs work for k((1/x)) but for ease are stated for k[x]\", and kinda they implictly use it. Which as I say I find a bit irritating.</p>",
        "id": 280492247,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152079
    },
    {
        "content": "<p>Also I got told off by the author yesterday for natural number subtraction, and that one isn't even my fault :P</p>",
        "id": 280492289,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152100
    },
    {
        "content": "<p>My plan was to get porting stuff from <code>polynomial</code>s to <code>laurent_polynomial</code>s \"easy\", which was part of my interest in learning meta-programming.</p>",
        "id": 280492293,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651152101
    },
    {
        "content": "<p>Can we define <code>degree</code> on <code>add_monoid_algebra</code> as the maximum (after coercion to <code>with_bot</code>) of the support?</p>",
        "id": 280492407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152137
    },
    {
        "content": "<p>(though this kind of automation is certainly not in scope for the current PR and would be left for a subsequent one.)</p>",
        "id": 280492420,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651152142
    },
    {
        "content": "<p>Eric, assuming that there is some form of order on the grading type, why not?</p>",
        "id": 280492518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651152188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280492289\">said</a>:</p>\n<blockquote>\n<p>Also I got told off by the author yesterday for natural number subtraction, and that one isn't even my fault :P</p>\n</blockquote>\n<p>Quite often you want to do things like subtract degrees from one another though, and it would be good to, you know, be able to do that...</p>",
        "id": 280492519,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152188
    },
    {
        "content": "<p>I would like to use more of the <code>finset.semiring</code> (or however it is called)</p>",
        "id": 280492549,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651152207
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.set_semiring\">docs#set.set_semiring</a>?</p>",
        "id": 280492588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651152232
    },
    {
        "content": "<p>yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.semiring\">docs#set.semiring</a>, thanks Yaël!</p>",
        "id": 280492661,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651152251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280492407\">said</a>:</p>\n<blockquote>\n<p>Can we define <code>degree</code> on <code>add_monoid_algebra</code> as the maximum (after coercion to <code>with_bot</code>) of the support?</p>\n</blockquote>\n<p>And <code>leading_degree</code>, I think. Arguably would be good to have them both have the same codomain as I say.</p>",
        "id": 280492669,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152254
    },
    {
        "content": "<p>except that (for polynomials and laurent polynomials) the support is a finset and this should play a role.</p>",
        "id": 280492725,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651152280
    },
    {
        "content": "<p>(I have a meeting in 2 minutes, I'll come back to this once I am done!)</p>",
        "id": 280492785,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651152301
    },
    {
        "content": "<p><code>leading_degree</code> would be the min, not the max?</p>",
        "id": 280492809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280492809\">said</a>:</p>\n<blockquote>\n<p><code>leading_degree</code> would be the min, not the max?</p>\n</blockquote>\n<p>well it's all the same modulo the dual (yes)</p>",
        "id": 280492829,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152326
    },
    {
        "content": "<p>I don't think that's consistent with the naming of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.leading_coeff\">docs#polynomial.leading_coeff</a>, where leading refers to the term of highest degree</p>",
        "id": 280492855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152338
    },
    {
        "content": "<p>Sorry, I mean <code>trailing_degree</code></p>",
        "id": 280492926,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152363
    },
    {
        "content": "<p>You could call them <code>trailing_degree</code> and <code>leading_degree</code> I guess.</p>",
        "id": 280492994,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152393
    },
    {
        "content": "<p>Although those spellings are longer than <code>.support.min</code> and <code>.support.max</code></p>",
        "id": 280493118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152453
    },
    {
        "content": "<p>Yes.</p>",
        "id": 280493127,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152458
    },
    {
        "content": "<p>But useful to have the context-appropriate name maybe.</p>",
        "id": 280493234,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152500
    },
    {
        "content": "<p>It would be great to generalize some of the results about <code>polynomial.nat_degree</code> to <code>.support.min</code></p>",
        "id": 280493269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152522
    },
    {
        "content": "<p>Ideally they should also work on <code>k((x))</code>. I don't know how hard that is to define or do.</p>",
        "id": 280493295,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152537
    },
    {
        "content": "<p><del><code>k((x))</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_series\">docs#power_series</a>, right?</del></p>",
        "id": 280493339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152559
    },
    {
        "content": "<p>But clearly there is still a sensible notion of <code>.support.min</code> and <code>.support.max</code> there.</p>",
        "id": 280493342,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152559
    },
    {
        "content": "<p>Ah - yes.</p>",
        "id": 280493385,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152579
    },
    {
        "content": "<p>But things should be consistent, and if we can prove stuff in the highest generality, that's all for the good.</p>",
        "id": 280493437,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152602
    },
    {
        "content": "<p>Wait - no, k[[x]] is the power series?</p>",
        "id": 280493544,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152643
    },
    {
        "content": "<p>k((x)) is - well, dunno what you do for ring, when you really want to not have k((x)) be a field. But k[[x]] doesn't allow for negative-degree coefficents  - k((x)) allows for finitely many.</p>",
        "id": 280493740,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152733
    },
    {
        "content": "<p>I am not sure I understand the definition of <code>power_series</code>/<code>mv_power_series</code> - why does it use <code>→₀</code>? Surely the point is that the support <em>isn't</em> finite?</p>",
        "id": 280493791,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152764
    },
    {
        "content": "<p>Ah sorry, I misread \"finitely many negative coefficients\" as \"_only_ negative coefficients, of which there are finitely many\"</p>",
        "id": 280493846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152789
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/7626\">#7626</a> might be related to trying to generalize here</p>",
        "id": 280493870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280493791\">said</a>:</p>\n<blockquote>\n<p>I am not sure I understand the definition of <code>power_series</code>/<code>mv_power_series</code> - why does it use <code>→₀</code>? Surely the point is that the support <em>isn't</em> finite?</p>\n</blockquote>\n<p>That refers to the number of variables in each monomial being finite</p>",
        "id": 280493923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651152823
    },
    {
        "content": "<p>aha, right right</p>",
        "id": 280494179,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152939
    },
    {
        "content": "<p>sorry, yes, I see the definition now.</p>",
        "id": 280494262,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651152966
    },
    {
        "content": "<p>You can probably define the formal derivative for some or all of these also.</p>",
        "id": 280494370,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153034
    },
    {
        "content": "<p>I'm not sure if this was already established but Laurent series are <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/laurent_series.html\">https://leanprover-community.github.io/mathlib_docs/ring_theory/laurent_series.html</a> (built on Hahn series) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hahn_series.order\">docs#hahn_series.order</a> gives the leading exponent, or whatever it should be called</p>",
        "id": 280494595,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651153115
    },
    {
        "content": "<p>Ah nice. I... don't understand what a Hahn series is. In theory would that give you everything in the hierarchy above?</p>",
        "id": 280494938,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153244
    },
    {
        "content": "<p>I think so (except the function field k(x))</p>",
        "id": 280495012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651153276
    },
    {
        "content": "<p>Aye, though as pointed out above surely if you have k((x)) and k is a field you must have k(x) within it?</p>",
        "id": 280495157,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153327
    },
    {
        "content": "<p>So maybe with even more structure on <code>R</code>.</p>",
        "id": 280495199,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153343
    },
    {
        "content": "<p>e.g., polynomials should be Hahn series with the discrete ordering, though in this case you wouldn't get any notion of degree/trailing degree out from that</p>",
        "id": 280495205,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651153348
    },
    {
        "content": "<p>(discrete ordering on <code>nat</code>)</p>",
        "id": 280495254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651153382
    },
    {
        "content": "<p>Is there a natural way to define one?</p>",
        "id": 280495256,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153383
    },
    {
        "content": "<p>Like, can we not still define <code>support.max</code> and <code>.support.min</code></p>",
        "id": 280495425,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153448
    },
    {
        "content": "<p>You can by deciding that <code>nat</code> has an order after all. So probably it is better not to think of polynomials as Hahn series.</p>",
        "id": 280495508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651153484
    },
    {
        "content": "<p>As far as I can tell, multivariate power series over infinitely many variables don't \"fit\" into a <code>hahn_series</code>? (c.f. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hahn_series.to_mv_power_series\">docs#hahn_series.to_mv_power_series</a> )</p>",
        "id": 280495560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651153502
    },
    {
        "content": "<p>Hmm. But then we don't have this nice hierarchy.</p>",
        "id": 280495604,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153519
    },
    {
        "content": "<p>For a univariate series then they're isomorphic (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/hahn_series.to_power_series\">docs#hahn_series.to_power_series</a>)</p>",
        "id": 280495835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651153604
    },
    {
        "content": "<p>(I mean, we don't need it necessarily! It just seems to me that there might be an appropriate level of generality to do this all at that isn't where things currently are - entirely prosaically, y'know, it would be quite nice as in the OP to have a <code>zcoeff</code> notion, but then this naturally leads to all these questions.)</p>",
        "id": 280495905,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153635
    },
    {
        "content": "<p>(Separately, but not entirely unrelatedly, it would be quite useful to have, analogous to <code>degree_lt n</code> and <code>degree_le n</code>, <code>trailing_degree_gt n</code> and <code>trailing_degree_gt m</code>. And possibly something like degree_Ioo n m (n &lt; trailing_degree, trailing_degree &lt; m). You then have a bunch of natural equivalences on these.)</p>",
        "id": 280496399,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651153846
    },
    {
        "content": "<p>For k[x] those guys are ideals. But yes for k((x)) they sound very useful.</p>",
        "id": 280496805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651154007
    },
    {
        "content": "<p>(I mention it because such notions also make sense for, well, nearly any of these, and also under that basis, you basically have R[x], R[1/x], R((x)), R((1/x)) as subspaces of... is it R[x, 1/x]? I lose track of the notions. No, R((x, 1/x))?)</p>",
        "id": 280496939,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651154060
    },
    {
        "content": "<p>laurent series.</p>",
        "id": 280496945,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651154066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280496805\">said</a>:</p>\n<blockquote>\n<p>For k[x] those guys are ideals. But yes for k((x)) they sound very useful.</p>\n</blockquote>\n<p>Are <code>degree_lt n</code> not ideals/modules also?</p>",
        "id": 280497034,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651154110
    },
    {
        "content": "<p>Like I'm not sure I see the difference and <code>degree_lt n</code> is useful.</p>",
        "id": 280497085,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651154132
    },
    {
        "content": "<p>like in particular these are nice finite-dimensional spaces, at least over a field (can you define that over a ring?)</p>",
        "id": 280497363,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651154224
    },
    {
        "content": "<p>So one can then Do Linear Algebra to them</p>",
        "id": 280497424,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651154260
    },
    {
        "content": "<p>As far as I have gathered from this discussion, this lines up well with what I wanted to do all along.  Most of the rings mentioned above are some variation of \"formal sums of monomials\".  Here, \"monomial\" means \"something indexed by an <code>(add_)monoid</code> that often has an order.  Whether we take finite sums, sums of non-negative elements, infinite sums whose exponents form a well-founded set, all sums,... the \"degree\" is always a function that only depends on the support.  For this reason I wanted to relate it to the <code>set.semiring</code>.  E.g. there is nothing special about a \"polynomial\", these notions go directly via the support.</p>\n<p>With respect to the relationship between <code>nat_degree</code> and <code>nat_trailing_degree</code>, this was one of the very first projects that I started in Lean.  I wanted to get a procedure that would take a lemma for <code>nat_degree</code> and convert it to a lemma for <code>nat_trailing_degree</code>.  I have been playing with this idea for a while and I suspect that this should be possible by a mechanism similar to <code>to_additive</code>, although I do not understand <code>to_additive</code> and how it works...</p>\n<p>The more I think about this, the more I think that there is the need for <code>to_dual</code>: <code>trailing_degree</code> is what you obtain from <code>nat_degree</code>by conjugating by <code>to_dual</code>.</p>",
        "id": 280503313,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651156671
    },
    {
        "content": "<p>Isn't it what you obtain from <code>degree</code>?</p>",
        "id": 280507245,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158216
    },
    {
        "content": "<p>Because you also have <code>nat_trailing_degree</code>.</p>",
        "id": 280507293,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158239
    },
    {
        "content": "<p>I very much agree <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> and it's interesting we started in a similar place.</p>",
        "id": 280507369,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158255
    },
    {
        "content": "<p>For dualization to happen correctly, you need to let go off concrete types, namely <code>ℕ</code> for <code>polynomial</code>.</p>",
        "id": 280507614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651158338
    },
    {
        "content": "<p>I meant to say that I think that I was the one who defined <code>nat_trailing_degree</code>, thinking that it would have been much easier to convert the <code>nat_degree</code> API to it, but then got stumped by my inexperience with Lean!</p>",
        "id": 280507619,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651158341
    },
    {
        "content": "<p>Yaël, this is why I wanted to go via <code>set.semiring</code>, to disattach the \"grading\" type from the polynomials.</p>",
        "id": 280507755,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651158378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280507614\">said</a>:</p>\n<blockquote>\n<p>For dualization to happen correctly, you need to let go off concrete types, namely <code>ℕ</code> for <code>polynomial</code>.</p>\n</blockquote>\n<p>This feels fine. I mean, it's not like our notion of polynomial is computable anyway. As long is it has a nice surface interface.</p>",
        "id": 280507761,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158379
    },
    {
        "content": "<p>I continue to like <code>degree</code> a lot more than <code>nat_degree</code> because it means I have to check for 0 less, which I basically never want to have to do.</p>",
        "id": 280507866,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158419
    },
    {
        "content": "<p><code>0.degree</code> is meaningful, and <code>0.nat_degree</code> isn't.</p>",
        "id": 280507926,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158447
    },
    {
        "content": "<p>I am fascinated as to what <code>next_coeff_up</code> was useful for. That seems very cursed.</p>",
        "id": 280508146,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158534
    },
    {
        "content": "<p>I was very scared of <code>option</code> when I started formalizing <code>nat_trailing_degree</code>, hence why I did not define <code>trailing_degree</code>!</p>\n<p>I am more comfortable with <code>option</code>s now, but I still feel that for Laurent polynomials I would want to think a little more about what to assign as the degree of the <code>0</code> polynomial.  I keep thinking that the most reasonable thing is to assign to a laurent polynomial its support as a (finite) subset of <code>int</code> and whether it is empty or not is a natural case split.</p>",
        "id": 280508201,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651158554
    },
    {
        "content": "<p>The degree of 0 should still be <code>-infinity</code> for Laurent polynomials.</p>",
        "id": 280508325,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158598
    },
    {
        "content": "<p>What else should it be?</p>",
        "id": 280508341,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158602
    },
    {
        "content": "<p>I think that <code>next_coeff_up</code> was useful for the fact that it is <code>0</code> when nat-subtraction would give some weird answer.  E.g. <code>next_coeff_up</code> of a constant is <code>0</code>, rather than the constant itself!</p>",
        "id": 280508428,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651158621
    },
    {
        "content": "<p>Taking <code>X</code> to <code>X^-1</code> is a ring automorphism of Laurent polynomials that changes the sign on degrees, so why <code>-infinity</code> and not <code>+infinity</code>?</p>",
        "id": 280508558,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651158671
    },
    {
        "content": "<p>Degree is the max of the support.</p>",
        "id": 280508717,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280508558\">said</a>:</p>\n<blockquote>\n<p>Taking <code>X</code> to <code>X^-1</code> is a ring automorphism of Laurent polynomials that changes the sign on degrees, so why <code>-infinity</code> and not <code>+infinity</code>?</p>\n</blockquote>\n<p>Ah, you see, this is very simple: it should be a different space.</p>",
        "id": 280508788,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158761
    },
    {
        "content": "<p>Like, yes, it's an automorphism. But we could also think of it as reversing the underlying index.</p>",
        "id": 280508875,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158803
    },
    {
        "content": "<p>I agree that there is a definition of <code>degree</code> that makes the degree of the <code>0</code> polynomial equal to <code>-infinity</code>, I was simply wondering whether I am happy with that definition.  I am for the case of polynomials, not so much for Laurent polynomials.</p>",
        "id": 280508915,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651158820
    },
    {
        "content": "<p>In other words, 1 / x + 1 + x is not equal to x + 1 + 1/x.</p>",
        "id": 280508919,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158822
    },
    {
        "content": "<p>Or rather, x + 1 + 1/x is not a laurent polynomial, it's in the dual.</p>",
        "id": 280509030,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158855
    },
    {
        "content": "<p>I would definitely consider <code>1 / x + 1 + x</code> <em>and</em> <code>x + 1 + 1/x</code> to be Laurent polynomials!  Also, I would say that the first thing that I think that would be the dual of Laurent polynomials would be formal power series with exponents in <code>int</code>.</p>",
        "id": 280509234,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651158937
    },
    {
        "content": "<p>I think <code>x + 1 + 1/x</code> is a Laurent polynomial, but it's also not.</p>",
        "id": 280509279,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651158958
    },
    {
        "content": "<p>Like, formally, a Laurent polynomial is a finitely-supported map from Z to R.</p>",
        "id": 280509488,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159030
    },
    {
        "content": "<p>Indeed, this is what Laurent polynomials are defined to be in <a href=\"https://github.com/leanprover-community/mathlib/pull/13415\">#13415</a>.</p>",
        "id": 280509870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159172
    },
    {
        "content": "<p>We have some (F : Z →₀ R). Define <a href=\"http://F.degree\">F.degree</a> = F.support.max, with with_bot added to Z. Alright - so yes, there's this natural automorphism that switches x and 1/x. What I'm saying is that it could switch the type, so that after the automorphism, we have something of type order_dual Z →₀ R.</p>",
        "id": 280509916,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159192
    },
    {
        "content": "<p>I wonder whether the degree of a Laurent polynomial should take values in <code>with_zero int</code> and be a <code>add_group_with_zero</code>.</p>",
        "id": 280510113,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159255
    },
    {
        "content": "<p>No, totally disagreed.</p>",
        "id": 280510163,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159276
    },
    {
        "content": "<p>Or it doesn't preserve the degree. Which is OK - the degree isn't a property of it as a ring, it's a property that comes from the order on Z. But because of that, it feels like you have this order + algebra property.</p>",
        "id": 280510171,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159281
    },
    {
        "content": "<p>I do see what you mean - zero IS weird. But I think this notion I propose is consistent with the embedding of polynomials.</p>",
        "id": 280510348,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159350
    },
    {
        "content": "<p>I am suggesting that there should be \"two\" zeros in <code>degree</code>: one corresponding to the degree of the \"constant and non-zero Laurent polynomials\"  and one corresponding <em>only</em> to the degree of the <code>0</code> polynomial.</p>",
        "id": 280510408,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159379
    },
    {
        "content": "<p>No, I understand. But that's just adding a junk value.</p>",
        "id": 280510455,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159398
    },
    {
        "content": "<p>The same junk that <code>-infinity</code> is, except with better properties.</p>",
        "id": 280510519,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> : we don't have a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_group_with_zero\">docs#add_group_with_zero</a>.</p>",
        "id": 280510522,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651159428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280510519\">said</a>:</p>\n<blockquote>\n<p>The same junk that <code>-infinity</code> is, except with better properties.</p>\n</blockquote>\n<p>I disagree. -infinity isn't junk.</p>",
        "id": 280510599,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159445
    },
    {
        "content": "<p>Ok, so <code>with_zero (multiplicative int)</code>.</p>",
        "id": 280510604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280510522\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> : we don't have a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_group_with_zero\">docs#add_group_with_zero</a>.</p>\n</blockquote>\n<p>But we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_add_comm_group_with_top\">docs#linear_ordered_add_comm_group_with_top</a></p>",
        "id": 280510640,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651159470
    },
    {
        "content": "<p>Like I guess there is fundamentally this discontinuity - maybe it SHOULD be junk, I'm not sure.</p>",
        "id": 280510649,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159478
    },
    {
        "content": "<p>I disagree that the degree of the <code>0</code> Laurent polynomial should be either top or bot.  I agree that it should be an absorbing element of the monoid where the degree takes values.</p>",
        "id": 280510721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159519
    },
    {
        "content": "<p>I think you just want <code>option</code> then.</p>",
        "id": 280510755,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651159535
    },
    {
        "content": "<p>I assume you agree that the degree of 0 in R[1/X] should be +infinity?</p>",
        "id": 280510871,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159576
    },
    {
        "content": "<p>I'm happy with option, but I want <code>none</code> to be absorbing, which is why I was calling it <code>0</code> (and viewing addition on int as the operation in the \"rest\" of the monoid).</p>",
        "id": 280510919,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159596
    },
    {
        "content": "<p>So yeah there is this issue I guess that it wants to be \"both\", somehow - maybe this absorbing element captures that.</p>",
        "id": 280510933,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280510721\">said</a>:</p>\n<blockquote>\n<p>I disagree that the degree of the <code>0</code> Laurent polynomial should be either top or bot.  I agree that it should be an absorbing element of the monoid where the degree takes values.</p>\n</blockquote>\n<p><code>⊤ + a = a + ⊤ = ⊤</code>. Isn't that exactly what you want?</p>",
        "id": 280510979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651159626
    },
    {
        "content": "<p>The argument is whether it should be top or bot.</p>",
        "id": 280511017,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159645
    },
    {
        "content": "<p>I think <code>infinity</code> and <code>-infinity</code> make sense for <code>R[X]</code> and for <code>R[1/X]</code>.  i think that neither makes sense for Laurent polynomials.</p>",
        "id": 280511040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159653
    },
    {
        "content": "<p>My answer to the argument is that it should be neither the top, nor the bottom.</p>",
        "id": 280511075,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280511040\">said</a>:</p>\n<blockquote>\n<p>I think <code>infinity</code> and <code>-infinity</code> make sense for <code>R[X]</code> and for <code>R[1/X]</code>.  i think that neither makes sense for Laurent polynomials.</p>\n</blockquote>\n<p>Well, I think you can choose one, and that choice is better than a random junk value, but it means choosing whether you have a copy of R[X] or R[1/X] in R{X, 1/X] which respects degree.</p>",
        "id": 280511170,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159706
    },
    {
        "content": "<p>I think that we are talking about different structures.   The algebraic structure of what the operation on the target of the degree I think that we all agree: it is <code>int</code> with its addition, together with a separate element that is absorbing.</p>",
        "id": 280511237,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159749
    },
    {
        "content": "<p>My feeling is that this might be captured by my notion of <code>Z →₀ R</code> and <code>order_dual Z →₀ R</code>.</p>",
        "id": 280511243,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159754
    },
    {
        "content": "<p>I guess there's two different issues here: the additive property of the degree of zero, which is what Yaël was referring to, and the order properties of degree.</p>",
        "id": 280511259,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651159766
    },
    {
        "content": "<p>I am not sure what the ordering on this monoid should be, as I do not think that neither the top, nor the bottom are good choices.</p>",
        "id": 280511313,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651159796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280511243\">said</a>:</p>\n<blockquote>\n<p>My feeling is that this might be captured by my notion of <code>Z →₀ R</code> and <code>order_dual Z →₀ R</code>.</p>\n</blockquote>\n<p>Do we define R[1/X] currently?</p>",
        "id": 280511369,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280511313\">said</a>:</p>\n<blockquote>\n<p>I am not sure what the ordering on this monoid should be, as I do not think that neither the top, nor the bottom are good choices.</p>\n</blockquote>\n<p>Bottom is better for me I think because it corresponds to the fact that Z is built out of N.</p>",
        "id": 280511427,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159829
    },
    {
        "content": "<p>Whereas order_dual Z is somehow built out of order_dual N.</p>",
        "id": 280511461,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159847
    },
    {
        "content": "<p>Do you see what I mean?</p>",
        "id": 280511539,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159886
    },
    {
        "content": "<p>To me it feels pretty - aesthetically right - but it's hard to communicate it.</p>",
        "id": 280511610,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651159909
    },
    {
        "content": "<p>I see and I do not agree.  But I think that it is simply a matter of opinions, since I am not sure what would be a good order on this monoid.</p>\n<p>I consider that <code>R[X]</code> and <code>R[1/X]</code> are isomorphic and I am not so happy that the notion of degree should depend on the choice of exactly which representative of the isomorphism class we choose.</p>",
        "id": 280511877,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651160023
    },
    {
        "content": "<p>I agree that <code>R[X]</code> and <code>R[1/X]</code> are isomorphic... as rings.</p>",
        "id": 280511995,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160055
    },
    {
        "content": "<p>My argument is that <code>degree</code> is not a property of the ring structure.</p>",
        "id": 280512027,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160068
    },
    {
        "content": "<p>What about <code>R[s]</code>?  What if <code>s</code> is the inverse of some element in a bigger ring?</p>",
        "id": 280512060,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651160082
    },
    {
        "content": "<p>What should the degree of 1/X be?</p>",
        "id": 280512169,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280512060\">said</a>:</p>\n<blockquote>\n<p>What about <code>R[s]</code>?  What if <code>s</code> is the inverse of some element in a bigger ring?</p>\n</blockquote>\n<p>As I say - <code>degree</code> cannot be a property of the ring structure alone.</p>",
        "id": 280512416,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160214
    },
    {
        "content": "<p>I would say <code>-1</code>, since, if asked this question, I would think that this is an element of Laurent polynomials.  If you asked about <code>1/X in C</code> I would say that it does not have a degree and in <code>R[1/X]</code> I would probably say that it is <span class=\"tex-error\">$$ -1 \\in \\mahtbb{Z}_{\\le 0} $$</span>.</p>",
        "id": 280512433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651160220
    },
    {
        "content": "<p>I think I agree with Wrenna here. I think even in \"normal mathematics\" we talk about the \"degree of a polynomial with respect to a certain variable.\" In this case, the degree of <code>1/X</code> is <code>1</code> in the variable <code>1/X</code>.</p>",
        "id": 280512513,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651160254
    },
    {
        "content": "<p>And -1 in the variable X, and if I'm using 1/X I think it makes sense to talk about X. Consider, I don't know, R[X^2], let's move away from negatives for a sec as that adds complexities.</p>",
        "id": 280512794,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160373
    },
    {
        "content": "<p>Ok, as with all junk values, it will be correct a proportion of the times and likely there is nothing that would be correct always!</p>",
        "id": 280512801,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651160375
    },
    {
        "content": "<p>I think there is a right notion here, or at least some subtle structure that we should think about.</p>",
        "id": 280512921,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160404
    },
    {
        "content": "<p>What's the degree of X^4? In R{X], it's 4. In R[X^2], it's 2.</p>",
        "id": 280512995,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160431
    },
    {
        "content": "<p>What even is the definition of R[X^2]? I would argue it's basically finitely-supported function from 2N to R.</p>",
        "id": 280513069,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160463
    },
    {
        "content": "<p>I agree, but I thought that the issue was about the degree of <code>0</code>...</p>",
        "id": 280513087,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651160475
    },
    {
        "content": "<p>it's all related :)</p>",
        "id": 280513105,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160486
    },
    {
        "content": "<p>Damiano, the point is that the degree depends on more than just the structure of the polynomial (or laurent) ring <em>as a ring</em>. It depends also on the variable under consideration.</p>",
        "id": 280513281,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651160571
    },
    {
        "content": "<p>The point is that while R[X] and R[1/X] are indeed isomorphic, under, say, a ring isomorphism P, it is not true that degree f &lt; degree g implies degree P f &lt; degree P g (or, at least, it shouldn't be).</p>",
        "id": 280513317,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160588
    },
    {
        "content": "<p>Polynomials are and should be variable-agnostic. <code>R[X^2]</code> makes no sense in mathlib. Instead, you have a map <code>polynomial R → polynomial R</code> which sends <code>X</code> to<code>X^2</code>.</p>",
        "id": 280513380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651160614
    },
    {
        "content": "<p>R{X^2] can make sense.</p>",
        "id": 280513409,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160629
    },
    {
        "content": "<p>It's <code>add_monoid_algebra R (2ℕ)</code>, if you like.</p>",
        "id": 280513554,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160673
    },
    {
        "content": "<p>And what is <code>2ℕ</code>?</p>",
        "id": 280513581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651160685
    },
    {
        "content": "<p>submonoid of ℕ.</p>",
        "id": 280513615,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160696
    },
    {
        "content": "<p>If R[X^2] doesn't make sense, I'm not sure R[1/X] can, on its own terms. But it can - and should.</p>",
        "id": 280513890,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160807
    },
    {
        "content": "<p>It should be <code>add_monoid_algebra R (order_dual ℕ)</code>.</p>",
        "id": 280513922,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160824
    },
    {
        "content": "<p>So in one case you replace <code>ℕ</code> by a submonoid of <code>ℕ</code>, and in the other you replace it by <code>order_dual ℕ</code>. That does not seem very consistent.</p>",
        "id": 280514101,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651160897
    },
    {
        "content": "<p>With the <code>polynomial R → polynomial R</code>approach, you can still talk about the \"degree of a polynomial with respect to the variable <code>X^2</code>\", it's just pushforward of the degree under this ring homomorphism. I'm not sure exactly how to incorporate Laurent polynomials into this though without first defining the degree of a Laurent polynomial, which puts us back at square one.</p>",
        "id": 280514115,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651160904
    },
    {
        "content": "<p>Sure, I agree - actually it's not so good for R[X^2]. It should be the monoid which is the image of <code>ℕ</code> under the isomorphism between <code>ℕ</code> and <code>2ℕ</code>.</p>",
        "id": 280514182,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160950
    },
    {
        "content": "<p>Then it's consistent :).</p>",
        "id": 280514198,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651160960
    },
    {
        "content": "<p>I think that these discussions arise precisely because the notion depends on extra choices.  I know that the definition you are suggesting will work for most of the applications, so I am happy to go with it.</p>",
        "id": 280514239,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651160976
    },
    {
        "content": "<p>Yeah, basically my conclusion is - it probably depends what you want R[1/X] to mean.</p>",
        "id": 280514513,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161094
    },
    {
        "content": "<p>Also there's this issue that, well, as I say, degree isn't a ring-theoretic property. So what is the appropriate context in which it is preserved?</p>",
        "id": 280514717,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161178
    },
    {
        "content": "<p>What kind of isomorphism is one that preserves both the algebraic and order properties of degree?</p>",
        "id": 280514835,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161234
    },
    {
        "content": "<p>I would suggest working over a type synonym of <code>α →₀ β</code> where <code>linear_ordered_add_comm_monoid α</code>. Then you can define <code>degree : fancy_new_polynomial α β → option α</code> which outputs junk <code>none</code> when fed in <code>0</code>. Then you can talk about maps <code>fancy_new_polynomial α β → fancy_new_polynomial α β'</code> (the inclusion from <code>R[X^2]</code> to <code>R[X]</code> for example) <strong>and</strong> about maps <code>fancy_new_polynomial α β → fancy_new_polynomial α' β</code> (inclusion of polynomials in Laurent polynomials)</p>",
        "id": 280514897,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651161243
    },
    {
        "content": "<p>My feeling is still that junk is a solution, but not the best one, because formally it should be the minimum of support, and that has a perfectly sensible definition if you allow bot.</p>",
        "id": 280515085,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161316
    },
    {
        "content": "<p>It's like - in regular maths, people define the degree of the 0 polynomial as: -1, \"junk/undefined\", or -infinity (I guess sometimes 0 - but that's kinda junk). Of these, I think <code>-infinity</code> gives the nicest properties by far. It doesn't make sense to me to abandon that.</p>",
        "id": 280515308,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161396
    },
    {
        "content": "<p>I like your idea, Yaël. That's exactly what I was thinking.</p>",
        "id": 280515748,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161580
    },
    {
        "content": "<p>Though as I say I don't see why the inclusion from R[X^2] to R[X] would be of type <code>fancy_new_polynomial α β → fancy_new_polynomial α β'</code></p>",
        "id": 280515886,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161614
    },
    {
        "content": "<p>(<code>hahn_series.order</code> uses a junk value for 0, but I don't think it necessarily has to - but it <em>does</em> define it as the minimum otherwise. <code>order</code> there is the equivalent of <code>nat_degree</code> - it doesn't have a <code>degree</code> I think)</p>",
        "id": 280516387,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161781
    },
    {
        "content": "<p>I consider <code>R[X]</code> and <code>R[X^2]</code> to be the same ground type, but I put between them an \"inclusion map\" which is not the identity. It would be <code>inc : fancy_new_polynomial ℕ R → fancy_new_polynomial ℕ R</code> given by <code>inc X = X^2</code>.</p>",
        "id": 280516472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651161816
    },
    {
        "content": "<p>It feels very odd to me to think of <code>R[X]</code> and <code>R[X^2]</code> as the same type. I'm not trying to be overly critical; that just makes me deeply unhappy.</p>",
        "id": 280516669,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161890
    },
    {
        "content": "<p>I agree that the image of <code>R[X]</code> under the <code>inc</code> you have defined is somehow \"isomorphic\" to <code>R[X^2]</code>, but it isn't the same as it.</p>",
        "id": 280516933,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651161987
    },
    {
        "content": "<p>How do you define a map from R[X] to R[X^2] under your perspective?</p>",
        "id": 280517907,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162380
    },
    {
        "content": "<p>There are lots of them, but surely there is no \"inclusion map\" because <code>X</code> is in <code>R[X]</code>but not <code>R[X^2}</code>.</p>",
        "id": 280518077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651162455
    },
    {
        "content": "<p>As far as I am concerned, the \"proper\" definition of the degree of a polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f(X) \\in k[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> is the negative of its <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">1/X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>-adic valuation you obtain by viewing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> as a subring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(X) = k(1/X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>. Such a (discrete) valuation usually takes values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\cup \\{\\infty\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 280518094,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651162465
    },
    {
        "content": "<p>Sure. But I mean the map that sends, say, 1 + X to 1 + X^2.</p>",
        "id": 280518129,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280518094\">said</a>:</p>\n<blockquote>\n<p>As far as I am concerned, the \"proper\" definition of the degree of a polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f(X) \\in k[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> is the negative of its <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">1/X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>-adic valuation you obtain by viewing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> as a subring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(X) = k(1/X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>. Such a (discrete) valuation usually takes values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\cup \\{\\infty\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span>.</p>\n</blockquote>\n<p>Does infinity here have any ordered meaning, or is it just in the sense of \"extra element\"?</p>",
        "id": 280518238,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162542
    },
    {
        "content": "<p>It's the maximal element</p>",
        "id": 280518254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651162553
    },
    {
        "content": "<p><code>id : fancy_new_polynomial ℕ R → fancy_new_polynomial ℕ R</code>. The operation is just relabelling the variable.</p>",
        "id": 280518279,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651162562
    },
    {
        "content": "<p>You consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\cup \\{\\infty\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span> as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_add_comm_group_with_top\">docs#linear_ordered_add_comm_group_with_top</a> (or some other combination of words)</p>",
        "id": 280518352,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651162586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280518352\">said</a>:</p>\n<blockquote>\n<p>You consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\cup \\{\\infty\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span> as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_add_comm_group_with_top\">docs#linear_ordered_add_comm_group_with_top</a> (or some other combination of words)</p>\n</blockquote>\n<p>Right - that makes sense (and I think corresponds to what I am saying).</p>",
        "id": 280518399,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280518279\">said</a>:</p>\n<blockquote>\n<p><code>id : fancy_new_polynomial ℕ R → fancy_new_polynomial ℕ R</code>. The operation is just relabelling the variable.</p>\n</blockquote>\n<p>But then your id doesn't preserve degree :)</p>",
        "id": 280518496,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162655
    },
    {
        "content": "<p>Sorry, what is <code>fancy_new_polynomial</code> supposed to be? I'm still catching up on this discussion</p>",
        "id": 280518510,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651162660
    },
    {
        "content": "<p>Actually pretty much what you said, or close - essentially a fancy polynomial is <code>α →₀ β</code> with <code>linear_ordered_add_comm_monoid α</code>.</p>",
        "id": 280518627,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162702
    },
    {
        "content": "<p>And then you define the degree as existing in <code>with_bot α</code>, say, which I think corresponds to what you were saying about the negative of the 1/X-adic valuation.</p>",
        "id": 280518804,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162780
    },
    {
        "content": "<p>It does preserve the degree, because <code>1 + X^2</code> has degree <code>1</code> in <code>R[X^2]</code> (but <code>2</code> in <code>R[X]</code>).</p>",
        "id": 280518823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651162786
    },
    {
        "content": "<p>Ah, so this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a> ?</p>",
        "id": 280518833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651162791
    },
    {
        "content": "<p>Probably!</p>",
        "id": 280518944,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280518823\">said</a>:</p>\n<blockquote>\n<p>It does preserve the degree, because <code>1 + X^2</code> has degree <code>1</code> in <code>R[X^2]</code> (but <code>2</code> in <code>R[X]</code>).</p>\n</blockquote>\n<p>You have <code>id : fancy_new_polynomial ℕ R → fancy_new_polynomial ℕ R</code>. Type's the same on the left and the right. So <code>degree</code> has to have the same meaning.</p>",
        "id": 280519016,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162853
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X^2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is meaningless unless you consider it as a sub-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra of something that contains an element called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>",
        "id": 280519079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651162875
    },
    {
        "content": "<p>I assume you feel similarly about <code>R[1/X]</code>?</p>",
        "id": 280519147,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162903
    },
    {
        "content": "<p>Yes</p>",
        "id": 280519171,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651162912
    },
    {
        "content": "<p>Which I actually don't disagree with!</p>",
        "id": 280519180,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162916
    },
    {
        "content": "<p>But it comes back to what I was saying - that for <code>R[X, 1/X]</code>, it is natural to orientate yourself around <code>R[X]</code> rather than <code>R[1/X]</code></p>",
        "id": 280519310,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651162959
    },
    {
        "content": "<p>I would not say that it is natural, I would say that it is common...</p>",
        "id": 280519430,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163005
    },
    {
        "content": "<p>I agree that <code>R[X^2]</code> is the same as <code>R[X]</code> or <code>R[Y]</code> or <code>R[ :octopus: ]</code> if you treat <code>X^2</code> as a formal symbol.</p>",
        "id": 280519442,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163011
    },
    {
        "content": "<p>But if you want <code>X^2</code> to have the meaning implied by the notation, then, yeah, you need to think about subalgebras, and something similar for <code>R[1/X]</code>.</p>",
        "id": 280519590,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163061
    },
    {
        "content": "<p>I'm not sure about that. The point of rings like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X,1/X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> is that you <em>can't</em> make any choice between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">1/X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. In terms of algebraic geometry, you're working with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">G</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{G}_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. If you want to choose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> as your distinguished variable, you are really working with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">G</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{G}_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and the \"natural\" inclusion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">G</mi><mi>m</mi></msub><mo>↪</mo><msup><mi mathvariant=\"double-struck\">A</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{G}_m \\hookrightarrow \\mathbb{A}^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 280519598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280519598\">said</a>:</p>\n<blockquote>\n<p>I'm not sure about that. The point of rings like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X,1/X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> is that you <em>can't</em> make any choice between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">1/X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. In terms of algebraic geometry, you're working with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">G</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{G}_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. If you want to choose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> as your distinguished variable, you are really working with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">G</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{G}_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and the \"natural\" inclusion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">G</mi><mi>m</mi></msub><mo>↪</mo><msup><mi mathvariant=\"double-struck\">A</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{G}_m \\hookrightarrow \\mathbb{A}^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p>This all sprang from trying to work out if there should be a definition of <code>deg 0</code> in <code>R[X, 1/X]</code>, and if so, what should that be.</p>",
        "id": 280519688,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163115
    },
    {
        "content": "<p>What is <code>deg 0</code> supposed to be?</p>",
        "id": 280519730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163135
    },
    {
        "content": "<p>So if there's an algebraic geometry insight there, that would be very useful.</p>",
        "id": 280519732,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163135
    },
    {
        "content": "<p>Oh, the degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>?</p>",
        "id": 280519743,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163142
    },
    {
        "content": "<p>It should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span></p>",
        "id": 280519748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163146
    },
    {
        "content": "<p>Yep.</p>",
        "id": 280519751,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280519748\">said</a>:</p>\n<blockquote>\n<p>It should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span></p>\n</blockquote>\n<p>HUZZAH</p>",
        "id": 280519777,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163158
    },
    {
        "content": "<p>Embed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><msup><mi>X</mi><mrow><mo>±</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X^{\\pm 1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">±</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>, take the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">1/X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>-adic valuation, which gives you <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span> and negate it to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span>.</p>",
        "id": 280519860,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163180
    },
    {
        "content": "<p>Actually, this will be true no matter what variable you choose for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> (i.e. you can replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with any fractional-linear transformation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and get the same result)</p>",
        "id": 280519985,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163233
    },
    {
        "content": "<p>I was trying to articulate - I'm not sure if this makes sense in this context or at all - but it feels like you should be able to \"reverse things\" such that the degree of 0 is larger than all other degrees, rather than smaller.</p>",
        "id": 280520055,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163265
    },
    {
        "content": "<p>Anyway, I think that for the most part, this means that these two statements will not both be true:<br>\n<code>degree (f * g) ≤ degree f + degree g</code>,<br>\n<code>trailing_degree f + trailing_degree g ≤ trailing_degree (f * g)</code>.</p>\n<p>Which ones we prefer to be true is what we seem to be discussing.  I personally do not find it too important which choice we make.  It seems that there is no alternative choice that is better than either of these.  I view these two as entirely equivalent.</p>",
        "id": 280520072,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163274
    },
    {
        "content": "<p>Like how you've negated the valuation there.</p>",
        "id": 280520079,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163276
    },
    {
        "content": "<p>Sorry Damiano, what's the definition of <code>trailing_degree</code>?</p>",
        "id": 280520173,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163300
    },
    {
        "content": "<p>the min of the support, instead of the max.</p>",
        "id": 280520197,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163312
    },
    {
        "content": "<p>(i.e. you use the \"other\" valuation)</p>",
        "id": 280520233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163325
    },
    {
        "content": "<p>So for (X^2 + 3X^3), it's 2.</p>",
        "id": 280520245,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163330
    },
    {
        "content": "<p>Ah okay</p>",
        "id": 280520253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163337
    },
    {
        "content": "<p>I might say that your <code>trailing_degree</code> needs to be negated :) (at least that's what would be consistent if you view things in terms of valuations coming from points on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>)</p>",
        "id": 280520331,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280520072\">said</a>:</p>\n<blockquote>\n<p>Anyway, I think that for the most part, this means that these two statements will not both be true:<br>\n<code>degree (f * g) ≤ degree f + degree g</code>,<br>\n<code>trailing_degree f + trailing_degree g ≤ trailing_degree (f * g)</code>.</p>\n<p>Which ones we prefer to be true is what we seem to be discussing.  I personally do not find it too important which choice we make.  It seems that there is no alternative choice that is better than either of these.  I view these two as entirely equivalent.</p>\n</blockquote>\n<p>Hang on, why isn't this true?</p>",
        "id": 280520335,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163379
    },
    {
        "content": "<p>(also, those statements are not true \"in Lean\", in real maths, no one cares about the degree of the zero polynomial and they are \"both true\"!)</p>",
        "id": 280520364,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280520331\">said</a>:</p>\n<blockquote>\n<p>I might say that your <code>trailing_degree</code> needs to be negated :) (at least that's what would be consistent if you view things in terms of valuations coming from points on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>)</p>\n</blockquote>\n<p>Negated in what sense?</p>",
        "id": 280520369,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280520364\">said</a>:</p>\n<blockquote>\n<p>(also, those statements are not true \"in Lean\", in real maths, no one cares about the degree of the zero polynomial and they are \"both true\"!)</p>\n</blockquote>\n<p>This isn't... entirely... true.</p>",
        "id": 280520461,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163421
    },
    {
        "content": "<p>Otherwise I wouldn't care :)</p>",
        "id": 280520481,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163428
    },
    {
        "content": "<p>So that the trailing degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><msup><mi>X</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">X^2 + X^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">-2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span></span></span></span></p>",
        "id": 280520492,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651163432
    },
    {
        "content": "<p>Adam, I agree with your negation, but I was not going to go there... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 280520518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280520492\">said</a>:</p>\n<blockquote>\n<p>So that the trailing degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><msup><mi>X</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">X^2 + X^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">-2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span></span></span></span></p>\n</blockquote>\n<p>Oh, that's interesting. I see the logic.</p>",
        "id": 280520520,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163448
    },
    {
        "content": "<p>Yeah we should do that :D</p>",
        "id": 280520543,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163457
    },
    {
        "content": "<p>Ok, so with the \"right\" conventions, which statement do we prefer to be true?<br>\n<code>degree (f * g) ≤ degree f + degree g</code><br>\nor<br>\n<code>trailing_degree (f * g) ≤ trailing_degree f + trailing_degree g</code></p>",
        "id": 280520767,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163549
    },
    {
        "content": "<p>In which context, sorry? It looks like that's true in <code>polynomial</code>?</p>",
        "id": 280520803,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280520245\">said</a>:</p>\n<blockquote>\n<p>So for (X^2 + 3X^3), it's 2.</p>\n</blockquote>\n<p>And for 0, it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span></p>",
        "id": 280520806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651163570
    },
    {
        "content": "<p>Which yes, is annoying because it means <code>trailing_degree</code> and <code>degree</code> have different types, but that's just an indication that you're going to have to think carefully before trying to combine them</p>",
        "id": 280521011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651163665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280520803\">said</a>:</p>\n<blockquote>\n<p>In which context, sorry? It looks like that's true in <code>polynomial</code>?</p>\n</blockquote>\n<p>If one of f or g is 0, this looks true. If they are both non-zero surely we avoid the problem case anyway?</p>",
        "id": 280521018,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280521011\">said</a>:</p>\n<blockquote>\n<p>Which yes, is annoying because it means <code>trailing_degree</code> and <code>degree</code> have different types, but that's just an indication that you're going to have to think carefully before trying to combine them</p>\n</blockquote>\n<p>Deffo.</p>",
        "id": 280521091,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163707
    },
    {
        "content": "<p>If one of them is zero, one of the right hand sides is <code>-infinty</code> and the other is <code>+infinty</code>, so surely they are not both correct!</p>",
        "id": 280521178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280521178\">said</a>:</p>\n<blockquote>\n<p>If one of them is zero, one of the right hand sides is <code>-infinty</code> and the other is <code>+infinty</code>, so surely they are not both correct!</p>\n</blockquote>\n<p>Well, no, if we're negating trailing_degree, they are both -infinity.</p>",
        "id": 280521277,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163782
    },
    {
        "content": "<p>Damiano, which RHS are you referring to?</p>",
        "id": 280521291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651163787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280521277\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280521178\">said</a>:</p>\n<blockquote>\n<p>If one of them is zero, one of the right hand sides is <code>-infinty</code> and the other is <code>+infinty</code>, so surely they are not both correct!</p>\n</blockquote>\n<p>Well, no, if we're negating trailing_degree, they are both -infinity.</p>\n</blockquote>\n<p>Oh no I got it wrong. But wait - then <code>trailing_degree f + trailing_degree g ≤ trailing_degree (f * g)</code> is the right thing!</p>",
        "id": 280521407,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163847
    },
    {
        "content": "<p>I was referring to these statements:<br>\n<code>degree (f * g) ≤ degree f + degree g</code><br>\nor<br>\n<code>trailing_degree (f * g) ≤ trailing_degree f + trailing_degree g</code><br>\nand I said rhs, but I really meant lhs!  I seem to have a problem with bottom/top <em>and</em> left/right...</p>",
        "id": 280521409,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651163849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280521011\">said</a>:</p>\n<blockquote>\n<p>Which yes, is annoying because it means <code>trailing_degree</code> and <code>degree</code> have different types, but that's just an indication that you're going to have to think carefully before trying to combine them</p>\n</blockquote>\n<p>I think there's a well-behaved subtraction between <code>with_bot X</code> and <code>with_top X</code> (into <code>with_bot X</code>) that satisfies <code>none - x = x - none = none - none = none</code>. Of course, you can't call this <code>has_sub</code>, but maybe it fits into another notation.</p>",
        "id": 280521461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651163872
    },
    {
        "content": "<p><code>trailing_degree f + trailing_degree g ≤ trailing_degree (f * g)</code> and <code>degree (f * g) ≤ degree f + degree g</code> are both true under the above convention, where the trailing degree of X^2 is -2 and the degree is 2, and so forth.</p>",
        "id": 280521545,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651163899
    },
    {
        "content": "<p>Ok, so we would define <code>degree f = support.max f</code> and <code>trailing_degree f = - support.min f</code>?</p>",
        "id": 280522009,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651164113
    },
    {
        "content": "<p>I actually like this choice.</p>",
        "id": 280522126,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651164142
    },
    {
        "content": "<p>we-ll. Yes! But exactly what type trailing_degree f should be is unclear. I think it should actually be <code>order_dual.with_bot nat</code>. Which is the same.</p>",
        "id": 280522183,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164176
    },
    {
        "content": "<p>I am still not so happy about the situation of relating the degree of <code>f</code> and the degree of <code>f.eval (1/X)</code>.  Is <code>-(+infinity) = +infinity</code>?</p>",
        "id": 280522251,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651164207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280522183\">said</a>:</p>\n<blockquote>\n<p>we-ll. Yes! But exactly what type trailing_degree f should be is unclear. I think it should actually be <code>order_dual.with_bot nat</code>. Which is the same.</p>\n</blockquote>\n<p>But yes, fundamentally this is just the nonpositive integers.</p>",
        "id": 280522312,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164240
    },
    {
        "content": "<p>Plus positive infinity.</p>",
        "id": 280522379,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164256
    },
    {
        "content": "<p>If we are talking about Laurent polynomials, then I would say that both <code>degree</code> and <code>trailing_degree</code>should \"contain\" <code>int</code> among their values, not just <code>nat</code>.</p>",
        "id": 280522807,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651164442
    },
    {
        "content": "<p>Oh, sorry, I thought we were just talking about <code>polynomial</code> still.</p>",
        "id": 280522923,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164486
    },
    {
        "content": "<p>Ok, so I may have to re-read the conversation, since I thought that we were all happy with the situation of <code>degree</code> on polynomials: a bottom element, and then <code>nat</code>!</p>",
        "id": 280523025,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651164546
    },
    {
        "content": "<p>I agree!</p>",
        "id": 280523066,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164561
    },
    {
        "content": "<p>Then, uh, I basically do still think that for Laurent Polynomials the type of degree should be <code>with_bot int</code> and the type of trailing_degree should be <code>order_dual.with_bot Z</code>, or, if you like, <code>-Z</code></p>",
        "id": 280523115,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280523025\">said</a>:</p>\n<blockquote>\n<p>Ok, so I may have to re-read the conversation, since I thought that we were all happy with the situation of <code>degree</code> on polynomials: a bottom element, and then <code>nat</code>!</p>\n</blockquote>\n<p>I'm not sure why you think I don't agree, but yeah, basically, this.</p>",
        "id": 280523223,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164627
    },
    {
        "content": "<p>I think that what I am struggling to accept is that we are talking about Laurent polynomials and we are automatically attaching a valuation to it in a way that I consider \"random\".  I do agree that it is a valuation and I can live with the fact that this choice has been made.  I am slowly coming to terms with it.</p>",
        "id": 280523332,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651164684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280522183\">said</a>:</p>\n<blockquote>\n<p>we-ll. Yes! But exactly what type trailing_degree f should be is unclear. I think it should actually be <code>order_dual.with_bot nat</code>. Which is the same.</p>\n</blockquote>\n<p>Wrenna, I thought that here you were talking about polynomials, since there is a <code>nat</code> present.</p>",
        "id": 280523534,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651164756
    },
    {
        "content": "<p>Right, but <code>trailing_degree</code>, not <code>degree</code>.</p>",
        "id": 280523578,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164774
    },
    {
        "content": "<p>The type of degree should be <code>with_bot nat</code>.</p>",
        "id": 280523648,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164804
    },
    {
        "content": "<p>Ok, so I probably caused the confusion: whenever I talked about <code>trailing_degree</code>, I always was thinking about Laurent polynomials, not polynomials.</p>",
        "id": 280523806,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651164852
    },
    {
        "content": "<p>Currently the type of <code>trailing_degree</code> is <code>with_top nat</code>. I'm saying it should be <code>order_dual.with_bot nat</code>, which is morally the same as taking it as the non-positive integers along with positive infinity.</p>",
        "id": 280523811,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164854
    },
    {
        "content": "<p>(For polynomials.)</p>",
        "id": 280523820,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164863
    },
    {
        "content": "<p>That's based on what Adam said about the trailing degree of <code>X^2 + X^3</code> wanting to be - 2.</p>",
        "id": 280523958,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651164938
    },
    {
        "content": "<p>A historical remark: when I defined <code>trailing_degree</code>, <code>order_dual</code>s were not really a thing.  I tried making them work, since I wanted to use them for <code>trailing_degree</code>, failed and moved on to other projects.</p>\n<p>Now, <code>order_dual</code>s are much more developed and I would probably not get confused as much as I did when I started, so this might be viable.</p>",
        "id": 280524181,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651165040
    },
    {
        "content": "<p>That would be good</p>",
        "id": 280524727,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165255
    },
    {
        "content": "<p>I was relieved that apparantly algebraic geometry agrees with me, but on some level I think you are quite right that there is a choice to be made!</p>",
        "id": 280524853,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165316
    },
    {
        "content": "<p>But for me it's like, it's the same choice that means that -1 &lt; 1 rather than 1 &lt; - 1</p>",
        "id": 280524917,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165332
    },
    {
        "content": "<p>it is arbitrary, but so is which direction you write in.</p>",
        "id": 280524982,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165371
    },
    {
        "content": "<p>וזה עובד.</p>",
        "id": 280525051,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165401
    },
    {
        "content": "<p>But this is what I'm used to.</p>",
        "id": 280525071,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165411
    },
    {
        "content": "<p>(Apologies for bad google translate Hebrew).</p>",
        "id": 280525166,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165443
    },
    {
        "content": "<p>I also think that the support itself plays a bigger role than just its <code>± max/min</code>.  And this applies to polynomials as well as Laurent polynomials.</p>",
        "id": 280525194,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651165464
    },
    {
        "content": "<p>oh? I think I might agree.</p>",
        "id": 280525217,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165478
    },
    {
        "content": "<p>though intuitively I feel like, say, for \"X + X^3 + X^4\", sometimes I want to treat 2 as if it is \"really\" in the support in a way that, say, 0 or 5 isn't.</p>",
        "id": 280525553,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651165633
    },
    {
        "content": "<p>That would be what I would call the Newton polygon.</p>",
        "id": 280526224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651165939
    },
    {
        "content": "<p>(the convex hull of the \"exponents\" with nonzero coefficients)</p>",
        "id": 280526494,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651166045
    },
    {
        "content": "<p>Aha, right.</p>",
        "id": 280526512,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651166055
    },
    {
        "content": "<p>Wrenna, out of curiosity, in what circumstances would it matter to you to consider 2 as really being in the support, but not 0 or 5?</p>",
        "id": 280527157,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651166330
    },
    {
        "content": "<p>Jireh, I can answer with my perspective.  In the case of one variable, the length of the \"interval of exponents\" is the number of nonzero roots.</p>",
        "id": 280527358,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651166425
    },
    {
        "content": "<p>If you define the analogous notions for polynomials in 2 variables, the area of the corresponding polygon is the geometric genus of the complex curve obtained as the zero locus of the polynomial itself</p>",
        "id": 280527464,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651166482
    },
    {
        "content": "<p>(at least, if you discard a set of measure zero of the coefficients)</p>",
        "id": 280527498,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651166501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/.22new.22.20.60polynomial.2Ecoeff.60/near/280527157\">said</a>:</p>\n<blockquote>\n<p>Wrenna, out of curiosity, in what circumstances would it matter to you to consider 2 as really being in the support, but not 0 or 5?</p>\n</blockquote>\n<p>If I was wanting to state Vieta's formulas, I guess.</p>",
        "id": 280527600,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651166538
    },
    {
        "content": "<p>Thus, for me at least, the fact that 2 is in the support is not so important, but the convex hull of the exponents is.  It just so happens that 2 is in the convex hull and 0 is not in that example!</p>",
        "id": 280527673,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651166579
    },
    {
        "content": "<p>Or in the case where I'm viewing the polynomials with degree &lt; n as a f-d vector space, I don't really care about whether or not an individual component is zero.</p>",
        "id": 280527689,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651166586
    },
    {
        "content": "<p>So I definitely have some notion of the coefficients of a polynomial being a list/vector, right?</p>",
        "id": 280527748,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651166624
    },
    {
        "content": "<p>Indeed, under that logic I might well think of 0 as being relevant - but 5 not.</p>",
        "id": 280527945,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1651166724
    },
    {
        "content": "<p>Thanks both. I can see the <em>convex hull</em> of the support being important for all the reasons mentioned.</p>",
        "id": 280528209,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651166863
    }
]