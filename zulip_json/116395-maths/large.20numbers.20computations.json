[
    {
        "content": "<p>Are there tactics to deal with goals like <code>10 ^ 18 &lt; 3618502788666131213697322783095070105623107215331596699973092056135872020483</code>?</p>",
        "id": 304453379,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666011257
    },
    {
        "content": "<p><code>norm_num</code> is quite fast for me on this precise example</p>",
        "id": 304454000,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666011450
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 304456316,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666012112
    },
    {
        "content": "<p>Do we have a fast prime checker as well?</p>",
        "id": 304456357,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666012124
    },
    {
        "content": "<p>This is really non trivial, right? I mean, even Pari/GP, or similar software, is very fast because it checks psudoprimality</p>",
        "id": 304457610,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666012512
    },
    {
        "content": "<p>We'll, no one ever really implements AKS, but PRIMES is in P.</p>",
        "id": 304457963,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666012642
    },
    {
        "content": "<p>Sure, but AFAIK AKS is totally useless in practice. I think that in practice if one as primality certificate (given by Pari or whatever) it shouldn't be too hard to formalize primality in Lean. But of course asking Lean to find the certificate is different.</p>",
        "id": 304458492,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666012809
    },
    {
        "content": "<p>Sure would be good to have a decision procedure that's at least faster than just brute force</p>",
        "id": 304459206,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666013035
    },
    {
        "content": "<p><code>norm_num</code> also knows about primes, so you can use it, but it is not very fast.</p>",
        "id": 304459659,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666013179
    },
    {
        "content": "<p>On the other hand we have a good implementation of the Jacobi symbol, so checking for example if <code>2</code>, <code>3</code> and <code>5</code> (say) are witness of nonprimality should be fast. And this is already a good pseudoprimality test.</p>",
        "id": 304460233,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666013352
    },
    {
        "content": "<p>Especially if one implements Miller-Rabin rather than Solovay–Strassen. According to <a href=\"https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Testing_against_small_sets_of_bases\">Wikipedia</a>, <code>2</code>, <code>3</code> and <code>5</code> are enough up to <code>25326001</code>.</p>",
        "id": 304461046,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666013591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/large.20numbers.20computations/near/304461046\">said</a>:</p>\n<blockquote>\n<p>Especially if one implements Miller-Rabin rather than Solovay–Strassen. According to <a href=\"https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Testing_against_small_sets_of_bases\">Wikipedia</a>, <code>2</code>, <code>3</code> and <code>5</code> are enough up to <code>25326001</code>.</p>\n</blockquote>\n<p>sure, but then we have to prove that it's enough :)</p>",
        "id": 304463557,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666014247
    },
    {
        "content": "<p>we do have lucas lehmer if you want a mersenne prime though!</p>",
        "id": 304463702,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666014299
    },
    {
        "content": "<p>Yes, I was talking about psuedoprimality. If we want primality I am more or less sure the best we can do is prove that something like a <a href=\"https://en.wikipedia.org/wiki/Primality_certificate#Pratt_certificates\">Pratt certificate</a> implies primality (this is surely almost already in mathlib) and then use something else to find the witness.</p>",
        "id": 304465000,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666014633
    },
    {
        "content": "<p>Like what <code>polyrith</code> does</p>",
        "id": 304465083,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666014662
    },
    {
        "content": "<p>ah, that's a good idea. indeed we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lucas_primality\">docs#lucas_primality</a>; in Lean4 I imagine this can be done quite fast</p>",
        "id": 304465658,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666014802
    },
    {
        "content": "<p>maybe with some cached tactics too</p>",
        "id": 304465690,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666014807
    },
    {
        "content": "<p>ECPP prime certificates would be an alternative. Might be a fun project to see what mathematics about elliptic curves is missing to implement a checker</p>",
        "id": 304666130,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666095552
    },
    {
        "content": "<p>Hasse's theorem seems to be the main result it relies on</p>",
        "id": 304900476,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666167228
    },
    {
        "content": "<p>We can't even prove the points form a group. There is a low-level proof of Hasse's theorem due to Manin I think, but only valid in characteristic &gt;= 5 IIRC</p>",
        "id": 304911923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666171579
    },
    {
        "content": "<p>Well characteristic &gt;= 5 would be enough for the primality check, but it's probably better to go a high-level way and build a good library of elliptic curves first</p>",
        "id": 304948918,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666184048
    },
    {
        "content": "<p>I tried writing a verifier using norm_num and Pratt certificates, the summary was essentially that it works but doesn't seem to be much better than what norm_num already does - in particular it gets a bit further before timing out but not significantly so</p>",
        "id": 304965350,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666188979
    },
    {
        "content": "<p>Even using Pratt certificates recursively? I mean, to prove that all the factors are prime.</p>",
        "id": 304965808,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666189111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  does it at least work for primes like <code>15 * 2^27 + 1</code>? It would be convenient for a project I'm working on to verify this prime in particular.</p>",
        "id": 305040810,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666212923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/large.20numbers.20computations/near/304965808\">said</a>:</p>\n<blockquote>\n<p>Even using Pratt certificates recursively? I mean, to prove that all the factors are prime.</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 305050636,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666217673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/116395-maths/topic/large.20numbers.20computations/near/305040810\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span>  does it at least work for primes like <code>15 * 2^27 + 1</code>? It would be convenient for a project I'm working on to verify this prime in particular.</p>\n</blockquote>\n<p>I will check</p>",
        "id": 305050696,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666217713
    },
    {
        "content": "<p>Another comment on primality testing, obviously there are several different approaches - brute force calculation, Pratt certificates, AKS, and all of these are going to have different performance on different number sizes (this is yet another thing that was <a href=\"#narrow/stream/113488-general/topic/norm_num.20for.20real.20exponentiation/near/249615218\">first pointed out to me</a> by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ). It would be cool if we could eventually have a primality tester that selectively applies different tests based on the size of the number being proven, in the same way that big-integer multiplication libraries use different algorithms on different sizes of integers.</p>",
        "id": 305055034,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666220048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I don't really get why it should be that slow? Because the modulo calculations are?</p>",
        "id": 305109155,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666257440
    },
    {
        "content": "<p>One factor to bear in mind is that in computation, Pratt certificates are an improvement because you replace many divisions in the trial division algorithm with multiplication and powmod operations. But when verifying, the cost of a natural division is practically the same as a multiplication, since a proof of division amounts to an inequality proof, addition proof and multiplication proof. So the usual benefit from Pratt certificates is lessened greatly</p>",
        "id": 305115601,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666260121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/116395-maths/topic/large.20numbers.20computations/near/305040810\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span>  does it at least work for primes like <code>15 * 2^27 + 1</code>? It would be convenient for a project I'm working on to verify this prime in particular.</p>\n</blockquote>\n<p>This number is not that big. It would be sad if we're not able to prove it's prime...</p>",
        "id": 305142474,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666270068
    },
    {
        "content": "<p>If you really want this specific number I don't see any problem. I just tested and <code>norm_num</code> is able to compute <code>31^15</code>, then one only have to take squares (I hope not by hand...).  The prime factors of <code>p-1</code> are super small so exploiting the condition <code>nat.prime q → q ∣ p - 1</code> is probably easy (one may need a general result here, unrelated to this number).</p>",
        "id": 305144166,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666270632
    },
    {
        "content": "<p>I think it's more helpful to prove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lucas_primality\">docs#lucas_primality</a> using  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factorization\">docs#nat.factorization</a></p>",
        "id": 305144738,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666270812
    },
    {
        "content": "<p>Is <a href=\"https://en.wikipedia.org/wiki/Proth%27s_theorem\">https://en.wikipedia.org/wiki/Proth%27s_theorem</a> the general result you are thinking of?</p>",
        "id": 305152026,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666273216
    },
    {
        "content": "<p>Ah, this is even better, but I was just thinking that if <code>3*5*2^27 = n</code> then we know all prime factors of <code>n</code>.</p>",
        "id": 305152294,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666273316
    },
    {
        "content": "<p>Unfortunately, <code>norm_num</code> times out on the goal <code>2 ^ (2 ^ 27 * 15) = 1</code> in <code>zmod (2 ^ 27 * 15 + 1)</code>. I think the issue is that exponentiation was not performant. Mario gave us a definition to get around this when we were working on Miller-Rabin (unfortunately that branch has been left hanging for a while, I don't have time to finish it up) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">binpow</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.binary_rec</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">ih2</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"bp\">*</span> <span class=\"n\">ih</span> <span class=\"k\">in</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">ih2</span><span class=\"o\">)</span> <span class=\"n\">ih2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305209226,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666289439
    },
    {
        "content": "<p>I think you can do it using <code>pow_mul</code>, helping Lean a little bit.</p>",
        "id": 305210504,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666289820
    },
    {
        "content": "<p>This is of course not the right way of doing it, but a least it should work in this precise case.</p>",
        "id": 305210643,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666289878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/116395-maths/topic/large.20numbers.20computations/near/305209226\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, <code>norm_num</code> times out on the goal <code>2 ^ (2 ^ 27 * 15) = 1</code> in <code>zmod (2 ^ 27 * 15 + 1)</code>. I think the issue is that exponentiation was not performant. Mario gave us a definition to get around this when we were working on Miller-Rabin (unfortunately that branch has been left hanging for a while, I don't have time to finish it up) </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">binpow</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.binary_rec</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">ih2</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"bp\">*</span> <span class=\"n\">ih</span> <span class=\"k\">in</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">ih2</span><span class=\"o\">)</span> <span class=\"n\">ih2</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, the first thing I did when trying to verify using Pratt certificates was convince norm_num to do efficient modular exponentiation</p>",
        "id": 305229746,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666296914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> update: I can prove that number is prime, and it's relatively fast - around 5 seconds</p>",
        "id": 305234663,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666298673
    },
    {
        "content": "<p>Hehe, sweet!</p>",
        "id": 305234766,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666298717
    },
    {
        "content": "<p>Is the proof fully automatic, or do you need to hand-solve some goals?</p>",
        "id": 305234952,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666298778
    },
    {
        "content": "<p>bad news is that the original setup I had to do primes in general was pretty dodgy - I adapted it from <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Pratt_Certificate/outline.pdf\">https://www.isa-afp.org/browser_info/current/AFP/Pratt_Certificate/outline.pdf</a>, namely rules 1 and 2 from page 2, and it seems to be really inefficient in the case of a prime factor appearing multiple times (unsure if this is from the isabelle version or my translation of it)</p>",
        "id": 305235005,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666298804
    },
    {
        "content": "<p>The proof is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">second_bit</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">nat.factors</span> <span class=\"o\">(</span><span class=\"mi\">15</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">27</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">boltons_prime</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"mi\">15</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">27</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">pratt_rule_2'</span> <span class=\"mi\">31</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pratt_predicate</span><span class=\"o\">,</span> <span class=\"n\">second_bit</span><span class=\"o\">,</span> <span class=\"n\">forall_eq_or_imp</span><span class=\"o\">,</span> <span class=\"n\">forall_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"n\">my_pow_mod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">my_pow_mod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">my_pow_mod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with about 100 lines of other stuff before it which I'd written a few months ago</p>",
        "id": 305235143,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666298851
    },
    {
        "content": "<p>what I have right now definitely isn't correctly designed to be usable, which is why I haven't tried to PR it anywhere!</p>",
        "id": 305235260,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666298898
    },
    {
        "content": "<p>Still, very cool to have primality proofs for cryptographically important primes.</p>",
        "id": 305235697,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666299088
    },
    {
        "content": "<p>Thought about it a bit more, and the problem with what I had originally is precisely in the case where a prime factor q of p-1 has high multiplicity - the isabelle pratt certificate (and hence mine) do k powmod calculations if q^k | p-1, but it should be enough to only do 1 for each prime</p>",
        "id": 305236189,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666299266
    },
    {
        "content": "<p>(So my original attempt for your prime timed out, but the modified version above is shorter and doesn't time out!)</p>",
        "id": 305236248,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666299291
    },
    {
        "content": "<p>Here are the (average of 1) benchmarks for the four primes I've tested: 199999 takes 2s, 2013265921 (Bolton's prime) takes 3s, 1000000007 takes 5s (despite being smaller than Bolton's prime - maybe because this has the multiplicity problem) and 23509285402367 times out very early</p>",
        "id": 305236705,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666299462
    },
    {
        "content": "<p>The \"Goldilocks prime\" <code>2^64 -2^32 + 1</code> is another prime people often use for the convenient hardware properties, which is one more than <code>18446744069414584320 = 2^32×3×5×17×257×65537</code>. I imagine your approach be able to prove this relatively quickly as well?</p>",
        "id": 305236852,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666299508
    },
    {
        "content": "<p>Do those numbers include finding the certificate?</p>",
        "id": 305237454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666299755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/large.20numbers.20computations/near/305237454\">said</a>:</p>\n<blockquote>\n<p>Do those numbers include finding the certificate?</p>\n</blockquote>\n<p>No, I found the primitive root <code>31</code> here by using wolfram alpha, and the <code>pratt_rule_2' 31</code> is where I input it</p>",
        "id": 305237537,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666299796
    },
    {
        "content": "<p>so the calculation is just a powmod?</p>",
        "id": 305237759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666299877
    },
    {
        "content": "<p>It's a number of powmods, but yeah - really there's not much more than the powmod implementation I showed you in messages a while back</p>",
        "id": 305237809,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666299905
    },
    {
        "content": "<p>are the auxiliary computations all inexpensive?</p>",
        "id": 305237901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666299955
    },
    {
        "content": "<p>e.g. <code>31</code> is prime, those <code>_</code> arguments (which are presumably divisions of the target number by powers of the factors or something)</p>",
        "id": 305238013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666299986
    },
    {
        "content": "<p>I think so, but I haven't benchmarked - all the norm_num calls which aren't pow_mod are natural division (of a very large number by a very small prime factor), natural subtraction, and a natural non zero proof (or some combination)</p>",
        "id": 305238089,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666300020
    },
    {
        "content": "<p>try splitting the powmods into their own lemmas</p>",
        "id": 305238099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666300023
    },
    {
        "content": "<p>Sorry one second - I just realised I was using a worse powmod implementation one than what I actually did, let me check properly with the better version. It seems that <code>18446744069414584321</code> is too big</p>",
        "id": 305238529,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666300197
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/vRRgk11cvaoByJdVPEOYf5vL/image.png\">image.png</a> Here's the breakdown for the goldilocks prime</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vRRgk11cvaoByJdVPEOYf5vL/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vRRgk11cvaoByJdVPEOYf5vL/image.png\"></a></div>",
        "id": 305240578,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666301003
    },
    {
        "content": "<p>In each case the 'tactic execution took' is very close to 80% of the elaboration time showed, so I only showed that</p>",
        "id": 305240735,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666301056
    },
    {
        "content": "<p><code>thing0</code> is where any benefit of 'recursive' certificates might give an improvement, but all the factors here are small so I didn't bother optimising that</p>",
        "id": 305240977,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666301167
    },
    {
        "content": "<p>Oh, changing thing2 to use <code>18446744069414584320</code> rather than <code>18446744069414584321 - 1</code> seems to speed it up by 2x... that's not what I expected!</p>",
        "id": 305241059,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666301210
    },
    {
        "content": "<p>Here's my scratch file: <a href=\"https://github.com/leanprover-community/mathlib/blob/pow_mod/src/pow_mod.lean\">https://github.com/leanprover-community/mathlib/blob/pow_mod/src/pow_mod.lean</a></p>",
        "id": 305242289,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666301741
    },
    {
        "content": "<p>That's great, I'll try that on <code>0x800000000000011000000000000000000000000000000000000000000000001</code></p>",
        "id": 305522124,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666438523
    },
    {
        "content": "<p>Instead of proving the thing about <code>nat.factors</code> by <code>norm_num</code> like I did, for that prime you're probably better off showing that the particular list of factors does multiply to p-1, and that each element is a prime, because I guess norm_num might be too slow to verify the larger prime factors of p-1</p>",
        "id": 305564389,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666459804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/large.20numbers.20computations/near/305144738\">said</a>:</p>\n<blockquote>\n<p>I think it's more helpful to prove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lucas_primality\">docs#lucas_primality</a> using  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factorization\">docs#nat.factorization</a></p>\n</blockquote>\n<p>I guess you mean it would be better if the condition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lucas_primality\">docs#lucas_primality</a> were stated as <code>∀ q ∈ p.factors, ...</code>, I agree this would look a bit better, and I wouldn't object to someone changing it (although I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/factors\">docs#factors</a> should probably be named <code>prime_factors</code>).</p>",
        "id": 305719293,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666565717
    },
    {
        "content": "<p>Why not both? (also <code>∀ q ∈ (p - 1).factors</code>)</p>",
        "id": 305862530,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666630045
    },
    {
        "content": "<p>I just mean a formulation such that it's easy to list, in Lean, all the cases.</p>",
        "id": 305895165,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1666638297
    },
    {
        "content": "<p>With quite a bit of effort and broken up lemmas, I proved <code>47867742232066880047611079</code> is prime. This prime is interesting because it can't be written as the sum or difference of prime powers (from a 1999 result of Sun), and I verified it's not the sum or difference of a power of two and a prime (a 1975 result)</p>",
        "id": 308916163,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1668053384
    },
    {
        "content": "<p>Perhaps also worth noting that p-1 here also has a large prime factor <code>q = 90101681149415123</code>, and q-1 also has a large prime factor <code>1123145497</code>, and bare <code>norm_num</code> can't do this one either, so the certificate starts there</p>",
        "id": 308916353,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1668053519
    },
    {
        "content": "<p>Nice work ! Is it somewhere?</p>",
        "id": 308927609,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668061912
    },
    {
        "content": "<p>That's a very philosophical question!</p>",
        "id": 308932840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668065428
    },
    {
        "content": "<p>I mean, on some repository <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 308936239,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668067332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/large.20numbers.20computations/near/308927609\">said</a>:</p>\n<blockquote>\n<p>Nice work ! Is it somewhere?</p>\n</blockquote>\n<p>Not yet - if my primality verifying code from earlier is bad, this is atrocious :D</p>",
        "id": 308991555,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1668087975
    }
]