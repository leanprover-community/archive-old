[
    {
        "content": "<p>What is this called and where does it go?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fxy</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fxz</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hYZ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">trans_map</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fxy</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fxz</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hYZ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fxy</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">fxy</span> <span class=\"n\">fxz</span> <span class=\"n\">hYZ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fxz</span>\n</pre></div>",
        "id": 164017461,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556044998
    },
    {
        "content": "<p>Your <code>def</code> seems incomplete...</p>",
        "id": 164018419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556045659
    },
    {
        "content": "<p>It's the injective map that has the property given by the lemma.</p>",
        "id": 164018539,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556045758
    },
    {
        "content": "<p>Or an injective map with that property.</p>",
        "id": 164018600,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556045769
    },
    {
        "content": "<p>Is <code>embedding.trans</code> what I would have called <code>embedding.comp</code>?</p>",
        "id": 164018741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556045873
    },
    {
        "content": "<p>Yes</p>",
        "id": 164018747,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556045881
    },
    {
        "content": "<p>Also... where does your <code>map</code> come up in practice? I don't really understand what's going on...</p>",
        "id": 164018827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556045908
    },
    {
        "content": "<p>It came up doing algebraic closure.</p>",
        "id": 164018855,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556045921
    },
    {
        "content": "<p>Would you mind copy-pasting the entire definition of <code>map</code>? And more context if you want?</p>",
        "id": 164018958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556045990
    },
    {
        "content": "<p>I have a bunch of field structures on subsets of a random type, ordering by subset and the inclusion map is a field homomorphism.</p>",
        "id": 164019016,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556046004
    },
    {
        "content": "<p>Doing zorn on this gives the algebraic closure.</p>",
        "id": 164019045,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556046021
    },
    {
        "content": "<p>But to prove it's algebraically closed, you need to adjoin a root to the algebraic closure and transfer the structure of this back to some superset of the algebraic closure in the \"big type\".</p>",
        "id": 164019164,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556046106
    },
    {
        "content": "<p>Ok...</p>",
        "id": 164019237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556046130
    },
    {
        "content": "<p>So in the lemma <code>Z</code> is the \"big type\"?</p>",
        "id": 164019258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556046146
    },
    {
        "content": "<p>Yes. Y is the adjoin_root and X is the algebraic closure</p>",
        "id": 164019346,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556046203
    },
    {
        "content": "<p>The definition isn't important, it's just an arbitrary map with that property defined with choice.</p>",
        "id": 164019375,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556046231
    },
    {
        "content": "<p>Right... that's what I figured now</p>",
        "id": 164019448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556046259
    },
    {
        "content": "<p>In that case... I'm not sure if it will be used much outside of \"Zorny\" situations.</p>",
        "id": 164019472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556046279
    },
    {
        "content": "<p>I would think it could even go in <code>algebraic_closure.zorn_aux</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 164019525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556046323
    }
]