[
    {
        "content": "<p>Someone on the Coq discourse has announced this week that they have formalized the Abel-Ruffini theorem:<br>\n<a href=\"https://coq.discourse.group/t/a-formal-proof-of-abel-ruffini-theorem-in-coq/1189\">https://coq.discourse.group/t/a-formal-proof-of-abel-ruffini-theorem-in-coq/1189</a></p>\n<p>Just letting people know if ever it can be of inspiration in Lean.</p>",
        "id": 223603419,
        "sender_full_name": "François Sunatori",
        "timestamp": 1611290540
    },
    {
        "content": "<p>Yes, and a few of us are working on it in Lean right now.</p>",
        "id": 223603437,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611290586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> <span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> Congratulations!</p>",
        "id": 223604408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611291984
    },
    {
        "content": "<p>Very cool, <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> writes \"NB: all the proofs in this repository are constructive.\"  What does being constructive in this repository give you? I'd imagine that means you can compute in number fields in a verified way, which is already pretty nice, but do you get more out of this theory like an in-principle-computable function that spits out Galois groups of a given nested radical expression, or anything else that a number theorist who likes algorithms might enjoy?</p>",
        "id": 223605050,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611292998
    },
    {
        "content": "<p>I talked to Cyril about this recently. I think it's just a cultural difference, I don't think they're claiming that they can compute anything in practice, it's just that they will do everything constructively if it's possible because basically they've been brainwashed or however you want to call it -- they just have this convinction that it's important to be constructive whenever you can.</p>",
        "id": 223614145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611304013
    },
    {
        "content": "<p>I would be very surprised if this kind of constructive buy you anything that looks like a computer algebra system use.</p>",
        "id": 223614483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611304316
    },
    {
        "content": "<p>Right, but of course if people want to work that way then it's fine. Maybe it makes the code cleaner somehow? I remember when we had a constructive definition of valuation (instead of v(a+b) &lt;= max(v(a),v(b)) we had v(a+b) &lt;= v(a) or v(a+b) &lt;= v(b)) in the perfectoid project and it drove us nuts! So we changed it and refactored. My impression when I was formalising some topology constructively was that it actually made the arguments harder to read. But it's still very clear that there are a lot of people taking constructivism seriously in computer science departments, for good reasons, and it's just somehow a culture leak.</p>",
        "id": 223614858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611304660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<blockquote>\n<p>basically they've been brainwashed or however you want to call it</p>\n</blockquote>\n<p>Seriously?</p>",
        "id": 223665921,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1611333470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Abel-Ruffini.20theorem.20announced.20in.20Coq/near/223604408\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110193\">Cyril Cohen</span> <span class=\"user-mention silent\" data-user-id=\"110172\">Assia Mahboubi</span> Congratulations!</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 223666362,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1611333707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/Abel-Ruffini.20theorem.20announced.20in.20Coq/near/223605050\">said</a>:</p>\n<blockquote>\n<p>Very cool, <span class=\"user-mention silent\" data-user-id=\"110193\">Cyril Cohen</span> writes \"NB: all the proofs in this repository are constructive.\"  What does being constructive in this repository give you? I'd imagine that means you can compute in number fields in a verified way, which is already pretty nice, but do you get more out of this theory like an in-principle-computable function that spits out Galois groups of a given nested radical expression, or anything else that a number theorist who likes algorithms might enjoy?</p>\n</blockquote>\n<p>At this stage it means e.g. that it is decidable whether a polynomial is solvable or not, so it is a theoretical computational result that this algorithm exists and we could in principle run it and it would probably take more than your lifespan to return, without further optimization (although one might argue that there is no difference in practice between non-decidable and terminating in a time that is too long for our workday/carrier/lifespan, still.)</p>\n<p>It is also asserting that the result holds in other foundations of mathematics than ZFC: as it is stated the results holds in CIC + a few universes,  i.e. Coq with no additional axioms. This means it would hold in the computable fragment of Lean, if there were a translation from Coq to Lean,  but also, e.g., in CIC + algebraic universes + axiom of choice (i.e. as  in the <code>noncomputable</code> mode of Lean), as well as in CIC + Univalent Foundations.</p>\n<p>Somehow, given the library we  already have, it does not cost much more to prove this version that the \"non computable/classical\" one, so we might as well do it.</p>",
        "id": 223667808,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1611334426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> of course I jest ;-) but it's certainly true that I cannot really see the point, even though you have tried to explain it to me in the past</p>",
        "id": 223683215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611341714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span>  Thanks! Personally I do think its quite interesting to know what is in principle computable completely rigorously (of course computing anything nontrivial in most cases requires a different implementation to the mathematically nice ones). CASes like Pari make all sorts of assumptions, like GRH when computing class groups, normally only to speed things up but there are often heuristics about how much precision is needed in various contexts that without studying the source code it is hard to understand exactly what is assumed vs proved (this isn't a criticism of Pari of course its good that it does these things to be fast, just sometimes I'd like to be more sure of my proofs). I spent some time in the past very confused as to what is even computationally provable when Pari says that the (analytic) rank of elliptic curve is some number. I believe it is still an open problem to prove that any elliptic curve has _analytic_ rank <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">\\ge 4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span> for instance. I've not thought too much about Galois groups, but given that some of the general algorithms seem to use real or p-adic computation to some precision its a nice side output of the formalization to know there is a verified decision procedure for solvability!</p>",
        "id": 223688147,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611344157
    }
]