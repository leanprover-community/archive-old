[
    {
        "content": "<p>I have got two terms P and Q of a certain type, and I want to make a third term R of this type with some properties -- it has to be less than P and less than Q. The construction of R is completely symmetric in P and Q, at some point I extract a real eP from P and a real eQ from Q, and then I define eR to be <code>min eP eQ</code> and build R from this. My goal is now <code>R &lt; P \\and R &lt; Q</code>.  The proofs of these things will be (a) mildly lengthy and (b) essentially identical, there just being one point where I'll use <code>le_min_left</code> in one thread and <code>le_min_right</code> in the other, and one point where I'll use <code>hP</code> in <br>\none thread and <code>hQ</code> in the other.</p>\n<p>Is there some WLOGgery trick I can use to halve the amount of work I'm about to do?</p>\n<p>Out of interest, my tactic state is this (this is not really relevant to the question but it gives some kind of an idea as to the situation I'm in):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">is_pseudometric</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">cover</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">εP</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hεP</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">εP</span><span class=\"o\">,</span>\n<span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">closed_ball</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">εP</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">εQ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">min</span> <span class=\"n\">εP</span> <span class=\"n\">εQ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">hεQ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">εQ</span><span class=\"o\">,</span>\n<span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">closed_ball</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">εQ</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">min</span> <span class=\"n\">εP</span> <span class=\"n\">εQ</span><span class=\"o\">,</span>\n<span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">εP</span> <span class=\"n\">εQ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">closed_ball_cover</span> <span class=\"n\">d</span> <span class=\"n\">ε</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">closed_ball_cover</span> <span class=\"n\">d</span> <span class=\"n\">ε</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">Q</span>\n</code></pre></div>",
        "id": 200659280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591961730
    },
    {
        "content": "<p>(this is teaching material, I'm using non-standard versions of metric spaces, closed balls etc, this is not the issue)</p>",
        "id": 200659370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591961809
    },
    {
        "content": "<p>Over the board I'd just say \"of course the proof of the second case is the same\"</p>",
        "id": 200659568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591961996
    },
    {
        "content": "<p>I finished my proof and just cut and pasted it; I had to change two lines for the second case.</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">star_ref_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hP</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hUP</span><span class=\"o\">,</span> <span class=\"n\">hUε</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- changes to rcases hQ x</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hUP</span><span class=\"o\">],</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ne_empty_iff_nonempty</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hxy</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hzx</span><span class=\"o\">,</span> <span class=\"n\">hzy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span> <span class=\"n\">hUε</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">hty</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_closed_ball</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"n\">hzx</span> <span class=\"n\">hzy</span> <span class=\"n\">hty</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">this</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">min_le_left</span> <span class=\"n\">εP</span> <span class=\"n\">εQ</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- changes to min_le_right</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">calc</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">z</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">d_triangle</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">t</span>\n    <span class=\"bp\">...</span>        <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">d_triangle</span> <span class=\"n\">d</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span>        <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">d_comm</span> <span class=\"n\">d</span> <span class=\"n\">z</span> <span class=\"n\">y</span>\n    <span class=\"bp\">...</span>        <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 200660753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591963046
    },
    {
        "content": "<p>I think the thing I would do is generalize some tail of the proof script so that it closes both goals</p>",
        "id": 200661116,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591963285
    },
    {
        "content": "<p>So in this part, </p>\n<div class=\"codehilite\"><pre><span></span><code>      <span class=\"n\">rw</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">min_le_left</span> <span class=\"n\">εP</span> <span class=\"n\">εQ</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- changes to min_le_right</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>I'd make it so that linarith just needs to be told min_le_left and min_le_right, and I'd have the line before it put both of those inequalities into the tactic state</p>",
        "id": 200661221,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591963351
    },
    {
        "content": "<p>and in this part, </p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">star_ref_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hP</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hUP</span><span class=\"o\">,</span> <span class=\"n\">hUε</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- changes to rcases hQ x</span>\n</code></pre></div>\n\n\n<p>I'd do something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">all_goals</span>  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">star_ref_iff</span><span class=\"o\">,</span>   <span class=\"n\">rintros</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">},</span>\n<span class=\"n\">rcases</span> <span class=\"n\">hP</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hUP</span><span class=\"o\">,</span> <span class=\"n\">hUε</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hQ</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hUP</span><span class=\"o\">,</span> <span class=\"n\">hUε</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 200661286,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591963410
    },
    {
        "content": "<p>I guess this is bad pedagogy, though, you're really hoping for one thing you can say at the beginning that's like the mathematician's wlog</p>",
        "id": 200661427,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591963496
    },
    {
        "content": "<p>I am looking for a WLOG but I might be asking for too much. I feel like I want to be able to say \"Anything you can ask me for P, I can tell you the analogous thing for Q\" but I'm unclear about whether this is ludicrously optimistic.</p>",
        "id": 200700008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591983161
    },
    {
        "content": "<p>Did you try<code>wlog</code>?</p>",
        "id": 200703363,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591984843
    },
    {
        "content": "<p>The last time I tried to use wlog from just reading <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#wlog\">tactic#wlog</a> i didn't understand it. I found a couple of examples in the library, and it looks pretty to use and looks like it covers kevin's case:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/ff3130da134188aa6491efa6cebe94efa4247273/src/algebra/char_zero.lean\">https://github.com/leanprover-community/mathlib/blob/ff3130da134188aa6491efa6cebe94efa4247273/src/algebra/char_zero.lean</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/64e464f1970e29ab77e8bdf0a9d3751cdd429f5a/src/data/set/disjointed.lean\">https://github.com/leanprover-community/mathlib/blob/64e464f1970e29ab77e8bdf0a9d3751cdd429f5a/src/data/set/disjointed.lean</a></p>",
        "id": 200712461,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591989255
    },
    {
        "content": "<p>kevin, do you have a mwe? or just a pointer to a file in a github project?</p>",
        "id": 200712524,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591989302
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/uniform-structures/blob/5e2e7ab47fcc425a801f8568d2638fccf2a4e511/exercises/covers_from_pseudometric.lean#L125\">https://github.com/ImperialCollegeLondon/uniform-structures/blob/5e2e7ab47fcc425a801f8568d2638fccf2a4e511/exercises/covers_from_pseudometric.lean#L125</a></p>\n<p>The goal at the <code>split</code> is <code>R &lt; P \\and R &lt; Q</code>. <br>\nThe last time I tried to use wlog I didn't understand it either. I'll try it again now.</p>",
        "id": 200714772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591990341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> my (limited) understanding of wlog is that it is able to add extra hypotheses of the form \"a &lt;= b\" if everything is symmetric in a and b. I have a goal of the form <code>P and Q</code> and I want to say \"it suffices to prove P, because a proof of P can be used to generate a proof of Q\".</p>",
        "id": 200715150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591990554
    },
    {
        "content": "<p>Can you say wlog p implies q?</p>",
        "id": 200725596,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591996658
    }
]