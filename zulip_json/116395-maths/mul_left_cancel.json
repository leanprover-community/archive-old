[
    {
        "content": "<p>Hi! I'm trying to find the proof of mul_left_cancel in <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" title=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a>, or in other words:<br>\n<code>theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=</code></p>\n<p>I'm in constructivist logic, so I was trying by induction, but both inductions on a and b lead me to useless implications. Anyone has a hint?</p>",
        "id": 193375347,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586378177
    },
    {
        "content": "<p>induction on <code>a</code></p>",
        "id": 193375393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378208
    },
    {
        "content": "<p>after <code>revert ha</code></p>",
        "id": 193375407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378221
    },
    {
        "content": "<p>or prove it for <code>succ a</code> first by induction</p>",
        "id": 193375435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378239
    },
    {
        "content": "<p>or <code>cases a</code> first to turn it into <code>succ a</code> and then start induction</p>",
        "id": 193375450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378249
    },
    {
        "content": "<p>oh wait that doesn't work</p>",
        "id": 193375582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378313
    },
    {
        "content": "<p>but that gives me <code>ab + b = ac + c</code>, given that <code>ab = ac =&gt; b = c</code><br>\nFrom this we can get <code>ab + b = ac + b =&gt; b = c</code> -&gt; <code>ac + c = ac + b =&gt; b = c</code> -&gt; <code>b = c =&gt; b = c</code> which leads me to believe that the implication is useless</p>",
        "id": 193375669,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586378380
    },
    {
        "content": "<p>I'm thinking about proving <code>b &lt; c</code> implies <code>a * b &lt; a * c</code> first</p>",
        "id": 193375678,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378389
    },
    {
        "content": "<p>I don't have ordering yet</p>",
        "id": 193375690,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586378398
    },
    {
        "content": "<p>from the layout of the game, it shouldn't be needed</p>",
        "id": 193375767,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586378431
    },
    {
        "content": "<p>It would be nice to be able to write \"there is n such that b = c + n\", but I can't really do that</p>",
        "id": 193375876,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586378496
    },
    {
        "content": "<p>I can't even think of a maths proof without ordering</p>",
        "id": 193375900,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378516
    },
    {
        "content": "<p>Yeah this level trips everyone up</p>",
        "id": 193376055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586378597
    },
    {
        "content": "<p>ah, the hint (that I somehow skipped) is to start with <code>revert b</code></p>",
        "id": 193376088,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586378616
    },
    {
        "content": "<p>let me see where that leads me</p>",
        "id": 193376096,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586378621
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues/63\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues/63\">https://github.com/ImperialCollegeLondon/natural_number_game/issues/63</a></p>",
        "id": 193376356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586378786
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 193376624,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586378942
    },
    {
        "content": "<p>When I have <code>g : ∀ (b : mynat), succ a * b + b = succ a * c + b → b = c</code>, how do I say that it's true in particular for b = d?</p>",
        "id": 193377028,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586379162
    },
    {
        "content": "<p><code>specialize g d</code></p>",
        "id": 193377133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586379225
    },
    {
        "content": "<p><code>have gd := g d</code></p>",
        "id": 193377147,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586379235
    },
    {
        "content": "<p>or just use <code>g d</code> in your next line</p>",
        "id": 193377194,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586379244
    },
    {
        "content": "<p>Ah, <code>have</code>! Thanks</p>",
        "id": 193377214,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586379261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193376356\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193376356\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues/63\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues/63\">https://github.com/ImperialCollegeLondon/natural_number_game/issues/63</a></p>\n</blockquote>\n<p>Don't forget to read the comments of that issue.</p>",
        "id": 193377227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586379270
    },
    {
        "content": "<p>Thanks Patrick -- I remember you told me that before but that was before I was using issues to organise the repo.</p>",
        "id": 193377309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586379328
    },
    {
        "content": "<p>Argh! I still can't figure it out, I'm running in circles!<br>\nI have:<br>\n<code>g : ∀ (b : mynat), succ a * b + b = succ a * c + b → b = c,\nh : succ a * d + d = succ a * c + c,</code><br>\ntrying to prove <code>c = d</code></p>",
        "id": 193377702,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586379502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284134\">Valentin Tolmer</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193377702\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193377702\">said</a>:</p>\n<blockquote>\n<p>Argh! I still can't figure it out, I'm running in circles!</p>\n</blockquote>\n<p>Welcome to mathematics!</p>",
        "id": 193377996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586379650
    },
    {
        "content": "<p>This level should come with a health warning.</p>",
        "id": 193378073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586379693
    },
    {
        "content": "<p>I want to prove it by embedding everything into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> but I'm not 100% sure that I can do this rigorously because maybe the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> is an integral domain uses this? <em>shrug</em></p>",
        "id": 193378260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586379752
    },
    {
        "content": "<p>from my hypotheses, I can turn my implication into <code>d = c =&gt; d = c</code>, which makes me think that the implication is useless here, in which case I'm missing something to solve the problem.</p>",
        "id": 193378946,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586380111
    },
    {
        "content": "<p>The original <code>revert b</code> (or <code>generalizing</code>) doesn't seem to have helped</p>",
        "id": 193379039,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586380178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193377996\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193377996\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284134\">Valentin Tolmer</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193377702\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193377702\">said</a>:</p>\n<blockquote>\n<p>Argh! I still can't figure it out, I'm running in circles!</p>\n</blockquote>\n<p>Welcome to mathematics!</p>\n</blockquote>\n<p>That's not my first bout with mathematics, or even with Peano, but somehow this specific problem eludes me! The rest came relatively easy :(</p>",
        "id": 193379158,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586380232
    },
    {
        "content": "<p>Sorry, my goal was not to imply you are ignorant, I only wanted to write something funny about mathematics.</p>",
        "id": 193379237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586380295
    },
    {
        "content": "<p>yeah, no worries, I was just lamenting on my fate... Any hint?</p>",
        "id": 193379400,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586380391
    },
    {
        "content": "<p>Sorry, I began Lean so long ago that I never went through the natural number game.</p>",
        "id": 193379512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586380449
    },
    {
        "content": "<p>After revert b, do induction on c.</p>",
        "id": 193379527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586380467
    },
    {
        "content": "<p>ah, now that you say it I can instantly see why it works</p>",
        "id": 193379628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586380539
    },
    {
        "content": "<p>Welcome to mathematics!</p>",
        "id": 193379740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586380587
    },
    {
        "content": "<p>Yes, that's definitely another aspect of mathematics.</p>",
        "id": 193380548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586381135
    },
    {
        "content": "<p>Finally did it! Probably in a somewhat roundabout way</p>",
        "id": 193383099,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586382753
    },
    {
        "content": "<p>Okay, I deserve to go to bed, it's midnight. Thank you for your gracious help, gentlemen (and ladies!)</p>",
        "id": 193383859,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586383264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193377227\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193377227\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193376356\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193376356\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues/63\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues/63\">https://github.com/ImperialCollegeLondon/natural_number_game/issues/63</a></p>\n</blockquote>\n<p>Don't forget to read the comments of that issue.</p>\n</blockquote>\n<p>sorry to bother, but what do you mean by this? how would you use <code>generalizing</code>?  what does it do?</p>",
        "id": 193393363,
        "sender_full_name": "Eric",
        "timestamp": 1586390318
    },
    {
        "content": "<p>Instead of <code>revert a, induction b, intro a</code> I think the idea is that you do <code>induction b generalizing a</code>. I've just checked this by looking at the induction docstring in VS Code and was going to link to the docs but apparently <code>induction</code> isn't in the docs?</p>",
        "id": 193420604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586420899
    },
    {
        "content": "<p>It's a core tactic.</p>",
        "id": 193420617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586420913
    },
    {
        "content": "<p>I know. So we don't document it in the API?</p>",
        "id": 193420629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586420926
    },
    {
        "content": "<p>I think we should document it anyway.</p>",
        "id": 193420631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586420928
    },
    {
        "content": "<p>It should be doable using the new command adding tactic documentation</p>",
        "id": 193420673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586420948
    },
    {
        "content": "<p>I've just clicked on the core tactics link in the docs and it sends me to ch6 of TPIL, which is great if you are trying to figure out the basics but I just wanted a link to the docstring.</p>",
        "id": 193420689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586420969
    },
    {
        "content": "<p>Shall I open an issue?</p>",
        "id": 193420703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586420986
    },
    {
        "content": "<p>What's the core tactics link in the docs?</p>",
        "id": 193420769,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421012
    },
    {
        "content": "<p>I only say this because I've just been reading mathlib issues and PR's, I'm trying to get my head around the way the github site runs.</p>",
        "id": 193420770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586421013
    },
    {
        "content": "<p>You should open a PR.</p>",
        "id": 193420782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586421018
    },
    {
        "content": "<p>running <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#add_tactic_doc\" title=\"https://leanprover-community.github.io/mathlib_docs/commands.html#add_tactic_doc\">https://leanprover-community.github.io/mathlib_docs/commands.html#add_tactic_doc</a></p>",
        "id": 193420815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586421053
    },
    {
        "content": "<p>I mean the link at the top of the page at<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>\n<div class=\"codehilite\"><pre><span></span>Mathlib tactics\n\nIn addition to `the tactics found in the core library`, mathlib...\n</pre></div>",
        "id": 193420826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586421060
    },
    {
        "content": "<p>This documentation split is becoming more and more ridiculous now that mathlib has ten times more tactics than core.</p>",
        "id": 193420867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586421100
    },
    {
        "content": "<p>Oh Patrick I can't open a PR, I don't understand anything about <code>add_tactic_doc</code> even if I read the docs</p>",
        "id": 193420991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586421161
    },
    {
        "content": "<p>In general, it's very easy to add docs for tactics in core. There's not a natural place for it right now but we could add one. For now, the bottom of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/doc_commands.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/doc_commands.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/doc_commands.lean</a> is probably right.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- write your doc entry here -/</span>\n<span class=\"n\">add_tactic_doc</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;induction&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">category</span> <span class=\"o\">:=</span> <span class=\"n\">doc_category</span><span class=\"bp\">.</span><span class=\"n\">tactic</span><span class=\"o\">,</span>\n  <span class=\"n\">decl_names</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span><span class=\"o\">],</span>\n  <span class=\"n\">tags</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;whatever fits&quot;</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193421031,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 193421068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586421241
    },
    {
        "content": "<p>So I just manually choose all the tactics I think should be documented?</p>",
        "id": 193421143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586421286
    },
    {
        "content": "<p>It would be a reasonable idea to add a file, importing <code>tactic.doc_command</code> and imported by <code>tactic.core</code>, that just has a bunch of doc entries for tactics in the core repo.</p>",
        "id": 193421152,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421289
    },
    {
        "content": "<p>If the tactics have doc strings in core, you can even skip the <code>/-- write your doc entry here -/</code> line, and the doc string will be used as the doc entry.</p>",
        "id": 193421180,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421317
    },
    {
        "content": "<p>How do I test it?</p>",
        "id": 193421209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586421349
    },
    {
        "content": "<p>How do I list all tactics in core?</p>",
        "id": 193421222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586421359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193421143\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193421143\">said</a>:</p>\n<blockquote>\n<p>So I just manually choose all the tactics I think should be documented?</p>\n</blockquote>\n<p>Yep. The choices are, which tactics to document, how to name the doc entry (usually just the name of the tactic), and which tag/tags to give it.</p>",
        "id": 193421267,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421364
    },
    {
        "content": "<p>Where can I see examples of tags for tactics?</p>",
        "id": 193421296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586421389
    },
    {
        "content": "<p>There's not a convenient way to test it right now, but if the <code>add_tactic_doc</code> command succeeds, you probably have it right.</p>",
        "id": 193421300,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193421296\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193421296\">said</a>:</p>\n<blockquote>\n<p>Where can I see examples of tags for tactics?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a> drop down menu on the left</p>",
        "id": 193421317,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421409
    },
    {
        "content": "<p>OK I'm on it</p>",
        "id": 193421345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586421442
    },
    {
        "content": "<p>These were added fairly recently and they're still evolving, so feel free to change tags as you see fit!</p>",
        "id": 193421355,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421459
    },
    {
        "content": "<p>There's a tag <code>core</code> for tactics from the core library. I was going to say it's kind of unnecessary. But actually, I think it's good to use, so people not using mathlib can see what tactics are available.</p>",
        "id": 193421498,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193421222\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193421222\">said</a>:</p>\n<blockquote>\n<p>How do I list all tactics in core?</p>\n</blockquote>\n<p>For an overapproximation, run <code>#print prefix tactic.interactive</code> in a file that doesn't import anything. There's some junk in the list but all core tactics will appear.</p>",
        "id": 193421637,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421642
    },
    {
        "content": "<p>If/when more of core is documented, we can change the intro to the tactic doc page.</p>",
        "id": 193421722,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586421711
    },
    {
        "content": "<p>Kevin, you can also look at <a href=\"https://leanprover.github.io/reference/tactics.html\" title=\"https://leanprover.github.io/reference/tactics.html\">https://leanprover.github.io/reference/tactics.html</a> for a good selection.</p>",
        "id": 193422147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586421989
    },
    {
        "content": "<p>One more note: doc entries and doc strings aren't always the same. But if you're writing doc entries that could also be doc strings, for tactics that don't have doc strings, you could make a PR adding the doc strings to core.</p>",
        "id": 193423385,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586422823
    },
    {
        "content": "<p>One thing that has always annoyed me about core docstrings is the ones like <code>ac_refl</code> which just says \"an abbreviation for something else\"</p>",
        "id": 193423434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586422862
    },
    {
        "content": "<p>I'm sure changes to those would be very welcome!</p>",
        "id": 193423473,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586422885
    },
    {
        "content": "<p><code>rw</code> docstring is <code>an abbreviation for rewrite</code></p>",
        "id": 193423573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586422925
    },
    {
        "content": "<p>Proof that core Lean is consistent:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">abstract</span><span class=\"o\">,</span>\n<span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n<span class=\"n\">ac_reflexivity</span><span class=\"o\">,</span>\n<span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span><span class=\"o\">,</span>\n<span class=\"n\">any_goals</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span><span class=\"o\">,</span>\n<span class=\"n\">apply_auto_param</span><span class=\"o\">,</span>\n<span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"n\">apply_opt_param</span><span class=\"o\">,</span>\n<span class=\"n\">apply_with</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span><span class=\"o\">,</span>\n<span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"n\">assumption&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">async</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span><span class=\"o\">,</span>\n<span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n<span class=\"n\">case</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span><span class=\"o\">,</span>\n<span class=\"n\">cases_arg_p</span><span class=\"o\">,</span>\n<span class=\"n\">cases_core</span><span class=\"o\">,</span>\n<span class=\"n\">cases_matching</span><span class=\"o\">,</span>\n<span class=\"n\">cases_type</span><span class=\"o\">,</span>\n<span class=\"n\">casesm</span><span class=\"o\">,</span>\n<span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">change</span><span class=\"o\">,</span>\n<span class=\"n\">clear</span><span class=\"o\">,</span>\n<span class=\"n\">comp_val</span><span class=\"o\">,</span>\n<span class=\"n\">concat_tags</span><span class=\"o\">,</span>\n<span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"n\">constructor</span><span class=\"o\">,</span>\n<span class=\"n\">constructor_matching</span><span class=\"o\">,</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"n\">conv</span><span class=\"o\">,</span>\n<span class=\"n\">delta</span><span class=\"o\">,</span>\n<span class=\"n\">destruct</span><span class=\"o\">,</span>\n<span class=\"n\">done</span><span class=\"o\">,</span>\n<span class=\"n\">dsimp</span><span class=\"o\">,</span>\n<span class=\"n\">dunfold</span><span class=\"o\">,</span>\n<span class=\"n\">eapply</span><span class=\"o\">,</span>\n<span class=\"n\">econstructor</span><span class=\"o\">,</span>\n<span class=\"n\">erewrite</span><span class=\"o\">,</span>\n<span class=\"n\">erw</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span><span class=\"o\">,</span>\n<span class=\"n\">exacts</span><span class=\"o\">,</span>\n<span class=\"n\">exacts</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">existsi</span><span class=\"o\">,</span>\n<span class=\"n\">existsi</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"o\">,</span>\n<span class=\"n\">fail_if_success</span><span class=\"o\">,</span>\n<span class=\"n\">fapply</span><span class=\"o\">,</span>\n<span class=\"n\">focus</span><span class=\"o\">,</span>\n<span class=\"k\">from</span><span class=\"o\">,</span>\n<span class=\"n\">funext</span><span class=\"o\">,</span>\n<span class=\"n\">generalize</span><span class=\"o\">,</span>\n<span class=\"n\">get_rule_eqn_lemmas</span><span class=\"o\">,</span>\n<span class=\"n\">guard_expr_eq</span><span class=\"o\">,</span>\n<span class=\"n\">guard_hyp</span><span class=\"o\">,</span>\n<span class=\"n\">guard_target</span><span class=\"o\">,</span>\n<span class=\"k\">have</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span><span class=\"o\">,</span>\n<span class=\"n\">injection</span><span class=\"o\">,</span>\n<span class=\"n\">injections</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">introv</span><span class=\"o\">,</span>\n<span class=\"n\">iterate</span><span class=\"o\">,</span>\n<span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"k\">let</span><span class=\"o\">,</span>\n<span class=\"n\">mapply</span><span class=\"o\">,</span>\n<span class=\"n\">match_target</span><span class=\"o\">,</span>\n<span class=\"n\">min_tac</span><span class=\"o\">,</span>\n<span class=\"n\">propagate_tags</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n<span class=\"n\">rename</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span><span class=\"o\">,</span>\n<span class=\"n\">revert</span><span class=\"o\">,</span>\n<span class=\"n\">rewrite</span><span class=\"o\">,</span>\n<span class=\"n\">right</span><span class=\"o\">,</span>\n<span class=\"n\">rsimp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">has_reflect</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_arrow</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">no_confusion_type</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">rule</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rule_p</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">end_pos</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">has_reflect</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_arrow</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">no_confusion_type</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rules_t</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">,</span>\n<span class=\"n\">rwa</span><span class=\"o\">,</span>\n<span class=\"k\">show</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">simp_core</span><span class=\"o\">,</span>\n<span class=\"n\">simp_core_aux</span><span class=\"o\">,</span>\n<span class=\"n\">simp_intros</span><span class=\"o\">,</span>\n<span class=\"n\">skip</span><span class=\"o\">,</span>\n<span class=\"n\">solve1</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">subst</span><span class=\"o\">,</span>\n<span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n<span class=\"n\">success_if_fail</span><span class=\"o\">,</span>\n<span class=\"n\">suffices</span><span class=\"o\">,</span>\n<span class=\"n\">symmetry</span><span class=\"o\">,</span>\n<span class=\"n\">to_expr&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span><span class=\"o\">,</span>\n<span class=\"n\">trace_simp_set</span><span class=\"o\">,</span>\n<span class=\"n\">trace_state</span><span class=\"o\">,</span>\n<span class=\"n\">transitivity</span><span class=\"o\">,</span>\n<span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"n\">try</span><span class=\"o\">,</span>\n<span class=\"n\">type_check</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span><span class=\"o\">,</span>\n<span class=\"n\">unfold1</span><span class=\"o\">,</span>\n<span class=\"n\">unfold_projs</span><span class=\"o\">,</span>\n<span class=\"n\">with_cases</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Nothing works.</p>",
        "id": 193424753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586423625
    },
    {
        "content": "<p>Actually, <code>admit</code> and <code>sorry</code> both work :-)</p>",
        "id": 193424828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586423658
    },
    {
        "content": "<p>where's <code>eblast</code>, or did I dream that this was a core tactic?</p>",
        "id": 193425448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424017
    },
    {
        "content": "<p>Note that not all of the core library is in <code>init</code> so Rob's procedure won't necessarily be a completely exhaustive list</p>",
        "id": 193425505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424062
    },
    {
        "content": "<p>so my proof has a hole?</p>",
        "id": 193425534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586424088
    },
    {
        "content": "<p>we need an <code>import core.all</code></p>",
        "id": 193425559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424107
    },
    {
        "content": "<p>I am not capable of creating such a file but I would be very interested in having a complete list of tactics.</p>",
        "id": 193425628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586424133
    },
    {
        "content": "<p>I thought that all of core was imported whenever I did anything at all.</p>",
        "id": 193425658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586424153
    },
    {
        "content": "<p>I think you could also improve the proof by wrapping each tactic in <code>try</code></p>",
        "id": 193425676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424166
    },
    {
        "content": "<p>If you omit <code>prelude</code> at the top of the file, this is equivalent to writing <code>import init</code></p>",
        "id": 193425705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424202
    },
    {
        "content": "<p>I think that if you went and deleted the init folder from core you could even make your own file <code>init/default.lean</code> and put whatever you wanted and that would get default imported</p>",
        "id": 193425800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424251
    },
    {
        "content": "<p>This is all beyond me.</p>",
        "id": 193426001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586424380
    },
    {
        "content": "<p>but if \"the core library\" is defined as the contents of <code>library/</code> in the lean repo, then there is more in there than just <code>library/init/</code>. For example there is stuff about <code>vector</code> and Gabriel's <code>data.buffer.parser</code> parser combinator library</p>",
        "id": 193426007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424386
    },
    {
        "content": "<p>I know 0 about anything here. I just want some kind of a list of tactics.</p>",
        "id": 193426040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586424408
    },
    {
        "content": "<p>these are things that you have to still write <code>import</code> to get, but you don't need mathlib to do so</p>",
        "id": 193426053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424416
    },
    {
        "content": "<p>Oh I see, I looked it up and <code>eblast</code> is an <code>smt_tactic</code></p>",
        "id": 193426124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424465
    },
    {
        "content": "<p>that's a whole story right there</p>",
        "id": 193426129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424474
    },
    {
        "content": "<p>you should also dump <code>#print prefix smt_tactic.interactive</code> to see these tactics</p>",
        "id": 193426216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424508
    },
    {
        "content": "<p>Do we want those documented in the API docs?</p>",
        "id": 193426320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586424585
    },
    {
        "content": "<p>they get used inside <code>begin [smt_tactic] end</code> blocks</p>",
        "id": 193426349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424602
    },
    {
        "content": "<p>Kevin, you didn't read <a href=\"https://github.com/leanprover-community/mathlib/pull/2337\" title=\"https://github.com/leanprover-community/mathlib/pull/2337\">https://github.com/leanprover-community/mathlib/pull/2337</a> carefully enough.</p>",
        "id": 193426354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586424603
    },
    {
        "content": "<p>If the goal is maximum coverage of core I think the smt interactive mode is also important</p>",
        "id": 193426425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424645
    },
    {
        "content": "<p>even though I have epsilon experience with it</p>",
        "id": 193426439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424657
    },
    {
        "content": "<p>I know that <code>eblast</code> is <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> 's favorite tactic</p>",
        "id": 193426462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424669
    },
    {
        "content": "<p>it's kind of like <code>finish</code></p>",
        "id": 193426483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586424690
    },
    {
        "content": "<p>Patrick I did read tools.md -- are you referring to something else?</p>",
        "id": 193426595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586424764
    },
    {
        "content": "<p>No. But <code>init</code> is mentioned there.</p>",
        "id": 193426618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586424786
    },
    {
        "content": "<p>oh, fair enough</p>",
        "id": 193426630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586424797
    },
    {
        "content": "<p>Maybe I should explicitly point out the existence of other files in the code library</p>",
        "id": 193426648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586424811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193425505\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193425505\">said</a>:</p>\n<blockquote>\n<p>Note that not all of the core library is in <code>init</code> so Rob's procedure won't necessarily be a completely exhaustive list</p>\n</blockquote>\n<p>I see two tactics in the <code>smt</code> directory that aren't used, otherwise pretty sure all the tactics in core are in init.</p>",
        "id": 193427683,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586425478
    },
    {
        "content": "<p>If we document the smt mode stuff, it probably belongs in a separate doc file, like the commands and attributes. Right?</p>",
        "id": 193427737,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586425516
    },
    {
        "content": "<p>Then we can explain what smt mode is in the header.</p>",
        "id": 193427775,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586425539
    },
    {
        "content": "<p>It should be in a separate file, but the main file should make sure to note somewhere that the other file exists</p>",
        "id": 193428133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586425771
    }
]