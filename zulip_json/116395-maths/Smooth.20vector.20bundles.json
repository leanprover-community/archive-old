[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and I have been working out a proposed definition of smooth vector bundles, and we would like to ask for comments.  Our branch (still with many sorries) is <a href=\"https://github.com/leanprover-community/mathlib/tree/smooth-vector-bundle\">branch#smooth-vector-bundle</a>, and links go to declarations in that branch.  We have tested it as far as the construction of the smooth manifold structure on a smooth vector bundle, and everything is designed to make this proof-of-concept and its variants work well.</p>\n<p><strong>\"Smooth vector bundle\" to be a <code>Prop</code> typeclass on top of \"topological vector bundle\"</strong></p>\n<p>Let <code>E</code> be a topological vector bundle, with model fibre <code>F</code> and base space <code>B</code>.  We would like to consider <code>E</code> as carrying a <a href=\"https://github.com/leanprover-community/mathlib/blob/e749eecc1fcd04f4c6fcc42b37dd5a5694a69c16/src/geometry/manifold/vector_bundle.lean#L21\">charted space structure given by its trivializations</a> -- these are charts to <code>B × F</code>.  Then, by <a href=\"https://github.com/leanprover-community/mathlib/blob/e749eecc1fcd04f4c6fcc42b37dd5a5694a69c16/src/geometry/manifold/charted_space.lean#L576\">\"composition\"</a>, if <code>B</code> is itself a charted space over <code>H</code> (e.g. a smooth manifold), then <code>E</code> is also a <a href=\"https://github.com/leanprover-community/mathlib/blob/e749eecc1fcd04f4c6fcc42b37dd5a5694a69c16/src/geometry/manifold/vector_bundle.lean#L32\">charted space over <code>H × F</code></a>.</p>\n<p>Now, we define \"smooth vector bundle\" as the <code>Prop</code> of having <a href=\"https://github.com/leanprover-community/mathlib/blob/e749eecc1fcd04f4c6fcc42b37dd5a5694a69c16/src/geometry/manifold/vector_bundle.lean#L166\">smooth transition functions</a>.    We introduce the structure groupoid on <code>B × F</code> consisting of <a href=\"https://github.com/leanprover-community/mathlib/blob/e749eecc1fcd04f4c6fcc42b37dd5a5694a69c16/src/geometry/manifold/vector_bundle.lean#L110\">smooth, fibrewise linear local homeomorphisms</a>, show that our definition of \"smooth vector bundle\" <a href=\"https://github.com/leanprover-community/mathlib/blob/e749eecc1fcd04f4c6fcc42b37dd5a5694a69c16/src/geometry/manifold/vector_bundle.lean#L177\">implies <code>has_groupoid</code> for this groupoid</a>, and show (by a \"composition\" of <code>has_groupoid</code> instances) that this means that a smooth vector bundle <a href=\"https://github.com/leanprover-community/mathlib/blob/e749eecc1fcd04f4c6fcc42b37dd5a5694a69c16/src/geometry/manifold/vector_bundle.lean#L204\">is a smooth manifold</a>. This idea is at least implicit in <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s docs for charted spaces, and I believe it was a use case he already envisaged.</p>\n<p>Since <code>smooth_vector_bundle</code> is a Prop, it is easy to make variants and for many such variants to coexist -- vector bundles can be smooth vector bundles over several different base fields, they can also be C^k vector bundles, etc.</p>\n<p><strong>Refactor of topological vector and fiber bundles</strong></p>\n<p>The linter will complain about one step in the above construction: having a topological vector bundle naturally be a charted space over <code>B × F</code>.  This is because when looking for that charted space instance, Lean would need to find the scalar field for the topological vector bundle itself.</p>\n<p>We propose to solve this by introducing a <a href=\"https://github.com/leanprover-community/mathlib/blob/e749eecc1fcd04f4c6fcc42b37dd5a5694a69c16/src/topology/new_fiber_bundle.lean#L427\">data-carrying gadget</a> (currently we call it <code>fiber_bundle</code>) which is mathematically the same as the current Prop typeclass <code>is_topological_fiber_bundle</code>, but which carries a fixed family of preferred trivializations and choice of trivialization at each basepoint, not just the Prop that a trivialization exists at each basepoint.</p>\n<p>An analogy is that you can consider a topological manifold as being either a Prop -- the existence of a local homeomorphism to R^n at each point -- or as data -- a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/charted_space\">docs#charted_space</a> modelled on R^n.</p>\n<p>For vector bundles, one needs the data-carrying version, because of the <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275922524\">subtlety in infinite dimension which came up in March</a>.  We are proposing moving this data to <code>fiber_bundle</code>, and then having <code>is_vector_bundle</code> be a Prop on top of that (consisting of assumptions that certain maps are linear and continuous).</p>\n<p>This solves the dangerous instance problem for the <code>B × F</code>-charted space structure on a vector bundle: it is actually now a <code>B × F</code>-charted space structure on a fiber bundle, so Lean doesn't have to guess the scalar field.</p>\n<p>Incidentally, it improves a couple of other minor annoyances with topological vector bundles:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_bundle.continuous_proj\">docs#topological_vector_bundle.continuous_proj</a> doesn't require you to help Lean guess the field</li>\n<li>deduplication of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_fiber_bundle.trivialization\">docs#topological_fiber_bundle.trivialization</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_bundle.trivialization\">docs#topological_vector_bundle.trivialization</a> </li>\n</ul>\n<p>There is the question of whether the new <code>fiber_bundle</code> should coexist with <code>is_[topological_]fiber_bundle</code>, or replace it.  We propose a full replacement but either way would work for our purposes.</p>",
        "id": 306023372,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666702983
    },
    {
        "content": "<p>Thanks for doing this! Since the moment you have noticed that data was necessary to define vector bundles in general, I knew we would have to do something along these lines, and I'm really glad you are doing it. I would replace completely <code>is_topological_fiber_bundle</code> with the new construction: it is not surprising that the first implementation of this kind of notion hasn't found the right setting (just as what has happened for schemes, or the integral), so I think we shouldn't keep a technological debt based on this random first implementation, and we should just throw it away.</p>",
        "id": 306035655,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1666706559
    },
    {
        "content": "<p>This attitude is what I think sets us apart from the other provers, in fact.</p>",
        "id": 306036516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666706804
    },
    {
        "content": "<p>Kevin, I don't think this is true. I think the odd order project featured massive refactors.</p>",
        "id": 306040085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666707868
    },
    {
        "content": "<p>Yes I'm sure you're right about the big projects in the other provers. But this is happening for us in general.</p>",
        "id": 306040226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666707910
    },
    {
        "content": "<p>Thanks for the prompt comments, Sébastien.  OK ... if no one else objects, it will be out with the old fibre bundles, in with the new!</p>",
        "id": 306111905,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666728175
    },
    {
        "content": "<p>In fact, we have another proposed change to the definition of fibre bundle, which I forgot to mention.  (This is separate from the data/Prop decision.). Currently:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_topological_fiber_bundle\">docs#is_topological_fiber_bundle</a><br>\nany topological space <code>Z</code> can be a fibre bundle: you provide a map <code>proj : Z → B</code> where <code>B</code> is the base space.  So, for example, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">S^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> could be a fibre bundle over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">S^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.  In our new definition:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/819ce68cbcab787cf901093b2bebc746fd60209f/src/topology/new_fiber_bundle.lean#L427\">https://github.com/leanprover-community/mathlib/blob/819ce68cbcab787cf901093b2bebc746fd60209f/src/topology/new_fiber_bundle.lean#L427</a><br>\nwe're proposing that only spaces of the form <code>bundle.total_space E</code> (which is a type synonym for a sigma-type <code>Σ (x : B), E x</code>) can be fibre bundles.  Thus the fibre structure is \"baked in\" definitionally.</p>\n<p>This is already the choice made for vector bundles, so it has the advantage of consistency.  There is, of course, a loss of expressivity.  Does anyone object?</p>",
        "id": 306113377,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666728690
    },
    {
        "content": "<p>Is the reason that this choice was made for vector bundles documented somewhere?</p>",
        "id": 306113602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666728777
    },
    {
        "content": "<p>Yes, in fact I'm just trying to track down the previous Zulip discussions.</p>",
        "id": 306113743,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666728832
    },
    {
        "content": "<p>I feel like I'm not in a position to object. Because I haven't explored the design space at all. But intuitively, it seems like we should try to make it possible to let S³ be a fibre bundle over S².</p>",
        "id": 306113748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666728833
    },
    {
        "content": "<p>The most relevant discussion I found is in a previous version of the module docstring of <code>topology/vector_bundle</code>, written by  <span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> in <a href=\"https://github.com/leanprover-community/mathlib/pull/4658\">#4658</a>.</p>\n<blockquote>\n<p>Let <code>B</code> be the base space. In our formalism, a topological vector bundle is by definition the type<br>\n<code>bundle.total_space E</code> where <code>E : B → Type*</code> is a function associating to<br>\n<code>x : B</code> the fiber over <code>x</code>. This type <code>bundle.total_space E</code> is just a type synonym for<br>\n<code>Σ (x : B), E x</code>, with the interest that one can put another topology than on <code>Σ (x : B), E x</code> which has the disjoint union topology.<br>\n...<br>\nThe point of this formalism is that it is unbundled in the sense that the total space of the bundle<br>\nis a type with a topology, with which one can work or put further structure, and still one can<br>\nperform operations on topological vector bundles (which are yet to be formalized).</p>\n</blockquote>",
        "id": 306118954,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666730773
    },
    {
        "content": "<p>But some of the considerations mentioned in the same docstring turned out not to work (e.g., the idea to make <code>topological_vector_bundle</code> a Prop), so I can't tell whether the decision there should still guide us.  And anyway, I found an <a href=\"#narrow/stream/116395-maths/topic/Lie.20groups.20and.20Lie.20algebras/near/198686982\">opposite opinion</a> from <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> from a year before that, saying that we shouldn't make this simplification :)</p>",
        "id": 306119409,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666730986
    },
    {
        "content": "<p>The possibility to have S^3 as a fiber bundle over S^2 was indeed the motivation for the initial definition. But with the experience we have now, I am very strongly in favor of the change where we only allow sigma types. The reason is that you can register typeclasses on the fibers of a sigma type in a nice way (because the fibers are types themselves), while it is way less natural in a more general context (the fibers are some random sets of the form <code>p^{-1} {x}</code>). We were able to do it, at the expense of quite suffering, for fiber bundles, but when we started with more structure like vector bundles this just became a nightmare. While everything works very smoothly with sigma types.</p>",
        "id": 306119489,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1666731010
    },
    {
        "content": "<p>So I've changed my mind compared to my previous opposite opinion, thanks to time and experimentation.</p>",
        "id": 306119771,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1666731168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/Smooth.20vector.20bundles/near/306119489\">said</a>:</p>\n<blockquote>\n<p>The reason is that you can register typeclasses on the fibers of a sigma type in a nice way (because the fibers are types themselves), while it is way less natural in a more general context (the fibers are some random sets of the form <code>p^{-1} {x}</code>). </p>\n</blockquote>\n<p>Thanks, this is clearly the important point, and I will make sure it features prominently in any new module docstring!</p>",
        "id": 306120052,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666731290
    },
    {
        "content": "<p>Perhaps this is rather similar to the discussion of direct sums of vector spaces: we first built a good theory of the external direct sum and only much later started thinking about how to cleanly express internal direct sums.</p>",
        "id": 306120751,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666731575
    },
    {
        "content": "<p>Perhaps include that analogy in the doc-strings: it is thoroughly convincing to me. (I guess it's not even an analogy, but a \"special case\", if not formally.)</p>",
        "id": 306121992,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666732059
    },
    {
        "content": "<p>We have opened the first PRs towards smooth vector bundles: <a href=\"https://github.com/leanprover-community/mathlib/pull/17291\">#17291</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/17302\">#17302</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/17305\">#17305</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/17359\">#17359</a>.  Of these, <a href=\"https://github.com/leanprover-community/mathlib/pull/17359\">#17359</a> is the biggest bottleneck: it is the first step in the proposed refactor of topological vector bundles.</p>",
        "id": 308107426,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1667639422
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17505\">#17505</a> for the refactor of topological fiber and vector bundles.</p>",
        "id": 309403131,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668300139
    }
]