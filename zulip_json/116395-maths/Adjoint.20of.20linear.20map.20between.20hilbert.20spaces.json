[
    {
        "content": "<p>Hi,<br>\nI'm getting an error when trying to define adjoint of an operator between hilbert spaces. Here's an mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.adjoint</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">E.adjoint</span>\n</code></pre></div>\n<p>The error is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">continuous_linear_map.adjoint</span> <span class=\"n\">E</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">E</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Not sure what the error means. I'm just trying to define <code>E†</code>.<br>\nAny suggestions on how to fix this?<br>\nThanks,</p>",
        "id": 287265226,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1656022262
    },
    {
        "content": "<p>Try using @ to pass the <code>m_3</code> and <code>m_5</code> arguments explicitly</p>",
        "id": 287265443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656022414
    },
    {
        "content": "<p>That usually gives you a better error</p>",
        "id": 287265452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656022424
    },
    {
        "content": "<p>I tried this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.adjoint</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hV'</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hW</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hW'</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">continuous_linear_map.adjoint</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">_</span> <span class=\"n\">hV</span> <span class=\"n\">hW</span> <span class=\"n\">hV'</span> <span class=\"n\">hW'</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>and the error got enormous :(</p>\n<div class=\"codehilite\" data-code-language=\"type\"><pre><span></span><code>  ⇑continuous_linear_map.adjoint E\nterm\n  E\nhas type\n  @continuous_linear_map real real real.semiring real.semiring\n    (@ring_hom.id real (@semiring.to_non_assoc_semiring real real.semiring))\n    V\n    (@uniform_space.to_topological_space V\n       (@pseudo_metric_space.to_uniform_space V\n          (@semi_normed_group.to_pseudo_metric_space V\n             (@normed_group.to_semi_normed_group V (@inner_product_space.to_normed_group real V real.is_R_or_C hV)))))\n    (@add_comm_group.to_add_comm_monoid V _inst_1)\n    W\n    (@uniform_space.to_topological_space W\n       (@pseudo_metric_space.to_uniform_space W\n          (@semi_normed_group.to_pseudo_metric_space W\n             (@normed_group.to_semi_normed_group W (@inner_product_space.to_normed_group real W real.is_R_or_C hW)))))\n    (@add_comm_group.to_add_comm_monoid W _inst_3)\n    _inst_2\n    _inst_4\nbut is expected to have type\n  @continuous_linear_map real real\n    (@ring.to_semiring real\n       (@normed_ring.to_ring real\n          (@normed_comm_ring.to_normed_ring real\n             (@normed_field.to_normed_comm_ring real\n                (@nondiscrete_normed_field.to_normed_field real\n                   (@is_R_or_C.to_nondiscrete_normed_field real real.is_R_or_C))))))\n    (@ring.to_semiring real\n       (@normed_ring.to_ring real\n          (@normed_comm_ring.to_normed_ring real\n             (@normed_field.to_normed_comm_ring real\n                (@nondiscrete_normed_field.to_normed_field real\n                   (@is_R_or_C.to_nondiscrete_normed_field real real.is_R_or_C))))))\n    (@ring_hom.id real\n       (@semiring.to_non_assoc_semiring real\n          (@ring.to_semiring real\n             (@normed_ring.to_ring real\n                (@normed_comm_ring.to_normed_ring real\n                   (@normed_field.to_normed_comm_ring real\n                      (@nondiscrete_normed_field.to_normed_field real\n                         (@is_R_or_C.to_nondiscrete_normed_field real real.is_R_or_C))))))))\n    V\n    (@uniform_space.to_topological_space V\n       (@pseudo_metric_space.to_uniform_space V\n          (@semi_normed_group.to_pseudo_metric_space V\n             (@normed_group.to_semi_normed_group V (@inner_product_space.to_normed_group real V real.is_R_or_C hV)))))\n    (@add_comm_group.to_add_comm_monoid V\n       (@normed_group.to_add_comm_group V (@inner_product_space.to_normed_group real V real.is_R_or_C hV)))\n    W\n    (@uniform_space.to_topological_space W\n       (@pseudo_metric_space.to_uniform_space W\n          (@semi_normed_group.to_pseudo_metric_space W\n             (@normed_group.to_semi_normed_group W (@inner_product_space.to_normed_group real W real.is_R_or_C hW)))))\n    (@add_comm_group.to_add_comm_monoid W\n       (@normed_group.to_add_comm_group W (@inner_product_space.to_normed_group real W real.is_R_or_C hW)))\n    (@normed_space.to_module real V\n       (@nondiscrete_normed_field.to_normed_field real (@is_R_or_C.to_nondiscrete_normed_field real real.is_R_or_C))\n       (@normed_group.to_semi_normed_group V (@inner_product_space.to_normed_group real V real.is_R_or_C hV))\n       (@inner_product_space.to_normed_space real V real.is_R_or_C hV))\n    (@normed_space.to_module real W\n       (@nondiscrete_normed_field.to_normed_field real (@is_R_or_C.to_nondiscrete_normed_field real real.is_R_or_C))\n       (@normed_group.to_semi_normed_group W (@inner_product_space.to_normed_group real W real.is_R_or_C hW))\n       (@inner_product_space.to_normed_space real W real.is_R_or_C hW))\n</code></pre></div>",
        "id": 287265741,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1656022604
    },
    {
        "content": "<p>I've a feeling that I'm not defining Hilbert spaces <code>V</code> and <code>W</code> properly but can't quite find good examples in mathlib.</p>",
        "id": 287265947,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1656022716
    },
    {
        "content": "<p>The <code>add_comm_group V</code> and <code>module ℝ V</code> instances are redundant, they're already in <code>inner_product_space ℝ V</code>.</p>",
        "id": 287268488,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1656024565
    },
    {
        "content": "<p>The fact that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a> is the only two-argument typeclass extending a one-argument typeclass makes it pretty much impossible to make the right guess about how to use it</p>",
        "id": 287269450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656025238
    },
    {
        "content": "<p>It would help a bit if the <code>-- note [is_R_or_C instance]</code> comment were part of the docstring</p>",
        "id": 287269667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656025374
    }
]