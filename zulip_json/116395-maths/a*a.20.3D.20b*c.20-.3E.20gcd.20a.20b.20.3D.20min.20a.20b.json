[
    {
        "content": "<p>I'm trying to prove the following, but I am stuck. I'm not sure how to proceed.</p>\n<p>A proof in words would be something like:</p>\n<ul>\n<li>get all prime factors for both sides</li>\n<li>the prime factors must match</li>\n<li>the union of all factors in a * a = b * c</li>\n<li>the common factors a,b + common factors a,c = all factors</li>\n<li>common factors a,b = min a,b</li>\n</ul>\n<p>However, I don't know how to break the equality into it's factors and prove their intersection in lean</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- 4 * 4 = 2 * 8  -&gt; gcd a b = 2 gcd a c = 4</span>\n<span class=\"c1\">-- 6 * 6 = 4 * 9  -&gt; gcd a b = 2 gcd a c = 3</span>\n<span class=\"c1\">-- 6 * 6 = 1 * 36 -&gt; gcd a b = 1 gcd a c = 6</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">multiple_factors_then_gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span>\n    <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n\n    <span class=\"n\">cases</span> <span class=\"n\">eq_or_not</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">ab_eq</span> <span class=\"n\">ab_neq</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- case a = b</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ab_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">min_self</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">gcd_eq_left</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">ab_le</span> <span class=\"n\">ab_gt</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- case a &lt; b</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">haltb</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_and_ne_then_lt</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ab_le</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ab_neq</span><span class=\"o\">,},</span>\n        <span class=\"n\">rw</span> <span class=\"n\">min_eq_left</span> <span class=\"n\">ab_le</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">gcd_eq_left</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">dvd</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n\n        <span class=\"c1\">-- revert a_1,</span>\n        <span class=\"c1\">-- contrapose,</span>\n        <span class=\"c1\">-- intros,</span>\n        <span class=\"c1\">-- rw a_1,</span>\n\n        <span class=\"c1\">-- rw nat.div,</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"c1\">-- case a &gt; b</span>\n    <span class=\"k\">have</span> <span class=\"n\">hageb</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">ab_gt</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">hageb</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">gcd_eq_right</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- case a &gt; b</span>\n\n    <span class=\"c1\">-- split,</span>\n    <span class=\"c1\">-- apply dvd.intro a,</span>\n    <span class=\"c1\">-- cc,</span>\n\n    <span class=\"c1\">-- split,</span>\n    <span class=\"c1\">-- apply dvd.intro d,</span>\n    <span class=\"c1\">-- cc,</span>\n\n    <span class=\"c1\">-- apply dvd.intro c,</span>\n    <span class=\"c1\">-- cc,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207022753,
        "sender_full_name": "Rick Love",
        "timestamp": 1597499287
    },
    {
        "content": "<p>Actually starting to make progress now that I had to think about how to do that in words:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- 4 * 4 = 2 * 8  -&gt; gcd a b = 2 gcd a c = 4</span>\n<span class=\"c1\">-- 6 * 6 = 4 * 9  -&gt; gcd a b = 2 gcd a c = 3</span>\n<span class=\"c1\">-- 6 * 6 = 1 * 36 -&gt; gcd a b = 1 gcd a c = 6</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">multiple_factors_then_gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span>\n    <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">faa</span> <span class=\"o\">:=</span> <span class=\"n\">factors</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">fbc</span> <span class=\"o\">:=</span> <span class=\"n\">factors</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_faa_fbc</span> <span class=\"o\">:</span> <span class=\"n\">faa</span> <span class=\"bp\">=</span> <span class=\"n\">fbc</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">faa</span><span class=\"o\">,</span> <span class=\"n\">fbc</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,},</span>\n\n\n    <span class=\"c1\">-- have</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207023237,
        "sender_full_name": "Rick Love",
        "timestamp": 1597500119
    },
    {
        "content": "<p>How about 12^2=9*16?</p>",
        "id": 207023284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597500147
    },
    {
        "content": "<p>Or even 6^2=9*4?</p>",
        "id": 207023301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597500185
    }
]