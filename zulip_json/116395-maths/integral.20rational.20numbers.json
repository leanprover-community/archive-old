[
    {
        "content": "<p>I want to write a lemma that says that a rational number is an integer if all its p-adic valuations are nonnegative. What is the correct mathlib-idiomatic way to express this? I currently have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">integral_of_padic_val_ge_zero</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">padic_val_rat</span> <span class=\"n\">p</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 167163626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559548065
    },
    {
        "content": "<p>The conclusion becomes <code>int.cast r.num = r</code>. Is that a good way, or should we use something else?</p>",
        "id": 167163680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559548106
    },
    {
        "content": "<p>There are so many ways one could write this, perhaps it's worth adding a dedicated one <code>is_int</code></p>",
        "id": 167167936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559551542
    },
    {
        "content": "<p>In general it could be defined as being in the image of <code>int.cast</code></p>",
        "id": 167167999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559551568
    },
    {
        "content": "<p>Yeah... that's part of what I'm after with this question</p>",
        "id": 167168326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559551902
    },
    {
        "content": "<p>I have felt for around a year now that for every \"troublesome-to-a-mathematician\" inclusion (e.g. like int in real) there could be a typeclass on the bigger type (e.g. <code>complex.is_int</code>), or even two typeclasses (the one which stores the int and the one which just says one exists). I have raised this suggestion before. One disadvantage pointed out to me was that now you get a \"new int\" (in fact several), i.e. <code>{q : rat // is_int q}</code>, which apparently is somehow bad.</p>",
        "id": 167168391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559551928
    },
    {
        "content": "<p>But maybe using <code>r.num</code> instead of some chosen preimage should make things more computable?</p>",
        "id": 167168404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559551948
    },
    {
        "content": "<p>One advantage was that you remove all the cast headaches; type class inferences shows <code>is_int z -&gt; is_rat z</code> for example.</p>",
        "id": 167168416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559551965
    },
    {
        "content": "<blockquote>\n<p>you get a \"new int\" (in fact several), i.e. <code>{q : rat // is_int q}</code>, which apparently is somehow bad.</p>\n</blockquote>\n<p>Very bad <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> after all... they aren't equal. Only canonically isomorphic <span aria-label=\"tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"tears\">:tears:</span></p>",
        "id": 167168513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559552050
    },
    {
        "content": "<p>Yeah exactly. In some sense that's what makes it bad! You don't want canonically isomorphic stuff, you want stuff which is one of the standard type theory equals :-/</p>",
        "id": 167168540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559552101
    },
    {
        "content": "<p>In fact perhaps the reason the CS guys tell us it's bad is precisely because we don't have the <code>transfer</code> tactic which will enable us to port all the stuff we want from one type to the canonically isomorphic one.</p>",
        "id": 167168658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559552198
    },
    {
        "content": "<p>[right, as Patrick says, back  to mowing the lawn...]</p>",
        "id": 167168687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559552242
    }
]