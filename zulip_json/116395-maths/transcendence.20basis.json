[
    {
        "content": "<p>Do we have transcendence bases in Lean? I need the transcendence basis analogue of the linear algebra assertion that every spanning set contains a basis.</p>",
        "id": 186081702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579508566
    },
    {
        "content": "<p>I don't think so. I guess the nicest way to assert this is that the evaluation map from R[X1, ..., Xn] using the basis is injective</p>",
        "id": 186082708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579509768
    },
    {
        "content": "<p>That is, <code>injective (evalâ‚‚ coe b)</code> says that <code>b : I -&gt; R</code> is an algebraically independent family (where <code>coe : Q -&gt; R</code> is the inclusion)</p>",
        "id": 186082850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579509945
    },
    {
        "content": "<p>I was trying to work through how to set this up. If I have a small field k and a big field K, then it seems to me to be crucial that I use subsets of K, so I can use <code>mv_polynomial s k</code> with s the subset, coerced to a subtype. I'm only interested in the finite situation right now, but here I don't think I can use a finset -- or do finsets also coerce to types?</p>",
        "id": 186082852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579509950
    },
    {
        "content": "<p>You don't actually need anything here to be finite, that was just illustration</p>",
        "id": 186082922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579510017
    },
    {
        "content": "<p>I'm not sure that it is crucial to use subsets, but I would have to know more about your application</p>",
        "id": 186082947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579510080
    },
    {
        "content": "<p>Indeed, my experience with <code>basis</code> itself suggests otherwise, that you should use families instead (indexed in some arbitrary type) or you will regret it later and have to refactor</p>",
        "id": 186083015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579510125
    },
    {
        "content": "<p>My application is <a href=\"https://github.com/ImperialCollegeLondon/M4P33/issues/4\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M4P33/issues/4\">the Nullstellensatz</a> because in the situation where I need <a href=\"#narrow/stream/116395-maths/topic/Algebraic.20geometry.20course/near/186047827\" title=\"#narrow/stream/116395-maths/topic/Algebraic.20geometry.20course/near/186047827\">this</a> I realise that I can take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> to be a field, so the theory of transcendence bases gives me what I want immediately.</p>",
        "id": 186085725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579512859
    },
    {
        "content": "<p>I think both Bryan and Antoine started on matroids at some point. They are meant to be a common abstraction of bases in linear algebra and your situation, right?</p>",
        "id": 186093413,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579519902
    },
    {
        "content": "<p>I have no idea what a matroid is :-(</p>",
        "id": 186125121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579545961
    },
    {
        "content": "<p>You do seem to be right.</p>",
        "id": 186126966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579547910
    },
    {
        "content": "<p>I have always been curious as to how common matroids are. I first encountered them in an algorithms class but never again since.</p>",
        "id": 186127002,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579547952
    },
    {
        "content": "<p>I never heard about them before using Lean.</p>",
        "id": 186127548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579548509
    },
    {
        "content": "<p>The latest version of my matroids code is <a href=\"https://github.com/bryangingechen/lean-matroids/tree/fintype2\" target=\"_blank\" title=\"https://github.com/bryangingechen/lean-matroids/tree/fintype2\">in the \"fintype2\" branch here</a>. It's evolved a fair bit since my original <a href=\"#narrow/stream/116395-maths/topic/Matroids.20in.20lean/near/134359386\" title=\"#narrow/stream/116395-maths/topic/Matroids.20in.20lean/near/134359386\">thread</a>, but still needs a lot more work. I'll post a brief comment in that thread about the current status.</p>",
        "id": 186128465,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579549445
    }
]