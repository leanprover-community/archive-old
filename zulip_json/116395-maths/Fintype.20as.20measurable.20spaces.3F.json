[
    {
        "content": "<p>Is there a reason why fintypes are not automatically declared as measurables spaces? I.e. would adding something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">is_measurable_space</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n</code></pre></div>\n\n\n<p>to <code>measure_theory/measurable_space.lean</code> make sense or is there a subtle issue I'm missing?</p>",
        "id": 204628153,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595389990
    },
    {
        "content": "<p>We try to be cautious about adding unconstrained typeclasses, because they add a lot of work in the typeclass search. (Instances which only fire when certain structure appears are fine.)</p>",
        "id": 204631561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595395750
    },
    {
        "content": "<p>I'm not sure if that was a consideration here.</p>",
        "id": 204631567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595395757
    },
    {
        "content": "<p>It's also possible that no one has wanted this instance enough yet.</p>",
        "id": 204631573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595395771
    },
    {
        "content": "<p>What does <code>\\top</code> mean here? This should be simply the counting measure, right?</p>",
        "id": 204632052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595396456
    },
    {
        "content": "<p>But what if I want to count the elements of my fintype with different weights?</p>",
        "id": 204632062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595396483
    },
    {
        "content": "<p>Maybe the library actually supports that nowadays. Having one measure inferred by typeclass inference, but also have others around explicitly.</p>",
        "id": 204632120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595396534
    },
    {
        "content": "<p><code>measurable_space</code> is about a fixed sigma-algebra, not a measure.</p>",
        "id": 204632809,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595397560
    },
    {
        "content": "<p>Currently integrals take <code>measure</code> argument.</p>",
        "id": 204632819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595397579
    },
    {
        "content": "<p>So you can have, e.g., <code>counting.with_density f</code>.</p>",
        "id": 204632825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595397595
    },
    {
        "content": "<p>I mean <code>∫ x, f x ∂(count.with_density g)</code></p>",
        "id": 204632904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595397662
    },
    {
        "content": "<p>And <code>\\top</code> for <code>measurable_space</code> means \"every set is measurable\", like <code>\\bot</code> for <code>topological_space</code>.</p>",
        "id": 204632932,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595397700
    },
    {
        "content": "<p>Aaah right. I was being confused. So that instance definitely makes sense</p>",
        "id": 204633069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595397867
    },
    {
        "content": "<p>Yes, basically this would go alongside these:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n</code></pre></div>\n\n\n<p>I was interested in this because I was thinking of doing some probability theory, and in the discrete case it would be really inconvenient to have to explicitly specify that things are measurable all the time.</p>",
        "id": 204672908,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595428124
    },
    {
        "content": "<p>I think that we should have a typeclass for \"all sets are measurable\".</p>",
        "id": 204758699,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595477020
    },
    {
        "content": "<p>Like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/discrete_topology/src\">src#discrete_topology</a></p>",
        "id": 204758707,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595477030
    },
    {
        "content": "<p>Note that some facts from probability theory work for any measure with <code>μ univ = 1</code>.</p>",
        "id": 204758760,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595477086
    },
    {
        "content": "<p>Please don't assume <code>[fintype]</code> everywhere.</p>",
        "id": 204758784,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595477122
    },
    {
        "content": "<p>I think that we should have at least the following typeclasses (possibly under different names):</p>\n<ol>\n<li><code>probability_measure (μ : measure α) := (meas_univ_1 : μ univ = 1)</code>;</li>\n<li><code>finite_measure (μ : measure α) := (meas_univ_fin : μ univ &lt; \\top)</code>;</li>\n<li><code>no_atoms_measure (μ : measure α) := (meas_singleton : ∀ x, μ {x} = 0)</code>;</li>\n</ol>\n<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> what else comes to your mind?</p>",
        "id": 204758916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595477317
    },
    {
        "content": "<p>Yes, assuming <code>[fintype]</code> everywhere is precisely what I wanted to avoid: I want to work on the general case while making sure that the results can then be used comfortably in the discrete case. Those typeclasses sound good.</p>",
        "id": 204855935,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595539949
    }
]