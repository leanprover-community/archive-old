[
    {
        "content": "<p>Hello, </p>\n<p>is there exists  a little  function wanted <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>   ?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">fin_enum</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">wanted</span> <span class=\"o\">:</span> <span class=\"n\">sum_</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">X</span><span class=\"o\">}</span>  <span class=\"n\">f</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 195075403,
        "sender_full_name": "orlando",
        "timestamp": 1587654668
    },
    {
        "content": "<p>I usually use <code>finset.sum</code> for this.</p>",
        "id": 195076500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587655033
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin_enum</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_enum</span><span class=\"bp\">.</span><span class=\"n\">sum_univ</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fin_enum</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span>\n</pre></div>",
        "id": 195076667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587655097
    },
    {
        "content": "<p>You have explicitly chosen an ordering of your set, so as long as addition is associative on R (which it is) then you can add things up. But it's also commutative, so it will do to have [fintype X]</p>",
        "id": 195076676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587655103
    },
    {
        "content": "<p>Thx Kenny !!!</p>",
        "id": 195076990,
        "sender_full_name": "orlando",
        "timestamp": 1587655250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>   :  I'm ok !</p>",
        "id": 195077471,
        "sender_full_name": "orlando",
        "timestamp": 1587655467
    },
    {
        "content": "<p>and it' better with <code>fintype</code></p>",
        "id": 195077562,
        "sender_full_name": "orlando",
        "timestamp": 1587655505
    },
    {
        "content": "<p>Just to understand the function, i'm not clear ! </p>\n<p><code> finset </code> is a namespace, in the file <code>fintype/basic</code> </p>\n<p><code>finset.univ</code> is a <code> finset</code>,  it's represents <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> as finset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. </p>\n<p>and next in <code>big operator </code> we have for <code> s : finset \\alpha </code>  the function <code>sum</code> (or prod)  : </p>\n<p>so Kenny fonction is   the same as <code>  finset.sum (finset.univ) g </code> </p>\n<p>If a <code>open finset</code> i can note this as <code> finset.sum (univ) g</code>  but i can't denote by <code> sum (univ) g </code> because there is an other function called <code>sum </code> </p>\n<p>But i don't understand the notation <code>finset.univ.(sum)</code> the dot notation  ! Why the function <code>sum</code> is behind ?   </p>\n<p>I don't understand anything <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 195081461,
        "sender_full_name": "orlando",
        "timestamp": 1587657235
    },
    {
        "content": "<p>that's <code>(finset.univ).sum</code></p>",
        "id": 195081625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587657312
    },
    {
        "content": "<p>I don't think <code>finset.univ.(sum)</code> works</p>",
        "id": 195081652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587657326
    },
    {
        "content": "<p><code>(finset.univ).sum</code> is using projection notation, meaning that the <code>.sum</code> is referring to <code>T.sum</code> where <code>T</code> is the type of the thing on the left. In this case <code>finset.univ</code> has type <code>finset A</code>, so lean interprets it as the function <code>finset.sum</code> applied to <code>finset.univ</code>, that is, <code>finset.sum finset.univ</code></p>",
        "id": 195081870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587657405
    },
    {
        "content": "<p>thx Mario !</p>",
        "id": 195082190,
        "sender_full_name": "orlando",
        "timestamp": 1587657531
    },
    {
        "content": "<p>Hello, </p>\n<p>Another lemma, the definition is too deep for me ! Some one know where is it mathlib ? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">a</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"o\">}[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">](</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)[</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">σ</span> <span class=\"o\">]</span>\n<span class=\"o\">:</span>  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">σ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">library_search</span> <span class=\"n\">fail</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I try <code>rfl</code> but doesn't work <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 195115450,
        "sender_full_name": "orlando",
        "timestamp": 1587673810
    },
    {
        "content": "<p>I'm pretty sure that's somewhere, but I'm not sure where. It might be in <code>group_theory.perm</code> somewhere.</p>",
        "id": 195115936,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587674119
    },
    {
        "content": "<p>hum good idea ! I try to find !</p>",
        "id": 195115985,
        "sender_full_name": "orlando",
        "timestamp": 1587674147
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_univ_perm</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_univ_perm</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">σ</span>\n</pre></div>\n\n\n<p>in group_theory.perm.sign</p>",
        "id": 195116178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587674246
    },
    {
        "content": "<p>World champion <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 195116802,
        "sender_full_name": "orlando",
        "timestamp": 1587674523
    },
    {
        "content": "<p>Probably should be moved closer to <code>finset.prod_bij</code> with <code>equiv</code> instead of <code>perm</code>.</p>",
        "id": 195117358,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587674808
    },
    {
        "content": "<p>No, it should be moved to <code>fintype</code> because <code>big_operators</code> does not import <code>fintype</code>.</p>",
        "id": 195118904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587675598
    },
    {
        "content": "<p>It is there in <a href=\"https://github.com/leanprover-community/mathlib/issues/2501\" title=\"https://github.com/leanprover-community/mathlib/issues/2501\">#2501</a></p>",
        "id": 195153108,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587712373
    }
]