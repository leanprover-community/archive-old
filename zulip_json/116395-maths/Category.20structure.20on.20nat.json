[
    {
        "content": "<p>Mathlib thinks that  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> has a canonical categorical structure.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n\n<p>Why? (Is this the one coming from the ordering on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>?)</p>",
        "id": 206064603,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654195
    },
    {
        "content": "<p>what are your imports?</p>",
        "id": 206064778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596654273
    },
    {
        "content": "<p>It might be the one inferred from the partial order on nat</p>",
        "id": 206064803,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596654293
    },
    {
        "content": "<p>Just <code>category_theory.category</code></p>",
        "id": 206064838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/Category.20structure.20on.20nat/near/206064803\">said</a>:</p>\n<blockquote>\n<p>It might be the one inferred from the partial order on nat</p>\n</blockquote>\n<p>Yeah, this is what I assumed too.</p>",
        "id": 206064887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654351
    },
    {
        "content": "<p>The thing is, after the discussion yesterday about Lawvere theories, I wanted to do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">lawvere</span> <span class=\"kn\">extends</span> <span class=\"n\">category</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">π₁</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">π₂</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lift_π₁</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lift</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"err\">≫</span> <span class=\"n\">π₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lift_π₂</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lift</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"err\">≫</span> <span class=\"n\">π₂</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lift_unique</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">π₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₁</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">π₂</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span>\n</code></pre></div>",
        "id": 206065004,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654400
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ZZZ</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ZZZ</span> <span class=\"c1\">-- preorder.small_category</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">small_category</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">preorder.small_category : Π (α : Type u_1) [_inst_1 : preorder α], small_category α</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 206065073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596654438
    },
    {
        "content": "<p>I guess I can get around this by introducing <code>def foo := \\N</code>, and extending a category structure on <code>foo</code>.</p>",
        "id": 206065269,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654534
    },
    {
        "content": "<p>isn't your lawvere just giving the structure of binary products on N?</p>",
        "id": 206065407,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596654625
    },
    {
        "content": "<p>Yup! A Lawvere theory is a category structure on the naturals where n is the n-fold product of 1</p>",
        "id": 206065454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654650
    },
    {
        "content": "<p>Right, but why are you redefining binary products yourself instead of using the mathlib version?</p>",
        "id": 206065486,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596654672
    },
    {
        "content": "<p>good question! Because I don't have much experience with mathlib's category theory :)</p>",
        "id": 206065542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654720
    },
    {
        "content": "<p>I need a predicate saying that a+b is the categorical product of a and b.</p>",
        "id": 206065609,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654745
    },
    {
        "content": "<p>What's the best way to say this?</p>",
        "id": 206065617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654753
    },
    {
        "content": "<p>I guess using something from <code>category_theory.limits.shapes.products</code>.</p>",
        "id": 206065913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654920
    },
    {
        "content": "<p>Hang on, I'm a little confused what you're trying to define here</p>",
        "id": 206065940,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596654942
    },
    {
        "content": "<p>The structure you're describing here is unique, right \"A Lawvere theory is a category structure on the naturals where n is the n-fold product of 1\"</p>",
        "id": 206065995,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596654963
    },
    {
        "content": "<p>No.</p>",
        "id": 206066045,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654982
    },
    {
        "content": "<p>You can have many many morphisms.</p>",
        "id": 206066052,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596654988
    },
    {
        "content": "<p>Ah, by naturals you don't mean the category structure being the preorder - I see</p>",
        "id": 206066071,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596655007
    },
    {
        "content": "<p>Yeah, exactly.</p>",
        "id": 206066088,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596655015
    },
    {
        "content": "<p>That makes much more sense - if you have <code>f : a+b -&gt; a</code> and <code>g : a+b -&gt; b</code>, then you can say <code>is_limit (binary_fan.mk f g)</code> to express that <code>a+b</code> with the projections <code>f</code> and <code>g</code> are a limit</p>",
        "id": 206066232,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596655094
    },
    {
        "content": "<p>Sounds good. What import do I need for <code>binary_fan</code>?</p>",
        "id": 206066428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596655215
    },
    {
        "content": "<p><code>ct.limits.shapes.binary_products</code></p>",
        "id": 206066441,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596655226
    },
    {
        "content": "<p>To answer this sort of question I just type <code>ml binary_fan</code> into my browser search bar, following <a href=\"#narrow/stream/113488-general/topic/browser.20extension.20for.20Lean/near/204643611\">Rob Lewis' tip</a></p>",
        "id": 206066705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596655411
    },
    {
        "content": "<p>That looks nice! Is anyone doing this on firefox? I don't see an option to add a custom search engine.</p>",
        "id": 206066909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596655536
    },
    {
        "content": "<p><a href=\"https://superuser.com/questions/7327/how-to-add-a-custom-search-engine-to-firefox\">https://superuser.com/questions/7327/how-to-add-a-custom-search-engine-to-firefox</a> has some answers - I recall this having been easier in the past, though</p>",
        "id": 206074038,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1596659296
    },
    {
        "content": "<p>If anyone is finding it annoying that <code>category ℕ</code> works out of the box (picking up the preorder structure), I'd be happy if you wanted to make a PR that introduced a type synonym <code>def preorder_category (X : Type*) := X</code>, and just put the category structure on that.</p>",
        "id": 206091365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596671548
    },
    {
        "content": "<p>I actually think it makes more sense to make a synonym for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> when we need a different category structure on it.</p>",
        "id": 206091621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596671830
    },
    {
        "content": "<p>E.g. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">FinSet</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">FinSet</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206091692,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596671898
    },
    {
        "content": "<p>Right, it's not like you could use <code>nat</code> for several different Lawvere theories anyways</p>",
        "id": 206092011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596672193
    },
    {
        "content": "<p>Here's an initial definition of Lawvere theories: <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/univ_alg/src/algebra/universal/lawvere.lean\">https://github.com/leanprover-community/mathlib/blob/univ_alg/src/algebra/universal/lawvere.lean</a></p>\n<p>I didn't use the <code>binary_fan.mk</code> approach that <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> mentioned, because it ended up being pretty awkward (this is most likely because I never seriously used the category theory library).</p>",
        "id": 206092284,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596672555
    }
]