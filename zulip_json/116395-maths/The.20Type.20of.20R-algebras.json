[
    {
        "content": "<p>It seems to me that in <code>algebra.basic</code> the structure <code>algebra R A</code> is the type of all possible <code>R</code>-algebras structures on the semi-ring <code>A</code>. This seems to me to be pretty different from the \"Type of <code>R</code>-algebras\". For instance, a term in <code>algebra R A</code> is not something I can look at as an <code>R</code>-module (although I can extract an <code>R</code>-module structure on <code>A</code> from it). My first question is if I am right or wrong. Secondly, I wonder if after all the type of <code>R</code>-algebras (exists, and) cannot be recovered by the above structure.</p>",
        "id": 213722713,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603051087
    },
    {
        "content": "<p>You are right. <code>[algebra R A]</code> says: hey, I want to assume that <code>A</code> is an <code>R</code>-algebra.</p>",
        "id": 213722917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603051339
    },
    {
        "content": "<p>It sounds like you are looking for the category of all <code>R</code>-algebras.</p>",
        "id": 213722922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603051355
    },
    {
        "content": "<p>I am asking because reading the lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The category of R-algebras where R is a commutative</span>\n<span class=\"sd\">ring is the under category R ‚Üì CRing. In the categorical</span>\n<span class=\"sd\">setting we have a forgetful functor R-Alg ‚•§ R-Mod.</span>\n<span class=\"sd\">However here it extends module in order to preserve</span>\n<span class=\"sd\">definitional equality in certain cases. -/</span>\n</code></pre></div>\n\n<p>I thought at first that the file would contain something closer to <code>Algebras R</code> rather than the possible <code>R</code>-structures.</p>",
        "id": 213722923,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603051357
    },
    {
        "content": "<p>I think that comment is misleading</p>",
        "id": 213722933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603051378
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Algebra\">docs#Algebra</a></p>",
        "id": 213722941,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603051385
    },
    {
        "content": "<p>We have the category of <code>R</code>-algebras somewhere</p>",
        "id": 213722943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603051387
    },
    {
        "content": "<p>Our category theory enthusiasts sometimes write that kind of misleading docstrings.</p>",
        "id": 213722949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603051399
    },
    {
        "content": "<p>Thanks! It's a pity, it can really be misleading (in the sense that the type of mislead people is at least inhabited by me)</p>",
        "id": 213722982,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603051439
    },
    {
        "content": "<p>I think this comment was written a long time ago, before there was much category theory. By someone who doesn't necessarily use the category theory library a lot.</p>",
        "id": 213723041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603051480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/The.20Type.20of.20R-algebras/near/213722917\">said</a>:</p>\n<blockquote>\n<p>You are right. <code>[algebra R A]</code> says: hey, I want to assume that <code>A</code> is an <code>R</code>-algebra.</p>\n</blockquote>\n<p>Can you speculate a bit on this? I mean, if <code>algebra R A</code> is a type, how can it say \"hey, I want to assume something\"? The proof that it is inhabited would be such an assumption, right? I am really sorry, I don't want to be pedantic, I am simply going very slowly with my digestion of Type theory/</p>",
        "id": 213723071,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603051529
    },
    {
        "content": "<p>Compare with <code>(G : Type) [group G]</code></p>",
        "id": 213723131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603051600
    },
    {
        "content": "<p>Filippo, you are right that <code>algebra R A</code> is the type of R-algebra structures on A. Johan is commenting on the way you can use it thanks to Lean's type class inference mechanism.</p>",
        "id": 213723162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603051681
    },
    {
        "content": "<p>Ah ok! The square brackets were the point: you are saying that if I write <code>(A : Type) [algebra R A]</code> I am insisting that <code>A</code> be an <code>R</code>-algebra.</p>",
        "id": 213723211,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603051706
    },
    {
        "content": "<p>Yes.</p>",
        "id": 213723224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603051741
    },
    {
        "content": "<p>Ok, thanks so much to both of you.</p>",
        "id": 213723230,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603051752
    },
    {
        "content": "<p>The usual convention is that lowercase foo is the class and uppercase Foo is the category, e.g. group vs Group, etc. I don't know what will happen in lean4 <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 213723293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603051816
    },
    {
        "content": "<p>Note that you need to use it as follows: <code>(R A : Type) [comm_semiring R] [semiring A] [algebra R A]</code></p>",
        "id": 213723301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603051830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/The.20Type.20of.20R-algebras/near/213723293\">said</a>:</p>\n<blockquote>\n<p>The usual convention is that lowercase foo is the class and uppercase Foo is the category, e.g. group vs Group, etc. I don't know what will happen in lean4 <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>It seems that we will be using <code>ùîâùîØùîûùî®ùî±ùî≤ùîØ</code></p>",
        "id": 213723385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603051934
    },
    {
        "content": "<p>Please submit PRs to fix any incorrect docstrings you see! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 213723949,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603052687
    },
    {
        "content": "<p>Ha, the docstring about algebras is not just in the wrong place, but it's also wrong mathematically! Algebras in mathlib do not need to be commutative, so the category of R algebras (in mathlib) is not the under category in <code>CRing</code>. Also <code>CRing</code> is <code>CommRing</code> in mathlib.</p>",
        "id": 213727326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603056964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/The.20Type.20of.20R-algebras/near/213727326\">said</a>:</p>\n<blockquote>\n<p>Ha, the docstring about algebras is not just in the wrong place, but it's also wrong mathematically! Algebras in mathlib do not need to be commutative, so the category of R algebras (in mathlib) is not the under category in <code>CRing</code>. Also <code>CRing</code> is <code>CommRing</code> in mathlib.</p>\n</blockquote>\n<p>Ah wow. Do you want then to go ahead with the PR, as you are clearly much more knowledgeable than I am?</p>",
        "id": 213728098,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603058077
    },
    {
        "content": "<p>That doc-string was written be Kenny essentially before the category theory library existed, and no one has touched it since.</p>",
        "id": 213728492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603058656
    },
    {
        "content": "<p>I can PR a fix to the docs, but I won't have time until Tuesday, so anyone else should feel free to do it.</p>",
        "id": 213729178,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603059791
    },
    {
        "content": "<p>It was written in 2018, and Lean changes very very fast.</p>",
        "id": 213729268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603059916
    },
    {
        "content": "<p>I think that also, back in the day, algebras were commutative</p>",
        "id": 213747363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603089081
    },
    {
        "content": "<p>I'm not sure whether someone else has already opened a PR for this, but if not: <a href=\"https://github.com/leanprover-community/mathlib/issues/4689\">#4689</a></p>",
        "id": 213788445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603115686
    }
]