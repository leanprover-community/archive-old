[
    {
        "content": "<p>I'm noticing that categories like Group and Top are defined using <code>bundled</code>, but this doesn't seem to work when I try to define the category of topological groups. Do I have to define the category by hand?</p>",
        "id": 266167672,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640606691
    },
    {
        "content": "<p>Indeed, you can't use <code>bundled</code> to get the category structure, because we don't have the type of continuous group homomorphisms. Only <code>monoid_hom</code> and <code>continuous</code> separately.<br>\nWe do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group_topology\">docs#group_topology</a>, so you can get halfway there.</p>\n<p>The easiest thing to do, might be to define <code>cont_monoid_hom</code>, and then define <code>id</code> and <code>comp</code> for those. Then you can use <code>bundled</code>.</p>",
        "id": 266167920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640606979
    },
    {
        "content": "<p>OK. Let me try.</p>",
        "id": 266168115,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640607154
    },
    {
        "content": "<p>Wait a moment. <code>one_hom</code> and <code>mul_hom</code> both have a <code>to_fun</code>. When I combine these, does that mean I will have two <code>to_fun</code> functions and I will have to add <code>continuous one_hom.to_fun</code> and <code>continuous mul_hom.to_fun</code>?</p>",
        "id": 266168503,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640607605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span> They have already been combined into <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom\">docs#monoid_hom</a> . So I don't think you should need to combine them again yourself.</p>",
        "id": 266176400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640615252
    },
    {
        "content": "<p>But how does <code>monoid_hom</code> fix the problem with the two <code>to_fun</code> functions?</p>",
        "id": 266178871,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640617432
    },
    {
        "content": "<p>This is the point of extending structures. <code>monoid_hom</code> only has one <code>to_fun</code>, which is used for both properties.</p>",
        "id": 266178981,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640617509
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cont_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does not work for me.</p>",
        "id": 266179006,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640617543
    },
    {
        "content": "<p>You're missing a topology on <code>M</code> and <code>N</code>.</p>",
        "id": 266179100,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640617601
    },
    {
        "content": "<p>Doh!</p>",
        "id": 266179157,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640617674
    },
    {
        "content": "<p>I get this now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span> <span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">to_fun'</span> <span class=\"k\">from</span> <span class=\"bp\">'</span><span class=\"n\">mul_hom'</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span>\n</code></pre></div>",
        "id": 266179209,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640617695
    },
    {
        "content": "<p>Weird... <code>run_cmd old_structures true</code> before should solve it, but that's unsatisfactory as this use is getting phased out.</p>",
        "id": 266179343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640617845
    },
    {
        "content": "<p>That did not work either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">old_structures</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cont_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">one_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">bernd</span><span class=\"bp\">/</span><span class=\"n\">Repositories</span><span class=\"bp\">/</span><span class=\"n\">convergence</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">old_structures'</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">bernd</span><span class=\"bp\">/</span><span class=\"n\">Repositories</span><span class=\"bp\">/</span><span class=\"n\">convergence</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">bernd</span><span class=\"bp\">/</span><span class=\"n\">Repositories</span><span class=\"bp\">/</span><span class=\"n\">convergence</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">141</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span> <span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">to_fun'</span> <span class=\"k\">from</span> <span class=\"bp\">'</span><span class=\"n\">mul_hom'</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span>\n</code></pre></div>",
        "id": 266179432,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640617923
    },
    {
        "content": "<p><code>set_option old_structure_cmd true</code></p>",
        "id": 266179565,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640618061
    },
    {
        "content": "<p>Ah thanks</p>",
        "id": 266179621,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640618125
    },
    {
        "content": "<p>Is there a tutorial about how to use <code>bundled</code>? I'm still confused. And if I decide not to use <code>bundled</code>, how would I define the category of topological groups? Should I make a <code>TopGroup</code> structure containing <code>group</code>, <code>topological_space</code>, <code>topological_group</code> fields?</p>",
        "id": 266263699,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640701779
    },
    {
        "content": "<p>I was hoping I could just write <code>def TopGroup := Σ (α : Type u), topological_group α</code>, but that doesn't work.</p>",
        "id": 266263776,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640701816
    },
    {
        "content": "<p>I think you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group_topology\">docs#group_topology</a></p>",
        "id": 266263925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640701935
    },
    {
        "content": "<p>There is no tutorial on how to use <code>bundled</code>. I guess the only way is to look at (i) its implementation and (ii) examples of how it's used in mathlib such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Top\">docs#Top</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Ab\">docs#Ab</a>.</p>",
        "id": 266263973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640701985
    },
    {
        "content": "<p>Do you happen to know of an example where the category had to be built without using bundled?</p>",
        "id": 266264355,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640702362
    },
    {
        "content": "<p>In particular, a category like that of topological groups where you have to mix things from two separate domains.</p>",
        "id": 266264419,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640702407
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module\">docs#Module</a></p>",
        "id": 266265986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640703741
    },
    {
        "content": "<p>If you want a long list of categories, look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.category\">docs#category_theory.category</a> and click on the dropdown \"▸ Instances\"</p>",
        "id": 266266047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640703806
    },
    {
        "content": "<p>Nice. I started doing something similar for <code>TopGroup</code>. I'll have to repeat this process when I define the category of continuous group actions.</p>",
        "id": 266266410,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640704100
    },
    {
        "content": "<p>Out of curiousity: what is your end goal?</p>",
        "id": 266266660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640704220
    },
    {
        "content": "<p>I'm formalizing some of my research on convergence spaces (a generalization of top. spaces).</p>",
        "id": 266267276,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640704531
    },
    {
        "content": "<p>I see. Is there a 2-line explanation how <code>TopGroup</code> (and the category of continuous group actions) show up when working with convergence spaces?</p>",
        "id": 266267836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640704991
    },
    {
        "content": "<p>I remember your other thread about setting up convergence spaces. And I just learned from wiki that the category of convergence spaces has exponentials. Is this one of the results you are aiming at as preliminary?</p>",
        "id": 266267922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705045
    },
    {
        "content": "<p>Yep, the category of convergence spaces has exponentionals, which is one of the reasons it's better than Top.</p>",
        "id": 266268051,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640705180
    },
    {
        "content": "<p>Right. So where does <code>TopGroup</code> fit into this picture?</p>",
        "id": 266268104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705236
    },
    {
        "content": "<p>I don't particularly care about TopGroup. I'm just using it as an example.</p>",
        "id": 266268106,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640705240
    },
    {
        "content": "<p>Aha.</p>",
        "id": 266268113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705245
    },
    {
        "content": "<p>What I actually care about is ConvGroup.</p>",
        "id": 266268117,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640705250
    },
    {
        "content": "<p>Btw, the category of condensed sets also has exponentials</p>",
        "id": 266268123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705259
    },
    {
        "content": "<p>Is <code>ConvAb</code> an abelian category?</p>",
        "id": 266268133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705271
    },
    {
        "content": "<p>No, it's not Abelian unfortunately.</p>",
        "id": 266268185,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640705291
    },
    {
        "content": "<p>Would be interesting to know if the functor <code>Conv → Cond(Set)</code> is well behaved.</p>",
        "id": 266268222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640705335
    },
    {
        "content": "<p>Yes. That would be something to look at. At the moment, my advisor and I are generalizing the theory of continuous partial group actions on topological spaces to the convergence space setting.</p>",
        "id": 266268249,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640705379
    },
    {
        "content": "<p>So I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.category.Top</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">TopGroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">the_group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">the_topological_space</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">the_topological_group</span> <span class=\"o\">:</span> <span class=\"n\">topological_group</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">TopGroup</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">TopGroup</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">G.carrier</span> <span class=\"bp\">→</span> <span class=\"n\">H.carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_group_hom</span> <span class=\"o\">:</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">G.carrier</span> <span class=\"n\">H.carrier</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">TopGroup</span>\n</code></pre></div>\n<p>Unfortunately Lean complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">to_mul_one_class'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">group.to_mul_one_class'</span>\n  <span class=\"n\">G.is_group</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">group</span> <span class=\"n\">G.carrier</span>\n</code></pre></div>\n<p>I'm not sure how to fix this. Passing the group instances manually to <code>monoid_hom</code> does not seem to work either. (I was hoping it would do some coercion magic.)</p>",
        "id": 266360309,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640796565
    },
    {
        "content": "<p>You need to define the instances as instances for <code>monoid_hom</code> to work. Take a look, for example, at the definitions around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Group\">docs#Group</a></p>",
        "id": 266361346,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640797437
    },
    {
        "content": "<p>E.g</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.category.Top</span>\n<span class=\"kn\">import</span> <span class=\"n\">deprecated.group</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">--set_option old_structure_cmd true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">TopGroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">the_group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">the_topological_space</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">the_topological_group</span> <span class=\"o\">:</span> <span class=\"n\">topological_group</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">TopGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G.carrier</span> <span class=\"o\">:=</span> <span class=\"n\">G.the_group</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">TopGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">G.carrier</span> <span class=\"o\">:=</span> <span class=\"n\">G.the_topological_space</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">TopGroup</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">TopGroup</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">G.carrier</span> <span class=\"bp\">→</span> <span class=\"n\">H.carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_group_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266361394,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640797449
    },
    {
        "content": "<p>I had to import <code>deprecated.group</code> to get access to <code>is_monoid_hom</code> as <code>monoid_hom</code> is the bundled type</p>",
        "id": 266361405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640797482
    },
    {
        "content": "<p>Presumably <code>hom</code> should extend <code>monoid_hom</code></p>",
        "id": 266361420,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640797507
    },
    {
        "content": "<p>Also you may want to copy Group more closely and define a <code>coe_to_sort</code> for <code>TopGroup</code> so you don't need to add <code>.carrier</code> everywhere</p>",
        "id": 266361440,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640797535
    },
    {
        "content": "<p>Cool. Thank you.</p>",
        "id": 266363040,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640798898
    },
    {
        "content": "<p>Sorry I'm late to this thread, but I don't think <code>TopCommRing</code> has been mentioned yet, which is I think the example you are looking for.</p>",
        "id": 266668446,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1641203662
    }
]