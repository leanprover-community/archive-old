[
    {
        "content": "<p>What can I do about <code>simp</code> not doing the right thing here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">monoid</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">monoid</span>\n</code></pre></div>\n<p>Or should I just not be working inside <code>monoid</code>?</p>",
        "id": 278293492,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1649419196
    },
    {
        "content": "<p>It works for me. What version of mathlib are you on?</p>",
        "id": 278293782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649419313
    },
    {
        "content": "<p>You want to use <code>_root_.mul_assoc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">monoid</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">_root_.mul_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">monoid</span>\n</code></pre></div>",
        "id": 278293897,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1649419363
    },
    {
        "content": "<p>Ah wait, I get it now.</p>",
        "id": 278293904,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649419367
    },
    {
        "content": "<p><code>monoid.mul_assoc</code> should be protected.</p>",
        "id": 278293923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649419378
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.mul_assoc\">docs#monoid.mul_assoc</a> is a field of the structure that should not be used.</p>",
        "id": 278293943,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1649419383
    },
    {
        "content": "<p>Thanks for the explanation, yea it should be protected then, I guess. Should things about monoids which are a bit \"out there\" go into <code>monoid</code> or into its own namespace?</p>",
        "id": 278294397,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1649419645
    },
    {
        "content": "<p>What are you thinking of?</p>",
        "id": 278294612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649419771
    },
    {
        "content": "<p>We formalised the ore localisation of monoids</p>",
        "id": 278297305,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1649421384
    },
    {
        "content": "<p>If <code>namespace monoid</code> is making name resolution annoying, you can just use <code>lemma monoid.foo</code> instead in the root namespace</p>",
        "id": 278305011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649425167
    },
    {
        "content": "<p>Semi-serious suggestion: should there be a <code>close monoid</code> command that undoes the (implicit) <code>open monoid</code> in <code>namespace monoid</code>?</p>",
        "id": 278305143,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649425220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/working.20in.20namespace.20monoid/near/278305011\">said</a>:</p>\n<blockquote>\n<p>If <code>namespace monoid</code> is making name resolution annoying, you can just use <code>lemma monoid.foo</code> instead in the root namespace</p>\n</blockquote>\n<p>After looking at another few examples from mathlib, I now think that <code>namespace ore_localization</code> is actually the better choice anyway :)</p>",
        "id": 278306374,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1649425738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/116395-maths/topic/working.20in.20namespace.20monoid/near/278305143\">said</a>:</p>\n<blockquote>\n<p>Semi-serious suggestion: should there be a <code>close monoid</code> command that undoes the (implicit) <code>open monoid</code> in <code>namespace monoid</code>?</p>\n</blockquote>\n<p>this is hard, right? because afair Lean implements <code>open</code> by removing all the <code>monoid.</code> from names in the local context, so it'd have to \"remember\" which ones it removed</p>",
        "id": 278307313,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649426083
    },
    {
        "content": "<p>Not sure if it's any easier or saner but presuming declarations know their own names could also have an <code>unshadow foo</code> command which loops over declarations with conflicting names and removes the one that isn't from <code>foo</code> (and default <code>foo</code> to  <code>_root_</code>)</p>",
        "id": 278307758,
        "sender_full_name": "Julian Berman",
        "timestamp": 1649426282
    },
    {
        "content": "<p><code>semigroup</code> has <code>protect_proj</code>, probably it should just be added to <code>monoid</code> too, with an explicit list if there are names we want to not protect</p>",
        "id": 278310692,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649427498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> It looks like <code>open</code> operates by adding aliases -- it doesn't remove anything.</p>\n<p>I learned that <code>open</code> isn't fully documented in the Lean reference manual. Here's the BNF for the command:</p>\n<p><code>open</code> <em>ident</em> [<code>as</code> <em>ident</em>] ( <code>(renaming</code> (<em>ident</em> <code>-&gt;</code> <em>ident</em>)* <code>)</code> | <code>(hiding</code> <em>ident</em> * <code>)</code> | <code>(</code> <em>ident</em> * <code>)</code> )*</p>\n<p>(Square brackets mean it's optional, non-monospace parentheses are for grouping, postfix * means zero-or-more, and | indicates alternatives.)</p>\n<ul>\n<li>example: <code>open foo as bar</code> takes every name in the <code>foo</code> namespace and gives an alias in the <code>bar</code> namespace</li>\n<li>The three types of extra rules are called renames, exceptions, and explicits. There cannot simultaneously be renames/exceptions and explicits (the Lean error is about \"mixing explicit and implicit open/export options\"; not sure why they're called \"implicit\" in the error.)<ul>\n<li>If there are explicits: only the listed identifiers are given aliases</li>\n<li>If there are renames/exceptions: everything but the exceptions are given aliases and the renames are processed (note: renames override exceptions; might be a bug)</li>\n</ul>\n</li>\n</ul>",
        "id": 278317499,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649430308
    },
    {
        "content": "<p>It seems like in principle there could be a <code>close</code> command with the same syntax that erases aliases instead of adding them. (Aliases are special data attached to the current environment.)</p>",
        "id": 278317794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649430466
    },
    {
        "content": "<p>The way <code>export</code> works is it's <code>open</code> but it also adds an \"export declaration\" to a particular namespace, and then the <code>namespace foo</code> command will look for all the export declarations and \"replay\" them by simulating the <code>open</code> command.</p>",
        "id": 278318483,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649430776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/116395-maths/topic/working.20in.20namespace.20monoid/near/278305143\">said</a>:</p>\n<blockquote>\n<p>Semi-serious suggestion: should there be a <code>close monoid</code> command that undoes the (implicit) <code>open monoid</code> in <code>namespace monoid</code>?</p>\n</blockquote>\n<p>I'm not sure this could work as an inverse to <code>open</code> -- as far as I understand, there's not an implicit <code>open monoid</code> in the <code>namespace monoid</code> command. Rather, when resolving a name the elaborator goes through the following steps:</p>\n<ol>\n<li>look through the current stack of namespaces to find the declaration (so, if you're in <code>foo.bar</code>, look in <code>foo.bar</code> then <code>foo</code>)</li>\n<li>check if it's an exact name (after removing <code>_root_</code> from the front if present)</li>\n<li>look for an alias with that name</li>\n<li>try turning the name into field notation (example: if it's <code>a.b</code>, try resolving <code>a</code> and then get the <code>b</code> field).</li>\n</ol>\n<p>There could be a <code>close</code> command to inhibit step 1, I suppose. It seems like a specialized feature though (\"all declarations go into this namespace, but do not use it for name resolution\").</p>",
        "id": 278319992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649431482
    },
    {
        "content": "<p>I haven't looked at how it'd be implemented, but potentially <code>protected namespace foo</code> could permanently mark a namespace to not be used for name resolution by the elaborator (here's place it happens: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/elaborator.cpp#L4092\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/elaborator.cpp#L4092</a>). I'm assuming mathport would rather this not be implemented however...</p>",
        "id": 278321054,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649431966
    }
]