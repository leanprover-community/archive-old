[
    {
        "content": "<p>I'm working on product measures in a new branch, with the goal to get Fubini's theorem (which is used in all proofs that I saw that prove uniqueness of the Haar measure):<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/measure-prod\">https://github.com/leanprover-community/mathlib/compare/measure-prod</a></p>\n<p>Before I go to far, I want to get some discussion going on the setup I'm using, so that the library is usable.<br>\nWhen we talk about products, there are different things I can mean:<br>\n(1) binary products <code>α × β</code>;<br>\n(2) finitary products <code>Π (i : ι), α i</code> with <code>[fintype ι]</code>;<br>\n(3) countable products <code>Π (i : ι), α i</code> with <code>[encodable ι]</code>;<br>\n(4) arbitrary products <code>Π (i : ι), α i</code>.</p>\n<p>We definitely want (1) and (2). Usually in books (2) is given as \"iterate (1), and we either explicitly or implicitly all the ways that this is not convenient\".<br>\nI'm currently doing (2) directly. I'm wondering how easy it is to get (1) as special case of (2). I'm a little worried about universe levels , so I'm wondering whether it is just easier to do all proofs for (1) separately. (I could try to transport along <code>measurable_equiv (α × β) (Π (i : bool), cond (ulift α) (ulift β))</code>, but that doesn't sound very convenient.)</p>\n<p>How important is (3) in applications? Should I make (3) the basic definition, and (2) a special case of it? I don't think we have a multiplicative version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum\">docs#tsum</a> yet, right?</p>\n<p>Most books assume σ-finiteness of measures the moment they talk about product measures. Currently I'm defining the product measure without this condition (in this case, I believe that the product measure is not unique, but I'm defining the maximal one), and I'm only going to assume it once I need it (and according to Wikipedia, Fubini's theorem even holds without σ-finiteness for the maximal product measure).</p>\n<p>Lastly, the product measure of a complete measure is not itself complete. So the product measure on <code>ℝ × ℝ</code> is not the same as the Lebesque measure. My intuition is that this doesn't really matter for us, since every measure comes with its own outer measure anyway.</p>\n<p>Any thoughts or comments are welcome! <br>\n<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span></p>",
        "id": 206288949,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596822794
    },
    {
        "content": "<p>If we want to have a sequence of identically distributed random variables some day, then probably we need the product measure on <code>nat → α</code>.</p>",
        "id": 206302477,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596830155
    },
    {
        "content": "<p>I have no opinion about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-finiteness.</p>",
        "id": 206302585,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596830215
    },
    {
        "content": "<p>Except that it's not the product measure in the usual sense when the product is infinite, you need some extension theorem (like Kolmogorov or Ionescu-Tulcea) to define the infinite product measure, and it only makes sense for probability measures. So I would say this is different enough that you can concentrate on finite products for now, and we will come back to the infinite product when needed.</p>",
        "id": 206303123,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596830512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/product.20measures/near/206288949\">said</a>:</p>\n<blockquote>\n<p>Lastly, the product measure of a complete measure is not itself complete. So the product measure on <code>ℝ × ℝ</code> is not the same as the Lebesque measure. My intuition is that this doesn't really matter for us, since every measure comes with its own outer measure anyway.</p>\n</blockquote>\n<p>I am not sure I get this. If you take the product measure of Lebesgue measure with the Borel sigma-algebra, you again get Lebesgue measure with the Borel sigma-algebra, right? The problem only appears when you consider completed sigma-algebras, but this is less usual than the Borel one.</p>",
        "id": 206305392,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596832041
    },
    {
        "content": "<p>Anyway I think that we should have Borel as the main sigma-algebra and use predicates for \"measurable w.r.t. the completed sigma-algebra\".</p>",
        "id": 206307407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596833234
    },
    {
        "content": "<p>Yes, the (finitary) product of borel sigma-algebras is again borel: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.borel_space\">docs#prod.borel_space</a> . If the Borel sigma-algebra is the main one we use, then there is no problem.</p>",
        "id": 206309212,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596834241
    },
    {
        "content": "<p>Once someone will want to integrate functions measurable w.r.t. (Lebesgue, Borel), we'll need to migrate the integration to <code>is_null_measurable</code>.</p>",
        "id": 206311931,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596835903
    },
    {
        "content": "<p>BTW, it's hard to tell from names that <code>is_measurable</code> is about sets and <code>measurable</code> is about functions. What about <code>measurable_set</code> and <code>measurable_fun</code>?</p>",
        "id": 206312026,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596835948
    },
    {
        "content": "<p>Another question: what are you plans about <code>real.measure_space</code>? Should we redefine it as <code>haar_measure (Icc 0 1) 1</code>?</p>",
        "id": 206312190,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596836054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/product.20measures/near/206312026\">said</a>:</p>\n<blockquote>\n<p>BTW, it's hard to tell from names that <code>is_measurable</code> is about sets and <code>measurable</code> is about functions. What about <code>measurable_set</code> and <code>measurable_fun</code>?</p>\n</blockquote>\n<p>Yeah, I have noticed the same. I don't mind it, but changing it is probably good.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/product.20measures/near/206312190\">said</a>:</p>\n<blockquote>\n<p>Another question: what are you plans about <code>real.measure_space</code>? Should we redefine it as <code>haar_measure (Icc 0 1) 1</code>?</p>\n</blockquote>\n<p>Yes, I think that would be good.</p>",
        "id": 206314092,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596837497
    },
    {
        "content": "<p>That might require us to <code>@[to_additive]</code> everything in my recent PRs.</p>",
        "id": 206314194,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596837568
    },
    {
        "content": "<p>Could we get dot notation working? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can we get dot notation to work on pi types as if they were in the <code>Pi</code> namespace?</p>",
        "id": 206316602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596839471
    },
    {
        "content": "<p>Last time this question was asked Gabriel <a href=\"#narrow/stream/113488-general/topic/function.20namespace/near/196737141\">pointed</a> to the <a href=\"https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728\">function</a> in C++ source that has to be modified.</p>",
        "id": 206316958,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596839784
    },
    {
        "content": "<p>Note that users might want <code>pi</code>, <code>forall</code>, or <code>function</code> depending on the actual type.</p>",
        "id": 206317008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596839869
    },
    {
        "content": "<p>I think for the sake of determinism we should just always use <code>Pi</code></p>",
        "id": 206317114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596839987
    },
    {
        "content": "<p>Interesting: I was thinking of a different potential feature of the dot notation for functions, namely if <code>e : Π x1 x2 x3, foo t1 t2 t3</code> then <code>e.bar</code> means <code>foo.bar e</code>.<br>\nThis allows you to write </p>\n<ul>\n<li>if <code>m : Π i, outer_measure (α i)</code> then <code>m.pi</code> is <code>outer_measure.pi m</code></li>\n<li>if <code>μ : Π i, measure (α i)</code> then <code>μ.pi</code> is <code>measure.pi μ</code><br>\netc.</li>\n</ul>",
        "id": 206336232,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596870894
    },
    {
        "content": "<p>BTW, did you see <a href=\"https://github.com/leanprover-community/mathlib/issues/2819\">#2819</a>?</p>",
        "id": 206373799,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596938046
    },
    {
        "content": "<p>And <a href=\"https://github.com/jtristan/stump-learnable\">https://github.com/jtristan/stump-learnable</a></p>",
        "id": 206373802,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596938061
    },
    {
        "content": "<p>BTW, they use bundled probability measures with <code>coe_fn</code> sending sets to <code>nnreal</code>s. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Do you have an opinion on whether we want this or you prefer to have a <code>typeclass</code>?</p>",
        "id": 206374578,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596939688
    },
    {
        "content": "<p>(of course, integration should use coercion to <code>measure</code>)</p>",
        "id": 206374806,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596940169
    },
    {
        "content": "<p>Ah, thanks for pointing me to that. I know about the project, but I forgot that they also did product measures there.<br>\nCan you define finitary product measures using the Giry monad (without doing recursion) ?<br>\nSo far I'm only working on finitary product measures, so there doesn't seem to be much overlap yet, but it's good to remember that product measure has already been done.<br>\n(let me also ping <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> to this topic)</p>",
        "id": 206377825,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596946386
    },
    {
        "content": "<p>I don't have a strong opinion whether measures should be typeclasses or bundled. <br>\nI like the use of bundled measures so far, and have not yet used <code>measure_space</code>/<code>volume</code>.</p>",
        "id": 206377834,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596946431
    },
    {
        "content": "<p>My question was not about <code>volume</code> vs <code>μ : measure α</code> (I did the refactor moving from <code>volume</code> to <code>μ</code> in integrals). My question is whether we want <code>(μ : probability_measure α)</code> or <code>(μ : measure α) [probability_measure μ]</code>.</p>",
        "id": 206777742,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597289655
    },
    {
        "content": "<p>BTW, I have a proof of the following fact: if two locally finite measures on <code>real</code> are equal on all intervals with rational endpoints, then they're equal + corollaries about <code>measure.map f volume</code> with <code>f = ((+) a)</code>, <code>f = ((*) a)</code>, <code>f = has_neg.neg</code>. It's not ready for review yet.</p>",
        "id": 206777782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597289762
    },
    {
        "content": "<p>(of course, the proof starts with a more general fact)</p>",
        "id": 206777807,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597289788
    },
    {
        "content": "<p>The proof is in <a href=\"https://github.com/leanprover-community/mathlib/tree/integral-map\">this</a> branch</p>",
        "id": 206779017,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597291683
    },
    {
        "content": "<p>Is the following statement true in general? I want it to use it for the product measure. But for example in <a href=\"https://github.com/leanprover-community/mathlib/issues/2819\">#2819</a> it is only proven specifically for the case where <code>f = prod.mk</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">giry_monad</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207670771,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598036114
    },
    {
        "content": "<p>I think this might be relevant: <a href=\"https://ncatlab.org/nlab/show/strong+monad\">https://ncatlab.org/nlab/show/strong+monad</a> see the last example in section 4.</p>",
        "id": 207671680,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598036600
    },
    {
        "content": "<p>That does look relevant indeed. I don't quite understand its implications.</p>",
        "id": 207673165,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598037345
    },
    {
        "content": "<p>I think the main thing is that the giry monad should be \"commutative\" (with respect to the cartesian monoidal structure).</p>",
        "id": 207673250,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598037382
    },
    {
        "content": "<p>Oh, but this looks to fail with this other monoidal structure defined in this paper: <a href=\"https://arxiv.org/pdf/1612.05939.pdf\">https://arxiv.org/pdf/1612.05939.pdf</a></p>",
        "id": 207673581,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598037583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> told me about commutative monads a little while ago, maybe he has some ideas.</p>",
        "id": 207673711,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598037657
    },
    {
        "content": "<p>The commutativity exactly corresponds to the fact that the product of measures is \"commutative\" in the appropriate way. I have proven that modulo the above fact.</p>",
        "id": 207675332,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598038522
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 207675708,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598038724
    },
    {
        "content": "<p>Wait, now I'm confused. What does <code>measurable f</code> mean? Isn't this saying that the function from <code>\\iota</code>to <code>\\a \\to \\b</code> is measurable, which implicitly assumes that <code>\\a \\to \\b</code> is measurable?</p>",
        "id": 207676793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598039400
    },
    {
        "content": "<p>yes, it is a measurable map into a function space. It is equivalent to the first component being measurable:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">measurable_pi</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207676960,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598039484
    },
    {
        "content": "<p>(I proved that on a branch, but it's just combining <code>measurable_pi_apply</code> and <code>measurable_pi_lambda</code>)</p>",
        "id": 207677119,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598039558
    },
    {
        "content": "<p>But wouldn't this imply that that you're working in a cartesian closed category? Or is this not actually the internal hom in the category of measurable spaces.</p>",
        "id": 207677233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598039630
    },
    {
        "content": "<p>I guess I'm trying to understand whether the negative result in that arxiv link actually applies.</p>",
        "id": 207677312,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598039657
    },
    {
        "content": "<p><code>α → β</code> is not the internal hom in the category of measurable spaces, it's an infinite product of measurable spaces.<br>\nI don't think that the arxiv link is relevant: it's about a different monoidal structure, which I don't think I use.</p>",
        "id": 207678249,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598040196
    },
    {
        "content": "<p>So what's stopping the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mo stretchy=\"false\">(</mo><mi>λ</mi><mi>c</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\mapsto (\\lambda c, f( c,x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> from being completely crazy?</p>",
        "id": 207679660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598041015
    },
    {
        "content": "<p>You mean in the original question? I added the condition <code>measurable f</code>, which is equivalent to <code>∀ x, measurable (λ c, f c x)</code>.</p>",
        "id": 207679828,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598041096
    },
    {
        "content": "<p>The function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mi>ι</mi><mo>→</mo><mi>β</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\alpha \\to (\\iota \\to \\beta)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ι</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">)</span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>↦</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\mapsto (i \\mapsto f(i,x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> need not be measurable, right?</p>",
        "id": 207680087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598041233
    },
    {
        "content": "<p>Yes, I'm talking about the original question of whether the lemma is correct.</p>",
        "id": 207680153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598041281
    },
    {
        "content": "<p>Oh never mind. Missed that additional assumption <code>hf</code>.</p>",
        "id": 207680195,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598041307
    },
    {
        "content": "<p>I guess <code>hf</code>is saying <code>swap f</code> is measurable, right?</p>",
        "id": 207680488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598041451
    },
    {
        "content": "<p>correct</p>",
        "id": 207681386,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598041997
    },
    {
        "content": "<p>Update: <br>\nIn the branch <a href=\"https://github.com/leanprover-community/mathlib/compare/measure-prod\">https://github.com/leanprover-community/mathlib/compare/measure-prod</a> I defined binary product measures (for sigma-finite measures), and proved Tonelli's Theorem. Fubini's Theorem is next.</p>\n<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Do you have a chance to look at <a href=\"https://github.com/leanprover-community/mathlib/issues/3760\">#3760</a> soon? (Or otherwise do you mind if I incorporate my suggestions and merge it?)</p>",
        "id": 208147676,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598475486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I'm now working with the <code>integrable</code> predicate, and I'm sad that <code>integrable</code> does not include <code>measurable</code>. Almost always when you require integrability you also require measurability. <br>\nHow do you feel about changing <code>integrable f μ</code> so that it includes <code>measurable f</code>?</p>",
        "id": 208266828,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598557702
    },
    {
        "content": "<p>I agree.</p>",
        "id": 209243834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1599430287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I started working on adding measurability to the <code>integrable</code> predicate. It simplifies a lot of things. The only drawback I noticed is that I had to add a <code>borel_space</code>instance in a few places.</p>",
        "id": 210212755,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600219637
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/compare/integrable\">https://github.com/leanprover-community/mathlib/compare/integrable</a></p>",
        "id": 210212760,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600219657
    },
    {
        "content": "<p>I need a couple of days without other <code>measure_theory</code> refactors going on to rename <code>measurable</code> → <code>measurable_fun</code>, <code>is_measurable</code> → <code>measurable_set</code>. This is a low priority change but I don't want to avoid merge conflicts. Please ping me once your current refactors (including \"<code>integrable</code> implies <code>measurable</code>\") will be merged.</p>",
        "id": 210220754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600229955
    },
    {
        "content": "<p>ok, I'll finish this refactor in the next few days.</p>",
        "id": 210220810,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600230011
    },
    {
        "content": "<p>For now I'm rewriting <code>simple_func_dense</code>: I want a simpler proof and a version that ensures <code>F n x ∈ range f</code>.</p>",
        "id": 210220968,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600230272
    },
    {
        "content": "<p>I like this change but, as discussed <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/210189728\">here</a>, I also have integration PRs in the pipeline.</p>",
        "id": 210230102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600241884
    },
    {
        "content": "<p>AFAIR, your PRs are localized additions, not refactoring. I'm ready to resolve merge conflicts in this case. I want to avoid merging to refactoring commits.</p>",
        "id": 210302352,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600281430
    },
    {
        "content": "<p>I proved Fubini's theorem in  <a href=\"https://github.com/leanprover-community/mathlib/compare/measure-prod\">https://github.com/leanprover-community/mathlib/compare/measure-prod</a><br>\nThese PR's have some preliminary stuff: <a href=\"https://github.com/leanprover-community/mathlib/issues/4262\">#4262</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/4263\">#4263</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/4264\">#4264</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/4265\">#4265</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/4266\">#4266</a><br>\nI plan to open 1 more PR with general measure theory (100-200 lines) and then 1 PR which just adds the file <code>measure_theory.prod</code> containing Tonelli's theorem and Fubini's theorem (600-800 lines)</p>",
        "id": 211325366,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601073003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> It turns out that <code>prod_prod</code> works for non-measurable sets, see <a href=\"https://github.com/leanprover-community/mathlib/issues/10241\">#10241</a></p>",
        "id": 260757674,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636438014
    },
    {
        "content": "<p>Oh neat! I couldn't get that to work before.</p>",
        "id": 260794389,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636463181
    }
]