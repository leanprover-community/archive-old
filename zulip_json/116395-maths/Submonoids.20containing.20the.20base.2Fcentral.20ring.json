[
    {
        "content": "<p>Is this a good name for this structure?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A `center_submonoid` is a submonoid that includes the central ring of the algebra -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">center_submonoid</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">submonoid</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">A.</span>\n</code></pre></div>\n<p>which has the property</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">algebra_map_mem</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">algebra_map_eq_smul_one</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">S.smul_mem</span> <span class=\"n\">r</span> <span class=\"n\">S.one_mem</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_mem</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"bp\">▸</span> <span class=\"n\">S.algebra_map_mem</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and thus inherits the <code>mul_action</code> and the <code>group_with_zero</code> structures  of  <code>A</code></p>",
        "id": 218719857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607013452
    },
    {
        "content": "<p>Oh, this probably belongs in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a></p>",
        "id": 218720206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607013588
    },
    {
        "content": "<p>I think you can edit the stream</p>",
        "id": 218721246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607014033
    },
    {
        "content": "<p>oh maybe not on this server</p>",
        "id": 218721326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607014074
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Submonoids.20containing.20the.20base.2Fcentral.20ring\">#general &gt; Submonoids containing the base/central ring</a> by <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span></p>",
        "id": 218721464,
        "sender_full_name": "Notification Bot",
        "timestamp": 1607014125
    },
    {
        "content": "<p>What is this notion for?</p>",
        "id": 218721720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607014223
    },
    {
        "content": "<p>\"center\" means something different, and <code>center_submonoid</code> sounds too much like \"central submonoid\"</p>",
        "id": 218721813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607014267
    },
    {
        "content": "<p>Submonoids of an algebra which include <code>algebra_map R A r</code></p>",
        "id": 218722355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607014472
    },
    {
        "content": "<p>Because those submonoids form a <code>group_with_zero</code> and inherit the same <code>mul_action</code> as their parent algebra</p>",
        "id": 218722379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607014483
    },
    {
        "content": "<p>I'm confused about what the structure is supposed to be...</p>",
        "id": 218722523,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607014551
    },
    {
        "content": "<p>I need a fresh type in order to attach those instances</p>",
        "id": 218722525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607014551
    },
    {
        "content": "<p>As a concrete example, it contains the non-unit spinor submonoid of the clifford algebra</p>",
        "id": 218722652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607014597
    },
    {
        "content": "<p>I guess the elements of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">a \\cdot X^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> in a polynomial ring is also an example?</p>",
        "id": 218723182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607014821
    },
    {
        "content": "<p>Yes</p>",
        "id": 218723213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607014833
    },
    {
        "content": "<p>I've asked this in a thread before, but I can now ask it with less code because more is already in mathlib</p>",
        "id": 218723247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607014849
    },
    {
        "content": "<p>I guess I'm wondering whether there are enough \"natural\" examples to give this a name :)</p>",
        "id": 218723351,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607014887
    },
    {
        "content": "<p>I'm still confused, what is the <code>group_with_zero</code>?</p>",
        "id": 218723569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607014976
    },
    {
        "content": "<p>Sorry</p>",
        "id": 218723601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607014992
    },
    {
        "content": "<p><code>monoid_with_zero</code></p>",
        "id": 218723620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607014996
    },
    {
        "content": "<p>What is the <code>monoid_with_zero</code>?</p>",
        "id": 218723639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015004
    },
    {
        "content": "<p>It's the monoid_with_zero that is inherited from the algebra</p>",
        "id": 218723666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015019
    },
    {
        "content": "<p>It's a submonoid of the ring, and <code>0 \\bu 1</code> is the zero...</p>",
        "id": 218723691,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607015033
    },
    {
        "content": "<p>I suppose this raises that a <code>submonoid_with_zero</code> would probably be a nice to have</p>",
        "id": 218723840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015087
    },
    {
        "content": "<p>You mean <em>each</em> such submonoid <em>is</em> a <code>monoid_with_zero</code>?</p>",
        "id": 218723859,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015098
    },
    {
        "content": "<p>Yes</p>",
        "id": 218723872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015105
    },
    {
        "content": "<p>Then why do you need a structure?</p>",
        "id": 218723904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015117
    },
    {
        "content": "<p><code>submonoid_with_zero</code> I understand</p>",
        "id": 218724009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015161
    },
    {
        "content": "<p>You want it to also be closed under scalar multiplication</p>",
        "id": 218724066,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607015173
    },
    {
        "content": "<p>Why do I want that?</p>",
        "id": 218724122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015195
    },
    {
        "content": "<p>That's what <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> wants... I dont know about you :)</p>",
        "id": 218724150,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607015211
    },
    {
        "content": "<p>There must be something we're going to <em>do</em> at some point</p>",
        "id": 218724201,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015230
    },
    {
        "content": "<p>Yeah, that's kind of my point too... It's unclear whether there are enough natural examples to make this a thing.</p>",
        "id": 218724244,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607015250
    },
    {
        "content": "<p>Also, if you just have individual examples, then you can put the instances on the examples</p>",
        "id": 218724304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015277
    },
    {
        "content": "<p>Yeah, but I had two examples and it was tiring</p>",
        "id": 218724374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015292
    },
    {
        "content": "<p>I don't understand what's special about this combination of hypotheses</p>",
        "id": 218724411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015312
    },
    {
        "content": "<p>It's not so much about whether it's special</p>",
        "id": 218724448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015326
    },
    {
        "content": "<p>It's that we don't have any sensible way to work with them uncombined</p>",
        "id": 218724467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015335
    },
    {
        "content": "<p>I agree this is a drawback of the bundled setup</p>",
        "id": 218724539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015369
    },
    {
        "content": "<p><code>(s : submonoid A) (s' : sub_mul_action R A) (h : (s : set A) = s')</code> seems like it would be ugly</p>",
        "id": 218724660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015411
    },
    {
        "content": "<p>Why not define a class on <code>submonoid_with_zero</code> saying it's closed under scalar multiplication?</p>",
        "id": 218724713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607015434
    },
    {
        "content": "<p>this is why stuff like <code>is_submonoid</code> shouldn't just go away</p>",
        "id": 218724723,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607015440
    },
    {
        "content": "<p>This is one point where I think the agda standard library has things right.... everything is consistently done with  <code>is_subfoo</code>, and the bundled things are made using these.</p>",
        "id": 218724830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607015501
    },
    {
        "content": "<p>So <code>deprecated.subgroup</code> should be refactored so that <code>is_subgroup</code> is a structure not a class, and then undeprecated?</p>",
        "id": 218724978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607015551
    },
    {
        "content": "<p>How would subtypes and attaching a <code>group</code> instance to them work in the <code>is_subgroup</code> style world?</p>",
        "id": 218725090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015596
    },
    {
        "content": "<p><code>subgroup G</code> could be defined as <code>(s : set G) (hs : is_subgroup s)</code></p>",
        "id": 218725250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607015650
    },
    {
        "content": "<p>My question was about what the implementation of <code>has_coe_to_sort</code> would look like under that design, for when I want to talk about <code>(S : subgroup A) (s : S)</code></p>",
        "id": 218725579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015813
    },
    {
        "content": "<p>Because I don't see a way out of defining the <code>structure center_submonoid</code> object I have above, all it would change was how the fields are laid out</p>",
        "id": 218725726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607015872
    }
]