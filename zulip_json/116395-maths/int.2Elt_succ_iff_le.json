[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff_le</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>This doesn't seem to be in mathlib. <code>split; intro; linarith</code> proves it but slowly...</p>",
        "id": 176347374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569225586
    },
    {
        "content": "<p>Is it called <code>int.lt_add_one</code>?</p>",
        "id": 176347444,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569225618
    },
    {
        "content": "<p>Aah, nice <code>lt_add_one_iff</code></p>",
        "id": 176347496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569225658
    },
    {
        "content": "<p>I first had the sides swapped, and then <code>library_search</code> didn't find it. I thought you fixed that <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> didn't you?</p>",
        "id": 176347519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569225684
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff_le</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176347661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569225795
    },
    {
        "content": "<p>Really? Ugh, I should fix that.</p>",
        "id": 176347667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569225807
    },
    {
        "content": "<p>ohh... I see, yeah, library search can't do that out of the box. If you <code>split; library_search</code> it should succeed, however.</p>",
        "id": 176347684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569225841
    },
    {
        "content": "<p>Aha, I see</p>",
        "id": 176347726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569225854
    },
    {
        "content": "<p>It's a slight hack to do this, but I can add it.</p>",
        "id": 176347727,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569225855
    },
    {
        "content": "<p>Maybe it can try <code>symmetry</code> before applying...?</p>",
        "id": 176347750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569225889
    },
    {
        "content": "<p>But maybe it costs too much</p>",
        "id": 176347753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569225896
    },
    {
        "content": "<p>I mean, <code>symmetry</code> probably costs exactly one more <code>library_search_core</code> invocation?</p>",
        "id": 176356237,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569234397
    }
]