[
    {
        "content": "<p>I've got the following snippet</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">quiver</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span><span class=\"o\">}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">is_a_path</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"bp\">::</span> <span class=\"n\">e₂</span> <span class=\"bp\">::</span> <span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">e₁</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">t</span> <span class=\"n\">e₂</span> <span class=\"bp\">∧</span> <span class=\"n\">is_a_path</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"bp\">::</span> <span class=\"n\">es</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">diagram</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">t</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 125937757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168814
    },
    {
        "content": "<p>But now I realise that I actually only want to consider finite lists</p>",
        "id": 125937763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168831
    },
    {
        "content": "<p>why don't you use chain lol</p>",
        "id": 125937765,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168833
    },
    {
        "content": "<p>aha</p>",
        "id": 125937766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168834
    },
    {
        "content": "<p>How would I best go about that</p>",
        "id": 125937771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168846
    },
    {
        "content": "<p>but lists are all finite</p>",
        "id": 125937772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168846
    },
    {
        "content": "<p>Why?</p>",
        "id": 125937774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168859
    },
    {
        "content": "<p>because they're defined inductively</p>",
        "id": 125937778,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168865
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">T</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">T</span>\n</pre></div>",
        "id": 125937785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168877
    },
    {
        "content": "<p>and I can inductively prove that they are finite :P</p>",
        "id": 125937788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168884
    },
    {
        "content": "<p>I see</p>",
        "id": 125937790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168894
    },
    {
        "content": "<p>Crazy...</p>",
        "id": 125937797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168916
    },
    {
        "content": "<p>you want lazy lists?</p>",
        "id": 125937835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168924
    },
    {
        "content": "<p>I see you want everything to be lazy</p>",
        "id": 125937838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168930
    },
    {
        "content": "<p>maybe that's why you think they're crazy</p>",
        "id": 125937839,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168934
    },
    {
        "content": "<p>Hmm, maybe now I'm happy that they aren't lazy (-;</p>",
        "id": 125937844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168956
    },
    {
        "content": "<p>maybe your ideas are a bit hazy</p>",
        "id": 125937846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168964
    },
    {
        "content": "<p>That.</p>",
        "id": 125937849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168974
    },
    {
        "content": "<p><a href=\"http://www.rhymezone.com/r/rhyme.cgi?Word=lazy&amp;typeofrhyme=perfect\" target=\"_blank\" title=\"http://www.rhymezone.com/r/rhyme.cgi?Word=lazy&amp;typeofrhyme=perfect\">http://www.rhymezone.com/r/rhyme.cgi?Word=lazy&amp;typeofrhyme=perfect</a></p>",
        "id": 125937853,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168986
    },
    {
        "content": "<p>That is definitely true. It's one of my defining properties</p>",
        "id": 125937857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168987
    },
    {
        "content": "<p>not many words rhyme with lazy though</p>",
        "id": 125937859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168991
    },
    {
        "content": "<p>so I'm done coz I can't use daisy</p>",
        "id": 125937861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168998
    },
    {
        "content": "<p>I guess you just did</p>",
        "id": 125937865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525169023
    },
    {
        "content": "<p>And you don't wanna look like jay z</p>",
        "id": 125937867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525169026
    },
    {
        "content": "<p>Anyway... I am going to try and define the set of all paths, and then try to figure out how to define commutative diagrams</p>",
        "id": 125937919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525169105
    },
    {
        "content": "<p>hmm... I would rather use categories to define diagrams</p>",
        "id": 125937924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525169125
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/category-theory/blob/master/src/natural_transformation.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/category-theory/blob/master/src/natural_transformation.lean\">https://github.com/kckennylau/category-theory/blob/master/src/natural_transformation.lean</a></p>",
        "id": 125937968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525169195
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">product</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_discrete</span> <span class=\"n\">C</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125937970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525169207
    },
    {
        "content": "<p>product is the limit of the discrete diagram</p>",
        "id": 125937973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525169221
    },
    {
        "content": "<p>But that is not how we use them, I think</p>",
        "id": 125937978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525169231
    },
    {
        "content": "<p>is it not?</p>",
        "id": 125937981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525169239
    }
]