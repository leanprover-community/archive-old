[
    {
        "content": "<p>Is there a tactic which does goals like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">U₂</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">U₁</span> <span class=\"err\">∪</span> <span class=\"bp\">-</span><span class=\"n\">U₂</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"n\">U₁</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"bp\">∨</span> <span class=\"bp\">-</span><span class=\"n\">U₂</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">U₁</span> <span class=\"err\">∪</span> <span class=\"bp\">-</span><span class=\"n\">U₂</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_univ_iff_forall</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_empty_iff_forall_not_mem</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">compl_univ_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">compl_univ_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>? It's just easy stuff from logic.basic but disguised as sets.</p>",
        "id": 186732214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580163483
    },
    {
        "content": "<p><code>by finish [set.ext_iff]</code></p>",
        "id": 186732870,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1580164006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"err\">∪</span> <span class=\"bp\">-</span><span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p><code>finish [set.ext_iff]</code> doesn't do this one :-( Any idea why not?</p>",
        "id": 186918536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580325527
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tauto</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"err\">∪</span> <span class=\"bp\">-</span><span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_iff_forall_not_mem</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Best I can do so far</p>",
        "id": 186992078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580394884
    },
    {
        "content": "<p>A little better but maybe still too much...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"err\">∪</span> <span class=\"bp\">-</span><span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186997213,
        "sender_full_name": "Joe",
        "timestamp": 1580397929
    },
    {
        "content": "<p>Would be fun to have a way to move these goals into equality in a boolean ring and call ring.</p>",
        "id": 187016623,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1580409630
    },
    {
        "content": "<p>I'm currently struggling with this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">topology</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A subspace Y of a topological space X is *irreducible* if it is non-empty,</span>\n<span class=\"cm\">and for every cover by two closed sets C₁ and C₂, one of the Cᵢ has to be Y. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_irreducible</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">C₁</span> <span class=\"n\">C₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">is_closed</span> <span class=\"n\">C₁</span> <span class=\"bp\">→</span> <span class=\"n\">is_closed</span> <span class=\"n\">C₂</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C₁</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">C₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">C₁</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"bp\">∨</span> <span class=\"n\">C₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">irred_iff_nonempty_open_dense</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):</span>\n<span class=\"n\">is_irreducible</span> <span class=\"n\">Y</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U₁</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">U₂</span> <span class=\"bp\">→</span>\n  <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 187016767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580409711
    },
    {
        "content": "<p>for me the proof is completely content-free -- I am surprised I can't just tactic my way to the end.</p>",
        "id": 187016832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580409732
    },
    {
        "content": "<p>ooh Chris has just done it :-)</p>",
        "id": 187016851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580409745
    },
    {
        "content": "<p>except he cheated</p>",
        "id": 187016864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580409758
    },
    {
        "content": "<p>The current preferred way to express that a set <code>s</code> is nonempty in mathlib is to write <code>s.nonempty</code> (gives you access to a nice API with dot notation).</p>",
        "id": 187026839,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580415826
    },
    {
        "content": "<p>We need to get Johannes back to fix up <code>topology.subset_properties</code> :-)</p>",
        "id": 187028274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580416830
    },
    {
        "content": "<p>I have a fabulous challenge :-)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- hint</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"n\">V</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inter_left_comm</span><span class=\"o\">,</span> <span class=\"n\">inter_comm</span><span class=\"o\">,</span> <span class=\"n\">inter_assoc</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- challenge</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">V</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 187032422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580419395
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> for helping me debug this one</p>",
        "id": 187032596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580419505
    },
    {
        "content": "<p>I don't know any way of solving the second goal without simply doing it by hand</p>",
        "id": 187032650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580419543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">inter_self_left</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">inter_assoc</span><span class=\"o\">,</span> <span class=\"n\">inter_self</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- challenge</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">V</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inter_left_comm</span><span class=\"o\">,</span> <span class=\"n\">inter_comm</span><span class=\"o\">,</span> <span class=\"n\">inter_assoc</span><span class=\"o\">,</span> <span class=\"n\">inter_self_left</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 187032712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580419563
    },
    {
        "content": "<p>Yes <code>inter_self_left</code> is exactly what is missing</p>",
        "id": 187032751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580419596
    },
    {
        "content": "<p>but I had no idea that the behaviour of <code>simp</code> would depend on the order which the variables were introduced. I was tearing my hair out until Chris pointed this out.</p>",
        "id": 187032775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580419621
    },
    {
        "content": "<p><code>ext, split ; finish</code></p>",
        "id": 187032831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580419655
    },
    {
        "content": "<p>No idea why that <code>split</code> seems needed.</p>",
        "id": 187032841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580419669
    },
    {
        "content": "<p>In fact the reason I didn't find this one was precisely because it didn't occur to me to use <code>split</code></p>",
        "id": 187032911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580419692
    },
    {
        "content": "<p><code>by tidy</code></p>",
        "id": 187033045,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1580419799
    },
    {
        "content": "<p>Chris suggests that this is a bug with <code>finish</code></p>",
        "id": 187033106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580419810
    },
    {
        "content": "<p><code>tidy</code> is definitely the best answer so far. Too bad it's so slow.</p>",
        "id": 187033156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580419843
    },
    {
        "content": "<p>don't look at the proof trace it emits :^)</p>",
        "id": 187033183,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1580419861
    },
    {
        "content": "<p>ha ha it's even longer than my bare hands proof :-)</p>",
        "id": 187033586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580420086
    },
    {
        "content": "<p>I was supposed to be proving results about Noetherian topological spaces this evening and all I've done is spent hours proving logical trivialities :-)</p>",
        "id": 187033667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580420133
    },
    {
        "content": "<p>it's always longer than your bare hands proof, that's what tactics do</p>",
        "id": 187033812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580420222
    },
    {
        "content": "<p>Kevin's bare hand are still in tactic mode.</p>",
        "id": 187033860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580420249
    },
    {
        "content": "<p><code>finish</code> makes no progress on the problem (you can see where it gets stuck by examining the goal state after <code>safe</code>; in this case it just negates the goal and nothing else triggers)</p>\n<p>if you change the intersections to <code>lattice.inf</code>, <code>finish</code> will instead time out (there are too many possible rewrites)</p>",
        "id": 187035374,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1580421170
    },
    {
        "content": "<p>we frequently had to deal with this kind of reasoning in boolean algebras in <code>flypitch</code>; here's an example of our tools used for two of the problems in this thread</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- requires flypitch</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">to_mathlib</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">bv_tauto</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bblast</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n   <span class=\"n\">simp_flag</span> <span class=\"err\">←</span> <span class=\"n\">succeeds</span> <span class=\"err\">$</span> <span class=\"n\">pure</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">simp_flag</span> <span class=\"k\">then</span>\n   <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">mk_simp_set</span> <span class=\"n\">tt</span> <span class=\"o\">[]</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">fail_if_unchanged</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">})</span>\n   <span class=\"k\">else</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n   <span class=\"n\">is_eq</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">succeeds</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">is_eq</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n   <span class=\"k\">if</span> <span class=\"n\">is_eq</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n   <span class=\"n\">all_goals</span> <span class=\"n\">tidy_context</span><span class=\"o\">,</span>\n   <span class=\"n\">done</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">all_goals</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">bv_tauto</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">to_infs</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S₁</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">S₁</span> <span class=\"err\">∩</span> <span class=\"n\">S₂</span> <span class=\"bp\">=</span> <span class=\"n\">S₁</span> <span class=\"err\">⊓</span> <span class=\"n\">S₂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">V</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">bblast</span><span class=\"o\">[</span><span class=\"n\">to_infs</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">⊓</span> <span class=\"n\">U₂</span> <span class=\"err\">⊓</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">U₁</span> <span class=\"err\">⊓</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">U₂</span> <span class=\"err\">⊓</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">bblast</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"err\">Γ</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"err\">⊓</span> <span class=\"n\">U₂</span> <span class=\"err\">⊓</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">bv_tauto</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">U₂</span> <span class=\"err\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"n\">foo</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 187045515,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1580429374
    }
]