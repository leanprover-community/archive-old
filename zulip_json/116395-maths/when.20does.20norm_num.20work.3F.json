[
    {
        "content": "<p>I've written the definition of the Bernoulli numbers, and wanted to test my implementation. <code>#eval</code> computes the first 16 numbers in a breeze. But if I want a verified computation <code>by norm_num</code> fails (because simplify, or something). What is the correct way to write a test for my definition?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">bernoulli</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bernoulli_fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bernoulli_aux</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"o\">((</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">iterate</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bernoulli_fun</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)),</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)))</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">[])</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bernoulli</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bernoulli_aux</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">bernoulli_aux</span> <span class=\"mi\">16</span>\n<span class=\"c1\">-- ((16, -3617/510), [(15, 0), (14, 7/6), (13, 0), (12, -691/2730), (11, 0), (10, 5/66), (9, 0), (8, -1/30), (7, 0), (6, 1/42), (5, 0), (4, -1/30), (3, 0), (2, 1/6), (1, 1/2), (0, 1)]) :=</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bernoulli_zero</span>  <span class=\"o\">:</span> <span class=\"n\">bernoulli</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>   <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">bernoulli_one</span>   <span class=\"o\">:</span> <span class=\"n\">bernoulli</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">bernoulli_two</span>   <span class=\"o\">:</span> <span class=\"n\">bernoulli</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">bernoulli_three</span> <span class=\"o\">:</span> <span class=\"n\">bernoulli</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>   <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">bernoulli</span>\n</pre></div>",
        "id": 187080093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580475015
    },
    {
        "content": "<p><code>norm_num</code> doesn't know anything about \"your\" functions. You have to use <code>norm_num [bernoulli]</code> to have any chance of this working. With luck, that's all that is necessary, as long as all the necessary <code>list.sum</code> simp lemmas are available</p>",
        "id": 187080477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580475353
    },
    {
        "content": "<p>Does <code>norm_num</code> look at <code>simp</code> attributes?</p>",
        "id": 187080613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580475447
    },
    {
        "content": "<p><code>norm_num</code> is actually <code>repeat {norm_num1, simp}</code></p>",
        "id": 187080631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580475466
    },
    {
        "content": "<p>Unfortunately, it doesn't work</p>",
        "id": 187080698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580475492
    },
    {
        "content": "<p>do the usual thing: look at how it got stuck, identify the next simp lemma to get it unstuck</p>",
        "id": 187080731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580475530
    },
    {
        "content": "<p>I see, I'll try that</p>",
        "id": 187080773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580475564
    },
    {
        "content": "<p>I've mentioned this before, but the \"right\" solution here is a <code>cbv</code> tactic like coq's that will perform actual reduction, similar to what the VM does but with proofs</p>",
        "id": 187080920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580475654
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">bernoulli_four</span>  <span class=\"o\">:</span> <span class=\"n\">bernoulli</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">30</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bernoulli_def</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span>\n  <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_succ_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_num1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This runs fine now, although it isn't instant.</p>",
        "id": 187117956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580500635
    },
    {
        "content": "<p>Does it make sense to cache certain small computations in mathlib as simp-lemmas?<br>\nFor example, do we want <code>n.choose k = foo</code> for all <code>n,k &lt;= 10</code>?</p>",
        "id": 187118084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580500689
    },
    {
        "content": "<p>You could generate those lemmas with a tactic</p>",
        "id": 187118634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580501085
    },
    {
        "content": "<p>Ooh, in this case I'm not too worried about manual duplication (-;</p>",
        "id": 187118700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580501132
    },
    {
        "content": "<p>But do we want to spend 20 seconds on verifying those simp-lemmas every build?</p>",
        "id": 187118716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580501148
    },
    {
        "content": "<p>The more important issue that the simplifier tries to apply those 11*11 simp-lemmas every time it sees <code>choose</code>.</p>",
        "id": 187118777,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1580501188
    },
    {
        "content": "<p>stupid simp...</p>",
        "id": 187118841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580501254
    },
    {
        "content": "<p>Ok, we could put them in a separate set</p>",
        "id": 187118864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580501276
    },
    {
        "content": "<p>This should be a norm_num extension, but I never properly set that up</p>",
        "id": 187118970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580501340
    },
    {
        "content": "<p>Here's what I have now: <a href=\"https://github.com/leanprover-community/mathlib/blob/a99538789fff693c88be290fd45a89b199ecc800/src/data/generating_function.lean#L152L179\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/a99538789fff693c88be290fd45a89b199ecc800/src/data/generating_function.lean#L152L179\">https://github.com/leanprover-community/mathlib/blob/a99538789fff693c88be290fd45a89b199ecc800/src/data/generating_function.lean#L152L179</a><br>\nA nice definition of <code>bernoulli</code> required a new version of <code>nat.strong_rec_on</code></p>",
        "id": 187119156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580501514
    },
    {
        "content": "<p>I was very surprised to see that it was a definition that completely happened in tactic mode. Also, I couldn't prove anything about it.</p>",
        "id": 187119212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580501539
    },
    {
        "content": "<p>Is this generating function stuff meant to be PRed to mathlib?</p>",
        "id": 187157005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580553079
    },
    {
        "content": "<p>Potentially, yes.</p>",
        "id": 187157011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580553098
    },
    {
        "content": "<p>Why?</p>",
        "id": 187157015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580553116
    },
    {
        "content": "<p>Because it would be nice to have this stuff in;</p>",
        "id": 187157061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580553139
    },
    {
        "content": "<p>Has anyone done anything in the direction of Taylor series?</p>",
        "id": 187157450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580553998
    },
    {
        "content": "<p>Not that I know. But I have in the works a refactor of the iterated derivative (now seen as a continuous multilinear map) and a definition of the n-th derivative of a one-dimensional function, that would be a prerequisite for this. The first step in this direction is <a href=\"https://github.com/leanprover-community/mathlib/issues/1921\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1921\">#1921</a>, awaiting review (hint, hint :)</p>",
        "id": 187157653,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580554395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I'll make an attempt at reviewing the PR</p>",
        "id": 187161306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580561568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I took a first bite at reviewing this PR. 3 tiny comments so far...</p>",
        "id": 187174798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580587411
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 187175140,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580588032
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 187175195,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580588124
    }
]