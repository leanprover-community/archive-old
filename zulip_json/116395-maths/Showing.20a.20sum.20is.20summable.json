[
    {
        "content": "<p>I want the following lemma, yet don't know how to show it. <code>library_search</code>, <code>hint</code>, and <code>suggest</code> did not help.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ruesSummable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">):=</span>\n</code></pre></div>",
        "id": 300193236,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663862636
    },
    {
        "content": "<p>Do you mean \"I think this is in the library, but I can't find it\", or \"I want to prove it by myself, but I don't know how to start\"?</p>",
        "id": 300194880,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663863091
    },
    {
        "content": "<p>I would like to prove it; I don't know how to start, and it is not in the library.</p>",
        "id": 300196443,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663863563
    },
    {
        "content": "<p>if you can compute the sum, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum\">docs#has_sum</a></p>",
        "id": 300197181,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663863781
    },
    {
        "content": "<p><code>summable</code> is defined as <code>∃ a, has_sum f a</code></p>",
        "id": 300197336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663863830
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum\">docs#has_sum</a> unfolds to a <code>tendsto</code> assertion.</p>",
        "id": 300197456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663863857
    },
    {
        "content": "<p>In this case you can probably get by with less explicit methods by using summability of the series defining the exponential</p>",
        "id": 300197683,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663863918
    },
    {
        "content": "<p>I only got this far, and don't know how to get further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ruesSummable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">summable</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_sum</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300216203,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663869787
    },
    {
        "content": "<p>You can keep unfolding/rewriting terms until you get something more basic. Can you show the entire file (the imports), or at least what suggest comes up with?</p>",
        "id": 300217778,
        "sender_full_name": "Congzhou Sha",
        "timestamp": 1663870404
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable_nat_add_iff\">docs#summable_nat_add_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_series_div_summable\">docs#exp_series_div_summable</a> and I think will get you almost all the way there.</p>",
        "id": 300218805,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663870827
    },
    {
        "content": "<p>whoops, sorry, I misread <code>*</code> for <code>+</code>.</p>",
        "id": 300218879,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663870861
    },
    {
        "content": "<p><code>suggest</code> results in an error: <code>excessive memory consumption detected</code><br>\n<a href=\"/user_uploads/3121/J-vHFX52jdDNMMy8Nt0upC7S/RootOfUnityExponentialSum.lean\">RootOfUnityExponentialSum.lean</a></p>",
        "id": 300218961,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663870897
    },
    {
        "content": "<p>how about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable.comp_injective\">docs#summable.comp_injective</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_series_div_summable\">docs#exp_series_div_summable</a>, that should do the trick.</p>",
        "id": 300219544,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663871111
    },
    {
        "content": "<p>Do you understand my suggestion?</p>",
        "id": 300220045,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663871304
    },
    {
        "content": "<p>theorem summable.comp_injective {α : Type u_1} {β : Type u_2} {γ : Type u_3} [add_comm_group α] [uniform_space α] [uniform_add_group α] {f : β → α} [complete_space α] {i : γ → β} (hf : summable f) (hi : function.injective i) :<br>\nsummable (f ∘ i)</p>\n<p>This does look like it will work; I need to show that i=(λ (k:ℕ), n*k) is injective, then the pieces should fit, right?</p>",
        "id": 300220708,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663871520
    },
    {
        "content": "<p>Yes, for which I think it would be easiest to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono.injective\">docs#strict_mono.injective</a></p>",
        "id": 300221674,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663871826
    },
    {
        "content": "<p>Yep, here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ruesSummable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">exp_series_div_summable</span> <span class=\"n\">ℂ</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_injective</span> <span class=\"o\">(</span><span class=\"n\">strict_mono_mul_left_of_pos</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n</code></pre></div>",
        "id": 300222073,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663871961
    },
    {
        "content": "<p>As an exercise <span class=\"user-mention\" data-user-id=\"385848\">@Mark Gerads</span>  can you translate Jireh's term mode proof into a tactic mode proof?</p>",
        "id": 300223190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663872360
    },
    {
        "content": "<p>By the way, the mathlib style would be <code>h : 0 &lt; n</code> not <code>h:n&gt;0</code>, because <code>&gt;</code> is banned until Lean 4.</p>",
        "id": 300223415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663872435
    },
    {
        "content": "<p>I suppose just adding <code>begin</code>, <code>exact</code>, and <code>end</code> around the golf code is cheating?<br>\nI'll update my file to get rid of <code>&gt;</code> then.</p>",
        "id": 300223810,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663872560
    },
    {
        "content": "<p>I think what Kevin means is: take the pieces <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable.comp_injective\">docs#summable.comp_injective</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_series_div_summable\">docs#exp_series_div_summable</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono.injective\">docs#strict_mono.injective</a> (and potentially <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono_mul_left_of_pos\">docs#strict_mono_mul_left_of_pos</a>, but to be honest I found this with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a>) and build a proof in tactic mode using these pieces on your own. Optionally, you can look at my proof to understand how the pieces should fit together, but it might be better to try and avoid that.</p>",
        "id": 300228150,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663874002
    }
]