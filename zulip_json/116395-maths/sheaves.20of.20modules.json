[
    {
        "content": "<p>I was thinking a bit about how to do sheaves of modules (over a fixed sheaf of rings <code>O</code>). (The difficult is already all at the presheaf level, I think.) (Everywhere here I'm just thinking about presheaves on a space: no sites, no toposes.)</p>\n<p>I can think of three options, and none of them are great.</p>\n<ol>\n<li>\n<p>Consider the category whose objects are pairs (R, M), with R a ring and M an R-module. Now take a presheaf valued in this category, and additionally ask for an isomorphism between the \"ring part\" of this presheaf and <code>O</code>.</p>\n</li>\n<li>\n<p>Given <code>O</code>, we get a <code>Cat</code> valued presheaf, by sending each ring <code>R</code> to <code>Module R</code>. Now do the <a href=\"https://en.wikipedia.org/wiki/Grothendieck_construction\">Grothendieck construction</a> on this (eek, 2-categorical stuff, dependent type theory hell everywhere!) and call this <code>C_O</code>. We can take a presheaf <code>F</code> with values in <code>C_O</code>, and ask for a natural isomorphism from (<code>F</code> composed with the \"base\" functor from <code>C_O</code> back to <code>(opens X)^op</code>) to the identity functor on <code>(opens X)^op</code>.</p>\n</li>\n<li>\n<p>We can just write down what it means to be a presheaf of modules explicitly, not even attempting to make it a functor from <code>(opens X)^op</code> to somewhere... From this we can extract the underlying (non-dependent) presheaf of Types, and maybe hobble along using the general API only with that part.</p>\n</li>\n</ol>",
        "id": 204996202,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595668474
    },
    {
        "content": "<p>a module <code>M</code> over a ring <code>R</code> consists of:</p>\n<ol>\n<li>a structure of an abelian group on <code>M</code> (maps <code>+ : M \\to M \\to M</code> and <code>- : M \\to M</code> and <code>0 : M</code> satisfying properties)</li>\n<li>a scalar multiplication <code>R \\to M \\to M</code> satisfying more properties</li>\n</ol>\n<p>so likewise a sheaf of modules <code>M</code> over a sheaf of rings <code>R</code> consists of:</p>\n<ol>\n<li>a structure of an abelian group on <code>M</code> (maps <code>+ : M \\to M \\to M</code> and <code>- : M \\to M</code> and <code>0 : M</code> satisfying properties)</li>\n<li>a scalar multiplication <code>R \\to M \\to M</code> satisfying more properties</li>\n</ol>",
        "id": 204996300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595668655
    },
    {
        "content": "<p>or, categorically, a sheaf or rings is a ring object in the category of sheaves, and likewise for modules</p>",
        "id": 204996451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595668880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> How about the following (which is close to what Kenny says, but maybe a bit more explicit)</p>\n<ol start=\"4\">\n<li><code>O</code> is a sheaf of rings. <code>M</code> is a presheaf valued in <code>Ab</code>. On top of that, one of the following:</li>\n</ol>\n<p>4.(a) we have the data <code>module (O U) (M U)</code> for every <code>U</code> + the statement that the restriction maps are linear. (Note: The restriction maps will not be bundled linear maps automatically.)<br>\n4.(b) A morphism <code>O \\hom End(M)</code><br>\n4.(c) A morphism <code>O × M → M</code></p>",
        "id": 204996776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595669529
    },
    {
        "content": "<p>Will Kenny's version, or something close to it</p>\n<ol start=\"4\">\n<li>Think of the presheaf of rings <code>O</code> as a monoid object in presheaves of AddCommGroup, and think of a presheaf of modules as a module object for that monoid object</li>\n</ol>\n<p>satisfy Kevin / Johan?</p>",
        "id": 204996779,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595669557
    },
    {
        "content": "<p>It all depends on the API. We need to get access to all the existing library on modules. In particular, we need <code>module (O U) (M U)</code>, and lean should never have trouble inferring it. Also we need a way to talk about the restriction maps as <code>(O U)</code>-linear bundled homs.</p>",
        "id": 204996851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595669706
    },
    {
        "content": "<p>And a good way to construct sheaves of modules.</p>",
        "id": 204996856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595669729
    },
    {
        "content": "<p>So, whatever definition we choose, a great test would be to take a vector space <code>V</code> of <code>real</code> and see if we can turn functions <code>X → V</code> into a sheaf of modules over <code>X → real</code>.</p>",
        "id": 204996901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595669783
    },
    {
        "content": "<p>If that is painless, I consider that a huge indicator of being on the right path.</p>",
        "id": 204996903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595669806
    },
    {
        "content": "<p>Well, the restriction maps aren't exactly (O U)-linear maps, because the U is changing...  I don't think we really have existing API covering that.</p>",
        "id": 204997186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595670403
    },
    {
        "content": "<p>Well, if <code>U &lt; V</code> in <code>opens X</code>, then you can view <code>M U</code> as an <code>O V</code> module via the restriction <code>O V → O U</code>, and then the restriction <code>M V → M U</code> should be <code>O V</code>-linear.</p>",
        "id": 204997333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595670653
    },
    {
        "content": "<p>We will want to use that a lot. So we will need a way to access those maps as bundled homs (even if those bundled homs don't roll directly out of the definition, which I guess they won't, whatever we choose).</p>",
        "id": 204997347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595670700
    },
    {
        "content": "<p>The first test/challenge is to define the tensor product of presheaves of modules. Then tensor product of sheaves of modules. Then Picard groups</p>",
        "id": 205000164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676317
    },
    {
        "content": "<p>Then Picard groups without universe bumping, but that's a question for the logicians</p>",
        "id": 205000208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676368
    },
    {
        "content": "<p>I've just run into 100 sheep.</p>",
        "id": 205000223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676454
    },
    {
        "content": "<p>The theorem we need is that tensor product is associative up to isomorphism</p>",
        "id": 205000228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676480
    },
    {
        "content": "<p>Then we can make Picard monoids</p>",
        "id": 205000267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676496
    },
    {
        "content": "<p>And the Picard group is I think the units of this monoid. So the goal should be the monoid of isomorphism classes of sheaves of modules</p>",
        "id": 205000274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676542
    },
    {
        "content": "<p>It seems to me that the sheafification issue and the \"make sure you have access to the module API\" question are basically disjoint and perhaps the module one should be solved first</p>",
        "id": 205000371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676751
    },
    {
        "content": "<p>The presheaf tensor product is nothing more than just taking tensor product on each open</p>",
        "id": 205000381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676830
    },
    {
        "content": "<p>Okay... the internal object route actually sounds pretty reasonable for all this. We'll show <code>presheaf Ab X</code> is symmetric monoidal. We'll think of <code>O</code> as a commutative monoid object internal to that. Anytime you have a commutative monoid in a symmetric (even just braided!) monoidal category, its category of module objects is monoidal.</p>",
        "id": 205000743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595677579
    },
    {
        "content": "<p>So if we just define a presheaf of module objects to be a module object, we won't even need to transport this monoidal structure anywhere. :-)</p>",
        "id": 205000753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595677622
    },
    {
        "content": "<p>We should make sure we can do pushforwards and pullbacks along morphisms of ringed spaces, which are the same thing as morphisms of spaces equipped with a presheaf of rings</p>",
        "id": 205000867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595677871
    },
    {
        "content": "<p>I think at the presheaf level <code>pushforward</code> has been in place for a while.</p>",
        "id": 205001458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595678930
    },
    {
        "content": "<p>No pullback yet!</p>",
        "id": 205001460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595678938
    },
    {
        "content": "<p>Oh for pullbacks you need tensor again</p>",
        "id": 205001536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595679080
    },
    {
        "content": "<p>So the fundamental question is whether we can get a workable definition of presheaves of modules for which tensor product works</p>",
        "id": 205001588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595679134
    },
    {
        "content": "<p>Sounds like someone should go add the definitions of braided and symmetric categories. :-)</p>",
        "id": 205001600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595679161
    },
    {
        "content": "<p>Then commutative monoid objects in a braided category, then the tensor product on their module objects.</p>",
        "id": 205001614,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595679191
    },
    {
        "content": "<p>that should all be very formal, and hopefully not particularly painful.</p>",
        "id": 205001626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595679209
    },
    {
        "content": "<p>(That said, it is exactly for this stuff that I originally wanted <code>rewrite_search</code>...)</p>",
        "id": 205001629,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595679223
    },
    {
        "content": "<p>So how does all this work? Equality of types is troublesome in type theory, but equality of terms is fine. This is why we don't use the type <code>module R</code> because equality of R-modules is not the right idea, we instead introduce a new type M and have a typeclass <code>module R M</code>. However we can have the category of R-modules, that is a better thing to do somehow. So similarly a sheaf of rings on X shouldn't be a type, we should either put some kind of typeclass structure on a map from opens to rings, or make a category. But is it a good idea to make the typeclass first and then build the category on top?</p>",
        "id": 205003474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595682790
    },
    {
        "content": "<p>I guess we're just firmly committing ourselves to not talking about equalities and only talk about isomorphisms instead.</p>",
        "id": 205003524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595682872
    },
    {
        "content": "<p>I'm confused by your question, Kevin, but it's late, so perhaps I'll try again tomorrow.</p>\n<p>A presheaf of rings on X is functor <code>(opens X)^op \\func Ring</code>. That automatically receives a category instance, with morphisms natural tranformations. The category of sheaves is just defined as the induced category given by forgetting the sheaf condition.</p>",
        "id": 205004885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595685398
    },
    {
        "content": "<p>I'm saying that a presheaf of rings _could_ be a family of types and you could make a typeclass just like we do for modules</p>",
        "id": 205005185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595685877
    },
    {
        "content": "<p>And then you could bundle it to make the category</p>",
        "id": 205005261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595686051
    },
    {
        "content": "<p>And a sheaf of modules could similarly be another function M from opens to Type and then you have a typeclass forall U, abelian group (M U) and then forall U, module (R U) (M U) could be another typeclass</p>",
        "id": 205005389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595686229
    },
    {
        "content": "<p>Is it possible to bundle a typeclass which takes more than one type as input?</p>",
        "id": 205005463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595686325
    },
    {
        "content": "<p>Can we \"bundle <code>module</code>\"?</p>",
        "id": 205005472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595686350
    }
]