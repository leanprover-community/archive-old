[
    {
        "content": "<p>I'm trying to show that the commutative nonzero ring homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>R</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R \\to R/(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> is an isomorphism, by constructing an inverse. I'm doing this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">quo_by_zero_ideal_bij</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"o\">(</span><span class=\"err\">⊥</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">exists_rep</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk_hom</span> <span class=\"o\">(</span><span class=\"err\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>But intuitively I would think that this really should be computable. Is my intuition correct?</p>",
        "id": 198673954,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1590416624
    },
    {
        "content": "<p>Maybe the right thing to do is show that the set of lifts is a singleton and then pick the element from the singleton?</p>",
        "id": 198674097,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1590416684
    },
    {
        "content": "<p>In general you should use <code>quotient.lift</code> to define a function out of a quotient</p>",
        "id": 198674180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590416736
    },
    {
        "content": "<p>Ahh ok! Thanks.</p>",
        "id": 198674218,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1590416762
    },
    {
        "content": "<p>In this case, I shouldn't be surprised if there's already something defined for mapping out of a quotient ring</p>",
        "id": 198674279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590416777
    },
    {
        "content": "<p>Yep there is, found it in ideals.lean</p>",
        "id": 198674323,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1590416794
    },
    {
        "content": "<p>The first isomorphism theorem is probably also there.</p>",
        "id": 198674339,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590416810
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/basic.html#submodule.quot_equiv_of_eq_bot\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/basic.html#submodule.quot_equiv_of_eq_bot</a></p>",
        "id": 198680407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590420791
    },
    {
        "content": "<p>AFAIR ideals are submodules in Lean.</p>",
        "id": 198680426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590420807
    }
]