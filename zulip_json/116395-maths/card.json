[
    {
        "content": "<p>Is there already a function associating to any set its cardinality if it is finite, and 0 otherwise? This would be to enable me to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">∃</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">card</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">17</span>\n</pre></div>\n\n\n<p>without type classes trickery to convince Lean that <code>t</code> is a fintype. I know I can write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">∃</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">17</span>\n</pre></div>\n\n\n<p>but this is not very readable...</p>",
        "id": 157462130,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549188254
    },
    {
        "content": "<p>You can use <code>cardinal.mk</code>, but the result isn't a nat</p>",
        "id": 157462445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549188897
    },
    {
        "content": "<p>It's not hard to define the function you are talking about either... if you define it with enough supporting theorems it seems like a good utility function for mathlib</p>",
        "id": 157462712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549189352
    },
    {
        "content": "<p>OK, I'll prepare something like that (and interface it with finsets, fintypes, and <a href=\"http://cardinal.mk\" target=\"_blank\" title=\"http://cardinal.mk\">cardinal.mk</a>). For the name, what about <code>set.card</code>?</p>",
        "id": 157463238,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549190346
    },
    {
        "content": "<p>it's not really a set thing.. I was just thinking <code>fintype.card'</code></p>",
        "id": 157463414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549190650
    },
    {
        "content": "<p>I guess it has type <code>Type -&gt; nat</code></p>",
        "id": 157463422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549190683
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 157463531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549190934
    },
    {
        "content": "<p>Well, it's not really a <code>fintype</code> thing either, as it applies to all Types an not just fintypes.</p>",
        "id": 157464336,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549192618
    },
    {
        "content": "<p>that's true, although it is defined in terms of fintypes and only actually works on fintypes</p>",
        "id": 157464546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549193035
    },
    {
        "content": "<p><code>roption</code> anyone?</p>",
        "id": 157480635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549222360
    },
    {
        "content": "<p>No point. It still won't be computable, since you need stronger than a proposition. I wouldn't mind the idea of a roption for fintype instead of Prop though.</p>",
        "id": 157480910,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549222827
    },
    {
        "content": "<p>Not sure that would work actually.</p>",
        "id": 157481029,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549223045
    },
    {
        "content": "<p>Finally, I went for <code>cardinal.mk</code>, it works perfectly for what I want to do. Just one question though: I could not find</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mk_eq_mk_iff_nonempty_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">β</span> <span class=\"bp\">↔</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>in the library. Is it because I did not look closely enough, or is it worth adding?</p>",
        "id": 157606577,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549373822
    },
    {
        "content": "<p><code>quotient.eq</code></p>",
        "id": 157606601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549373858
    },
    {
        "content": "<p>Yes, of course!</p>",
        "id": 157606721,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549373990
    },
    {
        "content": "<p>In fact a rewrite along <code>← quotient.eq</code> does not work since there are too many missing type informations. Unless there is a simple solution, I will add the lemma <code>mk_eq_mk_iff_nonempty_equiv</code>.</p>",
        "id": 157608340,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549375511
    },
    {
        "content": "<p>you want to rewrite with this equality? What are you doing with this?</p>",
        "id": 157608483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549375661
    },
    {
        "content": "<p>In <code>cardinal.lean</code> it's pretty much all stuff like <code>refine quotient.sound ⟨function...⟩</code></p>",
        "id": 157608549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549375711
    },
    {
        "content": "<p>I need to use some arbitrary bijection between a given finite set and some <code>fin n</code>, where <code>n</code> is the cardinality of my set. See <a href=\"https://github.com/sgouezel/mathlib/blob/b606163512a103ffa2e5acf335d66089b4fd661b/src/topology/metric_space/gromov_hausdorff.lean#L1345\" target=\"_blank\" title=\"https://github.com/sgouezel/mathlib/blob/b606163512a103ffa2e5acf335d66089b4fd661b/src/topology/metric_space/gromov_hausdorff.lean#L1345\">https://github.com/sgouezel/mathlib/blob/b606163512a103ffa2e5acf335d66089b4fd661b/src/topology/metric_space/gromov_hausdorff.lean#L1345</a></p>",
        "id": 157608800,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549375962
    },
    {
        "content": "<p>choice is really not necessary there... you can just <code>cases</code> on it</p>",
        "id": 157608915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376049
    },
    {
        "content": "<p>I would skip the <code>mk_eq_mk_iff</code> theorem, prove <code>mk s = mk (fin N)</code> using rw like that, and then <code>cases quotient.exact this</code> to get an equiv</p>",
        "id": 157608963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376132
    },
    {
        "content": "<p>Done, thanks.</p>",
        "id": 157609359,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549376549
    }
]