[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, at least the <code>prod</code> instances work perfectly!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">affine</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">V</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"n\">E</span> <span class=\"n\">E₁</span> <span class=\"n\">E₂</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">Vi</span> <span class=\"n\">Ei</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convex_space</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">segment_map</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">prod</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E₁</span> <span class=\"bp\">×</span> <span class=\"n\">E₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">segment_map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">convex_space.segment_map</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x.1</span> <span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"n\">convex_space.segment_map</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x.2</span> <span class=\"n\">y.2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">prod</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">pi</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">convex_space</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ei</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">convex_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">Ei</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">segment_map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">convex_space.segment_map</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pi</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">affine</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">V</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">V₁</span> <span class=\"n\">E₁</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">V₂</span> <span class=\"n\">E₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">Vi</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Vi</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">affine_space</span> <span class=\"o\">(</span><span class=\"n\">Vi</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ei</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">include</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">affine_space.to_convex_space</span> <span class=\"o\">:</span> <span class=\"n\">convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">segment_map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">affine_space.to_convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.add_torsor</span> <span class=\"n\">V₁</span> <span class=\"n\">E₁</span> <span class=\"n\">V₂</span> <span class=\"n\">E₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">prod.convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₁</span> <span class=\"n\">E₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">affine_space.to_convex_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Vi</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Ei</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.module'</span> <span class=\"n\">ι</span> <span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">Vi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.add_torsor</span> <span class=\"n\">ι</span> <span class=\"n\">Vi</span> <span class=\"n\">_</span> <span class=\"n\">Ei</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">pi.convex_space</span> <span class=\"n\">ι</span> <span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">Ei</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">--totally unrelated diamond issue?</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">affine</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">module</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₁</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">Ei</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ei</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">module.to_convex_space</span> <span class=\"o\">:</span> <span class=\"n\">convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">segment_map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">module.to_convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E₁</span> <span class=\"bp\">×</span> <span class=\"n\">E₂</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₁</span> <span class=\"n\">E₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">prod.convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₁</span> <span class=\"n\">E₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">module.to_convex_space</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.module'</span> <span class=\"n\">ι</span> <span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">Ei</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">pi.convex_space</span> <span class=\"n\">ι</span> <span class=\"bp\">𝕜</span><span class=\"n\">i</span> <span class=\"n\">Ei</span> <span class=\"n\">_</span>\n  <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">module</span>\n</code></pre></div>",
        "id": 256866525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633782463
    },
    {
        "content": "<p>This <code>pi</code> instance also works for defeqness with <code>module</code>. I didn't manage to try for <code>affine_space</code> because I seem to be getting another completely unrelated diamond...</p>",
        "id": 256868260,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633784114
    },
    {
        "content": "<p>I've updated the snippet above.</p>",
        "id": 256868401,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633784246
    },
    {
        "content": "<p>And here's the dreaded diamond vector space diamond.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">affine_space.to_convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">module.to_convex_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>It is actually unprovable because I haven't required the two weights to sum up to <code>1</code> in <code>segment_map</code>. Should I add it?</p>",
        "id": 256869133,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633784864
    },
    {
        "content": "<p>Even if you add it, we can't make it <code>rfl</code>.</p>",
        "id": 256873244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633788893
    },
    {
        "content": "<p>And I don't know what to do.</p>",
        "id": 256873260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633788910
    },
    {
        "content": "<p>Yeah, I know we can't, because it requires using <code>h : a + b = 1</code> <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>",
        "id": 256874715,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633790367
    },
    {
        "content": "<p>My point was that at least we could make the instances propeq, because they currently are not (they differ on the junk values of <code>segment_map</code>).</p>",
        "id": 256874799,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633790437
    },
    {
        "content": "<p>If <code>𝕜</code> is a ring there would be no problem, right? You could define <code>segment_map</code> for a <code>module</code> using the same sort of formula as for an <code>affine_space</code> (and then just drop the redundant second argument of <code>segment_map</code> completely)</p>",
        "id": 256877421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633792971
    },
    {
        "content": "<p>Do we really need convex spaces over semirings?</p>",
        "id": 256877584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633793161
    },
    {
        "content": "<p>EDIT: Ah yes, I see what you mean</p>",
        "id": 256877890,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633793460
    },
    {
        "content": "<p>But then there's no point in defining convex spaces anymore.</p>",
        "id": 256877926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633793508
    },
    {
        "content": "<p>I am working on <a href=\"https://github.com/leanprover-community/mathlib/tree/convex_space\">branch#convex_space</a></p>",
        "id": 256878225,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633793799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/256877926\">said</a>:</p>\n<blockquote>\n<p>But then there's no point in defining convex spaces anymore.</p>\n</blockquote>\n<p>I think I'm missing some context on why you're interested in convex spaces in the first place</p>",
        "id": 256878630,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633794235
    },
    {
        "content": "<p>I'm defining convex spaces to be able to generalize convexity to both affine spaces and modules. The convexity refactor generalized convexity to modules, and now we want it in affine spaces.</p>",
        "id": 256878700,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633794299
    },
    {
        "content": "<p>Isn't a module an affine space?</p>",
        "id": 256878823,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633794412
    },
    {
        "content": "<p>Not if it isn't over a ring but just a semiring, that's the point.</p>",
        "id": 256878845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633794445
    },
    {
        "content": "<p>(mathlib's <code>module</code>, mathematicians' semimodule)</p>",
        "id": 256878898,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633794484
    },
    {
        "content": "<p>Well then that gets back to my original question, why do we care about convexity over semirings</p>",
        "id": 256878909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633794492
    },
    {
        "content": "<p>But also, I think there is more than one notion of affine space</p>",
        "id": 256878922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633794504
    },
    {
        "content": "<p>Oh? Is there one that doesn't intrinsically require substraction?</p>",
        "id": 256878947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633794538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/256878909\">said</a>:</p>\n<blockquote>\n<p>Well then that gets back to my original question, why do we care about convexity over semirings</p>\n</blockquote>\n<p>And, for that, ask <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 256879056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633794639
    },
    {
        "content": "<p>There is <a href=\"https://ncatlab.org/nlab/show/affine+space#unbiased_definition\">https://ncatlab.org/nlab/show/affine+space#unbiased_definition</a>. Basically it means you have a \"linear combination\" operation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mi>n</mi></msup><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A^n \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> for each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>∈</mo><msup><mi>k</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">(c_1, \\ldots, c_n) \\in k^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>c</mi><mi>n</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">c_1 + \\cdots + c_n = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, and they have to satisfy the equations expected of general linear combinations.</p>",
        "id": 256879076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633794665
    },
    {
        "content": "<p>Note that under this definition, the empty set would also be considered an affine space unless you explicitly rule it out</p>",
        "id": 256879090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633794689
    },
    {
        "content": "<p>Ah well that's what I'm trying to define here <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 256879095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633794697
    },
    {
        "content": "<p>cf <a href=\"https://ncatlab.org/nlab/show/convex+space\">https://ncatlab.org/nlab/show/convex+space</a></p>",
        "id": 256879254,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633794859
    },
    {
        "content": "<p>In my mind the whole point of an affine space is that it is a homogeneous object which looks everywhere locally like the thing it's modelled on. Additive groups look the same everywhere locally because left or right addition by a fixed element is a bijection, so affine spaces over additive groups are reasonable objects. The definition does not use negation explicitly but it's using it implicitly to make the definition capture the concept which mathematicians are trying to model. If one defines affine spaces over modules then I could imagine that the naive definition is not the useful one because monoids like {0,2,3,4,5,...} look different near 0 to how they look near 37 so you can't be a homogeneous space (another word for affine space) over this object because the object itself isn't homogeneous. </p>\n<p>This reminds me of group actions. The definition of a group action doesn't mention inverses so it can in theory be made for monoids. However if you make it for monoids then there are two possibilities -- a multiplicative map into End(S) or a multiplicative map into Aut(S). For groups these are equivalent but for monoids they are not and so one has to decide which one is the useful one rather than just choosing one randomly because it's just what happens to be what you get if you write down the standard group definition (which doesn't assume actions are invertible because this follows from the group axioms) and then apply it to monoids.</p>",
        "id": 256879875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633795494
    },
    {
        "content": "<p>Part of the confusion is that mathlib (and Kevin) uses \"affine space\" in the sense of a torsor, but in the context of convexity there's another, more obviously relevant notion: something where you can form affine combinations.</p>",
        "id": 256880273,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633795898
    },
    {
        "content": "<p>Yes, totally agreed! All I want is an affine-combinations space.</p>",
        "id": 256880595,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633796198
    },
    {
        "content": "<p>You can have torsors for an abelian group (and probably even more general objects but my rant above is suggesting that they might not be useful objects for monoids) but for this notion of affine space I guess you need a 1? And presumably for semirings it's the same situation --the definition we normally use happens to make sense but it's not clear (at least to me) that it's the useful one if there's no subtraction</p>",
        "id": 256880705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633796296
    },
    {
        "content": "<p>For example any set would be an affine space (in the sense of linear combinations) over the naturals this way, right?</p>",
        "id": 256880762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633796367
    },
    {
        "content": "<p>Any torsor for an abelian group is an affine space (in the sense of linear combinations) over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span></p>",
        "id": 256880768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633796374
    },
    {
        "content": "<p>Right, affine spaces over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> is just the trivial theory (maybe plus the assumption that it is nonempty)</p>",
        "id": 256880871,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633796478
    },
    {
        "content": "<p>Is that actually used though?</p>",
        "id": 256880881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633796494
    },
    {
        "content": "<p>But then affine spaces over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\ge 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> are the convex spaces.</p>",
        "id": 256880884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633796498
    },
    {
        "content": "<p>I see!</p>",
        "id": 256880894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633796514
    },
    {
        "content": "<p>Yeah, anything is a convex space over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>, and every set is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>-convex.</p>",
        "id": 256880950,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633796541
    },
    {
        "content": "<p>So you could do that, but it doesn't really matter because you could also define \"convex space\" directly with the nonnegativity assumption built in, and of course <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\ge 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> is the positive cone of a ring.</p>",
        "id": 256880976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633796581
    },
    {
        "content": "<p>Is there a use for convex spaces which aren't subspaces of something sensible like a torsor for a real vector space?</p>",
        "id": 256881003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633796612
    },
    {
        "content": "<p>The nLab page has <a href=\"https://ncatlab.org/nlab/show/convex+space#examples\">examples</a>, apparently being embeddable in a torsor for a vector space is a kind of \"cancellability\" condition.</p>",
        "id": 256881077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633796682
    },
    {
        "content": "<p>Yeah, precisely because you get negation.</p>",
        "id": 256881093,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633796703
    },
    {
        "content": "<p>The question I think is whether there is a use where the <em>free</em> convex spaces (i.e. the spaces parameterizing convex linear combinations) are themselves not embeddable in a module over a ring, and this is what I'm skeptical about</p>",
        "id": 256881235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633796834
    },
    {
        "content": "<p>so basically, convexity over a noncancellative semiring</p>",
        "id": 256881333,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633796918
    },
    {
        "content": "<p>This I have no idea. But we can definitely come up with examples. What about <code>ennreal</code>-convexity, for example?</p>",
        "id": 256881488,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633797090
    },
    {
        "content": "<p>it's the same as ordinary convexity, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span> doesn't lie in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 256881545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633797127
    },
    {
        "content": "<p>So what I said above wasn't a precise characterization, it's more like just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>⊂</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">[0, 1] \\subset R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> has to be cancellative in some sense, or something.</p>",
        "id": 256881622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633797234
    },
    {
        "content": "<p>For context, Yakov was interested in tropical geometry, where the usual stuff happens in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb R_{\\ge 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 256881825,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633797416
    },
    {
        "content": "<p>But this is cancellative so the pathologies (non-homogeneity) I was concerned about don't show up.</p>",
        "id": 256881861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633797451
    },
    {
        "content": "<p>So I guess this could be converted to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-convexity, but at the price of coercing everywhere.</p>",
        "id": 256881877,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633797473
    },
    {
        "content": "<p>By <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-convexity do you mean the useless notion (must be able to do <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>v</mi><mo>+</mo><mi>b</mi><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">av+bw</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a+b=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> with no positivity constraints, so it's just an affine space) or the usual notion?</p>",
        "id": 256881969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633797535
    },
    {
        "content": "<p>I meant the usual one</p>",
        "id": 256881974,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633797544
    },
    {
        "content": "<p>Also when people talk about convexity in tropical geometry, I think they mean convexity in the usual sense (involving the usual multiplication on the reals), right?</p>",
        "id": 256882718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633798257
    },
    {
        "content": "<p>Apparently not. <a href=\"https://arxiv.org/pdf/math/0308254.pdf\">https://arxiv.org/pdf/math/0308254.pdf</a></p>",
        "id": 256882846,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633798369
    },
    {
        "content": "<p>And the tropical semiring is most definitely <strong>not</strong> cancellative.</p>",
        "id": 256882864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633798397
    },
    {
        "content": "<p>What are you referencing specifically?</p>",
        "id": 256882889,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633798429
    },
    {
        "content": "<p>Their definition of \"tropical convexity\"</p>",
        "id": 256882962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633798498
    },
    {
        "content": "<p>Really?</p>",
        "id": 256882999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633798540
    },
    {
        "content": "<p><code>𝕜</code>-tropical convexity is precisely <code>tropical 𝕜</code>-convexity.</p>",
        "id": 256883003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633798542
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/wBAgpLnC1YrZ0cM-mf17A0Jj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wBAgpLnC1YrZ0cM-mf17A0Jj/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/wBAgpLnC1YrZ0cM-mf17A0Jj/image.png\"></a></div>",
        "id": 256883011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633798559
    },
    {
        "content": "<p>This one?</p>",
        "id": 256883060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633798580
    },
    {
        "content": "<p>Yeah</p>",
        "id": 256883080,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633798607
    },
    {
        "content": "<p>I am not quite sure of what happened to <code>a + b = 1</code>.</p>",
        "id": 256883209,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633798725
    },
    {
        "content": "<p>How so?</p>",
        "id": 256883212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633798728
    },
    {
        "content": "<p>Theorically, <code>1 : tropical 𝕜</code>is <code>0 : 𝕜</code>, so it should translate to <code>min a b = 0</code>, which isn't the case here?</p>",
        "id": 256883269,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633798801
    },
    {
        "content": "<p>It seems much more like being a <code>tropical 𝕜</code>-module, right?</p>",
        "id": 256883338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633798817
    },
    {
        "content": "<p>Yeah actually</p>",
        "id": 256883359,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633798824
    },
    {
        "content": "<p>If you're used to thinking about vector spaces, then you might be surprised by the notion of \"module over a ring\" which allows weird non-free modules, but that doesn't mean it's not a good notion</p>",
        "id": 256887588,
        "sender_full_name": "David Wärn",
        "timestamp": 1633802674
    },
    {
        "content": "<p>I would assume that this unbiased notion of affine combination space is also the good one for general semirings</p>",
        "id": 256887636,
        "sender_full_name": "David Wärn",
        "timestamp": 1633802740
    },
    {
        "content": "<p>Is there a reason to believe it's not?</p>",
        "id": 256887709,
        "sender_full_name": "David Wärn",
        "timestamp": 1633802807
    },
    {
        "content": "<p>That's where I'm coming from, indeed.</p>",
        "id": 256888457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633803522
    },
    {
        "content": "<p>But the monoid action is an example where the naive approach (\"just copy the axioms for a group action\") gives you something which you might not want, because you have to add the extra axiom that m*_ is bijective, which is automatic in the group case.</p>",
        "id": 256888721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633803758
    },
    {
        "content": "<p>Put another way, there are two definitions of group action, both of which make sense for monoids and give different structures</p>",
        "id": 256888842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633803848
    },
    {
        "content": "<p>Right, but why would you require m* to be bijective? It's like saying modules have to be free</p>",
        "id": 256889509,
        "sender_full_name": "David Wärn",
        "timestamp": 1633804461
    },
    {
        "content": "<p>I'm saying that I've seen the definition of a group action on a set given as being a multiplicative map from G to Aut(S) and I'm observing that this definition makes sense for monoids, and I'm deducing that just because a random mathlib definition makes sense in some larger generality doesn't mean it's the \"correct\" definition in some larger generality, and the proof is that there are two definitions of a group action both of which make sense for monoids and become different concepts</p>",
        "id": 256890926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633805835
    },
    {
        "content": "<p>The definition of monoid actions definitely doesn't ask for bijective maps.</p>",
        "id": 256891048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633805952
    },
    {
        "content": "<p>Sure</p>",
        "id": 256891076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633805992
    },
    {
        "content": "<p>But you can't deduce from this that an arbitrary definition which makes sense in more generality is \"correct\" in that greater generality</p>",
        "id": 256891181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633806033
    },
    {
        "content": "<p>And my argument gives a proof that this can't always be true</p>",
        "id": 256891189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633806045
    },
    {
        "content": "<p>Another reason to talk about convexity in <code>nnreal</code>-semimodules: the set of invariant measures of a map is convex.</p>",
        "id": 256891445,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633806299
    },
    {
        "content": "<p>Ahah! This example is interesting because one thing we forgot is that having negative elements in the base (semi)ring also affects the space. That's because an <code>add_comm_monoid</code> acted on by a <code>ring</code> through <code>module</code> is promotable to an <code>add_comm_group</code>, negation in the space being <code>-1 • x</code>.</p>",
        "id": 256892318,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633807106
    },
    {
        "content": "<p>So, by forcing the scalars to be a <code>ring</code> , we a fortiori force the space to be an <code>add_comm_group</code>.</p>",
        "id": 256892365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633807169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/256891181\">said</a>:</p>\n<blockquote>\n<p>But you can't deduce from this that an arbitrary definition which makes sense in more generality is \"correct\" in that greater generality</p>\n</blockquote>\n<p>Sure, you can't deduce that \"unbiased affine combination space\" is a good notion just because it specializes to give affine spaces over fields. But still, I think it's definitely a good notion. For example, it specializes to give both the usual affine spaces and convex spaces, the category of such spaces is monadic over Type (so it's a nice algebraic notion), it has a forgetful functor from the category of semimodules, and you get the usual restriction-of-scalar functors (which is to say that you'll get lots of examples of these spaces). What's there not to like? In general this kind of space won't be a torsor for some semimodule, but I think this is just like how modules aren't generally free, and rings don't generally have unique factorisation (i.e., it's not  necessarily a sign that you have the wrong notion).</p>",
        "id": 256893393,
        "sender_full_name": "David Wärn",
        "timestamp": 1633808125
    },
    {
        "content": "<p>If you've put some thought into it and understand that it's the correct definition then that's fine :-) My point is only that this needs to be done. Thanks for doing it :-)</p>",
        "id": 256902557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633817319
    },
    {
        "content": "<p>Should I understand that I have your blessing for defining them? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> How should they be called?</p>",
        "id": 256930066,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633847314
    },
    {
        "content": "<p>You could say <code>affine_combination_space</code> to distinguish from the torsor <code>affine_space</code>, but it's a mouthful</p>",
        "id": 256981244,
        "sender_full_name": "David Wärn",
        "timestamp": 1633896913
    },
    {
        "content": "<p>Is <code>convex_space</code> fine?</p>",
        "id": 256981350,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633896972
    },
    {
        "content": "<p>What do you mean by <code>convex_space</code>?</p>",
        "id": 256981373,
        "sender_full_name": "David Wärn",
        "timestamp": 1633897005
    },
    {
        "content": "<p>The above</p>",
        "id": 256981386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633897018
    },
    {
        "content": "<p>What's bothering me with this name is that we never have to restrict to positive coefficients.</p>",
        "id": 256981412,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633897045
    },
    {
        "content": "<p>So an affine combination space over a semiring <code>R</code>?</p>",
        "id": 256981418,
        "sender_full_name": "David Wärn",
        "timestamp": 1633897054
    },
    {
        "content": "<p>Yeah</p>",
        "id": 256981422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633897059
    },
    {
        "content": "<p>It's a nice name I suppose, but maybe a bit misleading since <code>R</code> can have negative elements</p>",
        "id": 256981538,
        "sender_full_name": "David Wärn",
        "timestamp": 1633897158
    },
    {
        "content": "<p>To be clear, I'm not at all an expert on this, and agree that it's not clear what the best definition to formalise is. After thinking about this some more, my armchair understanding is that affine combination space isn't a very good notion for <em>every</em> semiring <code>R</code>, although it makes sense when <code>R</code> is a ring, or has enough multiplicative inverse (like <code>nnreal</code>). It was pointed out above that every set is an affine combination space over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> in a unique way. But in fact there is a sensible notion of convex subsets in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-modules like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Z^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, which you can use also to define convex functions (those for which the upper graph is convex); you just won't get it from thinking about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Z^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> as an affine combination space over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>.</p>\n<p>In this situation, you might prefer to use  something like the \"slice category\" definition mention on nlab. Namely, say an affine space over a semiring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-semimodule <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> together with a linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>:</mo><mi>P</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">w : P \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>. Think of an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> as a kind of weighted sum, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> as giving its weight, so really <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>w</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">w^{-1}(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is what you would normally think of as the underlying type of an affine space, but if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> doesn't have enough multiplicative inverses then this type doesn't tell you very much about all of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>. Now you get a \"forgetful functor\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>↦</mo><mi>M</mi><mo>×</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">M \\mapsto M \\times R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> from semimodules to affine spaces. Taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">R = \\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>, I believe you can understand convex subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Z^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> in terms of the \"underlying\" affine space.</p>",
        "id": 256982639,
        "sender_full_name": "David Wärn",
        "timestamp": 1633898104
    },
    {
        "content": "<p>With that definition, would <code>{0, 2}</code> be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-convex in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>?</p>",
        "id": 256983349,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633898776
    },
    {
        "content": "<p>I haven't been following this discussion at all, but I do think it's worthwhile to mention that the axioms of a convex space (or whatever you want to call it) can be formalized as an abstract algebraic gadget, without reference to any ring or semirng.<br>\nEssentially, consider a commutative monoid with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, endowed with a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>:</mo><mi>R</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma : R \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mn>3</mn></msup><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R^3 \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> denoted <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><msub><mi>C</mi><mi>x</mi></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,a,b) \\mapsto C_x(a,b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span>. Think of this as a signature (in the sense of first order logic), and consider the axioms appearing in <a href=\"https://ncatlab.org/nlab/show/convex-space\">nlab#convex-space</a> which can all be written down without reference to any (semi)ring, given the data above (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> should take the place of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>−</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">1-t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>), together with axioms like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sigma(1) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma(\\sigma(t)) = t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>.</p>",
        "id": 256983980,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633899456
    },
    {
        "content": "<p>(I don't know if these axioms actually give the same theory that's satisfied by all rings, but it's certainly contained in there.)</p>",
        "id": 256984222,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633899655
    },
    {
        "content": "<p>I see that the focus moved to \"what is the right super-general definition?\". I think that instead of this we should decide what example do we care about, then write a definition that will work in these cases. Whoever starts caring about a use case not covered by the current definition may refactor.</p>",
        "id": 256984237,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633899672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> How exactly do you suggest to encode this in Lean?</p>",
        "id": 256984257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633899702
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">cing</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid_with_zero</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"kd\">axioms</span>\n</code></pre></div>",
        "id": 256984330,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633899748
    },
    {
        "content": "<p>That's what I started doing on <a href=\"https://github.com/leanprover-community/mathlib/tree/convex_space\">branch#convex_space</a>, right?</p>",
        "id": 256984338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633899754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> And what is a <code>convex_space</code>?</p>",
        "id": 256984364,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633899788
    },
    {
        "content": "<p>I haven't yet gone through all the axioms, but this is certainly where I was heading.</p>",
        "id": 256984366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633899789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/256984338\">said</a>:</p>\n<blockquote>\n<p>That's what I started doing on <a href=\"https://github.com/leanprover-community/mathlib/tree/convex_space\">branch#convex_space</a>, right?</p>\n</blockquote>\n<p>It looks like you're working with semirings, rigght?</p>",
        "id": 256984367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633899789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/256984364\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> And what is a <code>convex_space</code>?</p>\n</blockquote>\n<p>The analogue of a module over a <code>cing</code></p>",
        "id": 256984376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633899803
    },
    {
        "content": "<p>Only because they give me a <code>1</code>. I could relax to <code>add_monoid</code> + <code>has_one</code>.</p>",
        "id": 256984385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633899816
    },
    {
        "content": "<p>Well, I want, e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\sigma(0) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> to be such a gadget as well... no addition necessary</p>",
        "id": 256984442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633899848
    },
    {
        "content": "<p>Wait sorry what's a <code>cing</code>? <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span></p>",
        "id": 256984447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633899859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Is there any specific example you care about where this generality is important?</p>",
        "id": 256984465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633899887
    },
    {
        "content": "<p>This is the smallest reasonable algebraic theory where one can define the analogue of Milnor K-theory, but I don't know if anything meaningful can be said about such gadgets in the abstract</p>",
        "id": 256984507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633899926
    },
    {
        "content": "<p>I have these examples in my head:</p>\n<ul>\n<li>real vector spaces;</li>\n<li>vector spaces over rational numbers;</li>\n<li>affine spaces over real or rational numbers;</li>\n<li><code>nnreal</code>-semimodules, including measures.</li>\n</ul>",
        "id": 256984577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633899978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/256984465\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> Is there any specific example you care about where this generality is important?</p>\n</blockquote>\n<p>The interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> would also be an example.</p>",
        "id": 256984583,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633899984
    },
    {
        "content": "<p>I'm talking about convex spaces, not instances of <code>cing</code>.</p>",
        "id": 256984620,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633900034
    },
    {
        "content": "<p>I assume going from my definition of convex space to your abstract gadgets is a rather independent step, right?</p>",
        "id": 256984627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633900042
    },
    {
        "content": "<p>Ah, well I think \"modules\" over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> in this sense should be the usual convex spaces (well, maybe there would be some weird quotients)</p>",
        "id": 256984654,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633900074
    },
    {
        "content": "<p>I don't think that we should generalize for the sake of generalization.</p>",
        "id": 256984705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633900089
    },
    {
        "content": "<p>I'm not against it, but clearly refactoring from semimodules to convex/unbiased affine spaces is gonna be some sleepless nights already.</p>",
        "id": 256984706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633900092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/256984705\">said</a>:</p>\n<blockquote>\n<p>I don't think that we should generalize for the sake of generalization.</p>\n</blockquote>\n<p>Category-theory-phobic <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 256984741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633900132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> The main problem I see with any definition is that once we have a theory that covers both modules over <code>nnreal</code>s and real affine spaces, we get a diamond for real vector spaces.</p>",
        "id": 256984768,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633900166
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, I agree, this would not solve any diamond issues.</p>",
        "id": 256984782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633900191
    },
    {
        "content": "<p>(Sorry, i have to run! I would be happy to discuss this laterr!)</p>",
        "id": 256984837,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633900208
    },
    {
        "content": "<p>Well, there's no way around that diamond. So why not go for it anyway? Having a theory accessible through a def is better than not having it at all.</p>",
        "id": 256984880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633900259
    },
    {
        "content": "<p>Wait, once we have <code>convex_space</code>, what would be the point of <code>affine_space</code>? Maybe we can generalize the definition of <code>affine_space</code> rather than defining a new class.</p>",
        "id": 257041634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633947102
    },
    {
        "content": "<p>Yes, it might be a good idea to change the definition of <code>affine_space</code> to be an affine combination space. You would get a different API, since you wouldn't have an unbundled vector space parameter. Instead you could define \"the module associated to an affine space\", and prove that any nonempty affine space over a ring is a torsor for this module.</p>",
        "id": 257045190,
        "sender_full_name": "David Wärn",
        "timestamp": 1633949100
    },
    {
        "content": "<p>BTW, this will solve the diamond. We can have a definition (not an instance) <code>add_torsor.to_affine_space</code> and a type class saying that add torsor and affine space structures agree.</p>",
        "id": 257106594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633980268
    },
    {
        "content": "<p>BTW, this will solve the diamond. We can have a definition (not an instance) <code>add_torsor.to_affine_space</code> and a type class saying that add torsor and affine space structures agree.</p>",
        "id": 257106595,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633980268
    },
    {
        "content": "<p>But this is a large refactor</p>",
        "id": 257106596,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633980268
    },
    {
        "content": "<p>And you shouldn't add an instance of add torsor with a manually constructed module because the additive group in the definition of add torsor is an out param</p>",
        "id": 257106758,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633980363
    },
    {
        "content": "<p>What do you plan to use as the basic operation in the new <code>affine_space</code>? Something like <code>Π (x y : R), x + y = 1  → P → P → P</code>?</p>",
        "id": 257115751,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633985852
    },
    {
        "content": "<p>Or <code>affine_comb (f : P →₀ R) (hf : f.sum id = 1) : P</code>?</p>",
        "id": 257131895,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633997705
    },
    {
        "content": "<p>I think the laws are (a lot?) easier to state for the second form</p>",
        "id": 257132464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633998189
    },
    {
        "content": "<p>In the first form the axioms will be similar to those in <a href=\"https://ncatlab.org/nlab/show/convex+space#definition\">https://ncatlab.org/nlab/show/convex+space#definition</a></p>",
        "id": 257134433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633999993
    },
    {
        "content": "<p>But building <code>affine_comb</code> from the binary operation is not trivial.</p>",
        "id": 257134510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634000044
    },
    {
        "content": "<p>Note that the vast bulk of lemmas about <code>affine_space</code> are really lemmas about <code>add_torsor</code> for a module (they involve vectors, they don't involve affine combinations), and, similarly, most of the lemmas about <code>affine_subspace</code> are really about a sub-torsor as they also involve vectors (constrained so that the subgroup is a submodule). So if you redefine <code>affine_space</code>, existing lemmas (that currently use the <code>affine_space</code> notation) should probably change to be about <code>add_torsor</code> and something similar should be done for renaming <code>affine_subspace</code>.</p>",
        "id": 257137479,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1634002653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/257106596\">said</a>:</p>\n<blockquote>\n<p>But this is a large refactor</p>\n</blockquote>\n<p>I have time to spare. I'm a Cambridge student <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 257158569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634022363
    },
    {
        "content": "<p>So are we heading towards changing <code>affine_space</code> from an abbreviation of <code>add_torsor</code> to an unbiased affine space?</p>",
        "id": 257158719,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634022474
    },
    {
        "content": "<p>The definition of a monoid action will imply that invertible elements map to invertible elements, because it maps the unit element of the monoid to identity. But think of a semigroup action, where semigroups are just associative laws, possibly without unit — then a group action would not be a semigroup action of a group. </p>\n<p>Similar question : a monoid action can be defined either as a map $M\\times X \\to X$ (plus axioms) or as a morphism of monoids from $M$ to the monoid of self-maps of $X$. For mathematicians, both are rapidly equivalent, and we switch from one to another (Bourbaki has a stylistic convention, speaks of action and of operation), but for automatic formalization, how are the two reconciled?  </p>\n<p>And for actions of topological monoids, the first definition is the good one, namely, the continuity of the map $M\\times X\\to X$, because for most applications, eg, representations of topological groups on Hilbert spaces, the map $M\\to \\operatorname{Aut}(X)$ is not continuous.</p>",
        "id": 257493827,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1634197862
    },
    {
        "content": "<p>(Tip: Zulip needs double <code>$$</code>s around maths.)<br>\nWe tend to focus on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>×</mo><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">M × X → X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> approach. It can be easily combined with nice notation, and works well together with forgetting structure. (E.g. a module is a monoid action. And it is the <em>exact</em> same map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>×</mo><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">M × X → X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, but for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><mtext>End</mtext><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M → \\text{End}(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">End</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> you would need to change the version of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>End</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{End}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">End</span></span></span></span></span> that you are considering.)</p>",
        "id": 257494167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634198073
    },
    {
        "content": "<p>I lost track of the discussion. Can someone explain me what I should do?</p>",
        "id": 257508014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634204849
    },
    {
        "content": "<p>I think you should define unbiased affine combination spaces over a semiring <code>R</code>, and call it <code>affine_space R</code></p>",
        "id": 257508632,
        "sender_full_name": "David Wärn",
        "timestamp": 1634205196
    },
    {
        "content": "<p><code>affine_space R P</code>, rather?</p>",
        "id": 257508675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634205231
    },
    {
        "content": "<p>I mean something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">affine_space'</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">affine_comb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→₀</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"c1\">-- more axioms</span>\n</code></pre></div>",
        "id": 257509022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634205418
    },
    {
        "content": "<p>Do you know what axioms I need?</p>",
        "id": 257509083,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634205456
    },
    {
        "content": "<p>You want an \"associativity axiom\", which says that an affine combination of affine combinations is ... some affine combination. And a \"unitality\" axiom which says that if you combine just one point with weight one, you get that point</p>",
        "id": 257509209,
        "sender_full_name": "David Wärn",
        "timestamp": 1634205517
    },
    {
        "content": "<p>Is that it?</p>",
        "id": 257509235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634205533
    },
    {
        "content": "<p>I think so. This is a general way of stating axioms for algebraic theories (you just have the two axioms for algebras over a monad)</p>",
        "id": 257509481,
        "sender_full_name": "David Wärn",
        "timestamp": 1634205641
    },
    {
        "content": "<p>Okay. And what about this?<br>\n<span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20space/near/257106595\">said</a>:</p>\n<blockquote>\n<p>BTW, this will solve the diamond. We can have a definition (not an instance) <code>add_torsor.to_affine_space</code> and a type class saying that add torsor and affine space structures agree.</p>\n</blockquote>",
        "id": 257509611,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634205720
    },
    {
        "content": "<p>The associativity axiom is going to be quite painful expressed in terms of finitely supported functions!</p>",
        "id": 257510443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634206155
    },
    {
        "content": "<p>It would be much easier to state in terms of indexing types.</p>",
        "id": 257510499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634206189
    },
    {
        "content": "<p>Do you mean <code>affine_comb (ι : Type*) (f : ι →₀ 𝕜) (hf : f.sum (λ x, id) = 1) : E</code> or <code>affine_comb (ι : Type*) [fintype ι] (f : ι → 𝕜) (hf : ∑ x : ι, f x = 1) : E</code>?</p>",
        "id": 257510750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634206326
    },
    {
        "content": "<p>I think you need something more complicated: you need an indexing type, and both a function into k and a function into E</p>",
        "id": 257510979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634206464
    },
    {
        "content": "<p>(to tell you the weights, and the points)</p>",
        "id": 257510986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634206472
    },
    {
        "content": "<p>It's still going to be a little awkward with indexing types for universe reasons</p>",
        "id": 257511056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634206513
    },
    {
        "content": "<p>Oh yeah of course. I mean, this is really about putting <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.center_mass\">docs#finset.center_mass</a> (or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.affine_combination\">docs#finset.affine_combination</a>) inside the typeclass.</p>",
        "id": 257511298,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634206651
    },
    {
        "content": "<p>Maybe, since the type is finite anyways, you should use <code>Type</code></p>",
        "id": 257511305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634206657
    },
    {
        "content": "<p>I guess you can define a universe-polymorphic <code>affine_comb</code> after the fact</p>",
        "id": 257511443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634206740
    },
    {
        "content": "<p>By the same logic, you could just use <code>fin n</code> as the indexing type but then it's again a little awkward to state associativity</p>",
        "id": 257511694,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634206895
    },
    {
        "content": "<p>I don't think it's too bad in terms of finsupp. Here's the statement of associativity, modulo two sorries (edit: hopefully it's right this time)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">v.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">v.val.map_domain</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">v.val.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">w.val</span><span class=\"o\">),</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">associativity</span> <span class=\"o\">(</span><span class=\"n\">comb</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">comb</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">comb</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">comb</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257512046,
        "sender_full_name": "David Wärn",
        "timestamp": 1634207066
    },
    {
        "content": "<p>For the convex version we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pmf\">docs#pmf</a>, though it's limited to <code>real</code></p>",
        "id": 257512386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634207243
    },
    {
        "content": "<p>Given that <code>affine_space</code> is used quite widely, what do you think of first defining <code>affine_space'</code> and slowly refactor? Or do you prefer that I instead first rename all the <code>affine_space</code> to <code>add_torsor</code>?</p>",
        "id": 257560395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634227442
    },
    {
        "content": "<p>You definitely need to define some kind of <code>def</code> for affine combinations (separate from that appearing in the type class) after the fact, even apart from any universe issues with index types, simply to get a version which is a bundled affine map (whatever form of affine maps makes sense with this affine space definition; I suppose that's maps that preserve affine combinations, with the linkage to linear maps then becoming something defined only for the type class that asserts propositional equality between the affine combinations in the definition and the affine combinations derived from the <code>add_torsor</code> structure).</p>",
        "id": 257626860,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1634256770
    }
]