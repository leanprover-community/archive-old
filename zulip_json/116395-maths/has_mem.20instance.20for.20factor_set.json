[
    {
        "content": "<p>I'm trying to add a <code>has_mem</code> instance for <code>factor_set</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">unique_factorization_domain</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">associates</span>\n<span class=\"kn\">open</span> <span class=\"n\">unique_factorization_domain</span> <span class=\"n\">associated</span>\n\n<span class=\"n\">def</span> <span class=\"n\">factor_set_mem</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">factor_set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">factor_set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">factor_set_mem</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_factor_set_some&#39;</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span> <span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">ll</span> <span class=\"o\">:</span> <span class=\"n\">factor_set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ll</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">):</span>\n  <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"n\">ll</span> <span class=\"bp\">↔</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_factor_set_some&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span> <span class=\"o\">}}</span> <span class=\"o\">:</span>\n  <span class=\"n\">factor_set_mem</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">factor_set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_factor_set_some</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span> <span class=\"o\">}}:</span>\n  <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"o\">((</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">factor_set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">associates</span>\n</code></pre></div>\n\n\n<p>In my <code>mem_factor_set_some</code> lemma the first <code>∈</code> gives me a <code>failed to synthesize type class instance for</code> <code>has_mem {p // irreducible p} (option (multiset {a // irreducible a}))</code> error. The single primed and double primed versions of <code>mem_factor_set_some</code> works, so I don't think I'm messing something up, but of course they are not what we would want. Is there some way of helping lean understand what we want the <code>∈</code> to mean?</p>\n<p>Thanks in advance for any help!</p>",
        "id": 209959328,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1600048726
    },
    {
        "content": "<p>Isn't there a coercion that's supposed to be used? (I don't know this part of the library too well.)<br>\nOr is <code>some l</code> the intended way of moving between the multiset and the factor_set?</p>",
        "id": 209967817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600063588
    },
    {
        "content": "<p>I think what's going on here is the elaborator checks <code>((some l) : factor_set α)</code>, sees it doesn't make sense, and does unfolding to get <code>((some l) : roption (multiset _))</code>. Satisfied that this makes sense, it processes <code>subtype.mk p hp ∈ ((some l) : roption (multiset _))</code>, the typeclass inference system doesn't know anything about <code>roption</code> and it fails.</p>\n<p>I can't find an instance for <code>has_coe α (roption α)</code>, only for <code>has_coe (option α) (roption α)</code>. Coercing would solve the issue because the elaborator doesn't have to unfold <code>factor_set</code>.</p>",
        "id": 209984514,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1600077687
    },
    {
        "content": "<p>Why does <code>((some l) : factor_set α)</code> not make sense? <code>factor_set</code> is <code>with_top</code> and <code>with_top</code> is <code>option</code> and <code>option</code> is by definition <code>none</code> or <code>some</code>, so I thought <code>some  l</code> is by definition a <code>factor_set</code>. How does <code>roption</code> come into the picture? Very confused!<br>\nHere are the definitions:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">factor_set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">with_top</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span> <span class=\"o\">})</span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">with_top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">option</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span>\n</code></pre></div>",
        "id": 209994182,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1600084568
    },
    {
        "content": "<p>I don't understand why but</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mem_factor_set_some</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span> <span class=\"o\">}}:</span>\n  <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">factor_set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>\n\n\n<p>works...</p>",
        "id": 209994272,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1600084665
    },
    {
        "content": "<p>I think this is unituitive but expected behaviour in Lean. My understanding (which might be wrong) is this: when the kernel sees <code>a : B</code> it checks that <code>a</code> could be thought of as having type definitionally equal to <code>B</code>, but this does not guarantee that <code>a</code> will be thought of as having type <em>syntactically</em> equal to <code>B</code> in any further calculations.</p>",
        "id": 210002663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600089498
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">to_with_top</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_factor_set_some</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span> <span class=\"o\">}}:</span>\n  <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">to_with_top</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">factor_set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210009514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600092385
    },
    {
        "content": "<p>As I’m refactoring <code>unique_factorization_domain</code>, I have to ask, what really is the point of <code>factor_set</code>?</p>",
        "id": 210028686,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600100291
    },
    {
        "content": "<p>The only place it’s used by something else is for putting a <code>gcd_monoid</code> instance on ufds.</p>",
        "id": 210028786,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600100329
    },
    {
        "content": "<p>It’s useful for that construction because <code>factors’</code> is actually order-preserving, but the exact implementation could change easily</p>",
        "id": 210029168,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600100506
    }
]