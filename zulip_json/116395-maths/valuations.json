[
    {
        "content": "<p>Both the Fibonacci Squares project and the Adic Space project need valuations on rings -- one in rather more generality than the other. But let's start at the beginning. Does Lean have p-adic valuations on Z? In other words, is the function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mo>⋅</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">v_p(\\cdot)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">⋅</span><span class=\"mclose\">)</span></span></span></span> on the non-zero integers (or even rationals) sending <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>p</mi><mi>n</mi></msup><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">p^nN</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> (with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> coprime to the prime <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span>) to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span></span></span></span>? The key theorems are <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mi>a</mi><mi>b</mi><mo>)</mo><mo>=</mo><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mi>a</mi><mo>)</mo><mo>+</mo><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mi>b</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">v_p(ab)=v_p(a)+v_p(b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mclose\">)</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>)</mo><mo>≥</mo><mi>min</mi><mo>{</mo><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mi>a</mi><mo>)</mo><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mi>b</mi><mo>)</mo><mo>}</mo></mrow><annotation encoding=\"application/x-tex\">v_p(a+b)\\geq\\min\\{v_p(a),v_p(b)\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mbin\">+</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span><span class=\"mrel\">≥</span><span class=\"mop\">min</span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mn>0</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">v_p(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathrm\">0</span><span class=\"mclose\">)</span></span></span></span> is usually taken to be <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.58333em;\"></span><span class=\"strut bottom\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\">+</span><span class=\"mord mathrm\">∞</span></span></span></span>).</p>",
        "id": 127105553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527288449
    },
    {
        "content": "<p>Perfectoid space valuations would take values in a certain kind of totally ordered monoid</p>",
        "id": 127105607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527288511
    },
    {
        "content": "<p>(and are of a slightly different nature -- they are really norms not valuations, so the total function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mo>↦</mo><msup><mi>p</mi><mrow><mo>−</mo><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mi>M</mi><mo>)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M \\mapsto p^{-v_p(M)}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.0824399999999998em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mrel\">↦</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285716em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2818857142857143em;\"></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathit mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> with target the non-negative reals would be an example).</p>",
        "id": 127105620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527288588
    },
    {
        "content": "<p>I have approximately this lying around somewhere</p>",
        "id": 127106671,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527290435
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea\">https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea</a></p>",
        "id": 127106845,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527290853
    },
    {
        "content": "<p>I guess <code>ord_add</code> is missing, but it should be easy to prove from the other stuff</p>",
        "id": 127106894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527290932
    },
    {
        "content": "<p>line 91 should now be</p>",
        "id": 127107157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527291448
    },
    {
        "content": "<p><code>         ...   = p * (p^r * k)   : by unfold pow nat.pow; ac_refl,</code></p>",
        "id": 127107159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527291452
    },
    {
        "content": "<p>[adding pow, probably because of some relatively recent change with <code>^</code>]</p>",
        "id": 127107162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527291467
    },
    {
        "content": "<p>Thanks so much! This is exactly what I wanted!</p>",
        "id": 127107276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527291622
    },
    {
        "content": "<p>What a great little community we are getting here!</p>",
        "id": 127107285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527291633
    },
    {
        "content": "<p>I'm just going to dump it in a subdirectory in my project called <code>Reid_Barton</code>. Is that OK?</p>",
        "id": 127107301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527291709
    },
    {
        "content": "<p>Is there a better way of doing things?</p>",
        "id": 127107340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527291724
    },
    {
        "content": "<p>Sure, no problem.<br>\nThe better way is probably to try to PR things into mathlib, but that's more effort.</p>",
        "id": 127107625,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527292381
    },
    {
        "content": "<p><code>example : has_le (ℕ+) := by apply_instance -- fails</code></p>",
        "id": 127107925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527292978
    },
    {
        "content": "<p>Noticed this along the way. You've not proved the valuation of a + b but you've proved everything but. I've never worked with <code>\\N+</code> before.</p>",
        "id": 127107937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293013
    },
    {
        "content": "<p>Is there a good reason for not having le on <code>\\N+</code>? I am making a little collection of random short mathlib proposals. I understand how mathlib works much better after my schemes exercise.</p>",
        "id": 127107991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293089
    },
    {
        "content": "<p>I doubt there is any good reason. <code>pnat</code> isn't used that much, it seems. I remember finding it a little more annoying to use than I would have liked</p>",
        "id": 127108119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527293374
    },
    {
        "content": "<p>Particularly as there are coercions in both directions between <code>nat</code> and <code>pnat</code></p>",
        "id": 127108122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527293397
    },
    {
        "content": "<p>Is <code>ord_pow</code> broken?</p>",
        "id": 127108166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293426
    },
    {
        "content": "<p>Or did I break it myself?</p>",
        "id": 127108167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293431
    },
    {
        "content": "<p>It's quite possibly broken because it is about 2.5 months old</p>",
        "id": 127108177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527293482
    },
    {
        "content": "<p>do computer scientists really need a _coercion_ from <code>nat</code> to <code>pnat</code>?</p>",
        "id": 127108178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293492
    },
    {
        "content": "<p>I just can't even guess what it would be</p>",
        "id": 127108180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293499
    },
    {
        "content": "<p>\"any one of a couple of random examples\"</p>",
        "id": 127108183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293507
    },
    {
        "content": "<p><code>lemma ord_pow {k : ℕ} {a : ℕ+} : ord p (a^k) = k * ord p a := ord_ppow</code></p>",
        "id": 127108278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293674
    },
    {
        "content": "<p>:-)</p>",
        "id": 127108279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293676
    },
    {
        "content": "<p>I think some coercion magic happened?</p>",
        "id": 127108281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527293686
    },
    {
        "content": "<p>Is there a type Nat union {infinity}? I mean, it's option Nat but I want the obvious le, add and min functions (and don't want to write them if they're already there). The reason I ask is to extend p-adic valuation to zero, and I think I do have to add infinity, because the standard CS answer of just defining it to be 37 or whatever and ploughing on regardless doesn't seem to work here, because then things like min are wrong.</p>",
        "id": 127109528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296322
    },
    {
        "content": "<p>it's called the ordinal omega+1 :D</p>",
        "id": 127109552,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527296383
    },
    {
        "content": "<p>:D</p>",
        "id": 127109604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296456
    },
    {
        "content": "<p>Things which I want to be there, are more and more often beginning to be there :D</p>",
        "id": 127109613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296480
    },
    {
        "content": "<p>Anyone fancy univariate polynomials over a field (division algorithm, degree function with the usual problems at 0, gcd, unique factorization?)</p>",
        "id": 127109668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296593
    },
    {
        "content": "<p>I'm seeing that pop up more and more. Lean has multivariate polynomials but I think these deserve to be a special class rather than constantly carrying around the type \"unit\" for your list of variables.</p>",
        "id": 127109673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> do you want to try this? I'm going to show your work on Z[alpha] to the British Maths Olympiad squad tomorrow! See what they make of it.</p>",
        "id": 127109730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296710
    },
    {
        "content": "<p>Some stuff is there by a student of Johannes in his mason-stother directory but I don't think it's all there. And didn't someone do some Euclidean Algorithm stuff recently? Some student of Scott maybe? That might help I guess.</p>",
        "id": 127109786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296823
    },
    {
        "content": "<p>We need univariate polynomials for the Fibonacci project, as you know.</p>",
        "id": 127109793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296840
    },
    {
        "content": "<p>Or maybe Kenny or Chris will do it now their exams are over.</p>",
        "id": 127109800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296866
    },
    {
        "content": "<p>A fair amount of this stuff should be tidied up and put in mathlib, so it's all in one place.</p>",
        "id": 127109843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527296899
    },
    {
        "content": "<p>hah, won't you soon have your own army of undergraduates working for you over the summer?</p>",
        "id": 127109967,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527297146
    },
    {
        "content": "<p>Over 20 undergrads now</p>",
        "id": 127109993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527297218
    },
    {
        "content": "<p>They start 2nd July</p>",
        "id": 127109997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527297229
    },
    {
        "content": "<p>It's going to be a crazy summer!</p>",
        "id": 127109998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527297233
    },
    {
        "content": "<p>2 months!</p>",
        "id": 127110000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527297242
    },
    {
        "content": "<p>I am so rubbish at coe</p>",
        "id": 127110674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527298743
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">pgcd_coe_something</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pgcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">pgcd</span><span class=\"o\">,</span>\n<span class=\"c1\">--rw pnat.coe_nat_coe a, -- I am so rubbish at coe</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127110679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527298754
    },
    {
        "content": "<p>This is Reid's pgcd from his gist from earlier</p>",
        "id": 127110681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527298770
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea\">https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea</a></p>\n</blockquote>",
        "id": 127111216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527300083
    },
    {
        "content": "<blockquote>\n<p>Is there a type Nat union {infinity}?</p>\n</blockquote>\n<p>As of this morning, there is a <code>with_top A</code> structure that adds an infinity element to any order. So <code>with_top nat</code> is just what you want.</p>",
        "id": 127111362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527300414
    },
    {
        "content": "<p>wow what a coincidence lol</p>",
        "id": 127111551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527300863
    },
    {
        "content": "<blockquote>\n<p>do computer scientists really need a _coercion_ from nat to pnat?</p>\n</blockquote>\n<p>Hm, my original concern was that if you wanted to write 5 as a pnat you would need to write &lt;5, dec_trivial&gt; which is obviously cumbersome. But actually since pnat has <code>has_one</code> and <code>has_add</code> that's actually enough for <code>bit0</code> and <code>bit1</code> to work, meaning that <code>(5 : pnat)</code> works fine (being defined as <code>bit1 (bit0 1)</code> where the 1 and addition are interpreted in <code>pnat</code>). So maybe this isn't needed. I'll see what breaks if I remove it, I agree it's not great to have a non-identity looking coercion</p>",
        "id": 127111894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527301730
    },
    {
        "content": "<p>I was thinking of using <code>pnat</code> for the domain of <code>Z/nZ</code> btw, which will give it a better algebraic theory than <code>fin n</code></p>",
        "id": 127111903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527301801
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Is there a type Nat union {infinity}?</p>\n</blockquote>\n<p>As of this morning, there is a <code>with_top A</code> structure that adds an infinity element to any order. So <code>with_top nat</code> is just what you want.</p>\n</blockquote>\n<p>Mario -- did you see Remark 1.5 of <a href=\"http://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf\" target=\"_blank\" title=\"http://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf\">www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf</a> (page 4)? There is a fundamental construction in adic spaces -- adding a \"bottom\" element zero to a a totally ordered group (e.g the group of positive reals) and creating a totally ordered monoid. Is this sort of thing easy to do now?</p>",
        "id": 127112038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527302055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I could spend an hour or two on it ... should I use multivariate polynomials, should I use finsupp, or just do a direct list encoding?</p>",
        "id": 127112046,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527302124
    },
    {
        "content": "<p>Actually your comment got me thinking about this. There is a related construction, let's say <code>with_zero A</code>, which adds a unit to any additive semigroup; and if the zero and bottom coincide then you get a composite structure which works well on some kinds of ordered groups, I would imagine. Similarly you can make sense of addition with infinity, and that structure coheres with the order of <code>with_top</code>, so that you can add an infinity element to an ordered additive semigroup.</p>",
        "id": 127112134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527302397
    },
    {
        "content": "<p>This could be used to factor <code>ennreal</code> into <code>with_top nnreal</code></p>",
        "id": 127112177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527302433
    },
    {
        "content": "<p>rip ennreal 2017-2018</p>",
        "id": 127112184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527302478
    },
    {
        "content": "<p>born <a href=\"https://github.com/leanprover/mathlib/commit/51042cde36e3ff513866c7ee6a1909650ba7396e#diff-47b6fc31ab3cbab9a5353881776d1008\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/51042cde36e3ff513866c7ee6a1909650ba7396e#diff-47b6fc31ab3cbab9a5353881776d1008\">Aug 30, 2017</a></p>",
        "id": 127112217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527302523
    },
    {
        "content": "<p>It probably wouldn't go away as a definition, it has enough properties on its own that make it worthy of study, but it would simplify and generalize some theorems</p>",
        "id": 127112226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527302535
    },
    {
        "content": "<p>But to answer your question, currently <code>with_bot</code> and <code>with_top</code> only deal with the order structure, they don't have any monoid stuff</p>",
        "id": 127112232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527302604
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>do computer scientists really need a _coercion_ from nat to pnat?</p>\n</blockquote>\n<p>Hm, my original concern was that if you wanted to write 5 as a pnat you would need to write &lt;5, dec_trivial&gt; which is obviously cumbersome. But actually since pnat has <code>has_one</code> and <code>has_add</code> that's actually enough for <code>bit0</code> and <code>bit1</code> to work, meaning that <code>(5 : pnat)</code> works fine (being defined as <code>bit1 (bit0 1)</code> where the 1 and addition are interpreted in <code>pnat</code>). So maybe this isn't needed. I'll see what breaks if I remove it, I agree it's not great to have a non-identity looking coercion</p>\n</blockquote>\n<p>Is it possible to keep the coercion but demand that the type class resolution system produces a proof of positivity before it is applied? I think that this would very much mirror the way a mathematician thought about the issue.</p>",
        "id": 127163781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527426015
    },
    {
        "content": "<p>You might find that if proofs of positivity are carried around</p>",
        "id": 127163783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527426049
    },
    {
        "content": "<p>with instances like \"a &gt; 0 and b &gt; 0 implies a + b &gt; 0\"</p>",
        "id": 127163787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527426063
    },
    {
        "content": "<p>then the coercions work fine.</p>",
        "id": 127163792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527426092
    },
    {
        "content": "<p>With the current system you just occasionally see these \\u \\u x things</p>",
        "id": 127163793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527426118
    },
    {
        "content": "<p>and it's only at the point where you go to cancel them and they won't cancel that you realise you've made a mathematical slip</p>",
        "id": 127163833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527426147
    },
    {
        "content": "<p>Can we make the coercion part of type class resolution better?</p>",
        "id": 127163838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527426193
    },
    {
        "content": "<p>this isn't how coercions work</p>",
        "id": 127164025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527426604
    },
    {
        "content": "<p>they are functions <code>A -&gt; B</code>, nothing else is allowed in there</p>",
        "id": 127164032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527426621
    },
    {
        "content": "<p>in particular, coercions cannot be partial</p>",
        "id": 127164033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527426635
    },
    {
        "content": "<p>except the coercion <code>Prop -&gt; bool</code> which is magical</p>",
        "id": 127164037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527426652
    },
    {
        "content": "<p>CS 101 question alert :-/</p>",
        "id": 127164524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527427896
    },
    {
        "content": "<p>What's the theorem <code>\\&lt;a,h\\&gt;.val = a</code> called for subtypes?</p>",
        "id": 127164526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527427921
    },
    {
        "content": "<p>rfl</p>",
        "id": 127164565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527427932
    },
    {
        "content": "<p>I was trying not to use rfl</p>",
        "id": 127164567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527427945
    },
    {
        "content": "<p>I was looking at the proof that \\u \\u a =a</p>",
        "id": 127164570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527427959
    },
    {
        "content": "<p>I just figured that I had a bunch of stuff about coercions that I needed to understand better before I said too much more about this</p>",
        "id": 127164578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527427987
    },
    {
        "content": "<p>and then I ended up going down a rabbit hole watching the type class resolution system unfold :-/</p>",
        "id": 127164581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428003
    },
    {
        "content": "<p>Actually I don't understand.</p>",
        "id": 127164582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428020
    },
    {
        "content": "<p>How do I rewrite \\u \\u a as a?</p>",
        "id": 127164583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428025
    },
    {
        "content": "<p>Wait</p>",
        "id": 127164586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428034
    },
    {
        "content": "<p>I was asking for the name of the theorem</p>",
        "id": 127164589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428038
    },
    {
        "content": "<p>not the proof</p>",
        "id": 127164590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428039
    },
    {
        "content": "<p>you haven't given me enough info to answer the question</p>",
        "id": 127164634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428065
    },
    {
        "content": "<p>I'll formulate something precise.</p>",
        "id": 127164638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428076
    },
    {
        "content": "<p>lots of theorems look like \\u \\u a = a</p>",
        "id": 127164639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428082
    },
    {
        "content": "<p>I need to know what is the type of a, and the type of \\u a</p>",
        "id": 127164641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428100
    },
    {
        "content": "<p>[pause whilst we discover if Kevin is talking nonsense]</p>",
        "id": 127164650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">what_am_i_called</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 127164817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428491
    },
    {
        "content": "<p>The question.</p>",
        "id": 127164818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428493
    },
    {
        "content": "<p>because I want to use you in a rewrite</p>",
        "id": 127164862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428532
    },
    {
        "content": "<p>so I need to know your name</p>",
        "id": 127164864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428548
    },
    {
        "content": "<p>the theorem doesn't have a name, it is done automatically by dsimp</p>",
        "id": 127164867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428558
    },
    {
        "content": "<p>And there's you guys saying our naming conventions are bad</p>",
        "id": 127164876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428589
    },
    {
        "content": "<p>same as how beta reduction isn't a named theorem</p>",
        "id": 127164877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428591
    },
    {
        "content": "<p>dsimp is what?</p>",
        "id": 127164879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428614
    },
    {
        "content": "<p>I used it a couple of times recently</p>",
        "id": 127164881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428620
    },
    {
        "content": "<p>Kenny told me \"just use dsimp\" and I'm like \"ooh my goal has gone from 1 page to 5 lines\"</p>",
        "id": 127164882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428634
    },
    {
        "content": "<p>it's <code>simp</code> for definitional rewrites</p>",
        "id": 127164920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428645
    },
    {
        "content": "<p>which way does it go?</p>",
        "id": 127164924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428657
    },
    {
        "content": "<p>What does it actually do?</p>",
        "id": 127164925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428665
    },
    {
        "content": "<p>If it sees my subtype.mk.val stuff it just says \"ooh I'll remove that\"</p>",
        "id": 127164927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428686
    },
    {
        "content": "<p>but does it ever add it?</p>",
        "id": 127164929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428695
    },
    {
        "content": "<p>it does exactly the same sort of thing as simp</p>",
        "id": 127164932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428699
    },
    {
        "content": "<p>oh great :-)</p>",
        "id": 127164937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428707
    },
    {
        "content": "<p>Another black box :-)</p>",
        "id": 127164940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428710
    },
    {
        "content": "<p>I see</p>",
        "id": 127164944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428723
    },
    {
        "content": "<p>it cancels projections applied to structure mk</p>",
        "id": 127164945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428723
    },
    {
        "content": "<p>What else does it do?</p>",
        "id": 127164947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428731
    },
    {
        "content": "<p>this is the structure iota rule</p>",
        "id": 127164948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428732
    },
    {
        "content": "<p>What's a complete list of what it does?</p>",
        "id": 127164951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428743
    },
    {
        "content": "<p>Would I be able to understand the source code?</p>",
        "id": 127164952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428751
    },
    {
        "content": "<p>Kenny says that Lean does not do magic but this is still magic to me</p>",
        "id": 127164955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428758
    },
    {
        "content": "<p>dsimp has a config too</p>",
        "id": 127164995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428769
    },
    {
        "content": "<p>53 extra options?</p>",
        "id": 127164997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428777
    },
    {
        "content": "<p>that has a fairly complete list of the kinds of automatic reductions it does, beta, eta, zeta, iota etc</p>",
        "id": 127165001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428802
    },
    {
        "content": "<p>and it also uses <code>@[simp]</code> lemmas that are also rfl lemmas</p>",
        "id": 127165007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428824
    },
    {
        "content": "<p>as well as definition unfolding when you give it to the bracket list or use <code>!</code></p>",
        "id": 127165013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428851
    },
    {
        "content": "<p>I would be really interested in watching a video or seeing an article about what dsimp and/or simp do. If I understood what they were doing I wouldn't still just be hopefully typing simp every now and then just to see if I can make the goal go away</p>",
        "id": 127165014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428851
    },
    {
        "content": "<p>Haven't we had this conversation before?</p>",
        "id": 127165046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428882
    },
    {
        "content": "<p>I'm pretty sure you wrote that article</p>",
        "id": 127165057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527428891
    },
    {
        "content": "<p>I feel like there's still a whole bunch of things I don't fully understand with all this business</p>",
        "id": 127165060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428921
    },
    {
        "content": "<p>I'll read my own docs and see if this enlightens me</p>",
        "id": 127165061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527428939
    },
    {
        "content": "<p>The textbook \"term rewriting and all that\" is pretty good on this subject, if your uni library has it</p>",
        "id": 127165117,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527429035
    },
    {
        "content": "<p>simplification using definition equalities, I believe</p>",
        "id": 127165171,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527429169
    },
    {
        "content": "<p>So my real question was \"how do I do a definitional rewrite in tactic mode\", and the answer is \"don't use rw, use show\"</p>",
        "id": 127165225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429278
    },
    {
        "content": "<p><code>change with</code> is literally definitional rw</p>",
        "id": 127165231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429311
    },
    {
        "content": "<blockquote>\n<p>The textbook \"term rewriting and all that\" is pretty good on this subject, if your uni library has it</p>\n</blockquote>\n<p>Thanks Andrew. My university can get any book for me.</p>",
        "id": 127165232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429312
    },
    {
        "content": "<p>but <code>dsimp</code> is nice for just cleaning up some common patterns</p>",
        "id": 127165274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429404
    },
    {
        "content": "<p>Equality is asymmetric for you people, isn't it</p>",
        "id": 127165275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429418
    },
    {
        "content": "<p>This is only just dawning on me</p>",
        "id": 127165278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429425
    },
    {
        "content": "<p>yes, with term rewrites direction really matters</p>",
        "id": 127165281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429443
    },
    {
        "content": "<p>If you write a = b, and if one side was more complicated than the other</p>",
        "id": 127165282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429447
    },
    {
        "content": "<p>you would put the more complicated side first</p>",
        "id": 127165283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429452
    },
    {
        "content": "<p>Is this just some general principle?</p>",
        "id": 127165284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429464
    },
    {
        "content": "<p>yeah, simp simplifies</p>",
        "id": 127165287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429472
    },
    {
        "content": "<p>it's not called complexify</p>",
        "id": 127165288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429482
    },
    {
        "content": "<p>I had not realised that = was asymmetric</p>",
        "id": 127165330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429495
    },
    {
        "content": "<p>in any way whatsoever</p>",
        "id": 127165331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429501
    },
    {
        "content": "<p>I have a different definition of = to you</p>",
        "id": 127165332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429511
    },
    {
        "content": "<p>= itself is symmetric</p>",
        "id": 127165333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429519
    },
    {
        "content": "<p>symmetric in some theorem sense</p>",
        "id": 127165334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429529
    },
    {
        "content": "<p>but you have to decide which goes first</p>",
        "id": 127165336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429541
    },
    {
        "content": "<p>and we don't care</p>",
        "id": 127165340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429544
    },
    {
        "content": "<p>but simp and dsimp takes the list of simp lemmas and use them as a rewrite graph</p>",
        "id": 127165343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429558
    },
    {
        "content": "<p>and this is directed</p>",
        "id": 127165344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429562
    },
    {
        "content": "<p>Right, I've just been learning this from my own notes</p>",
        "id": 127165345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429570
    },
    {
        "content": "<p>Aah!</p>",
        "id": 127165347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429595
    },
    {
        "content": "<p>I've just realised what my question actually is.</p>",
        "id": 127165349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429601
    },
    {
        "content": "<p>My question is this: \"I never ever tag anything with @[simp]. I make loads of structures. Can you give me some basic advice over which trivial lemmas I should be (a) proving and (b) tagging with simp?\"</p>",
        "id": 127165394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429638
    },
    {
        "content": "<p>Unfortunately, the answer is \"depends on the structure\"</p>",
        "id": 127165403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429679
    },
    {
        "content": "<p>some axioms of a structure should be simp lemmas</p>",
        "id": 127165406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429700
    },
    {
        "content": "<p>subtype</p>",
        "id": 127165407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429701
    },
    {
        "content": "<p>like <code>zero_add</code></p>",
        "id": 127165408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429705
    },
    {
        "content": "<p>A type and a proof</p>",
        "id": 127165409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429706
    },
    {
        "content": "<p>I don't think subtype has any simp lemmas</p>",
        "id": 127165449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429736
    },
    {
        "content": "<p>which is to say, there is nothing that sticks out as necessary</p>",
        "id": 127165451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429753
    },
    {
        "content": "<p>oh, &lt;a, h1&gt; = &lt;b, h2&gt; &lt;-&gt; a = b should be a simp lemma</p>",
        "id": 127165453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429770
    },
    {
        "content": "<p>What about presheaf of types on a topological space?</p>",
        "id": 127165455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429780
    },
    {
        "content": "<p>I made that structure once</p>",
        "id": 127165459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429788
    },
    {
        "content": "<p>but actually I think simp might do that automatically anyway</p>",
        "id": 127165461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429790
    },
    {
        "content": "<p>I'll find you a link</p>",
        "id": 127165462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429790
    },
    {
        "content": "<p>simp will already do a few things by default on all structures, which more or less covers all the general recommendations</p>",
        "id": 127165499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429846
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/6617de7dd5f11af46f0c7e0d2223ee065d71b9f3/src/tag006E.lean#L4\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/6617de7dd5f11af46f0c7e0d2223ee065d71b9f3/src/tag006E.lean#L4\">https://github.com/kbuzzard/lean-stacks-project/blob/6617de7dd5f11af46f0c7e0d2223ee065d71b9f3/src/tag006E.lean#L4</a></p>",
        "id": 127165503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429900
    },
    {
        "content": "<p>I am proud to say that I did actually write a simp lemma for that</p>",
        "id": 127165511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429917
    },
    {
        "content": "<p>My simp lemma says \"crap, I made a poor design decision when designing that structure, but I can't be bothered to change it now\"</p>",
        "id": 127165512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429933
    },
    {
        "content": "<p>that's just what I would have recommended</p>",
        "id": 127165514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429951
    },
    {
        "content": "<p>except possibly for the dependent args</p>",
        "id": 127165555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429974
    },
    {
        "content": "<p>You would recommend the change in the structure?</p>",
        "id": 127165556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429974
    },
    {
        "content": "<p>that doesn't matter so much</p>",
        "id": 127165558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527429987
    },
    {
        "content": "<p>Oh!</p>",
        "id": 127165559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527429996
    },
    {
        "content": "<p>You don't care which definition I use if they're all equivalent?</p>",
        "id": 127165562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430010
    },
    {
        "content": "<p>I was going to bite the bullet one day and edit the definition of that structure. You're saying that's a crazy idea?</p>",
        "id": 127165567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430031
    },
    {
        "content": "<p>it affects the proof goals when defining structures with <code>{ stuff := ... }</code></p>",
        "id": 127165568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430038
    },
    {
        "content": "<p>so it depends on how you usually prove such goals</p>",
        "id": 127165569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430060
    },
    {
        "content": "<p>I was going to change \"f = g circ h\" with \"forall x, g (h x) = f x\"</p>",
        "id": 127165570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430071
    },
    {
        "content": "<p>if the first thing you do is always funext, then that's a hint</p>",
        "id": 127165571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430080
    },
    {
        "content": "<p>Note the equality \"f = g circ h\"</p>",
        "id": 127165608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430084
    },
    {
        "content": "<p>the more complicated side on the right</p>",
        "id": 127165611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430091
    },
    {
        "content": "<p>is that also unwise?</p>",
        "id": 127165612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430097
    },
    {
        "content": "<p>actually here I recommend that ordering</p>",
        "id": 127165613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430115
    },
    {
        "content": "<p>The thing about funext was that there were a few times when the fact that it was comp was really useful, it made some proofs really nice and short</p>",
        "id": 127165615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430123
    },
    {
        "content": "<p>because the argument to f is getting simpler</p>",
        "id": 127165616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430130
    },
    {
        "content": "<p><em>boggle</em></p>",
        "id": 127165617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430131
    },
    {
        "content": "<p>I don't understand</p>",
        "id": 127165622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430149
    },
    {
        "content": "<p>think of it as <code>f (comp a b) = f a o f b</code></p>",
        "id": 127165623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430158
    },
    {
        "content": "<p>here simp will want to go left to right to make the argument to <code>f</code> as simple as possible</p>",
        "id": 127165670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430226
    },
    {
        "content": "<p>It's <code>res U W x = res V W (res U V x)</code></p>",
        "id": 127165671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430237
    },
    {
        "content": "<p>that's what it is really</p>",
        "id": 127165672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430243
    },
    {
        "content": "<p>You still want it that way round?</p>",
        "id": 127165673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430252
    },
    {
        "content": "<p>that's not a good simp lemma</p>",
        "id": 127165680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430280
    },
    {
        "content": "<p>\"restriction of a function on U down to V and then down to W equals restriction directly down to W\"</p>",
        "id": 127165681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430293
    },
    {
        "content": "<p>Either way round?</p>",
        "id": 127165684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430303
    },
    {
        "content": "<p>Okay, I guess in this case since it's a proof arg it shouldn't be a metric of simplicity</p>",
        "id": 127165726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430339
    },
    {
        "content": "<p>so in that case you want <code>res V W (res U V x) = res U W x</code></p>",
        "id": 127165727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430374
    },
    {
        "content": "<p>This is the thing I don't understand. It takes two functions <code>res U V</code> and <code>res W V</code> and it returns one function. It's made it simpler. I don't understand what should be a simp lemma.</p>",
        "id": 127165729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430379
    },
    {
        "content": "<p>Aah so you do want to switch the order?</p>",
        "id": 127165735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430392
    },
    {
        "content": "<p>And then make a simp lemma?</p>",
        "id": 127165736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430395
    },
    {
        "content": "<blockquote>\n<p>Okay, I guess in this case since it's a proof arg it shouldn't be a metric of simplicity</p>\n</blockquote>\n<p>I don't understand that either :-/</p>",
        "id": 127165781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430452
    },
    {
        "content": "<p>You have this extra argument that has a big term in it</p>",
        "id": 127165790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430510
    },
    {
        "content": "<p>I've mentioned that proof args are bad for rewrites before</p>",
        "id": 127165795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430540
    },
    {
        "content": "<p>Why?</p>",
        "id": 127165838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430595
    },
    {
        "content": "<p>proof args are fundamental statements about the situation</p>",
        "id": 127165839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430604
    },
    {
        "content": "<p>Are you saying that associativity of addition should not be a simp lemma?</p>",
        "id": 127165850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430675
    },
    {
        "content": "<p>associativity of addition is both a simp lemma and seems to have the more complicated side on the right.</p>",
        "id": 127165892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430724
    },
    {
        "content": "<p>None of it adds up to me. I am still nowhere near understanding what should be a simp lemma.</p>",
        "id": 127165901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430751
    },
    {
        "content": "<p>assoc is a special case</p>",
        "id": 127165904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430764
    },
    {
        "content": "<p><em>boggle</em></p>",
        "id": 127165906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430772
    },
    {
        "content": "<p>I'll add it to the docs</p>",
        "id": 127165908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430777
    },
    {
        "content": "<p>simp has special handling for comm/assoc operations</p>",
        "id": 127165909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430781
    },
    {
        "content": "<p>which uses a convention which goes against the \"simpler argument on the right\" convention?</p>",
        "id": 127165948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430805
    },
    {
        "content": "<p>it would not normally be a good simp lemma, because it doesn't simplify the term</p>",
        "id": 127165950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430806
    },
    {
        "content": "<p><code>mul_one</code> is a simp lemma and it's a proof arg, if I've understood the last term correctly</p>",
        "id": 127165958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430856
    },
    {
        "content": "<p>But simp will notice if you give it a lemma that looks like associativity and apply special algorithms to do smart things with that</p>",
        "id": 127165959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430861
    },
    {
        "content": "<p>None of those have proof args</p>",
        "id": 127165971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430886
    },
    {
        "content": "<p><em>oh</em></p>",
        "id": 127165973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430896
    },
    {
        "content": "<p>I'm talking about proofs as arguments to functions you want to rewrite</p>",
        "id": 127165976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430910
    },
    {
        "content": "<p>so in this case that would be like proof arguments to <code>mul</code> or <code>one</code></p>",
        "id": 127166014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430924
    },
    {
        "content": "<p>I thought you were talking about proofs as arguments used to create a structure</p>",
        "id": 127166015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430926
    },
    {
        "content": "<p>in your case I'm talking about <code>res</code> which has three proof args</p>",
        "id": 127166021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527430959
    },
    {
        "content": "<p>Would your opinion change if made them all work magically using type class resolution?</p>",
        "id": 127166027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527430989
    },
    {
        "content": "<p>yes</p>",
        "id": 127166028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431010
    },
    {
        "content": "<p>that's an interesting idea, I'd have to see how messy the arguments can get</p>",
        "id": 127166066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431044
    },
    {
        "content": "<p>The reason I didn't use type class resolution for those things was that when I wrote that code I had no idea how typeclass resolution system worked</p>",
        "id": 127166073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431088
    },
    {
        "content": "<p>so I just over-rode it and would always pass the proofs manually</p>",
        "id": 127166074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431100
    },
    {
        "content": "<p>and then later on in the project I was forced to work with rings and ring homs</p>",
        "id": 127166082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431115
    },
    {
        "content": "<p>so I was forced to learn the system</p>",
        "id": 127166083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431119
    },
    {
        "content": "<p>and we had that long thread with me moaning and learning about <code>letI</code></p>",
        "id": 127166086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431133
    },
    {
        "content": "<p>Ok so coercions.</p>",
        "id": 127166279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431548
    },
    {
        "content": "<p><code>theorem eew (Y : ℕ+) : ((Y : ℕ) : ℕ+) = Y := rfl -- fails</code></p>",
        "id": 127166280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431551
    },
    {
        "content": "<p>That's not good, right?</p>",
        "id": 127166282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431558
    },
    {
        "content": "<p>Should that be a simp lemma?</p>",
        "id": 127166286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431576
    },
    {
        "content": "<p><code>ℕ+</code> is one of my favourite sets in ZFC</p>",
        "id": 127166295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431633
    },
    {
        "content": "<p>Why is it so hard to work with here?</p>",
        "id": 127166296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431640
    },
    {
        "content": "<p>Just because it's not a stupid semiring</p>",
        "id": 127166333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431645
    },
    {
        "content": "<p>maybe it's a demisemiring</p>",
        "id": 127166339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431696
    },
    {
        "content": "<p>that is a simp lemma, I think</p>",
        "id": 127166349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431733
    },
    {
        "content": "<p>Aah here's a question.</p>",
        "id": 127166350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431746
    },
    {
        "content": "<p>Let's say we ripped out the definition of pnat</p>",
        "id": 127166351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431753
    },
    {
        "content": "<p><code>coe_nat_coe</code></p>",
        "id": 127166352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431755
    },
    {
        "content": "<p>and replaced it with a straight inductive structure with one and succ</p>",
        "id": 127166390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431766
    },
    {
        "content": "<p>Would that make <em>any</em> difference to <em>anything</em></p>",
        "id": 127166396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431782
    },
    {
        "content": "<p>not really</p>",
        "id": 127166397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431789
    },
    {
        "content": "<p>or you just write the new interface</p>",
        "id": 127166398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431793
    },
    {
        "content": "<p>and that's it</p>",
        "id": 127166399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431794
    },
    {
        "content": "<p>No issue with compile time or running time</p>",
        "id": 127166400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431803
    },
    {
        "content": "<p>or simp not working as well</p>",
        "id": 127166401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431807
    },
    {
        "content": "<p>anything not using the interface would be affected, of course</p>",
        "id": 127166402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431810
    },
    {
        "content": "<p>Aah</p>",
        "id": 127166404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431822
    },
    {
        "content": "<p>anything accessing the innards of the structure</p>",
        "id": 127166410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431834
    },
    {
        "content": "<p>i.e. if someone creates a pnat by writing &lt;2, dec_trivial&gt;</p>",
        "id": 127166411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431834
    },
    {
        "content": "<p>instead of (2 : pnat)</p>",
        "id": 127166413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431852
    },
    {
        "content": "<p>then they should be punished?</p>",
        "id": 127166414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431871
    },
    {
        "content": "<p>How does that work?</p>",
        "id": 127166415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431877
    },
    {
        "content": "<p>\"You only use official constructors\"</p>",
        "id": 127166454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431888
    },
    {
        "content": "<p>\"not inbuilt stuff\"</p>",
        "id": 127166456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431911
    },
    {
        "content": "<p>Oh wait -- surely anyone writing a proof in term mode with pnat will have constructors like that everywhere</p>",
        "id": 127166458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431939
    },
    {
        "content": "<p>because it's a super-cool way of being fancy in fancy term mode</p>",
        "id": 127166463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431951
    },
    {
        "content": "<p>right</p>",
        "id": 127166464,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527431960
    },
    {
        "content": "<p>eew</p>",
        "id": 127166465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431965
    },
    {
        "content": "<p>well, the thing is that I don't want to avoid structure constructors, because they are very nice</p>",
        "id": 127166466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431968
    },
    {
        "content": "<p>So there <em>is</em> a question left</p>",
        "id": 127166467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527431985
    },
    {
        "content": "<p>you can't replicate that functionality with an interface</p>",
        "id": 127166468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527431987
    },
    {
        "content": "<p>unless the interface is to pass in a specially defined structure</p>",
        "id": 127166515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432008
    },
    {
        "content": "<p>like simp_config</p>",
        "id": 127166518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432017
    },
    {
        "content": "<p>you've lost me now</p>",
        "id": 127166519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432032
    },
    {
        "content": "<p>but I do see that there is a huge argument for structure constructors and this presumably has some bearing on exactly which constructors you choose and maybe even in which order?</p>",
        "id": 127166524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432066
    },
    {
        "content": "<p>maybe order irrelevant</p>",
        "id": 127166527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432074
    },
    {
        "content": "<p>but you never know</p>",
        "id": 127166528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432076
    },
    {
        "content": "<p>yes</p>",
        "id": 127166529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432077
    },
    {
        "content": "<p>order is relevant for anonymous constructors</p>",
        "id": 127166530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432088
    },
    {
        "content": "<p>Here are my currrent thoughts on presheaf fyi:</p>\n<div class=\"codehilite\"><pre><span></span>structure order_presheaf (α : Type u) [preorder α] :=\n(F : α → Type u)\n(res : ∀ x {y}, x ≤ y → F y → F x)\n(Hid : ∀ x h a, res x h a = a)\n(Hcomp : ∀ x y z h₁ h₂ (a : F z),\n  res x h₁ (res y h₂ a) = res x (le_trans h₁ h₂) a)\n</pre></div>",
        "id": 127166572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432157
    },
    {
        "content": "<p>what is an <code>order_presheaf</code>?</p>",
        "id": 127166574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527432177
    },
    {
        "content": "<p>Would you want presheaves in mathlib?</p>",
        "id": 127166577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432186
    },
    {
        "content": "<p>oh eew</p>",
        "id": 127166581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432196
    },
    {
        "content": "<p>what just happened there</p>",
        "id": 127166582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432199
    },
    {
        "content": "<p>with the open sets</p>",
        "id": 127166583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432203
    },
    {
        "content": "<p>oh, they form a preorder under inclusion!</p>",
        "id": 127166584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527432221
    },
    {
        "content": "<p>he thinks he's being clever</p>",
        "id": 127166586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432224
    },
    {
        "content": "<p>but we need the etale site ;-)</p>",
        "id": 127166587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432233
    },
    {
        "content": "<p>so he's still not general enough ;-)</p>",
        "id": 127166588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432240
    },
    {
        "content": "<p>if you add enough axioms to the preorder you can capture exactly the open sets of some topology</p>",
        "id": 127166627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432261
    },
    {
        "content": "<p>yeah, I was just remarking that at some point later on algebraic geometry needs the notion of sheaf on something more general than a topological space</p>",
        "id": 127166628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432290
    },
    {
        "content": "<p>but this part of the definition only needs a preorder</p>",
        "id": 127166630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432292
    },
    {
        "content": "<blockquote>\n<p>yeah, I was just remarking that at some point later on algebraic geometry needs the notion of sheaf on something more general than a topological space</p>\n</blockquote>\n<p>what do you need?</p>",
        "id": 127166636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527432308
    },
    {
        "content": "<p>sheaf on a site</p>",
        "id": 127166638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432316
    },
    {
        "content": "<p><code>[category \\a]</code></p>",
        "id": 127166639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527432319
    },
    {
        "content": "<p>i.e. there may be more than one morphisms?</p>",
        "id": 127166640,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527432337
    },
    {
        "content": "<p>if you want a category then this is just <code>functor</code></p>",
        "id": 127166641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432340
    },
    {
        "content": "<p>Right</p>",
        "id": 127166643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527432342
    },
    {
        "content": "<p>but it has to satisfy the sheaf axiom</p>",
        "id": 127166644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432348
    },
    {
        "content": "<p>point me to that</p>",
        "id": 127166645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432358
    },
    {
        "content": "<p>and you need more than a category to formalise that</p>",
        "id": 127166677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  so they may have two \"proofs\" of <code>x \\le y</code> and they want the two things to be unequal</p>",
        "id": 127166686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527432369
    },
    {
        "content": "<p>well, so far we are only talking about presheaf I thought</p>",
        "id": 127166687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527432373
    },
    {
        "content": "<p>I am actually very fine with that</p>",
        "id": 127166688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432390
    },
    {
        "content": "<p>that's true but I am interested in more than presheaves here</p>",
        "id": 127166690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432398
    },
    {
        "content": "<p>that's the remaining problem with this definition</p>",
        "id": 127166691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432401
    },
    {
        "content": "<p>as I said, I don't like proof args</p>",
        "id": 127166694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432411
    },
    {
        "content": "<p>well then great! They won't be proofs once you generalize to a category <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 127166697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527432427
    },
    {
        "content": "<p>but you can't easily remove them from this... what's the structure of that argument otherwise?</p>",
        "id": 127166702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432446
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/00VH\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/00VH\">https://stacks.math.columbia.edu/tag/00VH</a></p>",
        "id": 127166704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432459
    },
    {
        "content": "<p>I guess <code>Hom x y</code>?</p>",
        "id": 127166705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432460
    },
    {
        "content": "<p>That's a site</p>",
        "id": 127166751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432484
    },
    {
        "content": "<p>Right, just a morphism in some category.</p>",
        "id": 127166756,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527432493
    },
    {
        "content": "<p>Did you see <a href=\"https://stacks.math.columbia.edu/tag/00VI\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/00VI\">https://stacks.math.columbia.edu/tag/00VI</a></p>",
        "id": 127166765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432567
    },
    {
        "content": "<p>Mario, I think this says \"if a computer scientist tries to do this, they will have universe issues. But in all the cases that a mathematican cares about, these issues can be avoided and we can do everything in Type\"</p>",
        "id": 127166812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432617
    },
    {
        "content": "<p>Presheaves are already rather large</p>",
        "id": 127166822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432677
    },
    {
        "content": "<p>\"This definition uses two universes u and v, but when we apply it I claim that we can get away with one universe\"</p>",
        "id": 127166824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432692
    },
    {
        "content": "<p>How do you formalise that? ;-)</p>",
        "id": 127166825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432696
    },
    {
        "content": "<p>It looks like sites have to be small though</p>",
        "id": 127166866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432735
    },
    {
        "content": "<p>but what's a (pre)sheaf on a site?</p>",
        "id": 127166868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432755
    },
    {
        "content": "<p>all I see is a bunch of covering stuff</p>",
        "id": 127166873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432775
    },
    {
        "content": "<p>Also relevant</p>",
        "id": 127166884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432823
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/00ZF\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/00ZF\">https://stacks.math.columbia.edu/tag/00ZF</a></p>",
        "id": 127166885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432824
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/00VL\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/00VL\">https://stacks.math.columbia.edu/tag/00VL</a></p>",
        "id": 127166936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432854
    },
    {
        "content": "<p>sheaf!</p>",
        "id": 127166937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432856
    },
    {
        "content": "<p>Still no presheaf :-)</p>",
        "id": 127166938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432859
    },
    {
        "content": "<p>Scott is doing sites in the his category stuff</p>",
        "id": 127166940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527432871
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/00V1\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/00V1\">https://stacks.math.columbia.edu/tag/00V1</a></p>",
        "id": 127166942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432885
    },
    {
        "content": "<p>and what is the site corresponding to a top space?</p>",
        "id": 127166943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527432891
    },
    {
        "content": "<p>OK so presheaf on a category, sheaf on a site</p>",
        "id": 127166944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432892
    },
    {
        "content": "<p>The site corresponding to a top space is this</p>",
        "id": 127166945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432902
    },
    {
        "content": "<p>The category has an object for each open set</p>",
        "id": 127166953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432909
    },
    {
        "content": "<p>Homs from U to V are empty unless V sub U in which case there is one elment</p>",
        "id": 127166960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432931
    },
    {
        "content": "<p>Coverings: a set of morphisms U_i -&gt; U covers U iff the union of the image of the U_i is U</p>",
        "id": 127166966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432953
    },
    {
        "content": "<p>The sheaf axiom says this.</p>",
        "id": 127167004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527432963
    },
    {
        "content": "<p>\"If U is an open set, and it is covered by opens U_i, then to give a continuous function on U is to give a continuous function f_i on each U_i such that f_i and f_j agree on U_i intersect U_j\"</p>",
        "id": 127167017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433018
    },
    {
        "content": "<p>You can equivalently describe the category like this. The objects are topological spaces equipped with a map to X which is an open immersion. A morphism is a continuous map which is compatible with the structural maps to X.</p>",
        "id": 127167025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527433056
    },
    {
        "content": "<p>They say \"continuity can be checked locally\"</p>",
        "id": 127167027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433057
    },
    {
        "content": "<p>isn't that just true?</p>",
        "id": 127167071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433087
    },
    {
        "content": "<p>Reid's changing of my category to an equivalent category was something which turned out to be really important</p>",
        "id": 127167072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433095
    },
    {
        "content": "<p>like as a statement of topology</p>",
        "id": 127167073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433095
    },
    {
        "content": "<p>It's precisely the statement that continuity is a local condition</p>",
        "id": 127167074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433107
    },
    {
        "content": "<p>So the <em>presheaf</em> of continuous functions on a topological space</p>",
        "id": 127167081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433123
    },
    {
        "content": "<p>is actually a sheaf!</p>",
        "id": 127167082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433127
    },
    {
        "content": "<p>But the presheaf of constant functions is not a sheaf</p>",
        "id": 127167083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433135
    },
    {
        "content": "<p>because if I have two disjoint open sets</p>",
        "id": 127167085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433142
    },
    {
        "content": "<p>and define a function to be 1 on one of them but 2 on the other one</p>",
        "id": 127167091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433150
    },
    {
        "content": "<p>it's locally constant</p>",
        "id": 127167093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433154
    },
    {
        "content": "<p>but not constant</p>",
        "id": 127167094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433156
    },
    {
        "content": "<p>ah okay, so locally constant functions is a sheaf</p>",
        "id": 127167095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433164
    },
    {
        "content": "<p>right</p>",
        "id": 127167097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433168
    },
    {
        "content": "<p>it's the sheafification of the presheaf of constant functions</p>",
        "id": 127167101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433176
    },
    {
        "content": "<p>sheafification is an adjoint to the forgetful functor</p>",
        "id": 127167102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433185
    },
    {
        "content": "<p>so how much does it matter that these are poset categories?</p>",
        "id": 127167157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433225
    },
    {
        "content": "<p>Exactly</p>",
        "id": 127167158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433231
    },
    {
        "content": "<p>it doesn't matter at all</p>",
        "id": 127167161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433240
    },
    {
        "content": "<p>and in general they won't be</p>",
        "id": 127167163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433245
    },
    {
        "content": "<p>is a poset category one where the hom sets have size &lt;= 1?</p>",
        "id": 127167165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433254
    },
    {
        "content": "<p>yes</p>",
        "id": 127167166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433257
    },
    {
        "content": "<p>so the etale site attached to a scheme does not have this property I guess</p>",
        "id": 127167175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433287
    },
    {
        "content": "<p>maybe it would be better to do this with honest categories</p>",
        "id": 127167178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433305
    },
    {
        "content": "<p>I think Scott said that quite a long time ago</p>",
        "id": 127167180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433321
    },
    {
        "content": "<p>but I just wanted to get on</p>",
        "id": 127167223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433333
    },
    {
        "content": "<p>Sheaves of sets on a site are a Mathematician's Topos Mario.</p>",
        "id": 127167230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433370
    },
    {
        "content": "<p>This is distinct to the CS topos</p>",
        "id": 127167233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433379
    },
    {
        "content": "<p>like in the literal sense?</p>",
        "id": 127167238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433390
    },
    {
        "content": "<p>You have some more general notion I think</p>",
        "id": 127167239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433391
    },
    {
        "content": "<p>Topos is used to mean two different things, I believe</p>",
        "id": 127167240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433398
    },
    {
        "content": "<p>I like Grothendieck topoi</p>",
        "id": 127167242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433405
    },
    {
        "content": "<p>you like elmentary topoi</p>",
        "id": 127167244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433410
    },
    {
        "content": "<p>I am not sure I would say that...</p>",
        "id": 127167246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433421
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/00X9\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/00X9\">https://stacks.math.columbia.edu/tag/00X9</a></p>",
        "id": 127167247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433433
    },
    {
        "content": "<p>topoi is usually where I get off the bus</p>",
        "id": 127167289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433448
    },
    {
        "content": "<p>It took me a while, in the pre-Wikipedia age, to understand that the two uses of the word were distinct</p>",
        "id": 127167290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433455
    },
    {
        "content": "<p>I knew this guy as an UG who would go round saying \"a topos is a category which is finitely complete, finitely cocomplete, has exponentiation and a subobject classifier\"</p>",
        "id": 127167293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433491
    },
    {
        "content": "<p>and I had no idea what any of those things meant</p>",
        "id": 127167295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433499
    },
    {
        "content": "<p>and then years later I found some topoi I was actually interested in</p>",
        "id": 127167301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433509
    },
    {
        "content": "<p>that's about where I am</p>",
        "id": 127167303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433512
    },
    {
        "content": "<p><em>as</em> an UG :o</p>",
        "id": 127167304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527433517
    },
    {
        "content": "<p>and then it turned out they were a different kind of topos</p>",
        "id": 127167305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433518
    },
    {
        "content": "<p>I learn and forget those things every year</p>",
        "id": 127167307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433523
    },
    {
        "content": "<p>There was once some debate about whether Wiles/Taylor-Wiles used Grothendieck topoi in their proof of FLT</p>",
        "id": 127167313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433560
    },
    {
        "content": "<p>and the answer turned out to be</p>",
        "id": 127167353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433581
    },
    {
        "content": "<p>because that means large universes, right?</p>",
        "id": 127167354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433583
    },
    {
        "content": "<p>\"well, mathematicians are always a bit vague about what exactly they are using, and there is no mention of set-theoretic difficulties, but Brian Conrad went away and checked every single cohomology group in the entire proof and verified that it was OK, everything happened within one universe\"</p>",
        "id": 127167358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433622
    },
    {
        "content": "<p>Wiles most definitely used etale cohomology in his proof</p>",
        "id": 127167366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433647
    },
    {
        "content": "<p>and I am almost certain that he cited some papers which at some point use flat cohomology</p>",
        "id": 127167368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433662
    },
    {
        "content": "<p>and they probably cite some papers which at some point mention fpqc cohomology</p>",
        "id": 127167412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433739
    },
    {
        "content": "<p>so we really needed an expert who could come along and say \"I know exactly which parts of the theory of etale cohomlogy and other cohomology theories he used and can verify that all the stuff he uses can be formalised in ZFC\"</p>",
        "id": 127167423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433782
    },
    {
        "content": "<p>before that debate died down</p>",
        "id": 127167430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433798
    },
    {
        "content": "<p>Some people really care about universes. If Lean really cannot keep track of them then these people might be skeptical</p>",
        "id": 127167484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433862
    },
    {
        "content": "<p>My current personal viewpoint on this is simply to accept the large cardinals. If they make maths easier and more fun to do then I'm in</p>",
        "id": 127167502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433913
    },
    {
        "content": "<p>For the most part, if it lives in <code>Type</code> it can be constructed in ZFC</p>",
        "id": 127167503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433914
    },
    {
        "content": "<p>Right, but any file which uses \"universes u v\" is open to question right?</p>",
        "id": 127167552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433931
    },
    {
        "content": "<p>Or even \"universe u\" perhaps</p>",
        "id": 127167553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433939
    },
    {
        "content": "<p>if it uses Type as well</p>",
        "id": 127167557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433942
    },
    {
        "content": "<p>no, as long as at the end you build something in <code>Type</code></p>",
        "id": 127167559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433948
    },
    {
        "content": "<p>Oh</p>",
        "id": 127167561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433966
    },
    {
        "content": "<p>The part which makes this not quite true is impredicativity of Prop</p>",
        "id": 127167563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527433979
    },
    {
        "content": "<p>aie</p>",
        "id": 127167566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433984
    },
    {
        "content": "<p>so you get a proof which lived in another universe</p>",
        "id": 127167570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433992
    },
    {
        "content": "<p>but you can't get a proof in your own universe</p>",
        "id": 127167573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527433999
    },
    {
        "content": "<p>so you use propext</p>",
        "id": 127167575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434005
    },
    {
        "content": "<p>cunning</p>",
        "id": 127167577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434007
    },
    {
        "content": "<p>you can construct proofs of propositions in Prop in Type, which assert existence of large cardinals</p>",
        "id": 127167578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434008
    },
    {
        "content": "<p>ha ha</p>",
        "id": 127167580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434015
    },
    {
        "content": "<p>oh I hadn't realised that</p>",
        "id": 127167582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434020
    },
    {
        "content": "<p>Prop covers its tracks</p>",
        "id": 127167585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434024
    },
    {
        "content": "<p>that's what impredicativity does for you</p>",
        "id": 127167587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434034
    },
    {
        "content": "<p>But still to <em>construct</em> the proof you need the extra universes, right?</p>",
        "id": 127167632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434051
    },
    {
        "content": "<p>is <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> being impredicative?</p>",
        "id": 127167636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434060
    },
    {
        "content": "<p>you could talk about configurations in Type 63 and it wouldn't make the proof large</p>",
        "id": 127167637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434061
    },
    {
        "content": "<p>I am just interested in exactly what can go wrong with regards to translating a DTT proof into ZFC</p>",
        "id": 127167641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434100
    },
    {
        "content": "<p>right, there are large universes in the proof</p>",
        "id": 127167648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434105
    },
    {
        "content": "<p>Because one day someone serious is going to ask me about this</p>",
        "id": 127167651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434109
    },
    {
        "content": "<p>DTT</p>",
        "id": 127167652,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434114
    },
    {
        "content": "<p>?</p>",
        "id": 127167653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434115
    },
    {
        "content": "<p>so that wouldn't translate</p>",
        "id": 127167654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434119
    },
    {
        "content": "<p>However, this sort of sleight of hand is very rare</p>",
        "id": 127167655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434137
    },
    {
        "content": "<p>And the problem is that the proof might not be mine</p>",
        "id": 127167656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434139
    },
    {
        "content": "<p>The theorem could be formulated about Type in some library</p>",
        "id": 127167657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434151
    },
    {
        "content": "<p>so they work in a system stronger than ZFC?</p>",
        "id": 127167658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434153
    },
    {
        "content": "<p>like how PA can't prove Goodstein?</p>",
        "id": 127167660,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434157
    },
    {
        "content": "<p>and I never look at the proof</p>",
        "id": 127167661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434157
    },
    {
        "content": "<p>Yes Kenny</p>",
        "id": 127167699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434165
    },
    {
        "content": "<p>they work in ZFC + infinitely many inaccessible cardinals here</p>",
        "id": 127167704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434173
    },
    {
        "content": "<p>It's infinitely less likely to be consistent than ZFC</p>",
        "id": 127167707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434191
    },
    {
        "content": "<p>which is weaker than Tarski Grothendieck set theory btw</p>",
        "id": 127167709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434198
    },
    {
        "content": "<p>Grothendieck?!</p>",
        "id": 127167710,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434207
    },
    {
        "content": "<p>which is what most category theorists use</p>",
        "id": 127167713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434219
    },
    {
        "content": "<p>That is equivalent to ZFC + proper class of inaccessible cardinals</p>",
        "id": 127167718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434243
    },
    {
        "content": "<p>here we only need omega many</p>",
        "id": 127167720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434252
    },
    {
        "content": "<p>fascinating</p>",
        "id": 127167723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434266
    },
    {
        "content": "<p>logic never fails to fascinate me</p>",
        "id": 127167725,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434273
    },
    {
        "content": "<p>and for any particular proof you can say \"this used 3 universes\" or such</p>",
        "id": 127167726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434278
    },
    {
        "content": "<p>it's impossible to use all the universes in a proof</p>",
        "id": 127167767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434294
    },
    {
        "content": "<p>But I am specifically interested in the proofs which only use one universe</p>",
        "id": 127167768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434306
    },
    {
        "content": "<p>For example does FLT definitely only use one universe?</p>",
        "id": 127167769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434318
    },
    {
        "content": "<p>well, actually you want zero universes</p>",
        "id": 127167771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434323
    },
    {
        "content": "<p>Oh yes I just want Type</p>",
        "id": 127167772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434331
    },
    {
        "content": "<p>ZFC has zero universes</p>",
        "id": 127167773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434332
    },
    {
        "content": "<blockquote>\n<p>ZFC has zero universes</p>\n</blockquote>\n<p>zero built-in universes</p>",
        "id": 127167776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527434346
    },
    {
        "content": "<p>So currently the reference for \"Wiles/TW proof of FLT is in ZFC\" is \"Email from Conrad\"</p>",
        "id": 127167781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434358
    },
    {
        "content": "<p>It's a bit tricky to work with DTT with zero universes</p>",
        "id": 127167782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434361
    },
    {
        "content": "<p>Why?</p>",
        "id": 127167783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434371
    },
    {
        "content": "<p>Say I globally exchange all the type u for type</p>",
        "id": 127167784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434383
    },
    {
        "content": "<p>how far do I get before the errors appear?</p>",
        "id": 127167786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434394
    },
    {
        "content": "<p>Start with core lean</p>",
        "id": 127167831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434404
    },
    {
        "content": "<p>you have to be careful: <code>Gamma |- A : Type</code> is okay, but <code>Type</code> is not a type, in the sense <code>Gamma |- Type : Type 1</code> doesn't exist</p>",
        "id": 127167834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434415
    },
    {
        "content": "<p>Yeah, I promise I will never ask Type its type.</p>",
        "id": 127167836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434440
    },
    {
        "content": "<p>ZFC people are used to making promises</p>",
        "id": 127167837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434453
    },
    {
        "content": "<p>and they're usually quite good at keeping them</p>",
        "id": 127167838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434463
    },
    {
        "content": "<p>This is the world I have lived in all my life</p>",
        "id": 127167845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434489
    },
    {
        "content": "<p>and you are claiming to offer me more</p>",
        "id": 127167846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434497
    },
    {
        "content": "<p>Also you can have things like <code>A : Type -&gt; Type</code> in ZFC</p>",
        "id": 127167847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434501
    },
    {
        "content": "<p>but I don't see anything of interest out there</p>",
        "id": 127167848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434503
    },
    {
        "content": "<p>but again you can't quantify over them</p>",
        "id": 127167850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434513
    },
    {
        "content": "<p>Yes</p>",
        "id": 127167851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434514
    },
    {
        "content": "<p>no</p>",
        "id": 127167852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434517
    },
    {
        "content": "<p>oh wait</p>",
        "id": 127167891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434525
    },
    {
        "content": "<p>I can quantify over them</p>",
        "id": 127167894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434529
    },
    {
        "content": "<p><code>A : (Type -&gt; Type) -&gt; Type</code> is starting to get weird</p>",
        "id": 127167895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434529
    },
    {
        "content": "<p><code>A : Type -&gt; Type</code> is a proper class function</p>",
        "id": 127167899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434543
    },
    {
        "content": "<p>I just have to write some footnote explaining about how it can all be done properly if you ask a set theorist</p>",
        "id": 127167900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434546
    },
    {
        "content": "<p>because no object I consider in my paper has size greater than 2^2^2^2^aleph_0 so it's all OK</p>",
        "id": 127167902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434569
    },
    {
        "content": "<p>who needs inaccessible cardinals</p>",
        "id": 127167903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434582
    },
    {
        "content": "<p>I just something closed under a few iterations of the power set axiom and I'll be fine</p>",
        "id": 127167909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434591
    },
    {
        "content": "<p>That's really hard to do formally</p>",
        "id": 127167910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434607
    },
    {
        "content": "<p>There will be people out there who care about this.</p>",
        "id": 127167913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434620
    },
    {
        "content": "<p>at least if you didn't literally do that in the proof</p>",
        "id": 127167916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434622
    },
    {
        "content": "<p>Right, and who wants to do that?</p>",
        "id": 127167918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434633
    },
    {
        "content": "<p>We just wanna have fun</p>",
        "id": 127167919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434637
    },
    {
        "content": "<p>I don't see any reason why ZFC should stay as the prevalent model of mathematics</p>",
        "id": 127167961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434666
    },
    {
        "content": "<p>What you want is a way to take a proof and shrink all the things in it to ZFC things</p>",
        "id": 127167962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434674
    },
    {
        "content": "<p>but without a doubt it is the prevalent model of mathematics</p>",
        "id": 127167964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434679
    },
    {
        "content": "<p>I don't</p>",
        "id": 127167965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434682
    },
    {
        "content": "<p>but some people might</p>",
        "id": 127167968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434684
    },
    {
        "content": "<p>and I have them in mind</p>",
        "id": 127167969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434686
    },
    {
        "content": "<p>or 2^2^2^2^aleph_0 things</p>",
        "id": 127167973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434702
    },
    {
        "content": "<p>and it's my job to figure out how to make sense of your request</p>",
        "id": 127167984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434724
    },
    {
        "content": "<p>There are theorems of the form \"if you proved X using 3 universes then you could have done it in ZFC\" I think</p>",
        "id": 127167989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434728
    },
    {
        "content": "<p>I think someone might have told me that even though wiles <em>certainly</em> used AC in his proof, FLT was now known to be a theorem of ZF</p>",
        "id": 127168008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434762
    },
    {
        "content": "<p>because one of these magic meta-theorem things</p>",
        "id": 127168036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527434770
    },
    {
        "content": "<p>yes, it's a pi01 statement so magic happens</p>",
        "id": 127168042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527434799
    },
    {
        "content": "<p>here's the sheaf axiom using the poset presheaf definition:</p>\n<div class=\"codehilite\"><pre><span></span>def gluing {α} [complete_lattice α] (F : order_presheaf α)\n  (X : α) {ι : Type*} (Y : ι → α) (Hcov : X = ⨆ i, Y i)\n  (r : F.F X) :\n  {a : Π i, F.F (Y i) | ∀ (i j : ι),\n    F.res (Y i ⊓ Y j) inf_le_left (a i) =\n    F.res (Y i ⊓ Y j) inf_le_right (a j) } :=\n⟨λ i, F.res (Y i) (by rw Hcov; apply le_supr) r,\n λ i j, by simp [F.comp]⟩\n\ndef is_order_sheaf {α : Type u} [complete_lattice α]\n  (F : order_presheaf α) : Prop :=\n∀ (X : α) {ι : Type u} (Y : ι → α) (Hcov : X = ⨆ i, Y i),\nfunction.bijective (gluing F X Y Hcov)\n</pre></div>",
        "id": 127168485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527435894
    },
    {
        "content": "<p>Did you look at what I did?</p>",
        "id": 127168542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436039
    },
    {
        "content": "<p>yes, it was based on your definition</p>",
        "id": 127168543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436049
    },
    {
        "content": "<p>ha ha hope I didn't make a mistake :-)</p>",
        "id": 127168545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436078
    },
    {
        "content": "<p>I think probably <code>bijective</code> makes more axioms than you really need here</p>",
        "id": 127168585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436122
    },
    {
        "content": "<p>like it's probably already injective</p>",
        "id": 127168586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436130
    },
    {
        "content": "<p>I would just state the actual condition you want, and prove it implies this function is bijective</p>",
        "id": 127168592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436180
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/009I\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/009I\">https://stacks.math.columbia.edu/tag/009I</a></p>",
        "id": 127168644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436282
    },
    {
        "content": "<p>Actually I guess I just copied everything from the stacks project (and spotted a mistake or two along the way :-) )</p>",
        "id": 127168648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436301
    },
    {
        "content": "<p>no, injective needs checking</p>",
        "id": 127168688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436340
    },
    {
        "content": "<p>A presheaf is just a functor</p>",
        "id": 127168689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436349
    },
    {
        "content": "<p>It takes an open set to a type</p>",
        "id": 127168690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436364
    },
    {
        "content": "<p>I could easily replace its value on X with some gigantic type that maps to the old  value</p>",
        "id": 127168694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436377
    },
    {
        "content": "<p>If you think of them as sheaves of functions then injectivity may well be obvious</p>",
        "id": 127168700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436411
    },
    {
        "content": "<p>but this is a true pi type -- it takes an open set to a random type, not functions on U or anything</p>",
        "id": 127168702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436436
    },
    {
        "content": "<p>and res is part of the data, not restriction of functions</p>",
        "id": 127168739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436445
    },
    {
        "content": "<p>So are you interested in putting this presheaf and sheaf stuff in mathlib?</p>",
        "id": 127168747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436513
    },
    {
        "content": "<p>I'm not bothered either way</p>",
        "id": 127168749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436516
    },
    {
        "content": "<p>but it is compositional</p>",
        "id": 127168750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436516
    },
    {
        "content": "<p>yes but that's an axiom</p>",
        "id": 127168753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436525
    },
    {
        "content": "<p>one of the two axioms of functor</p>",
        "id": 127168754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436535
    },
    {
        "content": "<p>Of course, I'm assuming it's a presheaf already</p>",
        "id": 127168756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436549
    },
    {
        "content": "<p>gotcha</p>",
        "id": 127168757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436554
    },
    {
        "content": "<p>I don't know whether I should bother tidying everything up</p>",
        "id": 127168797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436572
    },
    {
        "content": "<p>I mean the condition of being a sheaf can be stated more directly given it's a presheaf</p>",
        "id": 127168798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436576
    },
    {
        "content": "<p>right</p>",
        "id": 127168799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436581
    },
    {
        "content": "<p>but you still don't get injectivity for free</p>",
        "id": 127168801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436591
    },
    {
        "content": "<p>because I can replace F X</p>",
        "id": 127168802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436601
    },
    {
        "content": "<p>with with a random type Y that mapped to the old F X</p>",
        "id": 127168805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436617
    },
    {
        "content": "<p>X the whole space</p>",
        "id": 127168806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436620
    },
    {
        "content": "<p>and then it's still a presheaf</p>",
        "id": 127168809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436626
    },
    {
        "content": "<p>but there's no reason Y -&gt; old F X is injective</p>",
        "id": 127168813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436635
    },
    {
        "content": "<p>so I broke the sheaf property precisely by breaking injectivity</p>",
        "id": 127168814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Re: <code>@[simp]</code> and left-to-right rewriting, perhaps, by browsing through the <code>@[simp]</code> theorems in <a href=\"https://github.com/spl/tts/blob/32df31590e3f7a88eeea6d672981ac1de93c0af7/src/env/props.lean\" target=\"_blank\" title=\"https://github.com/spl/tts/blob/32df31590e3f7a88eeea6d672981ac1de93c0af7/src/env/props.lean\">this file</a>, you can get an idea of why they are structured the way they are.</p>",
        "id": 127191991,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527489607
    }
]