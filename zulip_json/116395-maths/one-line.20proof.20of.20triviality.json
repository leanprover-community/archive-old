[
    {
        "content": "<p>The following is a bit annoying from a pedagogical perspective. Is there any workaround short of \"don't introduce epsilon\" or \"remove epsilon by writing <code>show (b - a) / 2 &gt; 0</code> before <code>linarith</code>\"? I'm completely happy to make local modifications to <code>linarith</code>; I'm thinking about making a real number game but obviously I want to make everything as easy as possible for the mathematician end-user (I'm targetting UGs who are learning about limits right now at my university).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 180885201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573863505
    },
    {
        "content": "<p>Does <code>dsimp [ε]; linarith</code> work?</p>",
        "id": 180885513,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573863841
    },
    {
        "content": "<p>Aah it does. I tried <code>unfold \\e</code> and that didn't work but your trick does.</p>",
        "id": 180885564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573863882
    },
    {
        "content": "<p>I'd still rather have a tactic which didnt mention epsilon at all though, so I could just attach it to linarith.</p>",
        "id": 180885592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573863916
    },
    {
        "content": "<p><code>dsimp *, linarith</code> works</p>",
        "id": 180885620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573863953
    },
    {
        "content": "<p>If you used <code>generalize</code> instead of <code>let</code> it would work.</p>",
        "id": 180885673,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573863975
    },
    {
        "content": "<p>although it might well have side effects.</p>",
        "id": 180885677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573863980
    },
    {
        "content": "<p><code>generalize</code> makes more sense for learners.</p>",
        "id": 180885699,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573864003
    },
    {
        "content": "<p>because you get the hypothesis that <code>epsilon = (a - b) / 2</code></p>",
        "id": 180885719,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573864036
    },
    {
        "content": "<p>but epsilon isn't in the target until after the have</p>",
        "id": 180885743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573864073
    },
    {
        "content": "<p>you're right though in that if I add <code>h1 : ε = (m - l) / 2</code> to the local context then linarith works again. What does this <code>ε : ℝ := (m - l) / 2,</code> mean then? linarith can't see through it but it's not a hypothesis either?</p>",
        "id": 180885915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573864224
    },
    {
        "content": "<p>I could hack <code>let</code> so that <code>let A := B</code> adds <code>h : A = B</code> to the local context :-)</p>",
        "id": 180885943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573864274
    },
    {
        "content": "<p>In fact if <code>let A := B</code> changed the local context by adding <code>A : real</code> and <code>hA : A = B</code> rather than doing what it currently does, I wouldn't be in this situation.</p>",
        "id": 180886005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573864352
    },
    {
        "content": "<p><code>generalize</code> is exactly your hacked let. <code>generalise h : (a - b) / 2 = epsilon</code> does what you want I think.</p>",
        "id": 180886149,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573864524
    },
    {
        "content": "<p>Oh you're absolutely right! I tried it and it didn't work but I think I got the equality the wrong way around. Thanks! I misunderstood the man page -- it talking about replacing things in the \"target\" which I incorrectly assumed meant \"the goal\"</p>",
        "id": 180886337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573864700
    },
    {
        "content": "<p>I think it does mean the goal. If there is an <code>(a - b) /2</code> in the goal it will be replaced with <code>epsilon</code></p>",
        "id": 180886793,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573865204
    },
    {
        "content": "<p>I thought I added the <code>set</code> tactic because you asked exactly this question before. <code>set ε := (b - a) / 2 with h</code> or something like that should work.</p>",
        "id": 180903897,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573894363
    },
    {
        "content": "<blockquote>\n<p>you're right though in that if I add <code>h1 : ε = (m - l) / 2</code> to the local context then linarith works again. What does this <code>ε : ℝ := (m - l) / 2,</code> mean then? linarith can't see through it but it's not a hypothesis either?</p>\n</blockquote>\n<p>It means epsilon is \"locally defined\" to be <code>(m - l)/2</code>. You shouldn't expect <code>linarith</code> to see through it any more than if it were a function <code>epsilon m l</code> you defined separately.</p>",
        "id": 180904007,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573894589
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/linarith.20failure/near/157057941\" title=\"#narrow/stream/116395-maths/topic/linarith.20failure/near/157057941\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/linarith.20failure/near/157057941</a></p>",
        "id": 180904061,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573894730
    },
    {
        "content": "<p>Would it make sense for <code>linarith [ε]</code> to unfold epsilon as a preprocessing step?</p>",
        "id": 180904288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573895216
    },
    {
        "content": "<p>That syntax is taken for adding to/restricting the list of inequalities it uses, but yes, something like that could be done. But <code>linarith unfolding [epsilon]</code> would just be sugar for <code>unfold epsilon; linarith</code>, it's barely different.</p>",
        "id": 180904425,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573895503
    },
    {
        "content": "<p>I tried unfold epsilon and it didn't work iirc</p>",
        "id": 180906162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573898871
    },
    {
        "content": "<p>I like the <code>set</code> solution best! Thanks Rob</p>",
        "id": 180906211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573898914
    },
    {
        "content": "<p>Not all unfolding tactics know how to unfold let expressions in the context, they are a bit special</p>",
        "id": 180906278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573899033
    },
    {
        "content": "<p><code>dsimp</code> does, but AFAIK dunfold and unfold don't</p>",
        "id": 180906288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573899069
    },
    {
        "content": "<blockquote>\n<p>I like the <code>set</code> solution best! Thanks Rob</p>\n</blockquote>\n<p>I'm not surprised, since it was added in response to you asking this exact question in January!</p>",
        "id": 180906333,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573899159
    },
    {
        "content": "<p>January was a long time ago for my brain :D</p>",
        "id": 180907548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573901491
    },
    {
        "content": "<p>the gift that keeps on giving</p>",
        "id": 180907592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573901532
    },
    {
        "content": "<p>I'll try to remember to ask again next August or so.</p>",
        "id": 180907609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573901624
    },
    {
        "content": "<p>In fact I'm more likely to remember it this time, because probably in Jan I just needed it to show off Lean in some informal seminars I was giving to analysis students, whereas this time I am trying to make some real number game using it so now I have to think about how to teach it, and teaching is always a good way of learning stuff.</p>",
        "id": 180907663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573901719
    },
    {
        "content": "<blockquote>\n<p><a href=\"#narrow/stream/116395-maths/topic/linarith.20failure/near/157057941\" title=\"#narrow/stream/116395-maths/topic/linarith.20failure/near/157057941\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/linarith.20failure/near/157057941</a></p>\n<p>In practice I have some positive real eps := (b - a) / 2</p>\n</blockquote>\n<p>rofl</p>",
        "id": 180907841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573902052
    },
    {
        "content": "<p>As a bit of solace... at some point I found a really interesting question on mathoverflow about the Mumford–Tate conjecture. I was so excited that someone was thinking about these questions in the exact same way as I was... well you can figure out the rest (-;</p>",
        "id": 180908031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573902395
    },
    {
        "content": "<p>Oh that happens to me all the time! :D</p>",
        "id": 180909106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573904747
    }
]