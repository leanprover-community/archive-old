[
    {
        "content": "<p>Hi everyone. I would really appreciate any comments on how to improve this proof. Also, is this result in the library?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">lattice</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inclusion</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span>\n<span class=\"n\">def</span> <span class=\"n\">subspace_top</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_bot_left</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">⊓</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">neq_bot_of_le_neq_bot</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">inf_le_left</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">compact_subset_of_t2space_is_closed</span>\n    <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_closed</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">is_closed_iff_nhds</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">mp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mpr</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">mpr</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rename</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">principal</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"err\">⊓</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">sc</span> <span class=\"n\">f</span> <span class=\"n\">a_1</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">nhds</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">,</span>\n        <span class=\"n\">rewrite</span> <span class=\"n\">inf_assoc</span> <span class=\"n\">at</span> <span class=\"n\">a_4</span><span class=\"o\">,</span> <span class=\"c1\">-- if I do inf_assoc first it fails?!</span>\n        <span class=\"n\">rewrite</span> <span class=\"n\">inf_comm</span> <span class=\"n\">at</span> <span class=\"n\">a_4</span><span class=\"o\">,</span>\n        <span class=\"n\">rewrite</span> <span class=\"n\">inf_assoc</span> <span class=\"n\">at</span> <span class=\"n\">a_4</span><span class=\"o\">,</span>\n        <span class=\"n\">rewrite</span> <span class=\"n\">inf_comm</span> <span class=\"n\">at</span> <span class=\"n\">a_4</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">not_bot_left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H4</span><span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq_of_nhds_neq_bot</span> <span class=\"n\">H5</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">H4</span> <span class=\"n\">at</span> <span class=\"n\">a_3</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 132127153,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534271289
    },
    {
        "content": "<p>Version 2:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">compact_subset_of_t2space_is_closed_2</span>\n    <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_closed</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">is_closed_iff_nhds</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">principal</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"n\">f</span> <span class=\"n\">H1</span> <span class=\"n\">inf_le_right</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">H2</span>\n        <span class=\"o\">(</span>\n            <span class=\"k\">assume</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n            <span class=\"n\">suffices</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n            <span class=\"n\">suffices</span> <span class=\"n\">nhds</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">principal</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq_of_nhds_neq_bot</span> <span class=\"err\">$</span> <span class=\"n\">not_bot_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n            <span class=\"k\">by</span> <span class=\"n\">cc</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</pre></div>",
        "id": 132129134,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534272877
    },
    {
        "content": "<p>Found it in library: <code>closed_of_compact</code></p>",
        "id": 132133848,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534277658
    },
    {
        "content": "<p>Although I proved it with filters</p>",
        "id": 132133886,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534277723
    },
    {
        "content": "<p>First line of proof could be <code>is_closed_iff_nhds.2 (λ y H1,</code> (<code>iff</code> is a structure and you can access its elements with <code>.1</code>, <code>.2</code>). There's a mathlib style guide and you're not conforming to it (I don't think they like the one-bracket-on-a-line thing, and I know they like 2 spaces indent rather than 4).  <code>by rw this; assumption,</code> could be <code>by rwa this</code> (<code>rwa</code> = <code>rw ; assumption</code>, similarly <code>simpa</code>).</p>",
        "id": 132134882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534278846
    },
    {
        "content": "<p>but it's certainly a darn sight better than I could have done :-)</p>",
        "id": 132134906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534278893
    },
    {
        "content": "<p><code>simpa</code> is more than <code>simp ... ; assumption</code>, see <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#simpa\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#simpa\">https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#simpa</a></p>",
        "id": 132134941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534278954
    },
    {
        "content": "<p>Instead of <code>λ a H2, exists.elim H2 ...</code> I wonder if you could have done <code>λ a ⟨H,H2⟩,</code> and then you can maybe avoid the <code>exists.elim</code></p>",
        "id": 132135482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534279524
    },
    {
        "content": "<p>Everybody dreams that could be possible, but no.</p>",
        "id": 132135502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534279552
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">H3</span><span class=\"o\">,</span><span class=\"n\">H4</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span>\n            <span class=\"n\">suffices</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>;-)</p>",
        "id": 132135570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534279593
    },
    {
        "content": "<p>Latest discussion is probably <a href=\"#narrow/stream/113488-general/topic/eta.20for.20structures\" title=\"#narrow/stream/113488-general/topic/eta.20for.20structures\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/eta.20for.20structures</a></p>",
        "id": 132135580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534279607
    },
    {
        "content": "<p>I got lucky because he assumes <code>H3</code> and <code>H4</code></p>",
        "id": 132135586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534279619
    },
    {
        "content": "<blockquote>\n<p>There's a mathlib style guide </p>\n</blockquote>\n<p>I should read that.</p>",
        "id": 132135629,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534279675
    },
    {
        "content": "<p>Kevin, I don't understand what you wrote? Do you have something that compiles?</p>",
        "id": 132135806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534279818
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">compact_subset_of_t2space_is_closed_2</span>\n  <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_closed</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_closed_iff_nhds</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">principal</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"n\">f</span> <span class=\"n\">H1</span> <span class=\"n\">inf_le_right</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span> <span class=\"n\">suffices</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"n\">nhds</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">principal</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq_of_nhds_neq_bot</span> <span class=\"err\">$</span> <span class=\"n\">not_bot_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>My attempt to conform to mathlib style guide but I'm not sure I am -- I don't normally do term mode</p>",
        "id": 132135863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534279869
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/style.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/style.md\">https://github.com/leanprover/mathlib/blob/master/docs/style.md</a></p>",
        "id": 132135967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534279931
    },
    {
        "content": "<p><code>from by</code> is redundant</p>",
        "id": 132135972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534279934
    },
    {
        "content": "<p><code>by</code> is enough</p>",
        "id": 132135979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534279943
    },
    {
        "content": "<p>how is it possible that <code>λ a ⟨_,_⟩,</code>? Someone lied to me!</p>",
        "id": 132135997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534279961
    },
    {
        "content": "<p>There's a problem with that idiom</p>",
        "id": 132136008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534279978
    },
    {
        "content": "<p>use <code>$</code> to drop the parentheses and indents</p>",
        "id": 132136024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534279986
    },
    {
        "content": "<p>It doesn't unfold <em>at all</em> well</p>",
        "id": 132136027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534279990
    },
    {
        "content": "<p>it unfolds exactly as well as <code>exists.elim</code></p>",
        "id": 132136044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534280007
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/naming.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/naming.md\">https://github.com/leanprover/mathlib/blob/master/docs/naming.md</a> explains why this lemma is called <code>closed_of_compact</code></p>",
        "id": 132136071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534280041
    },
    {
        "content": "<p>I should also say that I don't know if any of my suggested changes are _better_, I'm just observing that they exist :-)</p>",
        "id": 132136230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534280153
    },
    {
        "content": "<p>there is worth in separating stylistic improvements from proof improvements</p>",
        "id": 132136347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534280230
    },
    {
        "content": "<p>space after comma <code> ⟨_, _⟩,</code></p>",
        "id": 132136428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534280286
    },
    {
        "content": "<p>you can use <code>let</code> match in place of <code>exists.elim</code></p>",
        "id": 132136501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534280374
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">compact_subset_of_t2space_is_closed_2</span>\n  <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_closed_iff_nhds</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sc</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">principal</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"n\">inf_le_right</span> <span class=\"k\">in</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">nhds</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">principal</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">eq_of_nhds_neq_bot</span> <span class=\"err\">$</span> <span class=\"n\">not_bot_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">cc</span>\n</pre></div>",
        "id": 132137333,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534281155
    },
    {
        "content": "<p>I think you got everything</p>",
        "id": 132137444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534281283
    },
    {
        "content": "<p>Fabulous thanks so much for your help everyone.</p>",
        "id": 132137466,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534281315
    },
    {
        "content": "<p>oh, the name needs work</p>",
        "id": 132137479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534281334
    },
    {
        "content": "<p>then again <code>closed_of_compact</code> is already taken, I hear</p>",
        "id": 132137536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534281372
    },
    {
        "content": "<p>Yes I found it in <code>continuity.lean</code>.</p>",
        "id": 132137637,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534281541
    },
    {
        "content": "<p>My big problem with proving this was not knowing what lemmas were available. I would use vscodes find window with regex to find candidate lemmas. Are there any search tools in Lean?</p>",
        "id": 132137712,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534281630
    },
    {
        "content": "<p>tactic.find in mathlib</p>",
        "id": 132137720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534281653
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover/mathlib/blob/master/docs/tactics.md</a></p>",
        "id": 132137729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534281679
    },
    {
        "content": "<p>Reading mathlib doc would probably be a good idea</p>",
        "id": 132137739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534281697
    },
    {
        "content": "<p>That find tactic is from Sebastian btw</p>",
        "id": 132137748,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534281713
    },
    {
        "content": "<p>Let me try something more constructive than OS recommendations. Since you like term mode, why isn't the first lemma:<br>\n<code>lemma not_bot_left (f g : filter α) (H1 : f ⊓ g ≠ ⊥) : f ≠ ⊥ := neq_bot_of_le_neq_bot H1 inf_le_left</code></p>",
        "id": 132142686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534288478
    },
    {
        "content": "<p>and mathlib name would probably be closer to <code>neq_bot_of_inf_neq_bot_left</code></p>",
        "id": 132142828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534288763
    }
]