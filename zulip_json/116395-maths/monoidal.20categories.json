[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128547\">@Michael Jendrusch</span> has recently started work on monoidal categories again. (Yay!)</p>",
        "id": 146915123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561060
    },
    {
        "content": "<p>I've been looking at what he's written, and I want to resume my rant about how terrible coercions are, as a result.</p>",
        "id": 146915139,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561082
    },
    {
        "content": "<p>He's defined monoidal categories, and I think these are uncontroversial.</p>",
        "id": 146915148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561110
    },
    {
        "content": "<p><a href=\"https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_category.lean\" target=\"_blank\" title=\"https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_category.lean\">https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_category.lean</a></p>",
        "id": 146915151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561123
    },
    {
        "content": "<p>so many axioms...</p>",
        "id": 146915158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561145
    },
    {
        "content": "<p>However when he gets to monoidal functors the horrors caused by coercions start to creep out...</p>",
        "id": 146915160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561147
    },
    {
        "content": "<p>Ah -- maybe I should address that first.</p>",
        "id": 146915162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561155
    },
    {
        "content": "<p>You might have said:</p>",
        "id": 146915165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561159
    },
    {
        "content": "<p>surely a monoidal category should be described as a category <code>C</code> equipped with a functor <code>C \\times C \\func C</code>, satisfying ...</p>",
        "id": 146915211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561188
    },
    {
        "content": "<p>(this will certainly reduce the number of axioms, at least slightly, because various things are wrapped up in functoriality)</p>",
        "id": 146915216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561207
    },
    {
        "content": "<p>However... implementation details forced on us by Lean make this a bad idea (as I discovered when I did monoidal categories previously)</p>",
        "id": 146915225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561236
    },
    {
        "content": "<p>hopefully you prove the equivalence though?</p>",
        "id": 146915228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561258
    },
    {
        "content": "<p>Yes, it's easy (and Michael started doing it) to show afterwards that these things assemble into functors, and natural transformations, and so on.</p>",
        "id": 146915274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561297
    },
    {
        "content": "<p>The problem with making tensor product a functor first of all is that it becomes really painful to implement notation <code>X \\otimes Y</code> and <code>f \\otimes' g</code>.</p>",
        "id": 146915297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561354
    },
    {
        "content": "<p>what's the issue?</p>",
        "id": 146915307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561390
    },
    {
        "content": "<p>You end up having to define as auxiliary lemmas curried versions of the functor of objects, but even then the elaborator often really struggles.</p>",
        "id": 146915348,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561404
    },
    {
        "content": "<p>(Sorry, it's been a year or so since I last fought with this issue... give me a moment.)</p>",
        "id": 146915363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561436
    },
    {
        "content": "<p>Can you make it a curried functor instead?</p>",
        "id": 146915369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561453
    },
    {
        "content": "<p>cat being a CCC and all</p>",
        "id": 146915376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561463
    },
    {
        "content": "<p>You could make it a curried functor, but I don't think it would help. If T was your tensor product functor, you still couldn't write <code>T X Y</code> and have the elaborator successfully introduce both coercions.</p>",
        "id": 146915434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561523
    },
    {
        "content": "<p>Neither <code>T (X, Y)</code>, if <code>T : C \\times C \\func C</code>, or <code>T X Y</code>, if <code>T : C \\func (C \\func C)</code> will elaborate reliably. (In fact, I think they won't ever elaborate.)</p>",
        "id": 146915471,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561588
    },
    {
        "content": "<p>that's sad...</p>",
        "id": 146915479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561600
    },
    {
        "content": "<p>You can see examples of this all over my (no-longer-compiling) earlier attempt at monoidal categories.</p>",
        "id": 146915532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561654
    },
    {
        "content": "<p>What about an infix functor application operator?</p>",
        "id": 146915535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561657
    },
    {
        "content": "<p>like <code>&lt;$&gt;</code> for <code>functor</code></p>",
        "id": 146915540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[ematch] definition interchange (f : U ⟶ V) (g : V ⟶ W) (h : X ⟶ Y) (k : Y ⟶ Z) :\n  (f ≫ g) ⊗ (h ≫ k) = (f ⊗ h) ≫ (g ⊗ k) :=\n  @Functor.functoriality (C × C) _ C _ (tensor C) ⟨U, X⟩ ⟨V, Y⟩ ⟨W, Z⟩ ⟨f, h⟩ ⟨g, k⟩\n</pre></div>\n\n\n<p>should really just be proved by <code>(tensor  C).map_comp (f, h) (g,k)</code>, but instead we need to use @, and specify way too many implicit arguments.</p>",
        "id": 146915549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561703
    },
    {
        "content": "<p>Yes --- so this is what I had long ago.</p>",
        "id": 146915556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561718
    },
    {
        "content": "<p>I had <code>+&gt;</code> for obj, and <code>&amp;&gt;</code> for map, although I really don't care what the symbols are.</p>",
        "id": 146915560,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561732
    },
    {
        "content": "<p>I would _love_ to move back to this model, which would let us get rid of lots of coercions.</p>",
        "id": 146915564,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561739
    },
    {
        "content": "<p>I've heard this story before, and I don't disagree with you</p>",
        "id": 146915612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561768
    },
    {
        "content": "<p>I really want coercions to work, and in principle they could, but lean's coercion model is not extensible enough</p>",
        "id": 146915628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561811
    },
    {
        "content": "<p>it should be a parser extension rather than being tied to <code>coe</code> in core</p>",
        "id": 146915646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561840
    },
    {
        "content": "<p>If we were in a situation where modifying the coercion mechanism was on the table, I would absolutely support struggling on with coercions, essentially to gain data about what we really want.</p>",
        "id": 146915652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561870
    },
    {
        "content": "<p>But I'm not sure whether <span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span> gives us this prospect, or not.</p>",
        "id": 146915697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561890
    },
    {
        "content": "<p>I think it might, at least it should not be far from the areas under development</p>",
        "id": 146915706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561926
    },
    {
        "content": "<p>If my fighting with coercions is not significantly likely to result in better coercions later, I just want the suffering to go away. :-)</p>",
        "id": 146915710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561940
    },
    {
        "content": "<p>the fact that simp doesn't work under coercions is something we might be able to fix in lean 3</p>",
        "id": 146915724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541561984
    },
    {
        "content": "<p>I haven't even started explaining the difficulties coercions are causing in the design of <code>monoidal_functor</code>... :-)</p>",
        "id": 146915727,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541561997
    },
    {
        "content": "<p>right, sorry to derail your story. carry on</p>",
        "id": 146915773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562020
    },
    {
        "content": "<p>Essentially: if we want <code>monoidal_functor</code> to extend <code>functor</code>, we need new coercions so we can still write <code>F X</code>, when <code>F</code> is a monoidal functor. Now however none of the lemmas involving <code>F X</code> will apply when <code>F</code> is a monoidal functor, because the coercion won't be the right one.</p>",
        "id": 146915790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562075
    },
    {
        "content": "<p>So we'll have to reproduce all the lemmas...</p>",
        "id": 146915792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562094
    },
    {
        "content": "<p>And we'll have to do this again for <code>braided_functor</code>, and then again for <code>additive_functor</code>, and then again for ...</p>",
        "id": 146915795,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562116
    },
    {
        "content": "<p>wait, what's a monoidal functor now</p>",
        "id": 146915834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562123
    },
    {
        "content": "<p>oh <a href=\"https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_functor.lean\" target=\"_blank\" title=\"https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_functor.lean\">https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_functor.lean</a></p>",
        "id": 146915847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562151
    },
    {
        "content": "<p>monoidal functor doesn't exist yet, beyond Michael's first cut at <a href=\"https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_functor.lean\" target=\"_blank\" title=\"https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_functor.lean\">https://github.com/mjendrusch/monoidal-categories-reboot/blob/master/src/monoidal_categories_reboot/monoidal_functor.lean</a></p>",
        "id": 146915848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562151
    },
    {
        "content": "<p>and you can see at the bottom of that file the problems waiting for us as soon as we define composition of monoidal functors.</p>",
        "id": 146915853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562177
    },
    {
        "content": "<p>What's the alternative?</p>",
        "id": 146915944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562330
    },
    {
        "content": "<p>well, if all the coercions were gone, our problems would mostly disappear.</p>",
        "id": 146915954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562350
    },
    {
        "content": "<p>if the coercions were gone, it wouldn't typecheck. Are you writing explicit functions now?</p>",
        "id": 146915997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562377
    },
    {
        "content": "<p>Instead of having <code>functor.map'</code>, the structure field, which doesn't use the coercion, and <code>functor.map</code>, the same, as a lemma written using the coercion, we'd just have the structure field.</p>",
        "id": 146916000,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562380
    },
    {
        "content": "<p><code>F.to_functor.map f</code>?</p>",
        "id": 146916006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562412
    },
    {
        "content": "<p>So we wouldn't have to define a new version of <code>map</code> for monoidal functors, so all the lemmas about <code>functor.map</code> would still apply</p>",
        "id": 146916008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562415
    },
    {
        "content": "<p>Yes.</p>",
        "id": 146916009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562417
    },
    {
        "content": "<p>But you wouldn't have to write the <code>.to_functor</code> explicitly.</p>",
        "id": 146916020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562432
    },
    {
        "content": "<p>?</p>",
        "id": 146916022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562439
    },
    {
        "content": "<p>what's the magic sauce you are using in place of coercions</p>",
        "id": 146916025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562461
    },
    {
        "content": "<p>Am I wrong? I thought that's how the extension mechanism works -- you can refer directly to the fields of the parent structure.</p>",
        "id": 146916029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562470
    },
    {
        "content": "<p>It depends on whether you are using the old structures or new</p>",
        "id": 146916074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562502
    },
    {
        "content": "<p>new</p>",
        "id": 146916076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562525
    },
    {
        "content": "<p>but this certainly works, I just double checked :-)</p>",
        "id": 146916082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562536
    },
    {
        "content": "<p>Is the <code>to_functor</code> in the pp.all term?</p>",
        "id": 146916094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541562572
    },
    {
        "content": "<p>Yes</p>",
        "id": 146916287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562894
    },
    {
        "content": "<p>The <code>to_functor</code> is in fact there even without <code>pp.all</code>. You just don't need to write it.</p>",
        "id": 146916297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541562924
    },
    {
        "content": "<p>As far as I can see the parser is doing this. There's no <code>monoidal_functor.obj</code> field at all,  but you can nevertheless write <code>F.obj X</code> when <code>F</code> is a monoidal functor, and when you pp the resulting term it shows as <code>F.to_functor.obj X</code>.</p>",
        "id": 146916427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563128
    },
    {
        "content": "<p>The essential problem is that because of coercions, we have all this duplication: <code>functor</code> has both <code>map'</code> and <code>map</code>, and <code>map_comp'</code> and <code>map_comp</code>, etc.</p>",
        "id": 146916445,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563178
    },
    {
        "content": "<p>Every time we extend functor (or anything similar), we will need to reproduce all this duplication again.</p>",
        "id": 146916452,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563198
    },
    {
        "content": "<p>hm, this is parser magic we can't duplicate</p>",
        "id": 146916502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541563225
    },
    {
        "content": "<p>Sorry, so to go back to the start, if we forgot about coercions entirely, is there still an issue with defining the tensor product to be a functor from C x C to C?</p>",
        "id": 146916655,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541563551
    },
    {
        "content": "<p>I think there still is.</p>",
        "id": 146916709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563629
    },
    {
        "content": "<p>The basic question is how to implement <code>X \\otimes Y</code>.</p>",
        "id": 146916711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563645
    },
    {
        "content": "<p><code>T.app (X, Y)</code>?</p>",
        "id": 146916717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541563667
    },
    {
        "content": "<p>You mean <code>T.obj (X, Y)</code>?</p>",
        "id": 146916719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563678
    },
    {
        "content": "<p>er, <code>T.obj</code></p>",
        "id": 146916720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541563681
    },
    {
        "content": "<p>I can see that writing down the functors which the associator is supposed to be a natural isomorphism between is going to be ugly</p>",
        "id": 146916765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541563713
    },
    {
        "content": "<p>The problem there is that for reasons I don't totally understand, even having the pair construction in there gums up the elaborator.</p>",
        "id": 146916767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563719
    },
    {
        "content": "<p>hm</p>",
        "id": 146916768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541563726
    },
    {
        "content": "<p>My old monoidal-categories repository didn't use any coercions.</p>",
        "id": 146916773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563740
    },
    {
        "content": "<p>(unfortunately I don't have a compiling version of it anymore...)</p>",
        "id": 146916780,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563755
    },
    {
        "content": "<p>But I found myself having to use</p>\n<div class=\"codehilite\"><pre><span></span>-- Convenience methods which take two arguments, rather than a pair. (This seems to often help the elaborator avoid getting stuck on `prod.mk`.)\ndefinition tensorObjects (X Y : C) : C := (tensor C) +&gt; (X, Y)\n\ninfixr ` ⊗ `:80 := tensorObjects -- type as \\otimes\n</pre></div>",
        "id": 146916812,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563803
    },
    {
        "content": "<p>Another question: how about using isos for the associator/unitors instead of four fields each?</p>",
        "id": 146916854,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541563866
    },
    {
        "content": "<p>I imagine you thought of that already</p>",
        "id": 146916855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541563880
    },
    {
        "content": "<p>but then there's an extra layer of folding and unfolding <code>tensorObjects</code></p>",
        "id": 146916857,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563893
    },
    {
        "content": "<p>Actually, the question of using isos is a good one.</p>",
        "id": 146916860,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563901
    },
    {
        "content": "<p>and I'm not sure that I did think about it carefully.</p>",
        "id": 146916862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563909
    },
    {
        "content": "<p>I suspect I wrote my initial monoidal categories library before I'd actually ironed out a usable implementation of isomorphisms....</p>",
        "id": 146916903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128547\">@Michael Jendrusch</span>, next time you're around, how about we try this idea out: using isomorphisms as the fields for associators and unitors, rather than the four separate fields?</p>",
        "id": 146916908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541563980
    },
    {
        "content": "<p>Also: no bicategories?? <span class=\"emoji emoji-1f643\" title=\"upside down\">:upside_down:</span></p>",
        "id": 146916961,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541564097
    },
    {
        "content": "<p>I kind of want to formalize (bi)limits in bicategories, since I feel the literature on them is kind of spotty.</p>",
        "id": 146917029,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541564178
    },
    {
        "content": "<p>but, I might want to do it less if it is going to look like <a href=\"https://ncatlab.org/nlab/show/bicategory#detailedDefn\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/bicategory#detailedDefn\">https://ncatlab.org/nlab/show/bicategory#detailedDefn</a>. How would I even know that I got the definition correct?</p>",
        "id": 146918446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541566844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, I've been considering trying to talk <span class=\"user-mention\" data-user-id=\"128547\">@Michael Jendrusch</span> into doing bicategories. :-) I would like them, too.</p>",
        "id": 146922053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541573348
    },
    {
        "content": "<p>But I think it makes sense to sort out the issues we're having here first, and if they are all solvable it might be a cheap rewrite to generalise...</p>",
        "id": 146922071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541573393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128547\">@Michael Jendrusch</span>, I just added two new commits that package associators, unitors, and tensorators as isos. I think it is nicer.</p>",
        "id": 146922130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541573430
    },
    {
        "content": "<p>Yesterday one of my colleagues walked in to have a quick look at the workshop. He is working on derivators and such stuff. He explained how we might want to use multicategories for this. But I'm not sure how much work it would be to set up all the basics. He said it would help us get rid of the pentagon axiom in some sense. But I'm not sure if it means that the carpet won't fit in another corner... (is this an English idiom?).<br>\n<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Are you familiar with this multicategorical approach?</p>",
        "id": 146924968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541577134
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128547\">@Michael Jendrusch</span>, I just added two new commits that package associators, unitors, and tensorators as isos. I think it is nicer.</p>\n</blockquote>\n<p>It's merged! I would kind of like to have bicategories, too, but this looks painful (<a href=\"https://ncatlab.org/nlab/show/bicategory#detailedDefn\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/bicategory#detailedDefn\">https://ncatlab.org/nlab/show/bicategory#detailedDefn</a>).</p>",
        "id": 146925211,
        "sender_full_name": "Michael Jendrusch",
        "timestamp": 1541577592
    },
    {
        "content": "<p>On another note, making <code>µ</code> an iso in the definition of a monoidal functor makes that a _strict_ monoidal functor according to nLab, where I would also want _lax_ monoidal functors. Maybe we can define a _lax_ monoidal functor and then extend it to a _strict_ monoidal functor?</p>",
        "id": 146925412,
        "sender_full_name": "Michael Jendrusch",
        "timestamp": 1541577767
    },
    {
        "content": "<p>Ah, it's  a little subtle. If you want lax monoidal functors, then I want oplax ones (this is a serious request, actually: &lt;<a href=\"https://arxiv.org/abs/1701.00567\" target=\"_blank\" title=\"https://arxiv.org/abs/1701.00567\">https://arxiv.org/abs/1701.00567</a>&gt;. So if we want to do it via inheritance we'll be dealing with a diamond.</p>",
        "id": 146926349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541579329
    },
    {
        "content": "<p>But I agree it's desirable.</p>",
        "id": 146926350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541579341
    },
    {
        "content": "<p>(But you certainly can't use the name monoidal functor if you mean a lax one. :-)</p>",
        "id": 146926357,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541579364
    },
    {
        "content": "<p>Regarding multicategories --- I'm not opposed to someone also introducing these, but I'm pretty confident it's all blind men describing an elephant. Now if we want to talk about disklike categories &lt;<a href=\"https://arxiv.org/pdf/1108.5386.pdf\" target=\"_blank\" title=\"https://arxiv.org/pdf/1108.5386.pdf\">https://arxiv.org/pdf/1108.5386.pdf</a>&gt;, then we'd be cooking with gas.</p>",
        "id": 146926559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541579646
    },
    {
        "content": "<p>Actually, maybe bicategories won't be that bad at all. Shouldn't it just be a matter of asking for <code>Pi a b. category (C a b)</code>, then adding a bunch of type indices everywhere in the definition of monoidal category?</p>",
        "id": 146964187,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541603064
    },
    {
        "content": "<p>Yes, that sounds right. It's a pity you can't mix <code>variables</code> syntax with structures; you could almost leave out all those extra type indices!</p>",
        "id": 147252547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541621929
    },
    {
        "content": "<blockquote>\n<p>Ah, it's  a little subtle. If you want lax monoidal functors, then I want oplax ones (this is a serious request, actually: &lt;<a href=\"https://arxiv.org/abs/1701.00567\" target=\"_blank\" title=\"https://arxiv.org/abs/1701.00567\">https://arxiv.org/abs/1701.00567</a>&gt;. So if we want to do it via inheritance we'll be dealing with a diamond.</p>\n</blockquote>\n<p>It seems that a lot of things in category theory result in diamonds when using inheritance (e.g. with strict monoidal categories). Is there another standard way of treating this without inheritance, and what are the actual problems one gets with diamonds in Lean?</p>",
        "id": 147289125,
        "sender_full_name": "Michael Jendrusch",
        "timestamp": 1541671274
    },
    {
        "content": "<p>would it make sense to try and work around inheritance (and thus diamonds) by not having a classes <code>lax_monoidal_functor</code>, <code>oplax_monoidal_functor</code> both inheriting from functor (and getting a diamond from defining <code>monoidal_functor</code> as inheriting from both), instead opting to have <code>functor_is_lax_monoidal</code>, <code>functor_is_oplax_monoidal</code> together with an instance <code>functor_is_monoidal</code> for every functor which is both lax and oplax, like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">functor_is_lax_monoidal</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u&#39;</span> <span class=\"n\">v&#39;</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- definition of lax monoidal functor here.</span>\n\n<span class=\"n\">class</span> <span class=\"n\">functor_is_oplax_monoidal</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u&#39;</span> <span class=\"n\">v&#39;</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- definition of oplax monoidal functor here.</span>\n\n<span class=\"n\">class</span> <span class=\"n\">functor_is_monoidal</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u&#39;</span> <span class=\"n\">v&#39;</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- definition of monoidal functor here.</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">lax_and_oplax</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u&#39;</span> <span class=\"n\">v&#39;</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">functor_is_lax_monoidal</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">functor_is_oplax_monoidal</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">functor_is_monoidal</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">obviously</span>\n</pre></div>",
        "id": 147297174,
        "sender_full_name": "Michael Jendrusch",
        "timestamp": 1541681934
    },
    {
        "content": "<p>This is an interesting approach; I wonder if we should re-explore making <code>functor</code> a typeclass right from the beginning.</p>",
        "id": 147333122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541714703
    },
    {
        "content": "<p>My concern is that <code>functor_is_monoidal</code> carries data (the tensorator), so it's a little scary making it a typeclass.</p>",
        "id": 147333145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541714737
    },
    {
        "content": "<p>However in my experience it's extremely rare that one considers two different tensorators for the same functor. (Although not _never_)</p>",
        "id": 147333211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541714790
    },
    {
        "content": "<p>But if we're going to carry this data in a typeclass, why aren't we carrying the data of <code>functor.map</code> in a typeclass?</p>",
        "id": 147333229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541714817
    },
    {
        "content": "<p>I have tried this, ..., but it was a long time ago and I don't really remember why I didn't like it then.</p>",
        "id": 147333256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541714847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128547\">@Michael Jendrusch</span>, I started adding the monoidal structure on any category with products, that should subsume your initial example of <code>Type u</code>. It's not there yet, but I think it's a fun test of our limits library to make sure this is doable with no more effort than in the <code>Type u</code> case.</p>",
        "id": 147448765,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541885572
    }
]