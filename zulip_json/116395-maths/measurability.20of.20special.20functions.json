[
    {
        "content": "<p>I'm formalizing measurability of <code>exp</code>, <code>log</code>, etc. Where should it go?</p>",
        "id": 211454337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601272645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> What do you think?</p>",
        "id": 211454339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601272659
    },
    {
        "content": "<p>Should I create a new file or make <code>analysis/calculus/special_functions/*</code> depend on <code>borel_space</code>?</p>",
        "id": 211454383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601272693
    },
    {
        "content": "<p>Another question: what do you think about adding typeclasses <code>has_measurable_(mul/add/neg/div/sub/coe)</code>? Currently a user has to choose, e.g., between <code>measurable.mul</code> and <code>measurable.ennreal_mul</code>.</p>",
        "id": 211454478,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601272819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/measurability.20of.20special.20functions/near/211454383\">said</a>:</p>\n<blockquote>\n<p>Should I create a new file or make <code>analysis/calculus/special_functions/*</code> depend on <code>borel_space</code>?</p>\n</blockquote>\n<p>No strong opinion on this. I would probably let the files depend on <code>borel_space</code> and add measurability statements just after the continuity statements for each function.</p>",
        "id": 211457956,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1601276722
    },
    {
        "content": "<p>Same here.</p>",
        "id": 211460175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601278668
    },
    {
        "content": "<p>Same here. I like Sebastien's suggestion.</p>\n<p>About the <code>has_measurable_*</code> typeclasses, I'm wondering whether we should directly mimic the topological algebraic structures:<br>\n<code>has_measurable_mul</code>, <code>measurable_group</code> (instead of <code>has_measurable_div</code> and <code>has_measurable_inv</code>) and maybe <code>measurable_ring</code>.<br>\n<code>has_measurable_coe</code> would be nice, I guess, so that you don't have to specify which coercion in measurable, but I don't think it's too important.</p>",
        "id": 211535714,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601319997
    },
    {
        "content": "<p>I prefer <code>has_measurable_sub</code> because we'll have instances, e.g., for <code>ennreal</code> and <code>nat</code>.</p>",
        "id": 211535969,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601320142
    },
    {
        "content": "<p>Similarly for <code>has_measurable_div</code></p>",
        "id": 211535995,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601320156
    },
    {
        "content": "<p>And I don't want to extend algebraic classes here to avoid difficulties with assumptions like <code>[topological_add_monoid A] [has_sub A] [has_measurable_sub A]</code></p>",
        "id": 211536254,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601320213
    },
    {
        "content": "<p>Ok, that's also fine by me.</p>",
        "id": 211538522,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601321396
    }
]