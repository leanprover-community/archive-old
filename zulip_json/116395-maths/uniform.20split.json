[
    {
        "content": "<p>I put a lot of work in splitting the uniform space + topological structure + completions mess, in <a href=\"https://github.com/leanprover-community/mathlib/tree/uniform_split\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/uniform_split\">https://github.com/leanprover-community/mathlib/tree/uniform_split</a> But I'm stuck in type class hell. After two suspicious fix in exponential.lean and operator_norm.lean, I'm stuck again in bounded_continuous_map.lean. Clearly there is something wrong, and I can't find what. Help would be very much appreciated <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 159860012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551639037
    },
    {
        "content": "<p>I'm afraid it wont' be possible to help without checking out the branch and try to make it compile</p>",
        "id": 159860022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551639087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span> I think a problem is the <code>has_coe α (completion α) </code> instance for uniform space completions. At last comparing the type class searches for the old and new version it looks like it diverges at this point.</p>\n<p>I don't know how the completion mechanism works exactly. But we have transitivity rules. Maybe this means the type class mechanism will try to find a compitions of <code>α -&gt; (completion α) -&gt; (completion (completion α) ) -&gt; ...</code>. I think we need to remove this completion. I guess we should remove this coercion.</p>",
        "id": 159906971,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551700711
    },
    {
        "content": "<p>Thank you very much for investigating</p>",
        "id": 159907012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551700751
    },
    {
        "content": "<p>I managed to fix the build by providing an explicit instance term. But I shows once again that the type class mechanism is very brittle</p>",
        "id": 159907021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551700787
    },
    {
        "content": "<p>I added <a href=\"https://github.com/leanprover-community/mathlib/blob/uniform_split/src/topology/bounded_continuous_function.lean#L263\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/uniform_split/src/topology/bounded_continuous_function.lean#L263\">https://github.com/leanprover-community/mathlib/blob/uniform_split/src/topology/bounded_continuous_function.lean#L263</a></p>",
        "id": 159907246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551701011
    },
    {
        "content": "<p>it's like the option coe</p>",
        "id": 159907255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551701027
    },
    {
        "content": "<p>It's not a pretty line. But if it allows to keep <code>has_coe α (completion α)</code> it's fine</p>",
        "id": 159907292,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551701042
    },
    {
        "content": "<p>you need to inhabit <code>has_coe_t A (completion A)</code> instead of <code>has_coe A (completion A)</code></p>",
        "id": 159907401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551701159
    },
    {
        "content": "<p>This will prevent it from being used more than once</p>",
        "id": 159907474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551701208
    },
    {
        "content": "<p>Nice trick!</p>",
        "id": 159907494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551701231
    },
    {
        "content": "<p>That's an interesting comment!</p>",
        "id": 159907500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551701234
    },
    {
        "content": "<p>Lunch is calling, please don't hesitate to review <a href=\"https://github.com/leanprover-community/mathlib/pull/787\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/787\">https://github.com/leanprover-community/mathlib/pull/787</a></p>",
        "id": 159907508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551701254
    },
    {
        "content": "<p>I think this is a much more useful cleanup than the basic topology one, because the current organization is really crazy (and I'm talking about mess I very much contributed to create)</p>",
        "id": 159907573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551701308
    },
    {
        "content": "<p>Patrick -- are you sure you even want a coercion? Kenny had a coercion from R to R[1/S] and IIRC did not even name the function, and all that happened was that Johan and I got frustrated that this completely fundamental map did not have a name. We both seemed very happy to apply the map explicitly when we needed it.</p>",
        "id": 159907583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551701340
    },
    {
        "content": "<p>In the end the map was named <code>of</code> and it is not hard to write two letters.</p>",
        "id": 159907601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551701367
    },
    {
        "content": "<p>We now have both</p>",
        "id": 159907687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551701448
    },
    {
        "content": "<p>It looks like <code>has_coe_t</code> is not enough. I think it is only activated once, but then the type class search explodes. I'm in favor of removing this coercion.</p>",
        "id": 159907688,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551701450
    },
    {
        "content": "<p>it seems crazy to me to remove this coercion, especially since it's only current cost is one line in the middle of a proof</p>",
        "id": 159910375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551703950
    },
    {
        "content": "<p>Anyway, I intend to redo this completion stuff from scratch, following Bourbaki. So we can keep the coercion for now, and I'll try to avoid it when I'll do the Bourbaki completion</p>",
        "id": 159910434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551704027
    },
    {
        "content": "<p>What is your motivation to redo completion from scratch? Are there some facts that are not yet proved, and that a different approach would make much easier to prove?</p>",
        "id": 159911085,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551704578
    },
    {
        "content": "<p>With the current construction, it's complicated to do the Hausdorff completion in two stages : first get something separated and then complete. Because the current construction quotients the space of <em>all</em> Cauchy filters to make it separated. If you start with something separated and take the space of <em>all</em> Cauchy filters then you loose separation, and you still need to quotient. So the map you get is a composition of three maps instead of two.</p>",
        "id": 159911571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551705008
    },
    {
        "content": "<p>This is crucial for ring completion because extending the multiplication requires to first get a separated ring</p>",
        "id": 159911640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551705099
    },
    {
        "content": "<p>I don't know where Johannes got this idea, but what Bourbaki does is to consider the space of <em>minimal</em> Cauchy filters. This way you get a complete Hausdorff space in one shot. I don't intend to delete the separate construction of the uniform structure on the space of all Cauchy filters, but it wouldn't be used in the construction of the Hausdorff completion anymore</p>",
        "id": 159911745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551705189
    },
    {
        "content": "<p>OK, I understand this would certainly be more elegant and more efficient. But haven't all the desired properties already been established in the current framework? I mean, once the construction is done, one just needs to use the API and one can forget about the construction -- unless you want some things to be defeq while they are not currently, maybe?</p>",
        "id": 159911966,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551705376
    },
    {
        "content": "<p>Ok, I fixed the type class issue with my latest commit. I completed the isolation of completions by a further file split.</p>",
        "id": 159912162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551705511
    },
    {
        "content": "<p>Sébastien, I do have a branch where ring completions actually work in full generality (it's not in mathlib yet), but it's really a hack, and I fear this will bite us at some point. See <a href=\"#narrow/stream/116395-maths/topic/Ring.20completion\" title=\"#narrow/stream/116395-maths/topic/Ring.20completion\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Ring.20completion</a> for details</p>",
        "id": 159912401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551705695
    },
    {
        "content": "<p>OK, I just noticed that in mathlib the ring completion is only done for separated rings currently. And to push this to nonseparated rings you run into trouble, right?</p>",
        "id": 159912647,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551705866
    },
    {
        "content": "<p>yes</p>",
        "id": 159912657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551705876
    },
    {
        "content": "<p>I don't know any way to extend multiplication to the completion if the ring is not separated.</p>",
        "id": 159912704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551705912
    },
    {
        "content": "<p>What Bourbaki does to handle non separated ring is to first make them separated, and then take the (separated) completion of the separated ring.</p>",
        "id": 159912785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551705969
    },
    {
        "content": "<p>One important point is to understand that the subcategory of complete (but not necessarily separated) uniform space is <em>not</em> a nice subcategory. Because you cannot extend by uniform continuity if the target space is not separated</p>",
        "id": 159912967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551706131
    },
    {
        "content": "<p>Anyway, I think this reorganization was needed even without redoing completions. I hope it's ready for merge now. It's really painful to do this kind of work, but I hope it will pay in the long run</p>",
        "id": 159912983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551706143
    },
    {
        "content": "<p>So you will have in any case to prove the first step: go from the nonseparated case to the separated one. For the second step, you could either use the elegant approach of Bourbaki, or use the current formalization, right?</p>",
        "id": 159913017,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551706194
    },
    {
        "content": "<p>The first step is in <a href=\"https://github.com/leanprover-community/mathlib/blob/uniform_split/src/topology/uniform_space/separation.lean#L98\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/uniform_split/src/topology/uniform_space/separation.lean#L98\">https://github.com/leanprover-community/mathlib/blob/uniform_split/src/topology/uniform_space/separation.lean#L98</a>.  Using the current formalization for the second step is what is currently in my <a href=\"https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R120\" target=\"_blank\" title=\"https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R120\">https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R120</a> branch. But it leads to <a href=\"https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R1728\" target=\"_blank\" title=\"https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R1728\">https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R1728</a></p>",
        "id": 159913686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551706680
    },
    {
        "content": "<p>In all cases type theory will never let use have definitional equality between the two steps process and the one step process</p>",
        "id": 159913798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551706751
    },
    {
        "content": "<p>Now I am completely confused. Aren't <code>hcompletion</code> and <code>completion</code> canonically isomorphic, but not defeq?</p>",
        "id": 159914628,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551707425
    },
    {
        "content": "<p>they are</p>",
        "id": 159914843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551707636
    },
    {
        "content": "<p>Then you could pull the ring structure from <code>hcompletion</code> to <code>completion</code>, and say that if <code>\\alpha</code> is a topological ring then <code>completion \\alpha</code> is a topological ring, and this gives you an API with only one step, not mentioning <code>hcompletion</code> at all?</p>",
        "id": 159914986,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551707754
    },
    {
        "content": "<p>This is exactly the strategy that made me think we need to be able to pull back topological ring structures under uniform space isomorphisms. But, for some reason, this seems to be a non-trivial operation in type theory. So doing the direct construction (following Bourbaki) seems simpler</p>",
        "id": 159915134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551707870
    },
    {
        "content": "<p>I can already do everything as in my old <code>completions_reloaded</code> branch. I'm trying to do it better</p>",
        "id": 159915222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551707931
    },
    {
        "content": "<p>If you're convinced it will be better in the end, go ahead, but you have not really convinced me for now that you will really be saving energy in this way, instead of pulling back multiplication from <code>hcompletion</code> and checking the continuity (this is the only thing you have to pull back, right, everything else is already there?). This is probably because I don't know the gory details, of which you are certainly much more aware than me!</p>",
        "id": 159915551,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551708157
    },
    {
        "content": "<p>We'll see. It will probably depend how much I need to fight to get a nice space of minimal Cauchy filters. I'm not there yet. Even after merging this, I plan to first propose a bunch of modification to <code>uniform_space.basic</code> (I didn't want to mix reorganization and actual changes in the same PR)</p>",
        "id": 159916190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551708606
    }
]