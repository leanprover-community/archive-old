[
    {
        "content": "<p>I'm not very good at <code>ring_hom_class</code> yet. Do people have opinions about which of the functions below (<code>ring_equiv.comp_symm</code>, <code>ring_equiv.symm_comp</code>, <code>ring_equiv.of_hom_inv''</code>, <code>ring_equiv.of_hom_inv'''</code>), are worth PR'ing? The \"old-fashioned way\" <code>of_hom_inv'''</code> seems to work more nicely for me when making the final construction. Is this because I don't know some tricks? This came up in <span class=\"user-mention\" data-user-id=\"454183\">@Michail Karatarakis</span> 's work on decomposition and inertia groups. (When <a href=\"https://github.com/leanprover-community/mathlib/pull/16926\">#16926</a> is merged <code>map_id</code> and <code>map_comp</code> will need removing).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.local_ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ring_equiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- I couldn't find these -- do we want them? And why doesn't the coercion kick in automatically?</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comp_symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.ext</span> <span class=\"bp\">$</span> <span class=\"n\">e.apply_symm_apply</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">symm_comp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.ext</span> <span class=\"bp\">$</span> <span class=\"n\">e.symm_apply_apply</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ring_equiv.of_hom_inv</span> <span class=\"c1\">-- This exists and uses ring_hom_class but I struggle to use it below</span>\n\n<span class=\"c1\">-- Here's the old-fashioned way without ring_hom_class</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_hom_inv''</span>  <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">φ.map_mul</span><span class=\"o\">,</span> <span class=\"n\">φ.map_add</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- a variant of the old-fashioned way</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_hom_inv'''</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ψ.comp</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">φ.comp</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_equiv.of_hom_inv''</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.ext_iff.1</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.ext_iff.1</span> <span class=\"n\">h2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ring_equiv</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">local_ring.residue_field</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ring_equiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">local_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">local_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n                         <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">local_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- next two lemmas are #16916</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"o\">(</span><span class=\"n\">local_ring.residue_field</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"n\">ideal.quotient.ring_hom_ext</span> <span class=\"bp\">$</span> <span class=\"n\">ring_hom.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">is_local_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_local_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ideal.quotient.ring_hom_ext</span> <span class=\"bp\">$</span> <span class=\"n\">ring_hom.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- this is supposed to be the follow-up PR</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">-- The old-fashioned way works really nicely</span>\n<span class=\"kd\">def</span> <span class=\"n\">map_equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">):</span>\n <span class=\"o\">(</span><span class=\"n\">local_ring.residue_field</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"o\">(</span><span class=\"n\">local_ring.residue_field</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_equiv.of_hom_inv'''</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f.symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_id</span><span class=\"o\">])</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_id</span><span class=\"o\">])</span>\n\n<span class=\"c1\">-- The question: are we supposed to be proving this using `ring_equiv.of_hom_inv` now?</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map_equiv'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">):</span>\n <span class=\"o\">(</span><span class=\"n\">local_ring.residue_field</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"o\">(</span><span class=\"n\">local_ring.residue_field</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- This approach is already messier because I have to supply the coercion myself</span>\n<span class=\"n\">ring_equiv.of_hom_inv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f.symm</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- goal now contains two coercions from</span>\n  <span class=\"c1\">-- `local_ring.residue_field S →+* local_ring.residue_field R` to itself?</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f.symm</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"bp\">↑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"o\">(</span><span class=\"n\">local_ring.residue_field</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- don't know how to get rid of them any other way</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_id</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"bp\">↑</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f.symm</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"o\">(</span><span class=\"n\">local_ring.residue_field</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_id</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">local_ring.residue_field</span>\n</code></pre></div>",
        "id": 303528337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665526037
    },
    {
        "content": "<p>I asked Yael about this on the Discord and they suggested not using of_hom_inv at all.</p>",
        "id": 303994675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665740089
    },
    {
        "content": "<p>You know what, I think this is my fault. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Sorry about that. I agree with Yaël, this just shouldn't exist as defined. But I remember why it does. The issue is that the hypotheses are phrased in terms of the compositions of the coercions, when they should be phrased in terms of bare functions. I believe that I tried to do that, but it broke things later on (involving quotient rings or something if I remember correctly) and it didn't seem like there was a pretty fix, but I could have been wrong there.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13626\">#13626</a> was the offending PR. You are welcome to change it back (to actual <code>ring_hom</code>s) if you want, but if you are going to do that, please make a version for <code>non_unital_ring_hom_class</code> for which the composition hypotheses are on bare functions.</p>",
        "id": 304137567,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665793302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  If any of what i just said isn't clear, I can clarify if need be.</p>",
        "id": 304137672,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665793391
    },
    {
        "content": "<p>In the end we just used the usual constructor :-)</p>",
        "id": 304158994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665816980
    }
]