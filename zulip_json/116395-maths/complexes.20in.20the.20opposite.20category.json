[
    {
        "content": "<p>I'm enjoying doing category theory in Lean for pretty much the first time in my life. Turns out what I needed was a group law!</p>\n<p>I've just been finding my way around. Do we have any of the below in mathlib or LTE? Do we want any of this stuff?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.homology.homology</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.homology.additive</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.equiv.transfer_instance</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.preadditive.opposite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- is it definitely `simp`?</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_op</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- phew</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_right_cancel_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">my_shape</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homological_complex.op_symm</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_right_cancel_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">my_shape</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"bp\">𝒞</span> <span class=\"n\">my_shape</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">homological_complex</span> <span class=\"bp\">𝒞ᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">my_shape.symm</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵢ.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵢ.</span><span class=\"n\">d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">,</span>\n  <span class=\"n\">shape'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">homological_complex.shape'</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_op</span><span class=\"o\">],</span>\n  <span class=\"n\">d_comp_d'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">hij</span> <span class=\"n\">hjk</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">op_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">homological_complex.d_comp_d'</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">hjk</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">zero_op</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homological_complex.op_symm'</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_right_cancel_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">my_shape</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"bp\">𝒞</span> <span class=\"n\">my_shape.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">homological_complex</span> <span class=\"bp\">𝒞ᵒᵖ</span> <span class=\"n\">my_shape</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵢ.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵢ.</span><span class=\"n\">d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">,</span>\n  <span class=\"n\">shape'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">homological_complex.shape'</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_op</span><span class=\"o\">],</span>\n  <span class=\"n\">d_comp_d'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">hij</span> <span class=\"n\">hjk</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">op_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">homological_complex.d_comp_d'</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">hjk</span> <span class=\"n\">hij</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">preadditive</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">𝒟</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒟</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preadditive</span> <span class=\"bp\">𝒟</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span> <span class=\"bp\">⥤</span> <span class=\"bp\">𝒟</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">category_theory.functor.unop_unop_additive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">unop_unop</span> <span class=\"bp\">𝒞</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">additive</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">unop_unop_map</span><span class=\"o\">,</span> <span class=\"n\">op_add</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">some_triangle_commutes</span> <span class=\"o\">:</span>\n<span class=\"n\">category_theory.functor.map_homological_complex</span> <span class=\"o\">(</span><span class=\"n\">unop_unop</span> <span class=\"bp\">𝒞</span><span class=\"o\">)</span> <span class=\"n\">my_shape</span> <span class=\"bp\">≅</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ.</span><span class=\"n\">op_symm.op_symm'</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ</span> <span class=\"n\">Y</span><span class=\"bp\">ᵢ</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">ᵢ.</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op.op</span><span class=\"o\">,</span>\n    <span class=\"n\">comm'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">ᵢ.</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op.op</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"bp\">ᵢ.</span><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op.op</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵢ.</span><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op.op</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">ᵢ.</span><span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op.op</span><span class=\"o\">,</span>\n        <span class=\"n\">simpa</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">op_comp</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"bp\">ᵢ.</span><span class=\"n\">comm</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"bp\">ᵢ</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- a lot of background `tidy</span>\n</code></pre></div>",
        "id": 284314579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653872860
    },
    {
        "content": "<p>Oh I found some of this in LTE in <code>for_mathlib.homological_complex_op</code>.</p>",
        "id": 284319758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653880448
    }
]