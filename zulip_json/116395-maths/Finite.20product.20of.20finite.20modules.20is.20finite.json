[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/10757\">#10757</a> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  suggested to prove that a finite product of finite modules is finite (meaning the product over a <code>fintype</code>. Here finite means <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.finite\">docs#module.finite</a>). Does anyone have an idea on how to do it in Lean?</p>\n<p>Mathematically there is nothing to prove, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.finite.prod\">docs#module.finite.prod</a>, so it is a trivial induction. But the only induction principle for <code>fintype</code> I found is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.induction_empty_option\">docs#fintype.induction_empty_option</a>, that is a little annoying. In any case I don't find anything about the product over <code>option α</code>, so one should prove that first.</p>\n<p>Another annoying problem is that in this case we three construction: <code>Π</code>, <code>Π₀</code> and <code>⨁</code>: mathblib knows that they are (linearly) equivalent, but it makes searching the library a little complicated.</p>\n<p>Any ideas? Thanks!</p>",
        "id": 265131229,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639647847
    },
    {
        "content": "<p>Biject the <code>fintype</code> to <code>fin n</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a>) and do induction on <code>n</code>?</p>",
        "id": 265138744,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639652145
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.pi\">docs#submodule.pi</a> (cf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.prod\">docs#submodule.prod</a>) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.fg_pi\">docs#submodule.fg_pi</a> (cf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.fg_prod\">docs#submodule.fg_prod</a>)</p>",
        "id": 265141047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639653414
    },
    {
        "content": "<p>It looks like it would be straightforward to adjust the proof of <code>fg_prod</code> to produce <code>fg_pi</code> (probably easier than trying to do induction)</p>",
        "id": 265141126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639653471
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The `pi` version of `linear_map.prod_eq_sup_map`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pi_eq_supr_map</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">pi</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">linear_map.single</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- similar to submodule.supr_map_single</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fg_pi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hsb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">submodule.pi</span> <span class=\"n\">s</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">fg_def</span> <span class=\"n\">at</span> <span class=\"n\">hsb</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">t</span> <span class=\"n\">htf</span> <span class=\"n\">hts</span> <span class=\"n\">using</span> <span class=\"n\">hsb</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fg_def.2</span> <span class=\"o\">⟨</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">linear_map.single</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span>\n    <span class=\"n\">set.finite.bUnion</span> <span class=\"n\">hs</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">htf</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">span_Union</span><span class=\"o\">,</span> <span class=\"n\">span_image</span><span class=\"o\">,</span> <span class=\"n\">hts</span><span class=\"o\">,</span> <span class=\"n\">pi_eq_supr_map</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265142328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639654182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks, this is probably the easiest way</p>",
        "id": 265156780,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639662031
    },
    {
        "content": "<p>I'm not actually sure that that sorry is true without a finite assumption</p>",
        "id": 265157659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639662479
    },
    {
        "content": "<p>But that's fine for your application, because you have the assumption already in the other lemma</p>",
        "id": 265157730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639662503
    },
    {
        "content": "<p>You could have a look at the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_artinian_pi\">docs#is_artinian_pi</a> to see how to prove this using the induction principle for <code>fintype</code>. In particular we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.pi_option_equiv_prod\">docs#linear_equiv.pi_option_equiv_prod</a> for the product over <code>option A</code>.</p>\n<p>BTW one could implement another induction principle for <code>fintype</code> using <code>sum</code> instead of <code>option</code>. It might be easier to use for this.</p>",
        "id": 265161237,
        "sender_full_name": "David Wärn",
        "timestamp": 1639664043
    },
    {
        "content": "<p>Is there a reason why you work with a <code>s : set ι</code> with <code>s.finite</code> rather than with a <code>fintype</code> or a <code>finset</code>?</p>",
        "id": 265161275,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639664063
    },
    {
        "content": "<p>I mean, at the end all these notions are equivalent of course, but I am always a little bit confused by which one to use.</p>",
        "id": 265161324,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639664092
    },
    {
        "content": "<p>Is that aimed at me or David?</p>",
        "id": 265161415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639664140
    },
    {
        "content": "<p>It was aimed at Eric, I didn't noticed David's answer</p>",
        "id": 265161523,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639664179
    },
    {
        "content": "<p>My statement was about <code>s : set</code> because that's what submodule.pi takes</p>",
        "id": 265161540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639664186
    },
    {
        "content": "<p>And a statement of <code>fg (pi s p)</code> is (syntactically) more general than one about <code>fg (pi ↑s p)</code></p>",
        "id": 265161599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639664223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/116395-maths/topic/Finite.20product.20of.20finite.20modules.20is.20finite/near/265161237\">said</a>:</p>\n<blockquote>\n<p>You could have a look at the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_artinian_pi\">docs#is_artinian_pi</a> to see how to prove this using the induction principle for <code>fintype</code>.</p>\n</blockquote>\n<p><del>I'd argue that this probably should have been proved in the same way as the <code>_prod</code> version, as this exposes a bunch of lemma holes in the linear map API.</del> Edit: oh, those holes aren't true</p>",
        "id": 265163578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639665039
    },
    {
        "content": "<p>I have the feeling that the correct way of proving the result is as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_artinian_pi\">docs#is_artinian_pi</a>, but mabye this is because <code>submodule.pi s p</code> really confuses me</p>",
        "id": 265165015,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639665649
    },
    {
        "content": "<p>Ah, it looks like I was confused by <code>submodule.pi</code> too</p>",
        "id": 265167860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639666810
    },
    {
        "content": "<p>It probably only makes sense to prove it about <code>set.univ</code>, which is easier anyway</p>",
        "id": 265167941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639666828
    },
    {
        "content": "<p>Ah OK, <code>submodule.pi</code> is the product as a submodule <em>of the product</em>, so it makes sense to prove that the product of finitely many finitely generated submodules is finitely generated</p>",
        "id": 265168888,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639667209
    },
    {
        "content": "<p>I PR'd <a href=\"https://github.com/leanprover-community/mathlib/pull/10845\">#10845</a></p>",
        "id": 265169300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639667378
    },
    {
        "content": "<p><code>submodule.pi</code> is a submodule of the pi type which is only constrained at the given indices</p>",
        "id": 265169420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639667418
    },
    {
        "content": "<p>As opposed to how I read it, which is the submodule of the pi type which is only non-zero at the given indices</p>",
        "id": 265169461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639667432
    },
    {
        "content": "<p>We're missing the analogous statement for subalgebras, though we're also missing <code>subalgebra.pi</code> needed to state it</p>",
        "id": 265331585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639762444
    },
    {
        "content": "<p>For algebras we have both <code>finite</code> and <code>finite_type</code>. I can do it sooner or later</p>",
        "id": 265341623,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639766705
    }
]