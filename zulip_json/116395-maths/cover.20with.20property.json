[
    {
        "content": "<p>In the definition of <code>adic_space</code> we have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">Hlocally_affinoid</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hcover</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Huber_pair</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}),</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"err\">𝒞</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"err\">𝒞</span><span class=\"bp\">.</span><span class=\"n\">Spa</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"err\">𝒞</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">locally_ringed_valued_space</span><span class=\"bp\">.</span><span class=\"n\">to_</span><span class=\"err\">𝒞</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/adic_space.lean#L402\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/adic_space.lean#L402\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/adic_space.lean#L402</a><br>\nOn the other hand, in the definition of <code>perfectoid_space</code> we have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">perfectoid_cover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Huber_pair</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">perfectoid_ring</span> <span class=\"n\">A</span><span class=\"o\">],</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"err\">𝒞</span><span class=\"bp\">.</span><span class=\"n\">Spa</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">≅</span><span class=\"bp\">_</span><span class=\"err\">𝒞</span> <span class=\"o\">(</span><span class=\"n\">locally_ringed_valued_space</span><span class=\"bp\">.</span><span class=\"n\">to_</span><span class=\"err\">𝒞</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/perfectoid_space.lean#L28\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/perfectoid_space.lean#L28\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/perfectoid_space.lean#L28</a></p>\n<p>Both express the condition that there exists a cover of the space by open subsets satisfying some condition. However, they are phrased a bit differently. Are there reasons to prefer one over the other? Does mathlib already have some sort of preference/standard here?</p>",
        "id": 164605529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556694611
    },
    {
        "content": "<p>To clarify a bit: I guess we want to say, on two occasions, that our topological space <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is covered by open sets each of which has a nice property; the first time we say \"there's a random type <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> and a map from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> to the set of open subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> such that the union of the image sets is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span>\"; the second time we say <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>∈</mo><mi>X</mi><mspace width=\"0.16667em\"></mspace><mi mathvariant=\"normal\">∃</mi><mi>U</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\forall x\\in X\\, \\exists U\\subseteq X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathrm\">∀</span><span class=\"mord mathit\">x</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathrm\"><span class=\"mspace thinspace\"></span><span class=\"mord mathrm\">∃</span></span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mrel\">⊆</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> open with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>∈</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">x\\in U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> nice.</p>",
        "id": 164605675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556694845
    }
]