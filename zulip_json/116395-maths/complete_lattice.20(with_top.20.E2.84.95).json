[
    {
        "content": "<p>Is this missing, or untrue?</p>",
        "id": 226161461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613148006
    },
    {
        "content": "<p>I could only find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">bounded_lattice</span> <span class=\"n\">enat</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">min</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_left</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_left</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_right</span><span class=\"o\">,</span>\n  <span class=\"n\">le_inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">le_min</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">enat.order_top</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">enat.semilattice_sup_bot</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 226162141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613148314
    },
    {
        "content": "<p>Yeah, I can find a <code>bounded_lattice</code> on <code>with_top nat</code> too</p>",
        "id": 226162273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613148364
    },
    {
        "content": "<p>My motivation was to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_mem_eq_sup\">docs#exists_mem_eq_sup</a>, so I guess the assumptions on that lemma are too strict</p>",
        "id": 226162343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613148395
    },
    {
        "content": "<p>And therfore a new <code>bounded_linear_order</code> typeclass is needed?<br>\n(<code>class bounded_linear_order extends bounded_lattice β, linear_order β</code>)</p>",
        "id": 226162371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613148408
    },
    {
        "content": "<p>You should get it from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.complete_linear_order\">docs#with_top.complete_linear_order</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[instance]</span>\n<span class=\"kd\">def</span> <span class=\"n\">with_top.complete_linear_order</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">complete_linear_order</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>since we have that N is a <code>conditionally_complete_linear_order_bot</code></p>",
        "id": 226162712,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613148534
    },
    {
        "content": "<p>Thanks, I needed to <code>import order.conditionally_complete_lattice</code></p>",
        "id": 226162969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613148638
    },
    {
        "content": "<p>and there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.complete_linear_order\">docs#enat.complete_linear_order</a></p>",
        "id": 226163407,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613148827
    },
    {
        "content": "<p>Bad things seem to happen when I use that instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">min_or_zero</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">option.get_or_else</span> <span class=\"o\">(</span><span class=\"n\">univ.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_eq_min_or_zero</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">min_or_zero</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hv'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exists_mem_eq_sup</span> <span class=\"n\">finset.univ</span> <span class=\"n\">univ_nonempty</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">min_or_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">option.get_or_else_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hv'</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- canonically_linear_ordered_add_monoid.semilattice_sup_bot = semilattice_sup_bot_of_bounded_lattice (with_top ℕ)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226163944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613149026
    },
    {
        "content": "<p>The <code>enat</code> version works, but <code>roption.get_or_else</code> is hard to use</p>",
        "id": 226164182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613149137
    },
    {
        "content": "<p>this is the same issue as the other day with ennreal, with <code>canonically_linear_ordered_add_monoid</code> causing duplicate sup/bot when using that instance of <code>semilattice_sup_bot</code></p>",
        "id": 226164214,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613149151
    },
    {
        "content": "<p>The full state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">canonically_linear_ordered_add_monoid.semilattice_sup_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.canonically_linear_ordered_add_monoid</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.canonically_linear_ordered_add_monoid</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">semilattice_sup_bot_of_bounded_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_linear_order.to_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top.complete_linear_order</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.conditionally_complete_linear_order_bot</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 226164429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613149226
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/tree/ennreal_lattice_issue\">branch#ennreal_lattice_issue</a> I tried removing the instance <code>canonically_linear_ordered_add_monoid.semilattice_sup_bot</code> and after a small fix to one lemma about finsupp, it does not seem to cause any issue. But then you can't use any lemma for <code>semilattice_sup_bot</code> on a <code>canonically_linear_ordered_add_monoid</code>, which is a shame. I don't know enough about how those things work to be able to fix it</p>",
        "id": 226164902,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613149409
    },
    {
        "content": "<p>The semilattice and order_bot parts of semilattice_sup_bot come from two different ancestors of canonically_linear_ordered_add_monoid. It looks like the way they are combined is not correct (in a way I don't understand)</p>",
        "id": 226165362,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613149581
    },
    {
        "content": "<p>This gives some hints of exactly what doesn't match - it's just the <code>sup</code>, the other operators are fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">min_or_zero</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">option.get_or_else</span> <span class=\"o\">(</span><span class=\"n\">univ.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">semilattice_sup_bot.ext</span> <span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_bot</span> <span class=\"o\">:</span> <span class=\"n\">a.bot</span> <span class=\"bp\">=</span> <span class=\"n\">b.bot</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_sup</span> <span class=\"o\">:</span> <span class=\"n\">a.sup</span> <span class=\"bp\">=</span> <span class=\"n\">b.sup</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">a.le</span> <span class=\"bp\">=</span> <span class=\"n\">b.le</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_lt</span> <span class=\"o\">:</span> <span class=\"n\">a.lt</span> <span class=\"bp\">=</span> <span class=\"n\">b.lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">casesI</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_eq_min_or_zero</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">min_or_zero</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hv'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exists_mem_eq_sup</span> <span class=\"n\">finset.univ</span> <span class=\"n\">univ_nonempty</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">min_or_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">option.get_or_else_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hv'</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">semilattice_sup_bot.sup</span> <span class=\"n\">lattice.sup</span> <span class=\"n\">bounded_lattice.sup</span> <span class=\"n\">complete_lattice.sup</span>\n      <span class=\"n\">complete_linear_order.sup</span> <span class=\"n\">semilattice_sup_top.sup</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- max = λ (o₁ o₂ : with_top ℕ), option.bind o₁ (λ (a : ℕ), option.map (λ (b : ℕ), a ⊔ b) o₂)</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226173211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613152603
    }
]