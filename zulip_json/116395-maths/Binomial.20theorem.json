[
    {
        "content": "<p>Hey! I proved the binomial theorem, if anyone finds it interesting its in a gist here: <a href=\"https://gist.github.com/MonoidMusician/ad43301ee3b4e71c0e1c3d440c6898c5\" target=\"_blank\" title=\"https://gist.github.com/MonoidMusician/ad43301ee3b4e71c0e1c3d440c6898c5\">https://gist.github.com/MonoidMusician/ad43301ee3b4e71c0e1c3d440c6898c5</a></p>",
        "id": 127788179,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1528484867
    },
    {
        "content": "<p>just curious: is there an existing definition of the binomial coefficient anywhere, maybe with some lemmas? I couldn't find one</p>",
        "id": 127788226,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1528484920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> did this but I'm not sure it ever made it into mathlib. I think Chris did pretty much everything in my introduction to proof course. He even did the multinomial theorem (I think this is one of the reasons he's so good at finite stuff :-) )</p>",
        "id": 127788345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528485077
    },
    {
        "content": "<blockquote>\n<p>just curious: is there an existing definition of the binomial coefficient anywhere, maybe with some lemmas? I couldn't find one</p>\n</blockquote>\n<p><code>data.nat.choose</code></p>",
        "id": 127789175,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528486117
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> , it would be great to PR this into mathlib. (<span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, too :-)</p>",
        "id": 127889314,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528706465
    },
    {
        "content": "<blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> , it would be great to PR this into mathlib. (<span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, too :-)</p>\n</blockquote>\n<p>The main reason I didn't do this, is we don't have a sensible definition of sums between naturals yet.</p>",
        "id": 127908813,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528736700
    },
    {
        "content": "<p>You mean sums from a to b? Mario always argued that you should do sums from a to a+b (or perhaps a+b-1) and seeing the troubles Patrick had when summing from a to b I am inclined to take Mario's word for it. I know from years of worrying about this sort of thing that I'm completely happy to see a sum from i to j if (and only if) j&gt;=i-1, but if j&lt;i-1 then I always feel something has gone wrong.</p>",
        "id": 127910585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528739121
    },
    {
        "content": "<p>I'm just waiting for some definition to end up in the library. I actually needed non commutative products for Sylow, so it would be useful if Patrick PRed his big operators.</p>",
        "id": 127912967,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528741963
    },
    {
        "content": "<p>I'm sorry I don't have a lot of time for Lean, and it seemed more fun to jump on the perfectoid train because it means team work. But help is very much welcome on the bigop front.</p>",
        "id": 127914048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528743258
    },
    {
        "content": "<p>Last time I looked you were doing great with the bigop thing, there didn't seem to be any problems like there were with type class inference for the modules, and I was just leaving you to do it. Then you went back to the normed vector spaces and had type class problems again, which to be honest was a bit depressing, all I remember was the CS people talking about how interesting out_param was. What is the current state of the bigop stuff?</p>",
        "id": 127914094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528743359
    },
    {
        "content": "<p>I got tired of nat substraction mainly, especially since <code>cooper</code> seems to promise to make all this easier</p>",
        "id": 127914287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528743544
    },
    {
        "content": "<p>I need to use the binomial theorem and I'm wondering about whether it is currently stated in the most convenient form.</p>\n<p>We have it here: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/commute.add_pow\">docs#commute.add_pow</a> and I can think of at least two variations that might be preferable, specifically <code>add_pow₂</code> and <code>add_pow₃</code> in the following snippet:</p>",
        "id": 236681086,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619706173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.choose.sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.finprod</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">commute</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- 1. The statement as currently found in `src/data/nat/choose/sum.lean`</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_pow₁</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.add_pow</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- 2. The statement I was expecting</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_pow₂</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">_root_.nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">cast_comm</span><span class=\"o\">,</span> <span class=\"n\">h.add_pow</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- 3. We could even switch to the fancy new `finsum`</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_pow₃</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">_root_.nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">cast_comm</span><span class=\"o\">,</span> <span class=\"n\">h.add_pow</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finsum_mem_coe_finset</span><span class=\"o\">,</span> <span class=\"n\">lt_succ_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">commute</span>\n</code></pre></div>",
        "id": 236681179,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619706212
    },
    {
        "content": "<p>I'd be grateful for feedback on which of the following might be welcome:</p>\n<ol>\n<li>Change the statement to that of <code>add_pow₂</code> and refactor accordingly (fortunately it's not heavily used, so this would be easily doable)</li>\n<li>Leave the current statement but add the alternate form <code>add_pow₂</code> (probably called <code>add_pow'</code> I guess)</li>\n<li>Similar to 2, but with <code>add_pow₃</code></li>\n<li>Leave everything as it is</li>\n<li>Something else?</li>\n</ol>",
        "id": 236681857,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619706425
    },
    {
        "content": "<p>You can also sum over <code>finset.nat.antidiagonal</code>! </p>\n<p>This came up a load when Ashvni and others were thinking about Bernoulli numbers and Bernoulli polynomials. I had just assumed that <code>finset.nat.antidiagonal</code> would be the way to go (there was a long discussion about this, where I was even railing about the definition of <code>choose n m</code> and arguing that the correct object was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mi mathvariant=\"normal\">/</mi><mi>i</mi><mo stretchy=\"false\">!</mo><mi>j</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">f(i,j):=(i+j)!/i!j!</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)!</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">!</span></span></span></span>). But ultimately I came to the conclusion that whatever you chose, there was some pain involved. The perceived advantage of using <code>antidiagonal</code> was that you don't have the <code>nat.sub</code> in there, but somehow you still end up battling type theory anyway.</p>\n<p>The definition of Bernoulli numbers is by well-founded recursion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bernoulli'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"n\">well_founded.fix</span> <span class=\"n\">lt_wf</span> <span class=\"bp\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">bernoulli'</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n.choose</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">bernoulli'</span> <span class=\"n\">k</span> <span class=\"n\">k.2</span>\n</code></pre></div>\n<p>and it took me a while to decide which order to put <code>n.choose k / (n - k + 1) * bernoulli' k k.2</code> but ultimately I am not convinced that it mattered much -- you make a \"random\" choice and then you battle through what you need to battle through. </p>\n<p>Basically what I'm saying is that I kind of conjecture that all definitions will end up being mildly inconvenient and about the same amount of work. I did manage to convince myself though that one should have a \"rule of thumb\" about where the nats go and where the other stuff (in the Bernoulli case, rationals) go, and my rule was \"keep the nats at the beginning\", so I think I'd prefer 2 or 3 over 1. Whether finset.sum or finsum is best for you I think depends very much on your use case, by which I mean that I suspect you can't please all of the people all of the time so you'd be better off pleasing yourself.</p>",
        "id": 236696916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619710897
    },
    {
        "content": "<p>Thanks for such a comprehensive answer. I will try the idea to sum over <code>finset.nat.antidiagonal</code> if only because I think it will enable me to avoid having the following revolting lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>for which I'm struggling to get a non-ridiculous proof that does not use <code>omega</code> (which I believe is banned because of Lean 4).</p>",
        "id": 236698514,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619711544
    },
    {
        "content": "<p>(for clarity, <code>foo</code> is required downstream in a separate proof when I use <code>add_pow₂</code> or <code>add_pow₃</code>)</p>",
        "id": 236698653,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619711610
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.succ_add_sub_one</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.le_sub_left_of_add_le</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236700805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619712380
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_sub</span><span class=\"o\">,</span> <span class=\"n\">nat.add_comm</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat.add_sub_assoc</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">nat.le_add_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236704386,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619713780
    },
    {
        "content": "<p>Basically the same</p>",
        "id": 236704570,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619713829
    },
    {
        "content": "<p>I decided to make <a href=\"https://github.com/leanprover-community/mathlib/pull/7415\">a PR</a> to try to settle this.</p>",
        "id": 236731258,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619724527
    },
    {
        "content": "<p>Did you experiment with making your <code>add_pow'</code> the \"main\" (unprimed) version? I'd be curious to know whether it helps or hinders in the rest of the library.</p>",
        "id": 236760570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619737355
    },
    {
        "content": "<p>Very good question <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , I'll try that out this morning.</p>",
        "id": 236798541,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619769134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Binomial.20theorem/near/236760570\">said</a>:</p>\n<blockquote>\n<p>Did you experiment with making your <code>add_pow'</code> the \"main\" (unprimed) version? I'd be curious to know whether it helps or hinders in the rest of the library.</p>\n</blockquote>\n<p>I made a partial attempt to address this with <a href=\"https://github.com/leanprover-community/mathlib/pull/7415/commits/d596071d7fb2859eaf1f16729cd784565f240063\">this commit</a> from which I concluded:</p>\n<ol>\n<li>There are only 8 (by my count) uses of the binomial theorem so the absolute impact is low.</li>\n<li>In terms of relative impact, it's not trivial to decide which form would help/hinder most because the code surrounding invocations of <code>add_pow</code> tends to caters for the exact form of the lemma as it stands (<a href=\"https://github.com/leanprover-community/mathlib/blob/c7ba3dd0487ba0450e7bfe6b33259b5af0af523d/src/ring_theory/power_series/well_known.lean#L101\">example</a>).</li>\n</ol>",
        "id": 237077728,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619985444
    },
    {
        "content": "<p>For the sake of resolving <a href=\"https://github.com/leanprover-community/mathlib/issues/7415\">#7415</a>, I have picked just one restatement which I think is worth having (and which I want to use in other work) and have added a commit so the the PR now proposes just this.</p>",
        "id": 237077812,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619985525
    },
    {
        "content": "<p>Proofs of various alternate forms that I explored are contained in previous commits on that PR including the following appealing statement that <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> suggested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I have decided to leave these out.</p>",
        "id": 237077994,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619985685
    }
]