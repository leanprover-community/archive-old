[
    {
        "content": "<p>I was thinking a bit about central simple algebras. One fact that is quite useful is the following:</p>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> be a finite-dimensional central division algebra over a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>. Then every maximal subfield <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> contains <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>dim</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>D</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mrow><mi>dim</mi><mo>⁡</mo></mrow><mi>K</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\dim_K(D) = \\dim_K(E)^2 = n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">dim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">dim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>. Moreover, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><msub><mo>⊗</mo><mi>K</mi></msub><mi>D</mi><mo>≅</mo><msub><mtext>Mat</mtext><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E \\otimes_K D \\cong \\text{Mat}_n(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Example: take the quaternions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">H</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">H</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. They contain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\R(i) \\cong \\mathbb C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> as subfield. And indeed, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>dim</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">H</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>4</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mi>dim</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">C</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\dim(\\mathbb H) = 4 = 2^2 = \\dim(\\mathbb C)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">dim</span><span class=\"mopen\">(</span><span class=\"mord mathbb\">H</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mop\">dim</span><span class=\"mopen\">(</span><span class=\"mord mathbb\">C</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 250941882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630075430
    },
    {
        "content": "<p>This lemma suggests that <code>subfield</code> should be defined for rings <code>R</code> that are not necessary fields.</p>",
        "id": 250941995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630075471
    },
    {
        "content": "<p>Currently <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subfield\">docs#subfield</a> is only defined for fields. What would be the best general context to talk about subfields?</p>",
        "id": 250942087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630075510
    },
    {
        "content": "<p>Mathematically, any semiring can have a subfield. But those don't always come with a <code>has_inv</code>. And I can imagine that we want a quasi-computable inverse for these subfields.</p>",
        "id": 250942218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630075563
    },
    {
        "content": "<p>Monoid objects in linear monoidal categories? :-) (10% serious.)</p>",
        "id": 250942253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630075566
    },
    {
        "content": "<p>Should <code>subfield R</code> be defined for <code>[semiring R] [has_inv R]</code>?</p>",
        "id": 250942316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630075590
    },
    {
        "content": "<p>It would need extra axioms beyond what it has now, to ensure that the carrier set really is a sub<em>field</em>.</p>",
        "id": 250942379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630075620
    },
    {
        "content": "<p>Currently we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `subfield R` is the type of subfields of `R`. A subfield of `R` is a subset `s` that is a</span>\n<span class=\"sd\">  multiplicative submonoid and an additive subgroup. Note in particular that it shares the</span>\n<span class=\"sd\">  same 0 and 1 as R. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">subfield</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">subring</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250942439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630075641
    },
    {
        "content": "<p>That docstring also seems wrong... it doesn't mention multiplicative inverses at all <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 250942970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630075826
    },
    {
        "content": "<p>Just thinking out loud. How about something like (I didn't test this code):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `subfield R` is the type of subfields of `R`. A subfield of `R` is a subset `s` that is</span>\n<span class=\"sd\">  an additive subgroup and a multiplicative submonoid,</span>\n<span class=\"sd\">  and such that every nonzero element has a multiplicative inverse.</span>\n<span class=\"sd\">  Note in particular that it shares the same `0` and `1` as `R`. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">subfield</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">subring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mul_self'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">\\</span><span class=\"n\">ne</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">self_mul_inv'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">\\</span><span class=\"n\">ne</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subfield.mk'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">subfield</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_mul_self'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">self_mul_inv'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 250944184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630076283
    },
    {
        "content": "<p><code>0</code> should also be a member of the subfield, no?</p>",
        "id": 250944290,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1630076314
    },
    {
        "content": "<p><code>extends subring R</code> takes care of that, right?</p>",
        "id": 250944365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630076338
    },
    {
        "content": "<p>Well, <code>inv_mul_self 0</code> is false currently :P</p>",
        "id": 250944401,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1630076356
    },
    {
        "content": "<p>ooh, lol. I need a <code>x \\ne 0</code> assumption.</p>",
        "id": 250944442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630076371
    },
    {
        "content": "<p>Also, I guess <code>semiring</code> doesn't give me a <code>has_sub</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> so we need to deal with that as well.</p>",
        "id": 250944483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630076396
    },
    {
        "content": "<p>Probably assuming that the ambient structure is a <code>ring</code> is not a problem in practice</p>",
        "id": 250944622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630076425
    },
    {
        "content": "<p>Overall, this seems like a good idea, Also for reasons of speeding up some big unification chains we get when adjoining elements to a complicated field.</p>",
        "id": 250944640,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1630076430
    },
    {
        "content": "<p>ooh, I'm also missing a <code>mul_comm</code> assumption <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 250944956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630076534
    },
    {
        "content": "<p>What if we tried putting the missing operators in a field of the structure?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `subfield R` is the type of subfields of `R`. A subfield of `R` is a subset `s` that is</span>\n<span class=\"sd\">  an additive subgroup and a multiplicative submonoid,</span>\n<span class=\"sd\">  and such that every nonzero element has a multiplicative inverse.</span>\n<span class=\"sd\">  Note in particular that it shares the same `0` and `1` as `R`. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">subfield</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">subring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mul_self'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">self_mul_inv'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250944995,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1630076551
    },
    {
        "content": "<p>Then it's no longer <code>set_like</code>, is it?</p>",
        "id": 250945071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630076596
    },
    {
        "content": "<p>Ooh it should be, given the right axioms on that data.</p>",
        "id": 250945116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630076612
    },
    {
        "content": "<p>We could even drop the <code>0</code> and <code>1</code> and just assume <code>has_add</code> and <code>has_mul</code>, but that would be too much :P</p>",
        "id": 250945308,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1630076689
    },
    {
        "content": "<p>What happens if I want to talk about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[\\sqrt{2}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> as a subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[X,Y]/(X^2-2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 250946066,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630077008
    },
    {
        "content": "<p>I think the <code>[has_inv R]</code> is an issue.</p>",
        "id": 250946098,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630077021
    },
    {
        "content": "<p>Oh yeah, Anne's suggestion would take care of this ;)</p>",
        "id": 250946162,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630077052
    },
    {
        "content": "<p>Should we do the same with <code>subgroup</code>, so that we can talk about subgroups of monoids, etc, etc...?</p>",
        "id": 250946450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630077173
    },
    {
        "content": "<p>ughh</p>",
        "id": 250946466,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630077181
    },
    {
        "content": "<p>I guess <code>subfield</code> (and <code>subdivision_ring</code>) are maybe the ones that really matter in practice. (E.g. the example that you gave.)</p>",
        "id": 250946571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630077235
    },
    {
        "content": "<p>Do we really want to go through all this trouble? Why can't we just use injective morphisms from a field to the semiring?</p>",
        "id": 250946697,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630077288
    },
    {
        "content": "<p>We solved this for monoids with <code>submonoid (units M)</code>, right?</p>",
        "id": 250964763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630085010
    },
    {
        "content": "<p>Do you mean <code>subgroup (units M)</code>?</p>",
        "id": 250967422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630086152
    },
    {
        "content": "<p>?? Isn't that the type of subgroups of <code>units M</code>?</p>",
        "id": 250969804,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630087119
    },
    {
        "content": "<p>(Which is already a group)</p>",
        "id": 250969852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630087141
    },
    {
        "content": "<p>Right, but every subgroup of a monoid <code>M</code> is a subgroup of <code>units M</code>, at least for a mathematicians version of \"is\".</p>",
        "id": 250977030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630089995
    },
    {
        "content": "<p>But this doesn't hold for subfields of a (semi)ring</p>",
        "id": 250977839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630090357
    },
    {
        "content": "<p>(I think?)</p>",
        "id": 250977873,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630090371
    },
    {
        "content": "<p>E.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><msub><mo>⊗</mo><mi>k</mi></msub><mi>k</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(t) \\otimes_k k(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is a field has both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> as subfields, but not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(s,t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 250978765,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630090714
    },
    {
        "content": "<p>Yeah, I don't know if there's an analogous construction for subfields, I brought it up in response to the mention of subgroups above.</p>",
        "id": 250985581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630093664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/subfields/near/250978765\">said</a>:</p>\n<blockquote>\n<p>E.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><msub><mo>⊗</mo><mi>k</mi></msub><mi>k</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(t) \\otimes_k k(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is a field and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo separator=\"true\">,</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">s,t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> are both variables has both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> as subfields, but not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(s,t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span>.</p>\n</blockquote>\n<p>I agree -- I guess the tensor product is the localisation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[s,t]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span></span></span></span> at the submonoid generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>.</p>",
        "id": 250987138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630094349
    },
    {
        "content": "<p>How about defining <code>subfield</code> for division rings? Where else do we take maximal subfields?</p>",
        "id": 250987499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630094516
    },
    {
        "content": "<p>Sure, that's what Johan originally was asking about, but I think it's worthwhile to come up with an idea that will work for arbitrary semirings.</p>",
        "id": 250987593,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630094543
    },
    {
        "content": "<p>But division rings will have a <code>div</code> and semirings don't? What is an example in real life where we demand a div on a subobject of an object which doesn't have a div?</p>",
        "id": 250988752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630095084
    },
    {
        "content": "<p>Relaxing <code>field</code> to <code>division_ring</code> in subfield should be trivial, shouldn't it?</p>",
        "id": 250988766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630095092
    },
    {
        "content": "<p>that was why I was mentioning it!</p>",
        "id": 250988789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630095105
    },
    {
        "content": "<p>It seems to be a very simple solution in the case in hand, and we can just kick the harder question down the road in the hope that nobody ever needs it :-)</p>",
        "id": 250988897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630095141
    },
    {
        "content": "<p>In real life fields don't have an <code>inv</code>, because they're defined as rings satisfying certain (prop-valued) axioms (for a similar reason, fields don't form a variety in the sense of universal algebra), so I can freely say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> is a subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>, even though <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> has no division operation.</p>",
        "id": 250989214,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630095291
    },
    {
        "content": "<p>Yup, and I think we should support that use case</p>",
        "id": 251030864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630129293
    },
    {
        "content": "<p>I'm just remarking that it seems harder and although we all know that it could in theory be necessary, nobody came up with a real life example. Galois theory uses subfields and the central simple algebra theory uses division rings.</p>",
        "id": 251039195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630138562
    },
    {
        "content": "<p>In general I suppose a common subfield of a non-division_ring is <code>(algebra_map K A).range</code>?</p>",
        "id": 251040219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630139669
    },
    {
        "content": "<p>Which isn't to say there's anything particularly interesting about that subfield, but it's easy to construct</p>",
        "id": 251040246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630139712
    },
    {
        "content": "<p>I'll make a PR that generalizes to division rings. We can always generalize further at a later point.</p>",
        "id": 251040705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630140165
    },
    {
        "content": "<p>Actually, aren't there theorems about maximal subfields of matrix rings? :P</p>\n<p>Remember that an integral domain finite-dimensional over a field is a a field, so in e.g. the matrix case you're looking for subfields of M_n(K) which contain K and for this you can just use commutative subrings containing K.</p>",
        "id": 251041660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630141193
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8901\">#8901</a></p>",
        "id": 251057359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630158393
    },
    {
        "content": "<p>I was expecting the generalization to sub-division_rings, since sub-division_rings of a field are automatically subfields. To my surprise, the PR actually does require commutativity within the subfield. I commented there, but here seems like a better place to discuss.</p>\n<p>Do we actually need to talk about commutative subfields of divisionrings? We seem to have survived just fine without commutative submonoids of non-commutative monoids, commutative subgroups of non-commutative groups, etc...</p>",
        "id": 251067402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630169003
    },
    {
        "content": "<p>(and by just fine; I mean I remember only one Zulip thread about commutative subgroups, but am on mobile so would be unable to link it if I could find it)</p>",
        "id": 251067499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630169100
    },
    {
        "content": "<p>For reference: <a href=\"#narrow/stream/116395-maths/topic/Abelian.20Subgroup/near/242371758\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Abelian.20Subgroup/near/242371758</a></p>",
        "id": 251067601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630169186
    },
    {
        "content": "<p>One option would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">set_like.commutative</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And then use this to provide more general versions of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subfield.to_field\">docs#subfield.to_field</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.to_comm_group\">docs#subgroup.to_comm_group</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.to_comm_monoid\">docs#submonoid.to_comm_monoid</a> and similarly for the additive versions; all of which don't require commutativity of the base type, and only within the subtype.</p>",
        "id": 251067971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630169570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I think we want to be able to talk about maximal subfields of division rings. That's easy with the current approach, because you can simply talk about maximal elements in the lattice <code>subfield K</code>.</p>",
        "id": 251069119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630170685
    },
    {
        "content": "<p>quaternion algebras over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> contain fields that are degree 2 over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>.</p>",
        "id": 251069202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630170761
    },
    {
        "content": "<p>Those fields are actually quite interesting.</p>",
        "id": 251069210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630170772
    },
    {
        "content": "<p>Hmm, I guess otherwise you have to put a lattice structure on <code>{ S : subdivision_ring K // set_like.is_commutative S }</code> which is straightforward but annoying.</p>",
        "id": 251069896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630171514
    },
    {
        "content": "<p>My main objection to your approach is it opens the doors to also adding <code>sub_(add_)comm_monoid</code> and <code>sub_(add_)group</code> and <code>monoid_hom.crange</code> and <code>monoid_hom.mcrange</code> and ...</p>",
        "id": 251070011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630171650
    },
    {
        "content": "<p>That is, it appears to scale poorly. But perhaps all the things that it could potentially scale to are mathematically entirely uninteresting.</p>",
        "id": 251070083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630171691
    },
    {
        "content": "<p>Yeah, I agree with that point. I don't have a lot of evidence that subfields should be a special case.</p>",
        "id": 251070248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630171867
    },
    {
        "content": "<p>Currently <a href=\"https://github.com/leanprover-community/mathlib/issues/8901\">#8901</a> doesn't build. Before fixing it, I think it would be good to reach a concensus about what we want the definition of <code>subfield</code> to be. I claim they should be commutative.</p>",
        "id": 252133177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630910630
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Elham.20Mazaheri\">#new members &gt; Elham Mazaheri</a></p>",
        "id": 253054097,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631521488
    }
]