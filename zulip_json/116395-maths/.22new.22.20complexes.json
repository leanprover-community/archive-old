[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>,</p>\n<p>I was thinking about your new proposal for complexes some more, trying to work out what you can add to just <code>d i j : X i \\hom X j</code> and <code>d_comp_d</code> in order to get something \"meaningful\", but that still specialises to (co)chain complexes on <code>nat</code>, <code>int</code>, <code>fin n</code>, etc.</p>\n<p>I think the main thing that can go wrong with the general picture is that<br>\nif we have <code>d i j</code> and <code>d i k</code> both nonzero with <code>j \\ne k</code>, then the homology of <code>d</code> on the total object is not a graded object, and it doesn't make sense to compute it one grading at a time.</p>\n<p>So I would want to add a constraint <code>t : I  -&gt; option I</code>, and an axiom <code>d i j \\ne 0 -&gt; j \\mem t i</code>. But otherwise have no type constraints in <code>d</code> (i.e. it just takes two arguments, as you propose), and <code>d_comp_d</code> still says <code>d i j \\gg d j k = 0</code> for all <code>i j k</code>.</p>\n<p>This still specializes fine:</p>\n<ul>\n<li>with <code>I = int</code>, and <code>t i = some (i+1)</code> or <code>t i = some (i-1)</code></li>\n<li>with <code>I = nat</code>, and <code>t n = some (n+1)</code> or <code>t 0 = none, t (n+1) = some n</code>.</li>\n</ul>\n<p>It's still a little scary to compute the homology, because you don't know where the incoming <code>d</code>s are coming from, so perhaps you'll still need to take the meet of all the images...</p>",
        "id": 231281195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616404864
    },
    {
        "content": "<p>(I've just made a stream of PRs about the complete lattice of subobjects in a general category, with infinitary meets of images as an application in mind... It may still be a moment before this stuff actually connects. :-)</p>",
        "id": 231281268,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616404921
    },
    {
        "content": "<p>Thanks a lot for experimenting with my crazy proposal!</p>",
        "id": 231281854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616405212
    },
    {
        "content": "<p>What was the problem with the <code>pred</code> and <code>succ</code> approach, with <code>H^i = ker (d i i.succ) / im (d i.pred i)</code>? With <code>pred i = i - 1</code> and <code>succ i = i + 1</code> on nat or int, it seems to give the right answer.</p>",
        "id": 231283691,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616406243
    },
    {
        "content": "<p>(Disclaimer: I am not at all an algebraic topologist, so maybe there are potential applications that look obvious to you but that I've never heard of!)</p>",
        "id": 231283854,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616406336
    },
    {
        "content": "<p>I do not know of any example when we ever have more than one interesting d arrow going into an object or more than one interesting d arrow going out of an object (apart from in the case where there are two distinct d's, like in a double complex, but I think we decided that double complexes couldn't be shoehorned into this framework anyway). </p>\n<p>The thing that worries me about a succ and pred approach, at least assuming pred(succ(n)) and succ(pred(n)) aren't defeq to n (e.g. Lean's integers), is that when you construct the boundary map on homology coming from a short exact sequence of complexes, you need four consecutive indices i,j,k,l and you're going from H^j(C) to H^k(A), and for one of those setups you want k=succ(j) and for the other you want j=pred(k), and you probably can't have both being defeq in general.</p>",
        "id": 231284490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616406732
    },
    {
        "content": "<p>(PS for double complexes I think we just want a structure with two d fields -- I can't seem to make any sensible kind of axiomatisation with just one d).</p>",
        "id": 231284589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616406828
    },
    {
        "content": "<p>(Sorry, Johan and I are in jitsi, :-)</p>",
        "id": 231284879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616406995
    },
    {
        "content": "<p>Not sure if we came up with anything good. We decided to go away and work on limits over subsingleton types, which hopefully is not as stupid as it sounds.</p>",
        "id": 231292223,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616411035
    }
]