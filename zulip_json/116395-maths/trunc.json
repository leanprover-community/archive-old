[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">quot</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">get_one</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 129715831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531686775
    },
    {
        "content": "<p>Am I doing it right? What is the use of <code>trunc</code>?</p>",
        "id": 129715835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531686785
    },
    {
        "content": "<p>Do you get an error?</p>",
        "id": 129715933,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531686971
    },
    {
        "content": "<p><code>trunc</code> is the quotient by the universal relation.  So for groups, <code>trunc α</code> is always a singleton.  You can use it e.g. to define an existential quantifier where you can computably use the witness, but still have (propositional) \"proof\" irrelevance.</p>",
        "id": 129715934,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531686973
    },
    {
        "content": "<blockquote>\n<p>Do you get an error?</p>\n</blockquote>\n<p>I don't</p>",
        "id": 129715935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531686981
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `trunc α` is the quotient of `α` by the always-true relation. This</span>\n<span class=\"cm\">  is related to the propositional truncation in HoTT, and is similar</span>\n<span class=\"cm\">  in effect to `nonempty α`, but unlike `nonempty α`, `trunc α` is data,</span>\n<span class=\"cm\">  so the VM representation is the same as `α`, and so this can be used to</span>\n<span class=\"cm\">  maintain computability. -/</span>\n</pre></div>",
        "id": 129715936,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531686988
    },
    {
        "content": "<p>So <code>trunc { x // x * x != 1 }</code> is a subsingleton like <code>∃ x, x * x != 1</code> but you can use the witness <code>x</code> to compute other data (as long as it does not depend on the concrete value of <code>x</code>)</p>",
        "id": 129716004,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531687171
    }
]