[
    {
        "content": "<p>Hello! I am new to Lean. To try and learn a bit more on the language, I am trying to demonstrate the 2nd degree equation solution.<br>\nFor  the second step, I need to multiply 4*a to both sides.<br>\nI am trying to use the mul_left_cancel lemma, but it does not work and I do not understand the error.<br>\nThank you very much!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_eq_zero_iff_eq_neg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275912203,
        "sender_full_name": "Diego Cerrillo",
        "timestamp": 1647698813
    },
    {
        "content": "<p>poly-real.lean:10:8<br>\ntype mismatch at application<br>\n  mul_left_cancel (a * x ^ 2 + b * x)<br>\nterm<br>\n  a * x ^ 2 + b * x<br>\nhas type<br>\n  ℝ : Type<br>\nbut is expected to have type<br>\n  ?m_3 * ?m_4 = ?m_3 * ?m_5 : Prop<br>\nstate:<br>\na b c x : ℝ,<br>\nh1 : x = (-b + real.sqrt (b * b - 4 * a * c)) / (2 * a)<br>\n⊢ a * x ^ 2 + b * x = -c</p>",
        "id": 275912220,
        "sender_full_name": "Diego Cerrillo",
        "timestamp": 1647698861
    },
    {
        "content": "<p>You can use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> even for the error, it will be more readable. Looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_left_cancel\">docs#mul_left_cancel</a> you can see that the first argument must be an equality (the one you want to simplify), and this is what the error is saying.</p>",
        "id": 275913260,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647700408
    },
    {
        "content": "<p>But for <code>ℝ</code> it will not work, since <code>ℝ</code> is not a group under multiplication.</p>",
        "id": 275913270,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647700434
    },
    {
        "content": "<p>You have to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_left\">docs#mul_left</a>_cancel₀</p>",
        "id": 275913312,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647700454
    },
    {
        "content": "<p>Can we do something about this <code>docs#</code> bug? Riccardo means <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero/defs.html#mul_left_cancel%E2%82%80\">docs#mul_left_cancel₀</a></p>",
        "id": 275913764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647701173
    },
    {
        "content": "<p>The line you want next is <code>apply mul_left_cancel₀ (show 4*a ≠ 0, from _),</code>, but you have not assumed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>a</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">4a\\not=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> so Lean throws it in as an extra goal. Your theorem is false in general e.g. if a=b=0 and c=1. Lean is completely happy to do things like <code>real.sqrt (-1)</code> (and it will return a real number), or <code>1 / 0</code> (and again it will return a real number). Lean works using a \"garbage in, garbage out\" procedure, so if you don't put in these hypotheses it will happily return things which you can't prove anything about (all you know is that <code>real.sqrt(-1)</code> is a real number, you don't know which one it is, and all theorems about <code>real.sqrt x</code> have <code>0 &lt;= x</code> as a hypothesis so you can't apply them to <code>real.sqrt (-1)</code>).</p>",
        "id": 275913993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647701537
    },
    {
        "content": "<p>Thanks! Did not notice that</p>",
        "id": 275918115,
        "sender_full_name": "Diego Cerrillo",
        "timestamp": 1647707775
    }
]