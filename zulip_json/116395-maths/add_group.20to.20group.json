[
    {
        "content": "<p>I'm really surprised this works. It came up when refactoring subgroups:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">gsmul</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">gsmul</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">gsmul</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">gpow_add</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">gpow_add : ∀ {G : Type} [_inst_1 : group G] (a : G) (m n : ℤ),</span>\n<span class=\"cm\">  a ^ (m + n) = a ^ m * a ^ n</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>Lean has to infer <code>G</code> given <code>x</code>, and if it goes for <code>G = A</code> then it's not going to find the <code>group</code> instance because <code>A</code> is an <code>add_group</code>. But <code>G=multiplicative A</code> works. What makes Lean try that?</p>",
        "id": 204954046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595617288
    },
    {
        "content": "<p>i'm not at my VSCode right now, but I think if there is an <code>instance [add_group G] : group G := multiplicative G</code>, then typeclass inference should just do it</p>",
        "id": 204955132,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595617832
    },
    {
        "content": "<p>(and of course for this to work we can only register <code>multiplicative</code> as an instance and not <code>additive</code>)</p>",
        "id": 204955200,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595617889
    },
    {
        "content": "<p><code>gsmul</code> is defined as <code>@gpow (multiplicative A) _ a n</code> so Lean already has access to <code>multiplicative A</code>.</p>",
        "id": 204959330,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595620459
    }
]