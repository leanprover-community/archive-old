[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">legendre_sym_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">legendre_sym</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">legendre_sym_hom_apply</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">legendre_sym_hom</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/legendre-sym-mul/src/number_theory/quadratic_reciprocity.lean#L562\" title=\"https://github.com/leanprover-community/mathlib/blob/legendre-sym-mul/src/number_theory/quadratic_reciprocity.lean#L562\">https://github.com/leanprover-community/mathlib/blob/legendre-sym-mul/src/number_theory/quadratic_reciprocity.lean#L562</a></p>",
        "id": 195294382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587835598
    },
    {
        "content": "<p>Which leads to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">legendre_sym</span> <span class=\"mi\">43</span> <span class=\"mi\">29</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"mi\">29</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>  <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">29</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span> <span class=\"mi\">7</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">legendre_sym</span> <span class=\"mi\">43</span> <span class=\"mi\">29</span> <span class=\"bp\">=</span> <span class=\"n\">legendre_sym</span> <span class=\"mi\">14</span> <span class=\"mi\">29</span> <span class=\"o\">:</span>\n                            <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">legendre_sym_mod</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"mi\">43</span> <span class=\"err\">%</span> <span class=\"mi\">29</span> <span class=\"bp\">=</span> <span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">legendre_sym</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"mi\">29</span> <span class=\"o\">:</span>\n                            <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">14</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">legendre_sym</span> <span class=\"mi\">2</span> <span class=\"mi\">29</span> <span class=\"bp\">*</span> <span class=\"n\">legendre_sym</span> <span class=\"mi\">7</span> <span class=\"mi\">29</span> <span class=\"o\">:</span>\n                            <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">legendre_sym_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">legendre_sym</span> <span class=\"mi\">7</span> <span class=\"mi\">29</span> <span class=\"o\">:</span>\n                            <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">legendre_sym_two</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">29</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">29</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">],</span>\n                                 <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_one_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">legendre_sym</span> <span class=\"mi\">29</span> <span class=\"mi\">7</span> <span class=\"o\">:</span>\n                            <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">legendre_sym_swap</span> <span class=\"mi\">7</span> <span class=\"mi\">29</span> <span class=\"n\">dec_trivial</span><span class=\"o\">],</span>\n                                 <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">29</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">legendre_sym</span> <span class=\"mi\">1</span> <span class=\"mi\">7</span> <span class=\"o\">:</span>\n                            <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">legendre_sym_mod</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"mi\">29</span> <span class=\"err\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span>\n                            <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">legendre_sym_one</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195294394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587835615
    },
    {
        "content": "<p>But I think that we might want to refactor this a bit. Because currently we cannot talk about the Legendre symbol of <code>x : Z_[p]</code> with respect to <code>p</code>.</p>",
        "id": 195294408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587835666
    },
    {
        "content": "<p>I was thinking exactly the same thing last week! Legendre needs a little love, but it would be cool to generalize to kronecker symbols too</p>",
        "id": 195295622,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587837436
    },
    {
        "content": "<p>One of the codewars questions would be a whole lot easier if we had Kronecker symbols.</p>",
        "id": 195295767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587837629
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]),</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"bp\">_</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"err\">‹</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"err\">›</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">legendre_sym_eq_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">legendre_sym_eq_one_iff</span> <span class=\"n\">p</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">nat_cast_surjective</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"bp\">@</span><span class=\"n\">hensels_lemma</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">derivative_X</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">derivative_add</span><span class=\"o\">,</span> <span class=\"n\">derivative_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_add</span><span class=\"o\">],</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195295905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587837866
    },
    {
        "content": "<p>When I took over teaching Imperial's basic number theory course just after I was employed there, the lecture notes handed to me contained this glorious fact that (2/p)=(-1)^{(p^2-1)/8}; I see Chris has found some simpler trick involving <code>p/4+p/2</code> but I was convinced that the students would rather be told that (2/p) is +1 if p=1 or 7 mod 8, and -1 if it's 3 or 5 mod 8. Similarly for this <code>(p/q)(q/p)=(-1)^{p/2*q/2}</code> result. Isn't it better to just reduce things mod 4 than to be working out <code>7/2*29/2</code>? Unfortunately I can't make a PR because I already have a very complicated one about de Morgan's laws on the pile.</p>",
        "id": 195295912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587837881
    },
    {
        "content": "<p>Unfortunately the final <code>sorry</code> is out of reach for the time being</p>",
        "id": 195295913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587837883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/legendre.20symbols/near/195295913\" title=\"#narrow/stream/116395-maths/topic/legendre.20symbols/near/195295913\">said</a>:</p>\n<blockquote>\n<p>Unfortunately the final <code>sorry</code> is out of reach for the time being</p>\n</blockquote>\n<p>Are you kidding??</p>",
        "id": 195295932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587837922
    },
    {
        "content": "<p><code>padic_norm</code> has no connection with <code>zmod p</code> at the moment</p>",
        "id": 195295942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587837941
    },
    {
        "content": "<p>Hensels lemma doesn't mention finite fields in Lean</p>",
        "id": 195295952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587837955
    },
    {
        "content": "<p>We really need Henselian rings, and 7 different versions of Hensel's lemma</p>",
        "id": 195295996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587837979
    },
    {
        "content": "<p>Ashwin started on DVR's, at least.</p>",
        "id": 195296008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587838005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I was inspired by your legendre calculation and the idea of having a legendre tactic to run through and calculate a symbol automatically (and then a ternary quadratic form tatic or something lol), so I made a PR to do one line of your proof automatically <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> rewriting <code>14=2*7</code> without thinking. <a href=\"https://github.com/leanprover-community/mathlib/issues/2536\" title=\"https://github.com/leanprover-community/mathlib/issues/2536\">#2536</a>.</p>",
        "id": 195311825,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587865661
    },
    {
        "content": "<p>Nice! I had recently been thinking about how to hook up more general computations. The vague idea that I had was:</p>\n<ul>\n<li>introduce a class <code>compute foo</code></li>\n<li>add instances of <code>compute fib</code> and <code>compute legendre_sym</code> that \"explain\" how to compute these functions</li>\n<li>make the <code>norm_num</code> tactic aware of this class</li>\n</ul>\n<p>Now the hard part is to figure out what \"explain\" means. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> do you have any ideas on how this could work?</p>",
        "id": 195315292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587872257
    },
    {
        "content": "<p>Probably it should return the answer and a proof of correctness.</p>",
        "id": 195315511,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587872684
    },
    {
        "content": "<p>My plan has been to use a <code>def_replacer</code> for <code>norm_num</code> so that you can dynamically add more disjuncts to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/norm_num.lean#L450-L451\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/norm_num.lean#L450-L451\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/norm_num.lean#L450-L451</a></p>",
        "id": 195315513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587872691
    },
    {
        "content": "<p>So for instance you could write something like <code>eval_prime</code> there in the file on primes instead of inside <code>norm_num</code> itself, and this tactic can do whatever trickery it needs to to efficiently compute the result</p>",
        "id": 195315580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587872765
    },
    {
        "content": "<p>It's not just constrained to being an evaluator, although for a lot of functions that's probably what you would do</p>",
        "id": 195315585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587872797
    },
    {
        "content": "<p>Would there be a dumbed down API method for people who are not very good at tactic writing?</p>",
        "id": 195315696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587873120
    },
    {
        "content": "<p>I think the easy version is that you first match on the expr you are looking for (e.g. <code>`(prime %%e)</code>), then use a quick tactic script to rewrite with the definition and call norm_num on what remains</p>",
        "id": 195315744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873183
    },
    {
        "content": "<p>which will wind up calling this function again recursively if you aren't done yet</p>",
        "id": 195315748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873210
    },
    {
        "content": "<p>Alternatively, you run the function externally (in the tactic/VM), then construct the result numeral and hope that <code>rfl</code> works as a proof</p>",
        "id": 195315796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873286
    },
    {
        "content": "<p>But to really have the desired dumbed down API we need the <code>cbv</code> tactic</p>",
        "id": 195315856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873380
    },
    {
        "content": "<p>and that probably has to be implemented in core</p>",
        "id": 195315868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873433
    },
    {
        "content": "<p>What would we need to make <code>cbv</code> happen? Could you write a roadmap?</p>",
        "id": 195315977,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587873645
    },
    {
        "content": "<p>Basically it is a tactic that performs the same operation as <code>#reduce</code> but with proofs</p>",
        "id": 195315983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873688
    },
    {
        "content": "<p>I think it needs to be implemented in C++ for efficiency</p>",
        "id": 195315987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873714
    },
    {
        "content": "<p>It is more or less <code>simp [all equation lemmas]</code></p>",
        "id": 195316024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873736
    },
    {
        "content": "<p>The name comes from a tactic with this behavior in Coq, but admittedly I don't know that much about how it works, what kinds of things cause it to stop and so on</p>",
        "id": 195316072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873872
    },
    {
        "content": "<p>You don't want to completely reduce the term to normal form because it will get unreadable long before then</p>",
        "id": 195316076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587873897
    },
    {
        "content": "<p>I found <a href=\"https://coq.inria.fr/refman/proof-engine/tactics.html#coq:tacn.cbv\" title=\"https://coq.inria.fr/refman/proof-engine/tactics.html#coq:tacn.cbv\">the doc page</a> on the Coq tactic. Is it like <code>dsimp</code> but with more control?</p>",
        "id": 195316467,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587874750
    },
    {
        "content": "<p>Regarding computing legendre symbols: Maybe it would be easier to teach <code>norm_num</code> how to evaluate <code>29^14</code> in <code>zmod p</code> and use Euler's criterion? This should certainly be much more computationally efficient for computing large legendre symbols.</p>",
        "id": 195322160,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1587886275
    },
    {
        "content": "<p>I don't know if this helps, but there's also a simple &amp; efficient algorithm to compute large Legendre symbols using QR: <a href=\"https://en.wikipedia.org/wiki/Jacobi_symbol#Calculating_the_Jacobi_symbol\" title=\"https://en.wikipedia.org/wiki/Jacobi_symbol#Calculating_the_Jacobi_symbol\">https://en.wikipedia.org/wiki/Jacobi_symbol#Calculating_the_Jacobi_symbol</a></p>",
        "id": 195323784,
        "sender_full_name": "David Wärn",
        "timestamp": 1587889238
    },
    {
        "content": "<p>Right the quadratic reciprocity one is what I had in mind, it's what I would do by hand. I don't know what the runtime of exponentiating and using eulers criterion is but it seems like it should be harder to take exponentials, even if you do it in a smart way (but it is easiest to implement).</p>",
        "id": 195324077,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587889813
    },
    {
        "content": "<p>Both should be polynomial in the number of digits, but exponentiation needs lots of expensive multiplications / remainders</p>",
        "id": 195324757,
        "sender_full_name": "David Wärn",
        "timestamp": 1587890961
    },
    {
        "content": "<p>keep in mind that the asymptotic analysis in the books isn't quite correct for theorem provers. Division / modulus are exactly as expensive as multiplication + addition, because it's the same proof</p>",
        "id": 195325115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587891508
    },
    {
        "content": "<p>Unfortunately the literature is much sparser on what the best bounds are for nondeterministic TMs</p>",
        "id": 195325140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587891552
    },
    {
        "content": "<p>The standard algorithm using QR will be super-fast in practice as long as there's an efficient division with remainder algorithm, and will also compute Jacobi symbols (note that it needs no factoring either, just casting out powers of 2). The p^(q-1)/2 approach leaves you having to do multiplications mod q which might really hurt if q has 100 digits, and doesn't work for Jacobi symbols because it relies on the units being cyclic</p>",
        "id": 195326008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587893008
    },
    {
        "content": "<p>what's qt?</p>",
        "id": 195326110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587893091
    },
    {
        "content": "<p>did you mean qr?</p>",
        "id": 195326124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587893123
    },
    {
        "content": "<p>Sorry, phone autocorrect</p>",
        "id": 195326147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587893151
    }
]