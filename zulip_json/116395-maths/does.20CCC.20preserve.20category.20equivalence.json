[
    {
        "content": "<p>if C and D are equivalent categories and C is CCC, does it follow that D is also CCC?</p>",
        "id": 200971320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280642
    },
    {
        "content": "<p>(CCC = Cartesian Closed Category)</p>",
        "id": 200971325,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280651
    },
    {
        "content": "<p>Yup, this is in mathlib already :)</p>",
        "id": 200971339,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280670
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/closed/cartesian.lean#L324\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/closed/cartesian.lean#L324</a></p>",
        "id": 200971350,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280691
    },
    {
        "content": "<p>then your goal that Type u is CCC follows from a more general theorem that if C is CCC then C =&gt; Type u (the category of functors) is CCC</p>",
        "id": 200971352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280694
    },
    {
        "content": "<p>Sure, but I don't have the latter yet</p>",
        "id": 200971367,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280717
    },
    {
        "content": "<p>And I've done the former</p>",
        "id": 200971415,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280726
    },
    {
        "content": "<p>(Largely to make sure my definition of CCC made sense)</p>",
        "id": 200971424,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280740
    },
    {
        "content": "<p>well but I think in mathlib we prove the most general things first</p>",
        "id": 200971435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280751
    },
    {
        "content": "<p>Also, C =&gt; Type u being CCC doesn't need C to be CCC</p>",
        "id": 200971445,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280768
    },
    {
        "content": "<p>oops</p>",
        "id": 200971449,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280776
    },
    {
        "content": "<p>Yeah and that's why I haven't made a PR yet :)</p>",
        "id": 200971461,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280789
    },
    {
        "content": "<p>Oh actually I already have done that C^op =&gt; Type u is CCC</p>",
        "id": 200971485,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280834
    },
    {
        "content": "<p>then you can deduce that C =&gt; Type u is CCC :P</p>",
        "id": 200971546,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280886
    },
    {
        "content": "<p>it's a pretty horrible proof though - if we're going for the most general thing then really we should show C^op =&gt; Type u is comonadic over Type u, and the category of coalgebras over a CCC is CCC</p>",
        "id": 200971567,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280915
    },
    {
        "content": "<p>do we know that empty and 1 are CCCs?</p>",
        "id": 200971577,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280934
    },
    {
        "content": "<p>We don't have any CCCs in mathlib right now</p>",
        "id": 200971582,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280946
    },
    {
        "content": "<p>then maybe I can PR the empty case</p>",
        "id": 200971586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280955
    },
    {
        "content": "<p>(is empty a category?)</p>",
        "id": 200971587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280958
    },
    {
        "content": "<p>Yeah, it's called pempty</p>",
        "id": 200971627,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280965
    },
    {
        "content": "<p>ok I'll work on the pempty case</p>",
        "id": 200971647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280997
    },
    {
        "content": "<p>If you desperately want more examples I can post my presheaf category version for now</p>",
        "id": 200971726,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592281099
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"err\">⊢</span> <span class=\"n\">category</span> <span class=\"n\">pempty</span>\n</code></pre></div>",
        "id": 200971920,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592281368
    },
    {
        "content": "<p>which file should I import?</p>",
        "id": 200971924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592281373
    },
    {
        "content": "<p>category_theory.pempty, I think</p>",
        "id": 200972010,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592281497
    },
    {
        "content": "<p>oh no pempty is not CCC</p>",
        "id": 200972142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592281696
    },
    {
        "content": "<p>guess why</p>",
        "id": 200972146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592281698
    },
    {
        "content": "<p>oh terminal doesn't exist</p>",
        "id": 200972163,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592281742
    },
    {
        "content": "<p>bingo</p>",
        "id": 200972220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592281804
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">closed</span><span class=\"bp\">.</span><span class=\"n\">cartesian</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">punit</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_finite_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">has_limits_of_shape</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">has_limit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cone</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span>\n                <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"n\">is_limit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_closed</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">closed</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">is_adj</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"o\">},</span>\n      <span class=\"n\">adj</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">hom_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">punit</span><span class=\"o\">,</span>\n        <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">},</span>\n        <span class=\"n\">counit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 200972458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592282091
    },
    {
        "content": "<p>yay</p>",
        "id": 200972460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592282094
    },
    {
        "content": "<p>But doesn't this follow from C =&gt; Type u being CCC? ;)</p>",
        "id": 200972473,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592282117
    },
    {
        "content": "<p><span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 200972481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592282132
    }
]