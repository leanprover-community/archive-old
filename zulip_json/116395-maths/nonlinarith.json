[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hD</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>How am I supposed to be solving goals like this? Is there a tactic that Coq has which can just do this? I think that if I were to ask an undergrad they'd say it was \"obvious\".</p>",
        "id": 157066131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548717355
    },
    {
        "content": "<p>[in my use case a,b,c,d are all of the form <code>|x|</code>]</p>",
        "id": 157066189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548717388
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hD</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n<span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hA</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span>           <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hB</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">ha</span> <span class=\"n\">hA</span><span class=\"o\">))</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span>           <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hC</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span>           <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hD</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hc</span> <span class=\"n\">hC</span><span class=\"o\">))</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>I'm assuming this is golfable...</p>",
        "id": 157066209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548717417
    },
    {
        "content": "<p>I just tried goofing around with <code>apply_rules</code> but I'm a first-timer.</p>",
        "id": 157066256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548717476
    },
    {
        "content": "<p>Does <code>mono</code> help?</p>",
        "id": 157066310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548717502
    },
    {
        "content": "<p><code>by mono* with [0 ≤ A, 0 ≤ C]; linarith</code></p>",
        "id": 157066943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548718090
    },
    {
        "content": "<p>actually it works even without the <code>with</code> part</p>",
        "id": 157067007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548718173
    },
    {
        "content": "<p>Kind of weird that <code>mono</code> can't deduce <code>0 ≤ A</code> from <code>0 ≤ a</code> and <code>a ≤ A</code> itself</p>",
        "id": 157067114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548718237
    },
    {
        "content": "<p>Right -- I was trying </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mono_rules</span><span class=\"o\">]</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">add_le_add_left</span>\n<span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">le_trans</span>\n</pre></div>\n\n\n<p>and then <code>by apply_rules mono_rules</code> but the <code>le_trans</code> makes it loop, and without it it can't do it.</p>",
        "id": 157067256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548718355
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hD</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Maybe this one is harder. How do I insert the <code>abs</code> into the picture? Note <code>abs_nonneg : ∀ (a : ?M_1), abs a ≥ 0</code></p>",
        "id": 157067383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548718537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hD</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">abs_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">abs_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">abs_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">d</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">abs_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mono</span><span class=\"bp\">*;</span><span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is there a better way of inserting <code>abs_nonneg</code> into the picture?</p>",
        "id": 157067630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548718748
    },
    {
        "content": "<p>That's basically what I was about to write except with <code>have := abs_nonneg a</code>, etc.</p>",
        "id": 157067643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548718776
    },
    {
        "content": "<p>Still, this is much better than what I had!</p>",
        "id": 157067720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548718841
    },
    {
        "content": "<p>I don't know if we have enough smarts to figure out to prove 0 &lt;= A from the assumption abs a &lt;= A and the lemma 0 &lt;= abs a</p>",
        "id": 157067721,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548718842
    },
    {
        "content": "<p><code>by undergrad</code></p>",
        "id": 157067727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548718852
    },
    {
        "content": "<p>Thanks Reid, by the way! The more my code looks like how a maths undergraduate thinks, the better it is. I don't think they're thinking about <code>mul_le_mul_of_nonneg_right</code>, at least not explicitly.</p>",
        "id": 157067807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548718932
    },
    {
        "content": "<p>It's just \"obvious\".</p>",
        "id": 157067812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548718950
    },
    {
        "content": "<p>I had never tried out <code>mono</code> before so this was also enlightening for me</p>",
        "id": 157067821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548718967
    },
    {
        "content": "<p>Well thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> too.</p>",
        "id": 157067827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548718979
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/linarith.20failure/near/157061326\" title=\"#narrow/stream/116395-maths/topic/linarith.20failure/near/157061326\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/linarith.20failure/near/157061326</a></p>",
        "id": 157067912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548719046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Can't you ask some former IMO participant to write a tactic that solves IMO-style inequalities? There are probably some among Imperial's first and second year students...<br>\nIt would be cool if we have all the mean inequalities, and Chebyshev, Jensen, etc...</p>",
        "id": 157086362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548746642
    },
    {
        "content": "<p>Yeah, we should tell Rob to add them to linarith :-) I am not sure how far you can get knowing all of those standard \"IMO syllabus\" inequalities, it always seemed to me that even if you knew them all you still needed more ideas to prove a random IMO inequality.</p>",
        "id": 157087191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548747862
    }
]