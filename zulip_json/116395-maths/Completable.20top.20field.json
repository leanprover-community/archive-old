[
    {
        "content": "<p>I would like to prove that the completion at an infinite place of a number field is a field. The way to do that is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion.field\">docs#uniform_space.completion.field</a> with a <code>completable_top_field</code>. There are few results about <code>completable_top_field</code> in mathlib but my hope is that one should able to prove that subfields of <code>ℂ</code> are <code>completable_top_field</code> which is all that I need. Is this a true assertion? And, if yes, what would be the strategy to prove that?</p>",
        "id": 302046152,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664797245
    },
    {
        "content": "<p>Yes, this is true. In order to prove it you need a more precise statement. If what you want is really that a subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> is completable then it should be very easy. I'll do that soon if nobody is faster (and if I don't forget).</p>",
        "id": 302053767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664800351
    },
    {
        "content": "<p>I quickly did it without carefully checking the existing library (it is rather suspicious that I couldn't find the first two pieces):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.subfield</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.uniform_field</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subtype.separated_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">separated_space</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">separated_iff_t2.mpr</span> <span class=\"n\">t2_5_space.t2_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">uniform_inducing.cauchy_map_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">uniform_inducing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">cauchy</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cauchy</span><span class=\"o\">,</span> <span class=\"n\">map_ne_bot_iff</span><span class=\"o\">,</span> <span class=\"n\">prod_map_map_eq</span><span class=\"o\">,</span> <span class=\"n\">map_le_iff_le_comap</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hf.comap_uniformity</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">completable_top_field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subfield.completable_top_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subfield</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">completable_top_field</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">nice</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">F</span> <span class=\"n\">F_cau</span> <span class=\"n\">inf_F</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">uniform_inducing</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">uniform_embedding_subtype_coe.to_uniform_inducing</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hi.cauchy_map_iff</span> <span class=\"n\">at</span> <span class=\"n\">F_cau</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_comm</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∘</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span> <span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">})],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">completable_top_field.nice</span> <span class=\"n\">_</span> <span class=\"n\">F_cau</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">filter.push_pull'</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hi.inducing.nhds_eq_comap</span><span class=\"o\">,</span> <span class=\"n\">inf_F</span><span class=\"o\">,</span>\n        <span class=\"n\">filter.map_bot</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">subtype.separated_space</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 302073650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664806936
    },
    {
        "content": "<p>Thanks! That's great but, if I am not confused, it requires the fact that <code>ℂ</code> is a <code>completable_top_field</code>, or I guess more generally, that a complete field is a <code>completable_top_field</code> and that seems to be missing too...</p>",
        "id": 302075020,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664807337
    },
    {
        "content": "<p>Sorry about that, I read your message too quickly and didn't notice we were also missing that. The thing is this completable field type class is really meant to construct the field structure on the completion and nothing else. Morally in your case you don't really want to consider an abstract completion but simply the closure of your number field in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>.  But proving these things is a good sanity check anyway. So here is your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">completable_top_field_of_complete</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_division_ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">completable_top_field</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">nice</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">cau_F</span> <span class=\"n\">hF</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ne_bot</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">cau_F.1</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">complete_space.complete</span> <span class=\"n\">cau_F</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">inf_eq_right.mpr</span> <span class=\"n\">hx</span> <span class=\"n\">at</span> <span class=\"n\">hF</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cau_F.1.ne</span> <span class=\"n\">hF</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter.tendsto.cauchy_map</span> <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map_mono</span> <span class=\"n\">hx</span>\n                                                       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at_inv₀</span> <span class=\"n\">hx'</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">‹</span><span class=\"n\">separated_space</span> <span class=\"n\">L</span><span class=\"o\">›}</span>\n</code></pre></div>\n<p>(with the same imports and openings as in my previous message).</p>",
        "id": 302079713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664808685
    },
    {
        "content": "<p>Thanks a lot! Do you have plans to PR those results?</p>",
        "id": 302080540,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664808959
    },
    {
        "content": "<p>I don't have plans but I can do it tonight if you need them. You can also do it if you prefer. The main work is to make sure the first two items in my first message are indeed missing (and to put them in a relevant location).</p>",
        "id": 302082358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664809473
    },
    {
        "content": "<p>Well, I would prefer if you PR these results but if you don't have time, I'll do it.</p>",
        "id": 302083877,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664809911
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/16805\">#16805</a></p>",
        "id": 302339578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664914624
    }
]