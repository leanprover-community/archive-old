[
    {
        "content": "<p>[Removed, incomplete.]</p>",
        "id": 290749886,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658750572
    },
    {
        "content": "<p>Consider a metric space X, and a set S in X. The following is the definition of the diameter of the set S: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">diameter</mi><mo>⁡</mo><mi>S</mi><mo>=</mo><mi mathvariant=\"normal\">sup</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>∣</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mi>S</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> \\operatorname{diameter} S = \\operatorname{sup} \\{d(x, y)  \\mid  x, y \\in S\\} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">diameter</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">sup</span></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">}</span></span></span></span>. Note that we could also write this as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">sup</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>∣</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>x</mi><mo mathvariant=\"normal\">≠</mo><mi>y</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{sup} \\{d(x, y)  \\mid  x, y \\in S, x \\ne y\\} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">sup</span></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">}</span></span></span></span>, as long as we're taking the operation over the extended non-negative reals so that we can deal with the sup of the empty set acceptably.</p>\n<p>Consider the quantity <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">inf</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>∣</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>x</mi><mo mathvariant=\"normal\">≠</mo><mi>y</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{inf} \\{d(x, y)  \\mid  x, y \\in S, x \\ne y\\} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">inf</span></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">}</span></span></span></span>, which is in some sense \"dual\" or \"opposite\" to this. Referencing <a href=\"https://math.stackexchange.com/questions/2325394/what-to-call-the-opposite-of-the-diameter-of-a-metric-space\">https://math.stackexchange.com/questions/2325394/what-to-call-the-opposite-of-the-diameter-of-a-metric-space</a>, it doesn't appear there is a standard name for this quantity. But I would like to define it in mathlib (as I need the minimum distance of a set for coding theory stuff, and this is a natural step towards that). Can anyone suggest a good short name for this quantity?</p>\n<p>The best one I've come up with so far is to call it the \"grain\" of the set - but I'm interested in better alternatives.</p>",
        "id": 290749951,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658750641
    },
    {
        "content": "<p>(Sorry about the early posting - formatting now fixed.)</p>",
        "id": 290750882,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658751275
    },
    {
        "content": "<p>I had a go at figuring out what this should be like. <a href=\"https://github.com/linesthatinterlace/verifying-cmce/blob/main/lean/src/shared/grain.lean\">https://github.com/linesthatinterlace/verifying-cmce/blob/main/lean/src/shared/grain.lean</a></p>",
        "id": 290793229,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658770674
    },
    {
        "content": "<p>It's a surprisingly robust definition! But one immediately wants to reach for equivalent notions to e.g. \"bounded\".</p>",
        "id": 290793307,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658770706
    },
    {
        "content": "<p>Related to but not the same as some of these concepts: <a href=\"https://en.wikipedia.org/wiki/Delone_set\">https://en.wikipedia.org/wiki/Delone_set</a></p>",
        "id": 290793375,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658770749
    },
    {
        "content": "<p>It's possible that \"packing radius of a set\" is the right term (which is different from the packing radius of the set with respect to the whole space, off by about a factor of two).</p>",
        "id": 290797423,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658772742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/Opposite.20of.20diameter.20of.20an.20.28e.29metric.20space.2E/near/290749951\">said</a>:</p>\n<blockquote>\n<p>Can anyone suggest a good short name for this quantity?</p>\n</blockquote>\n<p>How about <code>inf_separation</code> or more colloquially \"minimum separation\"?</p>\n<p>I think I've heard the \"minimum distance\" in coding theory, as you mention. It is quite descriptive. Unfortunately <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.inf_dist\">docs#metric.inf_dist</a> means a different thing, so I would avoid a naming clash --- therefore my proposal of \"separation\" rather than \"distance\".</p>",
        "id": 290805663,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1658776461
    },
    {
        "content": "<p>Packing radius might be nice, too, though. (modulo the factor 2)</p>",
        "id": 290806231,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1658776794
    },
    {
        "content": "<p><code>inf_sep</code> might be very nice! (I favour something short because it appears in theorem names: c.f. <code>diam</code> rather than diameter.)</p>",
        "id": 290830139,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658790144
    },
    {
        "content": "<p><code>grain</code> has the advantage of being five characters like <code>diam</code> &lt;_&lt;</p>",
        "id": 290830169,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658790172
    },
    {
        "content": "<p>I don't think that \"advantage\" is true</p>",
        "id": 290830357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658790337
    },
    {
        "content": "<p>The problem I have with <code>inf_sep</code> is that it could be read as <code>inf</code> + <code>sep</code>. So maybe <code>infsep</code>?</p>",
        "id": 290830950,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658790736
    },
    {
        "content": "<p>Four is basically the same as five, Eric.</p>",
        "id": 290833951,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658793019
    },
    {
        "content": "<p>I think you're right Yaël. But that might be an issue with any use of inf in the name.</p>",
        "id": 290833979,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658793051
    },
    {
        "content": "<p>No, because the naming convention means that name atoms are separated by underscores.</p>",
        "id": 290834090,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658793123
    },
    {
        "content": "<p>I'm not sure that rule is universal</p>",
        "id": 290835375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658794160
    },
    {
        "content": "<p>Do you have a counterexample in mind?</p>",
        "id": 290835481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658794246
    },
    {
        "content": "<p>Note that here I'm considering <code>bUnion</code> as an atom, even though it is derived from <code>Union</code>. Here, <code>b</code> acts as a modifier, not as an atom itself.Similarly for <code>forall</code> vs <code>forall₂</code>.</p>",
        "id": 290835591,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658794333
    },
    {
        "content": "<p><code>exists_unique</code></p>",
        "id": 290853415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658816395
    },
    {
        "content": "<p>Am inclined btw to define <code>fininfsep</code> and <code>infsep</code>, the former being for finsets.</p>",
        "id": 290865743,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658826332
    },
    {
        "content": "<p>Where they agree in the obvious case.</p>",
        "id": 290865750,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658826339
    },
    {
        "content": "<p>This is because in the finset case, obviously, you have minimum rather than infimum, and various nice things therefore hold.</p>",
        "id": 290865836,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658826390
    },
    {
        "content": "<p>and it's just nicer to work with really.</p>",
        "id": 290865848,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658826400
    },
    {
        "content": "<p>I'm making some good progress on a file: might have a WIP PR to share soon for comment.</p>",
        "id": 290865871,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658826423
    },
    {
        "content": "<p>if anyone can work out if <code>diam_union</code> has an analogous result for <code>infsep</code> and if so what that would be, that would be great.</p>",
        "id": 290865935,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658826472
    },
    {
        "content": "<p>You can also use <code>finset.inf_sep</code> and <code>set.inf_sep</code>, so that dot notation becomes available and the names are coherent.</p>",
        "id": 290866193,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658826650
    },
    {
        "content": "<p>There is no result for the <code>inf_sep</code> of a union: the sets <code>{0, 1}</code> and <code>{epsilon, 1+epsilon}</code> both have <code>inf_sep</code> equal to <code>1</code>, but the <code>inf_sep</code> of their union is arbitrarily small. (Or you need to assume some bound on the minimal distance between elements of <code>s</code> and <code>t</code>).</p>",
        "id": 290866345,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658826775
    },
    {
        "content": "<p>Hmm: we don't use dot notation for <code>diam</code> (perhaps we should). But that sounds useful.</p>",
        "id": 290866489,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658826888
    },
    {
        "content": "<p>What about the <code>inf_sep</code> of an intersection?</p>",
        "id": 290866505,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658826899
    },
    {
        "content": "<p>If <code>s</code> is included in <code>t</code>, then <code>s.inf_sep \\le t.inf_sep</code>. So the <code>inf_sep</code> of an intersection is bounded by the min of the inf_seps.</p>",
        "id": 290866635,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658826993
    },
    {
        "content": "<p>right, that's what I thought should be true</p>",
        "id": 290866663,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658827016
    },
    {
        "content": "<p>Bounded... below?</p>",
        "id": 290866675,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658827022
    },
    {
        "content": "<p>I'm not sure about s &lt;= t -&gt; s.inf_sep &lt;= t.inf_sep. I think the order reverses.</p>",
        "id": 290866727,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658827068
    },
    {
        "content": "<p>Yes, sorry!</p>",
        "id": 290866784,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658827089
    },
    {
        "content": "<p>To complicate matters slightly further naming-wise, you really want both a dist and edist version. So we have set and finset, dist and edist. How should they be incorporated into a name?</p>",
        "id": 290867690,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658827692
    },
    {
        "content": "<p><code>set.einfsep</code>, <code>set.infsep</code>, <code>finset.einfsep</code>, <code>finset.infsep</code> is one option.</p>",
        "id": 290867730,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658827721
    },
    {
        "content": "<p>I'd go with <code>set.inf_esep</code> and <code>set.inf_sep</code>, and similarly for finsets.</p>",
        "id": 290867802,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658827790
    },
    {
        "content": "<p>Aha</p>",
        "id": 290867811,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658827800
    },
    {
        "content": "<p>yes makes sense</p>",
        "id": 290867855,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658827804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Opposite.20of.20diameter.20of.20an.20.28e.29metric.20space.2E/near/290853415\">said</a>:</p>\n<blockquote>\n<p><code>exists_unique</code></p>\n</blockquote>\n<p>That's not a counterexample though. I'm saying that when there are two atoms, they are separated by an underscore. This name only has one atom.</p>",
        "id": 290874908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658832348
    },
    {
        "content": "<p>A counterexample would be something like <code>set.emptysmul</code>, but of course the real name is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.empty_smul\">docs#set.empty_smul</a>.</p>",
        "id": 290875037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658832448
    },
    {
        "content": "<p>Kinda the issue with the name <code>infsep</code> is that <code>inf</code> is really an atom that we are lumping together...</p>",
        "id": 290875669,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658832887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Opposite.20of.20diameter.20of.20an.20.28e.29metric.20space.2E/near/290834090\">said</a>:</p>\n<blockquote>\n<p>No, because the naming convention means that name atoms are separated by underscores.</p>\n</blockquote>\n<p>Oh sorry, I read this as \"atoms cannot contain underscores\"</p>",
        "id": 290875901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658833068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/Opposite.20of.20diameter.20of.20an.20.28e.29metric.20space.2E/near/290875669\">said</a>:</p>\n<blockquote>\n<p>Kinda the issue with the name <code>infsep</code> is that <code>inf</code> is really an atom that we are lumping together...</p>\n</blockquote>\n<p>Strictly for the not-necessarily-version the atom is <code>Inf</code></p>",
        "id": 290875972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658833097
    },
    {
        "content": "<p>That's exactly my point, though. If you write <code>inf_sep</code>, then you can read it as <code>inf</code> + <code>sep</code>. But if you write <code>infsep</code> that's impossible by the naming convention. In contrast, there's no rule that an atom shouldn't contain another atom as a sublist/prefix/suffix/infix/whatever.</p>",
        "id": 290876010,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658833130
    },
    {
        "content": "<p>(typically <code>mul</code> and <code>smul</code>)</p>",
        "id": 290876213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658833270
    },
    {
        "content": "<p>Well, I don't strongly care too much.</p>",
        "id": 290876364,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658833382
    },
    {
        "content": "<p>It'll all come out in the wash.</p>",
        "id": 290876380,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658833395
    },
    {
        "content": "<p>This now exists in draft form as <a href=\"https://github.com/leanprover-community/mathlib/pull/15689\">#15689</a>.</p>",
        "id": 290877618,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658834276
    },
    {
        "content": "<p>I'm actively seeking comment on it - it's not finished - but it feels developed enough that I don't feel silly asking for comment on it. In particular I have a number of lemmas I need to fill in, and I want to make sure I get them all.</p>",
        "id": 290877729,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658834340
    },
    {
        "content": "<p>There's some natural definitions about a space being uniformly discrete that could fit in with this. There's also the content of <a href=\"https://github.com/leanprover-community/mathlib/pull/12010\">#12010</a>. This is distinct from this but closely related to it, I think.</p>",
        "id": 290877891,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658834454
    },
    {
        "content": "<p>In the ultimate case I'm most interested in (Hamming weights for (finite) linear codes), everything is as \"nice\" as possible, but I realised that what that meant was that I was mixing up/fusing separate concepts. (In such a space, things are finite, but also the metric is natural-valued, and necessarily bounded and uniformly discrete.)</p>",
        "id": 290878187,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658834644
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15689\">#15689</a> just updated today and is now much improved. I think it's approaching, if not a final form, at least a form where I am less inclined to make minor changes.</p>",
        "id": 294968632,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661304490
    },
    {
        "content": "<p>There are some minor lemmas it depends on that should be their own PRs.</p>",
        "id": 294968640,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661304509
    },
    {
        "content": "<p>I would like to actively request someone to give it a detailed review and give me their full thoughts - focusing less on style issues etc. (though that is fine) and more on whether it's conceptually \"right\" and what natural lemmas might be missing.</p>",
        "id": 294968694,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661304577
    }
]