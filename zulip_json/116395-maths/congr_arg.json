[
    {
        "content": "<p>I used <code>apply congr_arg</code> in some of my proofs. At some point, I decided to <code>open locally_constant</code>. The following error occured :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ambiguous</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">congr_arg</span>\n  <span class=\"n\">locally_constant.congr_arg</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">ashvn</span><span class=\"bp\">\\</span><span class=\"n\">my_project1</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">src</span><span class=\"bp\">\\</span><span class=\"n\">number_theory</span><span class=\"bp\">\\</span><span class=\"n\">weight_space.lean</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">basic</span> <span class=\"n\">overload</span> <span class=\"n\">resolution</span> <span class=\"n\">where</span> <span class=\"n\">arguments</span> <span class=\"n\">are</span> <span class=\"n\">elaborated</span> <span class=\"n\">without</span> <span class=\"n\">any</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">because</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">available</span>\n</code></pre></div>\n<p>How does one deal with this?</p>\n<p>I would be grateful for any help, thank you!</p>",
        "id": 269791297,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1643399017
    },
    {
        "content": "<p>If you want to use <code>congr_arg</code> without any namespace just write <code>_root_.congr_arg</code>.</p>",
        "id": 269792197,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643399419
    },
    {
        "content": "<p>I see, thank you!</p>",
        "id": 269792364,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1643399501
    },
    {
        "content": "<p>The error means that Lean doesn't understand if you want to use <code>congr_arg</code> or <code>locally_constant.congr_arg</code>, beacuse after opening <code>locally_constant</code> both can be used by typing <code>congr_arg</code>.</p>",
        "id": 269792446,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643399525
    },
    {
        "content": "<p>This might mean that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_constant.congr_arg\">docs#locally_constant.congr_arg</a> should be <code>protected</code>.</p>",
        "id": 269792536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643399568
    },
    {
        "content": "<p>And/or that we should add <code>fun_like</code> to many more types.</p>",
        "id": 269834091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643426599
    },
    {
        "content": "<p>For reference, <a href=\"#narrow/stream/113488-general/topic/Morphism.20refactor\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Morphism.20refactor</a></p>",
        "id": 269835448,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1643428129
    }
]