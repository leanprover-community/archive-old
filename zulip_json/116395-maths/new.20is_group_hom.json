[
    {
        "content": "<p>Recently <code>is_group_hom</code> became a class. Previously we had </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_group_anti_hom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_group_anti_hom</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_group_anti_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">H</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>and I could then write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_conj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">conj</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">conj_is_mph</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>Is there such a compact way to write the proof of inv_conj with the new <code>is_group_hom</code>? I'm not talking about the LHS/RHS switch. I'm talking about the ability to use projection notation instead of writing <code>(is_group_hom.inv (conj b) a).symm</code></p>",
        "id": 125152694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523891655
    },
    {
        "content": "<p>I already complained about this :P</p>",
        "id": 125152701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523891685
    },
    {
        "content": "<p>I'm not really complaining</p>",
        "id": 125152704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523891699
    },
    {
        "content": "<p>right, but the answer is still you can't use projection</p>",
        "id": 125152712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523891710
    },
    {
        "content": "<p>I slightly prefer the old way in this case but I'm open to learning about advantages of the new way</p>",
        "id": 125152719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523891726
    },
    {
        "content": "<blockquote>\n<p>Now you do <code>is_group_hom.one f</code> I think</p>\n</blockquote>\n<p><span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span> <a href=\"#narrow/stream/113488-general/subject/is_group_hom.2Emul/near/124970169\" title=\"#narrow/stream/113488-general/subject/is_group_hom.2Emul/near/124970169\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/is_group_hom.2Emul/near/124970169</a></p>",
        "id": 125152841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523891923
    },
    {
        "content": "<p>You should be using <code>inv_conj</code> in your proofs anyways, so this is a one-time cost</p>",
        "id": 125152927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523892046
    },
    {
        "content": "<p>but what is <code>conj_is_mph</code>?</p>",
        "id": 125152943,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523892087
    },
    {
        "content": "<p>Hm, I didn't realize it was almost exactly the same question (I was vaguely aware of Kenny asking something about this change but didn't check)</p>",
        "id": 125152945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892093
    },
    {
        "content": "<p>also you should probably swap <code>inv_conj</code> for the same reason <code>is_group_hom.inv</code>  was swapped</p>",
        "id": 125152946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523892094
    },
    {
        "content": "<p>Indeed my only use of this lemma was a <code>rw [&lt;-invconj]</code></p>",
        "id": 125153006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892171
    },
    {
        "content": "<p>I'm trying (once more...) to get back to old stuff because I hope I'll have time to resume</p>",
        "id": 125153022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892224
    },
    {
        "content": "<p>I tried to work on the pi instance PR. But I failed in the preparatory work</p>",
        "id": 125153069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892247
    },
    {
        "content": "<p>I wanted to properly dispatch the content of Johannes' <code>prod_module.lean</code></p>",
        "id": 125153077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892270
    },
    {
        "content": "<p>But trying to move stuff always gets Lean to go crazy</p>",
        "id": 125153084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892296
    },
    {
        "content": "<p>everything gets frozen in VSCode and I only end up with a broken mathlib</p>",
        "id": 125153093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892322
    },
    {
        "content": "<p>Maybe I should PR everything into the <code>prod_module</code> black-hole and then let you or Johannes decide when this becomes a problem</p>",
        "id": 125153141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892374
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import algebra.group\n\nvariables {α : Type} [group α] (a b : α)\n\ndef conj := a * b * a⁻¹\n\ninstance conj.is_group_hom : is_group_hom (conj a) :=\nλ x y, by simp [conj, mul_assoc]\n\nlemma inv_conj : conj a (b⁻¹) = (conj a b)⁻¹ :=\nis_group_hom.inv (conj a) b\n</pre></div>",
        "id": 125153171,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523892475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> c'est c'que tu veux?</p>",
        "id": 125153213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523892483
    },
    {
        "content": "<p>I know how to do this (except I went with <code>by finish [is_group_hom, conj]</code> in the instance proof. I was only asking how to properly use the new interface</p>",
        "id": 125153251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523892582
    },
    {
        "content": "<p>right, which I demonstrated</p>",
        "id": 125153261,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523892600
    }
]