[
    {
        "content": "<p>Although I didn't check, I think there's evidence in my files that <code>ring</code> used to work here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">deterministic timeout</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 164608824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556699443
    },
    {
        "content": "<p>Sorry, I forgot the computer science word for \"it used to work and now it doesn't\". I might be wrong anyway -- but it looks like the sort of thing that <code>ring</code> should do...</p>",
        "id": 164608847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556699482
    },
    {
        "content": "<p>it's called backwards compatibility?</p>",
        "id": 164609573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1556700474
    },
    {
        "content": "<p>Regression was the word I was looking for</p>",
        "id": 164609636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556700542
    },
    {
        "content": "<p>Possibly related to this. This code is also incredibly slow.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">],</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 164609816,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556700784
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">excessive memory consumption detected at &#39;replace&#39; (potential solution:</span>\n<span class=\"cm\">increase memory consumption threshold)</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>aargh how do I get around this? My actual goal of</p>\n<div class=\"codehilite\"><pre><span></span>⊢ 2 * X * (2 * X * (2 * X * X - 1) - X) - (2 * X * X - 1) = 8 * X ^ 4 - 8 * X ^ 2 + 1\n</pre></div>\n\n\n<p>is going to be a real pain without <code>ring</code></p>",
        "id": 164726119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556817081
    },
    {
        "content": "<p>ha ha, my coefficients are integers and Chris just pointed out that <code>dec_trivial</code> works :D</p>",
        "id": 164727669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556818319
    },
    {
        "content": "<p>I really need to figure out when <code>dec_trivial</code> can prove something? Is there a good documentation somewhere? The bit in TPIL is really short. I tried proving <code>n + 3 = 3 + n</code>, with <code>(n : nat)</code> and that didn't fly... so I was confused.</p>",
        "id": 164730409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556820135
    },
    {
        "content": "<p><code>n + 3 = 3 + n</code> won't work because it depends on a variable, so <code>nat.decidable_eq (n + 3) (3 + n)</code> cannot be reduced. The equality of polynomials does not depend on any variables.</p>",
        "id": 164731047,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556820569
    },
    {
        "content": "<p>And <code>polynomial int</code> has <code>decidable_eq</code></p>",
        "id": 164731077,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556820590
    },
    {
        "content": "<p><code>dec_trivial</code> works if there's a trivial algorithm to decide whether what you want is true or not :-) Induction is definitely not trivial in this  context! <code>4 + 3 = 3 + 4</code> would be fine though, because everything is computable so both terms will reduce to a natural number; there's the algorithm to check to see if they're equal.</p>",
        "id": 164731162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556820646
    },
    {
        "content": "<p>It's like you can't <code>#eval (2 * n) % 2</code>. Deciding something is the same as evaluating the decidable instance.</p>",
        "id": 164731238,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556820705
    },
    {
        "content": "<p>Aha...</p>",
        "id": 164731581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556820874
    },
    {
        "content": "<p>An easy solution to these kinds of problems is to make a lemma to generalize over all types with appropriate structure, rather than relying on <code>polynomial</code>'s horrible instance searches</p>",
        "id": 164740012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556827072
    },
    {
        "content": "<p>That's not an easy solution. Particularly to the simp issue.</p>",
        "id": 164740361,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556827285
    },
    {
        "content": "<p>I am looking at code which was written in something like Jan and which has all this <code>simp</code> stuff about polynomials and everything is now hanging. I'm trying to fix it but this basically entails removing all use of <code>simp</code> :-/</p>",
        "id": 164740737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556827521
    },
    {
        "content": "<p>Except for theorems that are doing induction on polynomials or something, you can always just state the theorem in a general ring and specialize</p>",
        "id": 164742202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556828625
    },
    {
        "content": "<p>That's a workaround, not a solution</p>",
        "id": 164742312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556828718
    },
    {
        "content": "<p>that's right</p>",
        "id": 164742483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556828860
    },
    {
        "content": "<p>To be fair, it's actually the most efficient way to prove it if you consider the underlying proof term. You don't want to do that horrible instance search hundreds of times inside <code>ring</code></p>",
        "id": 164742592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556828941
    },
    {
        "content": "<p>And it's not a workaround for <code>simp</code>, because that does things specific to polynomials.</p>",
        "id": 164742607,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556828959
    },
    {
        "content": "<p>I can totally believe that. But this is not what the end-user wants to hear...</p>",
        "id": 164742617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556828975
    },
    {
        "content": "<p>The polynomial issues are another symptom of what Johannes describes here: <a href=\"#narrow/stream/113488-general/topic/Problem.20with.20type.20class.20search\" title=\"#narrow/stream/113488-general/topic/Problem.20with.20type.20class.20search\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Problem.20with.20type.20class.20search</a><br>\nI had a chance to look back at my scribbled notes from dealing with this in the cap set proof. The <code>polynomial.subsingleton</code> instance is the culprit. Changing that to a local instance allows <code>simp</code> (and <code>ring</code>) to work fine on polynomials.</p>",
        "id": 164742622,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556828984
    },
    {
        "content": "<p>I'm not sure if this instance is used other places in mathlib. I'm compiling now to test.</p>",
        "id": 164742686,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556829006
    },
    {
        "content": "<p>I also swear I found a way to get <code>simp</code> to work, without removing this instance. But it didn't make it into the final proof, or my notes, and I can't figure it out now. So that memory might be made up.</p>",
        "id": 164742758,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556829103
    },
    {
        "content": "<p>Why would that cause problems? <code>simp</code> uses <code>congr</code>, which exploratively searches for <code>subsingleton</code> instances. So it tries to prove <code>subsingleton (polynomial A)</code>, finds all the required structure on A, fails to find <code>subsingleton A</code>, and is done</p>",
        "id": 164742764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556829109
    },
    {
        "content": "<p>I guess we might be able to speed this up by putting the subsingleton instance first, before the ring structure</p>",
        "id": 164742823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556829138
    },
    {
        "content": "<p>There's some instance that leads to <code>subsingleton</code> through the algebraic hierarchy, iirc. I'm compiling mathlib now and don't want to change things back to see the trace again, I should have copied it.</p>",
        "id": 164742861,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556829197
    },
    {
        "content": "<p>Yeah, that's it.</p>",
        "id": 164742889,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556829234
    },
    {
        "content": "<p>Changing the order of those should fix it.</p>",
        "id": 164742906,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556829242
    },
    {
        "content": "<p>That's a better fix than making the instance local.</p>",
        "id": 164742953,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556829262
    },
    {
        "content": "<p>I'm not sure I understand. Are you solving the polynomial hell issue that has been a plague for one year? Or only the new part of it?</p>",
        "id": 164743043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556829331
    },
    {
        "content": "<p>This was introduced in <a href=\"https://github.com/leanprover-community/mathlib/pull/530\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/530\">https://github.com/leanprover-community/mathlib/pull/530</a> , so since January. Which sounds right. I don't remember these issues in the Hensel's Lemma proof, but they were there in the cap set proof.</p>",
        "id": 164743675,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556829824
    },
    {
        "content": "<p>What's the year long plague?</p>",
        "id": 164743732,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556829849
    },
    {
        "content": "<p>Maybe I'm exaggerating, we need to Zulip search</p>",
        "id": 164743758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556829884
    },
    {
        "content": "<p>or ask <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> if he remembers when he started to hate polynomials</p>",
        "id": 164743787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556829906
    },
    {
        "content": "<p>But ultimately, this is also just fixing a symptom. We're abusing type class search. This is the same thing that caused the <code>int-&gt;nat</code> coercion issue, and eventually we'll find a case that can't be fixed by reordering instances.</p>",
        "id": 164743893,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556830012
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/970\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/970\">https://github.com/leanprover-community/mathlib/pull/970</a></p>",
        "id": 164745496,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556831248
    },
    {
        "content": "<p>Many thanks indeed Rob. Nice find!</p>",
        "id": 164746117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556831650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> For an example of what's wrong with polynomials, this file <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean</a> is taking ages to type check. Back when I wrote it (it was put in a separate file later) we had discussions and Kenny remarked that there were issues with <code>polynomial</code>. But what exactly the issue is was never debugged (and I wouldn't know how to).</p>",
        "id": 164766622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556856811
    },
    {
        "content": "<p>I think there are a few different things going on here. </p>\n<p>The <code>decidable_eq</code> problems mentioned at <a href=\"#narrow/stream/113488-general/topic/free_comm_ring\" title=\"#narrow/stream/113488-general/topic/free_comm_ring\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/free_comm_ring</a> are a big one. I don't quite see the root of this problem, except that <code>mv_polynomial</code> leans too heavily on <code>decidable_eq</code>, and huge repeated searches for these instances seroiusly slow everything down. Playing around with instance priority can make a big difference here. E.g. if you're only considering two types <code>A</code> and <code>int</code>, where decidable equality on <code>A</code> is classical, set the priority for the classical instance to some big N and the priority for <code>int.decidable_eq</code> to N+1. This helps the first proof in that file, not so much the second.</p>\n<p>There's another thing. The category theory library doubles the number of <code>subsingleton</code> instances, which <code>simp</code> checks repeatedly. None of them look particularly bad on their own. But replacing some of the <code>simp only [...]</code> calls with <code>simp only []; sorry</code>,  and then deleting the <code>simp only []</code> part, you see that <code>simp only []</code> is taking about a second per call. This is only like 15% of the time in the second proof, but it's still surprising.</p>",
        "id": 164869087,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556977797
    },
    {
        "content": "<p>I've said this before, but I think we should just remove the <code>decidable_eq</code> constraint for polynomial. It's not an efficient computational representation anyway, so I'm not that concerned about going noncomputable</p>",
        "id": 164869581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556978552
    },
    {
        "content": "<p>We computed <code>polynomial.eval</code> at least once in the cap set proof. I'm sure it's avoidable, and worth giving up if it fixes issues here. But computability can be convenient.</p>",
        "id": 164871049,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556981075
    },
    {
        "content": "<p>Actually, I think that was a univariate polynomial.</p>",
        "id": 164871056,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556981100
    },
    {
        "content": "<blockquote>\n<p>I've said this before, but I think we should just remove the <code>decidable_eq</code> constraint for polynomial. It's not an efficient computational representation anyway, so I'm not that concerned about going noncomputable</p>\n</blockquote>\n<p>You mean <code>polynomial</code> or <code>mv_polynomial</code> or both? Not that I understand at all the subtleties of what is going on here...</p>",
        "id": 164871394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556981591
    }
]