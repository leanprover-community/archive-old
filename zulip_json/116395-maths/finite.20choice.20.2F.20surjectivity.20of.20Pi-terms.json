[
    {
        "content": "<p>I have two questions related to choice.<br>\n1) I am working on permutations on finite sets, and at some point, I needed to pick one point per orbit. <br>\nI am truly appalled at the prospect of using <code>classical.choice</code> for that, but I couldn't find instances of finite choice (a finite product of nonempty sets is nonempty).<br>\n2) In fact, I need to prove that a pi-term has a section, something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I was rapidly blocked by the syntax of Lean… How to use <code>use</code> in that context, for example ?</p>",
        "id": 299696174,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663658565
    },
    {
        "content": "<p>Do you have <code>fintype</code> instances floating around? Or only <code>finite</code>?</p>",
        "id": 299696296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663658634
    },
    {
        "content": "<p>Because under the hood a <code>fintype</code> carries around a list of elements, and you could probably grab an element out of that.</p>",
        "id": 299696384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663658674
    },
    {
        "content": "<p>This probably also needs <code>ι</code> to have decidable equality</p>",
        "id": 299698900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1663659879
    },
    {
        "content": "<p><code>existsi</code> can be used instead of <code>use</code>, it's a more primitive version of <code>use</code> (for example <code>existsi _</code> reliably works, but gives goals with metavariables...)</p>",
        "id": 299698973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663659916
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 299699220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663660013
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 299699313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663660077
    },
    {
        "content": "<p>(or is the point that you _really_ don't want to use AC for some reason?)</p>",
        "id": 299699382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663660098
    },
    {
        "content": "<p>Indeed, I _really_ do not want to use AC for those questions, when it's totally irrelevant: you don't use choice  to choose an element in a finite product. On the other hand, it would be nice if Lean could detect by itself that this <code>choice</code> does not depend on AC.</p>",
        "id": 299706840,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663663450
    },
    {
        "content": "<p>In mathlib, choice is used to prove excluded middle. The philosophy is really to use choice completely liberally, since it makes our life easier.</p>",
        "id": 299708205,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663664061
    },
    {
        "content": "<p>In some ways, in lean you need choice finitely unless you can construct a deterministic algorithm to choose some member of the finset</p>",
        "id": 299709190,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663664463
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> exists, which might be relevant here</p>",
        "id": 299709285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663664506
    },
    {
        "content": "<p>So if there's some linear order, you can choose the minimum, you can use fintype.choose if there exists only one as Eric W pointed out</p>",
        "id": 299709395,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663664539
    },
    {
        "content": "<p>But if there's many identical-looking possible elements, how does a deterministic program choose one?</p>",
        "id": 299709424,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663664554
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.fin_choice\">docs#quotient.fin_choice</a> is likely also relevant</p>",
        "id": 299710377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663665009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/finite.20choice.20.2F.20surjectivity.20of.20Pi-terms/near/299708205\">said</a>:</p>\n<blockquote>\n<p>In mathlib, choice is used to prove excluded middle. The philosophy is really to use choice completely liberally, since it makes our life easier.</p>\n</blockquote>\n<p>(This reminds me of Bourbaki using choice to define quantifiers…)<br>\nAbout this philosophy, why not ? Except that we're working with a compiler that sometimes requires  us to insert <code>decidable</code> predicates.</p>",
        "id": 299711153,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663665407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/finite.20choice.20.2F.20surjectivity.20of.20Pi-terms/near/299710377\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.fin_choice\">docs#quotient.fin_choice</a> is likely also relevant</p>\n</blockquote>\n<p>I precisely had in mind a variant of this function.</p>",
        "id": 299711254,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663665464
    },
    {
        "content": "<p><code>decidable</code> is only relevant when you are writing an algorithm that you would use to compute things. And in this case, avoiding choice is absolutely necessary. Otherwise, just use <code>classical.decidable</code> to make your life easier!</p>",
        "id": 299711968,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663665800
    },
    {
        "content": "<p>(it also matters because all decidable instances are not subsingletons, so if you use something designed for decidable instances not noticing, it can lead to errors of the form \"rw can't find X in the expression f X\" (because the first X is @X classical.dec_eq and the second is @X some_other_instance)</p>",
        "id": 299712919,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663666205
    },
    {
        "content": "<p>If you need a decidable assumption in a lemma, we all agree that you should have a corresponding typeclass assumption in the lemma, to avoid the issue you are mentioning. I was talking about things you do inside a proof.</p>",
        "id": 299713192,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663666313
    }
]