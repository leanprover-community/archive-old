[
    {
        "content": "<p>Hey, would it make sense to have a generic notion of “path metric” on a space as below ?<br>\nPossible uses would be the path metric on a graph, but also the “intrinsic path metric” on a metric space (using rectifiable paths).<br>\nWhat would a good API look like?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.emetric_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.connectivity</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">emetric</span> <span class=\"n\">ennreal</span>\n\n\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">paths</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">quiver</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">paths_with_lengths</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">paths</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Lrefl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">infi</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Lsymm</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Ltran</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">L</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">path_metric</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">paths_with_lengths</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">ℓ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"c1\">-- can we make this work</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">pl_edist</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"n\">infi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">))</span>\n<span class=\"kd\">instance</span> <span class=\"n\">my_edist</span> <span class=\"o\">[</span><span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">paths_with_lengths</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_edist</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pl_edist</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_finite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"o\">:</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n  <span class=\"n\">infi_lt_iff.mpr</span> <span class=\"o\">(⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Hp</span><span class=\"o\">⟩)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_antisymm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">le_infi</span> <span class=\"n\">Hab</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_antisymm'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">gt_of_ge_of_gt</span> <span class=\"o\">(</span><span class=\"n\">edist_antisymm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ε</span> <span class=\"n\">H</span> <span class=\"n\">Hab</span><span class=\"o\">)</span> <span class=\"n\">H</span>\n\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pmin</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hmin</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">pl.L</span> <span class=\"n\">pmin</span> <span class=\"bp\">≤</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">pl.L</span> <span class=\"n\">pmin</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_le.le.antisymm</span> <span class=\"o\">(</span><span class=\"n\">infi_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">pmin</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_infi</span> <span class=\"n\">Hmin</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">edist_min_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">np</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hnempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">Lℕ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hLℕ</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">Lℕ</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty.some</span> <span class=\"n\">hnempty</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hnat</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">np</span><span class=\"o\">,</span> <span class=\"n\">pgood</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">np</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">pgood</span><span class=\"o\">⟩,},</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find</span> <span class=\"n\">hLℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.find_spec</span> <span class=\"n\">hLℕ</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">pgood</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">pl.L</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hnat</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">nq</span><span class=\"o\">,</span><span class=\"n\">qgood</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nq</span> <span class=\"bp\">∈</span> <span class=\"n\">Lℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">qgood</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">nq</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat.find_min'</span> <span class=\"n\">hLℕ</span> <span class=\"o\">‹</span><span class=\"n\">nq</span><span class=\"bp\">∈</span><span class=\"n\">Lℕ</span><span class=\"o\">›,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">qgood</span><span class=\"o\">,</span><span class=\"n\">pgood</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">coe_nat_le_coe_nat.mpr</span> <span class=\"o\">‹</span><span class=\"n\">n</span><span class=\"bp\">≤</span><span class=\"n\">nq</span><span class=\"o\">›,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">edist_min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_edist_refl</span> <span class=\"o\">[</span><span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">paths_with_lengths</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">pl.Lrefl</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_edist_symm_le</span> <span class=\"o\">[</span><span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">paths_with_lengths</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">infi_mono'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">pl.L</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">pl.inv</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pl.Lsymm</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_edist_symm</span> <span class=\"o\">[</span><span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">paths_with_lengths</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_le.le.antisymm</span> <span class=\"o\">(</span><span class=\"n\">my_edist_symm_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_edist_symm_le</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infi_good</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hinfi</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">infi</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">εp</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">infi</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_edist_triangle</span> <span class=\"o\">[</span><span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">paths_with_lengths</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ennreal.le_of_forall_pos_le_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">hsum</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hε</span><span class=\"o\">}),},</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">abt</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">abt</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.top_add</span><span class=\"o\">,</span> <span class=\"n\">le_top</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">bct</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">bct</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.add_top</span><span class=\"o\">,</span> <span class=\"n\">ennreal.top_add</span><span class=\"o\">,</span> <span class=\"n\">le_top</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- rw infi_eq_top.not at abt,</span>\n  <span class=\"c\">/-</span><span class=\"cm\">have : edist a b = ⊤ ↔ ∀ (p : a ⟶ b), pl.L p = ⊤, by apply infi_eq_top,</span>\n<span class=\"cm\">  have := iff.not this, rw this at abt,</span>\n<span class=\"cm\">  have : edist b c = ⊤ ↔ ∀ (p : b ⟶ c), pl.L p = ⊤, by apply infi_eq_top,</span>\n<span class=\"cm\">  have := iff.not this, rw this at bct,</span>\n<span class=\"cm\">  push_neg at abt bct,-/</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"c1\">--unfold edist, unfold pl_edist,</span>\n    <span class=\"c1\">--apply infi_good (λ (p : a ⟶ b), pl.L p) abt (ε/2),</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">hp</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">pl.L</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">hq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">pq</span> <span class=\"o\">:=</span> <span class=\"n\">pl.comp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">pl.L</span> <span class=\"n\">pq</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"n\">pl.L</span> <span class=\"n\">pq</span>  <span class=\"bp\">≤</span> <span class=\"n\">pl.L</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">pl.L</span> <span class=\"n\">q</span>          <span class=\"o\">:</span> <span class=\"n\">pl.Ltran</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">pl.L</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">pl.L</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">hq</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span><span class=\"n\">ennreal.add_halves</span> <span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">infi_le_of_le</span> <span class=\"n\">pq</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_pem</span> <span class=\"o\">[</span><span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">paths_with_lengths</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_has_edist</span> <span class=\"o\">:=</span> <span class=\"n\">my_edist</span>\n<span class=\"o\">,</span> <span class=\"n\">edist_self</span> <span class=\"o\">:=</span> <span class=\"n\">my_edist_refl</span>\n<span class=\"o\">,</span> <span class=\"n\">edist_comm</span> <span class=\"o\">:=</span> <span class=\"n\">my_edist_symm</span>\n<span class=\"o\">,</span> <span class=\"n\">edist_triangle</span> <span class=\"o\">:=</span> <span class=\"n\">my_edist_triangle</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">path_metric</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">for_graphs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">lol</span> <span class=\"o\">:</span> <span class=\"n\">paths_with_lengths</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">G.walk</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.reverse</span><span class=\"o\">),</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p.append</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.length</span><span class=\"o\">),</span>\n  <span class=\"n\">Lrefl</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">le_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">infi_le</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">simple_graph.walk.nil'</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">simp</span><span class=\"o\">,}),</span>\n  <span class=\"n\">Lsymm</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">simple_graph.walk.length_reverse</span> <span class=\"n\">p</span><span class=\"o\">})),</span>\n  <span class=\"n\">Ltran</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">simple_graph.walk.length_append</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">}))}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">for_graphs</span>\n</code></pre></div>",
        "id": 298925524,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1663231093
    }
]