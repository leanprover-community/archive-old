[
    {
        "content": "<p>Mathlib currently has:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_id</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_comp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 237620877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620288196
    },
    {
        "content": "<p>Should those become unapplied versions. And then also have <code>id_apply</code> and <code>comp_apply</code>?</p>",
        "id": 237620896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620288214
    },
    {
        "content": "<p>That seems to be what happens with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Profinite.id_apply\">docs#Profinite.id_apply</a> and friends.</p>",
        "id": 237620918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620288231
    },
    {
        "content": "<p>What are the statements of the unapplied versions?</p>",
        "id": 237621021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620288265
    },
    {
        "content": "<p>aah, you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Profinite.coe_id\">docs#Profinite.coe_id</a> etc. Yeah, that sounds better than what we have! But not as <code>simp</code> lemmas I guess (the unapplied versions)</p>",
        "id": 237621113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620288327
    }
]