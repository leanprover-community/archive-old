[
    {
        "content": "<p>What's the idiomatic way to write down the ring hom from <code>zmod a</code> to <code>zmod b</code> given a proof that <code>b</code> divides <code>a</code>?</p>",
        "id": 208748562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598994370
    },
    {
        "content": "<p>Isn't there a cast?</p>",
        "id": 208748642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598994416
    },
    {
        "content": "<p>Yes there's a cast which is a ring hom somewhere</p>",
        "id": 208748745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598994467
    },
    {
        "content": "<p>Ah, yes, it's <code>cast_hom</code> thanks :)</p>",
        "id": 208748824,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598994495
    },
    {
        "content": "<p>it was recently involved in a scandal, but it's a good citizen if you know b divides a</p>",
        "id": 208748868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598994522
    },
    {
        "content": "<p>Oof <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.cast/src\">src#zmod.cast</a> is indeed a scandal.</p>",
        "id": 208749588,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598994830
    },
    {
        "content": "<p>Mathematically random and really hard to prove anything about!</p>",
        "id": 208750440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598995225
    },
    {
        "content": "<p>Would it be crazy to do something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">proj</span> <span class=\"o\">[</span><span class=\"n\">divides</span> <span class=\"n\">n</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">N</span> <span class=\"bp\">→+*</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">cast_hom</span> <span class=\"o\">(</span><span class=\"n\">divides</span><span class=\"bp\">.</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 208752606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598996489
    },
    {
        "content": "<p>I don't want to feed in divisibility proofs all the time.</p>",
        "id": 208752622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598996500
    },
    {
        "content": "<p>I think <code>[fact (n ∣ N)]</code> covers this sort of thing.  It seems hard to know when it's appropriate to use it!</p>",
        "id": 208752804,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598996625
    },
    {
        "content": "<p>Cool. Although I'm surprised that mathlib doesn't have something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">b</span>  <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 208754494,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598997671
    },
    {
        "content": "<p><code>fact</code> is exclusively for lightweight local typeclass inference. Global <code>fact</code> instances are banned because you could put literally anything in a <code>fact</code> and lean has to search through all instances in a very stupid way</p>",
        "id": 208754722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598997811
    },
    {
        "content": "<p>I see. I'll just abuse the typeclass search in my own project then.</p>",
        "id": 208754831,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598997869
    },
    {
        "content": "<p>You can use <code>localized</code> to set up largeish <code>fact</code> problems across several files</p>",
        "id": 208754885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598997904
    },
    {
        "content": "<p>basically <code>fact</code> is opt in</p>",
        "id": 208754933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598997941
    },
    {
        "content": "<p>I've never made a localized thing before. Is this the right syntax?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;attribute [instance] foo&quot;</span> <span class=\"k\">in</span> <span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 208755268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598998175
    }
]