[
    {
        "content": "<p>Heather and I need help to name lemmas (or find them already named in mathlib).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inf_property'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_glb</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf_property</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_glb</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">inf_property'</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span>\n</code></pre></div>\n\n<p>The proof is omitted for brevity, we had no trouble proving this. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>: enjoy the type class mess in these examples, in relation to our previous discussion.</p>",
        "id": 211505091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601305647
    },
    {
        "content": "<p><code>is_glb.exists_lt_mem</code>?</p>",
        "id": 211505990,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601305972
    },
    {
        "content": "<p>To me it sounds like a pretty random sampling from the statement, but if you like it then it's good enough for me.</p>",
        "id": 211506176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601306060
    },
    {
        "content": "<p>It is exactly that, but most options will be unless you spell everything out. <code>is_glb.exists_lt_mem_near</code>?</p>",
        "id": 211506478,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601306204
    },
    {
        "content": "<p>And we have <em>two</em> lemmas to name.</p>",
        "id": 211506652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601306285
    },
    {
        "content": "<p>TBH I don't expect the first one will get any use, maybe I should remove it.</p>",
        "id": 211506709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601306316
    },
    {
        "content": "<p>Heather originally stated this for real numbers and I simply picked random type classes to make it look more respectable;</p>",
        "id": 211506772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601306348
    },
    {
        "content": "<p><code>is_glb.exists_between_self_add</code>?</p>",
        "id": 211508133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601306983
    },
    {
        "content": "<p>Or <code>exists_lt_add</code></p>",
        "id": 211508161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601306996
    },
    {
        "content": "<p>Life was so much easier when we could just call it lemma 37.</p>",
        "id": 211508260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601307028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Lemma.20naming.20contest/near/211508260\">said</a>:</p>\n<blockquote>\n<p>Life was so much easier when we could just call it lemma 37.</p>\n</blockquote>\n<p>Like in some parts of <a href=\"https://coq.inria.fr/distrib/current/stdlib/Coq.Reals.RiemannInt.html\">coq stdlib</a>?</p>",
        "id": 211512942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601309244
    },
    {
        "content": "<p>imagine trying to use the API :-) I was skeptical of this naming system at first, believing it simply would not scale. But often I realised one just had to break things down carefully into the right pieces and name them well.</p>",
        "id": 211514653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601310096
    },
    {
        "content": "<p>Ok, I went with a variation on Reid's proposal. Next challenge is: where should we put:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_subgroup.int_mul_mem</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">add_subgroup.gsmul_mem</span> <span class=\"n\">G</span> <span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">gsmul_eq_mul</span> <span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211551344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601327623
    },
    {
        "content": "<p>This needs both <code>ring</code> and <code>add_subgroup</code>.</p>",
        "id": 211551408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601327646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Actually, I was wondering if the branch could be rewritten to use only <code>k •ℤ g</code>.</p>",
        "id": 211551618,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601327793
    },
    {
        "content": "<p>I can try this later if you like the idea.</p>",
        "id": 211551663,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601327842
    },
    {
        "content": "<p>Maybe. I think the lemma is good to have anyway. It's bedtime here, so it's your turn to play with this branch. I think this lemma is the last remaining thing to move.</p>",
        "id": 211551675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601327852
    }
]