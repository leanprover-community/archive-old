[
    {
        "content": "<p>I would like to rewrite based on <code>log (a ^ n) = n * log a</code> which should be a well-known log identity from high school; however, I can't seem to find it even after searching through the entire <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/complex/exponential.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/analysis/complex/exponential.html\"><code>analysis.complex.exponential</code></a> in mathlib. Is it not in mathlib yet or am I just not looking hard enough?</p>",
        "id": 189012832,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582631722
    },
    {
        "content": "<p>I think you found a hole. For <code>cpow</code> and the complex log, it is more or less true by definition, but there is an off by 2 pi i problem</p>",
        "id": 189013532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582632273
    },
    {
        "content": "<p>The real number version follows from that</p>",
        "id": 189013544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582632286
    },
    {
        "content": "<p>It would not surprise me if this were false for complex a, perhaps this is why it's not there</p>",
        "id": 189015246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582633968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189015246\" title=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189015246\">said</a>:</p>\n<blockquote>\n<p>It would not surprise me if this were false for complex a, perhaps this is why it's not there</p>\n</blockquote>\n<p>Interesting ...<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189013532\" title=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189013532\">said</a>:</p>\n<blockquote>\n<p>I think you found a hole. For <code>cpow</code> and the complex log, it is more or less true by definition, but there is an off by 2 pi i problem</p>\n</blockquote>\n<p>I see, I guess I will prove it by induction on <code>n</code> then</p>",
        "id": 189019210,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582637535
    },
    {
        "content": "<p>For induction you'll need log(ab)=log(a)+log(b) which might also be false for complex numbers.</p>",
        "id": 189019950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582638115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189019950\" title=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189019950\">said</a>:</p>\n<blockquote>\n<p>For induction you'll need log(ab)=log(a)+log(b) which might also be false for complex numbers.</p>\n</blockquote>\n<p>Is that result (for <code>a b : ℝ</code>) in mathlib?</p>",
        "id": 189020066,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582638215
    },
    {
        "content": "<p>aah but log_mul does indeed exist for reals :-)</p>",
        "id": 189020127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582638248
    },
    {
        "content": "<p>You shouldn't prove this by induction. For a theorem like this it generalizes to positive reals at least</p>",
        "id": 189069936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582671458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">log_pow_nat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">nat_zero_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log_mul</span><span class=\"o\">,</span>\n<span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">pow_pos</span> <span class=\"n\">hx</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">puzzle_2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">q</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,},</span>\n<span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">puzzle_3</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_div_eq_inv</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">inv_mul_cancel</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">puzzle_4</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_one</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pow_mul_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_add</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">puzzle_5</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span>  <span class=\"n\">pow_mul_nat</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div_eq_inv</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"n\">inv_mul_cancel</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_one</span><span class=\"o\">],</span>\n<span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">puzzle_6</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">puzzle_3</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_div_eq_inv</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_inv_cancel</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">log_pow_nat_inv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">hn_</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">set</span> <span class=\"n\">x_inv</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x_inv</span><span class=\"o\">,</span>\n<span class=\"n\">set</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">q1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n<span class=\"n\">rw</span> <span class=\"n\">puzzle_3</span><span class=\"o\">,</span>\n<span class=\"n\">suffices</span> <span class=\"n\">q1a</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"err\">←</span>  <span class=\"n\">q1a</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">puzzle_4</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hn_</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">puzzle_2</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">log_pow_nat</span> <span class=\"o\">(</span><span class=\"n\">x_inv</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_pos_of_pos</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">q2</span> <span class=\"o\">:=</span> <span class=\"n\">puzzle_5</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">q2</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">puzzle_6</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hn_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">log_pow_nat_pair</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"bp\">/</span> <span class=\"n\">b</span>  <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">q1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">q1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">pow_mul_nat</span> <span class=\"n\">x</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">log_pow_nat</span><span class=\"o\">,</span> <span class=\"n\">log_pow_nat_inv</span><span class=\"o\">],</span>\n<span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n<span class=\"n\">exact</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_pos_of_pos</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189568868,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583220116
    },
    {
        "content": "<p>Note that puzzle 3 is false if <code>x = 0</code>.</p>",
        "id": 189570235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583222192
    },
    {
        "content": "<p>Some of these puzzles might be solvable <code>by library_search</code></p>",
        "id": 189570240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583222206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> We know that continuous functions are determined by their values on dense subsets. But I don't know the theorem name from the top of my head.</p>",
        "id": 189570253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583222257
    },
    {
        "content": "<p>just finished clearing the sorries, indeed library_search and squeeze_simp were useful</p>",
        "id": 189570263,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583222277
    },
    {
        "content": "<p>In puzzle 3 you can probably just write <code>exact inv_mul_cancel h</code> after the rewrite. <code>revert</code> hardly ever gets used, in my experience</p>",
        "id": 189570603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583222557
    },
    {
        "content": "<p>ah that makes sense. I think revert was what I needed for squeeze_simp to give me a useful response</p>",
        "id": 189570630,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583222604
    },
    {
        "content": "<p>Some form of this theorem should end up in mathlib, right? Does that mean I should make a pull request or something?</p>",
        "id": 189570695,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583222660
    },
    {
        "content": "<p>Sure. Note however that mathlib has a style guide, and a lot of cleanup would be needed to get that proof mathlib ready</p>",
        "id": 189570801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583222802
    },
    {
        "content": "<p>Where do i find the style guide?</p>",
        "id": 189570814,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583222836
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/style.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/style.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/style.md</a></p>",
        "id": 189570831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583222864
    },
    {
        "content": "<p>You can also just browse mathlib sources to get a feel for the style</p>",
        "id": 189570866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583222882
    },
    {
        "content": "<p>Here's a restyling of <code>log_pow_nat_inv</code>. I probably haven't got the brackets quite right because I wrote this without lean, but the two exacts at the end indicate that something doesn't add up</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">log_pow_nat_inv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">x_inv</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">q1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">puzzle_3</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"n\">q1a</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">q1a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">puzzle_4</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hn_</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">puzzle_2</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">log_pow_nat</span> <span class=\"o\">(</span><span class=\"n\">x_inv</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_pos_of_pos</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">puzzle_5</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">puzzle_6</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189571193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583223287
    },
    {
        "content": "<p>I think you did in fact get the brackets right, it just compiles for me</p>",
        "id": 189571446,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583223617
    },
    {
        "content": "<p>The question isn't whether it compiles, it is whether there are ever multiple goals in flight</p>",
        "id": 189571455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583223647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Have you considered applying <code>exp_injective</code>?</p>",
        "id": 189571458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583223654
    },
    {
        "content": "<p>The point of the brackets is to organize the goals so that the structure of the proof is clearer</p>",
        "id": 189571490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583223702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nthat sounds like the kind of thing that would pull a lot of weight but I don't know where to apply it</p>",
        "id": 189571541,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583223724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> oh i see</p>",
        "id": 189571550,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583223743
    },
    {
        "content": "<p>Start your proof with <code>apply exp_injective</code></p>",
        "id": 189571551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583223744
    },
    {
        "content": "<p>which proof?</p>",
        "id": 189571558,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583223768
    },
    {
        "content": "<p>also i don't know where exp_injective lives, right now Im just trying to find it by typing it and pressing ctrl+space</p>",
        "id": 189571587,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583223840
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/b42e5687d8b45e47de69e64e944637a6a7b03e1c/src/data/complex/exponential.lean#L879\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/b42e5687d8b45e47de69e64e944637a6a7b03e1c/src/data/complex/exponential.lean#L879\">https://github.com/leanprover-community/mathlib/blob/b42e5687d8b45e47de69e64e944637a6a7b03e1c/src/data/complex/exponential.lean#L879</a></p>",
        "id": 189571640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583223893
    },
    {
        "content": "<p>In VScode, there is also the magnifying glass on the left. That might help as well.</p>",
        "id": 189571661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583223923
    },
    {
        "content": "<p>But I assume that you've imported <code>analysis.complex.exponential</code>?</p>",
        "id": 189571667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583223943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> What's the final statement that you want to prove?</p>",
        "id": 189571709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583223964
    },
    {
        "content": "<p>I guess something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">log_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 189571724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224011
    },
    {
        "content": "<p>yes</p>",
        "id": 189571753,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224067
    },
    {
        "content": "<p>So I would start that proof immediately with <code>apply exp_injective</code></p>",
        "id": 189571803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224084
    },
    {
        "content": "<p>If you apply exp_injective, then the rhs is <code>x ^ n</code> in the reals by definition</p>",
        "id": 189571812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224103
    },
    {
        "content": "<p>And the lhs is equal to that by <code>exp_log hx</code></p>",
        "id": 189571832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224135
    },
    {
        "content": "<p>okay</p>",
        "id": 189571833,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224135
    },
    {
        "content": "<p>i have import analysis.complex.exponential at the top of my file</p>",
        "id": 189571841,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224144
    },
    {
        "content": "<p>It's weird that this lemma isn't in mathlib yet.</p>",
        "id": 189571864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224159
    },
    {
        "content": "<p>unknown identifier 'exp_injective'</p>",
        "id": 189571867,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224165
    },
    {
        "content": "<p><code>real.exp_injective</code>?</p>",
        "id": 189571870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224173
    },
    {
        "content": "<p>that works</p>",
        "id": 189571872,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224179
    },
    {
        "content": "<p>I think the proof is as simple as <code>rw [rpow_def_of_pos, log_exp]</code></p>",
        "id": 189571881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224193
    },
    {
        "content": "<p>Aha, then you don't even need <code>exp_injective</code> (-;</p>",
        "id": 189571933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224232
    },
    {
        "content": "<p>woah so if you have a theorem that f_injective, then apply f_injective is the thing that applies f to both sides of an equation</p>",
        "id": 189571934,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224232
    },
    {
        "content": "<p>Which is just because of the general way <code>apply</code> works.<br>\n<code>hf : injective f</code> is really just a function that turns <code>f x = f y</code> into a proof that <code>x = y</code>.</p>",
        "id": 189571977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224301
    },
    {
        "content": "<p>cool i have spent a lot of time finding circuitous ways to apply f to both sides of an equation</p>",
        "id": 189572035,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224333
    },
    {
        "content": "<p>So if you <code>apply hf</code>, then Lean says, okay, you need to prove <code>x = y</code>, but by <code>hf</code> it suffices to give me a proof of <code>f x = f y</code></p>",
        "id": 189572037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224337
    },
    {
        "content": "<p>If you have a hypothesis <code>h : x = y</code>, and you want <code>h' : f x = f y</code>, then you should use <code>congr_arg f h</code>.</p>",
        "id": 189572053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224374
    },
    {
        "content": "<p>or <code>congr' 1</code></p>",
        "id": 189572071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224386
    },
    {
        "content": "<p>so should the code block</p>",
        "id": 189572090,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">log_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_def_of_pos</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log_exp</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 189572094,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224413
    },
    {
        "content": "<p>go into mathlib?</p>",
        "id": 189572099,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1583224416
    },
    {
        "content": "<p>Yes, more or less</p>",
        "id": 189572149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224447
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">log_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_def_of_pos</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log_exp</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 189572168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224482
    },
    {
        "content": "<p>I would change <code>n</code> to <code>y</code>, put <code>begin</code> on a new line, and maybe turn the statement into <code>real.log x * y</code> to preserve the order of <code>x</code> and <code>y</code> and golf the proof.</p>",
        "id": 189572171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you prefer the version with or without <code>mul_comm</code>?</p>",
        "id": 189572189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224506
    },
    {
        "content": "<p>they are both conceivably useful, but for consistency it's probably best to have the <code>y</code> on the right</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">log_pow</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rpow_def_of_pos</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log_exp</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 189572220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224552
    },
    {
        "content": "<p>Also, maybe the name should be <code>log_pow_of_pos</code>?</p>",
        "id": 189572294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224612
    },
    {
        "content": "<p>the <code>real.</code> is not necessary because this will be in the <code>real</code> namespace</p>",
        "id": 189572296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224617
    },
    {
        "content": "<p>Is there a <code>log_pow_of_neg</code>?</p>",
        "id": 189572308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224631
    },
    {
        "content": "<p>It's probably bananas</p>",
        "id": 189572314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224641
    },
    {
        "content": "<p>If not, I wouldn't bother</p>",
        "id": 189572315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224641
    },
    {
        "content": "<p>We have very bad powers of negative numbers</p>",
        "id": 189572335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224673
    },
    {
        "content": "<p>I think when it comes to <code>real.log</code> you should just assume the argument is always positive</p>",
        "id": 189572385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224703
    },
    {
        "content": "<p>Which can happen, if <code>x &lt; 0</code> and <code>y</code> is an even natural number...</p>",
        "id": 189572403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224729
    },
    {
        "content": "<p>I don't think rpow will give you that though</p>",
        "id": 189572411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224746
    },
    {
        "content": "<p>But of course the <code>real.log x</code> on the right would fail.</p>",
        "id": 189572416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224749
    },
    {
        "content": "<p><code>(-1 : ℝ) ^ (1/3 : ℝ)</code> also doesn't seem to be what I would hope.</p>",
        "id": 189572440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224783
    },
    {
        "content": "<p>What I would hope is a complex number</p>",
        "id": 189572449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224800
    },
    {
        "content": "<p>the odd power thing is nuts</p>",
        "id": 189572498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224823
    },
    {
        "content": "<p>We probably need a <code>has_pow ℝ ℚ</code>?</p>",
        "id": 189572500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224827
    },
    {
        "content": "<p>Just say no</p>",
        "id": 189572507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224844
    },
    {
        "content": "<p>use <code>abs</code> and <code>-</code> and build it from the positive version when necessary</p>",
        "id": 189572522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224869
    },
    {
        "content": "<p>So how would you express the inverse of <code>λ x, x^3</code>?</p>",
        "id": 189572526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224880
    },
    {
        "content": "<p><code>x^(1/3)</code>, and argue negative numbers by wlog</p>",
        "id": 189572541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224908
    },
    {
        "content": "<p>I don't follow</p>",
        "id": 189572597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224935
    },
    {
        "content": "<p><code>x^3</code> is invertible. that's all you need to know</p>",
        "id": 189572606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583224954
    },
    {
        "content": "<p>Ok, but you don't care about having a formula for the inverse?</p>",
        "id": 189572631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583224987
    },
    {
        "content": "<p>The function, if you want to write it down, is <code>if x &gt;= 0 then x^(1/3) else -(-x)^(1/3)</code></p>",
        "id": 189572641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583225006
    },
    {
        "content": "<p>Would it make sense to have a <code>nth_root 3 : ℝ → ℝ</code>?</p>",
        "id": 189572701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583225045
    },
    {
        "content": "<p>but I reject the idea that this is \"the\" <code>x^(1/3)</code> function</p>",
        "id": 189572705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583225049
    },
    {
        "content": "<p>You just don't like the fact that the absolute Galois group of <code>ℝ</code> has order 2...</p>",
        "id": 189572757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583225129
    },
    {
        "content": "<p>It's a real closed field man... shouldn't we celebrate?</p>",
        "id": 189572791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583225146
    },
    {
        "content": "<p>I think that when you start talking about 3rd roots you should go complex</p>",
        "id": 189572804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583225159
    },
    {
        "content": "<p>I would argue that when you start talking about <em>2nd</em> roots you should go complex.</p>",
        "id": 189572878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583225198
    },
    {
        "content": "<p>So you want to define x^y with x a negative real and y a rational with non-negative 2-adic valuation?</p>",
        "id": 189572881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583225204
    },
    {
        "content": "<p>We can put it on the pile, with x a positive real and y complex, and with x a non-zero complex and y an integer, as another random region of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> where the power operation happens to give a unique sensible answer.</p>",
        "id": 189572940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583225279
    },
    {
        "content": "<p>Unlike the first two, it is not continuous on that region</p>",
        "id": 189573104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583225469
    },
    {
        "content": "<p>It's not hard to check that you can't define <code>^</code> on all of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> and expect all the \"standard\" facts <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mi>b</mi><msup><mo stretchy=\"false\">)</mo><mi>c</mi></msup><mo>=</mo><msup><mi>a</mi><mi>c</mi></msup><msup><mi>b</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">(ab)^c=a^cb^c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mi>b</mi></msup><msup><mo stretchy=\"false\">)</mo><mi>c</mi></msup><mo>=</mo><msup><mi>a</mi><mrow><mi>b</mi><mi>c</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(a^b)^c=a^{bc}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">b</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>1</mn><mi>a</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1^a=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> to hold (because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(-1)^{1/2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> has got square <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">(-1)^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> and also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>1</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">1^{1/2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>), but then there seem to be these random regions where you can get away with it.</p>",
        "id": 189573124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583225508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189573104\" title=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189573104\">said</a>:</p>\n<blockquote>\n<p>Unlike the first two, it is not continuous on that region</p>\n</blockquote>\n<p>Is that really true?</p>",
        "id": 189573203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583225546
    },
    {
        "content": "<p>It's continuous for fixed y</p>",
        "id": 189573213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583225561
    },
    {
        "content": "<p>Isn't it just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mi>y</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">-((-x)^y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 189573232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583225585
    },
    {
        "content": "<p>but y is in a dense region and it's discontinuous in that direction</p>",
        "id": 189573236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583225586
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mn>2</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{2/3}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span> is positive for negative <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span></p>",
        "id": 189573338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583225696
    },
    {
        "content": "<p>ha!</p>",
        "id": 189573351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583225705
    },
    {
        "content": "<p>let me repeat: nuts</p>",
        "id": 189573374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583225724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> All these discussions shouldn't discourage you from creating a PR for that 2-liner. You found a hole in the libs! Well done.</p>",
        "id": 189574116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583226397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189571934\" title=\"#narrow/stream/116395-maths/topic/log.20(a.20.5E.20n).20.3D.20n.20*.20log.20a.20in.20mathlib.3F/near/189571934\">said</a>:</p>\n<blockquote>\n<p>woah so if you have a theorem that f_injective, then apply f_injective is the thing that applies f to both sides of an equation</p>\n</blockquote>\n<p>In this case you don't need it, but for feature reference : apply_fun f at hyp would do that for you.</p>",
        "id": 189575532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583227515
    },
    {
        "content": "<p>\"applying f to an equation\" can mean two things. If the <em>goal</em> is <code>x = y</code> then to \"apply f\" to it you <code>apply h</code> where <code>h</code> is the proof that <code>f</code> is injective. If you have a <em>hypothesis</em> <code>hyp : x = y</code> then you can \"apply f\" to it without injectivity, using <code>apply_fun f at hyp</code>.</p>",
        "id": 189585100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583235977
    },
    {
        "content": "<p>I think Donald found the hole :-)</p>",
        "id": 189585138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583236043
    }
]