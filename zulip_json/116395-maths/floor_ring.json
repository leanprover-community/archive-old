[
    {
        "content": "<p>Is every <code>floor_ring</code> a subring of the reals? Note that a <code>floor_ring</code> is not assumed commutative! But for a general <code>floor_ring</code> it is proved in the library that <code>floor x &lt;= x &lt; (floor x) + 1</code>.</p>",
        "id": 157514652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">floor_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">floor</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_floor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">floor</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>From <code>algebra/archimedean.lean</code></p>",
        "id": 157514707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277788
    },
    {
        "content": "<p>One can prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eq_floor_iff_bounds</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">⌊</span><span class=\"n\">r</span><span class=\"err\">⌋</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 157514740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277843
    },
    {
        "content": "<p>I just noticed we don't even have that <code>floor_ring</code> implies <code>archimedean</code></p>",
        "id": 157514815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277921
    },
    {
        "content": "<p>it's part of the definition in some sense, right?</p>",
        "id": 157514825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277933
    },
    {
        "content": "<p>You mean we don't have the instance?</p>",
        "id": 157514830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277938
    },
    {
        "content": "<p>not exactly... the definition of archimedean uses two variables from the ring</p>",
        "id": 157514852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277958
    },
    {
        "content": "<p>Sorry I'm talking nonsense. It's <code>linear_ordered_ring</code> which is part of the definition. I was going to delete my comments but then you replied too quickly :-)</p>",
        "id": 157514867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277983
    },
    {
        "content": "<p>only when you have a field does it reduce to the one variable version i.e. <code>archimedean_iff_nat_le</code> which is obviously implied by a floor ring</p>",
        "id": 157514872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277997
    },
    {
        "content": "<p>So this is another maths question, right? Are all <code>floor_ring</code>s archimedean?</p>",
        "id": 157515038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278179
    },
    {
        "content": "<p>A weaker question is: is every <code>floor_ring</code> commutative.</p>",
        "id": 157515054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278202
    },
    {
        "content": "<blockquote>\n<p>Is every <code>floor_ring</code> a subring of the reals?.</p>\n</blockquote>\n<p>What about reals with an infinitesimal <code>t</code>?</p>",
        "id": 157515105,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549278250
    },
    {
        "content": "<p>Right -- this is what I thought originally.</p>",
        "id": 157515122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278276
    },
    {
        "content": "<p>But what is the floor of <code>1/t</code>?</p>",
        "id": 157515128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278287
    },
    {
        "content": "<p>Also isn't Z[t] a floor ring?</p>",
        "id": 157515130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278294
    },
    {
        "content": "<p>where t is infinitesimal</p>",
        "id": 157515136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278303
    },
    {
        "content": "<p>Now there's a good candidate.</p>",
        "id": 157515144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278317
    },
    {
        "content": "<p><code>t</code> is not invertible in this example, so <code>1/t</code> is zero, so the floor of <code>1/t</code> is zero.</p>",
        "id": 157515151,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549278345
    },
    {
        "content": "<p>So maybe the question is whether every <code>floor_division_ring</code> is commutative.</p>",
        "id": 157515153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278348
    },
    {
        "content": "<p>OK but this is great, not every <code>floor_ring</code> is a subring of the reals.</p>",
        "id": 157515201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278383
    },
    {
        "content": "<p>that should be enough to get <code>archimedean</code>, at least</p>",
        "id": 157515209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278388
    },
    {
        "content": "<p>Does <code>archimedean</code> imply \"embeds in the reals\"??</p>",
        "id": 157515243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278445
    },
    {
        "content": "<p>I realise I know nothing about this stuff. I have been non-archimedean all my life.</p>",
        "id": 157515249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278461
    },
    {
        "content": "<p>there's a floor function, seems like a good start</p>",
        "id": 157515250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278463
    },
    {
        "content": "<p>just keep multiplying by 10 and floor</p>",
        "id": 157515260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278479
    },
    {
        "content": "<p>right! But are we assuming commutative here?</p>",
        "id": 157515305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278491
    },
    {
        "content": "<p>and you get a decimal expansion for a real</p>",
        "id": 157515306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278491
    },
    {
        "content": "<p>wait</p>",
        "id": 157515312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278520
    },
    {
        "content": "<p><code>Z[t]</code> is archimedean, I guess?</p>",
        "id": 157515319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278529
    },
    {
        "content": "<p>not by mathlib definition</p>",
        "id": 157515327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278543
    },
    {
        "content": "<p>that's what the two variables are for</p>",
        "id": 157515333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278555
    },
    {
        "content": "<p>Hey, can we have non-commuting infinitesimals, to give me a non-commuting <code>floor_ring</code>? I bet we can.</p>",
        "id": 157515342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278572
    },
    {
        "content": "<p>how do they compare?</p>",
        "id": 157515353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278600
    },
    {
        "content": "<p>I had ruled out infinitesimals because of my <code>1/t</code> error so my thoughts on this are all out of whack.</p>",
        "id": 157515361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278602
    },
    {
        "content": "<p>One is bigger than the other one.</p>",
        "id": 157515405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278610
    },
    {
        "content": "<p>Much bigger.</p>",
        "id": 157515407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278615
    },
    {
        "content": "<p>and <code>s * t &lt; t * s</code>?</p>",
        "id": 157515419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278642
    },
    {
        "content": "<p>This is the heart of the matter isn't it.</p>",
        "id": 157515424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278654
    },
    {
        "content": "<p>Maybe you order monomials lexicographically.</p>",
        "id": 157515432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278664
    },
    {
        "content": "<p>I could imagine this being preserved under pre and post multiplication by infinitesimals.</p>",
        "id": 157515450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278692
    },
    {
        "content": "<p>OK I think the thing to do in my decimal expansion thing is just to allow non-commutative rings until it starts becoming painful and then just add in the commutativity assumption.</p>",
        "id": 157515532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278808
    },
    {
        "content": "<p>requires a bit more formalization, but I think it checks out</p>",
        "id": 157515533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278810
    },
    {
        "content": "<p>aha you might want <code>decidable_linear_ordered_comm_ring</code></p>",
        "id": 157515587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278858
    },
    {
        "content": "<p>oh wait <code>linear_ordered_comm_ring</code> is there too</p>",
        "id": 157515589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278868
    },
    {
        "content": "<p>Yes, I discovered it when I was trying to debug why linarith couldn't prove <code>s &gt;= 0 -&gt; r - s &lt;= r</code> in the other thread!</p>",
        "id": 157515597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278895
    },
    {
        "content": "<p>[answer: default <code>ring</code> discharger wouldn't run because underlying ring was not commutative]</p>",
        "id": 157515627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549278956
    },
    {
        "content": "<p>I think linarith isn't really designed for noncomm rings, since it uses <code>ring</code> as part of completeness</p>",
        "id": 157515680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278986
    },
    {
        "content": "<p>Right, so when things start getting hairy to the extent that <code>simp</code> won't discharge things, I'll give in and switch to commutative rings.</p>",
        "id": 157515692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549279020
    },
    {
        "content": "<p>We could extend <code>ring</code> to noncomm rings, but I'm not sure how useful that is. It seems like it would just be a combination of <code>abel</code> and <code>cc</code> on the monomials</p>",
        "id": 157515705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549279054
    },
    {
        "content": "<p>I meant to get all this done over the weekend so I could work on the perfectoid project today, but I didn't quite finish, and I really want to do it because modulo decimal expansions we have the entire questions and solutions for my final exam, and this is too cool to go unignored. When I started here we had no sine and cosine so we couldn't even formalise the questions. Ever since my birthday I've been desperate to formalise this final exam but I've been in teaching / admin hell which I am now finally out of.</p>",
        "id": 157515775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549279149
    },
    {
        "content": "<p>I just noticed that <code>floor</code> is defined on rings, but the definition does not involve the multiplication at all. Shouldn't it be defined on <code>linear_order_add_comm_group</code> or something like that instead?</p>",
        "id": 157766370,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549535617
    },
    {
        "content": "<p><code>floor</code> takes values in Z so we need a group with a 1, but I am not sure we need the ring structure.</p>",
        "id": 157766633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549535871
    },
    {
        "content": "<p>Anyway, the only interesting examples are rationals and reals, so defining it on rings does no harm. We could even define it directly on <code>decidable_linear_ordered_comm_ring</code>.</p>",
        "id": 157767059,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549536395
    },
    {
        "content": "<p>Because Mario (I think) had already made the decision on what a <code>floor_ring</code> was, I just went with that when it came to fractional parts. The fact that I later on discovered that the rings were not necessarily commutative just meant that I had to be slightly more careful and could use slightly fewer tactics (i.e. no <code>ring</code>).</p>",
        "id": 157771513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549541179
    }
]