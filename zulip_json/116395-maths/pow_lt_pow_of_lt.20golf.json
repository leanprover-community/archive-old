[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- or [linear_ordered_field]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow_of_lt</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Is this in mathlib?</p>",
        "id": 147671439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542206170
    },
    {
        "content": "<p>all the other versions of this are in <code>group_power.lean</code>, but it looks like this one was missed</p>",
        "id": 147671985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542206676
    },
    {
        "content": "<p><code>nat.pow_lt_pow_of_lt_right : ∀ {x : ℕ}, x &gt; 1 → ∀ {i j : ℕ}, i &lt; j → x ^ i &lt; x ^ j</code></p>\n<p>This should be a theorem about partially ordered semirings or something, right?</p>",
        "id": 147671989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542206681
    },
    {
        "content": "<p>linear_ordered_semiring</p>",
        "id": 147672028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542206731
    },
    {
        "content": "<p>because we don't have partially ordered semirings</p>",
        "id": 147672039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542206742
    },
    {
        "content": "<p>I spotted this hole this time last year, when I didn't understand the purpose of the mathlib library. At the time, I just figured this was the sort of thing you had to prove yourself, because I had no concept of what \"should be there already\" (so I proved it in the case I needed it). I understand this concept much better now.</p>",
        "id": 147672170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542206859
    },
    {
        "content": "<p>here's my proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span>\n  <span class=\"o\">((</span><span class=\"n\">lt_mul_iff_one_lt_left</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pow_le_pow</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 147672449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542207094
    },
    {
        "content": "<p>I'm doing all my own example sheet questions again after last year's attempts. Some of the code I wrote a year ago was absolutely terrible.</p>\n<p>Here's the library I wrote this year, to do a question on my problem sheet about n'th roots (n a positive integer)</p>\n<p><a href=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets/blob/master/src/xenalib/real_nth_root.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets/blob/master/src/xenalib/real_nth_root.lean\">https://github.com/ImperialCollegeLondon/M1F_example_sheets/blob/master/src/xenalib/real_nth_root.lean</a></p>\n<p>Any stylistic comments or anything would be welcome. I only care about the reals but really that's for stylistic reasons -- I am trying to write a library with a lot of tactic mode proofs so maths students can follow them more easily, and I wanted to make it as simple as possible. Maybe some of this stuff is in mathlib but I understand my own proofs better -- I find them much more readable.</p>",
        "id": 147672553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542207191
    },
    {
        "content": "<p>My proof differs from yours in the proof strategy, which is most of why it is shorter</p>",
        "id": 147672666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542207279
    },
    {
        "content": "<p><code>lt_of_pow_lt</code> also has a very short proof using <code>pow_le_pow</code></p>",
        "id": 147672690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542207299
    },
    {
        "content": "<p>The lesson is \"use lemmas\"</p>",
        "id": 147672716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542207325
    },
    {
        "content": "<p>And I don't just mean use theorems that have already been proven, I mean arrange the proofs of similar facts to make the best use of commonality</p>",
        "id": 147672825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542207408
    },
    {
        "content": "<p>your assumptions to <code>lt_of_pow_lt</code> are also stronger than they need to be - it's nice when you can learn this by attempting the proof itself</p>",
        "id": 147673012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542207570
    },
    {
        "content": "<p><code>nth_root_unique</code> is reducible in the sense that it has an equality hypothesis - I would prove a lemma which doesn't have that hypothesis first</p>",
        "id": 147673104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542207614
    },
    {
        "content": "<p>it also factors into <code>x ^ n = y ^ n -&gt; x = y</code>, which should also be in <code>group_power</code> in some generality</p>",
        "id": 147673417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542207726
    },
    {
        "content": "<blockquote>\n<p>here's my proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span>\n  <span class=\"o\">((</span><span class=\"n\">lt_mul_iff_one_lt_left</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pow_le_pow</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p><code>pow_le_pow (le_of_lt ha) h</code> is a dirty trick, isn't it?</p>",
        "id": 147676410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209015
    },
    {
        "content": "<p>So the reason I have noticed that <code>pow_le_pow</code> trick is because I manually completely unfolded your proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">lt_mul_iff_one_lt_left</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ha</span><span class=\"o\">)},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pow_le_pow</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">lt_mul_iff_one_lt_left</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">pow_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- got it</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">ha</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">pow_le_pow</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- dirty trick?</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>into a form which I can actually <em>read</em>. Could there be some code which helps me do this unravelling? It is so much easier for me to inspect nodes of the tree when in tactic mode. <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> can code do this? Break down some simple class of term mode functions into a tactic proof?</p>",
        "id": 147676673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209215
    },
    {
        "content": "<p><code>explode</code> does this</p>",
        "id": 147677006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542209392
    },
    {
        "content": "<p>Even after this breaking-down I still lose information. For example after that first <code>lt_of_lt_of_le</code> -- when I do it in tactic mode I get an extra metavariable goal which Lean has solved in the term mode proof but has not solved in the tactic mode proof. I just want to inspect the metavariable-free goal which is actually proved at each function application I think. How does one do this?</p>",
        "id": 147677009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209398
    },
    {
        "content": "<p>How do I run <code>explode</code>?</p>",
        "id": 147677072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209413
    },
    {
        "content": "<p>found it</p>",
        "id": 147677126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209454
    },
    {
        "content": "<p>ooh, <code>explode</code> actually works pretty well on that proof</p>",
        "id": 147677334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542209642
    },
    {
        "content": "<p>Quick, we need an emoji</p>",
        "id": 147677383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209660
    },
    {
        "content": "<p>hey <code>#explode</code> is exactly the answer to my question!</p>",
        "id": 147677426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209709
    },
    {
        "content": "<p><span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 147677441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209721
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">explode</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span>\n  <span class=\"o\">((</span><span class=\"n\">lt_mul_iff_one_lt_left</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pow_le_pow</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">explode</span> <span class=\"n\">pow_lt_pow</span>\n</pre></div>\n\n\n<p>MWE. Say kids! Understand Mario's proofs in seconds with <code>#explode</code>! Cool name, cool tactic.</p>",
        "id": 147677664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542209886
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span>\n  <span class=\"o\">(</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n      <span class=\"o\">(</span> <span class=\"n\">lt_mul_iff_one_lt_left</span> <span class=\"err\">$</span>\n        <span class=\"n\">pow_pos</span>\n          <span class=\"o\">(</span> <span class=\"n\">lt_trans</span>\n              <span class=\"n\">zero_lt_one</span>\n              <span class=\"n\">ha</span>\n          <span class=\"o\">)</span>\n          <span class=\"bp\">_</span>\n      <span class=\"o\">)</span>\n      <span class=\"n\">ha</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span> <span class=\"n\">pow_le_pow</span>\n      <span class=\"o\">(</span> <span class=\"n\">le_of_lt</span> <span class=\"err\">$</span>\n        <span class=\"n\">ha</span>\n      <span class=\"o\">)</span>\n      <span class=\"n\">h</span>\n  <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Here is another way of taking your proof apart Mario. I have tried to have some sort of a system when unravelling. Is there some sort of name for a form like this? Again I feel like I applied an algorithm. I used $ for functions of one variable and indented for two or more.</p>\n<p>How do I tell which term fills the underscore in that proof, by the way? What's the easiest way?</p>",
        "id": 147678779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542210751
    },
    {
        "content": "<p>I discovered recently if you replace a <code>_</code> by a hole <code>{! !}</code> then Lean will give you an error saying there's only one way to fill the hole and tell you what it should be</p>",
        "id": 147678945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542210882
    },
    {
        "content": "<p>I was just about to say that ^</p>",
        "id": 147678962,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1542210896
    },
    {
        "content": "<p>In this case it's <code>n</code></p>",
        "id": 147678971,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1542210903
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span> <span class=\"c1\">-- 14</span>\n  <span class=\"o\">(</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"c1\">-- 11</span>\n      <span class=\"o\">(</span> <span class=\"n\">lt_mul_iff_one_lt_left</span> <span class=\"err\">$</span> <span class=\"c1\">-- 10</span>\n        <span class=\"n\">pow_pos</span> <span class=\"c1\">-- 9 -- takes two inputs</span>\n          <span class=\"o\">(</span> <span class=\"n\">lt_trans</span> <span class=\"c1\">-- 8</span>\n              <span class=\"n\">zero_lt_one</span> <span class=\"c1\">-- 7</span>\n              <span class=\"n\">ha</span> <span class=\"c1\">-- 5</span>\n          <span class=\"o\">)</span>\n          <span class=\"bp\">_</span> <span class=\"c1\">-- gaargh explode doesn&#39;t tell me</span>\n      <span class=\"o\">)</span>\n      <span class=\"n\">ha</span> <span class=\"c1\">-- 5</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span> <span class=\"n\">pow_le_pow</span> <span class=\"c1\">-- 13</span>\n      <span class=\"o\">(</span> <span class=\"n\">le_of_lt</span> <span class=\"err\">$</span> <span class=\"c1\">-- 12</span>\n        <span class=\"n\">ha</span> <span class=\"c1\">-- 5</span>\n      <span class=\"o\">)</span>\n      <span class=\"n\">h</span> <span class=\"c1\">-- 6</span>\n  <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I can't immediately see how to fill in that hole using the output of <code>#explode</code> though</p>",
        "id": 147679302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542211155
    },
    {
        "content": "<p>Funky numbering by the way.</p>",
        "id": 147679309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542211163
    },
    {
        "content": "<p>This is post-hoc and probably not immediate enough, but first note that the underscore is the second argument to <code>pow_pos</code> (easy to see right away with the bracket colorizer extension), and then compare with the corresponding line of <code>#explode</code>, which says <code>0 &lt; a ^ n</code>.</p>",
        "id": 147679900,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1542211646
    },
    {
        "content": "<p>Maybe this indentation is better:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">explode</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span> <span class=\"c1\">-- 14</span>\n  <span class=\"o\">(</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"c1\">-- 11</span>\n      <span class=\"o\">(</span> <span class=\"n\">lt_mul_iff_one_lt_left</span>  <span class=\"c1\">-- 10</span>\n        <span class=\"o\">(</span> <span class=\"n\">pow_pos</span> <span class=\"c1\">-- 9 -- takes two inputs</span>\n          <span class=\"o\">(</span> <span class=\"n\">lt_trans</span> <span class=\"c1\">-- 8</span>\n              <span class=\"n\">zero_lt_one</span> <span class=\"c1\">-- 7</span>\n            <span class=\"n\">ha</span> <span class=\"c1\">-- 5</span>\n          <span class=\"o\">)</span>\n        <span class=\"bp\">_</span> <span class=\"c1\">-- gaargh explode doesn&#39;t tell me</span>\n        <span class=\"o\">)</span>\n      <span class=\"o\">)</span>\n    <span class=\"n\">ha</span> <span class=\"c1\">-- 5</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span> <span class=\"n\">pow_le_pow</span> <span class=\"c1\">-- 13</span>\n      <span class=\"o\">(</span> <span class=\"n\">le_of_lt</span> <span class=\"c1\">-- 12</span>\n        <span class=\"n\">ha</span> <span class=\"c1\">-- 5</span>\n      <span class=\"o\">)</span>\n    <span class=\"n\">h</span> <span class=\"c1\">-- 6</span>\n  <span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">explode</span> <span class=\"n\">pow_lt_pow&#39;</span>\n</pre></div>",
        "id": 147679928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542211679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">explode</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pow_lt_pow&#39;</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- 0</span>\n<span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"c1\">-- 1</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"c1\">-- 2</span>\n<span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"c1\">-- 3,4</span>\n<span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- 5</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"c1\">-- 6</span>\n<span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"c1\">-- proof starts</span>\n<span class=\"n\">lt_of_lt_of_le</span> <span class=\"c1\">-- 14</span>\n  <span class=\"o\">(</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"c1\">-- 11</span>\n      <span class=\"o\">(</span> <span class=\"n\">lt_mul_iff_one_lt_left</span>  <span class=\"c1\">-- 10</span>\n        <span class=\"o\">(</span> <span class=\"n\">pow_pos</span> <span class=\"c1\">-- 9</span>\n          <span class=\"o\">(</span> <span class=\"n\">lt_trans</span> <span class=\"c1\">-- 8</span>\n              <span class=\"n\">zero_lt_one</span> <span class=\"c1\">-- 7</span>\n            <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"c1\">-- 5</span>\n        <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"c1\">-- gaargh explode doesn&#39;t tell me</span>\n    <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"c1\">-- 5</span>\n  <span class=\"o\">(</span> <span class=\"n\">pow_le_pow</span> <span class=\"c1\">-- 13</span>\n      <span class=\"o\">(</span> <span class=\"n\">le_of_lt</span> <span class=\"c1\">-- 12</span>\n        <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"c1\">-- 5</span>\n    <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c1\">-- 6</span>\n\n<span class=\"bp\">#</span><span class=\"n\">explode</span> <span class=\"n\">pow_lt_pow&#39;</span>\n</pre></div>\n\n\n<p>explode covers basically every other line of code</p>",
        "id": 147679979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542211705
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">explode</span> <span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">quadratic_reciprocity</span>\n<span class=\"c1\">-- (deterministic) timeout</span>\n</pre></div>\n\n\n<p>boo</p>",
        "id": 147680151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542211886
    },
    {
        "content": "<p>Hmm, so the line in the output of <code>#explode</code> corresponding to <code>pow_pos</code> is this:</p>\n<div class=\"codehilite\"><pre><span></span>9 │8    │ pow_pos                │ 0 &lt; a ^ n\n</pre></div>\n\n\n<p>Why doesn't the second column read <code>8,3</code> (<code>3</code> is the line corresponding to <code>n : nat</code>)? It's the same whether I put in <code>n</code> or <code>_</code>.</p>",
        "id": 147680230,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1542211935
    },
    {
        "content": "<p>Non-propositional arguments are automatically suppressed, because they would otherwise dominate the output and they are inferrable from the (fully elaborated) types in the right column</p>",
        "id": 147680270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212005
    },
    {
        "content": "<p>Wow, <code>explode</code> is really nice. It is great for teaching. I just tried</p>\n<div class=\"codehilite\"><pre><span></span>theorem foo (A B C : Prop) : (A → B → C) → (A ∧ B → C) :=\nλ h hab, and.elim hab (λ ha hb, h ha hb)\n\n#explode foo\n</pre></div>\n\n\n<p>It made me realize that the proof can be shortened:</p>\n<div class=\"codehilite\"><pre><span></span>theorem foo&#39; (A B C : Prop) : (A → B → C) → (A ∧ B → C) :=\nλ h hab, and.elim hab h\n</pre></div>\n\n\n<p>The tactic doesn't behave well with <code>have</code>, though.</p>\n<div class=\"codehilite\"><pre><span></span>theorem bar  (A B C : Prop) : A ∧ (B ∨ C) → (A ∧ B) ∨ (A ∧ C) :=\nassume h : A ∧ (B ∨ C),\nhave h₁ : A, from and.left h,\nhave h₂ : B ∨ C, from and.right h,\nor.elim h₂\n  (assume h₃ : B,\n    or.inl (and.intro h₁ h₃))\n  (assume h₃ : C,\n    or.inr (and.intro h₁ h₃))\n\n#explore bar\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would it be hard to handle <code>have</code> nicely in the tactic?</p>",
        "id": 147680342,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1542212056
    },
    {
        "content": "<p>hm, it's <code>explode</code> not <code>explore</code> but that is also an interesting name</p>",
        "id": 147680687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212334
    },
    {
        "content": "<p>Oops, sorry, I forgot to cut-and-paste that part and added it manually. You are right, it is also a good name.</p>",
        "id": 147680738,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1542212396
    },
    {
        "content": "<p><code>have</code> should be handled well since it will translate to a proof line that is referred to twice</p>",
        "id": 147680791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212410
    },
    {
        "content": "<p>what does it look like now? (on my phone)</p>",
        "id": 147680818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212446
    },
    {
        "content": "<p>indeed it is best suited to the basic dtt proofs used in intro logic</p>",
        "id": 147680925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212543
    },
    {
        "content": "<p>In general, I think I'd rather read the output from the bottom up when trying to figure out what you're doing.</p>",
        "id": 147680929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542212548
    },
    {
        "content": "<p>yes absolutely</p>",
        "id": 147680940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212558
    },
    {
        "content": "<p>so...it's upside-down?</p>",
        "id": 147680953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542212573
    },
    {
        "content": "<p>well no, it is meant to be read bottom up</p>",
        "id": 147680979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212610
    },
    {
        "content": "<p>but it follows the usual proof order</p>",
        "id": 147680988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212637
    },
    {
        "content": "<p>it is a fitch style proof display</p>",
        "id": 147681053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212678
    },
    {
        "content": "<p>Thanks a lot for alerting me to it.</p>",
        "id": 147681070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542212703
    },
    {
        "content": "<p><code>#explode bar</code> looks like this now:</p>\n<div class=\"codehilite\"><pre><span></span>bar : ∀ (A B C : Prop), A ∧ (B ∨ C) → A ∧ B ∨ A ∧ C\n0│   │ A                                                                                                                     ├ Prop\n1│   │ B                                                                                                                     ├ Prop\n2│   │ C                                                                                                                     ├ Prop\n3│   │ h                                                                                                                     ├ A ∧ (B ∨ C)\n4│   │ λ (h₁ : A),\n  have h₂ : B ∨ C, from h.right,\n  or.elim h₂ (λ (h₃ : B), or.inl ⟨h₁, h₃⟩) (λ (h₃ : C), or.inr ⟨h₁, h₃⟩) │ A → A ∧ B ∨ A ∧ C\n5│3  │ and.left                                                                                                              │ A\n6│4,5│ ∀E                                                                                                                    │ A ∧ B ∨ A ∧ C\n</pre></div>",
        "id": 147681091,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1542212731
    },
    {
        "content": "<p>also pp.beta helps sometimes</p>",
        "id": 147681164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542212775
    }
]