[
    {
        "content": "<p>I've had enough of the fascinating localisation topic being hidden within <a href=\"#narrow/stream/116395-maths/topic/cardinality.20of.20integers.20modulo.20n\" title=\"#narrow/stream/116395-maths/topic/cardinality.20of.20integers.20modulo.20n\">this thread</a> so I'm moving some of it here.</p>\n<p>Summary: <span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> wrote a predicate <code>is_localization A S B f</code> where A and B are rings, S is a submonoid of A, f : A -&gt; B is a ring hom, and the predicate is true iff B is isomorphic to A[1/S] and the triangle involving f commutes. Kenny <a href=\"https://github.com/kckennylau/Lean/blob/master/localization_alt.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/localization_alt.lean\">then Kenny'd it</a> and I think there is still no PR. Neil wrote down an excellent-looking <a href=\"#narrow/stream/116395-maths/topic/cardinality.20of.20integers.20modulo.20n/near/155197619\" title=\"#narrow/stream/116395-maths/topic/cardinality.20of.20integers.20modulo.20n/near/155197619\">list of tests</a> which as far as I know nobody has yet tried. <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> did you get as far as seeing whether this <a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/595aa1d6c5ce5a6fa0259c5a0a2226a91b07d96e/src/canonical_isomorphism_nonsense.lean#L268\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/595aa1d6c5ce5a6fa0259c5a0a2226a91b07d96e/src/canonical_isomorphism_nonsense.lean#L268\">ugly part of the schemes project</a> was made any simpler using this approach?</p>\n<p>Johan is asking about localisations in <a href=\"https://github.com/leanprover/mathlib/issues/481\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/481\">#481</a> and the stuff above might make us rethink the entire approach.</p>",
        "id": 158051679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549909272
    },
    {
        "content": "<p>I was just thinking about this... does <code>S</code> even have to be a submonoid? Or can it be any set?</p>",
        "id": 158051777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549909343
    },
    {
        "content": "<p>I talked to Kenny about this, and Neil mentioned something too. Neil pointed out that for log geometry you have a morphism from a monoid into a ring, but there you really do need monoids. I was forever needing stuff like A[1/f][1/g]=A[1/fg] and for that it would have been much easier to have subsets of A. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  then told me that if you don't use all the monoid but instead just the subset then there would be problems with constructiveness or something -- apparently just because you know all the inverses of f(s) for all s in some generating set T doesn't mean you know all the inverses of all the elements of T? I didn't really understand what he was saying but he knows a darn sight more about this sort of stuff than I do.</p>\n<p>I talked about this with Ramon and we came up with the idea of leaving the predicate as it is, together with its proof that it satisfies the universal property, but then writing another predicate on top, defining <code>is_localisation' A T B f</code> to be <code>is_localisation A &lt;T&gt; B f</code> or whatever, and working with that. This way we don't completely rip up Neil's interface and then realise that we needed it all along, but we can probably also prove the lemmas which we need about A[1/f][1/g]=A[1/fg] relatively painlessly. Kenny also remarked that A[1/S] was equal to A[1/U] where U is the \"saturation\" of S, which I quickly discovered did not mean the u such that u^n in S for some n&gt;=1 but the u which divide an element of S.</p>\n<p>I think that's everything I know. I've not had a chance to think about this stuff recently. Maybe tomorrow I'll work with Ramon on it.</p>",
        "id": 158052076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549909656
    },
    {
        "content": "<p>I guess one big question is: is Neil or Kenny actually going to PR this predicate? It seemed to me that after we had the universal property, which we did have, we had enough to make it worth PR'ing.</p>",
        "id": 158052376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549909875
    },
    {
        "content": "<p>Another question is: if <code>[is_ring_hom f]</code> from A to B, then how do I get <code>module A B</code>? Type class inference won't work, right?</p>",
        "id": 158055135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549911933
    },
    {
        "content": "<p>Is the instance there?</p>",
        "id": 158055142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549911939
    },
    {
        "content": "<p>The def is there in Kenny's recent algebra PR somewhere.</p>",
        "id": 158055224,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549911986
    },
    {
        "content": "<p>You mean his localisation PR or another one?</p>",
        "id": 158057813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549913729
    },
    {
        "content": "<p>Another one</p>",
        "id": 158059478,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549914916
    },
    {
        "content": "<p>It's merged</p>",
        "id": 158059500,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549914943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I haven't got there yet. But we can start working on that today, I think that's one of the trickiest bits. I'm glad this has been moved from \"cardinality of integers modulo n\" haha</p>",
        "id": 158119510,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1549980395
    },
    {
        "content": "<p>Also, the PR which is currently open for localisation stuff has nothing to do with <span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> 's code right?</p>",
        "id": 158119636,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1549980491
    },
    {
        "content": "<p>Yes, that's right. It's an older PR by Kenny.</p>",
        "id": 158120146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549981029
    },
    {
        "content": "<p>Probably somewhat orthogonal. But I think the entire file would need a refactor if we implement Neil's approach.</p>",
        "id": 158120157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549981061
    },
    {
        "content": "<blockquote>\n<p>Probably somewhat orthogonal. But I think the entire file would need a refactor if we implement Neil's approach.</p>\n</blockquote>\n<p>That is not so clear. Neil's approach gives what is hopefully a simple way of checking to see if a ring that we have lying around already happens to be the localisation of A at S. You still have to actually construct the localisation as in the PR if you don't have one lying around already. </p>\n<p>The difficulty comes when you have a lemma about A[1/f][1/g] (built using Kenny's explicit construction) and you want to apply it to A[1/fg] (built using Kenny's explicit construction). In the schemes project I had to prove that A[1/f][1/g] had the universal property which classified A[1/fg] and could from that build a map from A[1/f][1/g] to A[1/fg] and prove that it was the unique A-algebra morphism, again using the universal property. With Neil's approach the <em>hope</em> (although nobody has checked yet, as far as I know, however this might change today) is that I can instead show that A[1/f][1/g] satisfies Neil's predicate for A and &lt;fg&gt;, which looks much much easier to do, and then get the equiv + uniqueness for free all from the API.</p>",
        "id": 158121451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549982132
    },
    {
        "content": "<p>Kenny's PR is a refactoring based on a more mature understanding of definitional equality. He wrote his localisation code when he was very much a Lean beginner -- over a year ago. Now he's fixing it up, that's the PR (removing lam &lt;x,y&gt; and replacing with lam a, and then changing x to a.1 etc)</p>",
        "id": 158131710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549989796
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">localization_alt</span><span class=\"bp\">.</span><span class=\"n\">is_localization</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"o\">}))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">e</span><span class=\"o\">})</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">is_semiring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"o\">}))</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">one_mul</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">⟨⟨</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span> <span class=\"n\">e</span><span class=\"bp\">⟩</span><span class=\"o\">),</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">sub_add_cancel</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 158391864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550008989
    },
    {
        "content": "<p>unit test of localization_alt <span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span></p>",
        "id": 158391867,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550008995
    },
    {
        "content": "<p><code>A[1/e] = A/(1-e)</code></p>",
        "id": 158392003,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550009132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> just posted me his proof that <code>A[1/f][1/g]</code> has the universal property of <code>A[1/fg]</code>. Ramon -- post it here!</p>\n<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span>  -- are you going to PR your predicate? <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> was complaining yesterday that some work we're doing in the perfectoid project was clunky because our localisation API was not as good as it could be. I think both your predicate and Kenny's <a href=\"https://github.com/leanprover/mathlib/issues/481\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/481\">#481</a> (<span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> did you see that Kenny fixed the issues with all the <code>@</code>s?) would be of much use to us; we will shortly be moving on to defining the presheaf on an adic space and this is a localisation followed by a completion so we will be stress testing both the localisation API and Patrick's work on completions of topological rings.</p>",
        "id": 158445463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550069120
    },
    {
        "content": "<p>Are you planning on doing the data containing version of <code>is_localisation</code>, or are you making everything noncomputable.</p>",
        "id": 158445607,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550069235
    },
    {
        "content": "<p>I cannot make any coherent response to this comment myself.</p>",
        "id": 158446347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550069742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you have a reason for choosing one way or another which would convince me?</p>",
        "id": 158446414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550069768
    },
    {
        "content": "<p>no</p>",
        "id": 158446537,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550069850
    },
    {
        "content": "<p>I don't think it's a bad idea to carry data around.</p>",
        "id": 158446694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550069935
    },
    {
        "content": "<p>I think typically in these \"categorical\" situations it makes life easier.</p>",
        "id": 158446737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550069957
    },
    {
        "content": "<p>I would trust Johan's judgement -- we will be seriously using this stuff soon enough and perhaps things will be clearer then, but Johan has already started to use it.</p>",
        "id": 158446914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550070044
    },
    {
        "content": "<p>Here's what I have done: <a href=\"https://gist.github.com/ramonfmir/976ce8abd823a08a63560393d538f5d6\" target=\"_blank\" title=\"https://gist.github.com/ramonfmir/976ce8abd823a08a63560393d538f5d6\">https://gist.github.com/ramonfmir/976ce8abd823a08a63560393d538f5d6</a></p>",
        "id": 158446980,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1550070083
    },
    {
        "content": "<p>The idea is to prove is_localisation R[1/a][1/b] &lt;ab&gt;, where R[1/a][1/b] is the explicit construction.</p>",
        "id": 158447145,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1550070201
    },
    {
        "content": "<p>I am happy to PR anything that people think is worthwhile.  However, I am not really up to speed on either the whole git framework or the specific conventions of mathlib.  I know that <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/howto-contribute.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/howto-contribute.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/howto-contribute.md</a> exists but have not digested it yet.  If someone wants to make a more specific suggestion about exactly what I should do, then I am happy to follow it.  (But I probably won't be able to respond to anything until this evening or tomorrow.)</p>",
        "id": 158447840,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550070670
    },
    {
        "content": "<p>Would you be offended if someone else PR'ed your work?</p>",
        "id": 158447880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550070715
    },
    {
        "content": "<p>(after getting it into the required state for mathlib?)</p>",
        "id": 158447929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550070727
    },
    {
        "content": "<p>As you can see, the community has done 2/3 of your challenge tests. Just the Z[1/p] one to go. And Reid Barton suggested another test -- localisation of localisation is localisation (for more general monoids, not just &lt;f&gt; and &lt;g&gt;)</p>",
        "id": 158447976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550070782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you have a reason for choosing one way or another which would not convince <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>?</p>",
        "id": 158448009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550070810
    },
    {
        "content": "<p>I'm super-motivated because I think that the perfectoid project is almost at the stage where we want to really push the localisation API and I am sure, based on my experience with schemes, that your predicate will play a valuable role.</p>",
        "id": 158448089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550070847
    },
    {
        "content": "<p>That's fine by me.  I hope that things will be left in a state where I can easily see how I could have done it myself.</p>",
        "id": 158448115,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550070872
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">@Kenny Lau</span> do you have a reason for choosing one way or another which would not convince <span class=\"user-mention silent\" data-user-id=\"110038\">@Kevin Buzzard</span>?</p>\n</blockquote>\n<p>no</p>",
        "id": 158449036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550071549
    },
    {
        "content": "<p>This surprises me</p>",
        "id": 158455673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550076084
    }
]