[
    {
        "content": "<p>Is there a canonical way to express a complex number in exponential form. This is what I've done, but it seems long-winded.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"c1\">-- Aim to show `u = u₂`</span>\n<span class=\"kd\">def</span> <span class=\"n\">θ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">real.pi</span><span class=\"bp\">/</span><span class=\"mi\">4</span>\n<span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">θ</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">θ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- We need a few lemmas that aren't in mathlib</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cos_pi_div_four</span> <span class=\"o\">:</span> <span class=\"n\">complex.cos</span> <span class=\"o\">((</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">re_add_im</span> <span class=\"o\">(</span><span class=\"n\">complex.cos</span> <span class=\"o\">((</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex.cos_of_real_re</span><span class=\"o\">,</span> <span class=\"n\">complex.cos_of_real_im</span><span class=\"o\">,</span> <span class=\"n\">real.cos_pi_div_four</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sin_pi_div_four</span> <span class=\"o\">:</span> <span class=\"n\">complex.sin</span> <span class=\"o\">((</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">re_add_im</span> <span class=\"o\">(</span><span class=\"n\">complex.sin</span> <span class=\"o\">((</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex.sin_of_real_re</span><span class=\"o\">,</span> <span class=\"n\">complex.sin_of_real_im</span><span class=\"o\">,</span> <span class=\"n\">real.sin_pi_div_four</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">u</span> <span class=\"n\">u₂</span> <span class=\"n\">θ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex.of_real_div</span><span class=\"o\">,</span><span class=\"n\">complex.of_real_neg</span><span class=\"o\">,</span><span class=\"n\">neg_div</span><span class=\"o\">,</span><span class=\"n\">cos_neg</span><span class=\"o\">,</span><span class=\"n\">sin_neg</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">complex.of_real_div</span><span class=\"o\">,</span> <span class=\"n\">complex.cos_pi_div_four</span><span class=\"o\">,</span> <span class=\"n\">complex.sin_pi_div_four</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214766399,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603834026
    },
    {
        "content": "<p>well an obvious improvement would be to use <code>exp (I * theta)</code></p>",
        "id": 214766885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603834301
    },
    {
        "content": "<p>isn't that just one lemma away™?</p>",
        "id": 214767015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603834376
    },
    {
        "content": "<p>Once I've rewritten with <code>exp</code>,  how can I show <code>u = u₂</code>?</p>\n<p>Edit: above, I need to use a result <code>complex.cos_pi_div_four</code>. Is there an equivalent result <code>exp_I_pi_div_four</code>? Or some other clever way to work with <code>exp</code>?</p>",
        "id": 214767537,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603834680
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exp_I_pi_div_four</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">((</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp_mul_I</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">of_real_cos</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">of_real_sin</span><span class=\"o\">,</span> <span class=\"n\">real.cos_pi_div_four</span><span class=\"o\">,</span> <span class=\"n\">real.sin_pi_div_four</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214769373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603835671
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Aim to show `u = u₂`</span>\n<span class=\"kd\">def</span> <span class=\"n\">θ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">real.pi</span><span class=\"bp\">/</span><span class=\"mi\">4</span>\n<span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- We need a few lemmas that aren't in mathlib</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exp_I_pi_div_four</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">((</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp_mul_I</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">of_real_cos</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">of_real_sin</span><span class=\"o\">,</span> <span class=\"n\">real.cos_pi_div_four</span><span class=\"o\">,</span> <span class=\"n\">real.sin_pi_div_four</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">conj_inj</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">u</span> <span class=\"n\">u₂</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">exp_conj</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_mul_eq_neg_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">of_real_neg</span><span class=\"o\">,</span> <span class=\"n\">θ</span><span class=\"o\">,</span> <span class=\"n\">neg_div</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">complex.exp_I_pi_div_four</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214769671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603835866
    },
    {
        "content": "<p>Thanks very much! Much nicer.</p>",
        "id": 214769819,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603835952
    },
    {
        "content": "<p>Here's an issue I encountered while experimenting with this.  I'd have thought <code>simp</code> would deal with the following (because of the simp-lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.of_real_im\">docs#complex.of_real_im</a>), but it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">complex.of_real_im</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214770391,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603836277
    },
    {
        "content": "<p>Error: </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid type ascription, term has type\n  ↑?m_1.im = 0\nbut is expected to have type\n  (↑(real.sqrt 2) / 2).im = 0\n</code></pre></div>",
        "id": 214770416,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603836297
    },
    {
        "content": "<p><code>exact_mod_cast</code> maybe?</p>",
        "id": 214770469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603836335
    },
    {
        "content": "<p>yeah, we have some non-confluent simp lemmas here</p>",
        "id": 214770475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603836337
    },
    {
        "content": "<p>oh, you aren't using simp</p>",
        "id": 214770550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603836373
    },
    {
        "content": "<p>(simp fails too, but I was trying to reverse-engineer what I wanted simp to do)</p>",
        "id": 214770597,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603836404
    },
    {
        "content": "<p>this is just because lean elaborates from outside in, the arrows go on the innermost term</p>",
        "id": 214770620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603836423
    },
    {
        "content": "<p>you have to write <code>(\\u ((real.sqrt 2) / 2) : ℂ).im = 0</code> if you want the arrow in the right place</p>",
        "id": 214770661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603836457
    },
    {
        "content": "<p>Funnily, my suggestion works but only after replacing the underscore by <code>(real.sqrt 2/2)</code>.</p>",
        "id": 214770797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603836532
    },
    {
        "content": "<p>The problem was that I didn't write <code>((real.sqrt 2) / 2)</code> myself; it turned up in the proof, created by previous lemmas.  I'll try to find which one; maybe that one needs to be stated with a different cast setup.</p>",
        "id": 214770820,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603836549
    },
    {
        "content": "<p>The funny part is that <code>exact_mod_cast</code> succeeds but creates a new goal asking for the real number to be used.</p>",
        "id": 214770855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603836573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20form.20of.20a.20complex.20number/near/214770855\">said</a>:</p>\n<blockquote>\n<p>The funny part is that <code>exact_mod_cast</code> succeeds but creates a new goal asking for the real number to be used.</p>\n</blockquote>\n<p>This looks like a bug in <code>exact_mod_cast</code>, feel free to open an issue.</p>",
        "id": 214770953,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603836616
    },
    {
        "content": "<p>This is exactly the use case for that tactic so it should work.</p>",
        "id": 214770985,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603836640
    },
    {
        "content": "<p>As should <code>apply_mod_cast</code></p>",
        "id": 214771034,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603836675
    },
    {
        "content": "<p>Side note: Heather, you don't need parentheses around <code>real.sqrt 2</code>. Function application has really high precedence.</p>",
        "id": 214771164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603836760
    },
    {
        "content": "<p>In fact, <code>norm_cast</code> proves this on its own. The bad behavior is probably a result of the <code>(\\u r).im = 0</code> lemmas that don't fit the algorithm particularly well.</p>",
        "id": 214771419,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603836914
    },
    {
        "content": "<p>Too late, I opened  <a href=\"https://github.com/leanprover-community/mathlib/issues/4805\">#4805</a></p>",
        "id": 214771473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603836953
    },
    {
        "content": "<p>OK, so here's a proof of <span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> 's fact that is nearly without trig-specific knowledge:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"c1\">-- Aim to show `u = u₂`</span>\n<span class=\"kd\">def</span> <span class=\"n\">θ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">θ</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">complex.I</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">θ</span><span class=\"o\">,</span> <span class=\"n\">cos_pi_div_four</span><span class=\"o\">,</span> <span class=\"n\">sin_pi_div_four</span><span class=\"o\">],</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>If we make  <code>cos_pi_div_four</code> and <code>sin_pi_div_four</code> simp-lemmas, it can be entirely so.  (It seems like it's just an omission that they're not simp-lemmas; <code>cos_pi_div_two</code> and <code>tan_pi_div_four</code> are.)</p>",
        "id": 214771506,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603836964
    },
    {
        "content": "<p>(note that this is not mathlib-style, though, because it has nonterminal simps)</p>",
        "id": 214771570,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603837005
    },
    {
        "content": "<p>What are those <code>exact_mod_cast _</code>? Do you mean <code>norm_cast</code>?</p>",
        "id": 214771768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603837105
    },
    {
        "content": "<p>you could write that latter part <code>ext; { simp, exact_mod_cast _, ring },</code></p>",
        "id": 214771794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603837118
    },
    {
        "content": "<p>Those non-terminal simps are ok because they are followed only by end-game tactics.</p>",
        "id": 214771845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603837156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20form.20of.20a.20complex.20number/near/214771794\">said</a>:</p>\n<blockquote>\n<p>you could write that latter part <code>ext; { simp, exact_mod_cast _, ring },</code></p>\n</blockquote>\n<p>I know, but <span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span>'s students may not!</p>",
        "id": 214771866,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603837172
    },
    {
        "content": "<p>(my proof also has nonterminal simps btw, but the <code>simp only</code> line is a little distracting)</p>",
        "id": 214771896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603837193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20form.20of.20a.20complex.20number/near/214771845\">said</a>:</p>\n<blockquote>\n<p>Those non-terminal simps are ok because they are followed only by end-game tactics.</p>\n</blockquote>\n<p>This I didn't know!</p>",
        "id": 214771920,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603837203
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">θ</span><span class=\"o\">,</span> <span class=\"n\">cos_pi_div_four</span><span class=\"o\">,</span> <span class=\"n\">sin_pi_div_four</span><span class=\"o\">],</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>is almost legit. Following <code>simp</code> with <code>norm_cast</code> is borderline.</p>",
        "id": 214771963,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603837212
    },
    {
        "content": "<p>Oh, I didn't see the first simp. Rob's version is better indeed.</p>",
        "id": 214772015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603837256
    },
    {
        "content": "<p><code>norm_cast</code> sort of cares about the details of the goal. It's plausible that simp lemmas could change the positions of casts in a way that would break <code>norm_cast</code>, but reasonably unlikely.</p>",
        "id": 214772049,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603837277
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 214772070,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603837290
    },
    {
        "content": "<p>particularly in this case because of the non-confluence - it might eliminate them entirely and then <code>norm_cast</code> would fail</p>",
        "id": 214772113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603837317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20form.20of.20a.20complex.20number/near/214771506\">said</a>:</p>\n<blockquote>\n<p>If we make  <code>cos_pi_div_four</code> and <code>sin_pi_div_four</code> simp-lemmas, it can be entirely so.  (It seems like it's just an omission that they're not simp-lemmas; <code>cos_pi_div_two</code> and <code>tan_pi_div_four</code> are.)</p>\n</blockquote>\n<p>Shall I add <code>cos_pi_div_four</code> etc to the simp-set?</p>",
        "id": 214772194,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603837358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20form.20of.20a.20complex.20number/near/214772049\">said</a>:</p>\n<blockquote>\n<p><code>norm_cast</code> sort of cares about the details of the goal. It's plausible that simp lemmas could change the positions of casts in a way that would break <code>norm_cast</code>, but reasonably unlikely.</p>\n</blockquote>\n<p>Is there a more idiomatic way to do this kind of thing, perhaps a simp variant that omits casting lemmas from the simp-set?</p>",
        "id": 214772296,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603837437
    },
    {
        "content": "<p>Mm, not really. If the <code>simp only</code> is too big I wouldn't worry too much about this particular nonterminal <code>simp</code>.</p>",
        "id": 214772652,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603837648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20form.20of.20a.20complex.20number/near/214771506\">said</a>:</p>\n<blockquote>\n<p>If we make  <code>cos_pi_div_four</code> and <code>sin_pi_div_four</code> simp-lemmas, it can be entirely so.  (It seems like it's just an omission that they're not simp-lemmas; <code>cos_pi_div_two</code> and <code>tan_pi_div_four</code> are.)</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4806\">#4806</a></p>",
        "id": 214773270,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603838050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/4806\">#4806</a> is now merged and your lemma can be entirely automated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"c1\">-- Aim to show `u = u₂`</span>\n<span class=\"kd\">def</span> <span class=\"n\">θ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">θ</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">θ</span><span class=\"o\">],</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 214909165,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603926836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> amazing! Thanks so much.</p>",
        "id": 214909433,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603927057
    }
]