[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> could you summarize the current state of GCD stuff? How many versions do we now have? What are the logical dependencies and future plans?</p>",
        "id": 133169398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535791108
    },
    {
        "content": "<p>We have <code>nat.gcd</code>, <code>int.gcd</code> and <code>gcd_domain.gcd</code> (similar for <code>lcm</code>). The future plan is to add a <code>gcd_domain</code> for polynomials</p>",
        "id": 133170629,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535794008
    },
    {
        "content": "<p>There is some more stuff coming from Mason–Stothers. Especially UFDs, formal derivatives, etc</p>",
        "id": 133170736,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535794260
    },
    {
        "content": "<p>Are those three things  completely independant?</p>",
        "id": 133170788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535794394
    },
    {
        "content": "<p>Now that gcd_domain and normalization_domain are merged, I would like to see a proof that every integral domain has a normalization. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You mentioned something about prime ideals when I asked about this, can you elaborate?</p>\n<p>Here's my analysis: The units of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> act freely on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>−</mo><mo>{</mo><mn>0</mn><mo>}</mo></mrow><annotation encoding=\"application/x-tex\">R-\\{0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mbin\">−</span><span class=\"mopen\">{</span><span class=\"mord mathrm\">0</span><span class=\"mclose\">}</span></span></span></span> by left multiplication. If we quotient by the orbit relation, we obtain a monoid <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. The goal is to prove the existence of a monoid homomorphism from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to the unit group of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>. Is there an abstract nonsense reason this should be true?</p>",
        "id": 133180154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535813014
    },
    {
        "content": "<p>Never mind, that proof doesn't make any sense. We want to define a subset <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>⊆</mo><mi>R</mi><mo>−</mo><mo>{</mo><mn>0</mn><mo>}</mo></mrow><annotation encoding=\"application/x-tex\">N\\subseteq R-\\{0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mrel\">⊆</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mbin\">−</span><span class=\"mopen\">{</span><span class=\"mord mathrm\">0</span><span class=\"mclose\">}</span></span></span></span> of normalized elements which is a submonoid of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, and such that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> contains one element for every associate equivalence class.</p>",
        "id": 133181199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535815096
    },
    {
        "content": "<p>What I said about prime ideals was just for Z[sqrt(2)]. My understanding is that a normalization domain boils down to a choice of your set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> above. My observation was that, for integral domains, one way of thinking about such a choice is to ask for a canonical generator for each principal ideal, because in an integral domain the ideals <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>a</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>b</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span></span></span></span> are equal if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span></span></span></span> is a unit times <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">b</span></span></span></span>.</p>",
        "id": 133181540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535815762
    },
    {
        "content": "<p>Now in a principal ideal domain, or more generally in a Dedekind domain, every non-zero ideal is uniquely a product of prime ideals. So I was noting that in a PID all you have to do is to make the choice for each prime ideal (i.e. each prime element) and then you can extend. In retrospect what I was saying about prime ideals can be simplified to the statement that in a UFD to make this <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> choice it suffices to choose what is going on for the prime elements.</p>",
        "id": 133181610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535815882
    },
    {
        "content": "<p>Let's try Zorn's lemma. Call a subnormalization a submonoid <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>N</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">N'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> where no two elements are associate. Obviously the union of a chain of subnormalizations is a subnormalization, so it suffices to show that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is not a normalization, then there is a proper extension of it. If we pick any element <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>∉</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">x\\notin N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">∉</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> and extend to the submonoid closure <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>N</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">N'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, we must show that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>N</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">N'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> still has no associates. Each such element has the form <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x^ny</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>∈</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">y\\in N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, so we reduce to the case <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>∼</mo><msup><mi>x</mi><mi>n</mi></msup><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">y\\sim x^n z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel\">∼</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo>∈</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">y,z\\in N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span>.</p>",
        "id": 133181734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535816140
    },
    {
        "content": "<p>Possible ways to refine this sketch include adding additional constraints on subnormalizations, and choosing <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span> more carefully. In a PID, then if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\">′</mo></msup><mo>∉</mo><msup><mi>R</mi><mo>∗</mo></msup><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">x' \\notin R^*N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel\">∉</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span>,  it has a prime factorization and there must be some prime <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span> in the factorization which is not in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> (otherwise <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mo mathvariant=\"normal\">′</mo></msup><mo>∈</mo><msup><mi>R</mi><mo>∗</mo></msup><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">x'\\in R^*N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel\">∈</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span>), and we can take <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>N</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">N'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to be the submonoid generated by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo separator=\"true\">,</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">N,p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mord mathit\">p</span></span></span></span>. Unique factorization ensures that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>∼</mo><msup><mi>p</mi><mi>n</mi></msup><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">y\\sim p^n z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel\">∼</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">y=z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span>.</p>",
        "id": 133182124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535816955
    },
    {
        "content": "<p>Does normalization mean something different here? To me, the normalization of an integral domain A is the integral closure of A in its fraction field K</p>",
        "id": 133182174,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535817016
    },
    {
        "content": "<p>yes, that's a different sense</p>",
        "id": 133182178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535817033
    },
    {
        "content": "<blockquote>\n<p>11:33 Are those three things completely independant?</p>\n</blockquote>\n<p>mostly: I want to use UFDs to construct a GCD domain on polynomials. formal derivatives over polynomials are independent of this.</p>",
        "id": 133183029,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535818726
    },
    {
        "content": "<p>My next step is to introduce the quotient over associated elements and unique factorization domains: <a href=\"https://github.com/johoelzl/mathlib/tree/ufd\" target=\"_blank\" title=\"https://github.com/johoelzl/mathlib/tree/ufd\">https://github.com/johoelzl/mathlib/tree/ufd</a><br>\nI guess one could classically construct from this the normalisation?</p>",
        "id": 133183178,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535819090
    },
    {
        "content": "<blockquote>\n<p>Does normalization mean something different here? To me, the normalization of an integral domain A is the integral closure of A in its fraction field K</p>\n</blockquote>\n<p>Yes that's the standard use in maths. I've never heard of this use before -- the key examples are \"normalising\" a non-zero poly by making it monic and \"normalising\" a non-zero integer by taking its absolute value. I don't really know why these CS people want it but it would not surprise me if there were a good reason.</p>",
        "id": 133183233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535819229
    },
    {
        "content": "<p>Oh -- I wrote my comment before I saw Johannes'. So perhaps the issue is that the usual definition of unique factorization domain kind of stinks, you are saying something is equal up to units and re-ordering, which is sort of a mess in Lean. Mario asked me to give an example of how UFD's were used in mathematics, and I couldn't give an example which wasn't of the form \"we can solve this Diophantine equation using this trick\". But since then we have a couple.</p>",
        "id": 133183278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535819361
    },
    {
        "content": "<p>One is that Johannes pointed out that Mason-Stothers uses it, and the other one is Brian Conrad's observation which he made to me in email, saying that in the theory of smooth schemes one uses a lot that (a) regular local rings are UFD's and (b) in a UFD, all height one primes are principal. So Kenny if you fancy learning some abstract ring theory you can learn the proofs of these two things and then you might have some opinions about how the notion of a UFD should be formalised in Lean.</p>",
        "id": 133183327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535819447
    },
    {
        "content": "<p>I didn't write the definition of normalization domain, but it's pretty natural once you decide you want a <em>function</em> <code>gcd : R -&gt; R -&gt; R</code>, and given the definition I want to know if it relates in any obvious way to standard ring theoretic definitions</p>",
        "id": 133183382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535819534
    },
    {
        "content": "<p>I guess another option is to quotient by associates; then you could have a function into that quotient which doesn't have this non-functorial normalization structure overlaid</p>",
        "id": 133183446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535819716
    },
    {
        "content": "<p>why <code>norm_unit u = u⁻¹</code>?</p>",
        "id": 133183502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535819872
    },
    {
        "content": "<p>That just means that every unit is normalized to <code>1</code></p>",
        "id": 133183542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535819925
    },
    {
        "content": "<p>The actual normalization function is <code>normalize x = x * norm_unit x</code></p>",
        "id": 133183549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535819952
    },
    {
        "content": "<p>oh ok</p>",
        "id": 133183550,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535819962
    },
    {
        "content": "<p>then why don't we...</p>",
        "id": 133183552,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535819986
    },
    {
        "content": "<p>why don't we what?</p>",
        "id": 133183597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535820045
    },
    {
        "content": "<p>why don't we define the normalization to send the element to its normalization?</p>",
        "id": 133183690,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535820248
    },
    {
        "content": "<p>because you want the evidence that the map is a unit</p>",
        "id": 133183810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535820595
    },
    {
        "content": "<p>Maybe the folks at MSE will know whether it is true: <a href=\"https://math.stackexchange.com/q/2901858/50776\" target=\"_blank\" title=\"https://math.stackexchange.com/q/2901858/50776\">https://math.stackexchange.com/q/2901858/50776</a></p>",
        "id": 133185014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535823243
    },
    {
        "content": "<p>Oh, I hadn't realised there was a maths question.</p>",
        "id": 133185037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535823359
    },
    {
        "content": "<p>Heh, when I read the thing about integral domains and normalizations I incorrectly thought (as did Kenny) that you were talking about the integral closure :-)</p>",
        "id": 133185079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535823408
    },
    {
        "content": "<p>I'm open to alternate terminology</p>",
        "id": 133185086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535823428
    },
    {
        "content": "<p>is this the normalization you are talking about? <a href=\"https://en.wikipedia.org/wiki/Normal_scheme\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Normal_scheme\">https://en.wikipedia.org/wiki/Normal_scheme</a></p>",
        "id": 133185129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535823530
    },
    {
        "content": "<p>Yes.</p>",
        "id": 133185130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535823540
    },
    {
        "content": "<p>Would \"orientation\" be more or less confusing than \"normalization\"?</p>",
        "id": 133185137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535823587
    },
    {
        "content": "<p>heh, that means something else in maths too of course, but not in algebra (as far as I know), so the two clashing uses of \"normalisation of an integral domain\" would be replaced by something which would confuse a geometer (who wants to orient certain kinds of manifolds) but which would be safer in general I guess.</p>",
        "id": 133185183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535823655
    },
    {
        "content": "<p>actually I rather like the \"orientation\" terminology, since it makes the question of whether there are non-orientable integral domains sound more interesting</p>",
        "id": 133185574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535824587
    },
    {
        "content": "<p>(plus there is an obvious analogy to orientable manifolds, at least in the case where the unit group has two elements)</p>",
        "id": 133185583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535824668
    },
    {
        "content": "<p>OK so there are problems if the ID is not normal (;-)) i.e. integrally closed. If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>=</mo><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>[</mo><msup><mrow><mo>(</mo><mo>−</mo><mn>4</mn><mo>)</mo></mrow><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>]</mo><mo>=</mo><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>[</mo><mn>2</mn><mi>i</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R=\\mathbb{Z}[{(-4)}^{1/2}]=\\mathbb{Z}[2i]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.0279em;\"></span><span class=\"strut bottom\" style=\"height:1.2779em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathrm\">4</span><span class=\"mclose\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0279em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathrm\">2</span><span class=\"mord mathit\">i</span><span class=\"mclose\">]</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">2i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">2</span><span class=\"mord mathit\">i</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">2</span></span></span></span> are not associates, but their squares are, and I think this kills it.</p>",
        "id": 133187541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535828800
    }
]