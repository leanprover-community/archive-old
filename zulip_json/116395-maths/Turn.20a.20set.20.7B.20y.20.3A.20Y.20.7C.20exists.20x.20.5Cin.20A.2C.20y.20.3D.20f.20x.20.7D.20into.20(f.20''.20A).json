[
    {
        "content": "<p>I often dabble with sets which are images or preimages but I'm not sure how to switch between those two forms easily, I often do quick proofs of what I mentioned in the title, which I feel sub-efficient.</p>\n<p>I read many times the docs of sets but never found something close to those facts, I just realized that maybe it could be hidden in <code>set.range</code> definition. But I'm not too much up-to-date with subtypes → sets relations.</p>",
        "id": 192809665,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585923314
    },
    {
        "content": "<p>MWE?</p>",
        "id": 192809874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585923390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> I think that you should almost always prefer the <code>f '' A</code> form, and use <code>rw set.mem_image</code> and friends when you have things like <code>x \\in f '' A</code></p>",
        "id": 192809995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585923434
    },
    {
        "content": "<p>Let's take this small working example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cau_seq</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounds</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span> <span class=\"c1\">-- on active la décidabilité partout.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">suite_st_croissante</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hset</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">suite_st_croissante</span><span class=\"o\">,</span>\n    <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">\\</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">suite_st_croissante</span> <span class=\"n\">k</span> <span class=\"n\">H</span><span class=\"o\">}))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">suite_st_croissante_def</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hset</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">\\</span> <span class=\"o\">{</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span> <span class=\"n\">k</span> <span class=\"o\">})</span>\n    <span class=\"o\">:=</span> <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">suite_st_croissante_nonempty</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hset</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">\\</span> <span class=\"o\">{</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span> <span class=\"n\">k</span> <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span> <span class=\"n\">k</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Hinf</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">not_nonempty_iff_eq_empty</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">diff_eq_empty</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_subset</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">HS_finite</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(({</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span> <span class=\"n\">k</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- this proof looks complicated for nothing.</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n          <span class=\"n\">intro</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span><span class=\"o\">,</span>\n          <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">heq</span> <span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n          <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_image</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_lt_nat</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">HS_finite</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 192810219,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585923510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Turn.20a.20set.20.7B.20y.20.3A.20Y.20.7C.20exists.20x.20.5Cin.20A.2C.20y.20.3D.20f.20x.20.7D.20into.20(f.20''.20A)/near/192809995\" title=\"#narrow/stream/116395-maths/topic/Turn.20a.20set.20.7B.20y.20.3A.20Y.20.7C.20exists.20x.20.5Cin.20A.2C.20y.20.3D.20f.20x.20.7D.20into.20(f.20''.20A)/near/192809995\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> I think that you should almost always prefer the <code>f '' A</code> form, and use <code>rw set.mem_image</code> and friends when you have things like <code>x \\in f '' A</code></p>\n</blockquote>\n<p>Okay, that was the answer I was converging by what I've seen, it is just that I feel like theorem statements look weird but I shouldn't think such things of statements… :D</p>",
        "id": 192810393,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585923589
    },
    {
        "content": "<p>Sorry, this is not minimal enough for me. It times out here.</p>",
        "id": 192810932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585923824
    },
    {
        "content": "<p>I'll minimize it.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">def</span> <span class=\"n\">suite_st_croissante</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hset</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">suite_st_croissante</span><span class=\"o\">,</span>\n    <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">\\</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">suite_st_croissante</span> <span class=\"n\">k</span> <span class=\"n\">H</span><span class=\"o\">}))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">suite_st_croissante_images</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hset</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">suite_st_croissante</span> <span class=\"n\">Hinf</span> <span class=\"n\">Hset</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"c1\">-- this proof looks complicated for nothing.</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n          <span class=\"n\">intro</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span><span class=\"o\">,</span>\n          <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">heq</span> <span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n          <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Is it better?</p>",
        "id": 192811319,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585923970
    },
    {
        "content": "<p>your theorem (which should not be a <code>def</code>) should be trivial by <code>simp</code></p>",
        "id": 192811442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585924031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Turn.20a.20set.20.7B.20y.20.3A.20Y.20.7C.20exists.20x.20.5Cin.20A.2C.20y.20.3D.20f.20x.20.7D.20into.20(f.20''.20A)/near/192811442\" title=\"#narrow/stream/116395-maths/topic/Turn.20a.20set.20.7B.20y.20.3A.20Y.20.7C.20exists.20x.20.5Cin.20A.2C.20y.20.3D.20f.20x.20.7D.20into.20(f.20''.20A)/near/192811442\">said</a>:</p>\n<blockquote>\n<p>your theorem (which should not be a <code>def</code>) should be trivial by <code>simp</code></p>\n</blockquote>\n<p>Replacing the body by <code>by simp</code> ? I just tried it and it failed to simplify.</p>",
        "id": 192811521,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585924064
    },
    {
        "content": "<p>maybe apply <code>ext</code> first</p>",
        "id": 192811574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585924082
    },
    {
        "content": "<p>Same, it just rewrite the (x \\in A &lt;=&gt; x \\in B) by (exists … &lt;=&gt; exists …)</p>",
        "id": 192811749,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585924141
    },
    {
        "content": "<p>what?</p>",
        "id": 192811936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585924211
    },
    {
        "content": "<p>It transforms the goal which is:</p>\n<div class=\"codehilite\"><pre><span></span>x ∈ {x : X | ∃ (k : ℕ) (H_1 : k &lt; n), x = suite_st_croissante Hinf Hset k} ↔\n    x ∈ suite_st_croissante Hinf Hset &#39;&#39; {i : ℕ | i &lt; n}\n</pre></div>\n\n\n<p>by</p>\n<div class=\"codehilite\"><pre><span></span>(∃ (k : ℕ), k &lt; n ∧ x = suite_st_croissante Hinf Hset k) ↔\n    ∃ (x_1 : ℕ), x_1 &lt; n ∧ suite_st_croissante Hinf Hset x_1 = x\n</pre></div>",
        "id": 192812022,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585924248
    },
    {
        "content": "<p>which sounds finishable by <code>refl</code> to me…</p>",
        "id": 192812054,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585924265
    },
    {
        "content": "<p>note the equality is the wrong way around</p>",
        "id": 192812099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585924286
    },
    {
        "content": "<p><code>ext , simp [eq_comm]</code> does it</p>",
        "id": 192812100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585924286
    },
    {
        "content": "<p>Ah! Right</p>",
        "id": 192812133,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585924301
    },
    {
        "content": "<p>Yes, <code>eq_comm</code> is the main ingredient here</p>",
        "id": 192812134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585924302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Okay, so this happens because of this equality issue and <code>eq_comm</code> is not a simp-lemma, should it be a simp-lemma though?</p>",
        "id": 192812285,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585924361
    },
    {
        "content": "<p>no, this is fine</p>",
        "id": 192812304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585924369
    },
    {
        "content": "<p><code>by ext; simp [eq_comm]</code> is a fine proof</p>",
        "id": 192812367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585924401
    },
    {
        "content": "<p>still \"trivial\" in my book</p>",
        "id": 192812399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585924414
    },
    {
        "content": "<p>Even better: rewrite the statement with the \"correct\" equality</p>",
        "id": 192812440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585924435
    },
    {
        "content": "<p>Yes, agreed, that helped me a lot!</p>",
        "id": 192812449,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585924438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/116395-maths/topic/Turn.20a.20set.20.7B.20y.20.3A.20Y.20.7C.20exists.20x.20.5Cin.20A.2C.20y.20.3D.20f.20x.20.7D.20into.20(f.20''.20A)/near/192812285\" title=\"#narrow/stream/116395-maths/topic/Turn.20a.20set.20.7B.20y.20.3A.20Y.20.7C.20exists.20x.20.5Cin.20A.2C.20y.20.3D.20f.20x.20.7D.20into.20(f.20''.20A)/near/192812285\">said</a>:</p>\n<blockquote>\n<p><code>eq_comm</code> is not a simp-lemma, should it be a simp-lemma though?</p>\n</blockquote>\n<p>It would loop, wouldn't it? I think the idea is to try and keep everything in the right order :-)</p>",
        "id": 192817933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585926354
    },
    {
        "content": "<p>No, it's specifically detected to be a symmetry lemma and does something with term orders to prevent it from looping. That's why <code>simp [eq_comm]</code>works</p>",
        "id": 192818086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926417
    },
    {
        "content": "<p>similar things happen with <code>simp [add_comm]</code> or <code>simp [add_comm, add_assoc]</code></p>",
        "id": 192818131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926441
    },
    {
        "content": "<p>Probably if you had a more elaborate symmetry like lemma like <code>foo a b c = foo b c a</code> then it would loop</p>",
        "id": 192818331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926512
    },
    {
        "content": "<p>I thought that if it was a job for add_comm and add_assoc you used something like <code>ac_refl</code>. Are these really confluent enough for <code>simp</code>? This is some inbuilt hack or something, right?</p>",
        "id": 192818506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585926594
    },
    {
        "content": "<p>Yes, I think <code>simp</code> calls <code>ac_refl</code> or the thing that drives it behind the scenes</p>",
        "id": 192818676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585926649
    }
]