[
    {
        "content": "<p>Hi,</p>\n<p>I'm trying to play around with some surreal numbers in Lean and am looking at the TODO's in the <a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/surreal.html\">library</a>.</p>\n<p>The first TODO says to construct a proof of <code>numeric n</code> which is a term of type <code>pgame n \\to Prop</code> where  <code>n : \\nat</code>. </p>\n<p>Amazingly, Lean is able to coerce <code>n : \\nat</code> to <code>n : pgame</code>.  I searched the code for a definition of this coercion but only found <code>pgame.has_zero</code> and <code>pgame.has_one</code>. How is this coercion happening? </p>\n<p>Thanks,</p>",
        "id": 234187533,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618244238
    },
    {
        "content": "<p>If you have <code>0</code> and <code>1</code> (which you found), then you only need <code>+</code> to get the coercion.</p>",
        "id": 234187657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618244284
    },
    {
        "content": "<p>Oh, I see, so Lean is automatically defining <code>n.succ : pgame</code> as <code>n : pgame + 1 : pgame</code><br>\nThis is really efficient! Thanks!</p>",
        "id": 234188095,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618244445
    },
    {
        "content": "<p>I think that actually it <em>defines</em> <code>bit0 n : pgame</code> to be <code>(n : pgame) + (n : pgame)</code> and <code>bit1 n : pgame</code> to be <code>(bit0 n : pgame) + (1 : pgame)</code> which could in theory be different ;-)</p>",
        "id": 234234077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618262854
    },
    {
        "content": "<p>As far as I remember, there isn't a clear proof that <code>pgame.short_add</code> is properly commutative and associative.</p>",
        "id": 234234651,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618263186
    },
    {
        "content": "<p>I tried just hacking my way through to see what the definitions look like for some small cases and the definition becomes unrecognizable at <code>n=2</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.surreal</span>\n<span class=\"kn\">open</span> <span class=\"n\">pgame</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">numeric_zero'</span> <span class=\"o\">:</span> <span class=\"n\">numeric</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">numeric_one'</span> <span class=\"o\">:</span> <span class=\"n\">numeric</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n<span class=\"n\">apply</span> <span class=\"n\">numeric_zero'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">numeric_two'</span> <span class=\"o\">:</span> <span class=\"n\">numeric</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"c1\">-- goal is unrecognizable</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">numeric_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">numeric</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- don't even know how to start</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How does one work with this kind of definition? My guess is to first prove things about <code>numeric n</code> and show that it can be rewritten in a simplified form but I'm having trouble just unfolding the definition of <a href=\"https://github.com/leanprover-community/mathlib/blob/2af01474e4b46fb62bcefa0701b1fb96a4c57841/src/set_theory/pgame.lean#L661\">add</a>.</p>",
        "id": 234239883,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618266377
    },
    {
        "content": "<p>For example, in \"math\", I believe 2 is simply {1|} (and possibly few other numbers in the left and right sets) but I'm not able to see how <code>numeric 2</code> reduces to this.</p>",
        "id": 234240126,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618266521
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/numeric.add/src\">src#numeric.add</a></p>",
        "id": 234240207,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618266583
    },
    {
        "content": "<p>I mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.numeric_add/src\">src#pgame.numeric_add</a></p>",
        "id": 234240329,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618266641
    },
    {
        "content": "<p><code>oy</code> indeed</p>",
        "id": 234240340,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618266655
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO prove</span>\n<span class=\"c1\">-- theorem numeric_nat (n : ℕ) : numeric n := sorry</span>\n</code></pre></div>\n<p>from the source <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span></p>",
        "id": 234240372,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618266687
    },
    {
        "content": "<p>Oh wow! Thank you so much!!<br>\nI totally missed this. I'll spend some time trying to understand the proof.</p>",
        "id": 234240585,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618266824
    },
    {
        "content": "<p>The proof of <code>numeric_nat</code> follows in just a few lines from <code>numeric_zero</code>, <code>numeric_one</code>, and <code>numeric_add</code>, just by inducting on <code>n</code>. I'm not sure why it wasn't done previously.</p>",
        "id": 234243582,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618268833
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">numeric_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">numeric</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">numeric_zero</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">numeric_add</span> <span class=\"n\">ih</span> <span class=\"n\">numeric_one</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">numeric_omega</span> <span class=\"o\">:</span> <span class=\"n\">numeric</span> <span class=\"n\">omega</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">-</span> <span class=\"o\">⟨⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">numeric_nat</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 234244395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618269316
    },
    {
        "content": "<p>(Spoiler also contains <code>numeric_omega</code>.)</p>",
        "id": 234244419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618269331
    },
    {
        "content": "<p>Thanks! I thought so too. I had missed this <code>numeric_add</code> lemma.</p>",
        "id": 234245464,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618270010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/234234077\">said</a>:</p>\n<blockquote>\n<p>I think that actually it <em>defines</em> <code>bit0 n : pgame</code> to be <code>(n : pgame) + (n : pgame)</code> and <code>bit1 n : pgame</code> to be <code>(bit0 n : pgame) + (1 : pgame)</code> which could in theory be different ;-)</p>\n</blockquote>\n<p>What does <code>bit0</code> mean mathematically? It seems to be doubling the number but that can't be right :o</p>",
        "id": 234245515,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618270058
    },
    {
        "content": "<p>That's exactly what it's doing</p>",
        "id": 234245640,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618270143
    },
    {
        "content": "<p>You can imagine the binary encoding of a number like 13 : 1101. In Lean, it would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.numerals</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">13</span> <span class=\"c1\">-- bit1 (bit0 (bit1 has_one.one)) : ℕ</span>\n</code></pre></div>",
        "id": 234245773,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618270215
    },
    {
        "content": "<p>which, read from left to right, is exactly <code>1 0 1 1</code></p>",
        "id": 234245810,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618270236
    },
    {
        "content": "<p>It's just a more efficient encoding than the unary <code>13 = 1 + 1 + ... + 1</code></p>",
        "id": 234245851,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618270289
    },
    {
        "content": "<p>Interesting!!</p>\n<p>So internally natural numbers are computed using \"binary\" induction and not \"unary\" induction. Nice!</p>",
        "id": 234246249,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618270555
    },
    {
        "content": "<p>(I'll leave my spoiler tag above starred, and perhaps PR it one day, but if you get there first that would be great! :-)</p>",
        "id": 234246832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618270972
    },
    {
        "content": "<p>Not natural numbers. Anything that is notated by numerical digits</p>",
        "id": 234248465,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618272127
    },
    {
        "content": "<p>Just for the record here's one more solution</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Spoiler (numeric_nat numeric_omega)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import set_theory.surreal<br>\nopen pgame</p>\n<p>theorem numeric_nat (n : ℕ) : numeric n :=<br>\nbegin<br>\ninduction n with n hn,<br>\napply numeric_zero,<br>\napply numeric_add hn numeric_one,<br>\nend</p>\n<p>theorem numeric_omega : numeric omega :=<br>\n⟨by rintros ⟨ ⟩ ⟨ ⟩, λ i, by simp [numeric_nat i.down] , by simp only [forall_pempty]⟩</p>\n<p>#check numeric_nat<br>\n#check numeric_omega</p>\n</div></div>\n<p>I'll try to get it in the library.</p>",
        "id": 234332422,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618323229
    },
    {
        "content": "<p>Looks good, PR away. (Indenting inside <code>begin ... end</code> blocks! :-)</p>",
        "id": 234334515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618323942
    },
    {
        "content": "<p>(Also, in spoiler tags, you can put another <code>```lean</code> block inside to get formatting.</p>",
        "id": 234334581,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618323963
    },
    {
        "content": "<p>Done.  I'll also try to clear the other TODO's in the file.</p>\n<p>Would it be a good idea to add some lemmas about simplifying surreal numbers coming from natural numbers, like <code>n \\equiv {n - 1 | } </code>?  and the \"simplicity rule\"?</p>",
        "id": 234344571,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618326625
    },
    {
        "content": "<p>Since surreal has instances for has_zero, has_one, and has_add, nats can automatically be cast to surreal</p>",
        "id": 234345719,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618326910
    },
    {
        "content": "<p>You might want to prove commutativity of the addition defined on surreal.</p>",
        "id": 234345994,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618326994
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast\">docs#nat.cast</a></p>",
        "id": 234346055,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618327013
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_add\">docs#nat.cast_add</a> is the proof, basically, for the question you asked</p>",
        "id": 234346432,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618327135
    },
    {
        "content": "<p>I'm slowly working on proving  properties about the addition of surreal numbers. <br>\nIs there a nicer way to write the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.surreal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">surreal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient.sound</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pgame.zero_add_equiv</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient.sound</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pgame.add_zero_equiv</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">surreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">surreal</span>\n</code></pre></div>\n<p>Weirdly I'm not able to merge the two <code>apply</code>s.  </p>\n<p>Thanks,</p>",
        "id": 234694758,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618499430
    },
    {
        "content": "<p>First change <code>apply</code> to refine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient.sound</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and then it's easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234695347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618499561
    },
    {
        "content": "<p>Oh I see, I was missing that <code>_</code> at the end. <br>\nThanks!</p>",
        "id": 234695795,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618499680
    },
    {
        "content": "<p>You might find that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>golfs further to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234697190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618500158
    },
    {
        "content": "<p>This works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"c1\">-- otherwise the elaborator gets in our way</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">elab_with_expected_type</span><span class=\"o\">]</span> <span class=\"n\">quotient.ind</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">surreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.ind</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span> <span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.ind</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"bp\">$</span> <span class=\"n\">pgame.add_zero_equiv</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234698518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618500653
    },
    {
        "content": "<p>Thanks, I was trying something like <code>λ ⟨x, ox⟩, ...</code> but that did not work.<br>\nI guess Lean is better at pattern matching <code>| ⟨x, ox⟩ := ...</code>.</p>",
        "id": 234700426,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618501183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/234697190\">said</a>:</p>\n<blockquote>\n<p>You might find that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>golfs further to</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I just tried this one out and Lean is throwing a type mismatch error for <code>quotient.sound</code></p>",
        "id": 234700730,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618501272
    },
    {
        "content": "<p>I'm guessing it is not able to infer the setoid type.</p>",
        "id": 234700918,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618501335
    },
    {
        "content": "<p>You can try using <code>quot.sound</code> and <code>quot.ind</code> instead, which do not try to infer the setoid on their own.</p>",
        "id": 234701172,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618501427
    },
    {
        "content": "<p>Interesting! Thanks,</p>",
        "id": 234701341,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618501474
    },
    {
        "content": "<p>Here's a construction of <code>ordered_add_comm_group</code> instance for surreal numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.surreal</span>\n<span class=\"kn\">open</span> <span class=\"n\">pgame</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">surreal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">surreal</span> <span class=\"bp\">→</span> <span class=\"n\">surreal</span> <span class=\"o\">:=</span>\n<span class=\"n\">surreal.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">ox</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pgame.numeric_neg</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.neg_congr</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">surreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span>               <span class=\"o\">:=</span> <span class=\"n\">surreal.add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span>         <span class=\"o\">:=</span> <span class=\"n\">surreal.add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span>              <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span>          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_zero</span>          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.add_zero_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">neg</span>               <span class=\"o\">:=</span> <span class=\"n\">surreal.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">sub</span>               <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">surreal.neg</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">sub_eq_add_neg</span>    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">try_refl_tac</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span>      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"n\">pgame.add_left_neg_equiv</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_comm</span>          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oy</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"n\">pgame.add_comm_equiv</span> <span class=\"o\">},</span>\n  <span class=\"n\">le</span>                <span class=\"o\">:=</span> <span class=\"n\">surreal.le</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span>                <span class=\"o\">:=</span> <span class=\"n\">surreal.lt</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span>           <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">le_trans</span>          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oy</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">oz</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">pgame.le_trans</span> <span class=\"o\">},</span>\n  <span class=\"n\">lt_iff_le_not_le</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oy</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">pgame.lt_iff_le_not_le</span> <span class=\"n\">ox</span> <span class=\"n\">oy</span> <span class=\"o\">},</span>\n  <span class=\"n\">le_antisymm</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oy</span><span class=\"o\">⟩</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_le_add_left</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oy</span><span class=\"o\">⟩</span> <span class=\"n\">hx</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">oz</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">pgame.add_le_add_left</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">surreal</span>\n</code></pre></div>\n<p>Is there any way I can improve the code?</p>",
        "id": 235213851,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618851419
    },
    {
        "content": "<p>The next <a href=\"https://github.com/leanprover-community/mathlib/blob/6f0c4fb3364a69a1a29800c7d92f1901551f37f0/src/set_theory/surreal.lean#L370\">TODO</a> in the surreal.lean file is the construction of a homomorphism <code>surreal → game</code> but I don't know what <code>game</code> is. </p>\n<p>So, I'm instead thinking of constructing the \"dyadic rationals\" as surreal numbers.</p>",
        "id": 235215202,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618851948
    },
    {
        "content": "<p>There's no point defining <code>sub</code> there like that, it will use that definition for you automatically.</p>",
        "id": 235216275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618852408
    },
    {
        "content": "<p>However, it might be worth doing if you defined it as <code>⟦⟨x-y, pgame.numeric_sub ox oy⟩⟧</code> instead</p>",
        "id": 235216431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618852459
    },
    {
        "content": "<p>Which is more work, but unfolds more nicely</p>",
        "id": 235216439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618852464
    },
    {
        "content": "<p>I'd recommend you make a PR with what you have anyway</p>",
        "id": 235216706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618852585
    },
    {
        "content": "<p>Thanks! Will push this to mathlib soon. <br>\nI also didn't like just using the <code>sub</code> definition from some instance in the library but I couldn't figure out how to get Lean to infer it automatically.</p>",
        "id": 235218141,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618853272
    },
    {
        "content": "<p>Regarding dyadic rationals, I think a good intermediate step is to define and prove the basic properties of the <code>midpoint</code> function, which I think is the main driver behind the dyadic rational construction</p>",
        "id": 235218352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618853375
    },
    {
        "content": "<p>(maybe there are conditions on the inputs, I forget the details)</p>",
        "id": 235218443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618853405
    },
    {
        "content": "<p>It's awfully convenient to have <code>x - y = x + -y</code> be defeq. I wouldn't redefine it unless it expands to something crazy with the default definition</p>",
        "id": 235218678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618853516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/235218352\">said</a>:</p>\n<blockquote>\n<p>Regarding dyadic rationals, I think a good intermediate step is to define and prove the basic properties of the <code>midpoint</code> function, which I think is the main driver behind the dyadic rational construction</p>\n</blockquote>\n<p>Do you have a specific property in mind? I think it is true that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> 1/2^{n+1} = \\{ 0 | 1/2^n \\} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>. More generally, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> (x + y)/2 = \\{ x | y \\} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">}</span></span></span></span> works  when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> are <em>adjacent numbers created on the same day</em>.</p>\n<p>I can try and  figure out what this might look like formally.</p>",
        "id": 235237122,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618861348
    },
    {
        "content": "<p>Right, that latter property is the one I'm talking about. You have to prove that that number is in fact <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>:</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">m:=(x+y)/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>, for example by proving that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>+</mo><mi>m</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">m+m=x+y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>",
        "id": 235251503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618866938
    },
    {
        "content": "<p>\"created on the same day\" also sounds a bit finicky</p>",
        "id": 235251533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618866958
    },
    {
        "content": "<p>Is it possible to say anything interesting about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∣</mo><mi>y</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x\\mid y\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">}</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> are just random surreals?</p>",
        "id": 235251630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618867002
    },
    {
        "content": "<p>Also, you said \"more generally\" but the first statement doesn't follow from the second since 0 is born on day 0</p>",
        "id": 235251692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618867054
    },
    {
        "content": "<p>Oh right, 0 isn't born on the same day! <br>\nI'll take a look at Conway and try to work out the exact mathematical statement.</p>",
        "id": 235255693,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618869187
    },
    {
        "content": "<p>So I believe the correct mathematical statement is this: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mrow><mo>−</mo><mi>i</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mrow><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo>…</mo></mrow><annotation encoding=\"application/x-tex\"> \\dots, x_{-i}, x_{-i + 1}, \\dots, x_{-1}, x_0 = 0, x_1, \\dots, x_i \\dots </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span> are the numbers created <em>by</em> day <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> then the  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ x_i | x_{i + 1} \\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> is the midpoint of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\"> x_i </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x_{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>. But this fails for arbitrary <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>j</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> \\{x_i | x_j \\} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 235256559,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618869678
    },
    {
        "content": "<p>On shortcut is to just prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">}</mo><mo>+</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">}</mo><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\"> \\{0 | 1/2^n \\} + \\{0 | 1/2 ^ n \\} = 1/2^{n-1} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. And define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> m / 2^n </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> 1/2^n + \\dots  + 1/2^n </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>. This will not require the concept of \"days\".</p>",
        "id": 235256807,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618869805
    },
    {
        "content": "<p>Do we know that the surreals are a field?</p>",
        "id": 235257096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618869981
    },
    {
        "content": "<p>I'm guessing no, but if not then a lot of shortcuts like that won't work</p>",
        "id": 235257134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618870005
    },
    {
        "content": "<p>Also, what's the proof sketch? The lean version of the definition is pretty different from the set theory definition</p>",
        "id": 235257200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618870047
    },
    {
        "content": "<p>There is a definition of inverse in the library for pgames: <a href=\"https://github.com/leanprover-community/mathlib/blob/0dfac6ebc9cbb286afb013ccfd7c7478a11ba1e5/src/set_theory/surreal.lean#L106\">https://github.com/leanprover-community/mathlib/blob/0dfac6ebc9cbb286afb013ccfd7c7478a11ba1e5/src/set_theory/surreal.lean#L106</a></p>\n<p>It might be possible to define the field instance for surreal using this.</p>",
        "id": 235257425,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618870193
    },
    {
        "content": "<p>Oh, it's not even proved to be numeric</p>",
        "id": 235257813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618870408
    },
    {
        "content": "<p>that should be fairly easy</p>",
        "id": 235257831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618870415
    },
    {
        "content": "<p>I lifted those definitions straight off wikipedia. I don't think they came with proofs attached</p>",
        "id": 235257919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618870463
    },
    {
        "content": "<p>Oh cool, let me try this out first then. Thanks!</p>",
        "id": 235258004,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618870524
    },
    {
        "content": "<p>Looking at those expressions, I think commutativity of addition and the other ring axioms should be \"straightforward\"</p>",
        "id": 235258112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618870588
    },
    {
        "content": "<p>I think the correct statement regarding midpoints is that if you have a surreal number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>L</mi><mo>∣</mo><mi>R</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">x=\\{L\\mid R\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">}</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sup</mi><mo>⁡</mo><mi>L</mi><mo>&lt;</mo><mi>inf</mi><mo>⁡</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\sup L &lt; \\inf R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">sup</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">in<span style=\"margin-right:0.07778em;\">f</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> (let's say they are real numbers, and in the easy case the max/min are attained), then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>sup</mi><mo>⁡</mo><mi>L</mi><mo>+</mo><mi>inf</mi><mo>⁡</mo><mi>R</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x=(\\sup L+\\inf R)/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\">sup</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">in<span style=\"margin-right:0.07778em;\">f</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span></p>",
        "id": 235258920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618871044
    },
    {
        "content": "<p>Oh no that's not right, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>2</mn><mo>∣</mo><mn>5</mn><mo stretchy=\"false\">}</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">\\{2\\mid 5\\}=3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> is mentioned on wikipedia</p>",
        "id": 235259139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618871178
    },
    {
        "content": "<p>Oh, <code>pgame</code> already has <code>add_comm</code> proved, it just needs to be packed up</p>",
        "id": 235260561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618871958
    },
    {
        "content": "<p>don't see anything about the other field operations though</p>",
        "id": 235260577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618871973
    },
    {
        "content": "<p>Right, I'll work on proving things about <code>mul</code> first.</p>",
        "id": 235356173,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1618930268
    },
    {
        "content": "<p>I spent hours (unsuccessfully) trying to prove <code>x * 0 = 0 </code> for <code>pgame</code>s by hand only to discover this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.surreal</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pgame</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_zero_relabelling</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pgame.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}),</span> <span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintros</span> <span class=\"o\">⟨⟩,</span> <span class=\"n\">tidy</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pgame</span>\n</code></pre></div>\n<p>This is insane! How is <code>tidy</code> so powerful? Is this a valid proof? It almost feels like I'm cheating somehow.</p>",
        "id": 235598278,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619048082
    },
    {
        "content": "<p>If you run <code>tidy?</code> instead, it will tell you what tactics it did.</p>",
        "id": 235598354,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619048159
    },
    {
        "content": "<p>This is the suggestion: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_snd</span> <span class=\"o\">},</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_snd</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x_snd</span> <span class=\"o\">},</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x_snd</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_snd</span> <span class=\"o\">},</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_snd</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x_snd</span> <span class=\"o\">},</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x_snd</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">i_snd</span> <span class=\"o\">},</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">i_snd</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 235598569,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619048286
    },
    {
        "content": "<p>yeah was just about to post that, lol</p>",
        "id": 235598588,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619048302
    },
    {
        "content": "<p><code>finish</code> is also good</p>",
        "id": 235598592,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619048309
    },
    {
        "content": "<p>(although in this case it completely fails)</p>",
        "id": 235598619,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619048347
    },
    {
        "content": "<p><code>tidy</code> ftw <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 235598858,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619048523
    },
    {
        "content": "<p>Even though that's a fairly large tactic script coming out of <code>tidy</code>, I would bet it's straightforward to hand-edit down to something much smaller, even before you understand what it is doing. Very often it runs <code>cases</code> unnecessarily (or \"too early\"), and this is a large part of why it is slow. Also very often it calls <code>dsimp</code> unnecessarily.</p>",
        "id": 235602340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619051094
    },
    {
        "content": "<p>The first step of mindlessly golfing a <code>tidy</code> proof is to add newlines and indentation, so you have a hope. :-)</p>",
        "id": 235602474,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619051204
    },
    {
        "content": "<p>It looks to me like for the most part it's taking terms apart, with a bit of <code>simp</code> thrown in. If it's slow to run you might want to replace with the output of <code>tidy?</code> and then start aggressively using <code>rintro</code> and <code>rcases</code>.</p>\n<p>Yeah I've seen both <code>tidy</code> and <code>nlinarith</code> do things they should never be able to do</p>",
        "id": 235626149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619072907
    },
    {
        "content": "<p>I did manage to simplify it quite a bit, and in the process discovered <code>rintros?</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.surreal</span>\n<span class=\"kn\">open</span> <span class=\"n\">pgame</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">pgame</span>\n\n<span class=\"sd\">/-- `x * 0` has exactly the same moves as `0`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_zero_relabelling</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">),</span> <span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩⟩</span>\n\n<span class=\"sd\">/-- `0 * x` has exactly the same moves as `0`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_mul_relabelling</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">),</span> <span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pgame</span>\n</code></pre></div>",
        "id": 235861979,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619192039
    },
    {
        "content": "<p>I'm trying to prove basic properties about the multiplication of surreal numbers. <br>\nI have several proofs written out completely but all of the need the following lemmas, which I'm having trouble proving:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.surreal</span>\n<span class=\"kn\">open</span> <span class=\"n\">pgame</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">neg_congr_relabelling</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x.relabelling</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_congr_relabelling</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">w.relabelling</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y.relabelling</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can try induction on the various variables but that seems like the wrong way to prove these.<br>\nMorally, these should be defined recursively but I'm not accustomed to writing recursion in Lean. </p>\n<p>Any suggestions? <br>\nThanks,</p>",
        "id": 236078558,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619369738
    },
    {
        "content": "<p>Here's a proof for the first one. The recursion pattern is borrowed from <code>relabelling.symm</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">neg_congr_relabelling</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">},</span> <span class=\"n\">x.relabelling</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">L_equiv</span><span class=\"o\">,</span> <span class=\"n\">R_equiv</span><span class=\"o\">,</span> <span class=\"n\">L_relabelling</span><span class=\"o\">,</span> <span class=\"n\">R_relabelling</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">R_equiv</span><span class=\"o\">,</span> <span class=\"n\">L_equiv</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">neg_congr_relabelling</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">R_relabelling</span> <span class=\"o\">(</span><span class=\"n\">R_equiv</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">neg_congr_relabelling</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">L_relabelling</span> <span class=\"o\">(</span><span class=\"n\">L_equiv.symm</span> <span class=\"n\">i</span><span class=\"o\">))⟩</span>\n</code></pre></div>",
        "id": 236079472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619370523
    },
    {
        "content": "<p>Thanks!</p>\n<p>I've managed to get a proof for <code>surreal.mul_comm</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.surreal</span>\n<span class=\"kn\">open</span> <span class=\"n\">pgame</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">pgame</span>\n\n<span class=\"sd\">/-- An explicit description of the moves for Left in `x * y`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">left_moves_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span>\n  <span class=\"bp\">≃</span> <span class=\"n\">x.left_moves</span> <span class=\"bp\">×</span> <span class=\"n\">y.left_moves</span> <span class=\"bp\">⊕</span> <span class=\"n\">x.right_moves</span> <span class=\"bp\">×</span> <span class=\"n\">y.right_moves</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- An explicit description of the moves for Right in `x * y`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">right_moves_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_moves</span>\n  <span class=\"bp\">≃</span> <span class=\"n\">x.left_moves</span> <span class=\"bp\">×</span> <span class=\"n\">y.right_moves</span> <span class=\"bp\">⊕</span> <span class=\"n\">x.right_moves</span> <span class=\"bp\">×</span> <span class=\"n\">y.left_moves</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul_move_left_inl</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span>\n    <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">j</span>\n    <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">j</span>\n<span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_move_left_inl</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">left_moves_mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)))</span>\n   <span class=\"bp\">=</span> <span class=\"n\">x.move_left</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y.move_left</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">x.move_left</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y.move_left</span> <span class=\"n\">j</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul_move_left_inr</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span>\n    <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">j</span>\n    <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">j</span>\n<span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_move_left_inr</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">left_moves_mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)))</span>\n   <span class=\"bp\">=</span> <span class=\"n\">x.move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y.move_right</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">x.move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y.move_right</span> <span class=\"n\">j</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul_move_right_inl</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span>\n    <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">j</span>\n    <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">j</span>\n<span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_move_right_inl</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">right_moves_mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)))</span>\n   <span class=\"bp\">=</span> <span class=\"n\">x.move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y.move_left</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">x.move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y.move_left</span> <span class=\"n\">j</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul_move_right_inr</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span>\n    <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">j</span>\n    <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">j</span>\n<span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_move_right_inr</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">right_moves_mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)))</span>\n   <span class=\"bp\">=</span> <span class=\"n\">x.move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y.move_left</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">x.move_right</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y.move_left</span> <span class=\"n\">j</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- If `w` has the same moves as `x` and `y` has the same moves as `z`,</span>\n<span class=\"sd\">    then `w + y` has the same moves as `x + z`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">add_congr_relabelling</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">},</span>\n<span class=\"n\">w.relabelling</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y.relabelling</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">wl</span> <span class=\"n\">wr</span> <span class=\"n\">wL</span> <span class=\"n\">wR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">zl</span> <span class=\"n\">zr</span> <span class=\"n\">zL</span> <span class=\"n\">zR</span><span class=\"o\">)</span>\n  <span class=\"o\">⟨</span><span class=\"n\">L_equiv₁</span><span class=\"o\">,</span> <span class=\"n\">R_equiv₁</span><span class=\"o\">,</span> <span class=\"n\">L_relabelling₁</span><span class=\"o\">,</span> <span class=\"n\">R_relabelling₁</span><span class=\"o\">⟩</span>\n  <span class=\"o\">⟨</span><span class=\"n\">L_equiv₂</span><span class=\"o\">,</span> <span class=\"n\">R_equiv₂</span><span class=\"o\">,</span> <span class=\"n\">L_relabelling₂</span><span class=\"o\">,</span> <span class=\"n\">R_relabelling₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"c1\">-- left moves</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">L_equiv₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">L_equiv₂</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">L_equiv₁.symm</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">L_equiv₂.symm</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"c1\">-- right moves</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">R_equiv₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">R_equiv₂</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">R_equiv₁.symm</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">R_equiv₂.symm</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"c1\">-- move left</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_congr_relabelling</span>\n        <span class=\"o\">(</span><span class=\"n\">L_relabelling₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">(⟨</span><span class=\"n\">L_equiv₂</span><span class=\"o\">,</span> <span class=\"n\">R_equiv₂</span><span class=\"o\">,</span> <span class=\"n\">L_relabelling₂</span><span class=\"o\">,</span> <span class=\"n\">R_relabelling₂</span><span class=\"o\">⟩)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_congr_relabelling</span>\n        <span class=\"o\">(⟨</span><span class=\"n\">L_equiv₁</span><span class=\"o\">,</span> <span class=\"n\">R_equiv₁</span><span class=\"o\">,</span> <span class=\"n\">L_relabelling₁</span><span class=\"o\">,</span> <span class=\"n\">R_relabelling₁</span><span class=\"o\">⟩)</span>\n        <span class=\"o\">(</span><span class=\"n\">L_relabelling₂</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"c1\">-- move right</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_congr_relabelling</span>\n        <span class=\"o\">(</span><span class=\"n\">R_relabelling₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"o\">(⟨</span><span class=\"n\">L_equiv₂</span><span class=\"o\">,</span> <span class=\"n\">R_equiv₂</span><span class=\"o\">,</span> <span class=\"n\">L_relabelling₂</span><span class=\"o\">,</span> <span class=\"n\">R_relabelling₂</span><span class=\"o\">⟩)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_congr_relabelling</span>\n        <span class=\"o\">(⟨</span><span class=\"n\">L_equiv₁</span><span class=\"o\">,</span> <span class=\"n\">R_equiv₁</span><span class=\"o\">,</span> <span class=\"n\">L_relabelling₁</span><span class=\"o\">,</span> <span class=\"n\">R_relabelling₁</span><span class=\"o\">⟩)</span>\n        <span class=\"o\">(</span><span class=\"n\">R_relabelling₂</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">pgame_wf_tac</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- If `x` has the same moves as `y`, then `-x` has the sames moves as `-y`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">neg_congr_relabelling</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">},</span> <span class=\"n\">x.relabelling</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">L_equiv</span><span class=\"o\">,</span> <span class=\"n\">R_equiv</span><span class=\"o\">,</span> <span class=\"n\">L_relabelling</span><span class=\"o\">,</span> <span class=\"n\">R_relabelling</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">R_equiv</span><span class=\"o\">,</span> <span class=\"n\">L_equiv</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">neg_congr_relabelling</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">R_relabelling</span> <span class=\"o\">(</span><span class=\"n\">R_equiv</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">neg_congr_relabelling</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">L_relabelling</span> <span class=\"o\">(</span><span class=\"n\">L_equiv.symm</span> <span class=\"n\">i</span><span class=\"o\">))⟩</span>\n\n<span class=\"sd\">/-- If `w` has the same moves as `x` and `y` has the same moves as `z`,</span>\n<span class=\"sd\">then `w - y` has the same moves as `x - z`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sub_congr_relabelling</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">w.relabelling</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y.relabelling</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_congr_relabelling</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">neg_congr_relabelling</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- If `a` has the same moves as `x`, `b` has the same moves as `y`,</span>\n<span class=\"sd\">and `c` has the same moves as `z`, then `a + b - c` has the same moves as `y + x - z`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_sub_comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a.relabelling</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b.relabelling</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">c.relabelling</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sub_congr_relabelling</span>\n  <span class=\"o\">(</span><span class=\"n\">relabelling.trans</span>\n    <span class=\"o\">(</span><span class=\"n\">add_comm_relabelling</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">add_congr_relabelling</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">))</span> <span class=\"n\">h₃</span>\n\n<span class=\"sd\">/-- `x * y` has exactly the same moves as `y * x`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_comm_relabelling</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">I1</span> <span class=\"n\">I2</span> <span class=\"n\">generalizing</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"n\">J1</span> <span class=\"n\">J2</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩)</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩)</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_sub_comm</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">J1</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">yL</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_sub_comm</span> <span class=\"o\">(</span><span class=\"n\">I2</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">J2</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I2</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">yR</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_sub_comm</span> <span class=\"o\">(</span><span class=\"n\">I2</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">J1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I2</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">yL</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_sub_comm</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">J2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">yR</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- `x * y` is equivalent to `y * x`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_comm_equiv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv_of_relabelling</span> <span class=\"o\">(</span><span class=\"n\">mul_comm_relabelling</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `x * 0` has exactly the same moves as `0`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_zero_relabelling</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">),</span> <span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨⟩⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨⟩⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨⟩⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩⟩</span>\n\n<span class=\"sd\">/-- `x * 0` is equivalent to `0`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_zero_equiv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv_of_relabelling</span> <span class=\"o\">(</span><span class=\"n\">mul_zero_relabelling</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `0 * x` has exactly the same moves as `0`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_mul_relabelling</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">),</span> <span class=\"n\">relabelling</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">fsplit</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩),</span>\n <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩⟩</span>\n\n<span class=\"sd\">/-- `0 * x` is equivalent to `0`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_mul_equiv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv_of_relabelling</span> <span class=\"o\">(</span><span class=\"n\">zero_mul_relabelling</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pgame</span>\n</code></pre></div>",
        "id": 236177302,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619445151
    },
    {
        "content": "<p>That is some very elegant-looking code! I hope you're PR'ing this stuff!</p>",
        "id": 236177866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619445383
    },
    {
        "content": "<p>Thanks! :) </p>\n<p>I'll try to optimize the code a bit  and PR it away.</p>",
        "id": 236178604,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619445658
    },
    {
        "content": "<p>Would you recommend opening up a single PR for the entire thing?</p>",
        "id": 236178703,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619445695
    },
    {
        "content": "<p>If by \"entire thing\" you mean that medium-length code block above, definitely</p>",
        "id": 236178946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619445785
    },
    {
        "content": "<p>if you mean \"Everything you intend to do on surreal numbers after that\" too, then probably not!</p>",
        "id": 236179037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619445804
    },
    {
        "content": "<p>It's tempting to rename <code>equiv_of_relabelling</code> to <code>relabelling.equiv</code>, and then you can probably just remove the <code>zero_mul_equiv</code> etc lemmas as they become <code>(zero_mul_relabelling x).equiv</code></p>",
        "id": 236179228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619445865
    },
    {
        "content": "<p>Great, I'll do that. </p>\n<p>There are quite a few other <code>_equiv</code> lemmas in pgame and surreal that are like that. Will need to change that as well.</p>",
        "id": 236179776,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619446059
    },
    {
        "content": "<p>That might make sense to do as a standalone \"chore\" or \"refactor\" PR</p>",
        "id": 236181989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619446874
    },
    {
        "content": "<p>If you're looking for an excuse to split your PR in two :)</p>",
        "id": 236182010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619446885
    },
    {
        "content": "<p>It should be fine. Those theorems are never used anywhere :P</p>",
        "id": 236191962,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619449897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/236179228\">said</a>:</p>\n<blockquote>\n<p>It's tempting to rename <code>equiv_of_relabelling</code> to <code>relabelling.equiv</code>, and then you can probably just remove the <code>zero_mul_equiv</code> etc lemmas as they become <code>(zero_mul_relabelling x).equiv</code></p>\n</blockquote>\n<p>This is turning out to be more complicated than I first thought. I'll follow your suggestion of opening a separate PR for refactoring.</p>",
        "id": 236282195,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619498035
    },
    {
        "content": "<p>TIL: For pgames, it turns out that <code>a*(b+c)</code> is not a relabelling of <code>a*b + a*c</code>. You get a term <code>x - x</code> on one side and <code>0</code> on the other.</p>",
        "id": 236555994,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619634634
    },
    {
        "content": "<p>Given multiplication only really works on surreals, not on games, you expect it to break at some point. But it's nice to know this is where it starts, I didn't know that at all!</p>",
        "id": 236595460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619652220
    },
    {
        "content": "<p>Is it worth PRing the statement that no such relabeling exists?</p>",
        "id": 236596739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619653009
    },
    {
        "content": "<p>Meh, not really.</p>",
        "id": 236597298,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619653461
    },
    {
        "content": "<p>I too discovered this completely accidentally. Just the number of terms on the two sides do not agree.</p>",
        "id": 236602567,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619657365
    },
    {
        "content": "<p>My current hope is to define the following: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">weak_relabelling</span> <span class=\"o\">:</span> <span class=\"n\">pgame.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">pgame.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">x.left_moves</span> <span class=\"bp\">≃</span> <span class=\"n\">y.left_moves</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">x.right_moves</span> <span class=\"bp\">≃</span> <span class=\"n\">y.right_moves</span><span class=\"o\">),</span>\n         <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">x.left_moves</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x.move_left</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">y.move_left</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n         <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">y.right_moves</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x.move_right</span> <span class=\"o\">(</span><span class=\"n\">R.symm</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">y.move_right</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n       <span class=\"n\">weak_relabelling</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 236602580,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619657380
    },
    {
        "content": "<p>and hope that <code>weak_relabelling</code> implies <code>equiv</code>.</p>",
        "id": 236602646,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619657410
    },
    {
        "content": "<p>I think this should provide <code>mul_comm_weak_relabelling</code> for pgames too, not just surreals.</p>",
        "id": 236602738,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619657489
    },
    {
        "content": "<p>Isn't this just the same as <code>equiv</code>?</p>",
        "id": 236607368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619661295
    },
    {
        "content": "<p>why not prove <code>equiv</code> directly?</p>",
        "id": 236607381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619661308
    },
    {
        "content": "<p>(specifically, rather than a new inductive that should be a lemma about <code>equiv</code>)</p>",
        "id": 236607414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619661330
    },
    {
        "content": "<p>For <code>equiv</code> we'll need to show that <code>a*(b+c) \\le a*b + a*c</code> and <code>a*b + a*c \\le a*(b+c)</code>.</p>",
        "id": 236610893,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619664314
    },
    {
        "content": "<p>I'm not entirely sure how to do either tbh</p>",
        "id": 236610912,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619664330
    },
    {
        "content": "<p>Mario is suggesting that you prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">x.left_moves</span> <span class=\"bp\">≃</span> <span class=\"n\">y.left_moves</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">x.right_moves</span> <span class=\"bp\">≃</span> <span class=\"n\">y.right_moves</span><span class=\"o\">),</span>\n         <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">x.left_moves</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x.move_left</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">y.move_left</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n         <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">y.right_moves</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x.move_right</span> <span class=\"o\">(</span><span class=\"n\">R.symm</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">y.move_right</span> <span class=\"n\">j</span><span class=\"o\">)),</span>\n       <span class=\"n\">x.equiv</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 236615334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619668548
    },
    {
        "content": "<p>I see, so instead of an inductive type do a lemma. Sounds good!</p>",
        "id": 236619507,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619672467
    },
    {
        "content": "<p>By the way, if you are wondering how to prove the lemma, note that this is exactly the inductive step in the proof of <code>equiv_of_relabelling</code></p>",
        "id": 236619624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619672559
    },
    {
        "content": "<p>Awesome, thanks!!</p>",
        "id": 236619834,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619672730
    },
    {
        "content": "<p>Any suggestions for proving this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.pgame</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≈</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pgame.equiv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≈</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?<br>\nThis is the last lemma I need for proving <code>left_distrib_equiv</code>.</p>",
        "id": 236856512,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619797555
    },
    {
        "content": "<p>do you have the additive group lemmas?</p>",
        "id": 236856653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619797595
    },
    {
        "content": "<p>you shouldn't need to resort to relabellings all the time</p>",
        "id": 236856778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619797647
    },
    {
        "content": "<p>I'm having trouble because the <code>equiv</code> instead of <code>=</code>.</p>",
        "id": 236858439,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798391
    },
    {
        "content": "<p>There is an instance of <code>add_comm_group</code> for <code>surreal</code> but nothing for <code>pgames</code>.</p>",
        "id": 236858559,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798414
    },
    {
        "content": "<p>If only there were a quotient you could use...</p>",
        "id": 236858597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798424
    },
    {
        "content": "<p>Q: why do you care about pgame?</p>",
        "id": 236858629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798436
    },
    {
        "content": "<p>Right now <code>mul</code> is not defined for <code>surreals</code></p>",
        "id": 236858811,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798506
    },
    {
        "content": "<p>it respects the quotient, doesn't it?</p>",
        "id": 236858887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798528
    },
    {
        "content": "<p>also this lemma doesn't use mul</p>",
        "id": 236858929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798545
    },
    {
        "content": "<p>Ah, I need this as an intermediate step for proving <code>a * (b + c) = a * b + a * c</code></p>",
        "id": 236859075,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798590
    },
    {
        "content": "<p>i meant equiv for pgames</p>",
        "id": 236859121,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798603
    },
    {
        "content": "<p>I am saying, forget about pgames except as an implementation detail of surreal</p>",
        "id": 236859183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798636
    },
    {
        "content": "<p>lift mul to surreal</p>",
        "id": 236859244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798647
    },
    {
        "content": "<p>Yeah, there is a missing piece <code>numeric_mul</code> for descending <code>mul</code> to <code>surreal</code></p>",
        "id": 236859256,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798651
    },
    {
        "content": "<p>I'll try to prove that directly</p>",
        "id": 236859291,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798664
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 236859357,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798691
    },
    {
        "content": "<p>There may be a use for the quotient of pgame by equiv, without the numeric part</p>",
        "id": 236859442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798719
    },
    {
        "content": "<p>that would be the easiest way to prove the theorem you mention</p>",
        "id": 236859483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798735
    },
    {
        "content": "<p>I'm not sure what the benefit of restricting to numeric is, I guess some laws don't hold</p>",
        "id": 236859603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798769
    },
    {
        "content": "<p>Ah interesting, I think Conway calls them pseudo-numbers</p>",
        "id": 236859649,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798796
    },
    {
        "content": "<p>Yeah, I can totally do that and all the proofs will simplify a lot!</p>",
        "id": 236859778,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798856
    },
    {
        "content": "<p>Would it then make sense to change the definition of <code>surreals</code> as a subtype of <code>pseudo-numbers</code>?</p>",
        "id": 236859863,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798892
    },
    {
        "content": "<p>ah, <code>pgame.star</code> is a witness to the failure of partial ordering</p>",
        "id": 236859960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619798926
    },
    {
        "content": "<p>Right, they have the ring structure but not the order or field structures</p>",
        "id": 236860071,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619798987
    },
    {
        "content": "<p>Oops, this already exists</p>",
        "id": 236860738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619799253
    },
    {
        "content": "<p>that's <code>game</code></p>",
        "id": 236860756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619799257
    },
    {
        "content": "<p>Great, I'll check that out and figure out how to connect it back to surreal numbers.</p>",
        "id": 236861805,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619799692
    },
    {
        "content": "<p>Actually there is a complication, because I think that <code>pgame.numeric</code> does not respect the equivalence relation. You can take as the subtype the assertion that some pgame in the equivalence class is numeric, but then functions that are lifted have to sometimes be evaluated on non-numeric pgames</p>",
        "id": 236861907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619799726
    },
    {
        "content": "<p>Alternatively, you can just leave the definition as is and construct an injection <code>surreal -&gt; game</code> so that you can prove theorems about surreal by injecting them into <code>game</code></p>",
        "id": 236862123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619799821
    },
    {
        "content": "<p>Creating <code>surreal -&gt; game</code> is a more natural thing to do. But I still need to define <code>mul</code> on surreals.</p>",
        "id": 236863676,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619800455
    },
    {
        "content": "<p>I suspect that it should not be too difficult</p>",
        "id": 236863859,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619800533
    },
    {
        "content": "<p>Here is a proof of your lemma using <code>game</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.game</span> <span class=\"n\">tactic.abel</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≈</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pgame.equiv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≈</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">pgame.setoid</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">quotient.exact</span> <span class=\"n\">pgame</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"bp\">⟦</span><span class=\"n\">b</span><span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"n\">c</span><span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"bp\">⟦</span><span class=\"n\">d</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"n\">e</span><span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"bp\">⟦</span><span class=\"n\">b</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"bp\">⟦</span><span class=\"n\">c</span><span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"bp\">-⟦</span><span class=\"n\">e</span><span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"bp\">⟦</span><span class=\"n\">d</span><span class=\"bp\">⟧</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236863894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619800552
    },
    {
        "content": "<p>Awesome, thanks so much!</p>",
        "id": 236864003,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619800584
    },
    {
        "content": "<p>No need for <code>letI</code>, just <code>apply @quotient.exact' pgame</code></p>",
        "id": 236864237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619800686
    },
    {
        "content": "<p>actually just deleting the letI is enough</p>",
        "id": 236864422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619800765
    },
    {
        "content": "<p>because this is actually the official setoid on pgame</p>",
        "id": 236864462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619800781
    },
    {
        "content": "<p>This trick of jumping to <code>games</code> looks really useful. I can probably use it to simplify a lot of other nasty proofs in <code>surreal.lean</code>.</p>",
        "id": 236864931,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619800966
    },
    {
        "content": "<p>When I added <code>import set_theory.game</code> to <code>surreal.lean</code> I started getting type mismatch errors. </p>\n<p>For example here : <a href=\"https://github.com/leanprover-community/mathlib/blob/6b6366b351f3e3c242e620aa0c39a4dc1eca8c10/src/set_theory/surreal.lean#L408\">https://github.com/leanprover-community/mathlib/blob/6b6366b351f3e3c242e620aa0c39a4dc1eca8c10/src/set_theory/surreal.lean#L408</a> (on branch surreal_mul_distrib)<br>\nI am getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">has_add.add</span> <span class=\"n\">w</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">w</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">pgame</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">,</span>\n<span class=\"n\">ow</span> <span class=\"o\">:</span> <span class=\"n\">w.numeric</span><span class=\"o\">,</span>\n<span class=\"n\">ox</span> <span class=\"o\">:</span> <span class=\"n\">x.numeric</span><span class=\"o\">,</span>\n<span class=\"n\">oy</span> <span class=\"o\">:</span> <span class=\"n\">y.numeric</span><span class=\"o\">,</span>\n<span class=\"n\">oz</span> <span class=\"o\">:</span> <span class=\"n\">z.numeric</span><span class=\"o\">,</span>\n<span class=\"n\">ix</span> <span class=\"o\">:</span> <span class=\"n\">x.left_moves</span><span class=\"o\">,</span>\n<span class=\"n\">hix</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">x.move_left</span> <span class=\"n\">ix</span><span class=\"o\">,</span>\n<span class=\"n\">iz</span> <span class=\"o\">:</span> <span class=\"n\">z.left_moves</span><span class=\"o\">,</span>\n<span class=\"n\">hiz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z.move_left</span> <span class=\"n\">iz</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x.move_left</span> <span class=\"n\">ix</span> <span class=\"bp\">+</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>Lean is interpreting <code>has_add.add</code> as the addition of <code>game</code>s instead of <code>pgame</code>s. <br>\nThe <code>\\le</code> also broke in a few places but I was able to fix it using <code>pgame.le_refl</code>. </p>\n<p>Any suggestions on how to resolve this? Thanks,</p>",
        "id": 236939373,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619846365
    },
    {
        "content": "<p>What is the status of multiplication of surreal numbers in mathlib?  In the documentation <a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/surreal/basic.html\">here</a> I see</p>\n<blockquote>\n<p>The definition of multiplication for surreal numbers is surprisingly difficult and is currently missing in the library...This will make for a fun and challenging project.</p>\n</blockquote>\n<p>but it sounds from the discussion above as though some progress was made?  I have a student who might be interested in contributing to this if it is still open.</p>",
        "id": 272003669,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1644944269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span> ?</p>",
        "id": 272017194,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644949652
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> , I gave up on trying to prove that product of numbers is a number because the proofs got too long and my local machine could not handle them! I don't think anyone is working on this right now. It <em>should</em> make for a nice project but the theorems in Conway's book are not enough and one would need to come up with smart ways to simplify the proof.</p>",
        "id": 272018618,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1644950276
    },
    {
        "content": "<p>Once you have this, the later proofs would simplify greatly, especially the theorems in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/surreal.dyadic\">docs#surreal.dyadic</a> so it would be amazing if your students can make it work.</p>",
        "id": 272018961,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1644950418
    },
    {
        "content": "<p>Theorem 3.8 <a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15859-s05/www/lecture-notes/comb-games-notes.pdf\">here</a> is the one I tried formalizing.</p>",
        "id": 272019540,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1644950679
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 272020336,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1644951057
    },
    {
        "content": "<p>Hi, as it happens, I was sending an email to Mario Carneiro just today with essentially the same question that <span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> asked: I also have a student who would be interested in working on this for her Master's thesis.<br>\nSince I am responsible for the proof of Theorem 3.8 in the paper linked to by <span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span> (even though I did this quite some time ago), I would hope that I can provide enough help to my student to get the proof (or a variant of it) formalized.<br>\nOn the other hand, I would not want to sort of \"steal\" the topic from <span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> , who asked before me. So I'm not sure how to proceed from here...</p>",
        "id": 272173821,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645043294
    },
    {
        "content": "<p>I will PM you.</p>",
        "id": 272193065,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1645053184
    },
    {
        "content": "<p>Hi, I'm working on this!</p>",
        "id": 279974047,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650795262
    },
    {
        "content": "<p>I believe to have found a way to complete the proof of multiplication well definedness in a way that is actually nice to work with</p>",
        "id": 279974068,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650795314
    },
    {
        "content": "<p>I'm only like 80% sure that this works</p>",
        "id": 279974078,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650795342
    },
    {
        "content": "<p>The precise statement you prove is this <a href=\"/user_uploads/3121/WOoUaxmZc26xe7adN8fF4Hli/370964201478553600.png\">370964201478553600.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WOoUaxmZc26xe7adN8fF4Hli/370964201478553600.png\" title=\"370964201478553600.png\"><img src=\"/user_uploads/3121/WOoUaxmZc26xe7adN8fF4Hli/370964201478553600.png\"></a></div>",
        "id": 279974146,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650795443
    },
    {
        "content": "<p>And the way you prove this is by proving that for any game g, if x + y + z is a relabelling of g, then that statement is true</p>",
        "id": 279974194,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650795488
    },
    {
        "content": "<p>You induct on g using the <code>subsequent</code> relation</p>",
        "id": 279974204,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650795519
    },
    {
        "content": "<p>I'll try actually writing the proof down later today or tomorrow, wish me luck!</p>",
        "id": 279974277,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650795643
    },
    {
        "content": "<p>Oh, and this works since you just get the inductive hypothesis with subsequent and reordered arguments, which means that the sum ends up a relabelling of some subsequent game</p>",
        "id": 279974504,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650795974
    },
    {
        "content": "<p>Update: the exact induction I posted doesn't work, but I got something pretty similar that seems very promising. I'll be posting my progress on the <code>surreal_mul</code> branch.</p>",
        "id": 279991101,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1650822188
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib/tree/surreal_mul\">branch#surreal_mul</a>)</p>",
        "id": 280001347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650836558
    },
    {
        "content": "<p>Great news everyone! I believe I finally nailed the induction hypothesis</p>",
        "id": 280527684,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651166584
    },
    {
        "content": "<p>I've updated the branch</p>",
        "id": 280527693,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651166589
    },
    {
        "content": "<p>If we prove <code>mul_args.result</code>, the result follows</p>",
        "id": 280527717,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651166605
    },
    {
        "content": "<p>And that itself can be proven by well foundedness on the relation I defined on that type</p>",
        "id": 280527743,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651166620
    },
    {
        "content": "<p>I'll continue sketching the proof in the following days</p>",
        "id": 280527766,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651166636
    },
    {
        "content": "<p>I've run into a problem I did not expect to run into</p>",
        "id": 281094687,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622142
    },
    {
        "content": "<p>I think <code>mathlib</code> may have the wrong definition of <code>&lt;</code> on games?</p>",
        "id": 281094701,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622155
    },
    {
        "content": "<p>ONAG doesn't seem to define <code>&lt;</code>, but it does define <code>≰</code>, which is already really weird, given that in mathlib, <code>x &lt; y</code> is equivalent to <code>¬ y ≤ x</code></p>",
        "id": 281094824,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622248
    },
    {
        "content": "<p><a href=\"https://arxiv.org/pdf/math/0410026v2.pdf\">This other PDF</a> I found does define <code>&lt;</code>, but it defines <code>x &lt; y</code> as <code>x ≤ y ∧ ¬ y ≤ x</code></p>",
        "id": 281094924,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622310
    },
    {
        "content": "<p>Which is the definition that would hold if <code>&lt;</code> came from a <code>partial_order</code>, but <code>mathlib</code> makes it clear that those two definitions conflict?</p>",
        "id": 281094945,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622329
    },
    {
        "content": "<p>So, what's the deal here? Was the choice of defining <code>x &lt; y</code> as <code>¬ y ≤ x</code> intentional?</p>",
        "id": 281095007,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622379
    },
    {
        "content": "<p>Or was it some accident we've perpetrated that has somehow not broken anything yet?</p>",
        "id": 281095021,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281094824\">said</a>:</p>\n<blockquote>\n<p>given that in mathlib, <code>x &lt; y</code> is equivalent to <code>¬ y ≤ x</code></p>\n</blockquote>\n<p>Are you talking about <code>game</code> in particular?</p>",
        "id": 281095242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651622502
    },
    {
        "content": "<p>Oh yeah, I should have mentioned that</p>",
        "id": 281095325,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622555
    },
    {
        "content": "<p>I'm talking about both <code>pgame</code> and <code>game</code></p>",
        "id": 281095330,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622561
    },
    {
        "content": "<p>Yeah, there is something very wrong</p>",
        "id": 281095602,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622771
    },
    {
        "content": "<p>Every source I've looked says that <code>0 &lt; G</code> means that Left can enforce a win in <code>G</code> no matter who starts</p>",
        "id": 281095617,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622790
    },
    {
        "content": "<p>And analogously for <code>G &lt; 0</code></p>",
        "id": 281095632,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622810
    },
    {
        "content": "<p>This conflicts directly with <a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/game/pgame.html#pgame.star_lt_zero\"><code>pgame.star_lt_zero</code></a></p>",
        "id": 281095651,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651622831
    },
    {
        "content": "<p>It looks intentional for sure but I agree it seems strange.</p>",
        "id": 281095739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651622886
    },
    {
        "content": "<p>This seems to go all the way back to <a href=\"https://github.com/leanprover-community/mathlib/commit/b41277c70937d8cd46639bbef674e656e8e397dd\">https://github.com/leanprover-community/mathlib/commit/b41277c70937d8cd46639bbef674e656e8e397dd</a></p>",
        "id": 281095919,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what's your justification for this?</p>",
        "id": 281095957,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623093
    },
    {
        "content": "<p>I would even go so far as to say it is wrong, given that the module docstring says the theory is based on ONAG.</p>",
        "id": 281096073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651623182
    },
    {
        "content": "<p>Yeah, I'm increasingly convinced that this is flat out wrong</p>",
        "id": 281096327,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623408
    },
    {
        "content": "<p>My theory is this: the easiest way to define <code>≤</code> was to define both it and its negation simultaneously via Conway induction, and it was decided that the negation was going to be called <code>&lt;</code> for convenience</p>",
        "id": 281096367,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623455
    },
    {
        "content": "<p>I think this predates me: the stuff on <code>pgame</code> was adapted from existing material on <code>surreal</code>, and I just followed how that had been done. (I think? I'm very open to the possibility I misremember things, and did things badly wrong. :-)</p>",
        "id": 281096446,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651623510
    },
    {
        "content": "<p>Is the fix just to rename <code>&lt;</code> on <code>pgame</code> to <code>≰</code>?</p>",
        "id": 281096524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651623573
    },
    {
        "content": "<p>I'm not sure anything is \"wrong\", just a terribly misleading symbol is being used. :-)</p>",
        "id": 281096596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651623603
    },
    {
        "content": "<p>Well, it's not just that</p>",
        "id": 281096620,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623617
    },
    {
        "content": "<p>If we're going to do that, we're also going to have to rename a bunch of theorems, refactor others, etc.</p>",
        "id": 281096639,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623632
    },
    {
        "content": "<p>And we're also going to have to add the correct API for the correct <code>&lt;</code></p>",
        "id": 281096657,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623649
    },
    {
        "content": "<p>By the way, I dug a bit deeper and I found <a href=\"https://github.com/leanprover-community/mathlib/commit/901178e2084d7d4a97bc2ddef68135eb124aa130\">https://github.com/leanprover-community/mathlib/commit/901178e2084d7d4a97bc2ddef68135eb124aa130</a></p>",
        "id": 281096662,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623658
    },
    {
        "content": "<p>So it seems like this goes back to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 281096676,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623668
    },
    {
        "content": "<p>I guess the definition of <code>&lt;</code> was generalized from <code>surreal</code> (where it is correct) to <code>game</code> (where it is not)</p>",
        "id": 281096762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651623742
    },
    {
        "content": "<p>I don't understand though when you say \"it's not just that\", however: isn't the only problem that we should have used a different symbol than <code>&lt;</code>? After replacing the symbols and appropriately updating declaration names, there's no discrepancy from ONAG, right?</p>",
        "id": 281096765,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651623747
    },
    {
        "content": "<p>And nothing currently in <code>pgame.lean</code> has anything to say about \"the real <code>&lt;</code>\" used in other references?</p>",
        "id": 281096805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651623795
    },
    {
        "content": "<p>What I mean is, even if there's not really any maths to fix (Lean won't let us prove false things, that's kind of the point), there's a lot of API that needs to be tweaked</p>",
        "id": 281096880,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623847
    },
    {
        "content": "<p>(Sorry, above I suggested we just need to replace all the use of <code>&lt;</code> with <code>≰</code>, but that's obviously literally wrong, because the order of arguments needs to flip.)</p>",
        "id": 281096951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651623936
    },
    {
        "content": "<p>But yes, I agree this is worth fixing.</p>",
        "id": 281096968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651623955
    },
    {
        "content": "<p>I'll get to this in a few hours</p>",
        "id": 281097010,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651623965
    },
    {
        "content": "<p>Ah! So <code>game</code> really ought to be a <code>preorder</code>, just as literally anything else in the library. I was really confused so as to why <code>&lt;</code> on games ought to escape the rule.</p>",
        "id": 281097207,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651624169
    },
    {
        "content": "<p>In fact, a <code>partial_order</code></p>",
        "id": 281099083,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651625993
    },
    {
        "content": "<p>And what's more, an <code>ordered_add_comm_group</code></p>",
        "id": 281099171,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651626019
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4XG7Tn6Z5H-AysICrrOiNrqR/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/3121/Xb2TWTQVF9Z5CZp_9sVxRPNx/image.png\">image.png</a> <br>\nHere are the notations from <em>Winning Ways</em> (p.29, p.32, 2nd edition)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4XG7Tn6Z5H-AysICrrOiNrqR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4XG7Tn6Z5H-AysICrrOiNrqR/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Xb2TWTQVF9Z5CZp_9sVxRPNx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Xb2TWTQVF9Z5CZp_9sVxRPNx/image.png\"></a></div><p>The same notations are on <em>ONAG</em> (1976), p.73, p.78:<br>\n<a href=\"/user_uploads/3121/2hK8Jx3ftRcGd8BcqgRa4DUl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2hK8Jx3ftRcGd8BcqgRa4DUl/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2hK8Jx3ftRcGd8BcqgRa4DUl/image.png\"></a></div>",
        "id": 281104089,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651631744
    },
    {
        "content": "<p>So &lt; should be ⧏ (<code>⧏</code>)<br>\nVertical bar beside right triangle: ⧐<br>\nUnicode hexadecimal: 0x29d0<br>\nLeft triangle beside vertical bar: ⧏<br>\nUnicode hexadecimal: 0x29cf<br>\nIn block: Miscellaneous Mathematical Symbols-B</p>",
        "id": 281104287,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651631925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281099083\">said</a>:</p>\n<blockquote>\n<p>In fact, a <code>partial_order</code></p>\n</blockquote>\n<p>Didn't you <a href=\"#narrow/stream/116395-maths/topic/Well-founded.20recursion.20for.20pgames/near/280986918\">just claim</a> <code>game</code> isn't a <code>partial_order</code>? (I think it is.)</p>",
        "id": 281105495,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651633266
    },
    {
        "content": "<p>Precisely. Currently <code>game</code> is not a partial order when you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/game.has_lt\">docs#game.has_lt</a>. The question is whether we should make <a href=\"https://leanprover-community.github.io/mathlib_docs/find/game.partial_order\">docs#game.partial_order</a> an instance and use the <code>&lt;</code> from there.</p>",
        "id": 281127062,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651654262
    },
    {
        "content": "<p>I had raised precisely this point (that <code>&lt;</code> on games in mathlib is not compatible with <code>&lt;</code> as defined by Conway &amp;Co) in private communication with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> a while ago. I'd be strongly in favor of changing the mathlib definition to be compatible with the literature.</p>",
        "id": 281137910,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651661312
    },
    {
        "content": "<p>The notation is used on wikipedia; I believe this is where I got it from</p>",
        "id": 281138071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651661424
    },
    {
        "content": "<p>not on games, on surreals</p>",
        "id": 281138084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651661434
    },
    {
        "content": "<p>BTW, it was mostly me who developed the proof of Theorem 3.8 in Schleicher-Stoll (trying to make Conway's somewhat vague arguments precise).<br>\nIt is nice to see that this proof apparently can be formalized (and simplified in the process)!</p>",
        "id": 281138093,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651661441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281138084\">said</a>:</p>\n<blockquote>\n<p>not on games, on surreals</p>\n</blockquote>\n<p>This is the point: On surreals, <code>&lt;</code> and <code>&lt;|</code> are the same, since numbers are never fuzzy to each other.</p>",
        "id": 281138311,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651661593
    },
    {
        "content": "<p>But for games, there is the possibility that two games are incomparable (\"fuzzy\").</p>",
        "id": 281138341,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651661619
    },
    {
        "content": "<p>I believe that the definition currently called <code>&lt;</code> is important and plays a central role in the theory, but it is not obvious to me that this relation corresponds to <code>&lt;</code> or <code>&lt;|</code> and it would be good to have some literature evidence of such</p>",
        "id": 281138469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651661719
    },
    {
        "content": "<p>By <a href=\"https://leanprover-community.github.io/mathlib_docs/find/game.not_le\">docs#game.not_le</a>, for games, the current definition implies that <code>x &lt; y</code> is the same as <code>¬y ≤ x</code>.<br>\nHowever (as was pointed out in this thread above), ONAG defines <code>x &lt;| y</code> as <code>¬y ≤ x</code>(on page 78) and <code>x &lt; y</code> as <code>x ≤ y ∧ ¬y ≤ x</code>. (BTW, Conway defines <code>&lt;</code> the same way for (surreal) numbers (on page 4), but it eventually turns out that <code>≤</code> defines a linear order on numbers.)</p>",
        "id": 281139183,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651662215
    },
    {
        "content": "<p>Oooh, this is why the literature on games was so confusing to me. I never realized that <code>x &lt;| y</code> just meant <code>¬ y ≤ x</code>.</p>",
        "id": 281139306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651662303
    },
    {
        "content": "<p>(One motivation for Dierk Schleicher and myself to write our paper was that we felt that the order (first numbers, then games) in ONAG has the logic backwards, beacuse numbers are really special games...)</p>",
        "id": 281139448,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651662405
    },
    {
        "content": "<p>Should we even define <code>&lt;|</code>? <code>game</code> is a partial order among many others and I can't justify the fact that it gets to have a symbol that would make sense everywhere else but isn't used.</p>",
        "id": 281139455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651662410
    },
    {
        "content": "<p>The mutually recursive definition of <code>&lt;|</code> and <code>&lt;=</code> gives them equal status, even though they are provably negations of each other</p>",
        "id": 281139541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651662470
    },
    {
        "content": "<p>I think that is an argument that they should exist as definitions; for the notation I don't have much of an opinion</p>",
        "id": 281139614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651662504
    },
    {
        "content": "<p>It may make sense to also define <code>||</code>, to have all four possibilities and their combinations...</p>",
        "id": 281139711,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651662594
    },
    {
        "content": "<p>Sure, but do we want to use <code>&lt;|</code> <em>after</em> bootstrapping <code>≤</code>? is your argument that we should do this because <code>(≤)ᶜ</code> doesn't have the recursive properties of <code>&lt;|</code>? (but do we use those recursive properties anywhere?)</p>",
        "id": 281139767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651662620
    },
    {
        "content": "<p>note that <code>&lt;|</code> is actually taken IIRC for some silly definition on option that is never used</p>",
        "id": 281139793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651662639
    },
    {
        "content": "<p>But there is<br>\n<span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281104287\">said</a>:</p>\n<blockquote>\n<p>So &lt; should be ⧏ (<code>⧏</code>)<br>\nVertical bar beside right triangle: ⧐<br>\nUnicode hexadecimal: 0x29d0<br>\nLeft triangle beside vertical bar: ⧏<br>\nUnicode hexadecimal: 0x29cf<br>\nIn block: Miscellaneous Mathematical Symbols-B</p>\n</blockquote>",
        "id": 281139853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651662691
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/f722a688012753f6adbd57e3df7499d498d82945/library/init/data/option/basic.lean#L42-L43\">https://github.com/leanprover-community/lean/blob/f722a688012753f6adbd57e3df7499d498d82945/library/init/data/option/basic.lean#L42-L43</a> &lt;-- someone should PR remove these</p>",
        "id": 281139876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651662704
    },
    {
        "content": "<p>Never used in mathlib, afaict</p>",
        "id": 281139990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651662789
    },
    {
        "content": "<p>I saw someone use <code>lhoare</code> once but it's just <code>get_or_else</code> with reversed argument order</p>",
        "id": 281140124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651662875
    },
    {
        "content": "<p>In any case I think these surreal/game notations would be localized so the option definitions don't matter</p>",
        "id": 281140229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651662954
    },
    {
        "content": "<p>What does <code>lhoare</code> stand for?</p>",
        "id": 281140496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651663115
    },
    {
        "content": "<p>Could also use <code>≰</code> (not less than or equal, U+2270, ≰) as notation, although my font makes a meal of it</p>",
        "id": 281140692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651663251
    },
    {
        "content": "<p>Presumably \"left/right operator\" in Hoare logic or something like that (<a href=\"https://en.wikipedia.org/wiki/Hoare_logic\">https://en.wikipedia.org/wiki/Hoare_logic</a>)</p>",
        "id": 281140721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651663270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281139767\">said</a>:</p>\n<blockquote>\n<p>Sure, but do we want to use <code>&lt;|</code> <em>after</em> bootstrapping <code>≤</code>? is your argument that we should do this because <code>(≤)ᶜ</code> doesn't have the recursive properties of <code>&lt;|</code>? (but do we use those recursive properties anywhere?)</p>\n</blockquote>\n<p><code>⧏</code> (and <code>⧐</code>) are used in various statements and proofs in ONAG, so they would be useful to have if we want to stay close to the standard reference.</p>",
        "id": 281141154,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651663551
    },
    {
        "content": "<p>If we end up really using this as a separate definition/symbol, it should</p>\n<ul>\n<li>be available from <code>has_le</code>, instead of being specialized to <code>game</code></li>\n<li>have a suggestive notation, to make it clear that it's just the negation of <code>≤</code></li>\n</ul>",
        "id": 281141346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651663644
    },
    {
        "content": "<p>After all, we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne\">docs#ne</a> as a separate definition with notation <code>≠</code>.</p>",
        "id": 281141385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651663666
    },
    {
        "content": "<p>It seems to me that the main argument for having a separate definition instead of just separate notation is that it allows dot notation.</p>",
        "id": 281141494,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651663721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281140496\">said</a>:</p>\n<blockquote>\n<p>What does <code>lhoare</code> stand for?</p>\n</blockquote>\n<p>like Johan I believe the names come from \"left/right + [Tony] Hoare\", but these are not operators I recognize from hoare logic</p>",
        "id": 281142524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651664343
    },
    {
        "content": "<p>unfortunately the <a href=\"https://github.com/leanprover-community/lean/commit/52221cdbd1cd0cff2a8c4830ab83a0b5dc1334b7\">originating commit</a> doesn't give any clue as to the origin or intent behind the definitions</p>",
        "id": 281142733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651664465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281139876\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/blob/f722a688012753f6adbd57e3df7499d498d82945/library/init/data/option/basic.lean#L42-L43\">https://github.com/leanprover-community/lean/blob/f722a688012753f6adbd57e3df7499d498d82945/library/init/data/option/basic.lean#L42-L43</a> &lt;-- someone should PR remove these</p>\n</blockquote>\n<p>You CS people can have them, we want fancy unicode for games, not ASCII art.</p>",
        "id": 281148992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651668206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> the simplification I had found relied on a property that was true for mathlib <code>&lt;</code> but not actually correct for the true <code>&lt;</code></p>",
        "id": 281165722,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651675489
    },
    {
        "content": "<p>So other than restate depth in terms of birthdays and merge P2 with P4, it's almost the same argument</p>",
        "id": 281165778,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651675511
    },
    {
        "content": "<p>I personally prefer the not less or equal symbol here, I find it much more straightforward (and I believe this is what Conway uses in ONAG)</p>",
        "id": 281166036,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651675616
    },
    {
        "content": "<p>That said I'm not convinced that it's worth having as a separate relation, rather than just writing down <code>\\neg x \\le y</code></p>",
        "id": 281166115,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651675648
    },
    {
        "content": "<p>I also agree with Yaël that if we're going to make it a separate relation, it shouldn't be localized to games</p>",
        "id": 281168000,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651676356
    },
    {
        "content": "<p>I imagine many of the theorems for \\notle in games are still true on preorders</p>",
        "id": 281168092,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651676394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281165778\">said</a>:</p>\n<blockquote>\n<p>So other than restate depth in terms of birthdays and merge P2 with P4, it's almost the same argument</p>\n</blockquote>\n<p>OK, thanks for the clarification. The main thing is that the proof is correct (which I have to admit I was only 99% certain about).</p>",
        "id": 281168119,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651676403
    },
    {
        "content": "<p>I wonder how useful it is to have these lemmas on <code>¬ x ≤ y</code></p>",
        "id": 281193807,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651686732
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_le_mk</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(⟨</span><span class=\"n\">xl</span><span class=\"o\">,</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"n\">xL</span><span class=\"o\">,</span> <span class=\"n\">xR</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"o\">⟩</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"bp\">≤</span> <span class=\"n\">xL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">yR</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_not_le_mk</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">≤</span> <span class=\"n\">yL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">xR</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 281193847,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651686752
    },
    {
        "content": "<p>They were previously lemmas on <code>&lt;</code> which made sense to have, but now?</p>",
        "id": 281193879,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651686768
    },
    {
        "content": "<p>those kind of lemmas will not play as well with <code>simp</code></p>",
        "id": 281193921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651686784
    },
    {
        "content": "<p>Hmm, you're right</p>",
        "id": 281193943,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651686793
    },
    {
        "content": "<p>I'm wondering if we should have the former at all</p>",
        "id": 281194011,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651686824
    },
    {
        "content": "<p>?</p>",
        "id": 281194071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651686842
    },
    {
        "content": "<p>*latter</p>",
        "id": 281194098,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651686849
    },
    {
        "content": "<p>Those are the definition of <code>&lt;=</code> and <code>&lt;|</code>, of course we want them</p>",
        "id": 281194114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651686863
    },
    {
        "content": "<p>and they make good simp lemmas too</p>",
        "id": 281194169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651686883
    },
    {
        "content": "<p>That's only assuming that we actually have notation for <code>&lt;|</code>, and I'm skeptical of this being a good idea</p>",
        "id": 281194265,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651686928
    },
    {
        "content": "<p>if there was no such notation it would still be exactly as written, just without the notation</p>",
        "id": 281194303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651686947
    },
    {
        "content": "<p>True, but surely it would be easier to just use <code>mk_le_mk</code> and, if needed, <code>push_neg</code>?</p>",
        "id": 281194443,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651686989
    },
    {
        "content": "<p>What's more, this isn't even the form that <code>push_neg</code> gives for the lemma</p>",
        "id": 281194713,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687101
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_not_le_mk</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">≤</span> <span class=\"n\">yL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">xR</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mk_le_mk</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 281194722,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687103
    },
    {
        "content": "<p>That's not a good form at all</p>",
        "id": 281194755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687119
    },
    {
        "content": "<p>I'm not a fan of gratuitous push_neg. These kind of theorems don't really need LEM and the proofs are shorter that way too</p>",
        "id": 281194866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687173
    },
    {
        "content": "<p>I know most people don't care but I occasionally clean up LEM usage in fundamental logic lemmas where possible</p>",
        "id": 281194998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687209
    },
    {
        "content": "<p>The negations here just confuse the tactics by making one variation look \"more complex\" than the other, leading to lots of symmetry breaking</p>",
        "id": 281195262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687290
    },
    {
        "content": "<p>That might be a case for actually having a <code>\\notle</code> relation on games</p>",
        "id": 281195328,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687313
    },
    {
        "content": "<p>I have a slight preference for <code>x &lt;| y</code> over <code>y \\notle x</code> because it puts the variables in the right order</p>",
        "id": 281195567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687401
    },
    {
        "content": "<p>...in fact I think it has to be in that order for the recursive definition to work</p>",
        "id": 281195595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687415
    },
    {
        "content": "<p>because <code>(x &lt;| y, x &lt;= y)</code> is what is defined by recursion</p>",
        "id": 281195699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687452
    },
    {
        "content": "<p>Right</p>",
        "id": 281195760,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687478
    },
    {
        "content": "<p>Still, what kind of annoys me is that we'd be dealing with a really basic relation and have almost no API for it</p>",
        "id": 281195828,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687512
    },
    {
        "content": "<p>why no API?</p>",
        "id": 281195854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687523
    },
    {
        "content": "<p>I mean, that thing I mentioned earlier, that most of the basic results on <code>&lt;|</code> should in fact be basic results of <code>\\notle</code> on preorders</p>",
        "id": 281195978,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687564
    },
    {
        "content": "<p>I'm not quite sure how we could leverage this</p>",
        "id": 281196010,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687578
    },
    {
        "content": "<p>We don't have a typeclass for converse-le-preorders so I wouldn't worry about it</p>",
        "id": 281196173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687641
    },
    {
        "content": "<p>Also, another question</p>",
        "id": 281196324,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687695
    },
    {
        "content": "<p>How should the lemmas about <code>&lt;|</code> be called?</p>",
        "id": 281196337,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687701
    },
    {
        "content": "<p><code>lf</code> = less-fuzzy?</p>",
        "id": 281196387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651687721
    },
    {
        "content": "<p>I like that</p>",
        "id": 281196549,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687794
    },
    {
        "content": "<p>...no, I don't know, I still kinda agree with Yaël that it's silly to define this new symbol for games and nothing else, despite it making sense on any preorder</p>",
        "id": 281197027,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651687960
    },
    {
        "content": "<p>Sure, that's a potential refactor to consider once there is more than 1 example</p>",
        "id": 281197152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688011
    },
    {
        "content": "<p>it would be quite a lot of work and <code>lf</code> would not be nearly as good a name</p>",
        "id": 281197282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281139541\">said</a>:</p>\n<blockquote>\n<p>The mutually recursive definition of <code>&lt;|</code> and <code>&lt;=</code> gives them equal status, even though they are provably negations of each other</p>\n</blockquote>\n<p>I don't agree with this. I think that our simultaneous definition of these symbols is more of an inductive hack. If we really wanted to, we could have defined <code>≤</code> using the standard ZFC definition and just prove that the relation on pairs where entries can be swapped as long as at least one entry decreases is well-founded</p>",
        "id": 281197287,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688052
    },
    {
        "content": "<p>It's just easier not to do that</p>",
        "id": 281197299,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688060
    },
    {
        "content": "<p>I disagree, I would say that <code>x &lt;| y</code> and <code>~(y &lt;= x)</code> are not intensionally equal in the same way that <code>a + b</code> and <code>b + a</code> are not intensionally equal</p>",
        "id": 281197487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688152
    },
    {
        "content": "<p>it is a <em>theorem</em>, proven by induction, that they coincide</p>",
        "id": 281197579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688177
    },
    {
        "content": "<p>The refactor I am talking about for <code>preorder</code> would be to add another field <code>notle</code> and a proof <code>x \\notle y &lt;-&gt; ~(x &lt;= y)</code>, to be able to change the defeq of the <code>notle</code> relation beyond the default one</p>",
        "id": 281197720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688262
    },
    {
        "content": "<p>Why would it need to be a field of <code>preorder</code>? We don't do this for <code>\\ge</code></p>",
        "id": 281197821,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688296
    },
    {
        "content": "<p>because it is changing the defeq</p>",
        "id": 281197851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688313
    },
    {
        "content": "<p>This would be pretty easy to circumvent though</p>",
        "id": 281197908,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688342
    },
    {
        "content": "<p>We could do it for <code>ge</code> as well, if we had more than 0 examples where we want the defeqs to differ</p>",
        "id": 281197926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688351
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">le_not_ge</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span> <span class=\"bp\">×</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- the orderings of the clauses here are carefully chosen so that</span>\n  <span class=\"c1\">--   and.left/or.inl refer to moves by Left, and</span>\n  <span class=\"c1\">--   and.right/or.inr refer to moves by Right.</span>\n<span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">xl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"o\">(</span><span class=\"n\">xL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"o\">⟨</span><span class=\"n\">xl</span><span class=\"o\">,</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"n\">xL</span><span class=\"o\">,</span> <span class=\"n\">xR</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">yR</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"o\">⟨</span><span class=\"n\">xl</span><span class=\"o\">,</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"n\">xL</span><span class=\"o\">,</span> <span class=\"n\">xR</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">yL</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"o\">(</span><span class=\"n\">xR</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">pgame_wf_tac</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"n\">pgame</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">pgame</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- We need a few auxiliary theorems before proving that `(le_not_ge x y).2 ↔ ¬ y ≤ x`.</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_le_mk_aux</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"o\">(</span><span class=\"n\">xL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yR</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">le_not_ge</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_not_le_mk_aux</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">≤</span> <span class=\"n\">yL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">xR</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">le_not_ge</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">le_not_ge_iff_aux</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">le_not_ge</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">IHxl</span> <span class=\"n\">IHxr</span> <span class=\"n\">generalizing</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"n\">IHyl</span> <span class=\"n\">IHyr</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mk_le_mk_aux</span><span class=\"o\">,</span> <span class=\"n\">mk_not_le_mk_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">not_and_distrib</span><span class=\"o\">,</span> <span class=\"n\">not_or_distrib</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">not_exists</span><span class=\"o\">,</span>\n    <span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">or_comm</span><span class=\"o\">,</span> <span class=\"n\">IHxl</span><span class=\"o\">,</span> <span class=\"n\">IHxr</span><span class=\"o\">,</span> <span class=\"n\">IHyl</span><span class=\"o\">,</span> <span class=\"n\">IHyr</span><span class=\"o\">,</span> <span class=\"n\">iff_self</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">le_not_ge_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">le_not_ge</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_not_ge_iff_aux.2</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_le_mk</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"bp\">≤</span> <span class=\"n\">xL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">yR</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mk_le_mk_aux</span><span class=\"o\">,</span> <span class=\"n\">le_not_ge_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mk_not_le_mk</span> <span class=\"o\">{</span><span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">mk</span> <span class=\"n\">yl</span> <span class=\"n\">yr</span> <span class=\"n\">yL</span> <span class=\"n\">yR</span> <span class=\"bp\">≤</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"n\">xl</span> <span class=\"n\">xr</span> <span class=\"n\">xL</span> <span class=\"n\">xR</span> <span class=\"bp\">≤</span> <span class=\"n\">yL</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">xR</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"o\">⟨</span><span class=\"n\">yl</span><span class=\"o\">,</span> <span class=\"n\">yr</span><span class=\"o\">,</span> <span class=\"n\">yL</span><span class=\"o\">,</span> <span class=\"n\">yR</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">le_not_ge_iff</span><span class=\"o\">,</span> <span class=\"n\">mk_not_le_mk_aux</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 281198112,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688429
    },
    {
        "content": "<p>Once you have those last two theorems, there's not really a need to invoke <code>le_not_ge</code> ever again</p>",
        "id": 281198169,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688453
    },
    {
        "content": "<p>So I don't think it's worth adding a new field to <code>preorder</code> for this</p>",
        "id": 281198222,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688476
    },
    {
        "content": "<p>I don't either</p>",
        "id": 281198247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688489
    },
    {
        "content": "<p>I think that <em><code>pgame</code> specifically</em> should have a notle definition</p>",
        "id": 281198299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688516
    },
    {
        "content": "<p>Hmm... I think I'll take your compromise</p>",
        "id": 281198422,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688552
    },
    {
        "content": "<p>If there's ever another instance where we want this separate <code>\\notle</code> definition, then we can take whatever theorems about it we prove here, and generalize those to preorders</p>",
        "id": 281198456,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688573
    },
    {
        "content": "<p>Until then, I'll just make it a definition on <code>pgame</code> specifically</p>",
        "id": 281198488,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688586
    },
    {
        "content": "<p>using the <code>le_not_ge_iff</code> lemma you can pretty easily eliminate <code>&lt;|</code> in any theorem statements if you don't want to see it</p>",
        "id": 281198499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688592
    },
    {
        "content": "<p>Oh and one last thing, what symbol are we going to use then?</p>",
        "id": 281198555,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688623
    },
    {
        "content": "<p>and pretty much the only theorems of interest for these converse-le-preorders are cyclic permutations of <code>le_trans</code></p>",
        "id": 281198582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688641
    },
    {
        "content": "<p>We could use <code>&lt;|</code> or <code>⧏</code> or <code>◁</code></p>",
        "id": 281198666,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688664
    },
    {
        "content": "<p>I think Kevin wants to veto <code>&lt;|</code></p>",
        "id": 281198743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688708
    },
    {
        "content": "<p>I'm not a fan either</p>",
        "id": 281198827,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688761
    },
    {
        "content": "<p>If we want to stick as closely as possible to Conway, we should be using <code>⧏</code></p>",
        "id": 281198893,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688777
    },
    {
        "content": "<p>(it looks kinda cramped in my font, though)</p>",
        "id": 281198914,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688785
    },
    {
        "content": "<p>lgtm</p>",
        "id": 281198916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688786
    },
    {
        "content": "<p>it lines up in my lean font, it's a bit short on zulip</p>",
        "id": 281198977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688818
    },
    {
        "content": "<p>Alright then</p>",
        "id": 281199031,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688845
    },
    {
        "content": "<p>I'll get refactoring</p>",
        "id": 281199035,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688849
    },
    {
        "content": "<p>If we're just going to change <code>&lt;</code> to <code>⧏</code>, then not that many things should be different by the end of this</p>",
        "id": 281199052,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688864
    },
    {
        "content": "<p>Oh, one last thing!</p>",
        "id": 281199166,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688907
    },
    {
        "content": "<p>The <code>&lt;</code> error seems to have propagated to one other file</p>",
        "id": 281199189,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688916
    },
    {
        "content": "<p><code>winner.lean</code></p>",
        "id": 281199193,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688919
    },
    {
        "content": "<p>what error?</p>",
        "id": 281199217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688929
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/bfdwDaKGNIleD5owN3T-uKRt/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bfdwDaKGNIleD5owN3T-uKRt/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bfdwDaKGNIleD5owN3T-uKRt/image.png\"></a></div>",
        "id": 281199237,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688942
    },
    {
        "content": "<p>These two should just be <code>0 &lt; G</code> and <code>G &lt; 0</code> respectively</p>",
        "id": 281199259,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688954
    },
    {
        "content": "<p>And to me it seems like it isn't worth having a separate definition for that?</p>",
        "id": 281199280,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651688965
    },
    {
        "content": "<p>The new definition of <code>lt</code> is this already, right?</p>",
        "id": 281199329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651688990
    },
    {
        "content": "<p><code>x &lt; y &lt;-&gt; x &lt;| y /\\ x &lt;= y</code></p>",
        "id": 281199403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651689008
    },
    {
        "content": "<p>if so I agree this doesn't need separate definition, we don't have <code>pos</code> on preorders</p>",
        "id": 281199504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651689058
    },
    {
        "content": "<p>Alright then</p>",
        "id": 281199575,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651689093
    },
    {
        "content": "<p>For the moment I'll just replace <code>&lt;</code> with <code>⧏</code> in those files, but I'll probably refactor those afterwards</p>",
        "id": 281199628,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651689115
    },
    {
        "content": "<p>it might be worth stuffing the documentation about \"left wins\" and \"right wins\" in terms of positive and negative somewhere though, that's not very obvious</p>",
        "id": 281199672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651689122
    },
    {
        "content": "<p>Ah, this is a more technical issue, but how do you define a new symbol in Lean?</p>",
        "id": 281199874,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651689204
    },
    {
        "content": "<p>I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">⧏</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">le_lf</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>and it tells me something about a missing <code>precedence</code> command</p>",
        "id": 281199918,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651689223
    },
    {
        "content": "<p>put a <code>:50</code> or something after the backticks</p>",
        "id": 281200013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651689249
    },
    {
        "content": "<p>it should probably line up with the numbers from <code>#print &lt;</code></p>",
        "id": 281200058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651689275
    },
    {
        "content": "<p>There goes, thanks!</p>",
        "id": 281200188,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651689349
    },
    {
        "content": "<p>Should I also introduce <code>⧐</code> with a <code>simp</code> lemma <code>x ⧐ y ↔ y ⧏ x</code> or is that not worth it?</p>",
        "id": 281200669,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651689545
    },
    {
        "content": "<p>let's do our best to pretend <code>gt</code> doesn't exist</p>",
        "id": 281201317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651689805
    },
    {
        "content": "<p>Yeah, I don't think it's worth it either</p>",
        "id": 281201320,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651689806
    },
    {
        "content": "<p>Just to be sure, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">⧏</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_lf.1</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_lf</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">⧏</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_lf.2</span>\n</code></pre></div>\n<p>both of these should be <code>simp</code>, right?</p>",
        "id": 281201982,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651690052
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/game/pgame.html#pgame.right_response\">https://leanprover-community.github.io/mathlib_docs/set_theory/game/pgame.html#pgame.right_response</a></p>",
        "id": 281206982,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651692428
    },
    {
        "content": "<p>Do we really need this? Seems pretty useless to me</p>",
        "id": 281206992,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651692435
    },
    {
        "content": "<p>I guess it's a way to prove that x ≤ 0 actually means that Right wins as the second player?</p>",
        "id": 281207107,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651692483
    },
    {
        "content": "<p>I don't see any obvious way to do so, it's more or less true by definition</p>",
        "id": 281211198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651694196
    },
    {
        "content": "<p>Yeah, that's my thought too</p>",
        "id": 281219290,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651698292
    },
    {
        "content": "<p>There's currently a <code>covariant_class_swap_add_lt</code> instance on <code>pgame</code></p>",
        "id": 281222866,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651700225
    },
    {
        "content": "<p>Would it be worth it changing it into a <code>covariant_class_swap_add_lf</code> instance? I don't know if there's any API for covariant relations other than <code>&lt;</code> or <code>≤</code></p>",
        "id": 281222911,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651700248
    },
    {
        "content": "<p>No there is not.</p>",
        "id": 281222982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651700279
    },
    {
        "content": "<p>Could that API exist in the future, though? Surely it would just be a matter of not enforcing <code>has_lt</code> or <code>has_le</code> in those theorems</p>",
        "id": 281223678,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651700640
    },
    {
        "content": "<p>In fact, I'll in some form need the covariantness of <code>\\lf</code> to prove that of <code>&lt;</code></p>",
        "id": 281224934,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651701281
    },
    {
        "content": "<p>Since <code>&lt;</code> is equivalent to <code>\\le</code> and <code>\\lf</code></p>",
        "id": 281224945,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651701288
    },
    {
        "content": "<p>Maybe it could be a theorem instead of an instance for now?</p>",
        "id": 281224963,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651701301
    },
    {
        "content": "<p>Yes, there's no point in making an instance to use it exactly once.</p>",
        "id": 281225147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651701404
    },
    {
        "content": "<p>I mean, it would be nice to have auto-generated <code>add_lf_add</code> and all those other lemmas, but I guess I can prove them myself for now</p>",
        "id": 281226444,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651701989
    },
    {
        "content": "<p>Question</p>",
        "id": 281230772,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651704447
    },
    {
        "content": "<p>How can I use <code>⧏</code> for both <code>pgame</code> and <code>game</code>?</p>",
        "id": 281230782,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651704455
    },
    {
        "content": "<p>Having a <code>local infix</code> is only letting me define it once</p>",
        "id": 281230801,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651704466
    },
    {
        "content": "<p>Are you sure? You can overload notation.</p>",
        "id": 281230921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651704540
    },
    {
        "content": "<p>not local notation</p>",
        "id": 281230935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651704546
    },
    {
        "content": "<p>I would just not import the notation or use a subscript</p>",
        "id": 281230970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651704568
    },
    {
        "content": "<p>I feel like this whole file should just go<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/game/winner.html\">https://leanprover-community.github.io/mathlib_docs/set_theory/game/winner.html</a></p>",
        "id": 281232437,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705418
    },
    {
        "content": "<p>The main definitions are literally just <code>&lt;</code>, <code>&gt;</code>, <code>||</code>, and <code>≈</code></p>",
        "id": 281232447,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705431
    },
    {
        "content": "<p>We really do not need new names for these relations</p>",
        "id": 281232453,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705438
    },
    {
        "content": "<p>I know that it's very bad practice to do more than one big thing in a PR, but if I could just delete that file right now, it would make my <code>lt</code> refactor a smidge easier</p>",
        "id": 281232760,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705644
    },
    {
        "content": "<p>I have no attachment to it. Presumably it is still a leaf node? We may want to have a meta discussion, separated from this subject matter, about removing old leaf nodes.</p>",
        "id": 281232787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651705667
    },
    {
        "content": "<p>A single other file depends on it</p>",
        "id": 281232796,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705679
    },
    {
        "content": "<p><code>nim.lean</code></p>",
        "id": 281232800,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705681
    },
    {
        "content": "<p>Sorry. I think for this refactor you've got to bring it along.</p>",
        "id": 281232817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651705682
    },
    {
        "content": "<p>:(</p>",
        "id": 281232846,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705689
    },
    {
        "content": "<p>Or propose it first.</p>",
        "id": 281232864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651705703
    },
    {
        "content": "<p>It doesn't make sense to kill it without the refactor</p>",
        "id": 281232877,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281232447\">said</a>:</p>\n<blockquote>\n<p>The main definitions are literally just <code>&lt;</code>, <code>&gt;</code>, <code>||</code>, and <code>≈</code></p>\n</blockquote>\n<p>This is only true with the correct definitions of <code>&lt;</code> and <code>&gt;</code></p>",
        "id": 281232889,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705730
    },
    {
        "content": "<p>for this PR it should not be hard to replace them with <code>left_wins G := 0 &lt; G</code> etc and give one line proofs of all the theorems. This will make the deletion an easy sell</p>",
        "id": 281232940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651705771
    },
    {
        "content": "<p>Oh, I see. Okay, let's nuke it.</p>",
        "id": 281232945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651705778
    },
    {
        "content": "<p>in particular, if they <em>aren't</em> one line proofs then you might be missing an API theorem</p>",
        "id": 281233035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651705811
    },
    {
        "content": "<p>Although mario's suggestion is probably even better. :-)</p>",
        "id": 281233039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651705814
    },
    {
        "content": "<p>I am currently missing the <code>||</code> relation</p>",
        "id": 281233070,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705845
    },
    {
        "content": "<p>I don't know if I should define it now that I defined <code>⧏</code>, or if that should come in a subsequent PR</p>",
        "id": 281233096,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651705865
    },
    {
        "content": "<p>I think it makes sense to add, if only to have a place to hang all these winner/loser docs</p>",
        "id": 281233135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651705909
    },
    {
        "content": "<p>Yeah Fox won't be mad if you remove this file. The point was Sprague-Grundy. If you can keep Spraguuuuuuuue-Grundy compiling, cool.</p>",
        "id": 281233826,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651706342
    },
    {
        "content": "<p>As a matter of fact, I got the entire file to one line proofs</p>",
        "id": 281236794,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651708727
    },
    {
        "content": "<p>Often more like 20 character proofs, haha</p>",
        "id": 281236810,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651708734
    },
    {
        "content": "<p>Parallel to: ∥<br>\nUnicode hexadecimal: 0x2225<br>\nIn block: Mathematical Operators</p>\n<p>Double vertical line: ‖<br>\nUnicode hexadecimal: 0x2016<br>\nIn block: General Punctuation</p>\n<p>Musical symbol double barline: 𝄁<br>\nUnicode hexadecimal: 0x1d101<br>\nIn block: Musical Symbols</p>\n<p>The second looks best on my machine in VSCode. (I'm using <a href=\"https://shapecatcher.com/\">https://shapecatcher.com/</a>)</p>\n<p>wow the first is slanted on my phone but vertical on laptop!</p>",
        "id": 281237362,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651709078
    },
    {
        "content": "<p>I feel like the first one might be the one we want? It's the mathematical operator after all</p>",
        "id": 281242947,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651715194
    },
    {
        "content": "<p>the first one is used in mathlib already, for vector norm</p>",
        "id": 281243569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651715927
    },
    {
        "content": "<p>...and the second one means fintype cardinality apparently</p>",
        "id": 281243585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651715972
    },
    {
        "content": "<p>probably it's fine to reuse the symbol</p>",
        "id": 281243654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651716008
    },
    {
        "content": "<p>actually you should not reuse the vector norm symbol, it's not localized (it's a notation typeclass)</p>",
        "id": 281243726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651716067
    },
    {
        "content": "<p>what about a symbol like )( ?</p>",
        "id": 281243778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651716120
    },
    {
        "content": "<p>I don't think the second one (‖) is declared as a notation? <a href=\"https://github.com/leanprover-community/mathlib/blob/f8c303eac93bd0f48dd4c9a98b8f5772af6be0c1/src/data/fintype/basic.lean#L1239\">Here</a> indeed it's used to refer to cardinality, but that's definitely not standard.</p>",
        "id": 281244269,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651716674
    },
    {
        "content": "<p>it's declared as a local notation in several files</p>",
        "id": 281244414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651716855
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/0038a0436f689d37fd3ad00d69d617c338ae6028/src/data/fintype/card_embedding.lean#L17\">https://github.com/leanprover-community/mathlib/blob/0038a0436f689d37fd3ad00d69d617c338ae6028/src/data/fintype/card_embedding.lean#L17</a></p>",
        "id": 281244426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651716885
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13963\">https://github.com/leanprover-community/mathlib/pull/13963</a></p>",
        "id": 281245128,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651717668
    },
    {
        "content": "<p>I've got to say, I don't like the characterisation that we've had the incorrect definition. We've had a perfectly correct definition for a notion that usually has different notation. (And worse, that in some references the notation we used meant something else, although this was not the case for the cited reference.)</p>\n<p>I absolutely agree it warrants fixing, but 1) I'm a bit annoyed as I feel like I'm being told my work on <code>pgame</code> was \"wrong\" (I agree the way I did things was ... not great), and 2) people may decide to misleadingly point at this as an example of a formalised library getting a definition wrong, and both of those are easily avoidable, I hope.</p>",
        "id": 281251798,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651725920
    },
    {
        "content": "<p>In support of Scott's comment, as an outsider to the topic, I was puzzled at the beginning about what it meant that a definition was \"wrong\".  It took me a while to realize that it meant that it did not align with some other arbitrary choice of definition whose notation looked the same.</p>",
        "id": 281252543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651726809
    },
    {
        "content": "<p>I'd say it's worse than that, I couldn't find any source with the previous definition</p>",
        "id": 281252811,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651727122
    },
    {
        "content": "<p>Though perhaps it might be better to say, we used one symbol when we should have used another</p>",
        "id": 281252825,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651727145
    },
    {
        "content": "<p>What do you mean? The previous definition is exactly <code>⧏</code>, but with the symbol <code>&lt;</code> instead of <code>⧏</code>.</p>",
        "id": 281252902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651727169
    },
    {
        "content": "<p>e.g. it exactly matches the definition in ONAG, using the symbol <code>&lt;</code> for his <code>≰</code>.</p>",
        "id": 281252923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651727212
    },
    {
        "content": "<p>Yeah, that</p>",
        "id": 281253372,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651727750
    },
    {
        "content": "<p>We used the wrong symbol, and thought we were deducing results about one symbol when in reality we were deducing results about the other</p>",
        "id": 281253418,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651727775
    },
    {
        "content": "<p>(Sorry, maybe I'm just having a bad day. :-) I'm very glad this is fixed now: certainly your PR is a massive improvement and I'm embarrassed to have not understood this myself earlier.)</p>",
        "id": 281253628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651728004
    },
    {
        "content": "<p>Re notation: the reason I'm anti <code>&lt;|</code> is that specifically within the mathematician community people have said to me how much easier lean code is to read than code in other provers, and this seems like a perfect place to reinforce this: \"oh look they use exactly the same symbol as in the literature\".</p>",
        "id": 281258933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651733491
    },
    {
        "content": "<p>Oh don't worry, I didn't understand this either until I spoke with someone that did know about this and they kept telling me how I was wrong about my inequalities</p>",
        "id": 281301832,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651758847
    },
    {
        "content": "<p>I've learned a lot about games with this refactor</p>",
        "id": 281301871,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651758878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> <span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> <br>\nGood news! <a href=\"https://github.com/leanprover-community/mathlib/compare/surreal_mul_symm'?expand=1#diff-cfb19983c79209e00ac093e670e2db956ca48e00238011a5854479250cbaec67R318\">Surreals now form a <code>linear_ordered_comm_ring</code></a> without <code>sorry</code>!</p>",
        "id": 284966493,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654331101
    },
    {
        "content": "<p>Woooo!</p>",
        "id": 284966501,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654331119
    },
    {
        "content": "<p>I'm unfortunately spread thin by finals at the moment, so I don't know when I'll have time to review this thoroughly. Might be until Wednesday...</p>",
        "id": 284966558,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654331170
    },
    {
        "content": "<p>I'm puzzled by the module docstring saying \"<a href=\"https://github.com/leanprover-community/mathlib/blob/aa7d90bcf730db3bcbe73c23ec2d738268d8fde0/src/set_theory/surreal/basic.lean#L20\">the surreals form a complete ordered field</a>\". I don't think they form a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order\">docs#conditionally_complete_linear_order</a>, because for any increasing sequence with an upper bound, the surreal number with the sequence as left options and the upper bound as the unique right option is still an upper bound but smaller than the given upper bound, so there's no least upper bound. Git traces back to <a href=\"https://github.com/leanprover-community/mathlib/pull/1274\">#1274</a> by <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>.</p>",
        "id": 284991715,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654365273
    },
    {
        "content": "<p>All complete ordered fields are isomorphic to R, no?</p>",
        "id": 284992722,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1654366595
    },
    {
        "content": "<p>Archimedean?</p>",
        "id": 284993872,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654368271
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3292\">#3292</a></p>",
        "id": 284994114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654368676
    },
    {
        "content": "<p>(I'm working on it, the head PR is currently <a href=\"https://github.com/leanprover-community/mathlib/pull/14307\">#14307</a>)</p>",
        "id": 284994131,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654368719
    },
    {
        "content": "<p>It doesn't seem to require it from the sources I see, I guess completeness implies archimedean</p>",
        "id": 284994682,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1654369405
    },
    {
        "content": "<p>(with order, ofc, else p-adics are a counterexample)</p>",
        "id": 284994694,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1654369432
    },
    {
        "content": "<p>Yes - see <a href=\"https://mathoverflow.net/questions/362991/who-first-characterized-the-real-numbers-as-the-unique-complete-ordered-field\">https://mathoverflow.net/questions/362991/who-first-characterized-the-real-numbers-as-the-unique-complete-ordered-field</a>; to paraphrase, if not Archimedean then the set of naturals is bounded above so has a least upper bound; but any upper bound of the natural numbers is not a least upper bound because you can subtract 1 from it.</p>",
        "id": 284995183,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1654370040
    },
    {
        "content": "<p>I think there's the possibility that this is a complete ordered field on a technicality, just like the ordinals are a lattice on a technicality</p>",
        "id": 284996443,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654371669
    },
    {
        "content": "<p>i.e. every <strong>small</strong> (read ZFC) set of surreals has an infimum and supremum</p>",
        "id": 284996450,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654371685
    },
    {
        "content": "<p>Even then, unless I misunderstand something, that docstring shouldn't be there</p>",
        "id": 284996457,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654371708
    },
    {
        "content": "<p>Ah yes, Archimedean is implied by the rest of the hypotheses: thanks for the link!</p>",
        "id": 284997410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654372956
    },
    {
        "content": "<p>The surreals are most certainly not archimedean. The confusion is imprecision in the language -- \"complete\" can mean more than one thing. <a href=\"https://en.wikipedia.org/wiki/Real_number#%22The_complete_ordered_field%22\">Wikipedia</a> says something about the issue.</p>",
        "id": 285000577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654377684
    },
    {
        "content": "<p>As discussed here: <a href=\"https://leanprover-community.github.io/archive/stream/116395-maths/topic/reals.20are.20unique.20complete.20ordered.20field.html#131161921\">https://leanprover-community.github.io/archive/stream/116395-maths/topic/reals.20are.20unique.20complete.20ordered.20field.html#131161921</a></p>",
        "id": 285001065,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654378442
    },
    {
        "content": "<p>As a tenuously-related aside which I'm only making because I can never resist the opportunity to plug this paper, Real Analysis In Reverse (<a href=\"https://arxiv.org/pdf/1204.4483.pdf\">https://arxiv.org/pdf/1204.4483.pdf</a>) uses the surreals (or more precisely those with birthday less than $\\omega_1$) to prove that \"nested bounded closed intervals have nonempty intersection\" does not imply \"Dedekind complete\" in the presence of the other ordered field axioms. It also warns that \"It’s easy for students to appeal to the Archimedean Property without realizing they are doing so, especially because concrete examples of non-Archimedean ordered fields are unfamiliar to them.\"</p>",
        "id": 285004050,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1654383431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/Surreal.20numbers/near/284996443\">said</a>:</p>\n<blockquote>\n<p>I think there's the possibility that this is a complete ordered field on a technicality, just like the ordinals are a lattice on a technicality</p>\n</blockquote>\n<p>Surreals are <em>not</em> a complete ordered field on a technicality, namely that they aren't a set and a field is a set</p>",
        "id": 285014690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654399863
    },
    {
        "content": "<p>If you are in a setting (like lean) where the totality of surreals can be discussed, then they are a field but not they are still not complete because there are (proper) subclasses of the surreals which have no supremum</p>",
        "id": 285014793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654400002
    },
    {
        "content": "<p>it is only if you allow the field itself to be proper but not the subsets considered in the definition of <code>Inf</code> that they appear \"complete\"</p>",
        "id": 285014844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654400054
    },
    {
        "content": "<p>Similarly, the ordinals are a lattice but not a complete lattice unless you bastardize the definition in some way</p>",
        "id": 285014924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654400175
    },
    {
        "content": "<blockquote>\n<p>it is only if you allow the field itself to be proper but not the subsets considered in the definition of Inf that they appear \"complete\"</p>\n</blockquote>\n<p><code>ordinal</code> and <code>cardinal</code> are (large) complete linear orders in this sense; the instances <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.conditionally_complete_linear_order_bot\">docs#ordinal.conditionally_complete_linear_order_bot</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.conditionally_complete_linear_order_bot\">docs#cardinal.conditionally_complete_linear_order_bot</a> say that any (possibly large) subsets with an upper bound has a least upper bound, and separately we know that any small subset has an upper bound.</p>\n<p>In surreals, any small subset still has an upper bound (just take all elements of the subset as left options), but my argument above shows it has a least upper bound iff it has a maximal element, so surreals aren't even a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order\">docs#conditionally_complete_linear_order</a>.</p>",
        "id": 285015054,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654400377
    },
    {
        "content": "<p>This conditional completeness looks the same as <a href=\"https://en.wikipedia.org/wiki/Real_number#Axiomatic_approach\">Dedekind completeness in Wikipedia</a>.</p>",
        "id": 285015203,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654400568
    },
    {
        "content": "<p>I am undetermined whether surreals still can be complete in the uniform space sense (it hasn't become my second nature to unpack definitions via filters), but I feel it's not (even without uniqueness, as in the mathlib definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_space\">docs#complete_space</a>).</p>",
        "id": 285015239,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654400632
    },
    {
        "content": "<p>A good example of a set without a supremum in surreals is the naturals</p>",
        "id": 285015368,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654400779
    },
    {
        "content": "<p>If x is an upper bound, so is x - 1</p>",
        "id": 285015373,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654400795
    },
    {
        "content": "<p>Yeah, and my argument gives {0,1,2, ... | x} is also an upper bound: it's a surreal because all left options are smaller than the unique right option x, because 0,1,2,... is strictly increasing, so an upper bound must be a strict upper bound (with &lt; instead of ≤; same holds for any subset without maximal element). And any surreal is greater than all its left options, so it's an upper bound. Any surreal is less than all its right options, so it's smaller than x.</p>",
        "id": 285015530,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654401083
    },
    {
        "content": "<p><del>{0,1,2, ... | x} might be exactly equal to x - 1 ...</del> No, not necessarily.</p>",
        "id": 285015572,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654401126
    },
    {
        "content": "<p>This discussion has clarified a lot of uneasiness that I always had about which common assumptions characterise the reals up to order isomorphism!  I'm also happy that Archimedean plays a role in this and that \"complete\" also has several meanings!</p>",
        "id": 285019843,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654408562
    },
    {
        "content": "<p>An example \"one level down\" of the size issue which Mario was flagging would be that if you only believed in finite sets, but could imagine the rationals existed as some kind of \"class\" (each element in it can be described using finite sets, and you don't attempt to describe all the elements of Q at once in your language but use predicates instead) then Q is \"complete\" for you because every nonempty subset of Q is finite in your world and hence has a least upper bound.</p>",
        "id": 285026568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654420181
    },
    {
        "content": "<p>It seems well-known that <a href=\"https://en.wikipedia.org/wiki/Surreal_number#Gaps_and_continuity\">the surreals contain gaps</a>, so morally they shouldn't be complete in any sense, and indeed it's also not complete as a uniform space (Cauchy completeness, with uniform structure from the topological group structure with the order topology). This is stated in the abstract of <a href=\"https://arxiv.org/abs/1307.7392v3\">https://arxiv.org/abs/1307.7392v3</a>, and p.18 onwards shows any Cauchy sequence indexed by the class of all ordinals either converge to a surreal or to a Type Ia gap. The mathlib definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_space\">docs#complete_space</a> requires that every Cauchy filter converges to some surreal, which <a href=\"https://math.stackexchange.com/a/104814/12932\">is equivalent to that every Cauchy net (possibly indexed by a proper class) converges</a>, so surreals aren't a complete_space by the mathlib definition. </p>\n<p>However, if we restrict to Cauchy nets indexed by sets, these do converge, because they are all eventually constant! For any net <em>f</em> that is not eventually constant and <em>i</em> an element of the indexing set, <em>{|f j - f k|}_{j,k ≥ i}</em> contains a positive surreal <em>ε_i</em>, and the surreal <em>ε = {0 | ε_i for all i in indexing set}</em> is positive and smaller than all <em>ε_i</em>, i.e. for any <em>i</em>, there are some <em>j, k ≥ i</em> such that <em>|f j - f k| &gt; ε_i &gt; ε</em>, so <em>f</em> is not Cauchy. Therefore, we can say the surreals are \"small-complete\" in the uniform space sense (similar to the \"conditional\" completeness of ordinals and cardinals, and reminiscent of <a href=\"https://ncatlab.org/nlab/show/complete+category#definition\">small-completeness in category theory</a>.</p>",
        "id": 285049064,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654453569
    },
    {
        "content": "<p>Alright, I've got some time to spare!</p>",
        "id": 285156717,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654542604
    },
    {
        "content": "<p>First question, what's up with <code>mul_option</code>? Seems like a very ad-hoc definition and its lemmas are even worse</p>",
        "id": 285157438,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654542911
    },
    {
        "content": "<p>Another complaint I want to get out of the way quickly: I don't think we should borrow the notation from the paper so literally. For someone just reading through <code>mathlib</code>, it's going to seem very out of place that we use <code>P1</code>, <code>P2</code>, and <code>P4</code> as the names of our prepositions (instead of <code>P3</code> for the last one), and <code>thm8</code> isn't going to make any sense either.</p>",
        "id": 285157913,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654543095
    },
    {
        "content": "<p>Oh wait, you do use <code>P3</code> too, nevermind then</p>",
        "id": 285158023,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654543146
    },
    {
        "content": "<p>Minor remark, I don't think you use <code>abel</code> in the hydra file</p>",
        "id": 285158696,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654543456
    },
    {
        "content": "<p>I'll PR the minor and uncontroversial changes from that file now, so that the final diff is smaller</p>",
        "id": 285158747,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654543488
    },
    {
        "content": "<p>Reading through more of the PR, I think I see what purpose <code>mul_option</code> plays. I guess it can stay, but it should either be made into a private, auxiliary definition, or if it has any potential of being useful outside of the surreal multiplication proof, it should have a good docstring explaining how that is</p>",
        "id": 285159795,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654543928
    },
    {
        "content": "<p>I think the <code>left_moves_mul_iff</code> and <code>right_moves_mul_iff</code> lemmas should be made into induction principles rather than equivalences, kind of how I did on <a href=\"https://github.com/leanprover-community/mathlib/pull/14345\">#14345</a>. Also, it would be nice if the theorem names made reference to the fact you're working with games and not pre-games.</p>",
        "id": 285159950,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654544022
    },
    {
        "content": "<p>I don't think there's a need for <code>le_of_forall_lt</code>. The lemmas <code>le_of_forall_lf</code> and <code>lt.lf</code> should get you there much more easily.</p>",
        "id": 285160138,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654544121
    },
    {
        "content": "<p>I wonder if <code>is_option_neg</code> would be better stated as <code>: is_option (-x) (-y) ↔ is_option x y</code>. What's the general strategy for these lemmas on negations where you can write it both ways? Surely the rest of mathlib has some tips here</p>",
        "id": 285160381,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654544230
    },
    {
        "content": "<p>I think your proposal of making <code>numeric</code> into a set should be its own separate PR. I'll give you the chance to do it, unless you want me to do it for you</p>",
        "id": 285160512,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654544290
    },
    {
        "content": "<p>Minor typo: \"because we needs show P1, P2...\"</p>",
        "id": 285160742,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654544420
    },
    {
        "content": "<p>Thanks for taking a look! I just pushed further cleanup including docstring for mul_option. I'll address other comments later tonight if you haven't figured them out by then.</p>",
        "id": 285160949,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654544540
    },
    {
        "content": "<p>I was just about to say, the rest of the PR looks very very clean. It's amazing you managed to organize such a complicated statement in such a clean way!</p>",
        "id": 285161057,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654544600
    },
    {
        "content": "<blockquote>\n<p>Another complaint I want to get out of the way quickly: I don't think we should borrow the notation from the paper so literally. For someone just reading through mathlib, it's going to seem very out of place that we use P1, P2, and P4 as the names of our prepositions (instead of P3 for the last one), and thm8 isn't going to make any sense either.</p>\n</blockquote>\n<p>With a detailed section docstring, I guess this should be okay? When working on a hard proof, you don't want to write very long names that are fully descriptive. Enclosing these lemmas/defs not supposed to be used elsewhere in a arcane namespace is enough to prevent clashing with these short names. Final results ready for consumption are extracted to the <code>numeric</code> namespace, like <code>mul_pos</code> (basically P3), <code>mul_congr_left</code> (P2), and <code>mul</code> (P1).</p>\n<blockquote>\n<p>I don't think there's a need for le_of_forall_lt. The lemmas le_of_forall_lf and lt.lf should get you there much more easily.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_forall_lt\">docs#le_of_forall_lt</a> already exists and takes the extraneous <code>numeric</code> hypotheses, so I'm just removing those hypotheses and move it to <code>game/pgame</code>.</p>\n<blockquote>\n<p>I wonder if is_option_neg would be better stated as : <code>is_option (-x) (-y) ↔ is_option x y</code>.</p>\n</blockquote>\n<p>It seems it's easier to use this way. You might experiment with the other way and see what it takes to fix everything. When making decisions about forms of lemmas (e.g. whether to take quotient into <code>game</code> or not, e.g. in P2), I chose the form that makes the most proofs the shortest.</p>\n<blockquote>\n<p>I think your proposal of making <code>numeric</code> into a set should be its own separate PR. I'll give you the chance to do it, unless you want me to do it for you</p>\n</blockquote>\n<p>It's already done in this branch. If uncontroversial (I assume), might just go into mathlib with the same PR.</p>\n<p>Regarding <code>mul_option</code>, it would be easier to show <code>left/right_moves_mul_iff</code> if we first prove the lemmas that the left options of the second kind/right options of both kinds are equivalent to (possibly negation of) <code>mul_option</code>s.</p>",
        "id": 285182037,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654555128
    },
    {
        "content": "<p>Alright, you've sold me on the P1 and such names, after all these are just auxiliary constructions</p>",
        "id": 285184835,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654556920
    },
    {
        "content": "<p>I still think <code>thm8</code> is a bad namespace name</p>",
        "id": 285184853,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654556939
    },
    {
        "content": "<p>Why not something more descriptive like <code>surreal_mul</code>? Not like we're going to use this namespace much anyways</p>",
        "id": 285184885,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654556983
    },
    {
        "content": "<p>As for <code>le_of_forall_lt</code>, I remember why I added it now. It makes working with surreals a tad easier. The lemma can and should stay, I'll move and golf it later today</p>",
        "id": 285185011,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654557068
    },
    {
        "content": "<p>I do still think <code>numeric</code> turning into a set should be a separate PR, since it has a very different aim and scope to the rest of this</p>",
        "id": 285185158,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654557164
    },
    {
        "content": "<p>And for <code>mul_option</code>, can you describe what the idea is? Want to make sure we're on the same track here</p>",
        "id": 285185232,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654557225
    },
    {
        "content": "<p><code>mul_option</code> is  what makes the main idea (of exploiting symmetry) possible; because all left/right options of the surreal product are of the same form, whenever we want to prove a statement about those options, we can do it uniformly, by applying the same lemma. For example, the proof of P1 consists of <a href=\"https://github.com/leanprover-community/mathlib/blob/e083869144e73001f82be042085da209e0c001cd/src/set_theory/surreal/basic.lean#L457-L461\">four applications of <code>mul_option_lt</code></a>, the proof of P2 consists of <a href=\"https://github.com/leanprover-community/mathlib/blob/e083869144e73001f82be042085da209e0c001cd/src/set_theory/surreal/basic.lean#L549-L554\">four applications of <code>mul_option_lt_mul_of_equiv</code></a>, and the proof of P4 also requires <a href=\"https://github.com/leanprover-community/mathlib/blob/e083869144e73001f82be042085da209e0c001cd/src/set_theory/surreal/basic.lean#L618-L619\">four statements of the form <code>mul_options_lt_mul</code></a>.<br>\nI envision that <code>mul_option</code> might also be used to golf some existing proofs.</p>\n<p>Will be back in 1.5-2 hours.</p>",
        "id": 285186626,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654558465
    },
    {
        "content": "<p>Alright I've renamed <code>thm8</code> to <code>surreal_mul</code> ... and opened <a href=\"https://github.com/leanprover-community/mathlib/pull/14585\">#14585</a> from <a href=\"https://github.com/leanprover-community/mathlib/tree/surreal_set\">branch#surreal_set</a> (it also does some other stuff now).</p>",
        "id": 285196082,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654568481
    },
    {
        "content": "<p>I'll attempt to redefine <code>mul</code> in terms of <code>mul_option</code>, see if that makes anything simpler</p>",
        "id": 289231496,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657564188
    },
    {
        "content": "<p>I imagine we'll have to <code>unfold</code> it to prove all the basic theorems, but it simplifies the surreal multiplication proof, then it should be a net gain</p>",
        "id": 289231620,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657564234
    },
    {
        "content": "<p>By the way, I've taken many of the todos and improvements in your branch and PR'd them separately</p>",
        "id": 289231825,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657564330
    }
]