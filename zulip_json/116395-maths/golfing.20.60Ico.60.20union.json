[
    {
        "content": "<p>I have the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I know how to prove this using lots of <code>by_cases</code> and <code>Ico_union_Ico</code>. Is there any easier way?</p>",
        "id": 204983674,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595643933
    },
    {
        "content": "<p>Here it is for decidable linear orders. I think <code>Ico_union_Ico</code> is the most general lemma that \"merges\" the union of two <code>Ico</code>s (I do have some nonterminal simps in my proof).<br>\nAfter doing all this, I'm not sure if this was actually easier than doing it directly, but <code>Ico_union_Ico</code> is probably also useful for a bunch of other things.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Ico_union_Ico&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Ico_subset_Ico</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">assumption</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">),</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset_union_left</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Ico_subset_Ico</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Ico_union_Ico</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h3</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">h4</span> <span class=\"n\">h4</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">h5</span> <span class=\"n\">h5</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">h6</span> <span class=\"n\">h6</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h5</span><span class=\"o\">,</span> <span class=\"n\">h6</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Ico_union_Ico&#39;</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">union_eq_self_of_subset_right</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">Ico_subset_Ico</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">union_eq_self_of_subset_left</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">Ico_subset_Ico</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">union_comm</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">Ico_union_Ico&#39;</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n     <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">Ico_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Ico_union_Ico_same</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Ico_union_Ico</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ico_union_Ico_same</span><span class=\"o\">,</span> <span class=\"n\">Ico_union_Ico</span><span class=\"o\">,</span> <span class=\"n\">union_comm</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">Ico_union_Ico_same</span><span class=\"o\">,</span> <span class=\"n\">Ico_union_Ico</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">max_left_comm</span><span class=\"o\">,</span> <span class=\"n\">min_left_comm</span><span class=\"o\">,</span> <span class=\"n\">min_comm</span><span class=\"o\">,</span> <span class=\"n\">max_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204993163,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595663225
    },
    {
        "content": "<p>I think the proof should be: WLOG a&lt;=b&lt;=c; linarith.</p>",
        "id": 204994189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595664949
    },
    {
        "content": "<p>The theorem statement is S3-invariant.</p>",
        "id": 204994238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595664987
    },
    {
        "content": "<p>Aah I see, you still have to do a case split on X&lt;b</p>",
        "id": 204994772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595666118
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Ico_union_Ico</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">min</span> <span class=\"n\">max</span> <span class=\"n\">Ico</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- split_ifs at * leads to a weird state with multiple copies of variables :-(</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">}},</span>\n  <span class=\"c1\">-- 144 goals at this point</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h3</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h4</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"c1\">-- two left</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">by_cases</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  abcdx: ℝ</span>\n<span class=\"cm\">h: a ≤ b</span>\n<span class=\"cm\">h_1: c ≤ d</span>\n<span class=\"cm\">h1: a ≤ d</span>\n<span class=\"cm\">h_2: c ≤ d</span>\n<span class=\"cm\">h2: c ≤ b</span>\n<span class=\"cm\">h_3: ¬a ≤ c</span>\n<span class=\"cm\">h3: c ≤ x</span>\n<span class=\"cm\">h_4: ¬b ≤ d</span>\n<span class=\"cm\">h4: x &lt; b</span>\n<span class=\"cm\">h5: x &lt; b</span>\n<span class=\"cm\">⊢ x ∈ {x : ℝ | a ≤ x ∧ x &lt; b} ∪ {x : ℝ | c ≤ x ∧ x &lt; d}</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>If you do <code>split_ifs at *</code> you can end up with five variables called a sometimes. I was using semicolons but  all_goals is clearer. I got from 1 goal to 160 and then back down to 1 but I didn't quite finish and now I have to go :-/ Do I need one more case split? Why do I need case splits? Is there something that linarith doesn't know? Would like to diagnose but have family duties</p>",
        "id": 204996229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595668548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what's the maths proof that isn't \"draw a picture\"?</p>",
        "id": 204996359,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595668696
    },
    {
        "content": "<p>I just posted it: get the tactics to draw the picture</p>",
        "id": 204996459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595668910
    },
    {
        "content": "<p>Why can't I close my last goal? c&lt;a&lt;=d&lt;b</p>",
        "id": 204997401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595670751
    },
    {
        "content": "<p>Because no hammer?<br>\n<a href=\"/user_uploads/3121/KTTOYzmfydAWNUIosqE79Zuj/Screen-Shot-2020-07-25-at-13.01.42.png\">Screen-Shot-2020-07-25-at-13.01.42.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KTTOYzmfydAWNUIosqE79Zuj/Screen-Shot-2020-07-25-at-13.01.42.png\" title=\"Screen-Shot-2020-07-25-at-13.01.42.png\"><img src=\"/user_uploads/3121/KTTOYzmfydAWNUIosqE79Zuj/Screen-Shot-2020-07-25-at-13.01.42.png\"></a></div>",
        "id": 204999538,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595674953
    },
    {
        "content": "<p>(In turn, because excruciatingly low Lean 3 metaprogramming framework.)</p>",
        "id": 204999547,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595674985
    },
    {
        "content": "<p>Yeah that's the correct proof</p>",
        "id": 205000097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676153
    },
    {
        "content": "<p>\"It's obvious\"</p>",
        "id": 205000100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595676165
    },
    {
        "content": "<p>Yes, we do miss sledgehammer in Lean.<br>\nHowever, many of your conjunctions should be disjunctions: you only know</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 205009947,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595693373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span></p>",
        "id": 205009949,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595693388
    },
    {
        "content": "<p>Oh sorry, you responded to Kevin, you were not golfing my lemma. My bad.</p>",
        "id": 205010010,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595693459
    },
    {
        "content": "<p>Does sledgehammer solve the complete lemma by itself?</p>",
        "id": 205010026,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595693495
    },
    {
        "content": "<p>The screenshot suggests we miss <code>auto</code> or <code>force</code>, not really sledgehammer (unless you consider these to be part of sledgehammer).</p>",
        "id": 205010470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595694196
    },
    {
        "content": "<p>I came up with the following (for a <code>decidable_linear_order</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Ico_union_Ico_union_Ico_cycle</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">iff_def</span><span class=\"o\">,</span> <span class=\"n\">or_imp_distrib</span><span class=\"o\">,</span> <span class=\"n\">lt_or_le</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">or_assoc</span><span class=\"o\">,</span> <span class=\"n\">or_comm</span><span class=\"o\">,</span> <span class=\"n\">lt_or_le</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 205012274,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595696851
    },
    {
        "content": "<p>It would be really nice to have a tactic doing this is a pretty general context.</p>",
        "id": 205012498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595697133
    },
    {
        "content": "<p>@Floris: I can't test easily without knowing what <code>Ico</code> is.</p>",
        "id": 205015135,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595701005
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Ico/src\">src#set.Ico</a></p>",
        "id": 205015339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595701232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> another proof is possible with Isabelle's <code>simp</code> + <code>linarith</code>.</p>",
        "id": 205015598,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595701530
    },
    {
        "content": "<p>Here's a more basic proof along the lines of floris's first proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Ico_union_Ico</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Ico_subset_Ico</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"bp\">⟩;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h3</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h4</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">by_contra</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">h5</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">not_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_min</span> <span class=\"n\">h6</span> <span class=\"n\">h4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">max_le</span> <span class=\"n\">h3</span> <span class=\"n\">h5</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">not_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_min</span> <span class=\"n\">h5</span> <span class=\"n\">h4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">max_le</span> <span class=\"n\">h3</span> <span class=\"n\">h6</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I tried <code>linarith</code> on the last two goals but it didn't work, does it not do proofs in pure inequality structures?</p>",
        "id": 205016730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595703065
    },
    {
        "content": "<p>Golfed:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Ico_Ico_Ico</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">finish</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">lt_of_le_of_lt</span><span class=\"o\">,</span> <span class=\"n\">lt_of_lt_of_le</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">max_ematch_rounds</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>(Please don't run the profiler on this.)</p>",
        "id": 205017775,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595704659
    },
    {
        "content": "<p>Slightly faster (five seconds):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Ico_Ico_Ico</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">super</span> <span class=\"k\">with</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">le_or_lt</span> <span class=\"o\">{</span><span class=\"n\">timeout</span> <span class=\"o\">:=</span> <span class=\"mi\">50000</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>This should be acceptably fast in <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span>.</p>",
        "id": 205019138,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595706735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121058\">Jasmin Blanchette</span> <a href=\"#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/205015598\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> another proof is possible with Isabelle's <code>simp</code> + <code>linarith</code>.</p>\n</blockquote>\n<p>We want all of this <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 205021344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595710612
    },
    {
        "content": "<p>Note that we can't use Lean <code>linarith</code> because we have only <code>(decidable_)linear_order</code>, no <code>ordered_field</code>.</p>",
        "id": 205027499,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595721517
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> what does Isabelle say in this context (<code>linear_order</code> only)?</p>",
        "id": 205027506,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595721574
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">auto_is_strong</span><span class=\"o\">:</span>\n  <span class=\"n\">fixes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"bp\">::</span><span class=\"s2\">&quot;&#39;a::linorder&quot;</span>\n  <span class=\"n\">shows</span> <span class=\"s2\">&quot;{a ..&lt; b} ∪ {b ..&lt; c} ∪ {c ..&lt; a} = {b ..&lt; a} ∪ {c ..&lt; b} ∪ {a ..&lt; c}&quot;</span>\n<span class=\"k\">by</span> <span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 205040715,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595748819
    },
    {
        "content": "<p>(takes less than 1/10s)</p>",
        "id": 205040721,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595748840
    },
    {
        "content": "<p>I guess <code>auto</code> will use some <code>simp</code> lemmas that will depend on the order of the points, then split automatically on case disjunction, then use some version of linarith that works in linear orders, but I don't know how to ask details about the proof.</p>",
        "id": 205040815,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595749019
    },
    {
        "content": "<p>In fact, I don't think it uses any fancy version of linarith. Probably it only applies <code>lt_of_le</code>, <code>lt_trans</code> a few times (at most 5, say), see all the consequences it gets from this, and then sees if the goal is in there (but in a more efficient way called a tableau prover). Essentially what Gabriel did with its <code>super</code> invocation, in fact. Except that it is really fast in Isabelle, and completely automatic.</p>",
        "id": 205041529,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595750428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I hope you are paying attention. ;)</p>",
        "id": 205042340,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595751993
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hbc</span> <span class=\"n\">hcb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">),</span>\n      <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hac</span> <span class=\"n\">hca</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n        <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">union_comm</span><span class=\"o\">,</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hac</span> <span class=\"n\">hcb</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n        <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">union_comm</span><span class=\"o\">,</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hca</span> <span class=\"n\">hab</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hac</span> <span class=\"n\">hca</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n        <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hba</span> <span class=\"n\">hac</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hba</span><span class=\"o\">,</span>\n        <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hbc</span> <span class=\"n\">hca</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"n\">hba</span><span class=\"o\">,</span> <span class=\"n\">Ico_eq_empty</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hcb</span> <span class=\"n\">hba</span><span class=\"o\">),</span>\n      <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">,</span> <span class=\"n\">union_comm</span><span class=\"o\">,</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hcb</span> <span class=\"n\">hba</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205042411,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595752154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/204983674\">said</a>:</p>\n<blockquote>\n<p>I know how to prove this using lots of <code>by_cases</code> and <code>Ico_union_Ico</code>. Is there any easier way?</p>\n</blockquote>",
        "id": 205042419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595752196
    },
    {
        "content": "<p>So what is <code>auto</code>?</p>",
        "id": 205042463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595752245
    },
    {
        "content": "<p>From <a href=\"https://people.mpi-inf.mpg.de/~jblanche/frocos2011-dis-proof.pdf\">https://people.mpi-inf.mpg.de/~jblanche/frocos2011-dis-proof.pdf</a>:</p>\n<p>On the user level, the simplifier is eclipsed by auto, a proof method that interleaves simplification with a small amount of proof search. It is impossible to describe suc-cinctly what auto does due to its heuristic, ad hoc nature. Its great strength is its ability to discharge the easy parts of a goal and leave the user with the more difficult ones. This helps the user to quickly focus on the core of a problem.Strengthened versions of auto perform more sophisticated proof search, while still interleaving it with simplification. The search is based on tableau methods [39]. These methods are often useful, but since search is involved, not only are they slower than the simplifier and auto, they are endgame provers that do not provide any hints when they fail to prove the goal</p>\n<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> , do you know of a reference describing a little bit more of the internals of <code>auto</code>? I think I miss it in Lean even more than sledgehammer...</p>",
        "id": 205043409,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595754165
    },
    {
        "content": "<p>I've read descriptions of <code>auto</code> like that several times before and it's indistinguishable from \"auto is magic\"</p>",
        "id": 205043624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595754620
    },
    {
        "content": "<p>and as a user it also is difficult to demystify by watching it work</p>",
        "id": 205043635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595754676
    },
    {
        "content": "<p>Apparently (see the code at <a href=\"http://isabelle.in.tum.de/repos/isabelle/file/f3e1144a1cec/src/Provers/clasimp.ML\">http://isabelle.in.tum.de/repos/isabelle/file/f3e1144a1cec/src/Provers/clasimp.ML</a>), it combines blast (<a href=\"https://www.cl.cam.ac.uk/~lp15/papers/Isabelle/blast.pdf\">https://www.cl.cam.ac.uk/~lp15/papers/Isabelle/blast.pdf</a>) with the simplifier.</p>",
        "id": 205044282,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595755939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/205043624\">said</a>:</p>\n<blockquote>\n<p>I've read descriptions of <code>auto</code> like that several times before and it's indistinguishable from \"auto is magic\"</p>\n</blockquote>\n<p>This sounds like the holy grail of interactive theorem proving: a tactic that proves obvious goals without any need to understand how it works.</p>",
        "id": 205044731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595756769
    },
    {
        "content": "<p>I generally have a bad experience with \"magic\" tactics. If it actually solves all goals I care about, well that's great, but that's also a pipe dream. Unless I understand the failure modes, I won't be able to use it effectively</p>",
        "id": 205044791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595756892
    },
    {
        "content": "<p>I remember working in isabelle during a tutorial, this was my number one complaint - everything was \"by auto\" and I didn't even understand what the syntax of tactic proofs was (and of course I can't ask isabelle to show me the proof either). It was very unsatisfying</p>",
        "id": 205044806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595756998
    },
    {
        "content": "<p><code>auto</code> isn't that magic. It's really simplifier + some intro and elim rules, some applied aggressively, some not (with backtracking). From its output, which is similar to the simplifier's except that you can get multiple subgols, you can usually tell \"oh, I forgot to register commutativity of <code>foo</code> as a <code>simp</code> rule\".</p>",
        "id": 205044848,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595757013
    },
    {
        "content": "<p><code>auto</code> is not a closing tactic: it takes care of what it can, and leaves you with the remaining goals. And you can tweak it like <code>(auto simp: foo bar intro: foo' bar')</code> telling it to add <code>foo</code> and <code>bar</code> to the simpset during this run, and to apply the lemmas <code>foo'</code> and <code>bar'</code> whenever it can. When you are used to it, it is incredibly efficient.</p>",
        "id": 205044850,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595757019
    },
    {
        "content": "<p>But indeed, it would be nice if <code>auto</code> had some detailed output, or at least existed in some <code>squeeze_auto</code> fashion.</p>",
        "id": 205044858,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595757068
    },
    {
        "content": "<p>And if <code>auto</code> were ever reproduced in Lean, it would have to have better output.</p>",
        "id": 205044866,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595757110
    },
    {
        "content": "<p>As for the reference: I'm not aware of any.</p>",
        "id": 205044869,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595757120
    },
    {
        "content": "<p>how important is heuristic instantiation for <code>auto</code>?</p>",
        "id": 205044932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595757192
    },
    {
        "content": "<p>Does it differ in any important way from <code>tidy</code>? If it's just \"case on or, split on and, simp\" then <code>tidy</code> does that already</p>",
        "id": 205044982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595757252
    },
    {
        "content": "<p><code>auto</code> does backtracking.</p>",
        "id": 205045011,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595757356
    },
    {
        "content": "<p>what do you get in an <code>auto</code> failure if it backtracks?</p>",
        "id": 205045063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595757451
    },
    {
        "content": "<p>Auto does several things:</p>\n<ul>\n<li>it applies the simplifier (always).</li>\n<li>there are some lemmas that it will always apply if they make sense. No backtracking involved. Typically you are left with several subgoals afterwards.</li>\n<li>there are somme lemmas that it will apply if after applying them it is able to prove the goal (or the part of the goal it is working on). Here backtracking happens.</li>\n</ul>\n<p>This means that on some subgoals it will try to find a proof and if it doesn't it will just leave you the subgoal untouched. Other subgoals will be solved thanks to backtracking and proof search. Typically, in the end you will just be left with the nontrivial remaining subgoals, a.k.a., the interesting part of the proof.</p>",
        "id": 205045709,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595758544
    },
    {
        "content": "<p>(NB: this is what I understood from playing quite some time with Isabelle, I have never looked at auto's inner workings)</p>",
        "id": 205045765,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595758647
    },
    {
        "content": "<p>then how do you do all that in 1/10 s?</p>",
        "id": 205045833,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595758751
    },
    {
        "content": "<p>That's Isabelle and simple type theory (no unification, no implicit parameters, and so on).</p>",
        "id": 205045884,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595758807
    },
    {
        "content": "<p>so what are intro and elim rules and how do they contribute to that overall structure?</p>",
        "id": 205046112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595759211
    },
    {
        "content": "<p>I understand that these have to be annotated in the library, yes?</p>",
        "id": 205046123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595759234
    },
    {
        "content": "<p>Yes. You have <code>intro!</code> lemmas (i.e., lemmas tagged with this attribute in the library), which are lemmas that auto should always apply when they make sense, and <code>intro</code> (or <code>intro?</code>) lemmas that will only be applied in the middle of a proof search process with backtracking. And elim I never really understood :-)</p>",
        "id": 205046204,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595759382
    },
    {
        "content": "<p>Note that the <code>intro!</code> lemmas are not equivalences in general, so maybe a statement that was provable is not provable any more after applying <code>auto</code>. But when a lemma is the right thing to do like 95% of the time, it is a good idea to mark it at <code>intro!</code> (and of course the intro set can be tweaked in an invocation of auto).</p>",
        "id": 205046313,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595759523
    },
    {
        "content": "<p>Does <code>simplify</code> have its own annotation e.g. <code>simp</code>? Or does it reuse <code>intro</code> and <code>elim</code> in some way</p>",
        "id": 205046351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595759628
    },
    {
        "content": "<p>You also have <code>simp</code> tags, yes. You have 3 different kinds of lemmas, the simp ones, the intro ones, and the elim ones.</p>",
        "id": 205046421,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595759757
    },
    {
        "content": "<p>Lean also has <code>intro</code> and <code>intro!</code> attributes, but no one knows what they do :)</p>",
        "id": 205046461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595759799
    },
    {
        "content": "<p>Probably they don't do anything for now because we don't have auto, but they have been planned a long way ahead!</p>",
        "id": 205046662,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595760238
    },
    {
        "content": "<p>That's not true.</p>",
        "id": 205046700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595760246
    },
    {
        "content": "<p>I know what they do.</p>",
        "id": 205046705,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595760260
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/backward.lean\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/backward.lean</a></p>",
        "id": 205046725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595760318
    },
    {
        "content": "<p>we should give <code>back_chaining</code> an interactive front end and try using it</p>",
        "id": 205046776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760392
    },
    {
        "content": "<p>Is it like <code>apply_rules</code>?</p>",
        "id": 205046791,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595760445
    },
    {
        "content": "<p>pretty sure</p>",
        "id": 205046794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760452
    },
    {
        "content": "<p>Yes, it's Leo's version of apply_rules.</p>",
        "id": 205046798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595760461
    },
    {
        "content": "<p>But it's clearly an experiment that was mostly abandonned.</p>",
        "id": 205046838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595760483
    },
    {
        "content": "<p>does it do things?</p>",
        "id": 205046841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760499
    },
    {
        "content": "<p>I've done <code>apply_rules</code> because I was longing for auto and I couldn't do anything smarter, but I'm pretty sure Leo's version is much better!</p>",
        "id": 205046848,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595760519
    },
    {
        "content": "<p>the problem with relying on leo's tactics is that they don't get maintenance because no one knows the code</p>",
        "id": 205046859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760553
    },
    {
        "content": "<p>the smt/eblast stuff died for basically that reason</p>",
        "id": 205046862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760575
    },
    {
        "content": "<p>honestly <code>simp</code> has held up pretty well all things considered</p>",
        "id": 205046913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760649
    },
    {
        "content": "<p>but if you are okay with using them as is then I don't see why we can't give a nice front end to the tactic and see if it's any good</p>",
        "id": 205046964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760740
    },
    {
        "content": "<p>It passes the basic test:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"err\">⊔</span> <span class=\"n\">n</span> <span class=\"err\">⊔</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">le_sup_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"err\">⊔</span> <span class=\"n\">n</span> <span class=\"err\">⊔</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">le_sup_left_of_le</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">le_refl</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_const</span> <span class=\"bp\">&gt;&gt;=</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">back_chaining_using</span>\n</code></pre></div>",
        "id": 205047082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760968
    },
    {
        "content": "<p>we don't need more powerful tactics; we need more basic tactics and more creative proofs:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl&#39;</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">subset_union_of_subset_left</span><span class=\"o\">,</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">subset_union_of_subset_right</span><span class=\"o\">,</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">}}]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unions</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[{</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span><span class=\"bp\">;</span> <span class=\"n\">unions</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">unions&#39;</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">(</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">union_subset_union</span> <span class=\"o\">(</span><span class=\"n\">union_subset_union</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">unions</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">union_subset_union</span> <span class=\"o\">(</span><span class=\"n\">union_subset_union</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">unions</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 205047162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595761165
    },
    {
        "content": "<p>turns out Lean is pretty smart:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl&#39;</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">subset_union_of_subset_left</span><span class=\"o\">,</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">subset_union_of_subset_right</span><span class=\"o\">,</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">}}]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unions</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[{</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span><span class=\"bp\">;</span> <span class=\"n\">unions</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">unions&#39;</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">(</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">union_subset_union</span> <span class=\"o\">(</span><span class=\"n\">union_subset_union</span>\n    <span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"n\">Ico_subset_Ico_union_Ico</span><span class=\"o\">)</span> <span class=\"n\">Ico_subset_Ico_union_Ico</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">unions</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">union_subset_union</span> <span class=\"o\">(</span><span class=\"n\">union_subset_union</span>\n    <span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"n\">Ico_subset_Ico_union_Ico</span><span class=\"o\">)</span> <span class=\"n\">Ico_subset_Ico_union_Ico</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">unions</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 205047484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595761768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/205047162\">said</a>:</p>\n<blockquote>\n<p>we don't need more powerful tactics</p>\n</blockquote>\n<p>Come on Kenny! Would you complain if you had a tactic <code>auto</code> which could close this lemma with <code>by auto</code> in 1/10s?</p>",
        "id": 205048055,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595762694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/205046776\">said</a>:</p>\n<blockquote>\n<p>we should give <code>back_chaining</code> an interactive front end and try using it</p>\n</blockquote>\n<p>I think <code>auto</code> would be great to have.  Note that <code>back_chaining</code> only does a third of auto: namely applying the \"intro\" rules.  My gut feeling is that most of the work of creating a Lean version of <code>auto</code> would consist of judiciously adding <code>intro</code> and <code>elim</code> attributes.  These sets require just as much care, effort, and curation as the simp set.</p>",
        "id": 205048414,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595763346
    },
    {
        "content": "<p>It actually has a bit of the other parts of <code>auto</code> as well, because the core tactic also includes a <code>pre_tactic</code> and <code>leaf_tactic</code> for interoperating with the backtracking search. If you put in <code>simp</code> as the <code>pre_tactic</code> it seems like you've got 2/3 of <code>auto</code></p>",
        "id": 205048519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595763484
    },
    {
        "content": "<p>I definitely agree that it is important for us to start curating the <code>intro</code> set</p>",
        "id": 205048535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595763535
    },
    {
        "content": "<p>I suspect that there is a chicken and egg problem with getting a good <code>intro</code> set vs getting the <code>auto</code> tactic working</p>",
        "id": 205048549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595763585
    },
    {
        "content": "<p>Don't forget the <code>elim</code> set.</p>",
        "id": 205048594,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595763624
    },
    {
        "content": "<p>Do you know what that is? Sebastien didn't above</p>",
        "id": 205048599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595763646
    },
    {
        "content": "<p><code>intro</code> lemmas are used with <code>apply</code>, i.e. they only apply to the target of the goal.  <code>elim</code> lemmas are similar to <code>cases</code>, they apply to the hypotheses.</p>",
        "id": 205048614,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595763720
    },
    {
        "content": "<p>E.g., if you have an assumption <code>∃ x, p x</code> then you want to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists.elim\">docs#exists.elim</a></p>",
        "id": 205048658,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595763766
    },
    {
        "content": "<p>do you think we should use curated lemmas for that? Unlike isabelle we get most of that for free by using <code>cases</code></p>",
        "id": 205048664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595763782
    },
    {
        "content": "<p>but maybe there are things like custom recursors we should be applying instead</p>",
        "id": 205048669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595763800
    },
    {
        "content": "<p>do you know examples of elim rules that are not just subsets of <code>cases</code> behavior?</p>",
        "id": 205048681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595763833
    },
    {
        "content": "<p>I'd consider using the <code>intro!</code> attribute globally for a unidirectional rule (i.e., one that doesn't preserve provability) a bug. The whole point is that these \"safe\" rules should be applied exhaustively, like <code>simp</code>s, without loss of generality.</p>",
        "id": 205055932,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595776820
    },
    {
        "content": "<p>An example of a unidirectional <code>intro!</code> rule would be something like closure for division like <code>x \\in real /\\ y \\in real /\\ y != 0 -&gt; x / y \\in real</code> for a hypothetical typing predicate for real division (maybe these are ZFC reals or something so that typing is a theorem)</p>",
        "id": 205056126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595777182
    },
    {
        "content": "<p>in fact even setting aside partial functions, something like <code>x \\in real /\\ y \\in real -&gt; x + y \\in real</code> might very well not be bidirectional</p>",
        "id": 205056160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595777275
    },
    {
        "content": "<p>For another example, if you want to prove <code>continuous (f + g)</code>, it seems to me completely reasonable to apply <code>continuous.add</code> and reduce it to the continuity of <code>f</code> and <code>g</code>, although of course you can have discontinuous functions whose sum is continuous, but this should never show up in real proofs.</p>",
        "id": 205056499,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595777763
    },
    {
        "content": "<p>A rule that does preserve provability could instead be written as an iff and registered as a simp lemma, so to me the whole point of <code>intro!</code> is for rules that don't preserve provability but are completely reasonable like the continuity example.</p>",
        "id": 205056511,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595777850
    },
    {
        "content": "<p>I'd say that's the point of <code>intro</code>.</p>",
        "id": 205056921,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595778680
    },
    {
        "content": "<p>See e.g. <a href=\"http://www21.in.tum.de/~ballarin/fomus/part1/part1.pdf\">http://www21.in.tum.de/~ballarin/fomus/part1/part1.pdf</a></p>",
        "id": 205056983,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595778808
    },
    {
        "content": "<p>Search for \"safe\" and \"unsafe\" throughout.</p>",
        "id": 205056986,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595778815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121058\">Jasmin Blanchette</span> <a href=\"#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/205042340\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> I hope you are paying attention. ;)</p>\n</blockquote>\n<p>I wasn't because I'm not subscribed to this stream, in which case I apparently don't even get notified if I'm @-mentioned. -.- Am now though.</p>",
        "id": 205745659,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1596405145
    },
    {
        "content": "<p>When you @ someone who is not subscribed to the stream you're posting in, there should be a prompt to invite them to the stream</p>",
        "id": 205749815,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596413300
    }
]