[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">u₁</span> <span class=\"n\">v₁</span> <span class=\"n\">w₁</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- include R A</span>\n<span class=\"c1\">-- def module.comap := M</span>\n<span class=\"c1\">-- omit R A</span>\n\n<span class=\"c1\">-- def module.to_comap : M → module.comap R A M := id</span>\n<span class=\"c1\">-- def module.of_comap : module.comap R A M → M := id</span>\n\n<span class=\"c1\">-- namespace module.comap</span>\n\n<span class=\"c1\">-- instance : add_comm_group (module.comap R A M) := _inst_4</span>\n\n<span class=\"c1\">-- instance module_right : module A (module.comap R A M) := _inst_5</span>\n\n<span class=\"c1\">-- instance module_left : module R (module.comap R A M) :=</span>\n<span class=\"c1\">-- { smul := λ r m, module.to_comap R A M (algebra_map A r • module.of_comap R A M m),</span>\n<span class=\"c1\">--   one_smul := λ m, show module.to_comap R A M (algebra_map A (1:R) • module.of_comap R A M m) = m,</span>\n<span class=\"c1\">--     by rw [algebra.map_one, one_smul]; refl,</span>\n<span class=\"c1\">--   mul_smul := λ r1 r2 m, show module.to_comap R A M (algebra_map A _ • _) = _,</span>\n<span class=\"c1\">--     by rw [algebra.map_mul, mul_smul]; refl,</span>\n<span class=\"c1\">--   smul_add := λ r m1 m2, by convert smul_add (algebra_map A r) (module.of_comap R A M m1) (module.of_comap R A M m2),</span>\n<span class=\"c1\">--   smul_zero := λ r, by convert smul_zero (algebra_map A r),</span>\n<span class=\"c1\">--   add_smul := λ r1 r2 m, show module.to_comap R A M (algebra_map A _ • _) = _,</span>\n<span class=\"c1\">--     by rw [algebra.map_add, add_smul]; refl,</span>\n<span class=\"c1\">--   zero_smul := λ m, show module.to_comap R A M (algebra_map A (0:R) • module.of_comap R A M m) = 0,</span>\n<span class=\"c1\">--     by rw [algebra.map_zero, zero_smul]; refl }</span>\n\n<span class=\"c1\">-- end module.comap</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">derivation</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_comm₄</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_comm₄</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">derivation</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">derivation</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">@@</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_neg</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">@@</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_neg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_sub</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">D</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">@@</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_mul_comm</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_algebra_map</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"n\">r</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">extensionality</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">D1</span> <span class=\"n\">D2</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">D1</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">D2</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">D1</span> <span class=\"bp\">=</span> <span class=\"n\">D2</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">D1</span> <span class=\"n\">D2</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">D1</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">D2</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D1</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">D2</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">],</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D1</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">D2</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">],</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D1</span><span class=\"bp\">.</span><span class=\"n\">map_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">D2</span><span class=\"bp\">.</span><span class=\"n\">map_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">neg_add</span><span class=\"o\">],</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"n\">smul_neg</span><span class=\"o\">,</span> <span class=\"n\">smul_neg</span><span class=\"o\">],</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">zero_add</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_zero</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">add_left_neg</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">],</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">],</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"n\">A</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">D1</span> <span class=\"n\">D2</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">D1</span> <span class=\"n\">D2</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">add_apply</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D1</span> <span class=\"bp\">+</span> <span class=\"n\">D2</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">D1</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">D2</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">zero_apply</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">neg_apply</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sub_apply</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D1</span> <span class=\"bp\">-</span> <span class=\"n\">D2</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">D1</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">D2</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">41</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">smul_apply</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">],</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">algebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">derivation</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">relators</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">|</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"err\">$</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"err\">$</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">relators</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">namespace</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">normal_add_subgroup</span> <span class=\"o\">(</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">relators</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">normal</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">add_sub_cancel&#39;</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">$</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hx</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n          <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n          <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n          <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">ihx</span> <span class=\"n\">ihy</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">ihx</span><span class=\"o\">,</span> <span class=\"n\">ihy</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">•</span><span class=\"o\">),</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"err\">•</span><span class=\"o\">)],</span> <span class=\"n\">rw</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"err\">•</span><span class=\"o\">)],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span>\n          <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">,</span>\n        <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)],</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"err\">•</span><span class=\"o\">)],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">)),</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">neg_add</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"err\">•</span><span class=\"o\">)],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">sub_sub</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 170730598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562944909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">$</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"err\">$</span> <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"err\">•</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)]</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"err\">$</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sub_eq_neg_add</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n  <span class=\"n\">algebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"err\">$</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">smul_D</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"err\">•</span><span class=\"o\">),</span> <span class=\"n\">D</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_smul</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hd</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"n\">smul_D</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">neg_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_D</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">induction_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">$</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">induction_on</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">smul_D</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n\n<span class=\"kn\">end</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">derivation</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">factor</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hx</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">hp</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span>\n            <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">])</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">hp</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span>\n            <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">])</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">hp</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span>\n            <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">])</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span>\n            <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]))</span>\n      <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">])</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]),</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">smul_D</span><span class=\"o\">,</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span>\n        <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">smul_D</span><span class=\"o\">,</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">ihq</span> <span class=\"n\">ihr</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"n\">ihr</span><span class=\"o\">,</span>\n        <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">smul_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">factor_comp</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">D</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">factor</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">factor</span><span class=\"o\">,</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">coe_fn</span><span class=\"o\">,</span> <span class=\"n\">has_coe_to_fun</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">factor_D</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">factor</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">D</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">factor_comp</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">comp_factor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">D</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factor</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"n\">p</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">factor</span><span class=\"o\">,</span> <span class=\"n\">coe_fn</span><span class=\"o\">,</span> <span class=\"n\">has_coe_to_fun</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">lift_mk&#39;</span><span class=\"o\">,</span> <span class=\"n\">free_abelian_group</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">smul_D</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">smul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">])</span>\n\n<span class=\"n\">def</span> <span class=\"n\">linear_equiv</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">factor</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">D</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">factor_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">comp_factor</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">D1</span> <span class=\"n\">D2</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span>\n        <span class=\"n\">factor_D</span><span class=\"o\">,</span> <span class=\"n\">factor_D</span><span class=\"o\">,</span> <span class=\"n\">factor_D</span><span class=\"o\">,</span> <span class=\"n\">derivation</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">]),</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"err\">«</span><span class=\"n\">K</span><span class=\"err\">ä</span><span class=\"n\">hler</span><span class=\"err\">»</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span>\n        <span class=\"n\">factor_D</span><span class=\"o\">,</span> <span class=\"n\">factor_D</span><span class=\"o\">,</span> <span class=\"n\">derivation</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">derivation</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">monotonicity</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">to_finset_mono</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span> <span class=\"err\">⊆</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"err\">⊆</span> <span class=\"n\">m₂</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finsupp</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_has_scalar&#39;</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_smul_index&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">•</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum_map_range_index</span> <span class=\"n\">h0</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">single_eq_smul_one</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">•</span> <span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_single</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partial_deriv</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- p.sum $ λ v r, C r * (add_monoid.smul (v i) (X i ^ (v i - 1)) * v.prod (λ j n, if i = j then 1 else (mv_polynomial.X j)^n))</span>\n<span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- #exit</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_zero_index</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">zero_apply</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">monomial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hji</span> <span class=\"n\">hij</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hji</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hij</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hij</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hji</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hji</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">C_1</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">C_mul&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">smul_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">hfv</span> <span class=\"n\">hs</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">monomial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">smul_single</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_smul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_smul_index&#39;</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_sum</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">smul_single</span><span class=\"o\">,</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 170730675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562944947
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">j</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hkj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hkj</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hjw</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hjw</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hkj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hkj</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hjw</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hjw</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"n\">p</span> <span class=\"n\">hpv</span> <span class=\"n\">hr</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">partial_deriv_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">ihp</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">s</span> <span class=\"n\">q</span> <span class=\"n\">hqw</span> <span class=\"n\">hs</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">partial_deriv_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">ihq</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"n\">w</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm₄</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm₄</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">erw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span> <span class=\"n\">erw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">⊆</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_add</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span>\n  <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">degrees_add</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">sup_le</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">⊆</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_add</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"o\">(</span><span class=\"n\">degrees_mul</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_X_subset</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"o\">(</span><span class=\"n\">degrees_X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hj</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">of_not_mem_vars</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hiv</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">to_multiset</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">degrees</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_sup</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">to_multiset</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">single_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hiv</span><span class=\"o\">,</span>\n<span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"n\">h1</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"n\">h2</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"err\">$</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hiv</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_cons_self</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_of_not_mem_vars</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_not_mem_vars</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">derivation</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> protected def mv_polynomial : derivation α (mv_polynomial σ α) (mv_polynomial σ α) :=</span>\n<span class=\"cm\">{ to_fun := mv_polynomial.partial_deriv i,</span>\n<span class=\"cm\">  add := mv_polynomial.partial_deriv_add i,</span>\n<span class=\"cm\">  mul := mv_polynomial.partial_deriv_mul i,</span>\n<span class=\"cm\">  algebra := mv_polynomial.partial_deriv_C i } -/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mv_polynomial_eval</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">⊆</span> <span class=\"n\">q</span> <span class=\"bp\">→</span>\n    <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"err\">•</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_subset</span> <span class=\"n\">hpq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hiq</span> <span class=\"n\">hip</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv_of_not_mem_vars</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"n\">hip</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_C</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">vars_C</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ihp</span> <span class=\"n\">ihq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_add</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"n\">ihq</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_union_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_union_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">+</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">vars_add</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv_add</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_add</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_add_distrib</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_mul</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_X</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">vars_mul</span> <span class=\"n\">p</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">union_subset</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_union_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">vars_X_subset</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_union_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))))],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">union_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">insert_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv_mul</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_add</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_add_distrib</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_mul</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv_X</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_X</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">smul_sum</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hip</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">insert_eq_of_mem</span> <span class=\"n\">hip</span><span class=\"o\">,</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hjp</span> <span class=\"n\">hji</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">hji</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hnip</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hip</span> <span class=\"n\">hnip</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"n\">hip</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"n\">hip</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv_of_not_mem_vars</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hip</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hjp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n        <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hip</span> <span class=\"n\">hjp</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">derivation</span>\n</pre></div>",
        "id": 170730690,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562944958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> here's my progress regarding derivation</p>",
        "id": 170731921,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562945835
    },
    {
        "content": "<p>I'm looking at it right now</p>",
        "id": 170731936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562945847
    },
    {
        "content": "<p>Should there be a stricklandization? If a module has these properties, then it satisfies the universal property of the Kähler differentials?</p>",
        "id": 170734390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562947683
    },
    {
        "content": "<p>I'm not sure what the properties should be</p>",
        "id": 170734499,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562947781
    },
    {
        "content": "<p>More generally, every time a new mathematical structure is made from old structures, there should be an accompanying predicate to say \"I am isomorphic to this construction\", because this is what mathematicians need in practice.</p>",
        "id": 170734730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562947932
    },
    {
        "content": "<p>Patrick was just talking about the following construction. Say you have an abelian group, and a filter on this group which you should think of as the filter of neighbourhoods of zero for a topology making this group into a topological group. This filter must then satisfy a couple of axioms (zero must be in all the elements, subtraction must be continuous at 0) and then you can <em>define</em> a topology on the abelian group by shifting the filter to every point using the group law and then defining the topology from the neighbourhood filters of every point using some standard trick in mathlib. This construction is all well and good, but the problem is what happens if you have a group which already has a topology and a filter of neighbourhoods of zero? The new topology you can make will probably not be defeq to the one you have. So you need a predicate \"I am isomorphic to this thing you just made\". </p>\n<p>We have a technical problem in the perfectoid project because we defined a super-general valuation taking values in <code>with_zero Gamma</code> for Gamma a linearly ordered comm group. That <code>with_zero Gamma</code> is a construction. Now Rob's norm on the p-adic numbers takes values in the reals, and he proves that the values are always non-negative, so we easily get a norm taking values in the non-negative reals. Guess what. That's not equal to <code>with_zero Gamma</code> . So given that construction of <code>with_zero Gamma</code> we should have defined a predicate on totally ordered comm monoids with zero saying \"I am isomorphic to <code>with_zero G</code> for some group G` and we should have developed all of the theory for these monoids instead.</p>\n<p>There is a general philosophy here, the extent of which I am only just understanding. But it seems to me that it applies to every time you make a new construction from an old one, e.g. a module of differentials from a morphism of rings, and you will find your object easier to use if you make this predicate now and then don't prove things about the construction but about objects satisfying the predicate.</p>",
        "id": 170735223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562948339
    },
    {
        "content": "<p>I also want to point out that this approach alleviates many of the requirements for <code>transfer</code></p>",
        "id": 170735373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562948470
    },
    {
        "content": "<p>Oh! I hadn't really internalised that part of it.</p>",
        "id": 170735395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562948490
    },
    {
        "content": "<p>Yup. This is the problem that type classes are supposed to solve in the first place... which is why we have theories of <code>distribs</code>.</p>",
        "id": 170736043,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562949057
    },
    {
        "content": "<p>A type class is a universal property and you pick and choose only the ones you need.</p>",
        "id": 170736063,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562949093
    },
    {
        "content": "<p>At least, that's how I think of it. Opinionated programmers love saying things like \"composition over inheritance\" and such.</p>",
        "id": 170736296,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562949309
    },
    {
        "content": "<p>So if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>-module and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">d:A\\to M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-derivation then we need to write down a list of necessary and sufficient conditions to ensure <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mo>≅</mo><msubsup><mi mathvariant=\"normal\">Ω</mi><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mi>R</mi></mrow><mn>1</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">M\\cong\\Omega^1_{A/R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3111079999999997em;vertical-align:-0.49699999999999994em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.378em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">A</span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.49699999999999994em;\"><span></span></span></span></span></span></span></span></span></span>. We should firstly demand that the range of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span></span></span></span> spans <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. And then...hmm. I see your point.</p>",
        "id": 170736337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562949347
    },
    {
        "content": "<p>You can also see some similarities in category theory, where products are defined in this universal way but used as a binary operator by abuse of notation</p>",
        "id": 170736486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562949477
    },
    {
        "content": "<p>The only way I think of how to do this is via some presentation of A as an R-algebra.</p>",
        "id": 170736505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562949482
    },
    {
        "content": "<p>You write A as a quotient of a polynomial ring over R (e.g. the quotient of the polynomial ring over R generated by the set A) and then make sure that the formal derivative of everything in the kernel is zero.</p>",
        "id": 170736759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562949661
    },
    {
        "content": "<p>This might be uncheckable in practice I guess.</p>",
        "id": 170736775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562949676
    },
    {
        "content": "<p>why?</p>",
        "id": 170736794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562949707
    },
    {
        "content": "<p>PS. In general the verb \"to stricklandize\" means \"extract interface\" in programming circles, if you want to waste an evening reading about the problem in computer languages...</p>",
        "id": 170736991,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562949857
    },
    {
        "content": "<p>Maybe it doesn't matter whether it's useful or not. If someone finds themself in a position where they have a maths proof that some module is isomorphic to the module of differentials then maybe they can tell us a better predicate</p>",
        "id": 170736999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562949861
    },
    {
        "content": "<p>The problem is that by that time we won't have developed the API in terms of that predicate... and we'll have to port the entire interface.</p>",
        "id": 170737055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562949923
    },
    {
        "content": "<p>Isn't there also the <code>I^2/I</code> description, where <code>I</code> is the ideal of the diagonal?</p>",
        "id": 170737093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562949961
    },
    {
        "content": "<p>The predicates are proofs, so you can exchange one for a provably equivalent one without breaking anything</p>",
        "id": 170737147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562949975
    },
    {
        "content": "<p>So that already gives two useful def's</p>",
        "id": 170737149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562949977
    },
    {
        "content": "<p>As a first cut at this predicate making you can always use <code>X ~= my_construction</code> where <code>~=</code> is isomorphism of the appropriate kind</p>",
        "id": 170737181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562950024
    },
    {
        "content": "<p>You can then try replacing this with a more concrete conjunction of properties, and as long as you are able to prove it's equivalent you can install the new definition without breaking anything</p>",
        "id": 170737294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562950125
    },
    {
        "content": "<p>I haven't got the definition right yet. We need to check that everything in the kernel of the derivation is zero for the right reasons</p>",
        "id": 170740047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562952319
    },
    {
        "content": "<p>How about this: If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra then say that a pair <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(M,d)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span></span></span></span> consisting of an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-linear derivation <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">A\\to M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> \"satisfies the Strickland predicate for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"normal\">Ω</mi><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>A</mi></mrow><mn>1</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">\\Omega^1_{R/A}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3111079999999997em;vertical-align:-0.49699999999999994em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.378em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\">A</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.49699999999999994em;\"><span></span></span></span></span></span></span></span></span></span>\" if the induced <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>-module map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">A\\otimes_R A \\to M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> sending <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>⊗</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\otimes b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a\\cdot d(b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span> is surjective, and secondly, every element of the kernel of this map is in the image of a map to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A\\otimes_R A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> from a certain set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.09618em;\">J</span></span></span></span>. The set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is an ideal in the polynomial ring <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[A]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">]</span></span></span></span> consisting of multivariate polynomials with coefficients in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and variables in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>, and the ideal is the kernel of the map from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[A]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> sending each variable to the corresponding element. The map from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.09618em;\">J</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A\\otimes_R A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> is the following. Take an element of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span></span></span>, considered as a finite <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-linear sum of monomials. Now take \"formal <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span></span></span></span>\" of this element, ending up with a finite R-linear sum of things of of the form <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>∏</mo><mi>a</mi></msub><msubsup><mi>x</mi><mi>a</mi><msub><mi>n</mi><mi>a</mi></msub></msubsup><mi>D</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod_a x_a^{n_a} D(x_k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where the product is over a finite subset of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>, the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>n</mi><mi>a</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are non-negative integers, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D(x_k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a formal differential (there's one for each <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">k\\in A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>) and the term hence depends on the finite subset and the choice of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">k\\in A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>. The map from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.09618em;\">J</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A\\otimes_R A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> is defined by sending <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>∏</mo><mi>a</mi></msub><msubsup><mi>x</mi><mi>a</mi><msub><mi>n</mi><mi>a</mi></msub></msubsup><mi>D</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod_a x_a^{n_a} D(x_k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mo>∏</mo><mi>a</mi></msub><msup><mi>a</mi><msub><mi>n</mi><mi>a</mi></msub></msup><mo stretchy=\"false\">)</mo><mo>⊗</mo><msub><mi>x</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">(\\prod_a a^{n_a})\\otimes x_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and extending <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-linearly. So can you prove that two pairs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(d,M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> both satisfying this predicate for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">R/A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">A</span></span></span></span> are uniquely isomorphic (i.e prove the universal property from the predicate), and then can you prove that your construction satisfies that predicate?</p>",
        "id": 170766616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562979445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 170767010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562979989
    },
    {
        "content": "<p>This is my attempt to translate the standard exact sequence <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>J</mi><mi mathvariant=\"normal\">/</mi><msup><mi>J</mi><mn>2</mn></msup><mo>→</mo><msubsup><mi mathvariant=\"normal\">Ω</mi><mrow><mi>S</mi><mi mathvariant=\"normal\">/</mi><mi>R</mi></mrow><mn>1</mn></msubsup><msub><mo>⊗</mo><mi>S</mi></msub><mi>A</mi><mo>→</mo><msubsup><mi mathvariant=\"normal\">Ω</mi><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mi>R</mi></mrow><mn>1</mn></msubsup><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">J/J^2\\to\\Omega^1_{S/R}\\otimes_S A\\to \\Omega^1_{A/R}\\to 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3111079999999997em;vertical-align:-0.49699999999999994em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.378em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.49699999999999994em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3111079999999997em;vertical-align:-0.49699999999999994em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.378em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">A</span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.49699999999999994em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> into  a predicate, where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is the polynomial ring over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with variables in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> (or more generally a polynomial ring over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with coefficients corresponding to any subset of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> generating it as an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra, so <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is a flat <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module and the canonical map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">S\\to A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> is surjective). Then I think <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"normal\">Ω</mi><mrow><mi>S</mi><mi mathvariant=\"normal\">/</mi><mi>R</mi></mrow><mn>1</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">\\Omega^1_{S/R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3111079999999997em;vertical-align:-0.49699999999999994em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.378em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.49699999999999994em;\"><span></span></span></span></span></span></span></span></span></span> must just be the direct sum over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">a\\in A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mi>D</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>a</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SD(x_a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. And <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is the kernel of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">S\\to R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>.</p>",
        "id": 170767233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562980380
    },
    {
        "content": "<p>I guess such a predicate would work (in the sense that it is correct), but it looks quite complicated. We'll probably have to see in practice whether it's actually usable.</p>",
        "id": 170774672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562994976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Is your next step the sheaf <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"normal\">Ω</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\Omega^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 170774676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562995013
    },
    {
        "content": "<p>The point is that if you don't do it like this then you'll have trouble further down the line when you have a localisation of the one forms instead of the one forms of the localisation and you can't rewrite</p>",
        "id": 170783439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563011653
    },
    {
        "content": "<p>You won't be able to glue one forms and thus define the one forms on a general scheme unless you do this now</p>",
        "id": 170783489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563011792
    },
    {
        "content": "<p>Or am I wrong?</p>",
        "id": 170783499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563011848
    },
    {
        "content": "<p>Right... I completely agree that such a predicate is what we need. I would hope that we somehow get better in managing them. Maybe those predicates should be turned into structures <code>is_Kaehler_differentials : Prop</code> or something like that...</p>",
        "id": 170783548,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563011889
    },
    {
        "content": "<p><code>is_the_same_as_Kaehler_differentials</code></p>",
        "id": 170790647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563025769
    },
    {
        "content": "<blockquote>\n<p>PS. In general the verb \"to stricklandize\" means \"extract interface\" in programming circles, if you want to waste an evening reading about the problem in computer languages...</p>\n</blockquote>\n<p>did kevin invent this word? what does it mean exactly? searching for it on google only brings me back to this chat...</p>",
        "id": 170851202,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563141834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> it's the philosophy of classifying constructions concretely rather than using universal properties</p>",
        "id": 170862574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563163471
    },
    {
        "content": "<p>I ran into an issue with the Schemes project where I had got Chris Hughes to prove a result about localisations <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>, and I then realised I needed it for rings which were isomorphic to the localisations, and I couldn't <code>rw h</code> where <code>h</code> was <code>equiv A B</code>. I checked that all the diagrams that I needed to commute, commuted, and the code was awful. Then Neil Strickland came up with a predicate <code>P R S A : Prop</code> which was a list of criteria which were necessary and sufficient for the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> to be isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>. Ramon Mir was then faced with the challenge of reproving Chris' result about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> in the \"more general\" case of rings <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> satisfying this predicate -- but the miracle was that Chris' proof only used facts about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> which were trivial consequences of the predicate (the predicate was of the form \"this and this and this and this\" and Chris used pretty much all of the \"this\"'s in his proof). There is hence some sort of underlying principle, which I think some of the computer scientists know about already, at least in some form, but I've still not really seen a precise formulation of what I need.</p>\n<p>Here's an example of a question I'm still not clear about. Say I formulate a statement about all <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebras satisfying Strickland's original predicate. Say now someone proves this statement for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> (the concrete construction of the localisation). Can I deduce that statement is true in general? I think I can, but I don't know the details of the argument. The Cauchy/Dedekind question I'm asking is basically the same principle -- \"I am a complete archimedean ordered field\" is the \"Stricklandization\" of both the Cauchy reals and the Dedekind reals.</p>",
        "id": 170869319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563174501
    },
    {
        "content": "<p>How did you avoid having to transport any properties across any equivalence?</p>",
        "id": 170890349,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1563195974
    },
    {
        "content": "<p>I'm trying to understand what happened there: does \"Stricklandization\" roughly mean \"coming up with isomorphism invariant properties of a Type\"?</p>",
        "id": 170890363,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1563195984
    },
    {
        "content": "<p>It means coming up with an easy to use set of criteria that imply isomorphism with a certain type, and proving things about types that meet those criteria instead.</p>",
        "id": 170890429,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563196052
    },
    {
        "content": "<p>Everybody, please, please ignore Kevin when he uses this word. It's an insult to generations of people who worked on formalized maths before (or even traditional maths really).</p>",
        "id": 170890455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563196069
    },
    {
        "content": "<p>Kevin suddenly understood something when Neil used it, and Kevin associated Neil's name to it ever since.</p>",
        "id": 170890532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563196105
    },
    {
        "content": "<p>But I'm sure Neil himself is uncomfortable with this crazyness.</p>",
        "id": 170890550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563196124
    },
    {
        "content": "<p>I told Kevin countless time to stop doing that, but it won't help if other people start doing it.</p>",
        "id": 170890587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563196155
    },
    {
        "content": "<p>oh, i see, so one sort of factors out general lemmas from their proof and prays that along the way they nail down the isomorphism class they want</p>",
        "id": 170892980,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563197748
    },
    {
        "content": "<p>I don't know a better word for it :-(</p>",
        "id": 170897164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563200244
    },
    {
        "content": "<blockquote>\n<p>How did you avoid having to transport any properties across any equivalence?</p>\n</blockquote>\n<p>The localisation <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> of a commutative ring <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> at a submonoid <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> can be explicitly constructed as pairs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>R</mi><mo>×</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">(r,s)\\in R \\times S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> (thought of as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">r/s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">s</span></span></span></span>) modulo some appropriate equivalence relation. However what mathematicians do in practice is that they say \"it's the thing satisfying this universal property\". The universal property characterises the localisation up to unique isomorphism, and for a mathematician that is enough. When proving theorems about localisations, I used to prove them about the explicit construction. Then I ran into rewrite issues, when I had rings which were isomorphic to, but not equal to, localisations. </p>\n<p>One fix for this would involve proving results not for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> but for all rings satisfying the universal property. This is also hard to do in Lean because it involves quantifying over universes, at least if you want to be maximally universe polymorphic, which seems to be the fashion here (don't get me started).</p>\n<p>Because introducing other universes can also cause problems, and rewrites won't work for isomorphisms, we need another method. The method is to find a predicate which is provably equivalent to \"I am isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>\" and doesn't mention any universes and is convenient to use. There is an art to this. Strickland found what seems to be exactly the right predicate for localisations. </p>\n<p>The abstract way of thinking about it is like this. We want to rewrite along isomorphisms, and we can't. Say T is the structure we're thinking about, and we have the notion of a T-isomorphism. We have some specific term <code>t : T</code>, some kind of universal object, which we want to prove things about . The problem is that we want to apply these theorems to other terms <code>u : T</code> which are <code>T</code>-isomorphic to <code>t</code> but not (provably) equal to <code>t</code>. The trick is not to ever prove anything about <code>t</code>, but only to prove things about terms isomorphic to <code>t</code>.</p>\n<p>The missing piece of the puzzle is how to get from a proof of something which unfortunately <em>does</em> involve <code>t</code> (e.g. the proof that <code>t</code> has some property), to the more general proof that anything isomorphic to <code>t</code> satisfies the same property. This is not true in general, because the property could be \"I am equal to <code>t</code>\". But for properties mathematicians are interested in, it should be true. </p>\n<p>However this is where the hornet's nest seems to lie, at least as far as I can see. This is why I have been asking questions about the Cauchy and Dedekind reals. All mathematicians know that it doesn't matter which one we choose. And yet in mathlib they chose Cauchy, and then they did prove a bunch of stuff about the Cauchy reals, rather than proving analogous results about an arbitrary complete archimedean ordered field (that's the canonical Stricklandization for the real numbers, because any complete archimedean ordered field is uniquely isomorphic to the Cauchy reals (and to the Dedekind reals)).</p>\n<p>So far I have convinced myself that the following powerful principle stands a chance of being true. If <code>P u</code> is the predicate telling us if some term <code>u : T</code> is <code>T</code>-isomorphic to <code>t</code>, and we have a proposition <code>Q u</code> about all terms <code>u</code> of type <code>T</code> which satisfy <code>P</code>, and we have a proof of <code>Q t</code>, then we should be able to formally deduce that <code>Q u</code> is provable, even though it might be a pain trying to actually construct the proof. The key thing here is that we don't have to check that the <em>proof</em> can be reformulated so that it only talks about <code>P</code> and not about <code>t</code>, we only have to check that the <em>statement</em> only talks about <code>P</code> and not <code>t</code>.  I am hoping that there is then some general result which says the proof can be translated into one which only talks about <code>P</code> and not <code>t</code>. </p>\n<p>What is left is checking that the statements only talk about <code>P</code>. This is where the Bochner integral challenge comes in. The Bochner integral is some new function defined in mathlib which mentions the real numbers, and hence the Cauchy real numbers. I would be interested in seeing a Dedekind real version of this integral, or perhaps a version which applies to all complete ordered archimedean fields. I am wondering if there is a difference between what can be said in theory and what can be done in Lean in practice.</p>",
        "id": 170899614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563201967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span></p>",
        "id": 170899638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563201997
    },
    {
        "content": "<blockquote>\n<p>So far I have convinced myself that the following powerful principle stands a chance of being true. If P u is the predicate telling us if some term u : T is T-isomorphic to t, and we have a proposition Q u about all terms u of type T which satisfy P, and we have a proof of Q t, then we should be able to formally deduce that Q u is provable, even though it might be a pain trying to actually construct the proof.</p>\n</blockquote>\n<p>do you mean something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">eqv</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H_equiv</span> <span class=\"o\">:</span> <span class=\"n\">is_equiv</span> <span class=\"bp\">_</span> <span class=\"n\">eqv</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">eqv</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">HQ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">Hu</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P_respect_iso</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">eqv</span> <span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Q_respect_iso</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">eqv</span> <span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Ht</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hu</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">*</span>\n</pre></div>",
        "id": 170902565,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563203891
    },
    {
        "content": "<p>I don't know <code>HQ</code>. I only know <code>Q t</code></p>",
        "id": 170902688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563203977
    },
    {
        "content": "<p>I don't think I know <code>Q_respect_iso</code> either.</p>",
        "id": 170902819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563204051
    },
    {
        "content": "<p>oh, so you meant that<code>Q</code> is a predicate on the subtype of <code>P</code>?</p>",
        "id": 170902874,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563204098
    },
    {
        "content": "<p>You can figure it out for yourself. In mathlib there's a proof that a non-empty bounded-above set of Cauchy reals has a supremum. I want to prove that for the Dedekind reals, say.</p>",
        "id": 170902882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563204106
    },
    {
        "content": "<p>Yes, Q could be thought of as a predicate on the subtype of T corresponding to P.</p>",
        "id": 170902955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563204138
    },
    {
        "content": "<p>So here are the two steps involved in proving that a non-empty bounded-above set of Dedekind reals has a supremum. Firstly, beef up the statement that a non-empty bounded-above set of Cauchy reals has a supremum to the statement that a non-empty bounded-above subset of any complete ordered archimedean field has a supremum, and then secondly show that if you have a proof of this for the Cauchy reals then you can deduce one for the Dedekind reals.</p>",
        "id": 170903083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563204229
    },
    {
        "content": "<p>first-order transfer fails here since adjoining a predicate symbol easily spoils the completeness of first-order theories</p>\n<p>but in this case you could just show that some second-order properties transfer across isomorphisms of ordered fields, like the supremum of a set or the property of being bounded</p>\n<p>maybe the idiomatic way to do it would be to have a complete ordered archimedean field typeclass and then prove as many higher-order properties you want, and then specialize</p>",
        "id": 170905943,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563205977
    },
    {
        "content": "<p>(i'm sure this has all been said before)</p>",
        "id": 170905953,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563205986
    },
    {
        "content": "<blockquote>\n<p>maybe the idiomatic way to do it would be to have a complete ordered archimedean field typeclass and then prove as many higher-order properties you want, and then specialize</p>\n</blockquote>\n<p>Right! But we don't! Mathematicians expect to be able to move between the Cauchy reals and the Dedekind reals immediately because they are \"the same\". On the other hand we are making lots and lots of constructions using only the Cauchy reals. This is not an issue for mathematicians though, because they know this general principle that one can rewrite anything sensible along a map saying that two things are the same, and it is perhaps not in anyone's interest to point out the subtleties here.</p>",
        "id": 170906106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563206120
    },
    {
        "content": "<p>Is there any reason why derivations were formalized with this <code>algebra</code> field instead of extending linear maps (it seems the two are equivalent)?</p>",
        "id": 204916298,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595598139
    },
    {
        "content": "<p>Well that definition only allows derivations from A to itself? Whereas quite often you want derivations from A to any A-module M.</p>",
        "id": 204924102,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595601795
    },
    {
        "content": "<p>We could make do with the one to the universal module ;-)</p>",
        "id": 204930669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595604781
    },
    {
        "content": "<p>Sorry if this is a stupid question but I've never really seen derivations in abstract algebra yet... is this not possible / is this a bad idea?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">transitive_scalar</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">transitive_module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">derivation</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Leibniz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205612444,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596213396
    },
    {
        "content": "<p>oh right, you remind me to generalize <code>is_algebra_tower</code></p>",
        "id": 205613715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596214136
    },
    {
        "content": "<p>don't make <code>transitive_module</code> an instance</p>",
        "id": 205613731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596214148
    },
    {
        "content": "<p>(make it a <code>def</code>)</p>",
        "id": 205613740,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596214151
    },
    {
        "content": "<p>are you asking about the Lean code or the maths content?</p>",
        "id": 205613810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596214197
    },
    {
        "content": "<p>The maths content</p>",
        "id": 205616500,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596215668
    },
    {
        "content": "<p>Looks good at first glance</p>",
        "id": 205616658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596215767
    },
    {
        "content": "<p>I need derivations for geometry and I need to write just a stab. I'd write derivations like in this last example because I am more comfortable with this definition, but the truth is that I really don't know anything of graduate level algebra (this will change next year but I need to do this now) and I have no idea if the definition you gave one year ago has advantages over mine or it is just a matter of preference</p>",
        "id": 205616797,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596215861
    },
    {
        "content": "<p>Sorry you is referring to Kenny</p>",
        "id": 205616880,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596215897
    },
    {
        "content": "<p>When I was just beginning in this area I used to ask this sort of question a lot (\"here are three ways to do schemes, which is the best way?\") and the answer I would get a lot was \"nobody did schemes before in Lean, so why not just choose a way and do it, and see what happens?\". Computer scientists don't have all the answers here. Even if there was a wonderful theory of derivations in Coq or Isabelle/HOL this doesn't mean that they way they set it up is the way it should be done in Lean.</p>",
        "id": 205617281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596216179
    },
    {
        "content": "<p>Mathematicians all agree on the specification, but you are asking about the implementation. Probably all implementations give the same theorems but the question really is how easy is it to get to them. What do you want from derivations?</p>",
        "id": 205617356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596216232
    },
    {
        "content": "<p>Well I just need to use them to create Lie brackets so I just need very basic stuff such that the commutator of derivations is a derivation, but my point is that I want them to be similar to how they will be implemented in mathlib later on so that I won't have to change my code afterwards. I also plan to PR my stab on derivations as I plan to PR Lie brackets so that's why I want to be sure my implementation is acceptable</p>",
        "id": 205618109,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596216631
    },
    {
        "content": "<p>If people are sure that derivations in the end will be implemented as Kenny did it in this topic one year ago, I will do it like that now</p>",
        "id": 205618329,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596216730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/derivation/near/205613740\">said</a>:</p>\n<blockquote>\n<p>(make it a <code>def</code>)</p>\n</blockquote>\n<p>But in order to write linear maps I need an instance! Should I write a def and a coercion?</p>",
        "id": 205618486,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596216834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> to write linear maps just have an extra assumption <code>semimodule R M</code></p>",
        "id": 205618860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596217022
    },
    {
        "content": "<p>as well as <code>transitive_scalar R A M</code></p>",
        "id": 205618874,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596217029
    },
    {
        "content": "<p>The idea is not to tell the typeclass system to solve problems, but tell it the answers yourself. Say \"M is an R-module and an A-module, and the module structures are compatible\", rather than telling Lean only some of the story and making it figure out the rest by itself.</p>",
        "id": 205619063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596217121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/derivation/near/205618874\">said</a>:</p>\n<blockquote>\n<p>as well as <code>transitive_scalar R A M</code></p>\n</blockquote>\n<p>You mean to make this a def as well?</p>",
        "id": 205619895,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596217576
    },
    {
        "content": "<p>But why? Why not an instance?</p>",
        "id": 205619904,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596217586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/derivation/near/205619063\">said</a>:</p>\n<blockquote>\n<p>The idea is not to tell the typeclass system to solve problems, but tell it the answers yourself. Say \"M is an R-module and an A-module, and the module structures are compatible\", rather than telling Lean only some of the story and making it figure out the rest by itself.</p>\n</blockquote>\n<p>I mean why this is the idea?</p>",
        "id": 205619956,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596217624
    },
    {
        "content": "<p>It can't be an instance because it involves the variable <code>A</code> which doesn't appear in the result type.</p>",
        "id": 205620000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596217652
    },
    {
        "content": "<p>It means any time Lean wants to figure out why something is a module over some ring it will try to invent some intermediate algebra over the ring over which the thing is also a module.</p>",
        "id": 205620035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596217677
    },
    {
        "content": "<p>Oh  right it makes sense! Then I guess this is a reason to do it the way Kenny was doing it? Otherwise one always needs to go back to pick up this definition</p>",
        "id": 205620325,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596217818
    },
    {
        "content": "<p>I mean now the other definition looks more natural to me</p>",
        "id": 205620460,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596217898
    },
    {
        "content": "<p>Has anyone thought about introducing things like this? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_compat_semimodule</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compat</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205621414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596218319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/116395-maths/topic/derivation/near/205619895\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/derivation/near/205618874\">said</a>:</p>\n<blockquote>\n<p>as well as <code>transitive_scalar R A M</code></p>\n</blockquote>\n<p>You mean to make this a def as well?</p>\n</blockquote>\n<p>no, I mean whenever you want to write linear maps, have extra assumptions <code>semimoduel R M</code> and <code>transitive_scalar R A M</code></p>",
        "id": 205621942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596218552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Kenny has made these classes for algebras but not modules</p>",
        "id": 205624213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596219868
    },
    {
        "content": "<p>and my work can definitely be gerenalised thereto</p>",
        "id": 205624662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596220145
    },
    {
        "content": "<p>Is this in mathlib?</p>",
        "id": 205624743,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596220190
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_algebra_tower\">docs#is_algebra_tower</a></p>",
        "id": 205624899,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596220266
    },
    {
        "content": "<p>Nice! Thanks.</p>",
        "id": 205624960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596220304
    },
    {
        "content": "<p>In any case when did you write derivations that way instead of extending linear maps so to avoid dangerous instance problems? I mean is this thing of being forced to write a definition instead of an instance a disadvantage or is it something normal I should not care about?</p>",
        "id": 205625510,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596220525
    },
    {
        "content": "<p>Lean's typeclass inference system is pretty well understood by some people now, and some instances are dangerous. This has nothing to do with mathematics, we just have to do what we're told</p>",
        "id": 205625812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596220664
    },
    {
        "content": "<p>I guess you can do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_compat_semimodule</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compat</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">derivation</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_compat_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>  <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">leibniz</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205626069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596220773
    },
    {
        "content": "<p>With no dangerous instances.</p>",
        "id": 205626092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596220781
    },
    {
        "content": "<p>At least I think it's not dangerous :) But like Kevin said, you have to ask someone who understands the typeclass inference system.</p>",
        "id": 205626251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596220835
    },
    {
        "content": "<p>Well I guess that if lint does not say it is dangerous then it should be fine!</p>",
        "id": 205626325,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596220870
    },
    {
        "content": "<p>It was dangerous :(</p>",
        "id": 205626517,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596220974
    },
    {
        "content": "<p>Yes I actually see why</p>",
        "id": 205626530,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596220986
    },
    {
        "content": "<p>The linter is happy with this though:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_compat_semimodule</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compat</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">derivation</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_compat_semimodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>  <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">leibniz</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205626542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596220991
    },
    {
        "content": "<p>Which is closer to Kenny's <code>is_algebra_tower</code>.</p>",
        "id": 205626591,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596221023
    },
    {
        "content": "<p>Yeah even if this way one has to have three instances whereas with the definition Kenny had these instances where not required... Is this a disadvantage or will in practice these instances always be there? Who knows I'll just give it a try I guess if no one thinks these problem imply Kenny's definition was better</p>",
        "id": 205627252,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596221308
    },
    {
        "content": "<p>I guess it could also be a good idea to ask that derivation extends <code>has_compat_semimodule</code> instead that requiring it as an instance I guess</p>",
        "id": 205627658,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596221467
    },
    {
        "content": "<p>Looks no dangerous coercions would happen</p>",
        "id": 205627691,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596221489
    },
    {
        "content": "<p>algebra tower has been working perfectly so far for me</p>",
        "id": 205627729,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/derivation/near/205627729\">said</a>:</p>\n<blockquote>\n<p>algebra tower has been working perfectly so far for me</p>\n</blockquote>\n<p>So you'd also go for this last suggested implementation? I mean you have any further suggestion that could make things compatible with your future generalization of algebra towers?</p>",
        "id": 205628118,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596221695
    },
    {
        "content": "<p>well what is in my head is a complete generalization to only <code>has_scalar</code> when defining compatibility</p>",
        "id": 205628357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221814
    },
    {
        "content": "<p>but in terms of how you use it, yes that's how I use it</p>",
        "id": 205628387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221827
    },
    {
        "content": "<p>I mean you can look at how I use algebra tower in mathlib</p>",
        "id": 205628397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221832
    },
    {
        "content": "<p>e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_algebra_tower.aeval_apply\">docs#is_algebra_tower.aeval_apply</a></p>",
        "id": 205628545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221906
    },
    {
        "content": "<p>(click the <code>{...}</code> to expand the assumptions)</p>",
        "id": 205628568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221922
    },
    {
        "content": "<p>Also relevant here is the following <a href=\"#narrow/stream/116395-maths/topic/extends.20has_scalar/near/201789261\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/extends.20has_scalar/near/201789261</a></p>",
        "id": 205647822,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1596234230
    },
    {
        "content": "<p>So for example those definitions above that end up extending <code>A →ₗ[R] M</code> are fine because there are three carrier types on the class being extended but those that try to extend <code>has_scalar</code> are not.</p>",
        "id": 205647927,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1596234324
    },
    {
        "content": "<p>I believe this limitation will go away in the promised land of Lean 4.</p>",
        "id": 205648013,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1596234388
    },
    {
        "content": "<p><code>derivation</code> could indeed extend <code>has_compat_semimodule</code>, although that would mean that in proofs you have to get the <code>compat</code> theorem out of a derivation by <code>d.compat</code> rather than inferring it from the context. But that doesn't sound so bad</p>",
        "id": 205652988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596239320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/derivation/near/204924102\">said</a>:</p>\n<blockquote>\n<p>Well that definition only allows derivations from A to itself? Whereas quite often you want derivations from A to any A-module M.</p>\n</blockquote>\n<p>Sorry another question about the maths content regarding this. Sincerely, not knowing algebra, I have no idea why it is interesting to consider derivations to a generic module A (when Alex says \"often\" I cannot really think of even one example), but I also realize just now that this theory can only be developed for commutative algebra, whereas the theory I am interested in is that of non-commutative algebra (for example in quantum mechanics one needs derivations on non commutative algebras), and it is the one of wikipedia: <a href=\"https://en.wikipedia.org/wiki/Derivation_(differential_algebra)\">https://en.wikipedia.org/wiki/Derivation_(differential_algebra)</a>. As far as people know, is there an even more general theory that deals with both cases or should I just rechange my code (for like the 10th time haha) and just write the theory I need?</p>",
        "id": 205677996,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596282549
    },
    {
        "content": "<p>Actually I read that there is a theory for bimodules... Do we even have bimodules in mathlib?</p>",
        "id": 205678072,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596282687
    },
    {
        "content": "<p>I do not see them... Unless someone has some enlightning suggestion or wants to implement bimodules in little time I'll just write the theory for algebras and write <code>TODO: generalize this to bimodules</code></p>",
        "id": 205678191,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596282885
    },
    {
        "content": "<p>This has been discussed recently, see e.g.: <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205492670\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ideals.20over.20algebras/near/205492670</a></p>",
        "id": 205678548,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1596283511
    },
    {
        "content": "<p>If you really want to go down the rabbit hole, look up Quillen's definition of a derivation <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 205704588,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596328776
    },
    {
        "content": "<p>In homotopical algebra? I don't really know his books</p>",
        "id": 205732834,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596383691
    },
    {
        "content": "<p>It's in his paper called \"On the (co-)homology of commutative rings\".</p>",
        "id": 205732897,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596383787
    }
]