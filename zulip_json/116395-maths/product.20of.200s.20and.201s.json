[
    {
        "content": "<p>Is there already a lemma like <code>s.prod (\\lam i, if p i then 0 else 1) = if (\\forall i \\in s, p i) then 0 else 1</code>?</p>",
        "id": 178910259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571877215
    },
    {
        "content": "<p>I think that should be exists instead of forall?</p>",
        "id": 178910362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877348
    },
    {
        "content": "<p>or 0 and 1 should be swapped</p>",
        "id": 178910370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877358
    },
    {
        "content": "<p>Yes exists, sorry, or any other similar but correct statement</p>",
        "id": 178910452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571877435
    },
    {
        "content": "<p>I would prefer to see that factored into <code>s.prod (\\lam i, if p i then f i else 0) = (s.filter p).prod f</code> and <code>s.prod (\\lam _, 1) = if s != \\empty then 1 else 0</code></p>",
        "id": 178910464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877457
    },
    {
        "content": "<p>I'm not a big fan of if statements in conclusions though; I would probably state the latter as two lemmas</p>",
        "id": 178910532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877527
    },
    {
        "content": "<p>It might also make sense to add an additional step that connects <code>s.prod (\\lam _, a)</code> to <code>a ^ card s</code> first</p>",
        "id": 178910571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877582
    },
    {
        "content": "<p>In the intended application (<a href=\"https://en.wikipedia.org/wiki/Chevalley%E2%80%93Warning_theorem#Proof_of_Warning's_theorem\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Chevalley%E2%80%93Warning_theorem#Proof_of_Warning's_theorem\">https://en.wikipedia.org/wiki/Chevalley%E2%80%93Warning_theorem#Proof_of_Warning's_theorem</a>) you do kind of want the <code>if ... then 1 else 0</code> form though, since another lemma connects the sum of that to the cardinality of a set.</p>",
        "id": 178910641,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571877615
    },
    {
        "content": "<p>at some point it becomes theorem-local reasoning though</p>",
        "id": 178910695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877702
    },
    {
        "content": "<p>I would just use funext and split_ifs to get the if back</p>",
        "id": 178910702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877718
    },
    {
        "content": "<p>You people don't like if and only if statements, do you</p>",
        "id": 178910748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571877737
    },
    {
        "content": "<p><code>finset.prod_filter</code>, <code>finset.prod_const</code>,  <code>zero_pow</code> / <code>pow_zero</code></p>",
        "id": 178910753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571877743
    },
    {
        "content": "<p>I'm a big fan of iff statements, what do you mean?</p>",
        "id": 178910765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877761
    },
    {
        "content": "<p>these are all equalities</p>",
        "id": 178910767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877772
    },
    {
        "content": "<p>I think I just rationally reconstructed mathlib</p>",
        "id": 178910839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571877849
    },
    {
        "content": "<p>Each term is the product of the indicator functions of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f_i(x) = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, which is the indicator function of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>i</mi><mo separator=\"true\">,</mo><msub><mi>f</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\forall i, f_i(x) = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, and summing that gives the number of solutions. I don't want to separately argue when all <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_i(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> are zero and when some <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_i(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is not zero.</p>",
        "id": 178910962,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571878031
    },
    {
        "content": "<p>Maybe I am just arguing that the function we talked about in <a href=\"https://github.com/leanprover-community/mathlib/issues/1472\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1472\">#1472</a> should exist, and not fall under the general rule about ifs in conclusions.</p>",
        "id": 178910972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571878076
    },
    {
        "content": "<p>I think that's the right conclusion</p>",
        "id": 178911023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571878109
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_filter</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_const</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ⊢ 0 ^ finset.card (finset.filter (λ (a : α), p a) s) = ite (∃ (i : α) (H : i ∈ s), p i) 0 1</span>\n</pre></div>",
        "id": 178911024,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571878110
    },
    {
        "content": "<p>maybe <code>0 ^ finset.card (finset.filter (λ (a : α), p a) s)</code>?</p>",
        "id": 178911046,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571878147
    }
]