[
    {
        "content": "<p>Is this true? Context is <a href=\"https://github.com/leanprover-community/mathlib/pull/2819\">#2819</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.measure_space_def</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subtype.measure_space</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">volume</span> <span class=\"o\">:=</span> <span class=\"n\">measure.comap</span> <span class=\"n\">subtype.val</span> <span class=\"n\">volume</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">subtype.measurable_space</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subtype.volume_univ</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">null_measurable_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 289486824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657730433
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subtype.volume_univ'</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is indeed true.</p>",
        "id": 289486869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657730453
    },
    {
        "content": "<p>This is not true. If <code>s</code> is not measurable then the volume is just 0 (while you can certainly have a nonmeasurable set of measure &gt; 0).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subtype.volume_univ</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">measurable_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">measure.comap</span> <span class=\"n\">subtype.val</span> <span class=\"n\">volume</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">measure.comap</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_and_distrib</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">not_imp.2</span> <span class=\"o\">⟨</span><span class=\"n\">measurable_set.univ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289489671,
        "sender_full_name": "Jason KY.",
        "timestamp": 1657731690
    },
    {
        "content": "<p>Hmm, this is annoying because that means <a href=\"https://github.com/leanprover-community/mathlib/pull/2819\">#2819</a> can't use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.is_fundamental_domain\">docs#measure_theory.is_fundamental_domain</a>.</p>",
        "id": 289489935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657731780
    },
    {
        "content": "<p>This probably means that we should fix the definition of <code>measure.comap</code>, in the same way that we fixed <code>measure.map</code> to allow for almost everywhere measurable functions.</p>",
        "id": 289490478,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1657731971
    },
    {
        "content": "<p>Would anyone do that for me? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> I am very unaware of the measure theory library.</p>",
        "id": 289494115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657733621
    },
    {
        "content": "<p>Sorry, no available free time currently for me (in addition to the heavy duties of old people that have been mentioned in the previous thread, you should add that kids take a significant amount of time in July and August :-)</p>",
        "id": 289495821,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1657734441
    },
    {
        "content": "<p>I will have a look tomorrow. But if I don't manage to do it in the next two days then I also won't have time before a week or two.</p>",
        "id": 289496794,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1657734901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> see <a href=\"https://github.com/leanprover-community/mathlib/tree/RD_comap\">branch#RD_comap</a> . PR coming soon.</p>",
        "id": 289574478,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1657794690
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15343\">#15343</a></p>",
        "id": 289578805,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1657797776
    },
    {
        "content": "<p>Still on this, is this now true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.measure_space_def</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subtype.measure_space</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">volume</span> <span class=\"o\">:=</span> <span class=\"n\">measure.comap</span> <span class=\"n\">subtype.val</span> <span class=\"n\">volume</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">subtype.measurable_space</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">null_measurable_set.subtype_image</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">null_measurable_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">null_measurable_set</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">null_measurable_set</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291101616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658951626
    },
    {
        "content": "<p>Yes this is true. I just pushed a (rather horrible) proof to <a href=\"https://github.com/leanprover-community/mathlib/tree/RD_comap\">branch#RD_comap</a></p>",
        "id": 291154430,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1658997031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> Did you PR your proof of <code>subtype.volume_univ</code> somewhere? It would be great to have this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 297633025,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662570596
    },
    {
        "content": "<p>No I didn't. I was not clear at the time but when I wrote that I pushed stuff to a branch I meant \"feel free to take from that branch anything you could need and PR it\". I'll try to clean and PR that code next week-end</p>",
        "id": 297664840,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1662581205
    },
    {
        "content": "<p>Ok I did a little golfing, I'd still like to simplify the long proofs a bit (involving lemma todo for instance).</p>",
        "id": 297959742,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662725940
    }
]