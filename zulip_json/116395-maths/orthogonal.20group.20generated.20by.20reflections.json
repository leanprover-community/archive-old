[
    {
        "content": "<p>I thought it would be nice to do one of the easy entries from the undergrad list:  the orthogonal group is generated by reflections.</p>\n<p>If anyone is in the mood for a few algebra sorries (dimensions of submodules, generating sets for subgroups, etc), feel free to finish off the proof I have started at <a href=\"https://github.com/leanprover-community/mathlib/tree/three-reflections\">branch#three-reflections</a>!  I'm going to bed.</p>",
        "id": 261599242,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637040016
    },
    {
        "content": "<p>Do we have a <code>group (F ≃ₗᵢ[ℝ] F)</code> instance like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.automorphism_group\">docs#linear_equiv.automorphism_group</a>? If so it might be nice to use <a href=\"http://list.prod\">list.prod</a> instead of list.fold</p>",
        "id": 261613652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637053727
    },
    {
        "content": "<p>Indeed, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry_equiv.group\">docs#linear_isometry_equiv.group</a>.   Just hadn't seen <code>list.prod</code> :)</p>",
        "id": 261635201,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637067008
    },
    {
        "content": "<p>In particular,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">∈</span> <span class=\"n\">subgroup.closure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 261678846,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637084821
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">≤</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∉</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">W</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 261679095,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637084922
    },
    {
        "content": "<p>For the second one:<br>\n<code>submodule.finrank_lt_finrank_of_lt (set_like.lt_iff_le_and_exists.2 ⟨h₁, v, h₂, h₃⟩)</code></p>",
        "id": 261681453,
        "sender_full_name": "Deniz Aydin",
        "timestamp": 1637085823
    },
    {
        "content": "<p>the first wasn't quite as nice: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">∈</span> <span class=\"n\">subgroup.closure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subgroup.list_prod_mem</span> <span class=\"o\">(</span><span class=\"n\">subgroup.closure</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.mem_map</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hax</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hax</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">subgroup.subset_closure</span> <span class=\"n\">a.property</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261688980,
        "sender_full_name": "Deniz Aydin",
        "timestamp": 1637088900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364484\">@Deniz Aydin</span> Nice work!  Feel free to push to the branch and/or open a PR ...</p>",
        "id": 261692768,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637090439
    }
]