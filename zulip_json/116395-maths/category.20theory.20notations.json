[
    {
        "content": "<p>I am very-nearly-just-about ready with my category theory PR. I would like some help with notations, however.</p>",
        "id": 125808846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524894356
    },
    {
        "content": "<p>Perhaps I will write up a short document explaining my current choices, and hopefully some of the mathematicians (/computer scientists who like category theory) here can complain about them. :-)</p>",
        "id": 125808889,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524894394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> fancy incorporating my examples?</p>",
        "id": 125808941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> which examples?</p>",
        "id": 125809059,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524894815
    },
    {
        "content": "<p>I'll look, but it may just be best to do a later PR.</p>",
        "id": 125809060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524894832
    },
    {
        "content": "<p>My first category theory PR is going to be a tiny subset of the whole existing library.</p>",
        "id": 125809097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524894845
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> which examples?</p>\n</blockquote>\n<p>I have many examples in my repo :P</p>",
        "id": 125809100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894865
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/category-theory\" target=\"_blank\" title=\"https://github.com/kckennylau/category-theory\">https://github.com/kckennylau/category-theory</a></p>",
        "id": 125809101,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894893
    },
    {
        "content": "<p>okay --- let's wait until we have the basics in mathlib, and then we can start importing!</p>",
        "id": 125809359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524895525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span>, I should have mentioned this earlier, but I noticed that your <code>Complete C</code> class doesn't quite correspond to the usual notion of completeness, since one ordinarily only requires the indexing category <code>J</code> for a limit to be small (w.r.t. the same universe in which the hom sets of <code>C</code> are small), but your definition further requires the hom sets of <code>J</code> to belong to an even smaller universe.</p>",
        "id": 125809663,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524896185
    },
    {
        "content": "<p>More concretely, in a complete category one may always form the equalizer of all the morphisms between a given pair of objects, but that's not possible with the <code>Complete</code> class.</p>",
        "id": 125809669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524896231
    },
    {
        "content": "<p>And generally speaking it is useful to have a notion of \"small category\" where the objects and morphisms are sets that live in the same universe. I mention this because one possible way to address this (though maybe not the best way) would be to add a second universe parameter to the <code>category</code> class, which would probably involve many other changes.</p>",
        "id": 125809788,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524896470
    },
    {
        "content": "<p>Another option might be to define a small category as a category with object type of the form <code>ulift.{i (i+1)} a</code></p>",
        "id": 125810026,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524897065
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 125810972,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524899405
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 125810978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524899414
    },
    {
        "content": "<p>It seems to me that doing category theory in Lean brings up some extremely delicate issues.</p>",
        "id": 125817480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524915708
    },
    {
        "content": "<p>I am an end user and I do not care about universes or these subtleties, at least when I have my algebraic geometry hat on</p>",
        "id": 125817520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524915733
    },
    {
        "content": "<p>I just want to write down a functor from \"the\" category of open sets on a topological space to \"the\" category of groups, without caring at all about which universe all these things live in.</p>",
        "id": 125817523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524915767
    },
    {
        "content": "<p>On the other hand, I have seen intelligent people occasionally pausing to say \"by the way, when I say category of _all_ schemes, it might be best if you interpret this as the category of all schemes which show up at some level in a set-theoretical hierarchy, and here is a calculation indicating that certain basic operations will never take us out of that category\"</p>",
        "id": 125817572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524915866
    },
    {
        "content": "<p>Here, for example, is Johan de Jong being very careful about what he means by the category of schemes, as formalised within ZFC.</p>",
        "id": 125817619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524915998
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/000H\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/000H\">https://stacks.math.columbia.edu/tag/000H</a></p>",
        "id": 125817620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916000
    },
    {
        "content": "<p>It seems to me that when you are doing calculations such as these, you are making a <em>promise</em> to your reader.</p>",
        "id": 125817627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916041
    },
    {
        "content": "<p>You are saying \"isn't maths great, look at all the things we can do. Here is one thing we can do which is quite sensible -- we can sometimes take certain limits of schemes. And look, if my schemes are all \"small\" and the diagram is \"small\" then the limit of the diagram is \"small\" too.\"</p>",
        "id": 125817674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916124
    },
    {
        "content": "<p>And now you make the promise that throughout the 6000 pages which are about to follow</p>",
        "id": 125817677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916145
    },
    {
        "content": "<p>you promise you don't do anything pathological</p>",
        "id": 125817680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916153
    },
    {
        "content": "<p>which forces a universe change</p>",
        "id": 125817681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916159
    },
    {
        "content": "<p>Now that is a really big promise.</p>",
        "id": 125817682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916174
    },
    {
        "content": "<p>But some mathematicians are absolutely alive to that promise.</p>",
        "id": 125817714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916202
    },
    {
        "content": "<p>and it's those kinds of mathematicians, like Brian Conrad, who, when you mention the fpqc topology on a scheme, points out that in that situation you have not kept your promise.</p>",
        "id": 125817728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916235
    },
    {
        "content": "<p>because an arbitrary map between fields is quasi-compact</p>",
        "id": 125817730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916256
    },
    {
        "content": "<p>and there are a lot of fields</p>",
        "id": 125817736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916266
    },
    {
        "content": "<p>What I am pretty convinced about is that one day in the future when we have formalised schemes, and their etale cohomology, their fppf cohomology and their fpqc cohomology</p>",
        "id": 125817743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916319
    },
    {
        "content": "<p>then at some point there will be an issue with fpqc</p>",
        "id": 125817792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916331
    },
    {
        "content": "<p>which will manifest itself in some constructions having to be worked out slightly differently</p>",
        "id": 125817797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916355
    },
    {
        "content": "<p>because of universe issues</p>",
        "id": 125817798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916358
    },
    {
        "content": "<p>I believe that mathematicians hide that thought away</p>",
        "id": 125817799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916376
    },
    {
        "content": "<p>because it hopefully doesn't affect anything they do</p>",
        "id": 125817805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916391
    },
    {
        "content": "<p>Scott -- if you could just give me some working definition of a category and a site and a topos</p>",
        "id": 125817843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916444
    },
    {
        "content": "<p>then there is nothing stopping people from formalising definitions of these fancy cohomology theories in Lean</p>",
        "id": 125817846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916462
    },
    {
        "content": "<p>Proving anything non-trivial about these fancy cohomology theories would almost certainly be extemely difficult</p>",
        "id": 125817847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916482
    },
    {
        "content": "<p>however _defining_ them is another kettle of fish</p>",
        "id": 125817848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916495
    },
    {
        "content": "<p>I defined schemes over a month ago and am still yet to produce a single example because I have been caught up in notions of canonical isomorphism</p>",
        "id": 125817855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916517
    },
    {
        "content": "<p>but the definition is there</p>",
        "id": 125817856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916532
    },
    {
        "content": "<p>So let me know when you want to define some fancy cohomology theories on the category of schemes</p>",
        "id": 125817861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916557
    },
    {
        "content": "<p>and not prove anything about them</p>",
        "id": 125817863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916562
    },
    {
        "content": "<p>because this would be an extremely good stress test for your category theory library</p>",
        "id": 125817903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916585
    },
    {
        "content": "<p>and I believe it is within reach</p>",
        "id": 125817905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524916595
    }
]