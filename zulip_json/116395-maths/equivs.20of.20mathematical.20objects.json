[
    {
        "content": "<p>So part of the raison d'etre of the perfectoid project is to define a very complex mathematical object to see how Lean will handle it. Lean is handling it very well, but here is something which has come out in the wash.</p>\n<p>Mathematicians are very good at treating \"canonically isomorphic\" (whatever that means) objects as equal. This unlocks all the things we can do with equality, for example reflexivity, symmetry and transitivity, plus the ability to rewrite. In Lean we don't have that luxury, and every time I find objects in the background of the theory of perfectoid spaces which mathematicians are treating in this way I've been making an extension of <code>equiv</code>. So far we have <code>mul_equiv</code> (the bijection respects <code>*</code> on objects in the <code>has_mul</code> class) with notation <code>≃*</code>, <code>add_equiv</code> with notation <code>≃+</code> (these are in mathlib), and then <code>group_equiv</code> and <code>monoid_equiv</code> (which are literally defined to be <code>mul_equiv</code>!). Mathlib also has <code>ring_equiv</code> <code>≃ᵣ</code> and <code>homeomorph</code> <code>≃ₜ</code>. In the perfectoid repo we needed equivs of totally ordered monoids so I introduced <code>le_equiv</code> <code>≃≤</code> and its extension <code>≃≤*</code> (or <code>≃*≤</code>, I can't even remember what I called it).</p>\n<p>Today I realised that I needed equivs of topological spaces equipped with a presheaf of types, topological spaces equipped with a presheaf of rings, and topological spaces equipped with a presheaf of topological rings. </p>\n<p>My notation does not scale.</p>\n<p>Does anyone have any suggestions? Or am I really going to go with <code>presheaf_of_topological_rings_equiv</code>? This is not some artificial problem. A perfectoid space is a topological space with a sheaf of topological rings and some extra structure too, which is locally equiv to a structure coming from a perfectoid ring. The notion of isomorphism of complex objects is central to the definition.</p>",
        "id": 162458412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554318086
    },
    {
        "content": "<p>_If_ you're willing to work with bundled objects, you know that merely defining a <code>category</code> instance gives you <code>\\iso</code> as \"one <code>equiv</code> to rule them all\"?</p>",
        "id": 162460785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554319649
    },
    {
        "content": "<p>One can easily prove in <code>Type</code> that \"equiv is equiv to iso\" and in <code>Ring</code> that \"≃ᵣ is equiv to iso\", and so on.</p>",
        "id": 162460877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554319710
    },
    {
        "content": "<p>It would also have the benefit of making transport easier to do, because it won't need struts for every different type of equiv someone dreams up.</p>",
        "id": 162460937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554319760
    },
    {
        "content": "<p>(The short answer: this is what category theory was invented for.)</p>",
        "id": 162460967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554319782
    },
    {
        "content": "<p>Did you say \"if I am willing to go through the pain of constantly having to specify my universes everywhere then category theory solves this\"? Or is this viewpoint too pessimistic? We are about to make design decisions about this so we could even try both.</p>",
        "id": 162461938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554320448
    },
    {
        "content": "<p>Of course I could go rogue and just stick to <code>Type</code>! I think one model of ZFC is plenty for most mathematicians. I've never seen a perfectoid space which doesn't live in <code>Type</code>.</p>",
        "id": 162462370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554320804
    },
    {
        "content": "<p>You shouldn't need to specify your universes much more than usual. You'd write for example <code>(G : Group.{u})</code> rather than <code>(g : Type u) [group g]</code>--either way you have a <code>u</code>.</p>",
        "id": 162462774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554321101
    },
    {
        "content": "<p>Scott, I would love to be able to use category theory in this project. I don't quite understand why, but there seems to be a deep reason why it never works out. For instance, Johan spent months trying to do sheaves using the category theory part of mathlib, and gave up.</p>",
        "id": 162462875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554321143
    },
    {
        "content": "<p>You can also just use <code>Type</code> which is actually what I did in homotopy theory, since I didn't want to bother transporting the reals into every universe.</p>",
        "id": 162462886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554321148
    },
    {
        "content": "<p>Reid, we don't write <code>u</code>, we write <code>Type*</code> everywhere</p>",
        "id": 162462918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554321173
    },
    {
        "content": "<p>You could also use local notation to hide the universe variables of categories you use a lot, this is another thing I did in the homotopy theory library (<code>local notation Top := Top.{0}</code>, I think you should be able to put a universe variable there as well).</p>",
        "id": 162463125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554321337
    },
    {
        "content": "<p>I'm pretty dubious about this \"deep reason\". I never got to the end of reading Johan's work on sheaves, but there is a lot of good stuff there. He told me he couldn't prove <code>f_*</code> and <code>f^*</code>were adjoints, and then stopped. I would love to see all the earlier parts, of which there is a lot, PR'd, so others (including me) can start to process it, and we'll see what's involved in the adjunction problem.</p>",
        "id": 162468591,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554324819
    },
    {
        "content": "<p>It's time we got to the bottom of this really.</p>",
        "id": 162468908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554325030
    },
    {
        "content": "<p>I am tempted to try all approaches and see which one works best.</p>",
        "id": 162468923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554325047
    },
    {
        "content": "<p>I know that at the minute he is very busy with the perfectoid project. The PRs that were holding things up got merged today and now he has a bunch of stuff to do which he knows exactly how to do.</p>",
        "id": 162469579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554325445
    },
    {
        "content": "<p>I think I really will try all three approaches. I have an auxiliary category in mind which we need and it won't be much extra work to try with it bundled and unbundled</p>",
        "id": 162469655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554325518
    },
    {
        "content": "<p>Okay --- please please try the bundled approach, and ping me whenever I can help. :-) Life is going to be so much better in the long run if we can make this work.</p>",
        "id": 162469835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554325646
    },
    {
        "content": "<p>I remember before Reid saying that for a scheme, the underlying topological space is a thing, but in stark contrast to groups and rings etc, it's not that important a thing; somehow the important thing is the sheaf. I interpreted this as an argument for bundling schemes. The same logic applies, perhaps even more so, for adic spaces. Take a look at example 2.20 in <a href=\"http://www.math.uni-bonn.de/people/scholze/PerfectoidSpaces.pdf\" target=\"_blank\" title=\"http://www.math.uni-bonn.de/people/scholze/PerfectoidSpaces.pdf\">Scholze's original paper</a> (page 11 of the pdf). This is a picture of the closed unit disc over an algebraically closed field. In Tate's model of a rigid space this would literally be the points in the algebraically closed field of norm at most one. In the adic space approach the topological space is vastly more complex -- and this is only in dimension 1.</p>",
        "id": 162470885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554326447
    },
    {
        "content": "<p>I think we can retry the categorical approach.</p>",
        "id": 162498520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554359243
    },
    {
        "content": "<p>Morphisms of LRS should be doable, but of course they are a bit fake if we don't have the adjuction between <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>f</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">f^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub></mrow><annotation encoding=\"application/x-tex\">f_*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.175696em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>.</p>",
        "id": 162498572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554359292
    },
    {
        "content": "<p>The reason they are doable, is that we can define the morphisms in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub></mrow><annotation encoding=\"application/x-tex\">f_*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.175696em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, and it isn't hard to define <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub></mrow><annotation encoding=\"application/x-tex\">f_*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.175696em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>.</p>",
        "id": 162498575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554359332
    },
    {
        "content": "<p>Johan, sometime could you point me to where you try and fail to setup that adjunction?</p>",
        "id": 162498701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554359519
    },
    {
        "content": "<p>Maybe some explanation of the obstacle?</p>",
        "id": 162498759,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554359538
    },
    {
        "content": "<p>Sure... I'll first finish a nasty proof in the perfectoid project though (-;</p>",
        "id": 162498785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554359592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Why don't you think the proliferating equivs are not sustainable? You are basically noticing that there are lots of categories in the world</p>",
        "id": 162502497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364127
    },
    {
        "content": "<p>and using real categories isn't going to make anything easier - you still need one category for each algebraic structure or combination</p>",
        "id": 162502524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364176
    },
    {
        "content": "<p>It was the notation which I was concerned about. That was what prompted the thread.</p>",
        "id": 162502594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364223
    },
    {
        "content": "<p>The notation can be whatever</p>",
        "id": 162502598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364234
    },
    {
        "content": "<p>or none at all</p>",
        "id": 162502600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364238
    },
    {
        "content": "<p>if it gets obnoxious then just forget about notation</p>",
        "id": 162502611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364264
    },
    {
        "content": "<p>Maybe then I'm wondering if there could be some standard convention</p>",
        "id": 162502617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364271
    },
    {
        "content": "<p>The top space homeo is \\equiv\\_t</p>",
        "id": 162502622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364280
    },
    {
        "content": "<p>the ring one is \\equiv\\_r</p>",
        "id": 162502630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364295
    },
    {
        "content": "<p>those seem reasonable</p>",
        "id": 162502635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364306
    },
    {
        "content": "<p>but this doesn't scale because there are more than 26 things</p>",
        "id": 162502638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364312
    },
    {
        "content": "<p>and I'm not even convinced we have all 26 small letter subscripts anyway</p>",
        "id": 162502686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364329
    },
    {
        "content": "<p>you can use multiple letters or symbols?</p>",
        "id": 162502693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364343
    },
    {
        "content": "<p>OK I think you're saying this is not something to worry about</p>",
        "id": 162502706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364371
    },
    {
        "content": "<p>with conventions like <code>r = +*</code></p>",
        "id": 162502707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364371
    },
    {
        "content": "<p>As Scott points out, in maths we use the same notation for every single one of these</p>",
        "id": 162502725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364388
    },
    {
        "content": "<p>mathematicians can infer the structure</p>",
        "id": 162502728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364395
    },
    {
        "content": "<p>hm, we can't quite do that in lean because these are applied to types, rather than bundled things</p>",
        "id": 162502776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364443
    },
    {
        "content": "<p>I am going to dip my toe into the category theory world and see what happens.</p>",
        "id": 162502792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364474
    },
    {
        "content": "<p>you can always make a local notation but that's no good if you have two or three of them in one statement</p>",
        "id": 162502796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364483
    },
    {
        "content": "<p>In practice <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≅</mo></mrow><annotation encoding=\"application/x-tex\">\\cong</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.589em;\"></span><span class=\"strut bottom\" style=\"height:0.589em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mrel\">≅</span></span></span></span> in maths means \"isomorphism of all the structure\"</p>",
        "id": 162502816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364510
    },
    {
        "content": "<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.36687em;\"></span><span class=\"strut bottom\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mrel\">=</span></span></span></span> means \"canonical isomorphism of all the structure\"</p>",
        "id": 162502821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364529
    },
    {
        "content": "<p>we have such a great system, you should fix up your computer languages so they worked better.</p>",
        "id": 162502827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364549
    },
    {
        "content": "<p>:P</p>",
        "id": 162502831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364557
    },
    {
        "content": "<p>It's actually a problem of specification</p>",
        "id": 162502880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364567
    },
    {
        "content": "<p>I know it's a problem at our end really, I have only come to understand this through learning formalisation.</p>",
        "id": 162502891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364589
    },
    {
        "content": "<p>If I want to write <code>A ~= B</code> where A and B are types, then somehow I have to figure out \"all the structure\" on the types</p>",
        "id": 162502898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364604
    },
    {
        "content": "<p>that's the bit we're good at doing</p>",
        "id": 162502900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364615
    },
    {
        "content": "<p>99% of the time it's the maximal structure such that the notion is sensible</p>",
        "id": 162502911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364636
    },
    {
        "content": "<p>which means if \"structure\" is provided by typeclasses on A then more typeclasses changes the meaning of A ~= B</p>",
        "id": 162502914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364643
    },
    {
        "content": "<p>and when it's not we say \"...(considered as abelian groups only)\"</p>",
        "id": 162502918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364658
    },
    {
        "content": "<p>I think the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>≅</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\cong B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mrel\">≅</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> can change within a talk</p>",
        "id": 162502920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364679
    },
    {
        "content": "<p>if more structure appears on A and B</p>",
        "id": 162502969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364695
    },
    {
        "content": "<p>we play fast and loose</p>",
        "id": 162502974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364713
    },
    {
        "content": "<p>I can conceive of a tactic that does this, with a tad of parser support</p>",
        "id": 162502980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364735
    },
    {
        "content": "<p>but you still need to have a whole slew of ready made equivs to select from</p>",
        "id": 162502997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364771
    },
    {
        "content": "<p>Sebastian should get a notification every time someone mentions the parser</p>",
        "id": 162503003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364783
    },
    {
        "content": "<p>Are you interested in an equiv PR?</p>",
        "id": 162503004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364791
    },
    {
        "content": "<p>I'd like to finish perfectoids first but I have a bunch of them piled up in <code>for_mathlib</code></p>",
        "id": 162503061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364809
    },
    {
        "content": "<p>sure... I am aware that mathlib has many more algebraic classes than it has equivs, but in principle it should be about 1-1</p>",
        "id": 162503070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554364827
    },
    {
        "content": "<p>(My train's just got to Cambridge)</p>",
        "id": 162503084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554364857
    }
]