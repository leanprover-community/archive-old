[
    {
        "content": "<p>Do you think I should try to change it? At the moment it seems to me that it's just going to be cumbersome to restrict the ordering to the self-adjoint elements, and somehow we don't lose anything by just having a partial order on everything.</p>",
        "id": 212151804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601697492
    },
    {
        "content": "<p>Do you need an order on the complexes to talk about complex conjugation in this setting?</p>",
        "id": 212160202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601713142
    },
    {
        "content": "<p>Yes, you do. The order you want is just the one that makes each horizontal line in the complex plane incomparable with each other line. Would that be unpleasant/wrong to have as an instance? If so, that suggests we should investigate only asking for an order on the self adjoint elements.</p>",
        "id": 212165626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601722123
    },
    {
        "content": "<p>Are you really using the order on elements where the imaginary part is nonzero?</p>",
        "id": 212366372,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1601938554
    },
    {
        "content": "<p>If having this as an instance doesn't cause problems elsewhere, that might make a lot of things simpler, like stating inequalities involving complex numbers that we know are always real.</p>",
        "id": 212366462,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1601938620
    },
    {
        "content": "<p>No, I'm not using the order on non-self-adjoint elements at all.</p>",
        "id": 212368334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601939997
    },
    {
        "content": "<p>It's a question of whether it's worth the encumbrance of having to define the subtype of self-adjoint elements, and put an order just on that, and then describe how the star interacts with that order.</p>\n<p>Or to go with the current alternative, where it's much quicker to say how the order and the star structure should interact.</p>",
        "id": 212368526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601940087
    },
    {
        "content": "<p>I guess I better try out making <code>complex</code> a star-ordered ring, and see if anything complains.</p>",
        "id": 212368587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601940122
    },
    {
        "content": "<p>It seems making <code>complex</code> a star-ordered ring works fine.</p>",
        "id": 212407651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601979349
    },
    {
        "content": "<p>Excellent!</p>",
        "id": 212474415,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1602012892
    },
    {
        "content": "<p>This means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>‚â§</mo><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">z \\le w</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>‚àí</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">w - z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">‚àí</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> is a nonnegative real number?</p>",
        "id": 212474777,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602013056
    },
    {
        "content": "<p>Yes.</p>",
        "id": 212490730,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602021126
    },
    {
        "content": "<p>I just had a look at the <code>bell</code> branch -- looks good to me! Just one suggestion: what about changing <code>has_star</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_star</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>This way we could also use it for the adjoint of an operator of type <code>E ‚ÜíL[ùïú] F</code>.</p>",
        "id": 212837188,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1602255805
    },
    {
        "content": "<p>Unfortunately I don't think that typeclass resolution is going to enjoy this problem of having to work out <code>S</code> every time. I will try it, but I'm pretty confident that this is a no-go.</p>",
        "id": 212995191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602474333
    },
    {
        "content": "<p>So even putting <code>[has_star R R]</code> instead of <code>[has_star R]</code> would cause problems...?</p>",
        "id": 213311643,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1602691105
    },
    {
        "content": "<p>Yeah, I guess having to define notation for every space to avoid this would just defeat the purpose. Never mind!</p>",
        "id": 213317811,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1602693581
    }
]