[
    {
        "content": "<p>Can others reproduce this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- works BUT VARIABLES IN STUPID ORDER!</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- typechecks in under a second</span>\n<span class=\"kn\">theorem</span> <span class=\"err\">𝕍</span><span class=\"bp\">_</span><span class=\"n\">radical</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">radical</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kn\">theorem</span> <span class=\"err\">𝕍</span><span class=\"bp\">_</span><span class=\"n\">radical&#39;</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">radical</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 185938119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579282004
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- works fine</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"c1\">-- times out</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">theorem</span> <span class=\"err\">𝕍</span><span class=\"bp\">_</span><span class=\"n\">radical&#39;</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">radical</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 185938595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579282322
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- times out</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">theorem</span> <span class=\"err\">𝕍</span><span class=\"bp\">_</span><span class=\"n\">radical&#39;</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">𝕍</span> <span class=\"o\">((</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">radical</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 185938862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579282503
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"err\">𝕍</span><span class=\"bp\">_</span><span class=\"n\">radical&#39;</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">radical</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>So when do I need the up-arrows?</p>",
        "id": 185939013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579282611
    },
    {
        "content": "<p>And why did I not need them for comm_rings?</p>",
        "id": 185939040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579282628
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"err\">𝕍</span><span class=\"bp\">_</span><span class=\"n\">radical&#39;</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">radical</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">-- don&#39;t know how to synthesize placeholder</span>\n</pre></div>\n\n\n<p>gaargh</p>",
        "id": 185939383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579282851
    },
    {
        "content": "<p>why does it look so ugly?</p>",
        "id": 185939401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579282864
    },
    {
        "content": "<p>I am trying to sell this software to mathematicians</p>",
        "id": 185939414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579282880
    },
    {
        "content": "<p>I guess that you can play tricks, if you want. Where you make <code>k \\^n</code> notation for <code>fin n → k</code>, similar to the way that Mario made the <code>\\bbV</code> notation. Idem dito for <code>k[X_1, ..., X_n]</code>.</p>",
        "id": 185939868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579283221
    },
    {
        "content": "<p>But such hacks will likely break down fast</p>",
        "id": 185939882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579283235
    },
    {
        "content": "<p>Will Lean 4 be better in this regard?</p>",
        "id": 185941287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579284302
    },
    {
        "content": "<p>Do you need to have the displayed content equal to the keystrokes you type in? If not, then the VSCode plugin - if it was extended appropriately - could probably render formulas to latex</p>",
        "id": 185950175,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1579290609
    },
    {
        "content": "<p>No I definitely don't need this. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> can hacking VSCode give me <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">k^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> instead of <code>fin n -&gt; k</code>?</p>",
        "id": 185951101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579291307
    },
    {
        "content": "<blockquote>\n<p>Can others reproduce this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kn\">theorem</span> <span class=\"err\">𝕍</span><span class=\"bp\">_</span><span class=\"n\">radical&#39;</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">radical</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n</blockquote>\n<p>Diamonds. Two searches for <code>has_coe_to_fun</code> traverse <code>discrete_linear_ordered_field</code> 14,000x times each.</p>",
        "id": 185951618,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579291633
    },
    {
        "content": "<p>Daniel thank you so much for these advanced debugging comments. I am just writing MSc level mathematics in a mathematically normal way and coming up with these issues in Lean 3, I am quite excited about Lean 4 now.</p>",
        "id": 185951773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579291713
    }
]