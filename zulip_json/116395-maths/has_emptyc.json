[
    {
        "content": "<p>So I'm trying to show that something is a module. I was able to show that it's a semimodule, but when I try to give it a module structure:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"err\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"err\">ùïú</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I get this goal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">stuff</span><span class=\"o\">]</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">has_emptyc</span> <span class=\"o\">(</span><span class=\"n\">module</span> <span class=\"err\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"err\">ùïú</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>What is this <code>has_emptyc</code> thing? I thought that a semimodule over a ring (here k is a field) was automatically a module:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">abbreviation</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 203892320,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1594763091
    },
    {
        "content": "<p><code>{}</code> is notation for the empty collection!</p>",
        "id": 203892718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594763358
    },
    {
        "content": "<p>I think Thomas was aiming for the empty structure so that he could see which fields needed to be implemented.  I've used <code>{ }</code> before for this -- why is it the empty collection here?</p>",
        "id": 203892852,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594763448
    },
    {
        "content": "<p>Well, Lean doesn't seem to agree</p>",
        "id": 203892915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594763488
    },
    {
        "content": "<p>maybe because <code>module</code> is not a structure, but an abbreviation?</p>",
        "id": 203892943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594763510
    },
    {
        "content": "<p>So do I just not need to bother giving a module structure, since I've already given a semi_module structure?</p>",
        "id": 203893011,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1594763547
    },
    {
        "content": "<p>I think that's right</p>",
        "id": 203893061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594763588
    },
    {
        "content": "<p>You probably just need to make sure you have all the instances in the definition of <code>module</code>.  Like <code>add_comm_group (hom G ùïú V W)</code>.</p>",
        "id": 203893170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594763662
    },
    {
        "content": "<p>I have all that (it was needed when giving the semimodule structure)</p>",
        "id": 203893224,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1594763714
    },
    {
        "content": "<p>If you really needed to, I think you can write something like <code>{ semimodule . }</code> to make it clear to Lean that you want to write a structure literal, and for which kind of structure.</p>",
        "id": 203893408,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594763814
    },
    {
        "content": "<p>Oh, I see, the only difference is <code>module</code> requires there to be a <code>ring ùïú</code> instance, which you probably already have because it's a field (knowing what you're working on).</p>",
        "id": 203893497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594763875
    },
    {
        "content": "<p>Indeed, as <a href=\"#narrow/stream/113489-new-members/topic/Semialgebra/near/203665887\">recently discussed</a>, we could probably just remove <code>module</code> and rename <code>semimodule</code> to <code>module</code>.</p>",
        "id": 203893635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594763948
    },
    {
        "content": "<p>Actually, one thing that works is just this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"err\">ùïú</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"o\">[</span><span class=\"n\">do</span> <span class=\"n\">a</span> <span class=\"n\">bunch</span> <span class=\"n\">of</span> <span class=\"n\">stuff</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"err\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"err\">ùïú</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"o\">[</span><span class=\"n\">do</span> <span class=\"n\">a</span> <span class=\"n\">bunch</span> <span class=\"n\">of</span> <span class=\"n\">stuff</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>(previously I had \"semimodule\" instead of \"module\")</p>",
        "id": 203893819,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1594764071
    }
]