[
    {
        "content": "<p>So in <code>topology/sheaves/sheaf_condition</code> there are currently three equivalent formulations of the sheaf condition, all of which are stated for a sheaf valued in an arbitrary category. When working with type-valued sheaves, I find myself wanting a more explicit formulation, i.e. that for some family of open sets <code>U : ι → opens X</code>, every compatible family of sections <code>s : Π i : ι, F.obj (op (U i))</code> admits a unique gluing <code>t : F.obj (op (supr U))</code>. In particular I want to conclude that if two sections <code>s t : F.obj (op V)</code> agree locally on an open cover, they must already be equal. Is there a straight-forward way to obtain this fact from the categorical definition of the sheaf condition? The most promising lemma I found in the library is <code>unique_of_type_equalizer</code> in <code>category_theory/limits/shapes/types.lean</code>, which gives an explicit construction of equalizers in the category of types. Would this be the way to go?</p>\n<p>Follow-up question: Would an API for the sheaf condition of type-valued sheaves, which proves the facts from above, be desirable?</p>",
        "id": 231949255,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616758199
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/sheaves/local_predicate.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/sheaves/local_predicate.lean</a> was designed for working with \"hands-on\" sheaves</p>",
        "id": 231949441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616758299
    },
    {
        "content": "<p>But I forgot to what extent we know that all the different sheaf conditions can be swapped in and out for eachother</p>",
        "id": 231949509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616758332
    },
    {
        "content": "<p><code>local_predicate.lean</code> only talks about sheaves of functions, no?</p>",
        "id": 231949680,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616758429
    },
    {
        "content": "<p>Yes, I don't think <code>local_predicate.lean</code> is what you want.</p>",
        "id": 231950232,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616758713
    },
    {
        "content": "<p>The sheaf conditions in <code>topology/sheaves/sheaf_condition</code> are all proved equivalent. (We have yet more sheaf conditions for sheaves on a site, and I think they are still disconnected from the earlier development of sheaves on a space, however.)</p>",
        "id": 231950290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616758760
    },
    {
        "content": "<p>I suspect that what you want, <span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span>, is not actually there yet. This part of the library is pretty new!</p>",
        "id": 231950331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616758789
    },
    {
        "content": "<p>Oh, sorry, I think I misspoke about <code>local_predicate.lean</code>. Maybe Johan meant you should use it along with something in <code>sheafify</code> to reduce to the case of dependently typed functions.</p>",
        "id": 231951072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616759214
    },
    {
        "content": "<p>Fix some type family <code>Z : X \\to Type*</code>, and assume your sheaf <code>F</code> is any subsheaf of the sheaf of sections of this family. Then your statement is obviously true. Now, we construct sheafification of a presheaf <code>F</code> as follows. Let <code>Z</code> be the stalks of <code>F</code>. The sheafification of <code>F</code> is the sheaf of sections of <code>Z</code> which are locally germs. This ... means that the statement is true for any sheaf, because it is the same as its sheafification?</p>\n<p>(I have no idea if that argument is even true, let alone if it is easy to formalise given what we have... 90% of my knowledge of sheaves came from writing those files...)</p>",
        "id": 231951785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616759650
    },
    {
        "content": "<p>Okay, forget that argument for a bit.</p>\n<p>I don't think you need anything about <code>unique_of_type_equalizer</code>. You are just using that <code>equalizer.\\iota</code> is a mono, in the equalizer diagram for the sheaf condition.</p>",
        "id": 231952203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616759953
    },
    {
        "content": "<p>Thanks for the input! I'm going to keep experimenting and maybe PR something soon.</p>",
        "id": 231954233,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616761057
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import topology.sheaves.sheaf<br>\nimport category_theory.limits.types</p>\n<p>open Top<br>\nopen topological_space<br>\nopen opposite<br>\nopen category_theory<br>\nopen category_theory.limits</p>\n<p>universes u</p>\n<p>variables (X : Top.{u})<br>\nvariables (F : sheaf (Type u) X)<br>\nvariables {ι : Type u} (U : ι → opens X)</p>\n<p>lemma ext {f g : F.presheaf.obj (op (supr U))} <br>\n  (w : ∀ i, <a href=\"http://F.presheaf.map\">F.presheaf.map</a> (opens.le_supr U i).op f = <a href=\"http://F.presheaf.map\">F.presheaf.map</a> (opens.le_supr U i).op g ) : <br>\n  f = g :=<br>\nbegin<br>\n  have := mono_of_is_limit_parallel_pair (F.sheaf_condition U),<br>\n  have := (mono_iff_injective _).mp this,<br>\n  apply this,<br>\n  ext,<br>\n  dsimp [presheaf.sheaf_condition_equalizer_products.res],<br>\n  simp,<br>\n  apply w,<br>\nend</p>\n</div></div>",
        "id": 231954450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616761174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Sheaf.20condition.20for.20type-valued.20sheaf/near/231952203\">said</a>:</p>\n<blockquote>\n<p>You are just using that <code>equalizer.\\iota</code> is a mono</p>\n</blockquote>\n<p>Right, this would also be an option, however this only gives me uniqueness of a gluing, but not existence I think.</p>",
        "id": 231954454,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616761177
    },
    {
        "content": "<p>Ah, I was answering directly \"In particular I want to conclude that if two sections s t : F.obj (op V) agree locally on an open cover, they must already be equal.\"</p>",
        "id": 231954529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616761206
    },
    {
        "content": "<p>(This is done in the spoiler block above.)</p>",
        "id": 231954541,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616761216
    },
    {
        "content": "<p>True, for that it would suffice</p>",
        "id": 231954610,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616761255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Sheaf.20condition.20for.20type-valued.20sheaf/near/231954541\">said</a>:</p>\n<blockquote>\n<p>(This is done in the spoiler block above.)</p>\n</blockquote>\n<p>Oh thanks a lot!</p>",
        "id": 231954632,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616761268
    },
    {
        "content": "<p>I better sleep. Have fun, looking forward to the PRs!</p>",
        "id": 231954661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616761273
    },
    {
        "content": "<p>I think this formulation is given by the definition of the sheaf condition in category_theory/sites/sheaf</p>",
        "id": 231956362,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616762204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/Sheaf.20condition.20for.20type-valued.20sheaf/near/231956362\">said</a>:</p>\n<blockquote>\n<p>I think this formulation is given by the definition of the sheaf condition in category_theory/sites/sheaf</p>\n</blockquote>\n<p>I don't know much about sheaves on sites/topoi unfortunately, so this seems like even more categorical overhead to me...</p>",
        "id": 231961278,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616764380
    },
    {
        "content": "<p>Can sheaves on spaces be easily subsumed by this more general framework?</p>",
        "id": 231961530,
        "sender_full_name": "Justus Springer",
        "timestamp": 1616764486
    },
    {
        "content": "<p>Right -- given a top space you can make a site, and a sheaf on the space is the same thing as a sheaf on the site.</p>",
        "id": 231962419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616764837
    },
    {
        "content": "<p>On paper...<br>\nIn Lean, they are different beasts, and so you will need to work your way through an equivalence of categories <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 231963502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616765245
    },
    {
        "content": "<p>Right - it's on my todo list to make the passage between the two smoother</p>",
        "id": 231976702,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616769958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span>, thanks for that pair of PRs. They look really nice, and much better than what we have at the moment.</p>",
        "id": 232569270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617187474
    },
    {
        "content": "<p>Thanks a lot!<br>\nI'm now learning more about sites, so I might be able to help building the bridges between sheaves on spaces and sheaves on sites in the future.</p>",
        "id": 232572564,
        "sender_full_name": "Justus Springer",
        "timestamp": 1617189351
    },
    {
        "content": "<p>By the way, is <a href=\"https://github.com/leanprover-community/mathlib/issues/5927\">#5927</a> still being developed <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> ?</p>",
        "id": 232573338,
        "sender_full_name": "Justus Springer",
        "timestamp": 1617189768
    },
    {
        "content": "<p>I think the changes there were mostly just about names and docs which I just haven't got around to fixing yet!</p>",
        "id": 232578908,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617192679
    }
]