[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I can prove this by cases on <code>d</code> but it's a bit horrible. Is there a tactic which does this painlessly?</p>",
        "id": 133062403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535638182
    },
    {
        "content": "<p>aargh an undergrad just told me that they need this mod 8 :-/</p>",
        "id": 133062639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535638411
    },
    {
        "content": "<p>If Lean has Omega, that will definitely take care of the original one by itself.</p>",
        "id": 133062778,
        "sender_full_name": "cbailey",
        "timestamp": 1535638537
    },
    {
        "content": "<p>Apparently what they actually need is <code>example (d : ℤ) : d ^ 2 ≡ 0 [ZMOD 8] ∨ d ^ 2 ≡ 1 [ZMOD 8] ∨ d ^ 2 ≡ 4 [ZMOD 8] := sorry</code></p>",
        "id": 133062894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535638616
    },
    {
        "content": "<p>which can done by cases on d mod 8 (check it's true for all 8 values)</p>",
        "id": 133062911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535638632
    },
    {
        "content": "<p>(and use the fact that <code>a ≡ b [ZMOD 8] -&gt; a ^ 2 ≡ b ^ 2[ZMOD 8]</code>. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> how far is this from <code>dec_trivial</code>?</p>",
        "id": 133062991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535638686
    },
    {
        "content": "<p>Would the original one be something that <code>linarith</code> could do? I have no good feeling for this yet...</p>",
        "id": 133063069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535638790
    },
    {
        "content": "<p>I think Lean does not have Omega yet.</p>",
        "id": 133063121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535638806
    },
    {
        "content": "<p>But it has <code>linarith</code> (but not on my laptop, because compiling Lean takes forever...)</p>",
        "id": 133063144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535638830
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_of_coe_nat_lt_coe_nat</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n    <span class=\"n\">clear</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H1</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133063167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535638862
    },
    {
        "content": "<p>No, <code>linarith</code> won't work for a few reasons. In particular, it's only complete for dense orders.</p>",
        "id": 133063190,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535638871
    },
    {
        "content": "<p>It's also not set up to handle disjunctions or proving equality goals right now, although in principle that can happen.</p>",
        "id": 133063234,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535638918
    },
    {
        "content": "<blockquote>\n<p>No, <code>linarith</code> won't work for a few reasons. In particular, it's only complete for dense orders.</p>\n</blockquote>\n<p>What is a dense order? You had examples with <code>int</code> right?</p>",
        "id": 133063792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535639387
    },
    {
        "content": "<p>a dense order is one such that for every a and b there is c with a&lt;c&lt;b</p>",
        "id": 133063915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535639510
    },
    {
        "content": "<p>Something like <code>∀ x y, x &lt; y → ∃ z, x &lt; z ∧ y &lt; z</code>. It will work on many problems in <code>int</code>, but it isn't complete, meaning there are provable things it will fail on.</p>",
        "id": 133063916,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535639514
    },
    {
        "content": "<p>In theory, over <code>real</code> or <code>rat</code> it will either succeed with a proof or fail with a counterexample.</p>",
        "id": 133063984,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535639561
    },
    {
        "content": "<p>(I didn't implement counterexamples yet.)</p>",
        "id": 133064004,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535639579
    },
    {
        "content": "<p>Right, so dense orders are what I thought they were. And <code>int</code> is not a dense order. So every time <code>linarith</code> succeeds on <code>int</code> we are just being lucky?</p>",
        "id": 133064475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535640017
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">why_isnt_this_in_mathlib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_mod_self_left</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">%</span><span class=\"n\">c</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_mod_self_left</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_mod_self_left</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≡</span> <span class=\"mi\">4</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_mul_self</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"err\">↑</span><span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"err\">↑</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"err\">↑</span><span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"err\">↑</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"err\">↑</span><span class=\"mi\">4</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"err\">↑</span><span class=\"mi\">8</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_modeq_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_modeq_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_modeq_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">why_isnt_this_in_mathlib</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">H1</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133064488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535640037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> done</p>",
        "id": 133064490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535640040
    },
    {
        "content": "<blockquote>\n<p>Right, so dense orders are what I thought they were. And <code>int</code> is not a dense order. So every time <code>linarith</code> succeeds on <code>int</code> we are just being lucky?</p>\n</blockquote>\n<p>Yep. You'll get lucky on any problem that doesn't depend on the discrete-ness of integers.</p>",
        "id": 133064697,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535640244
    },
    {
        "content": "<p>This is my attempt</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≡</span> <span class=\"mi\">4</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">d</span><span class=\"bp\">;</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</pre></div>\n\n\n<p>Although this is not as easy as I'd like it to be.</p>",
        "id": 133065783,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535641513
    },
    {
        "content": "<p>ah!!! you did zmod</p>",
        "id": 133066087,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535641842
    },
    {
        "content": "<p>I was reducing it to nat instead</p>",
        "id": 133066093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535641848
    },
    {
        "content": "<p>Thanks Kenny. I had tried <code>dec_trivial</code> but before applying <code>int.le_of_coe_nat_lt_coe_nat</code>.</p>",
        "id": 133067558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535643421
    },
    {
        "content": "<p>So Chris reduces it to something which is known to be finite. That's another trick. But <code>dec_trivial</code> doesn't work with <code>int</code>? Is this because it could work but there's just some missing code? Is it possible for someone to write some behind-the-scenes code and then after that we have things like <code>example (d : ℤ) : -3 &lt; d ∧ d &lt; 2 → d = -2 ∨ d = -1 ∨ d = 0 ∨ d = 1 := dec_trivial</code>?</p>",
        "id": 133067797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535643638
    }
]