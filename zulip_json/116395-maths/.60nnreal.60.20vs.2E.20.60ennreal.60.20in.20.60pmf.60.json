[
    {
        "content": "<p>I've been working with <code>pmf</code> a lot recently in a project to formalize some cryptography constructions in Lean. This works well to represent the distributions associated to a computation, but as I write more complicated constructions I've been running into more and more issues involving <code>summable</code> requirements in <code>nnreal</code>. </p>\n<p>I've been playing around with using <code>{ f : α → ℝ≥0∞ // has_sum f 1 }</code> as the definition of a <code>pmf</code> instead, since <code>summable</code> is automatic in <code>ennreal</code>. In particular <code>pmf.bind</code> becomes much more workable.  It also simplifies working with the <code>outer_measure</code> associated to a <code>pmf</code>, which had been somewhat complicated when I originally defined it.</p>\n<p>I have a branch implementing this change, which just has a few holes left. In general it seems to shorten most of the existing proofs and definitions. Would there be any reason to avoid making this change? Otherwise I can open a PR for it when the last few changes are finished.</p>",
        "id": 303518183,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1665521568
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span></p>",
        "id": 303555152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665547003
    },
    {
        "content": "<p>I've cleaned up my branch and opened a PR <a href=\"https://github.com/leanprover-community/mathlib/pull/17032\">#17032</a> for this refactor if anyone wants to compare the changes. <code>pmf</code> isn't used anywhere else, so I didn't really need to touch anything else within actual mathlib itself.</p>",
        "id": 304540314,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1666034544
    },
    {
        "content": "<p>I like this change. I tried using pmf for something a while back and found the constant coercion between <code>nnreal</code> and <code>ennreal</code> a bit annoying. I don't use 'pmf` that often to have a strong opinion about this however.</p>",
        "id": 304553197,
        "sender_full_name": "Jason KY.",
        "timestamp": 1666038963
    },
    {
        "content": "<p>Sorry, I was asked to participate to the discussion by Johan, perhaps because this has to do with probability, but I did not comment. The reason for that is that although this pmf construction is in the probability folder, it is very much isolated and I have never used it, so I don't have much to say.<br>\nBut in general, about nnreal vs ennreal: if you find that you suffer less from non-math troubles like coercions or obvious summable arguments with ennreal, then go for it!</p>",
        "id": 304620161,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1666076133
    },
    {
        "content": "<p>This sounds like interesting and useful work.</p>",
        "id": 304657950,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666092387
    },
    {
        "content": "<p>(Devon: I've suggested and pondered before the value of a \"finprod\" or \"finpmf\", the idea being that this is for when you have some pmf with either finite domain or finite support. I'm thinking in a similar context to you, I suspect... but I'm not sure if there's any value in it really. I do think it would be good to define entropy suitably sometime but that's a whole other question.)</p>",
        "id": 304759154,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666107601
    },
    {
        "content": "<p>I've actually done a lot of work on the finite support case, but it's on the level of probabilistic computation rather than the associated probability distributions. If you'd be interested I don't think it would be difficult for me to move it down a level of abstraction to pmf instead. I've found it somewhat useful, mainly because it allows the outer measure stuff to be expressed with finset.sum (similar with pmf.bind)</p>",
        "id": 304829042,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1666122531
    },
    {
        "content": "<p>Well, I guess it depends what level you think it's most useful on.</p>",
        "id": 305102683,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666254739
    },
    {
        "content": "<p>But yeah I can imagine it is good for that.</p>",
        "id": 305102750,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666254767
    },
    {
        "content": "<p>One might want to consider subdistributions instead of distributions ofc.</p>",
        "id": 305102831,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666254795
    },
    {
        "content": "<p>Would anyone be able to take a second pass through <a href=\"https://github.com/leanprover-community/mathlib/pull/17032\">#17032</a> ? Getting this merged would help with a lot of other things downstream</p>",
        "id": 308502162,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1667869405
    }
]