[
    {
        "content": "<p>I'd like to redefine the orthogonal projection in an inner product space.  Currently (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/orthogonal_projection\">docs#orthogonal_projection</a>) the orthogonal projection from <code>E</code> to <code>K</code> is a linear map from <code>E</code> to <code>E</code>.  It would be useful to me if it were instead a linear map from <code>E</code> to <code>K</code>.  Here's a (un-golfed) branch experimenting with the change:  <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-orthogonal-projection\">branch#redefine-orthogonal-projection</a></p>\n<p>Some consequences:  Currently the junk value of the orthogonal projection (if <code>K</code> is not complete) is the identity map.  This gets changed to be the zero map.  This in turn causes problems in defining the <em>affine</em> orthogonal projection, because (lack of basepoints) there is no such thing as the zero map onto an affine subspace.  So I keep the affine orthogonal projection in its old definition, a map from the full space to itself.  This is a little inconsistent, but since practically all lemmas already required the hypothesis of completeness of the subspace, it doesn't affect many proofs.</p>\n<p>Any comments, advice, preferences, objections?</p>",
        "id": 219860441,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607961266
    },
    {
        "content": "<p>E.g., you can assume <code>[nonempty K]</code> and use the <code>const</code> affine map.</p>",
        "id": 219868673,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607964520
    },
    {
        "content": "<p>OK, I made a start on this, adding <code>[nonempty K]</code> as a precondition for the affine orthogonal projection, and fixing most of the sorries in <code>geometry.euclidean.basic</code>.  But as I did this, the following thought occurred to me:  one could instead require <code>[complete_space K]</code> as a precondition for both the standard and affine orthogonal projections, and then it wouldn't be necessary to define a junk value for the orthogonal projection at all.  Any objections to this?</p>",
        "id": 219911606,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607984987
    },
    {
        "content": "<p>The main issue is that this means using typeclass inference on a subtype (<code>[nonempty K]</code> rather than <code>(K : set E).nonempty</code>, <code>[complete_space K]</code> rather than <code>is_complete (K : set E)</code>), and I have somewhere picked up the impression that this is bad form.</p>",
        "id": 219912169,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607985272
    },
    {
        "content": "<p>Higher-level results using orthogonal projections, or using reflection in an affine subspace which is built on orthogonal projections, are less likely to have any hypotheses of things being complete or nonempty, as those things tend to follow from other hypotheses. E.g. <code>geometry.euclidean.monge_point</code> uses <code>reflection</code>, but never mentions <code>complete</code> or <code>nonempty</code> anywhere; various lemmas in <code>geometry.euclidean.circumcenter</code> also use <code>reflection</code> or <code>orthogonal_projection</code> without needing to mention that the subspace in question has the right properties. Can type class inference be made to deduce those properties for the spaces mentioned in lemma statements (<code>affine_span</code> of various finite nonempty sets of points, for example), so that it's still possible to write the existing higher-level lemma statements using those functions without needing to add extra type class hypotheses to those lemmas?</p>",
        "id": 219930940,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1607999594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> thank you for thinking about this!</p>\n<p>I was thinking that we could declare instances such as this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">finite_dimensional.complete</span> <span class=\"bp\">ùïú</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">span_of_finite</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">finset.finite_to_set</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(I wrote the \"standard\" rather than affine version because I am more familiar with that theory).  I don't know if this is a dangerous instance in any way?  It passes <code>#lint</code>.</p>",
        "id": 219932719,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608001780
    },
    {
        "content": "<p>See the note at <a href=\"https://github.com/leanprover-community/mathlib/blob/d1904fcefd91257829a4209966320cc64b9a71a9/src/analysis/normed_space/finite_dimension.lean#L294`\"><code>finite_dimensional.complete</code></a> for why I'm a little hesitant about this instance -- but if I understand correctly, the unknown metavariable issue mentioned in that context would not apply here.</p>",
        "id": 219933247,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608002300
    },
    {
        "content": "<p>Yes, <code>ùïú</code> is already in the type.</p>",
        "id": 219933428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608002495
    },
    {
        "content": "<p>In fact, since the field is fixed to <code>‚Ñù</code> throughout the Euclidean geometry libraries, would it be safe to declare an instance like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.euclidean.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">affine_subspace</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">affine_subspace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">s.direction</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">s.direction</span> <span class=\"o\">:=</span>\n<span class=\"n\">finite_dimensional.complete</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">s.direction</span>\n</code></pre></div>",
        "id": 219934626,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608003657
    },
    {
        "content": "<p>Why do you need <code>affine_subspace</code> here? AFAIR, we already have an instance deducing <code>complete_space V</code> from <code>finite_dimensional \\R V</code></p>",
        "id": 219937410,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608007191
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.complete\">docs#finite_dimensional.complete</a>, but this is a lemma, not an instance, because of the unknown metavariable issue.</p>",
        "id": 219939063,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608009528
    },
    {
        "content": "<p>I was saying that in contexts where the field is known, such as in the Euclidean geometry libraries, it seems it would be safe to upgrade it to an instance?</p>",
        "id": 219939070,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608009576
    },
    {
        "content": "<p>Over the reals, it's already registered as an instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>(through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.proper_real\">docs#finite_dimensional.proper_real</a>). It also applies over the complexes as all the instances to see a complex vector space as a real vector space are already there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚ÑÇ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">‚ÑÇ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 219951852,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608023511
    },
    {
        "content": "<p>That's a pretty impressive instance search, by the way, and it only takes 68ms. Before the fork and Gabriel's work, I doubt it would have succeeded.</p>",
        "id": 219952919,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608024175
    },
    {
        "content": "<p>Thanks. Together with <code>finite_dimensional</code> instances such as those in <code>linear_algebra.affine_space.finite_dimensional</code> that ought to be able to deal with deducing <code>complete_space</code> where needed (but maybe more <code>nonempty</code> instances will be needed so that type class inference can deduce that affine subspaces are nonempty, so can be coerced to affine spaces, so that orthogonal projection onto them can be defined).</p>",
        "id": 219985438,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1608042236
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5408\">#5408</a></p>",
        "id": 220249561,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608215435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span>, could you look through this, in addition to whichever maintainer takes this on?</p>",
        "id": 220249593,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608215456
    }
]