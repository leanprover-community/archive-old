[
    {
        "content": "<p>There are the following definitions in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">supr</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>You can see that the order after the existential quantifiers is swapped. Therefore, <code>supr f</code>and <code>Sup (range f)</code> are not defeq. Is this on purpose or by accident? More importantly, if I want to unify the two, which one should I choose? I would rather use the first one <code>∃i, a = s i</code>, which could help the simplifier to rewrite <code>a</code> if at some point we end up with an assumption of the form <code>a = s i</code>, but there might be some reason I am missing for the current definition of <code>range</code>.</p>",
        "id": 147609120,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542129723
    },
    {
        "content": "<p>Additional data point:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 147609524,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542129891
    },
    {
        "content": "<p>oops, I never realized this. I would keep <code>range</code> (as it is similar to <code>image</code>), and change <code>supr</code>.</p>",
        "id": 147609790,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542130146
    },
    {
        "content": "<p>the variable on the right thing is also consistent with the definition of <code>eq</code></p>",
        "id": 147610281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542130505
    },
    {
        "content": "<blockquote>\n<p>the variable on the right thing is also consistent with the definition of <code>eq</code></p>\n</blockquote>\n<p>Not sure I get it (too many variables around :). Do you mean that you also think that the definition of <code>supr</code> and <code>image</code> is right, and that I should fix <code>range</code>?</p>",
        "id": 147611469,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542130899
    },
    {
        "content": "<p><code>range</code> and <code>image</code> are the same (the function application is left, and the set-comprehension variable is right). For <code>supr</code> it is the other way round</p>",
        "id": 147612064,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542131447
    },
    {
        "content": "<p>Shouldn't <code>supr</code> be redefined to use <code>range</code> explicitly?</p>",
        "id": 147612160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542131528
    },
    {
        "content": "<p>Yes, <code>def supr (s : ι → α) : α := Sup (range s)</code></p>",
        "id": 147612244,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542131642
    },
    {
        "content": "<p>Maybe then we should rename <code>infi</code> to <code>infr</code>, and then the <code>r</code> stands for <code>range</code> <span class=\"emoji emoji-1f643\" title=\"upside down\">:upside_down:</span> <span class=\"emoji emoji-1f648\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 147612351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542131728
    },
    {
        "content": "<blockquote>\n<p>Yes, <code>def supr (s : ι → α) : α := Sup (range s)</code></p>\n</blockquote>\n<p>Done in #PR474. It was slightly more painful than I expected, as I had to fix the library all over the place...</p>",
        "id": 147655093,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542185818
    }
]