[
    {
        "content": "<p>I am trying to show that, under certain conditions, for topological spaces X and Y, the space of locally constant functions from X to Y are a subset of <code>C(X,Y)</code>. The issue is, both <code>locally_constant X Y</code> and <code>C(X,Y)</code> are <code>structures</code>. In this case, how does one think of (or construct) subsets? I thought an alternative might be to show an injection. Moreover, in particular cases, there are results which show that <code>C(X,R)</code> is an <code>R</code>-<code>semimodule</code>, then why does <code>has_subset C(X,R)</code> need to be proved? Here is an mwe of what I am trying to do :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integration</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.padics.padic_integers</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.category.Profinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.locally_constant.algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.continuous_functions</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">semi</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">locally_constant</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">uniform</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"n\">completeness</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"n\">sub</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">locally_constant</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which gives me an error :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">topological_ring</span> <span class=\"n\">R</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Any help is appreciated, thank you!</p>",
        "id": 229546135,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1615321143
    },
    {
        "content": "<p>You're right, you should make an injective map from <code>locally_constant X R</code> to <code>C(X,R)</code>, it's not literally a subset!</p>",
        "id": 229547262,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615321575
    },
    {
        "content": "<p>Probably an injective homomorphism of algebras.</p>",
        "id": 229547328,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615321604
    },
    {
        "content": "<p>Maybe you could define a <code>has_coe</code> instance too, so that you can use the map (semi-)silently as a coercion.</p>",
        "id": 229547696,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615321745
    },
    {
        "content": "<p>For reference, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_add_monoid_hom\">docs#linear_map.to_add_monoid_hom</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_add_monoid_hom_injective\">docs#linear_map.to_add_monoid_hom_injective</a> are the types of statement you could make here</p>",
        "id": 229549055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615322218
    },
    {
        "content": "<p>Where those ones say \"linear_maps are a subset of add_monoid_hom\"s</p>",
        "id": 229549175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615322273
    }
]