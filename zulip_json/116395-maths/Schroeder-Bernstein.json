[
    {
        "content": "<p>There's a stronger version of the Schroeder-Bernstein theorem</p>\n<div class=\"codehilite\"><pre><span></span>theorem schroeder_bernstein {f : α → β} {g : β → α}\n  (hf : injective f) (hg : injective g) : ∃h:α→β, bijective h := ...\n</pre></div>\n\n\n<p>that further promises that for each <code>a : α</code>, either <code>h a = f a</code>, or <del><code>\\exists b : β, g (h a) = a</code></del> oops, <code>g (h a) = a</code>.</p>\n<p>We don't seem to have that form. Does anyone have it in a secret stash, or feels like adding it? :-)</p>",
        "id": 175591319,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568346419
    },
    {
        "content": "<p>It follows from the proof! What more do you need? ;-)</p>",
        "id": 175591675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568346998
    },
    {
        "content": "<p>I agree with Kevin, it's pretty easy to adapt the proof to get this (also, the exists b should be deleted in that statement)</p>",
        "id": 175591769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568347173
    },
    {
        "content": "<p>(Assuming mathlib used the proof I know ;-) )</p>",
        "id": 175592062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568347579
    },
    {
        "content": "<p>what does <code>''</code> mean in e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/b5b40c749f2f581778e5d72907eca1aa663962b1/src/set_theory/schroeder_bernstein.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/b5b40c749f2f581778e5d72907eca1aa663962b1/src/set_theory/schroeder_bernstein.lean\">https://github.com/leanprover-community/mathlib/blob/b5b40c749f2f581778e5d72907eca1aa663962b1/src/set_theory/schroeder_bernstein.lean</a></p>",
        "id": 175592132,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568347686
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/34d69b5054549f6cc2de9a6311be5cba9c595977/src/data/set/basic.lean#L809\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/34d69b5054549f6cc2de9a6311be5cba9c595977/src/data/set/basic.lean#L809\">https://github.com/leanprover-community/mathlib/blob/34d69b5054549f6cc2de9a6311be5cba9c595977/src/data/set/basic.lean#L809</a></p>",
        "id": 175592241,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1568347919
    },
    {
        "content": "<p>Tldr: image</p>",
        "id": 175592289,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1568347954
    },
    {
        "content": "<p>Okay... I'm unlikely to do this myself, but I hope someone does it sometime!</p>",
        "id": 175592754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568348635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">fixed_points</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">function</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">zorn</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span> <span class=\"n\">set</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">function</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">embedding</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">schroeder_bernstein&#39;</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">bijective</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">lfp</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n  <span class=\"k\">from</span> <span class=\"n\">lfp_eq</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">compl_subset_compl</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"n\">image_subset</span> <span class=\"bp\">_</span> <span class=\"err\">$</span>\n    <span class=\"n\">compl_subset_compl</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"n\">image_subset</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"k\">have</span> <span class=\"n\">hns</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">neg_eq_neg_of_eq</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span>\n\n<span class=\"k\">let</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">inv_fun</span> <span class=\"n\">β</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span> <span class=\"n\">α</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">g&#39;g</span> <span class=\"o\">:</span> <span class=\"n\">g&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">left_inverse_inv_fun</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hg</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hg&#39;ns</span> <span class=\"o\">:</span> <span class=\"n\">g&#39;</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hns</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">image_comp</span><span class=\"o\">,</span> <span class=\"n\">g&#39;g</span><span class=\"o\">,</span> <span class=\"n\">image_id</span><span class=\"o\">],</span>\n\n<span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">g&#39;</span> <span class=\"n\">a</span> <span class=\"k\">in</span>\n\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">calc</span> <span class=\"n\">h</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"n\">h</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">image_union</span><span class=\"o\">,</span> <span class=\"n\">union_compl_self</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"n\">g&#39;</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"err\">∪</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">image_congr</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}))</span>\n        <span class=\"o\">(</span><span class=\"n\">image_congr</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">})</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hg&#39;ns</span><span class=\"o\">,</span> <span class=\"n\">union_compl_self</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"n\">surjective</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">h</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"k\">in</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n\n<span class=\"k\">have</span> <span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">y</span><span class=\"err\">∉</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">hns</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"n\">hy&#39;</span><span class=\"o\">,</span> <span class=\"n\">eq_y&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"k\">in</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">eq</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">y&#39;</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">eq_y&#39;</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g&#39;g</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">y&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">hy&#39;</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">injective</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">eq</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">eq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">hns</span><span class=\"o\">],</span>\n        <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">hx&#39;</span><span class=\"o\">,</span> <span class=\"n\">eqx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"k\">in</span>\n        <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">hns</span><span class=\"o\">],</span>\n        <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"n\">hy&#39;</span><span class=\"o\">,</span> <span class=\"n\">eqy</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"k\">in</span>\n        <span class=\"k\">have</span> <span class=\"n\">g&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">eq</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">eqx</span><span class=\"o\">,</span> <span class=\"n\">eqy</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n        <span class=\"k\">have</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">g&#39;g</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">eqx</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y&#39;</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">eqy</span><span class=\"o\">)),</span>\n\n  <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"err\">‹</span><span class=\"n\">injective</span> <span class=\"n\">h</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"err\">‹</span><span class=\"n\">surjective</span> <span class=\"n\">h</span><span class=\"err\">›</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"bp\">_⟩⟩</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Ha</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n            <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">),</span> <span class=\"n\">apply</span> <span class=\"n\">inv_fun_eq</span><span class=\"o\">,</span>\n              <span class=\"k\">have</span> <span class=\"n\">Ha&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">}}}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">embedding</span>\n<span class=\"kn\">end</span> <span class=\"n\">function</span>\n</pre></div>",
        "id": 175641802,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1568393092
    },
    {
        "content": "<p>i'm not a fan of huge proofs like this</p>\n<p>is it worse to define auxiliary constructions and lemmas as <code>private</code> declarations in a separate section?</p>",
        "id": 175642053,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1568393262
    },
    {
        "content": "<p>Yes, I was surprised how monolithic this proof was, and I think it's definitely better style to break out intermediate lemmas and constructions. Ideally one would have been able to prove this stronger version of SB just by adding some lemmas, not having to break into the old proof.</p>",
        "id": 175671753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568416127
    },
    {
        "content": "<p>I don't think the intermediate results even need to be private.</p>",
        "id": 175671777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568416145
    },
    {
        "content": "<p>You could prove the Knaster-Tarski theorem first (<a href=\"https://ncatlab.org/nlab/show/fixed+point#knastertarski_theorem\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/fixed+point#knastertarski_theorem\">https://ncatlab.org/nlab/show/fixed+point#knastertarski_theorem</a>), then CBS, as in <a href=\"https://ncatlab.org/nlab/show/Cantor-Schroeder-Bernstein+theorem#proof\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/Cantor-Schroeder-Bernstein+theorem#proof\">https://ncatlab.org/nlab/show/Cantor-Schroeder-Bernstein+theorem#proof</a> (interestingly, this still constructs the same bijection, which has the properties Scott wanted above)</p>",
        "id": 175694751,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1568457697
    },
    {
        "content": "<p>There's also some deep discussion here: <a href=\"https://golem.ph.utexas.edu/category/2014/12/a_categorical_understanding_of.html\" target=\"_blank\" title=\"https://golem.ph.utexas.edu/category/2014/12/a_categorical_understanding_of.html\">https://golem.ph.utexas.edu/category/2014/12/a_categorical_understanding_of.html</a></p>",
        "id": 175694811,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1568457794
    },
    {
        "content": "<p>i thought this proof did use tarski-knaster, in the guise of <code>lfp</code></p>",
        "id": 175704042,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1568471902
    },
    {
        "content": "<p>Oh, I see. I didn't read through it <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 175951321,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1568756138
    }
]