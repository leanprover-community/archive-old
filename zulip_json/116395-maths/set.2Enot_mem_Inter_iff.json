[
    {
        "content": "<p>Do we have this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">not_mem_Inter</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>\n\n\n<p>What's it called?</p>",
        "id": 185542951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578953123
    },
    {
        "content": "<p>It would be a convenient thing for me to rewrite.</p>",
        "id": 185543231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578953315
    },
    {
        "content": "<p>I think you can just rewrite <code>mem_Inter</code></p>",
        "id": 185544422,
        "sender_full_name": "Joe",
        "timestamp": 1578954109
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">not_mem_Inter</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Inter</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 185544428,
        "sender_full_name": "Joe",
        "timestamp": 1578954118
    },
    {
        "content": "<p>Wow -- I am surprised that the rewrite works -- but it does!</p>",
        "id": 185544647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578954246
    },
    {
        "content": "<p>haha, thanks.</p>",
        "id": 185545068,
        "sender_full_name": "Joe",
        "timestamp": 1578954541
    },
    {
        "content": "<p>It's hard for me to find where<code>∉</code> is defined.</p>",
        "id": 185545370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578954736
    },
    {
        "content": "<p>aah, found it in core, and as I expected from your answer, it's notation. Line 347 of core.lean. I am still a bit surprised that <code>rw</code> can see through the notation -- oh -- so notation is just syntactic sugar?</p>",
        "id": 185546580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578955780
    },
    {
        "content": "<p>There is no <code>not_mem</code> constant for <code>rw</code> to see through - <code>a ∉ b</code> directly expands to <code>not (a ∈ b)</code></p>",
        "id": 185547915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578956766
    }
]