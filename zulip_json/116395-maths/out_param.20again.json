[
    {
        "content": "<p>There are things I understand better after one year of Lean. But out_param is not among those.  At <a href=\"https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3\">https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3</a> does anyone know how to make Lean happy on line 105, without using the commented line 106? This is a standalone file that works with current mathlib</p>",
        "id": 159988343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551777965
    },
    {
        "content": "<p>Are you going after the inverse function theorem?</p>",
        "id": 159988711,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551778377
    },
    {
        "content": "<p>I'm on <code>commit 05449a061744f8142bfc5396184e33ef19b08b82</code> from under a week ago and it doesn't compile for me -- do I need to update mathlib?</p>",
        "id": 159988806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551778471
    },
    {
        "content": "<p>fixed with a <code>sorry</code>. What does <code>id - u</code> mean?</p>",
        "id": 159988862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551778562
    },
    {
        "content": "<p>Probably... the topology of the <code>topology/</code> directory changed a bit.</p>",
        "id": 159988895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551778574
    },
    {
        "content": "<p>Patrick's error without the <code>@</code> is</p>\n<div class=\"codehilite\"><pre><span></span>don&#39;t know how to synthesize placeholder\n⊢ out_param (Type ?)\n</pre></div>\n\n\n<p>and his function with the <code>out_param</code>s is</p>\n<div class=\"codehilite\"><pre><span></span>lipschitz_global_inverse :\n  Π {α : out_param (Type u_3)} [_inst_1 : out_param (normed_field α)] {E : Type u_4} [B : banach_space α E],\n    (E → E) → E → E\n</pre></div>",
        "id": 159989041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551778726
    },
    {
        "content": "<p>So you promised Lean that alpha would be inferred using unification, but it couldn't do it.</p>",
        "id": 159989111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551778802
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">normed_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>So you have <code>u : E -&gt; E</code>, and you want Lean to spot <code>banach_space α E</code> using type class inference and then realise that clearly you want <code>α</code> in that missing first slot.</p>",
        "id": 159989431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551779086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes I want Lean to find alpha</p>",
        "id": 159990503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551780141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Yes, I'm going after the inverse function theorem. I was hoping that <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> would give the mean value inequality while I was preparing on the Lipschitz side. But it looks like I'll also have to do the mean value inequality</p>",
        "id": 159990535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551780207
    },
    {
        "content": "<p>Can anyone help me in this thread?</p>",
        "id": 160034468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551815577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> maybe?</p>",
        "id": 160034487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551815590
    },
    {
        "content": "<p>The MVT doesn't look too bad. I will put it next on my list, though I can't promise to do it soon. (<span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span> if you do it let me know.)</p>",
        "id": 160057370,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1551834994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span> I was toying with the idea of implementing the inverse/implicit function theorem in the style of McDuff/Salamon. While I haven't done that, I did implement the necessary Newton Picard iteration in the version of Audin / Damian, see <a href=\"https://github.com/jdsalchow/mathlib/blob/newton_picard/src/analysis/normed_space/newton_picard.lean\" target=\"_blank\" title=\"https://github.com/jdsalchow/mathlib/blob/newton_picard/src/analysis/normed_space/newton_picard.lean\">https://github.com/jdsalchow/mathlib/blob/newton_picard/src/analysis/normed_space/newton_picard.lean</a></p>",
        "id": 160190327,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1551959313
    },
    {
        "content": "<p>Maybe some of it is useful in your efforts?</p>",
        "id": 160190374,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1551959402
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>notation `∃!` binders `,` p:(scoped P, P) `,` `moreover` q:(scoped Q, Q) := exists_unique p ∧ ∀ x, p x → q x`\n</pre></div>\n\n\n<p>\"moreover\" :-)</p>",
        "id": 160193051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551962124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130980\">@Jan-David Salchow</span> Nice! I'm pretty sure that main proof can be mathlib'ed. I can't spend too much time on this right now, because  have exams to prepare and I promised to work on uniform spaces. We definitely need some coordination about the basic definitions, like <code>lipschitz_within_with</code> that  I also defined in my file, and the space of differentiable functions that you defined. There are very basic questions not yet adressed in <code>deriv.lean</code>, like: do we want to talk about the derivative of <code>f</code> for any <code>f</code>, getting junk if <code>f</code> has no derivative, or do we want bundled differentiable maps like you did? How do we define C^k functions? C^infinity? <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> should tell us what he thinks here</p>",
        "id": 160195587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551964371
    },
    {
        "content": "<p>That being said, I'm still interested in the question that started this thread. Can anyone help me here?</p>",
        "id": 160195699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551964474
    },
    {
        "content": "<blockquote>\n<p>There are things I understand better after one year of Lean. But out_param is not among those.  At <a href=\"https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3\">https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3</a> does anyone know how to make Lean happy on line 105, without using the commented line 106? This is a standalone file that works with current mathlib</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you help me here?</p>",
        "id": 160209892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551974282
    },
    {
        "content": "<p>To play well with the rest of the module hierarchy, you should take the out_param off alpha</p>",
        "id": 160209972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974342
    },
    {
        "content": "<p>actually just take all the out_params off</p>",
        "id": 160210003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974362
    },
    {
        "content": "<p>module doesn't work like that anymore</p>",
        "id": 160210027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974381
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">inhabited_vector_space</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">k</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>this is a bad idea</p>",
        "id": 160210166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974451
    },
    {
        "content": "<p>you don't even need all this stuff about k but it's going to make typeclass search get lost</p>",
        "id": 160210224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974476
    },
    {
        "content": "<p>this should just say that an <code>add_comm_group</code> is inhabited... and it should be a local instance</p>",
        "id": 160210374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974557
    },
    {
        "content": "<p>Thanks! The instance was trying to avoid the generic has_zero implies inhabited</p>",
        "id": 160210387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551974571
    },
    {
        "content": "<p>But not using add_comm_group was really stupid indeed</p>",
        "id": 160210421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551974595
    },
    {
        "content": "<p>why do you even need this? Is it something about <code>inv_fun_on</code> or something?</p>",
        "id": 160210541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974655
    },
    {
        "content": "<p>In your definition of <code>fixed_point</code> you use <code>nonempty</code>, but for the properties you use <code>inhabited</code>. This seems reverse of what I would expect</p>",
        "id": 160210745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974773
    },
    {
        "content": "<p><a href=\"https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3#file-out_param_hell-lean-L48\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3#file-out_param_hell-lean-L48\">https://gist.github.com/PatrickMassot/3c40ee89b1f0329432060e257c7e7cf3#file-out_param_hell-lean-L48</a></p>",
        "id": 160210754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551974779
    },
    {
        "content": "<p>oh you found it</p>",
        "id": 160210771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551974793
    },
    {
        "content": "<p>If you are okay with using <code>nonempty</code> for <code>fixed_point</code> (and going classical), then you should use <code>nonempty</code> for the properties too</p>",
        "id": 160210795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974810
    },
    {
        "content": "<p>I must admit I used nonempty and inhabited interchangeably</p>",
        "id": 160210810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551974821
    },
    {
        "content": "<p>So should I replace all by inhabited by nonempty?</p>",
        "id": 160211443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551975124
    },
    {
        "content": "<p>I tried removing all out_param, but Lean still does not find my base field</p>",
        "id": 160211477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551975138
    },
    {
        "content": "<p>Lean won't find the base field unless you include it in your functions, like a normal type</p>",
        "id": 160212624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551975742
    },
    {
        "content": "<p>Why is that?</p>",
        "id": 160212820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551975894
    },
    {
        "content": "<p>Is Lean missing something fundamental here?</p>",
        "id": 160212854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551975919
    },
    {
        "content": "<p>concretely, that means alpha should be explicit in <code>lipschitz_with_translate</code> and <code>lipschitz_global_inverse</code></p>",
        "id": 160212981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551976003
    },
    {
        "content": "<p>Lean can't infer alpha, it appears nowhere in the theorem</p>",
        "id": 160213029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551976046
    },
    {
        "content": "<p>It appears in the instance for E</p>",
        "id": 160213196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551976135
    },
    {
        "content": "<p>instances don't get pulled in unless the types are</p>",
        "id": 160213783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551976482
    },
    {
        "content": "<p>Consider the point of application of your definition, <code>lipschitz_global_inverse u</code>. Lean knows <code>u : E -&gt; E</code>, and knows the result has type <code>E -&gt; E</code>, but nothing else tells it what <code>α</code> could be</p>",
        "id": 160214282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551976781
    },
    {
        "content": "<p>lean knows that <code>E</code> is a banach space over the local <code>α</code>, but doesn't know if this should be the same <code>α</code> that is used in the theorem</p>",
        "id": 160214437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551976851
    },
    {
        "content": "<p>long story short, this is just standard explicitness rules. Usually types appear as dependencies in further arguments, so they are usually implicit. In this case alpha is never used, so it has to be explicit</p>",
        "id": 160214608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551976940
    },
    {
        "content": "<p>This instance is pulled in, but it's not enough</p>",
        "id": 160214636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551976965
    },
    {
        "content": "<p>But I understand this is hopeless</p>",
        "id": 160214649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551976979
    },
    {
        "content": "<p>it gets pulled in the theorem but not in the use</p>",
        "id": 160214655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551976983
    },
    {
        "content": "<p>This is the effect of the <code>out_param</code>. Before, with <code>out_param</code>, this could be inferred because you have an order like <code>u</code> known -&gt; <code>E</code> known -&gt; <code>B : banach_space ? E</code> searched to determine <code>α</code> -&gt; <code>α</code> known. Now you have  <code>u</code> known -&gt; <code>E</code> known -&gt; no typeclass search because <code>α</code> unknown -&gt; fail</p>",
        "id": 160214887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551977104
    },
    {
        "content": "<p>Or are you going to promise to me that a banach space will never have two scalar fields?</p>",
        "id": 160215079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551977215
    },
    {
        "content": "<p>I will remind you that this is why we don't use out_param here anymore</p>",
        "id": 160215257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551977268
    },
    {
        "content": "<p>I certainly want complex banach spaces to be also real banach spaces</p>",
        "id": 160215648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551977489
    },
    {
        "content": "<p>One more question about this: Mario, do you mean <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/basic.lean#L327\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/basic.lean#L327\">https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/basic.lean#L327</a> should not have out_param anymore?</p>",
        "id": 160275177,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552037316
    }
]