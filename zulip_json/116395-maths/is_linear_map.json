[
    {
        "content": "<p>Is there a reason why <code>is_linear_map</code> does not extend <code>is_add_group_hom</code>?</p>",
        "id": 148162896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542877742
    },
    {
        "content": "<p>Here is what I'm trying to do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finsupp</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">linear_extension</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">linear_extension</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">is_add_monoid_hom</span> <span class=\"err\">$</span> <span class=\"n\">linear_extension</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_add_group_hom</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">is_add_group_hom</span> <span class=\"err\">$</span> <span class=\"n\">linear_extension</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linear_extension</span><span class=\"bp\">.</span><span class=\"n\">is_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">is_linear_map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">is_linear_map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">linear_extension</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linear_extension</span><span class=\"bp\">.</span><span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"c1\">-- gives stupid error</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">linear_extension</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">finsupp</span>\n</pre></div>",
        "id": 148163165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542878096
    },
    {
        "content": "<p>The error is:</p>\n<div class=\"codehilite\"><pre><span></span>synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  ⁇\ninferred\n  to_module Y M\n</pre></div>",
        "id": 148163178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542878117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Somehow the <code>@is_linear_map _ _ _ _ _ _ _</code> all over the place give me the feeling that I don't quite understand how to use modules.</p>",
        "id": 148163749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542878910
    },
    {
        "content": "<p>you shouldn't be using <code>is_linear_map</code> at all</p>",
        "id": 148163772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542878953
    },
    {
        "content": "<p>So what should I use?</p>",
        "id": 148163907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542879111
    },
    {
        "content": "<p><code>linear_map</code></p>",
        "id": 148163914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542879118
    },
    {
        "content": "<p>Ok, is there value in the other two instances? for add monoids/groups?</p>",
        "id": 148163971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542879142
    },
    {
        "content": "<p>but I understand that the reason you are getting these errors is because <code>finsupp.to_module</code> is not an instance</p>",
        "id": 148163981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542879155
    },
    {
        "content": "<p>you should try declaring it locally</p>",
        "id": 148163986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542879164
    },
    {
        "content": "<p>Ok, that helps.</p>",
        "id": 148164159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542879366
    },
    {
        "content": "<p>But I would like to use <code>linear_extension</code> in a context with and without modules.</p>",
        "id": 148164169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542879385
    },
    {
        "content": "<p>Am I trying to be  too flexible?</p>",
        "id": 148164172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542879394
    },
    {
        "content": "<p>no that's fine, you should just declare a wrapper for <code>linear_extension</code> making it into a linear map</p>",
        "id": 148164328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542879593
    },
    {
        "content": "<p>But that is already there, right. You made <code>is_linear_map.mk'</code>. Or do you mean something else?</p>",
        "id": 148164410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542879686
    },
    {
        "content": "<p>I mean <code>linear_extension : linear_map A B</code></p>",
        "id": 148164519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542879819
    },
    {
        "content": "<p>But then it is no longer a function that can be a group hom if I'm not working with modules...</p>",
        "id": 148164724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542880069
    },
    {
        "content": "<p>you have another function for that; the function parts will be equal (even defeq)</p>",
        "id": 148164936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542880294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Ok, I finally completed the proof. So what is your suggestion? I should have two different names? One for the unbundled, and one for the bundled linear map? Are there naming conventions for this?</p>",
        "id": 148166197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542881676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> add <code>l</code> (that's a small <code>L</code>) in front of the name for the bundled version</p>",
        "id": 148182128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542901062
    },
    {
        "content": "<p>so e.g. the map is <code>mul</code> and the linear_map is <code>lmul</code></p>",
        "id": 148182132,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542901074
    }
]