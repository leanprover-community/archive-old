[
    {
        "content": "<p>Can we use unification hints for bundled homs? This is my best attempt, but it doesn't work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field</span>\n<span class=\"n\">def</span> <span class=\"n\">is_ring_hom&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ring_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom&#39;</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_monoid_hom&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom&#39;</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">I2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">ring_hom_to_add_monoid_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unification_hint</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pattern</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"err\">≟</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">constraints</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">g</span> <span class=\"err\">≟</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_group_hom_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_group_hom_add</span>\n</pre></div>",
        "id": 158757717,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550434860
    },
    {
        "content": "<p>where can I learn about unification hints?</p>",
        "id": 158759302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550437933
    },
    {
        "content": "<p>Cyril and Assia talked about them in Amsterdam and their notes are available on the thread IIRC</p>",
        "id": 158759312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550437964
    },
    {
        "content": "<p>There's this:</p>\n<p><a href=\"#narrow/stream/179818-Lean-Together.202019/topic/Unification.20hints.20paper\" title=\"#narrow/stream/179818-Lean-Together.202019/topic/Unification.20hints.20paper\">https://leanprover.zulipchat.com/#narrow/stream/179818-Lean-Together.202019/topic/Unification.20hints.20paper</a></p>\n<p>but that wasn't what I was remembering. Someone put links to a lot of the pdfs used in the talks but I can't find it right now</p>",
        "id": 158759389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550438131
    },
    {
        "content": "<p>Is this issue that Chris raised blocking our move to bundled homs?</p>",
        "id": 159528199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551284187
    },
    {
        "content": "<p>Can we find a solution to this, or should we give up on bundled homs?</p>",
        "id": 159528225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551284205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> gave links to the unification hints demo files from Lean Together:<br>\n<a href=\"#narrow/stream/113488-general/topic/unification.20hints/near/158613068\" title=\"#narrow/stream/113488-general/topic/unification.20hints/near/158613068\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unification.20hints/near/158613068</a></p>",
        "id": 159528436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551284311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> Do you have any thought on this issue/idea?</p>",
        "id": 159719101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551451302
    },
    {
        "content": "<p>I think this can be proven without unification hints as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">add_group_hom_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 159748547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551473951
    },
    {
        "content": "<p>it will be nice if unification hints can be made to work, but I don't see why they wouldn't in this case so they might just be broken</p>",
        "id": 159748610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551474002
    },
    {
        "content": "<p>Does it work with <code>simp</code> though. That's the main upside of bundling I think.</p>",
        "id": 159748816,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551474147
    },
    {
        "content": "<p>Right, if it doesn't work with <code>simp</code> we are back to square 1.</p>",
        "id": 159788796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551521392
    }
]