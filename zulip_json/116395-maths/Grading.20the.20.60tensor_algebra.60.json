[
    {
        "content": "<p>I'm trying to put a grading on the tensor algebra,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">grades</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>by lifting the trivial map <code>finsupp.single 1</code>. To do this, I need to define an appropriate algebra structure on some copy of <code>ℕ →₀ tensor_algebra R M</code></p>\n<p>I'm immediately running into trouble defining  the <code>one</code> of this algebra structure,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">},</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_support_to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">sorry</span> <span class=\"c1\">-- ⊢ (1 : tensor_algebra R M) ≠ 0</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>I suspect I can't prove<code>1 ≠ 0</code>, since the base ring of the algebra may also not have that property.</p>\n<p>Is  there a typeclass I can include to assume that my ring is not the zero ring?</p>",
        "id": 211528581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601316717
    },
    {
        "content": "<p>This looks too low-level--isn't there <code>finsupp.single</code> or something?</p>",
        "id": 211529972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601317398
    },
    {
        "content": "<p>wait, you even mentioned it in your question... so I'm confused</p>",
        "id": 211530139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601317480
    },
    {
        "content": "<p>You're quite right, I'm being dumb here</p>",
        "id": 211530237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601317539
    },
    {
        "content": "<p><code>one := finsupp.single 0 1</code></p>",
        "id": 211530286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601317560
    },
    {
        "content": "<p>Although that needs <code>noncomputable</code>, but I can deal with that for now.</p>",
        "id": 211538127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601321172
    },
    {
        "content": "<p>Will try and bash out a proof for <code>mul</code> tomorrow,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"n\">a.support</span> <span class=\"bp\">+</span> <span class=\"n\">b.support</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">a.support.product</span> <span class=\"n\">b.support</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"n\">i.2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"n\">i.1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">i.2</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_support_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 211538172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601321205
    },
    {
        "content": "<p>By the way, is this notion of graded object used in mathlib somewhere?</p>",
        "id": 211538293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601321277
    },
    {
        "content": "<p>I don't see it yet - there was a thread a while back about CDGA, but that was more of a <code>dfinsupp</code> api</p>",
        "id": 211538989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601321584
    },
    {
        "content": "<p>If you're already planning to do this, maybe you should grade the free algebra that <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> recently introduced? the grading on the tensor algebra is induced from that.</p>",
        "id": 211539077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601321640
    },
    {
        "content": "<p>I suspect that what I write will work on either anyway</p>",
        "id": 211540211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601322236
    },
    {
        "content": "<p>All of my pain right now is being caused by <code>finsupp</code></p>",
        "id": 211540308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601322272
    },
    {
        "content": "<p>I think it will be slightly easier to define the grading on the free algebra. Of course, one will have to prove some linearity statement in order to descend the grading to the tensor algebra.</p>",
        "id": 211545087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601324430
    },
    {
        "content": "<p>Here's what I'm stuck on right now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211545156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601324477
    },
    {
        "content": "<p>If the sum is nonzero, then there exists a nonzero element</p>",
        "id": 211545189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601324499
    },
    {
        "content": "<p>by contrapositive</p>",
        "id": 211545451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601324633
    },
    {
        "content": "<p><code>contrapose h</code>, I assume you mean</p>",
        "id": 211545602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601324712
    },
    {
        "content": "<p>I knew that existed, and could not find the spelling</p>",
        "id": 211545613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601324720
    },
    {
        "content": "<p>I mean you should prove it by contraposition</p>",
        "id": 211545625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601324729
    },
    {
        "content": "<p>Turns out I was looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra\">docs#add_monoid_algebra</a></p>",
        "id": 211584311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601360154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Grading.20the.20.60tensor_algebra.60/near/211539077\">said</a>:</p>\n<blockquote>\n<p>If you're already planning to do this, maybe you should grade the free algebra that <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> recently introduced? the grading on the tensor algebra is induced from that.</p>\n</blockquote>\n<p>Went ahead and did as you suggested, primarily because it reduced my build time. Progress so far is <a href=\"https://github.com/leanprover-community/mathlib/issues/4321\">#4321</a>, but I think I'm missing a trick somewhere.</p>",
        "id": 211630303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601390504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'm confused.... what is <code>add_monoid_algebra</code>? Is it just the usual monoid algebra?</p>",
        "id": 211631264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601390932
    },
    {
        "content": "<p>If so, why should an algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> ever be isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi mathvariant=\"bold\">N</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[\\mathbf{N}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 211631922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601391222
    },
    {
        "content": "<p><code>add_monoid_algebra</code> seems to have all the properties that I'd associate with grading; namely elementwise addition and convolutional multiplication. I think I see your point though - clearly the mapping from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>N</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[N]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">]</span></span></span></span> is injective and not bijective</p>",
        "id": 211632442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601391429
    },
    {
        "content": "<p><del>(also it turns out I don't know how to typeset math here after all...)</del></p>",
        "id": 211632491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601391452
    },
    {
        "content": "<p>Use double <code>$</code></p>",
        "id": 211632540,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601391471
    },
    {
        "content": "<p>Elaborating on my last point  - <code>add_monoid_algebra</code> behaves exactly as I want for splitting an element of <code>tensor_algebra</code> into grades through <code>lift</code> - but the part of I that I actually care about is a subalgebra of it.</p>",
        "id": 211632967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601391620
    },
    {
        "content": "<p>Isn't the map you defined from <code>free_algebra R X</code> to <code>add_monoid_algebra (free_algebra R X) N</code> just the \"obvious\" inclusion from <code>free_algebra R X</code> to the monoid algebra? This would not give the right answer, even if you consider the image of this embedding (since the image is concentrated in degree 0).</p>",
        "id": 211635169,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601392491
    },
    {
        "content": "<p>Oh nevermind, it's okay since you're lifting the map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> which sends elements to elements of degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 211635267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601392546
    },
    {
        "content": "<p>My understanding is that it's the mapping that turns vectors into the <code>single 1 v</code> elements, and products and sums into the appropriate elements. eg <code>v * w</code> goes to <code>single 2 (v * w)</code> thanks to the convolution product</p>",
        "id": 211635289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601392555
    },
    {
        "content": "<p>Yeah</p>",
        "id": 211635297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601392557
    },
    {
        "content": "<p>So yeah, the grading is given by the image of this map.</p>",
        "id": 211635298,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601392557
    },
    {
        "content": "<p>I'm tempted to use <code>algebra.adjoin R {f | ∃ (x : X), f = @grading_fun R X _ x }</code> to restrict the output type to exactly that image</p>",
        "id": 211635396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601392582
    },
    {
        "content": "<p>Although I suspect I'll end up with some awkward proofs...</p>",
        "id": 211635435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601392598
    },
    {
        "content": "<p>I think it would be easier to just take the image of this map.</p>",
        "id": 211635461,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601392611
    },
    {
        "content": "<p>And just avoid defining the equivalence?</p>",
        "id": 211635992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601392825
    },
    {
        "content": "<p>Hmmmm..... I think it's a bit more complicated....</p>",
        "id": 211637054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601393226
    },
    {
        "content": "<p>You really want to represent elements of <code>free_algebra R X</code> as sums of products of elements of <code>X</code> with coefficients in <code>R</code> and not something random in <code>free_algebra R X</code>.</p>",
        "id": 211637123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601393260
    },
    {
        "content": "<p>I don't follow. What's this about an isomorphism/image?<br>\nIf <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra, then we can specify a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>-indexed grading on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> by giving an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A \\to A[\\mathbb{N}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\">]</span></span></span></span> (more commonly written as, say, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[T]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span>).</p>",
        "id": 211639797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601394215
    },
    {
        "content": "<p>Which I think is what you did, but then more things are happening after that which I don't understand.</p>",
        "id": 211640095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601394331
    },
    {
        "content": "<p>What's the graded degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> piece?</p>",
        "id": 211640358,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601394438
    },
    {
        "content": "<p>All those <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> that get sent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><msup><mi>T</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">a T^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 211640418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601394467
    },
    {
        "content": "<p>Do I need some further conditions? Really it's supposed to be a comodule for the coalgebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[T]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo>⊗</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta(T) = T \\otimes T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>.</p>",
        "id": 211640615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601394554
    },
    {
        "content": "<p>No, I think you're right.<br>\nI was just worried about the fact that we want the graded parts to be <code>R</code>-modules, but this follows since <code>R</code>is central.</p>",
        "id": 211640691,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601394593
    },
    {
        "content": "<p>But I'm under the impression that it's automatic somehow.</p>",
        "id": 211640703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601394597
    },
    {
        "content": "<p>I mean in this case there really is some isomorphism with an obviously graded object.</p>",
        "id": 211640919,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601394691
    },
    {
        "content": "<blockquote>\n<p>but then more things are happening after that which I don't understand.</p>\n</blockquote>\n<p>I wanted to define a mapping to take me back in the other direction, and I was foolish enough to miss that <code>lift R $ grading_fun</code> is not injective. So the question is, do we either:</p>\n<ul>\n<li>Just stick with the injective mapping, <code>T →ₐ (ℕ →₀ T)</code> (where in the PR <code>(ℕ →₀ T)</code> is substituted with <code>add_monoid_algebra</code> which has the nice bonus of having a compatible multiplication)</li>\n<li>Insist on an isomorphism <code>T ≃ₐ grades_of T</code>, and invent a new type for the destination algebra</li>\n</ul>\n<p>I started off down the second path, but needed <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> to point out the part after the comma</p>",
        "id": 211641084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601394754
    },
    {
        "content": "<p>OK, now that I think about it more it does seem like you need the comodule properties.</p>",
        "id": 211641315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601394844
    },
    {
        "content": "<p>There is a map back (which corresponds to setting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">T = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>) but it's not an isomorphism.</p>",
        "id": 211641435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601394880
    },
    {
        "content": "<p>But one of the compositions is the identity: if you apply the <code>grading</code> map and then the \"forget grading\" map you get back what you started with</p>",
        "id": 211641609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601394956
    },
    {
        "content": "<p>Right, so maybe I cut back that PR to:</p>\n<ul>\n<li>Define the forward map <code>T →ₐ add_monoid_algebra T ℕ</code></li>\n<li>Define the reverse map <code>add_monoid_algebra T ℕ →ₐ T</code></li>\n<li>Show that <code>rev (fwd x) = x</code></li>\n<li>Remove the attempt to show <code>fwd (rev y) = y</code>, because it doesn't</li>\n</ul>",
        "id": 211641734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601395001
    },
    {
        "content": "<p>But <code>rev (fwd x) = x</code></p>",
        "id": 211641907,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601395077
    },
    {
        "content": "<p>Yes, that's my third bullet point and I managed to prove that already in the PR</p>",
        "id": 211642016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601395104
    },
    {
        "content": "<p>There's another property of <code>fwd</code> that I think says that if you look at the degree <code>n</code> part of <code>fwd</code> of anything, then its coefficient again gets sent to itself in degree <code>n</code></p>",
        "id": 211642312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601395224
    },
    {
        "content": "<p>Any naming suggestions for the first two bullets?</p>\n<ul>\n<li>fwd: <code>grades_of</code>, <code>grades</code>, <code>grade</code>, <code>grading</code>, ...</li>\n<li>rev: <code>from_grades</code>, <code>of_grades</code>, <code>ungrade</code>, ...</li>\n</ul>",
        "id": 211642340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601395234
    },
    {
        "content": "<p>The <code>rev</code> map doesn't depend on the grading</p>",
        "id": 211642461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601395274
    },
    {
        "content": "<p>Also, it would be good to have a version of this story for modules too. But I don't think we have \"<code>add_monoid_module</code>\", do we?</p>",
        "id": 211642562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601395311
    },
    {
        "content": "<p>It's the direct sum isn't it?</p>",
        "id": 211642664,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601395333
    },
    {
        "content": "<p><code>add_monoid_module</code> is just <code>finsupp</code> - indeed, it's built upon finsupp and adds the multiplication on top.</p>",
        "id": 211642692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601395343
    },
    {
        "content": "<p>direct sum is <code>dfinsupp</code>, which is likely more trouble than it's worth here (I have an old implementation of grading via dfinsupp)</p>",
        "id": 211642766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601395368
    },
    {
        "content": "<p>I was going to say it needs the structure of a module over the monoid (in this case <code>multiplicative nat</code> I guess) but actually it doesn't seem to be needed for this story. It does need the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module structure but I guess that one already exists.</p>",
        "id": 211643242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601395557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Grading.20the.20.60tensor_algebra.60/near/211642461\">said</a>:</p>\n<blockquote>\n<p>The <code>rev</code> map doesn't depend on the grading</p>\n</blockquote>\n<p>I suppose the rev map (<code>grading_inv</code> in the PR) could be part of the <code>add_monoid_algebra</code> API, but that makes naming it harder. <code>sum_id</code> perhaps?</p>",
        "id": 211643335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601395584
    },
    {
        "content": "<p>Eventually it should be a module over the <code>add_monoid_algebra</code> though.</p>",
        "id": 211643337,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601395585
    },
    {
        "content": "<p>Mind editing your <code>it</code>s in the above messages to clarify what they refer to?</p>",
        "id": 211643469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601395640
    },
    {
        "content": "<p>They refer to a hypothethical <code>add_monoid_module</code></p>",
        "id": 211643522,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601395665
    },
    {
        "content": "<p>Why would the <code>add_monoid_module</code> be a <code>module</code> over the <code>add_monoid_algebra</code> instead of over the monoid, when algebras are already modules?</p>",
        "id": 211643644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601395699
    },
    {
        "content": "<p>Like if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module then \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">M[T]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span>\" is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[T]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span>-module and in particular both an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module and a module over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>T</mi><mo separator=\"true\">,</mo><msup><mi>T</mi><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1, T, T^2, \\ldots\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">}</span></span></span></span> = <code>multiplicative nat</code>.</p>",
        "id": 211643787,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601395755
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">M[T]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span> would be the <code>add_monoid_module</code>. And then a graded <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> together with an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><mi>M</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">M \\to M[T]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span> such that blah blah blah.</p>",
        "id": 211644162,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601395903
    },
    {
        "content": "<p>I don't know if this is the best way to handle graded algebras/modules. But it's a nice point of view that comes up in algebraic geometry/homotopy theory. That's why I was wondering earlier whether mathlib was already doing this.</p>",
        "id": 211644485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601396040
    },
    {
        "content": "<p>It seems to at least have some advantages, for instance, the way the grading interacts with <code>+</code> and <code>*</code> is encoded neatly in saying that the <code>grading</code> map is an algebra homomorphism.</p>",
        "id": 211644697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601396122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Grading.20the.20.60tensor_algebra.60/near/211641734\">said</a>:</p>\n<blockquote>\n<p>Right, so maybe I cut back that PR to: &lt;snip&gt;</p>\n</blockquote>\n<p>I've gone ahead and done this, <a href=\"https://github.com/leanprover-community/mathlib/issues/1234\">#1234</a> ought to now pass CI.</p>",
        "id": 211649844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601398282
    }
]