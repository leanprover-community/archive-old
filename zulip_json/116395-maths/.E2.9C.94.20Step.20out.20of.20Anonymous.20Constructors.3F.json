[
    {
        "content": "<p>I am trying to show that left inverse holds for a group I defined. I have included some of the code below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">C_mul_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"bp\">+</span> <span class=\"n\">a.val</span> <span class=\"bp\">*</span> <span class=\"n\">b.val</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">C_mul_closure</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">C_inv_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span>\n  <span class=\"o\">⟨(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a.val</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">C_inv_closure</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">C_mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C_mul_def</span><span class=\"o\">,</span> <span class=\"n\">C_inv_def</span><span class=\"o\">],</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In C_mul_left_inv, I am currently getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">a_val</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a_val</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a_val</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a_val</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Is there any way to step out of the anonymous constructor notation so that I can finish the proof using algebra? Thanks.</p>",
        "id": 307377995,
        "sender_full_name": "Charles Murphy",
        "timestamp": 1667327476
    },
    {
        "content": "<p>Maybe <code>ext</code>?</p>",
        "id": 307378754,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1667327720
    },
    {
        "content": "<p>Your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> doesn't really work, but ext and then simp should make progress, but you'll probably need to prove lemmas about the <code>val</code> of your one also</p>",
        "id": 307379194,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667327863
    },
    {
        "content": "<p>You'll need the C_ext_iff iff lemma I shared yesterday</p>",
        "id": 307379799,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667328047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560136\">Charles Murphy</span> has marked this topic as resolved.</p>",
        "id": 307384097,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667329452
    }
]