[
    {
        "content": "<p>It seems that <code>abel</code> works only for <code>add_comm_group</code>, not for <code>comm_group</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, would that be easy to fix?</p>",
        "id": 166837380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559150794
    },
    {
        "content": "<p>It would basically need to apply <code>additive</code> to turn it into a multiplicative problem</p>",
        "id": 166837453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559150854
    },
    {
        "content": "<p>Is it something you may do in the near future?</p>",
        "id": 166838196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559151262
    },
    {
        "content": "<p>not today. I'll look into it</p>",
        "id": 166838289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559151326
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 166838586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559151495
    },
    {
        "content": "<p>How would applying <code>additive</code> in a proof work in practice? I tried to do this a few months ago (so can't really remember how it went) but the only way I could get to work reliably in a use case where I wanted to be in tactic mode was to add the lemma</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">to_add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>and <code>rw to_add</code> as needed, which I liked because it wasn't too many extra characters, but is there a proper way?</p>",
        "id": 181581171,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1574368204
    },
    {
        "content": "<p>The intended use is to write out the desired statement directly, and apply the corresponding multiplicative theorem and have defeq work out the differences. <code>algebra.group_power</code> has a few examples with <code>multiplicative</code></p>",
        "id": 181587544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574372685
    },
    {
        "content": "<p><del>(deleted, I found something that works)</del></p>",
        "id": 182874580,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1575777088
    },
    {
        "content": "<p>I'd like to use <code>abel</code> for <code>inf</code> and <code>sup</code> in (semi)lattices. I'm envisioning using it to reorder / reassociate terms in e.g. a <code>calc</code> block before doing more rewriting. How hard would it be to generalize <code>abel</code> to this use case? I'm thinking of doing this in two steps: first set up some wrapper(s) like <code>additive</code> and then try to figure out if <code>abel</code> can be generalized to additive semigroups (since semilattices may not have <code>top</code> or <code>bot</code>).</p>\n<p>For the first step, am I right that we can't reuse <code>additive</code> directly since all the instances are already set up to go to / from <code>has_mul</code>? Is there some more generic approach?</p>",
        "id": 229218101,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615151441
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/additive.has_add/src\">src#additive.has_add</a> is implemented in terms of has_mul, so yes, you'd can't reuse that one and would need a new one</p>",
        "id": 229218187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615151518
    },
    {
        "content": "<p>Hmm, maybe I should wait for <a href=\"https://github.com/leanprover-community/mathlib/issues/6045\">#6045</a> to be merged before attempting this...</p>",
        "id": 229218311,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615151618
    },
    {
        "content": "<p>Are any of the comments in <a href=\"#narrow/stream/263328-triage/topic/random.20issue.3A.20.232726/near/215139106\">https://leanprover.zulipchat.com/#narrow/stream/263328-triage/topic/random.20issue.3A.20.232726/near/215139106</a> about <a href=\"https://github.com/leanprover-community/mathlib/issues/2726\">#2726</a> helpful?</p>",
        "id": 229218784,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1615152036
    },
    {
        "content": "<p>Yeah, that looks like what I had in mind! I think I should be able to set things up so I can write <code>change</code> statements like the examples you posted, but then <code>abel</code> requires <code>add_comm_monoid</code> which I might not have.</p>",
        "id": 229219280,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615152502
    }
]