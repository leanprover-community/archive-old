[
    {
        "content": "<p>If <code>α</code> is a type, then as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> describes near <a href=\"#narrow/stream/116395-maths/subject/affine.20schemes.20are.20schemes/near/126963972\" title=\"#narrow/stream/116395-maths/subject/affine.20schemes.20are.20schemes/near/126963972\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/affine.20schemes.20are.20schemes/near/126963972</a>, we can interpret <code>α</code> as a groupoid whose objects are the \"inhabitants of α up to defeq\" and whose morphisms are propositional equalities, that is, the morphisms from <code>a</code> to <code>b</code> are the inhabitants of <code>a = b</code> (and so a morphism from <code>a</code> to <code>b</code> is unique if it exists, by proof irrelevance).<br>\nSuppose now <code>α</code> is a <code>monoid</code>. Then associativity is a propositional equality <code>(a * b) * c = a * (b * c)</code> and not necessarily a defeq, so under this interpretation <code>α</code> corresponds to a monoidal groupoid which is not necessarily strict.</p>",
        "id": 127137722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527362126
    },
    {
        "content": "<p>But we can replace <code>α</code> with a strict monoidal groupoid using standard strictification results. Here, for example, <code>α</code> acts on itself by left multiplication, and then <code>α</code> is isomorphic to the image of this action in the endomorphism monoid <code>α → α</code>, which is strictly associative and unital.</p>",
        "id": 127137817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527362290
    },
    {
        "content": "<p>For the monoid <code>list t</code>, this is basically the \"difference list\" construction</p>",
        "id": 127137818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527362314
    },
    {
        "content": "<p>More generally, any <code>category</code> is isomorphic to a <code>category</code> whose composition is strictly associative and unital.</p>",
        "id": 127137825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527362380
    },
    {
        "content": "<p>I wonder how useful this observation is. I encountered it in a situation similar to the following. Consider a type indexed on a monoid, like <code>def vector (α : Type u) (n : ℕ) := { l : list α // l.length = n }</code>. Then <code>append</code> is an operation <code>{n m : nat} : vector α n → vector α m → vector α (n + m)</code>. In order to state associativity of <code>append</code>, we need to use transport across the equality <code>(n + m) + k = n + (m + k)</code>, or use heterogeneous equality.<br>\nIf we replaced <code>ℕ</code> with a \"strictly associative\" version, we wouldn't need to do this.</p>",
        "id": 127138069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527362908
    },
    {
        "content": "<p>I haven't yet tried putting this plan into practice, though.</p>",
        "id": 127138073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527362931
    },
    {
        "content": "<p>Actually, this is kind of funny. This construction gives you a monoid which is strictly associative, but not strictly unital.</p>",
        "id": 127139315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527365957
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rwbarton/658ccdd57986b32fd8be0c155c63d47e#file-strictification-lean-L21\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/658ccdd57986b32fd8be0c155c63d47e#file-strictification-lean-L21\">https://gist.github.com/rwbarton/658ccdd57986b32fd8be0c155c63d47e#file-strictification-lean-L21</a></p>",
        "id": 127139698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527366849
    },
    {
        "content": "<p>Now as soon as I write this I realize I actually need the additive version, hah.</p>",
        "id": 127139758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527367072
    }
]