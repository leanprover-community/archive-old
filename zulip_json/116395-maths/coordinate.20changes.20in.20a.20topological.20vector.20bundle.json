[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/13175\">#13175</a> the field <code>continuous_coord_change</code> was added to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_bundle\">docs#topological_vector_bundle</a>, defined in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_transitions\">docs#continuous_transitions</a>. <br>\nI'm a bit confused by the definition of <code>continuous_transitions</code>. isn't the <code>s</code> in <code>continuous_transitions</code> just <code>e.base_set ∩ e'.base_set</code>? If so, is there a reason to not be more explicit in the definition of <code>continuous_transitions</code>?</p>\n<p>pinging <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>.</p>",
        "id": 282499059,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652709623
    },
    {
        "content": "<p>Oh, I'm now looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_bundle.continuous_on_coord_change\">docs#topological_vector_bundle.continuous_on_coord_change</a> and there the <code>s</code> is given explicitly.</p>",
        "id": 282501186,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652710518
    },
    {
        "content": "<p>I had started working on a branch <a href=\"https://github.com/leanprover-community/mathlib/tree/gouezel_pullback\">branch#gouezel_pullback</a> to clean up a little bit <a href=\"https://github.com/leanprover-community/mathlib/pull/8545\">#8545</a>. I've just seen you've started on the same lines. Along this work, I noticed the same on <code>continuous_transitions</code>, and I started refactoring it to include the set. I'm not done with the refactor, but if you want to pick up anything from this branch don't hesitate to do so.</p>",
        "id": 282503324,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1652711383
    },
    {
        "content": "<p>Interesting. I think our cleanup went into different directions, but I'll see what I can incorporate. <br>\nI just finished the proof of <code>continuous_coord_change</code> for <code>pullback</code>, but a refactor of <code>continuous_transitions</code> would still be helpful.</p>",
        "id": 282506463,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652712524
    },
    {
        "content": "<p>I also noticed while working on Hom bundles that this spelling with a mysterious set s was a bit weird.</p>",
        "id": 282513902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652715718
    },
    {
        "content": "<p>And I'm <em>very</em> happy to read that two people were working on this pull-back stuff while I was attending a student talk and then supervising a written exam.</p>",
        "id": 282514033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652715761
    },
    {
        "content": "<p>In 2017 I noticed that the definition of compact also had a weird <code>s</code> in, but Johannes Hoelzl assured me it was a good idea...</p>",
        "id": 282523505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652719617
    },
    {
        "content": "<p>I pushed a version that I think compiles, with a complete proof (it might still have linter errors).<br>\nIt would still be nice to use your simplified definition of the topology on the pullback bundle. If you want, you can change that, or otherwise I'll change that at some point.</p>",
        "id": 282543419,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652726948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/coordinate.20changes.20in.20a.20topological.20vector.20bundle/near/282499059\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/13175\">#13175</a> the field <code>continuous_coord_change</code> was added to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_bundle\">docs#topological_vector_bundle</a>, defined in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_transitions\">docs#continuous_transitions</a>. <br>\nI'm a bit confused by the definition of <code>continuous_transitions</code>. isn't the <code>s</code> in <code>continuous_transitions</code> just <code>e.base_set ∩ e'.base_set</code>? If so, is there a reason to not be more explicit in the definition of <code>continuous_transitions</code>?</p>\n<p>pinging <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I was thinking of defining, later, the structure groupoid for <code>B × F</code> consisting of elements satisfying <code>continuous_transitions</code>.  The elements of this structure groupoid would have type <code>local_equiv (B × F) (B × F)</code> (in fact, <code>local_homeomorph</code>) rather than type <code>pretrivialization</code> -- they don't \"know\" their own base set.</p>",
        "id": 282643570,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1652795732
    },
    {
        "content": "<p>I haven't tried to define (eg) smooth vector bundles yet, but I had an idea that this groupoid approach might be useful there.</p>",
        "id": 282643784,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1652795823
    },
    {
        "content": "<p>Hopefully, with API like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_bundle.continuous_on_coord_change\">docs#topological_vector_bundle.continuous_on_coord_change</a>, it's not too painful to work with.</p>",
        "id": 282644708,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1652796166
    },
    {
        "content": "<p>But currently, every time you define a <code>topological_vector_bundle</code> you have to prove that <code>(e.base_set ∩ e'.base_set) ×ˢ (univ : set F)</code> is the source of <code>e.to_local_equiv.symm.trans e'.to_local_equiv</code>.</p>\n<p>I think it's better to be more explicit, and put </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">s</span>\n    <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as a field, where <code>s = e.base_set ∩ e'.base_set</code>. <br>\nMaybe we can even go crazier, and put <code>ε</code> in <code>topological_vector_bundle</code> as a data field? Or will that give the wrong notion of equality on <code>topological_vector_bundle</code>?</p>",
        "id": 282652249,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652799235
    },
    {
        "content": "<p>If we change the definition of <code>topological_vector_bundle</code>, we can still obtain a <code>continuous_transition</code> from a <code>topological_vector_bundle</code>, of course.</p>",
        "id": 282654668,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652800084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/coordinate.20changes.20in.20a.20topological.20vector.20bundle/near/282652249\">said</a>:</p>\n<blockquote>\n<p>But currently, every time you define a <code>topological_vector_bundle</code> you have to prove that <code>(e.base_set ∩ e'.base_set) ×ˢ (univ : set F)</code> is the source of <code>e.to_local_equiv.symm.trans e'.to_local_equiv</code>.</p>\n</blockquote>\n<p>Yes, that's true.  In the two examples we have already (<a href=\"https://github.com/leanprover-community/mathlib/blob/3d279118b3c2987d2ee4396d6afa2171508ec366/src/topology/vector_bundle.lean#L981\">direct sum</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/417bc07404cc366de8f22d94f36b7906b4ba6f46/src/topology/vector_bundle_hom.lean#L302\">hom-bundle</a>), Patrick and I had to invoke <code>mfld_set_tac</code> for this bookkeeping.  I have no objection to either of the revised versions you suggest!</p>",
        "id": 282665905,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1652804165
    },
    {
        "content": "<p>I incorporated a bunch of <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s improvements into  <a href=\"https://github.com/leanprover-community/mathlib/pull/8545\">#8545</a>, which is now ready for review.</p>",
        "id": 283778244,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653412657
    },
    {
        "content": "<p>I've started on changing the field <code>continuous_coord_change</code> in <a href=\"https://github.com/leanprover-community/mathlib/tree/continuous_coord_change\">branch#continuous_coord_change</a>.</p>",
        "id": 284162478,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653672947
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14462\">#14462</a><br>\nI think the proofs that coordinate changes are continuous are nicer/simpler with the new definitions. <br>\nThere is a downside: you now have to show that the coordinate change of your new vector bundle somehow relates to the coordinate change of the existing vector bundle (e.g. the coordinate change on the product vector bundle is a <code>prod_map</code> of the existing coordinate changes).</p>",
        "id": 284375146,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653921371
    }
]