[
    {
        "content": "<p>For my work on eigenvectors, I need a definition of linear independence for families of vectors, not only sets, because I need to be able to talk about a family being linearly dependent if it contains the same vector twice. I've started working on this here: </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/commit/7a590e5a29469975798a6432e577826a81ea0b94\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/7a590e5a29469975798a6432e577826a81ea0b94\">https://github.com/leanprover-community/mathlib/commit/7a590e5a29469975798a6432e577826a81ea0b94</a></p>\n<p>The crucial change I did is to replace the definition</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>by</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>I'd like to get some feedback from you before I continue because this change breaks quite a lot of things that I need to repair.</p>",
        "id": 163502492,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555445302
    },
    {
        "content": "<p>Are you in the finite-dimensional setting? I have seen that in the finite-dimensional case one often has to deal with lists of vectors, whereas in the infinite-dimensional case it's often sets; the problems one works on are somehow different in the two cases.</p>",
        "id": 163502933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555445603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> I'm not sure if it is worth it to <em>replace</em> <code>lc</code> with that definition. In particular, <code>lc</code> currently has some semantics that you won't be able to recover with your definition.</p>",
        "id": 163503092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555445727
    },
    {
        "content": "<p>Yes, I work in the finite-dimensional setting, but if we had a definition that uses families, both lists and sets would be special cases.</p>",
        "id": 163503095,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555445728
    },
    {
        "content": "<p>Maybe you should just make a new definition</p>",
        "id": 163503104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555445744
    },
    {
        "content": "<p><code>lc</code> is the type of <em>all</em> formal linear combinations. And you don't get that with the family version.</p>",
        "id": 163503178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555445781
    },
    {
        "content": "<p>The old definition is a special case of my new one by choosing the set of vectors itself as the index set and the identity as the map. Where it matters, we could restrict ourselves to that case.</p>",
        "id": 163503372,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555445916
    },
    {
        "content": "<p>That's true</p>",
        "id": 163503425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555445960
    },
    {
        "content": "<p>If you pull this off, chapeau! But I agree that it is quite non-trivial. You might want to coordinate with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>. This will be quite an effort, and you'll want the merge into mathlib to be as smooth as possible.</p>",
        "id": 163503556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555446041
    },
    {
        "content": "<p>Why not just make a new function <code>lc'</code> or whatever?</p>",
        "id": 163503571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555446057
    },
    {
        "content": "<blockquote>\n<p><code>lc</code> currently has some semantics that you won't be able to recover with your definition.</p>\n</blockquote>\n<p>What does the word \"semantics\" mean?</p>",
        "id": 163503608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555446092
    },
    {
        "content": "<p>Oooh, I don't actually know precisely. I meant \"intended meaning\".</p>",
        "id": 163503697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555446150
    },
    {
        "content": "<p>And I retract the claim.</p>",
        "id": 163503702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555446158
    },
    {
        "content": "<blockquote>\n<p>Why not just make a new function lc' or whatever?</p>\n</blockquote>\n<p>I don't want to duplicate the proofs that we have about <code>lc</code>.</p>",
        "id": 163503707,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555446162
    },
    {
        "content": "<p>I guess that several proofs will actually simplify</p>",
        "id": 163503753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555446220
    },
    {
        "content": "<p>Other things will become a bit more verbose</p>",
        "id": 163503760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555446231
    },
    {
        "content": "<p>I am strongly in favour of this.  All sorts of things are awkward and unnatural if you define linear independence in terms of subsets, because of the fact that vectors can accidentally be equal for spurious reasons.</p>",
        "id": 163503833,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1555446266
    },
    {
        "content": "<p>I must confess I was surprised when I first saw this. The justification I heard at the time was that to prove every vector space has a basis you want to use Zorn's lemma and then it's convenient to use subsets.</p>",
        "id": 163505389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555447437
    },
    {
        "content": "<p>That was easier than I thought: <a href=\"https://github.com/leanprover-community/mathlib/pull/943\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/943\">https://github.com/leanprover-community/mathlib/pull/943</a></p>",
        "id": 163512432,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555453343
    },
    {
        "content": "<p>Do we want the <code>beta</code> and <code>iota - &gt; beta</code> arguments for <code>lc</code>, given that they're not used?</p>",
        "id": 163519553,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555460866
    },
    {
        "content": "<p>Good point. I will try to remove them and see what happens.</p>",
        "id": 163519920,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555461248
    },
    {
        "content": "<p>I agree that linear independence should be in terms of families rather than sets, and <code>lc</code> itself seems a bit overly specific, but the definition of <code>lc</code> in Alex's first post doesn't make any sense (EDIT: I see chris also noted this)</p>",
        "id": 163520237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555461642
    },
    {
        "content": "<p>It would be nice if there is an obvious generalization of <code>lc</code> that makes sense for families such that the submodule based definition of <code>linear_independent</code> stays the same</p>",
        "id": 163520273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555461698
    },
    {
        "content": "<p>In PR <a href=\"https://github.com/leanprover-community/mathlib/issues/943\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/943\">#943</a> the definition of <code>linear_independent</code> is still over a set, rather than a family?</p>",
        "id": 163520359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555461791
    },
    {
        "content": "<p>It's over a set of indices of the family</p>",
        "id": 163520427,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555461853
    },
    {
        "content": "<p>So it can contain duplicate vectors</p>",
        "id": 163520435,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555461866
    },
    {
        "content": "<p>I think it can just be the entire family, the set isn't needed</p>",
        "id": 163520446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555461888
    },
    {
        "content": "<p>we can compose with <code>subtype.val</code> to recover sets when needed</p>",
        "id": 163520464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555461921
    },
    {
        "content": "<p>Okay, so I'm catching up here, but I think what we want is for <code>lc</code> to denote <code>iota -&gt;0 alpha</code>, that is, finitely supported coefficients, and <code>lc.total</code> now takes a separate argument <code>iota -&gt; beta</code> for the family</p>",
        "id": 163520657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555462099
    },
    {
        "content": "<p>That's basically the same as what you have except that <code>lc</code> doesn't take the family as input</p>",
        "id": 163520668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555462125
    },
    {
        "content": "<p>Yes, I am already working on removing the arguments <code>beta</code> and <code>v</code> where they are not needed.</p>",
        "id": 163520711,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555462199
    },
    {
        "content": "<p>so <code>lc.supported</code> isn't needed anymore in the definition of <code>linear_independent</code>, it can just be <code>(lc.total alpha v).ker = bot</code> where <code>v : iota -&gt; beta</code></p>",
        "id": 163520783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555462256
    },
    {
        "content": "<p>in place of <code>lc.supported</code> we have some rules about how <code>lc.total</code> interacts with composition of the valuation functions</p>",
        "id": 163520810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555462305
    },
    {
        "content": "<p>Ok, I'll try that.</p>",
        "id": 163521031,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555462606
    },
    {
        "content": "<p>The first part (removing the unnecessary arguments) is done - see pull request.</p>",
        "id": 163522963,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555465183
    },
    {
        "content": "<p>The second part (changing the definiton of <code>linearly_independent</code> to <code>(lc.total alpha v).ker = bot</code>)  will be a lot of work. Are you sure it is the right thing to do? Having the additional set-argument may be more practical than forcing the user to use subtypes.</p>",
        "id": 163523165,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555465447
    },
    {
        "content": "<p>I agree it's not trivial, but in hindsight I think that was a bad move on the library design side</p>",
        "id": 163523676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555466190
    },
    {
        "content": "<p>I actually think that in almost all cases we care about linearly independent families, not sets. The only counterexample is the zorn's lemma proof of existence of a basis, but that has more to do with the particulars of that proof and shouldn't affect the rest of the development</p>",
        "id": 163523713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555466270
    },
    {
        "content": "<p>How can lemmas like<br>\n- A subset of a lin. indep. set is lin. indep.<br>\n- If two sets are lin. indep. and their spans are disjoint, their union is lin. indep.<br>\nbest be formulated then?</p>",
        "id": 163526777,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555470280
    },
    {
        "content": "<p>subset is lin indep becomes f linind -&gt; g injective -&gt; g o f linind</p>",
        "id": 163527073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555470624
    },
    {
        "content": "<p>union linind becomes something about <code>sum.elim f g</code> (that function might not exist now that I come to think of it, it's nondependent <code>sum.rec</code>). If <code>f : I -&gt; A</code> and <code>g : J -&gt; A</code> are linind and <code>span (range f) \\cap span (range g) = bot</code> then <code>sum.elim f g : I + J -&gt; A</code> is linind</p>",
        "id": 163527264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555470902
    },
    {
        "content": "<p>I'm not totally happy with <code>span (range f)</code> but it does the job and I don't think there is another notation for it</p>",
        "id": 163527293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555470949
    },
    {
        "content": "<p>I am more worried about the <code>I + J</code>. This looks like dependent type hell :-)</p>",
        "id": 163527357,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555471011
    },
    {
        "content": "<p>no dependent types</p>",
        "id": 163527358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555471019
    },
    {
        "content": "<p>that's just a plain old sum</p>",
        "id": 163527367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555471026
    },
    {
        "content": "<p>The theorems about postcomposition with injective functions will allow you to use equivs if that representation doesn't make you happy</p>",
        "id": 163527374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555471067
    },
    {
        "content": "<p>I don't think the original theorem ever applies when the union is not disjoint, so it should be fine</p>",
        "id": 163527434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555471140
    },
    {
        "content": "<p>Ok, that's right.</p>",
        "id": 163527445,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555471153
    },
    {
        "content": "<p>except maybe in weird trivial cases like the zero ring</p>",
        "id": 163527446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555471160
    },
    {
        "content": "<p>I am worried about a user who actually would like to use sets, but is forced to use the subtypes corresponding to those sets. Then <code>↑s + ↑t</code> would be a different type than <code>↑ (s ⋃ t)</code>, which can be annoying.</p>",
        "id": 163527612,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555471395
    },
    {
        "content": "<p>This can be proven as a lemma</p>",
        "id": 163530051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555474962
    },
    {
        "content": "<p>the equiv is already there, you just have to apply it here</p>",
        "id": 163530054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555474981
    },
    {
        "content": "<p>Ok, sounds good</p>",
        "id": 163530454,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555475624
    },
    {
        "content": "<p>So now <code>lc</code> is just a type wrapper around <code>finsupp</code>. Is there any reason to not just use finsupp?</p>",
        "id": 163535773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555483417
    },
    {
        "content": "<p>no</p>",
        "id": 163537354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555485483
    },
    {
        "content": "<p>once upon a time it was a bad module because of the multiple base rings problem</p>",
        "id": 163537367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555485508
    },
    {
        "content": "<p>Ok, then I suggest just using <code>finsupp</code>, because it means even less duplication.</p>",
        "id": 163537389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555485574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> What is your opinion? In order to avoid duplicate work, do you think we should wait for a while with <a href=\"https://github.com/leanprover-community/mathlib/issues/943\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/943\">#943</a>?</p>",
        "id": 163537547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555485776
    },
    {
        "content": "<p>If <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> has time to chime in here, I'd love to hear his opinion. He worked quite a bit with this part of the library for the cap set proof. But he's a few weeks into the new job and in California right now. Maybe he's too distracted by wealth and fame and shiny white electronics.</p>",
        "id": 163540034,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555488337
    },
    {
        "content": "<blockquote>\n<p>@Alexander Bentkamp What is your opinion? In order to avoid duplicate work, do you think we should wait for a while with <a href=\"https://github.com/leanprover-community/mathlib/issues/943\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/943\">#943</a>?</p>\n</blockquote>\n<p>I'd be happy if you'd merge it. It may not be perfect, but it's a step in the right direction.</p>",
        "id": 163556924,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555505490
    },
    {
        "content": "<p>I'm not in favour of changing a definition with the intention of changing it straight away afterwards, just in case somebody ends up having to update their project twice, who didn't know they should wait until the second change.</p>",
        "id": 163647092,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555591214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> Thanks for the work on merging <code>lc</code> and <code>finsupp</code>. Well done!</p>",
        "id": 163714696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555651667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  As we discussed today in person, I will try to change the definiton of <code>linearly_independent</code> to <code>(lc.total alpha v).ker = bot</code>, i.e. remove the <code>s : set</code> argument. Do you think I should also redefine <code>is_basis</code> to use families instead of sets? It doesn't seem to make much sense there...</p>",
        "id": 163953118,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1555982642
    },
    {
        "content": "<p>Certainly. In fact I think the argument to use families instead of sets for a basis is even stronger than for linearly independent sets. A basis is necessarily injective so it might seem redundant, but we definitely want to think of basis elements as indexed by a family. In particular this seamlessly represents the concept of \"ordered basis\", since rather than asking for an ordering on some subset of the type (messy) we have an indexed family where the index type has a built in ordering (simple and provided by TC inference)</p>",
        "id": 163959433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555991852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> I think this is a very good move. I'm looking forward to your PR.</p>",
        "id": 163964826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555999702
    },
    {
        "content": "<blockquote>\n<p>Certainly. In fact I think the argument to use families instead of sets for a basis is even stronger than for linearly independent sets. A basis is necessarily injective so it might seem redundant, but we definitely want to think of basis elements as indexed by a family. In particular this seamlessly represents the concept of \"ordered basis\", since rather than asking for an ordering on some subset of the type (messy) we have an indexed family where the index type has a built in ordering (simple and provided by TC inference)</p>\n</blockquote>\n<p>For a free module over the zero ring, a basis might not be injective! R is isomorphic to R^2 as an R-module.</p>",
        "id": 163965271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556000267
    },
    {
        "content": "<p>If you squint a bit you can easily see that <code>punit</code> is defeq to <code>p0wnd</code></p>",
        "id": 163965500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556000558
    },
    {
        "content": "<p>The zero ring is the one ring...</p>",
        "id": 163965588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556000679
    },
    {
        "content": "<p>The empty set should then be replaced by a family with an empty type as index set. How do I best describe an empty type? Not every empty type is equal to <code>empty</code>, right? So maybe <code>∀ x : ⍺, false</code>? Or <code>¬ nonempty ⍺</code>?</p>",
        "id": 163999131,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556032632
    },
    {
        "content": "<p>For the theorem I would use not nonempty as an assumption, so it is maximally applicable</p>",
        "id": 164001422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556034182
    },
    {
        "content": "<p>I am trying to define <code>def finsupp.sum_elim_left {α β γ : Type*} [has_zero γ] (l : α ⊕ β →₀ γ) : α →₀ γ</code>, which should simply ignore the values on <code>β</code>. Anything that I can come up with seems far too complicated. Any suggestions?</p>",
        "id": 164025529,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556050309
    },
    {
        "content": "<p>I would just precompose with the injection alpha -&gt; alpha + beta I guess.</p>",
        "id": 164025656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556050406
    },
    {
        "content": "<p><code>map_domain inl</code>?</p>",
        "id": 164025660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556050414
    },
    {
        "content": "<p>I guess you need to know some finiteness property of the function in order for preimages to work like that</p>",
        "id": 164025759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556050472
    },
    {
        "content": "<p>If you use <code>map_domain</code>, don't you need a map from alpha+beta to alpha? This might be problematic if alpha is empty and beta is not. Or have I got things the wrong way around?</p>",
        "id": 164025943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556050649
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Given `f : α₁ ↪ α₂` and `v : α₁ →₀ β`, `emb_domain f v : α₂ →₀ β` is the finitely supported</span>\n<span class=\"cm\">function whose value at `f a : α₂` is `v a`. For a `a : α₁` outside the domain of `f` it is zero. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">emb_domain</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"err\">↪</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>I think that's what you're after</p>",
        "id": 164026240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556050860
    },
    {
        "content": "<p>no that's still the wrong way round</p>",
        "id": 164026303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556050915
    },
    {
        "content": "<p>The closest I can find is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `subtype_domain p f` is the restriction of the finitely supported function</span>\n<span class=\"cm\">  `f` to the subtype `p`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">subtype_domain</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>But this is not ideal -- it should be Stricklandized into a definition which works for an arbitrary injection gamma -&gt; alpha, not just a subtype.</p>",
        "id": 164027193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556051627
    },
    {
        "content": "<p>What I am surprised by here is that finsupp has been used extensively in a lot of APIs so I am pretty sure I must have missed it -- someone would surely have spotted this by now.</p>",
        "id": 164027283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556051676
    },
    {
        "content": "<p>Yes, <code>map_domain</code> and <code>emb_domain</code> are in the wrong direction. And I don't see how I could modify <code>subtype_domain</code> to work with an injection...</p>",
        "id": 164028811,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556052795
    },
    {
        "content": "<p>I found this solution, which is quite ok I think:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_elim_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_preimage</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"n\">mem_support_to_fun</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">]</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>*Edit: I removed a few spurious type assumptions</p>",
        "id": 164034774,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556057810
    },
    {
        "content": "<p>I think <code>emb_domain</code> should work the other way around, using essentially the proof you gave with a variable in place of <code>sum.inl.inj</code></p>",
        "id": 164035013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556058018
    },
    {
        "content": "<p>Actually I'm surprised <code>emb_domain</code> exists at all, since it's a special case of <code>map_domain</code>. Maybe it's for the defeqs?</p>",
        "id": 164035036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556058061
    },
    {
        "content": "<p>map_domain works only if beta is a <code>add_comm_monoid</code>.</p>",
        "id": 164035208,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556058234
    },
    {
        "content": "<p>I guess the most general precondition for which precomp is well defined is that the fibers of the function are fintypes</p>",
        "id": 164035510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556058503
    },
    {
        "content": "<p>I'll see what I can do.</p>",
        "id": 164035561,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556058569
    },
    {
        "content": "<blockquote>\n<p>I guess the most general precondition for which precomp is well defined is that the fibers of the function are fintypes</p>\n</blockquote>\n<p>Aka \"finite maps\"?</p>",
        "id": 164052148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556079343
    },
    {
        "content": "<p>I didn't know that they were called that either, but I think that's what Mario meant.</p>",
        "id": 164090569,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556119440
    },
    {
        "content": "<p>I will stick to injective maps for now though, because that is what the theorems in <code>finite.lean</code> are about. If I try to make everything as general as possible I will never get it done :)</p>",
        "id": 164090718,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556119517
    },
    {
        "content": "<p>Is <code>α ⊕ β</code> a sigma type? For example, in <code>big_operators.lean</code> there are no lemmas about <code>α ⊕ β</code>, but there are some about <code>sigma</code>. Can I use those?</p>",
        "id": 164099219,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556125237
    },
    {
        "content": "<p>OK, I managed to establish a connection between <code>⊕</code> and <code>sigma</code> with Simon's help.</p>",
        "id": 164111026,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1556133285
    }
]