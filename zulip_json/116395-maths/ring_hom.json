[
    {
        "content": "<p>Whilst making a MWE for <a href=\"#narrow/stream/116395-maths/topic/char_zero/near/238102341\">this</a> I noticed that we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ring_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">monoid_with_zero_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>However <code>monoid_with_zero_hom</code> is defined to extend <code>zero_hom M N</code> (part of <code>add_monoid_hom</code>) and <code>monoid_hom M N</code>, and adds no new fields, so we don't need it at all from a maths point of view. Is there a reason it's there anyway?</p>",
        "id": 238288499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620731331
    },
    {
        "content": "<p>I thought I wrote down why I did this at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom\">docs#ring_hom</a></p>",
        "id": 238289162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620731655
    },
    {
        "content": "<p>From that link:</p>\n<blockquote>\n<p>This extends from both <code>monoid_hom</code> and <code>monoid_with_zero_hom</code> in order to put the fields in a<br>\nsensible order, even though <code>monoid_with_zero_hom</code> already extends <code>monoid_hom</code>.</p>\n</blockquote>",
        "id": 238289230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620731699
    },
    {
        "content": "<p>you're justifying why you extend <code>monoid_hom</code>, I was asking the other way around, but either way I don't ubderstand your answer -- surely the sensible order starts with 0?</p>",
        "id": 238289391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620731772
    },
    {
        "content": "<p>If you had <code> extends monoid_with_zero_hom α β, add_monoid_hom α β</code> then the order would be <code>zero</code>, <code>one</code>, <code>mul</code>, <code>add</code></p>",
        "id": 238289415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620731786
    },
    {
        "content": "<p>Oh, it's so you get <code>ring_hom.to_monoid_with_zero_hom</code> for free</p>",
        "id": 238289436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620731806
    },
    {
        "content": "<p>You're right, I was answering a different question.</p>",
        "id": 238289522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620731854
    },
    {
        "content": "<p>The order I learnt them was zero, one, add, mul, which is closer to this than what we have right now ;-) OK so it's just a field order thing? All this is going to have to be refactored before the Lean 4 port anyway, right, because old structures are evil?</p>",
        "id": 238289531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620731859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/ring_hom/near/238289436\">said</a>:</p>\n<blockquote>\n<p>Oh, it's so you get <code>ring_hom.to_monoid_with_zero_hom</code> for free</p>\n</blockquote>\n<p>This was what I was wondering about.</p>",
        "id": 238289612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620731889
    },
    {
        "content": "<p>I think there might be bits of mathlib that rely on the field order, and I didn't want to have to touch them when I added <code>monoid_with_zero_hom</code></p>",
        "id": 238289620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620731893
    },
    {
        "content": "<p>Yes that sounds believable, sometimes people just make complex structures by listing the fields in <code>\\&lt; \\&gt;</code></p>",
        "id": 238289661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620731927
    },
    {
        "content": "<p>given that <code>elab_as_eliminator</code> is gone and now it's much harder to use recursors directly, one gets the impression that the devs are suggesting that listing the fields is supposed to be idiomatic nowadays (even on a split of an <code>or</code>)</p>",
        "id": 238289750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620731992
    },
    {
        "content": "<p>Either it would need refactoring for lean 4, or we add some meta code to add back old structures. Using new structures sounds like it matters more for typeclass inference</p>",
        "id": 238289753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620731994
    },
    {
        "content": "<p>I think field order is unavoidably public whatever you do; <code>ring_hom.mk</code> is probably not going away</p>",
        "id": 238290021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620732118
    }
]