[
    {
        "content": "<p>If I have a proof that <code>r : ℝ</code> is non-zero, can I make <code>def f : ℝ → ℝ := λ x, x / r</code> computable?</p>",
        "id": 131188580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838378
    },
    {
        "content": "<p>if you have <code>r^-1</code>, then it's just multiplication</p>",
        "id": 131188609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838410
    },
    {
        "content": "<p>I ask because Luca has a bunch of these, and he's ended up making his entire file <code>noncomputable theory</code> to shut Lean up, with the result that we're going to end up with a noncomputable fundamental group. Is that inevitable though?</p>",
        "id": 131188681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838448
    },
    {
        "content": "<p>but a proof that r is nonzero is not sufficient to compute a Cauchy sequence, you need a rational lower bound</p>",
        "id": 131188692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838466
    },
    {
        "content": "<p>His definition of the topology on [0,1] was noncomputable -- that didn't look like a good start</p>",
        "id": 131188698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838472
    },
    {
        "content": "<p>topologies are trivially computable</p>",
        "id": 131188755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838557
    },
    {
        "content": "<p>I feel like we could fix all this because he wrote a bunch of stuff for general closed intervals <code>[r,s]</code>with only the hypothesis <code>s&gt;r</code>, however his applications tend to be <code>[0,1/2]</code> or <code>[0,1/4]</code></p>",
        "id": 131188789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838563
    },
    {
        "content": "<p>if you give me a noncomputable definition of a topology, I can define a computable topology that is defeq</p>",
        "id": 131188820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838614
    },
    {
        "content": "<p>because topologies have no data</p>",
        "id": 131188832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838638
    },
    {
        "content": "<p>Why is the fundamental group noncomputable?</p>",
        "id": 131188933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838756
    },
    {
        "content": "<p>what are the steps of construction that are problematic</p>",
        "id": 131188944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838773
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">I01</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">I01</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">I01</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"c1\">-- definition &#39;I01.topological_space&#39; is noncomputable, it depends on &#39;real.metric_space&#39;</span>\n</pre></div>",
        "id": 131189025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838845
    },
    {
        "content": "<p>real.metric_space is noncomputable?</p>",
        "id": 131189051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838882
    },
    {
        "content": "<p>oh of course, the distance function is a max</p>",
        "id": 131189069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838901
    },
    {
        "content": "<p>anyway it doesn't matter</p>",
        "id": 131189070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838908
    },
    {
        "content": "<p>why is Kevin worrying about computability?</p>",
        "id": 131189074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533838913
    },
    {
        "content": "<p>let the instance be noncomputable</p>",
        "id": 131189124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838934
    },
    {
        "content": "<p>it won't cause any problems</p>",
        "id": 131189134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838944
    },
    {
        "content": "<p>The fundamental group is noncomputable currently because if you want a map from [0,1/2] to [0,1] you can either define it as lam x, 2 * x, or you can define a general map from [r,s] to [0,1] as lam x, (x-r)/(s-r), and use that function everywhere in your file, and fix all the noncomputable errors by writing <code>noncomputable theory</code> at the top, and nobody noticing until the file is 1000 lines long.</p>",
        "id": 131189144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838962
    },
    {
        "content": "<p>none of that matters</p>",
        "id": 131189160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838987
    },
    {
        "content": "<p>oh great :-)</p>",
        "id": 131189166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838993
    },
    {
        "content": "<p>The definition of the multiplication on paths is noncomputable</p>",
        "id": 131189177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839009
    },
    {
        "content": "<p>that checks out</p>",
        "id": 131189186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839026
    },
    {
        "content": "<p>So that's OK?</p>",
        "id": 131189191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839033
    },
    {
        "content": "<p>you have to define it by cases on whether you are greater or less than 1/2</p>",
        "id": 131189237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839053
    },
    {
        "content": "<p>right</p>",
        "id": 131189238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839060
    },
    {
        "content": "<p>but Luca's implementation uses the map from [r,s] to [0,1] defined using division</p>",
        "id": 131189246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839077
    },
    {
        "content": "<p>with r=0 and s=1/2</p>",
        "id": 131189249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839085
    },
    {
        "content": "<p>and then with r=1/2 and s=1</p>",
        "id": 131189253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839093
    },
    {
        "content": "<p>I often claim that when the function being defined is continuous you can do it without noncomputability, but in a general top space I'm not sure</p>",
        "id": 131189256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839097
    },
    {
        "content": "<p>division by 2?</p>",
        "id": 131189282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839154
    },
    {
        "content": "<p>I thought you meant real division - division by 2 is easy</p>",
        "id": 131189332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839175
    },
    {
        "content": "<blockquote>\n<p>why is Kevin worrying about computability?</p>\n</blockquote>\n<p>I don't worry about it in general, I was just surprised to see it here. Were you virtually at my lecture a week last Monday? The example of G(3) made it clear to me what computability was.</p>",
        "id": 131189333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839181
    },
    {
        "content": "<p>we're dividing by s-r</p>",
        "id": 131189345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839205
    },
    {
        "content": "<p>using a general function which divides by s-r</p>",
        "id": 131189354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839213
    },
    {
        "content": "<p>in the special case where s-r=1/2</p>",
        "id": 131189359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839216
    },
    {
        "content": "<p>and when doing associativity s-r will be 1/4</p>",
        "id": 131189391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839248
    },
    {
        "content": "<p>those could all be rationals</p>",
        "id": 131189448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839283
    },
    {
        "content": "<p>just do your s-r trick where s and r are rationals</p>",
        "id": 131189460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839304
    },
    {
        "content": "<p>rofl</p>",
        "id": 131189462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839308
    },
    {
        "content": "<p>But path multiplication will still be noncomputable because of the pasting you have to do</p>",
        "id": 131189501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839393
    },
    {
        "content": "<p>if you have f g : [0,1] -&gt; X and you want to concatenate them, you define <code>(f * g) x = if x &lt; 1/2 then f(2*x) else g(2*x-1)</code></p>",
        "id": 131189571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839446
    },
    {
        "content": "<p>aie you're right</p>",
        "id": 131189662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839547
    },
    {
        "content": "<p>I think if you wanted to do that computably, you could define it by that equation on rationals, then take the limit as the sequence of rationals approaches some real</p>",
        "id": 131189663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839552
    },
    {
        "content": "<p>but then you have to have a computable limit operation on the target topological space</p>",
        "id": 131189679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839578
    },
    {
        "content": "<p>I think this is all too much for Luca's project, I think we might stick to noncomputable</p>",
        "id": 131189691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839587
    },
    {
        "content": "<p>I'm glad I mentioned this now, I can go back to thinking computable maths is all a bit silly for a while.</p>",
        "id": 131189697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839606
    },
    {
        "content": "<p>What I'm trying to do nowadays is to get some sort of feeling for when I am actually being noncomputable. Like when I was a PhD student and I got some sort of a feeling for when I was actually using the axiom of choice</p>",
        "id": 131189716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839636
    },
    {
        "content": "<p>or when I was a post-doc and I got some sort of a feeling for when I was actually using universes</p>",
        "id": 131189759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839653
    },
    {
        "content": "<p>rule of thumb: if you use anything descendent from <code>topological_space.lean</code> or <code>analysis/real.lean</code>, just put <code>noncomputable theory</code> and don't attempt to get away from it</p>",
        "id": 131189768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839664
    },
    {
        "content": "<p>[answer: probably never, although it was difficult to find a reference sometimes]</p>",
        "id": 131189772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839668
    },
    {
        "content": "<p>If all your imports are in <code>data</code> you should try to be computable</p>",
        "id": 131189788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839690
    },
    {
        "content": "<p>Well Luca's file uses lots of stuff from both of those files, so we'll have to be noncomputable for now. Kenny can fix it all up when he's finished</p>",
        "id": 131189817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839712
    },
    {
        "content": "<p>topology is 100% classical maths</p>",
        "id": 131189824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839731
    },
    {
        "content": "<p>I'm surprised. I didn't realise that.</p>",
        "id": 131189888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839766
    },
    {
        "content": "<p>and metric spaces and uniform spaces...</p>",
        "id": 131189893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839772
    },
    {
        "content": "<p>Metric spaces I can understand because they mention reals.</p>",
        "id": 131189914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839792
    },
    {
        "content": "<p>it could conceivably be different but it would require a major rewrite of the library</p>",
        "id": 131189922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839798
    },
    {
        "content": "<p><code>data.real.basic</code> is computable, <code>analysis.real</code> is not</p>",
        "id": 131189937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839821
    },
    {
        "content": "<p>Metric spaces also often use countable dependent choice, because the two definitions of closure only coincide when you are able to choose a sequence of points in your space tending to a point in the closure, which involves choosing <code>x_n</code> at distance at most <code>1/n</code> from the boundary point</p>",
        "id": 131189960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533839841
    },
    {
        "content": "<p>well, that's just first countable spaces in general</p>",
        "id": 131190030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839886
    },
    {
        "content": "<p>but there I'm not so worried because all the claims are propositional anyway</p>",
        "id": 131190053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839920
    },
    {
        "content": "<p>we make no attempt to avoid the axiom of choice in theorems</p>",
        "id": 131190069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533839938
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">computable_inv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">hrec_on</span> <span class=\"n\">x</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n  <span class=\"o\">(</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">hfunext</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">heq_of_eq</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inj</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h₁</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h₂</span><span class=\"o\">)))</span>\n  <span class=\"kn\">end</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 131190413,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533840262
    },
    {
        "content": "<p>Yeah, I double checked the proof in data.real.basic and it can definitely be defined... I'm not sure why I didn't try</p>",
        "id": 131190434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533840301
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">computable_inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">computable_inv</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"o\">(</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">inv_mul_cancel</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 131190547,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533840442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you still haven't explained why you care about computable reals?</p>",
        "id": 131190657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533840553
    },
    {
        "content": "<p>Oh, I found a counterexample for the computability claim. Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> be a quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\Bbb R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathbb\">R</span></span></span></span> identifying all points in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[1,2]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">2</span><span class=\"mclose\">]</span></span></span></span>. Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f(x)=x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">g(x)=x+2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">x</span><span class=\"mbin\">+</span><span class=\"mord mathrm\">2</span></span></span></span>; these are continuous functions on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">[</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mo>[</mo><mn>1</mn><mo>]</mo><mo>=</mo><mo>[</mo><mn>2</mn><mo>]</mo><mo>=</mo><mi>g</mi><mo>(</mo><mn>0</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f(1)=[1]=[2]=g(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span><span class=\"mrel\">=</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">2</span><span class=\"mclose\">]</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">0</span><span class=\"mclose\">)</span></span></span></span>, and both functions are computable. The path concatenation <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>∗</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f\\ast g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mbin\">∗</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is discontinuous at <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">1/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">2</span></span></span></span> (in the real topology), so it is not computably definable.</p>",
        "id": 131190733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533840608
    },
    {
        "content": "<p>Because Luca was dividing by a positive real which I could prove was greater than 1/10 and so I realised that probably I could make some of his noncomputable code computable. I hence wondered whether it would be an easy fix to make his fundamental group computable. But as Mario pointed out, there are other problems with computability, and I've now decided not to worry about it.</p>",
        "id": 131190754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533840661
    }
]