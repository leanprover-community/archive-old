[
    {
        "content": "<p>I've added things to the OEIS (<a href=\"https://oeis.org\">link</a>) before. Anything sensible gets accepted. I've certainly written code in pari-gp to compute some of the sequences and occasionally if I notice that a sequence doesn't have a pari-gp implementation I might add it, or at the very least put it on my infinitely long job list.</p>\n<p>Now we have good summation convention I think it would look pretty neat if people started uploading Lean formalisations of the functions generating some of these sequences, especially some of the cooler ones like Ramanujan Tau (I should ask my contacts which pages get the most hits :-) ). Does this sound like a crazy idea? They certainly support plenty of other languages.</p>",
        "id": 211625634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601388423
    },
    {
        "content": "<p>It sounds like you're talking about generating functions, but it might also be interesting to just have Lean definitions of the sequences themselves, even if they're not computable in any particular sense.</p>",
        "id": 211627499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601389266
    },
    {
        "content": "<p>Can we do <a href=\"https://oeis.org/A000001\">https://oeis.org/A000001</a> yet?</p>",
        "id": 211627535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601389281
    },
    {
        "content": "<p>A concern would be that mathlib is not really stable enough for a model where we submit a bunch of stuff to OEIS and then every so often some fraction of it breaks.</p>",
        "id": 211627699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601389349
    },
    {
        "content": "<p>After Lean 3 development stops (and I'm assumimg it will  at some point) there will be some canonical \"Lean 3 mathlib\" I guess; perhaps that would be a good target for stuff like this</p>",
        "id": 211628000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601389487
    },
    {
        "content": "<p>Reid this one is easy: you take the category of groups, you look at the subtype of groups of order n, quotient out by the relationship generated by \"we are isomorphic\", and take the fincard.</p>",
        "id": 211628635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601389750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/OEIS.20Lean.20entries/near/211628635\">said</a>:</p>\n<blockquote>\n<p>Reid this one is easy: you take the category of groups, you look at the subtype of groups of order n, quotient out by the relationship generated by \"we are isomorphic\", and take the fincard.</p>\n</blockquote>\n<p>Does mathlib know that this quotient is a finite type?</p>",
        "id": 211629729,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601390231
    },
    {
        "content": "<p>almost certainly not, but fincard just returns 0 if the type is infinite. It's noncomputable cardinality.</p>",
        "id": 211629783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390266
    },
    {
        "content": "<p>Oh :)</p>",
        "id": 211629800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601390272
    },
    {
        "content": "<p>It's not in mathlib though :-(</p>",
        "id": 211629813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390279
    },
    {
        "content": "<p>unless someone put it in</p>",
        "id": 211629871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390289
    },
    {
        "content": "<p>I was working on a PR and then Chris Hughes sent me the xkcd about n+1 competing standards and it really put me off :-)</p>",
        "id": 211629926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390320
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/fincard\">https://github.com/leanprover-community/mathlib/tree/fincard</a></p>",
        "id": 211630082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390402
    },
    {
        "content": "<p>Isn't there some standard type for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">N</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{N} \\cup \\{\\infty\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span>?</p>",
        "id": 211630196,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601390443
    },
    {
        "content": "<p><code>enat</code></p>",
        "id": 211630208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601390450
    },
    {
        "content": "<p>So why not make the cardinality of an infinite type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>?</p>",
        "id": 211630233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601390463
    },
    {
        "content": "<p>because it's annoying to not have a nat when you know it's finite</p>",
        "id": 211630262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601390481
    },
    {
        "content": "<p>Oh right.</p>",
        "id": 211630275,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601390488
    },
    {
        "content": "<p>Sorry, I still think like a mathematician :)</p>",
        "id": 211630294,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601390500
    },
    {
        "content": "<p>fincard was really great for us. We used it to prove Sylow's theorem for a new definition of <code>group</code>, and <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> pushed the stuff we'd used to that branch but then the summer ended and now we're both busy with other things.</p>",
        "id": 211630492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390589
    },
    {
        "content": "<p>But for groups, the cardinality of a group is 0 iff the group is infinite, which is kind of cool</p>",
        "id": 211630552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390624
    },
    {
        "content": "<p>Same for the order of an element -- it was 0 if it was infinite. Turned out to be a really cool way to think about it.</p>",
        "id": 211630657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390663
    },
    {
        "content": "<p>Yeah, I guess that makes sense.</p>",
        "id": 211630667,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601390667
    },
    {
        "content": "<p>it's the kernel of the map from Z to G</p>",
        "id": 211630688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390678
    },
    {
        "content": "<p>and ideals of Z are canonically nat <em>shrug</em></p>",
        "id": 211630716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390690
    },
    {
        "content": "<p>the multiplicative structures match up perfectly but the additive ones are completely destroyed</p>",
        "id": 211630761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390713
    },
    {
        "content": "<p>that's why I'm so grateful to people like <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> who have been removing additive assumptions from statements which are really about divisibility in monoids-with-zero.  Johan discovered the objects, but we're still making the API in some sense. We've made great strides recently.</p>",
        "id": 211630996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390816
    },
    {
        "content": "<p>Oh how about this: type <code>group (fin n)</code> provably finite (hopefully by automation) and then simply put the isomorphism equivalence relation on that and then maybe you can even take the card.</p>",
        "id": 211631345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390975
    },
    {
        "content": "<p>I usually get stuck with the automation of finiteness and then have to ask <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  to make it work :-)</p>",
        "id": 211631361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601390985
    },
    {
        "content": "<p>You don't even need th equivalence relation. Just define the number to be the size of <code>group (fin n)</code>.</p>",
        "id": 211631487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601391032
    },
    {
        "content": "<p>I don't see why isomorphic terms would be equal though</p>",
        "id": 211631544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601391057
    },
    {
        "content": "<p>Oh I see what you mean.</p>",
        "id": 211631583,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601391074
    },
    {
        "content": "<p>but take the quotient and I think it's fine</p>",
        "id": 211631600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601391084
    },
    {
        "content": "<p>Isn't it enough to take the size of <code>group (fin n)</code> and divide by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span>?</p>",
        "id": 211632910,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601391605
    },
    {
        "content": "<p>Am I being stupid?</p>",
        "id": 211633007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601391632
    },
    {
        "content": "<p>no because the groups will have automorphisms</p>",
        "id": 211633023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601391640
    },
    {
        "content": "<p>this is the map from multiplication tables to groups</p>",
        "id": 211633086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601391673
    },
    {
        "content": "<p>but if you suddenly decide to switch elements b and c, some multiplciation tables changed but some didn't. The S_n action isn't free.</p>",
        "id": 211633150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601391696
    },
    {
        "content": "<p>What you said is some kind of normalised groupoid total which counts groups up to some kind of weights related to the number of permutations of <code>fin n</code> which fix the group</p>",
        "id": 211633450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601391806
    },
    {
        "content": "<p>Some centralizer of multiplication in S_n</p>",
        "id": 211633671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601391893
    },
    {
        "content": "<p>Yeah I'm being stupid. I guess I never really seriously thought about what it means to \"count the number of groups of order n\".</p>",
        "id": 211634117,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601392060
    },
    {
        "content": "<p>Anyways, it might be a nice project to try to collect Lean definitions of, say, the sequences listed in <a href=\"https://oeis.org/wiki/Index_to_OEIS:_Section_Cor#core\">https://oeis.org/wiki/Index_to_OEIS:_Section_Cor#core</a>.<br>\nIt seems like the sort of thing people who are interested in concept alignment or specification of the contents of mathematical databases would find useful.</p>",
        "id": 211651506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601398941
    },
    {
        "content": "<p>Sean Irvine has <a href=\"https://github.com/archmageirvine/joeis\">implemented 90000 OEIS sequences in Java</a>. It might take a while to get that far in Lean, even if you only want definitions with no useful computational properties and no useful results about those definitions proved. (And really, if you define, say, the Catalan numbers, you probably ought to prove a few different things that definition counts, if not the very long list from Stanley's Enumerative Combinatorics.)</p>",
        "id": 211702078,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1601425570
    }
]