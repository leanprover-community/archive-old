[
    {
        "content": "<p>So, this started with me  noticing <code>multiset</code> only has versions on N and Z; but, well, the equivalent proof in <code>finsum</code> requires <code>no_zero_smul_divisors</code> as well. But I've managed to prove in Lean that it's not necessary:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">smul_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">m.sum</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">set</span> <span class=\"n\">f</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">introv</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">fhom</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.mk'</span> <span class=\"n\">f</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">multiset.sum_hom</span> <span class=\"n\">m</span> <span class=\"n\">fhom</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Upon consideration this makes some amount of sense: if I have some scalar k and module objects r, s, if r + s = 0, then k * (r + s) = 0, but if we let k be non-integer then k * r + k * s is not necessarily zero. But if I have two scalars m, n and a single object r, then no such contradiction is possible, (m + n) * r = 0 iff m * r + n * r = 0 even if the ring of scalars has torsion or the like.</p>\n<p>... Of course, this then runs into the fact that by definition, a module has distributive scalar multiplication, so if that first contradiction is possible you didn't actually have a valid module in the first place; so I would expect that it's not necessary in either place. But I assume there's a reason <code>smul</code> instances don't already exist for not-N-or-Z that I just haven't considered yet...?</p>",
        "id": 278963060,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649941623
    },
    {
        "content": "<blockquote>\n<p>So, this started with me noticing <code>multiset</code> only has versions on N and Z</p>\n</blockquote>\n<p>What does that mean?</p>",
        "id": 278967502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649943796
    },
    {
        "content": "<p>Do you understand the distinction between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsum\">docs#finsum</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a>? Do you see why we need <code>no_zero_smul_divisors</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_finsum\">docs#smul_finsum</a>?</p>",
        "id": 278967734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649943908
    },
    {
        "content": "<p>Your proof has a few extra steps, here's a mahlibified version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">m.sum</span> <span class=\"o\">:=</span>\n<span class=\"n\">multiset.sum_hom</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.mk'</span> <span class=\"o\">((</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">smul_add</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>note that indeed you only need <code>distrib_mul_action</code>, not even <code>module</code> and there is no need to set <code>f</code> to be the name of a map that already has a nice notation, <code>λ b: β, k • b</code> can be written as <code>(•) k</code> (the partially applied smul operation)</p>",
        "id": 278968405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649944244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Extraneous.20requirement.20in.20finprod.2Esmul_finsum.3F/near/278967502\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>So, this started with me noticing <code>multiset</code> only has versions on N and Z</p>\n</blockquote>\n<p>What does that mean?</p>\n</blockquote>\n<p>It means that I rewrote this post and moved a sentence from after the proof (where it made sense) to the beginning, oops. I meant \"noticing that <code>'multiset</code> only has versions of distribute-smul-over-addition for N and Z</p>",
        "id": 278968816,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649944447
    },
    {
        "content": "<p>PS did you already see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.smul_sum\">docs#multiset.smul_sum</a> ?</p>",
        "id": 278968830,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649944455
    },
    {
        "content": "<p>Yeah I still don't know what you mean. <code>multiset.smul_sum</code> distributes scalar multiplication over addition in the maximum generality.</p>",
        "id": 278969001,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649944561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/Extraneous.20requirement.20in.20finprod.2Esmul_finsum.3F/near/278968830\">said</a>:</p>\n<blockquote>\n<p>PS did you already see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.smul_sum\">docs#multiset.smul_sum</a> ?</p>\n</blockquote>\n<p>.... no, and what's it doing there, instead of in the algebra library where it makes sense... -_-</p>",
        "id": 278969129,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649944630
    },
    {
        "content": "<p>well, thanks...</p>",
        "id": 278969140,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649944634
    },
    {
        "content": "<p>(I spent a depressing amount of time looking for that lemma first.)</p>",
        "id": 278969190,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649944667
    },
    {
        "content": "<p>Do you know how to search for lemmas efficiently?</p>",
        "id": 278969637,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649944866
    },
    {
        "content": "<p>I keep a tab of <a href=\"https://leanprover-community.github.io/mathlib_docs\">the docs</a> open and type my guess for the lemma name in the search bar.</p>",
        "id": 278969800,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649944945
    },
    {
        "content": "<p>define \"efficiently\"</p>",
        "id": 278969927,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945026
    },
    {
        "content": "<p>\"usually in under 10s\"</p>",
        "id": 278969950,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649945041
    },
    {
        "content": "<p>No because my internet connection is awful :V</p>",
        "id": 278970023,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945057
    },
    {
        "content": "<p>but I pick up the keywords fast enough, so it's mostly just \"put <code>multiset</code>, <code>smul</code>, <code>sum</code> into the search box\"</p>",
        "id": 278970069,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945080
    },
    {
        "content": "<p>forex</p>",
        "id": 278970077,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945083
    },
    {
        "content": "<p>Yeah</p>",
        "id": 278970142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649945113
    },
    {
        "content": "<p>... which begs the question why I didn't in fact find it, given it's literally the first result</p>",
        "id": 278970152,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945118
    },
    {
        "content": "<p>oh, you know what, it's because I overthought it</p>",
        "id": 278970178,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945134
    },
    {
        "content": "<p>I had the multiset page open already, so I just skimmed that page by section</p>",
        "id": 278970209,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945146
    },
    {
        "content": "<p>(relatedly, my internet/browser sucks and waiting for the search to actually complete frequently takes longer than finding it by hand in an already-loaded page)</p>",
        "id": 278970292,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945168
    },
    {
        "content": "<p>Yeah, the problem with this approach is that it might very well be in another file, which is what happened here.</p>",
        "id": 278970388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649945209
    },
    {
        "content": "<p>yeah... <em>sigh</em><br>\nWell, lesson learned. Though I will still lodge an objection about lemma organization :v</p>",
        "id": 278970427,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945234
    },
    {
        "content": "<p>Scalar actions are used surprisingly widely! No wonder they are spread across many files and folders.</p>",
        "id": 278970490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649945269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/116395-maths/topic/Extraneous.20requirement.20in.20finprod.2Esmul_finsum.3F/near/278970427\">said</a>:</p>\n<blockquote>\n<p>yeah... <em>sigh</em><br>\nWell, lesson learned. Though I will still lodge an objection about lemma organization :v</p>\n</blockquote>\n<p>Its an ongoing process! feel free to PR moving things to better places.<br>\nIn general grepping (either with the vscode project search sidebar or with command line tools works well) but it does sometimes miss things like names generated by to_addiitve, or namespaces.<br>\nThere is also a workspace symbols search in vscode, via <code>ctrl+p, #searchterm.i.want</code> which will actually search the lemmas in the current environment by name, this is very useful too</p>",
        "id": 278970859,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649945453
    },
    {
        "content": "<p>Note that <a href=\"https://github.com/leanprover-community/mathlib/pull/13340\">#13340</a> moves these lemmas (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.smul_sum\">docs#multiset.smul_sum</a> etc) elsewhere</p>",
        "id": 279012850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649965779
    },
    {
        "content": "<blockquote>\n<p>There is also a workspace symbols search in vscode, via ctrl+p, #searchterm.i.want which will actually search the lemmas in the current environment by name, this is very useful too</p>\n</blockquote>\n<p>Eeeenteresting, is that indeed workspace symbol search... I don't think I knew this worked in VSCode. It doesn't in neovim. Probably  <code>lean-language-server</code> is missing <code>workspace/symbol</code>, but that must mean that the non-LSP server knows how to do it, hrm...</p>",
        "id": 279032855,
        "sender_full_name": "Julian Berman",
        "timestamp": 1649977978
    }
]