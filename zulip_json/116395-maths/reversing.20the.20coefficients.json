[
    {
        "content": "<p>in maths this would be notated as <code>x ^ deg f * f(1/x)</code></p>",
        "id": 200078636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591611221
    },
    {
        "content": "<p>this reverses the coefficients</p>",
        "id": 200078640,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591611228
    },
    {
        "content": "<p>this is a monoid isomorphism if the ring is an integral domain I think</p>",
        "id": 200078695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591611250
    },
    {
        "content": "<p>should we put this in mathlib?</p>",
        "id": 200078703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591611257
    },
    {
        "content": "<p>Looks good to me. <code>polynomial.reverse</code>?</p>",
        "id": 200082943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591614384
    },
    {
        "content": "<p>this does not preserve addition of polynomials of different degrees</p>",
        "id": 200083879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591615117
    },
    {
        "content": "<p>and it is not even a bijection: the reverse of X^n is 1</p>",
        "id": 200083909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591615144
    },
    {
        "content": "<p>Right. But it shows up sufficiently often that it should have it's own definition in mathlib.</p>",
        "id": 200083949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591615189
    },
    {
        "content": "<p>I think we can be sure that reverse^3 = reverse</p>",
        "id": 200084628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591615730
    },
    {
        "content": "<p>(what is the name for this)</p>",
        "id": 200084642,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591615738
    },
    {
        "content": "<p>Galois insertion</p>",
        "id": 200084662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591615752
    },
    {
        "content": "<p>Maybe this should be parameterized on the maximum degree and treated as a bijection on the submodule of deg &lt;= n polynomials?</p>",
        "id": 200085470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616320
    },
    {
        "content": "<p>I don't think it is true that reverse^3 = reverse</p>",
        "id": 200085500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616345
    },
    {
        "content": "<p>why not?</p>",
        "id": 200085520,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591616364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/200085470\">said</a>:</p>\n<blockquote>\n<p>Maybe this should be parameterized on the maximum degree and treated as a bijection on the submodule of deg &lt;= n polynomials?</p>\n</blockquote>\n<p>then we lose the fact that reverse is a monoid homomorphism</p>",
        "id": 200085545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591616389
    },
    {
        "content": "<p>add monoid hom?</p>",
        "id": 200085605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616415
    },
    {
        "content": "<p>or monoid hom</p>",
        "id": 200085617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616421
    },
    {
        "content": "<p>monoid hom</p>",
        "id": 200085625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591616429
    },
    {
        "content": "<p><code>reverse(pq) = x^(deg(pq)) (pq)(1/x) = x^(deg p + deg q) p(1/x) q(1/x) = [x^(deg p) p(1/x)] [x^(deg q) q(1/x)] = reverse(p) reverse(q)</code></p>",
        "id": 200085683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591616482
    },
    {
        "content": "<p>the equality <code>deg(pq) = deg p + deg q</code> needs integral domain</p>",
        "id": 200085694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591616493
    },
    {
        "content": "<p>I don't think you lose the monoid hom property, you just get some kind of graded multiplicativity property among the elements of the family</p>",
        "id": 200085768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/200083949\">said</a>:</p>\n<blockquote>\n<p>Right. But it shows up sufficiently often that it should have it's own definition in mathlib.</p>\n</blockquote>\n<p>citation?</p>",
        "id": 200085874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616614
    },
    {
        "content": "<p>My algebra course notes</p>",
        "id": 200085897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591616630
    },
    {
        "content": "<p>To me without fixing the power of x this seems like a very awkward operation for the reasons Kevin noted</p>",
        "id": 200085958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616656
    },
    {
        "content": "<p>and I thought we had already established that <code>deg</code> is not a very well behaved function and the graded family of submodules deg p &lt;= n plays much better</p>",
        "id": 200086065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> If you fix the degree, it will become</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">deg</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 200086086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591616752
    },
    {
        "content": "<p>I think it's <code>reverse (m + n) (p * q) = reverse m p * reverse n q</code>, right?</p>",
        "id": 200086149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616781
    },
    {
        "content": "<p>depends on how you totalize reverse m I guess</p>",
        "id": 200086170,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591616810
    },
    {
        "content": "<p>but sure</p>",
        "id": 200086171,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591616812
    },
    {
        "content": "<p>I think the right behavior is to drop coefficients that are flipped past zero</p>",
        "id": 200086191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591616831
    },
    {
        "content": "<p>does this satisfy the property?</p>",
        "id": 200086235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591616867
    },
    {
        "content": "<p>Not without additional assumptions: <code>reverse 1 (x^2 + 1) = 1</code> but <code>reverse 2 (x^4 + 2x^2 + 1) = x^2 + 2</code></p>",
        "id": 200086742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591617215
    },
    {
        "content": "<p>I think it holds as long as at least one of <code>m</code> and <code>n</code> is more than its polynomial's degree</p>",
        "id": 200086811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591617254
    },
    {
        "content": "<p>that is a bit unfortunate</p>",
        "id": 200087049,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591617451
    },
    {
        "content": "<p>Obviously this all works out much better in Laurent series</p>",
        "id": 200087164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591617534
    },
    {
        "content": "<p>looks like there just is no section to the monoid surjection R[X] -&gt; R[X]/(X^n)</p>",
        "id": 200087209,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591617565
    },
    {
        "content": "<p>wait how does this work in laurent series</p>",
        "id": 200087381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591617660
    },
    {
        "content": "<p>i dont think the result is still a Laurent series</p>",
        "id": 200087436,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591617695
    },
    {
        "content": "<p>Sending x^n to x^{d-n} sounds like it takes Laurent series to Laurent series to me</p>",
        "id": 200087518,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591617736
    },
    {
        "content": "<p>Ah, I mean Laurent polynomial</p>",
        "id": 200087554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591617765
    },
    {
        "content": "<p>ah ok</p>",
        "id": 200087567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591617776
    },
    {
        "content": "<p>(is a Laurent polynomial a Laurent series with finitely many nonzero terms?)</p>",
        "id": 200087613,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591617804
    },
    {
        "content": "<p>yeah that sounds like cheating though</p>",
        "id": 200087622,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591617813
    },
    {
        "content": "<p>yes</p>",
        "id": 200087627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591617819
    },
    {
        "content": "<p>It pretty much is cheating, it's basically solving the problem by fiat</p>",
        "id": 200087722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591617869
    },
    {
        "content": "<p>It's pushing the work into defining the appropriate truncation map from Laurent polynomials to polynomials</p>",
        "id": 200087773,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591617920
    },
    {
        "content": "<p>This probably extends to group rings where the monomials take exponents in a group</p>",
        "id": 200087789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591617935
    },
    {
        "content": "<p>this is just a special case of R[G] being a bifunctor</p>",
        "id": 200087865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591617978
    },
    {
        "content": "<p>The only times I've had to reverse polynomials, they were char polys, so monic and the degree was a constant which was everywhere</p>",
        "id": 200090859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591619843
    },
    {
        "content": "<p>And I guess typically the constant coefficient was nonzero...</p>",
        "id": 200091656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591620303
    },
    {
        "content": "<p>I was actually reminded by this when it was implicitly used in <a href=\"https://math.berkeley.edu/~hwl/papers/witt.pdf\">the paper I linked in the Witt vector paper</a> where every monic polynomial splits in some ring and as a consequence every polynomial with constant coefficient 1 splits</p>",
        "id": 200095998,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591622424
    },
    {
        "content": "<p>So I was in exactly this situation where the only polynomials I ever reversed were either monic or had constant coeff 1. It's a bijection between these two things, perhaps even an iso of multiplicative monoids</p>",
        "id": 200097232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591623056
    },
    {
        "content": "<p>I vote for having a name for <code>x ^ n * f(1 / x)</code> where <code>deg f ≤ n</code>. If it has better properties in case <code>n = deg f</code>, then we can have two names.</p>",
        "id": 200116438,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591630957
    },
    {
        "content": "<p>My thoughts are to associate the name to <code>x ^ n * f(1 / x)</code> without the constraint but with <code>deg f ≤ n</code> being the soft domain of the function. I don't think it will be used enough to justify the added convenience of no side assumptions in the multiplication theorem</p>",
        "id": 200117165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591631279
    },
    {
        "content": "<p>Reviving this, I'll note that some version of reverse would have been immensely useful when defining <code>next_coeff</code></p>",
        "id": 205944903,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596566836
    },
    {
        "content": "<p>and sooner or later we will need to define Laurent polynomials and Laurent series. I imagine defining Laurent polynomials as <code>monoid_algebra _ Z</code> would be fine, but I'm not sure if there's any way to flesh out their API except copy-pasting the ridiculous amount of code on polynomials</p>",
        "id": 205945127,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596566917
    },
    {
        "content": "<p>doubly-infinite Laurent series could similarly be defined by duplicating the API of power series</p>",
        "id": 205945269,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596566977
    },
    {
        "content": "<p>and Laurent series could be defined either as a <code>subring</code> of doubly-infinite Laurent series or as pairs <code>(order : Z, x : power_series)</code> where <code>x</code> has a nonzero constant term</p>",
        "id": 205945497,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596567077
    },
    {
        "content": "<p>You can't multiply arbitrary doubly infinite series.</p>",
        "id": 205945556,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596567110
    },
    {
        "content": "<p>What do you mean by \"doubly-infinite Laurent series\"?</p>",
        "id": 205946178,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596567406
    },
    {
        "content": "<p>In case it's not clear: <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><msup><mi>T</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><msup><mi>T</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\"> (\\sum_{i = -\\infty}^\\infty T^i) \\cdot  (\\sum_{i = -\\infty}^\\infty T^i) = ?</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.182705em;vertical-align:-0.35804100000000005em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">−</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35804100000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.182705em;vertical-align:-0.35804100000000005em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">−</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35804100000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mclose\">?</span></span></span></span>.</p>",
        "id": 205946764,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596567700
    },
    {
        "content": "<p>And then Puiseux series and then Hahn series <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 205947622,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596568105
    },
    {
        "content": "<p>Since polynomial rings,  power series rings, and localizations already exist, why not define the laurent polynomials resp. laurent series as the localization of polynomials resp. power series at the element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>?</p>",
        "id": 205949113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596569055
    },
    {
        "content": "<p>You can do some things with doubly-infinite Laurent series, defined as above, but you’re right, they’re not a ring, so they’re probably better made ad hoc for compex analysis applications later</p>",
        "id": 205965603,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596578012
    },
    {
        "content": "<p>Defining the others with localisation, however, sounds like it could be done now</p>",
        "id": 205965701,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1596578092
    },
    {
        "content": "<p>If you have some sort of topology on your base ring making it complete then you can look at doubly infinite power series which converge in certain regions, and these can be rings</p>",
        "id": 205966187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596578412
    },
    {
        "content": "<p>Such things come up in p-adic Hodge theory</p>",
        "id": 205966212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596578427
    },
    {
        "content": "<p>These usually show up as completions of localizations though.</p>",
        "id": 205966255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596578456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/200086065\">said</a>:</p>\n<blockquote>\n<p>and I thought we had already established that <code>deg</code> is not a very well behaved function and the graded family of submodules deg p &lt;= n plays much better</p>\n</blockquote>\n<p>I probably was one of the people helping to establish this -- but I now realise that <code>deg </code> is very well-behaved: it's a valuation (or more precisely 37^(-deg) is). You should think of it as the size of the pole at 0 of f(T^{-1}). Note that in p-adic numbers the valuation is 37^(+something). The sign difference means that the nice submodules coming from the p-adic valuation are v &gt;= n, whereas the nice submodules coming from the degree valuation are d &lt;= n.</p>",
        "id": 208815753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599049743
    },
    {
        "content": "<p>You are not allowed to use <code>0.37</code> as a junk value, only <code>37</code>. So your post should read \"<code>37^(-deg)</code> is\".</p>",
        "id": 208815975,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1599049855
    },
    {
        "content": "<p>Fixed, thanks.</p>",
        "id": 208816091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599049920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/208815753\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/200086065\">said</a>:</p>\n<blockquote>\n<p>and I thought we had already established that <code>deg</code> is not a very well behaved function and the graded family of submodules deg p &lt;= n plays much better</p>\n</blockquote>\n<p>I probably was one of the people helping to establish this -- but I now realise that <code>deg </code> is very well-behaved: it's a valuation (or more precisely 37^(-deg) is). You should think of it as the size of the pole at 0 of f(T^{-1}). Note that in p-adic numbers the valuation is 37^(+something). The sign difference means that the nice submodules coming from the p-adic valuation are v &gt;= n, whereas the nice submodules coming from the degree valuation are d &lt;= n.</p>\n</blockquote>\n<p>Indeed!  This is why I called <code>at_infty</code> the <code>reverse</code> that I was defining.  But I think that it is not yet implemented, unfortunately.</p>",
        "id": 208816311,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599050024
    },
    {
        "content": "<p><code>deg</code> only makes mathematical sense if it is allowed to take a -infty like value at zero</p>",
        "id": 208817255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599050551
    },
    {
        "content": "<p>but that doesn't play well with lean's types</p>",
        "id": 208817275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599050565
    },
    {
        "content": "<p>yes, and that's exactly why Johan wrote group_with_zero</p>",
        "id": 208817280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599050571
    },
    {
        "content": "<p>I agree that deg is basically a valuation, but I'm not convinced valuations are any easier to work with than deg</p>",
        "id": 208817481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599050692
    },
    {
        "content": "<p>no, but it frames your understanding of what you can expect from them.</p>",
        "id": 208817519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599050717
    },
    {
        "content": "<p>the family of submodules approach seems much more formal friendly</p>",
        "id": 208817568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599050747
    },
    {
        "content": "<p>but if you've written thousands of lines of a code in a perfectoid project whose line 1 is the definition of a valuation, then you get a feeling for them :-)</p>",
        "id": 208817643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599050780
    },
    {
        "content": "<p>Perhaps the lesson is that the family of submodules approach is useful for valuations, among which is <code>deg</code>...</p>",
        "id": 208849209,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1599063153
    },
    {
        "content": "<p>In case people find it useful, I have defined a command <code>at_infty</code> taking as input a polynomial <code>p</code> and returning the polynomial <code>at_infty p</code>, whose coefficients are reversed, starting from <code>nat_degree p</code>.  The <code>0</code> polynomial is sent to itself.  I have not yet proved that <code>at_infty</code> maps products of polynomials to products, though.</p>\n<p>The relevant Lean file is here:</p>\n<p><a href=\"https://gist.github.com/adomani/f1c468b8812a55e12e95bff954b3596f\">https://gist.github.com/adomani/f1c468b8812a55e12e95bff954b3596f</a></p>",
        "id": 208928205,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599117080
    },
    {
        "content": "<p>Nice! <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> If you clean this up a bit, I think it would make a really nice first PR</p>",
        "id": 208928676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599117429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/208928676\">said</a>:</p>\n<blockquote>\n<p>Nice! <span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> If you clean this up a bit, I think it would make a really nice first PR</p>\n</blockquote>\n<p>I will try!  Sadly, I thought that I had already cleaned it up...  Ahahaha</p>",
        "id": 208928709,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599117459
    },
    {
        "content": "<p>It's hard to learn those tricks out of the blue. It might be very helpful to do the cleaning up in a pair programming session</p>",
        "id": 208928781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599117496
    },
    {
        "content": "<p>I'll be leaving on a camping trip in 30 minutes... so I can't really help before Monday.</p>",
        "id": 208928810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599117520
    },
    {
        "content": "<p>If you are offering, I am happy to do it now</p>",
        "id": 208928811,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599117521
    },
    {
        "content": "<p>ok, then I will wait!</p>",
        "id": 208928820,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599117530
    },
    {
        "content": "<p>But I'm sure others can help with it.</p>",
        "id": 208928824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599117534
    },
    {
        "content": "<p>have fun on your camping trip!</p>",
        "id": 208928831,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599117539
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 208928835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599117543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I did a cleanup pass to put it in my understanding of mathlib style.</p>\n<ol>\n<li>Make sure to use two spaces for indentation</li>\n<li>Curly braces and operators need one space around them</li>\n<li>If you use <code>simp</code> or <code>tidy</code>, make sure it is a finishing tactic.  Otherwise use <code>squeeze_simp</code> to get a <code>simp only [...]</code>, or <code>tidy?</code> to get some tactic block to clean up.</li>\n<li>Join consecutive <code>rw</code> tactics into a single <code>rw [...]</code> tactic.  Sometimes you can merge this with <code>simp</code>.</li>\n<li>It's usually better to use named fields rather than positional ones.</li>\n<li>I prefer parentheses for quantifier variables, but I don't think that's required.</li>\n<li>Usually, <code>by exact</code> is unnecessary, and you can set the proof term with <code>:=</code>.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finset_of_bounded</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">nN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">subset</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_le_nat</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">nN</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">le_degree_of_mem_supp</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">mem_support_to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">coeff_eq_zero_of_nat_degree_lt</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">min</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">rev_invol</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rev_at</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">rev_at</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">min10</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">min_zero</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">NiN</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">convert</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub_self</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">min10</span><span class=\"o\">,</span> <span class=\"n\">NiN</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">not_le</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">iN</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">Ni0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">min1iN</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">min_eq_left</span> <span class=\"n\">iN</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min1iN</span><span class=\"o\">,</span> <span class=\"n\">Ni0</span><span class=\"o\">,</span> <span class=\"n\">min1iN</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">rev_support</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset_of_bounded</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"n\">rn</span><span class=\"o\">,</span> <span class=\"n\">rnsupp</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">rev_at</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">zerr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">rn</span> <span class=\"o\">:=</span> <span class=\"n\">zero_le</span> <span class=\"n\">rn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">rle</span> <span class=\"o\">:</span> <span class=\"n\">rn</span> <span class=\"bp\">≤</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">le_degree_of_mem_supp</span> <span class=\"n\">rn</span> <span class=\"n\">rnsupp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">rneq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rn</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"n\">rle</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">rn</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">rneq</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">min_zero</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"n\">rn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">at_infty</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">rev_support</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">hb₂</span><span class=\"bp\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rev_invol</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">rev_at</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rev_invol</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 208934127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599121015
    },
    {
        "content": "<p>One more simplification: in <code>rev_support</code>, one sequence of tactics had the effect of substituting a variable in another expression.  If you use <code>rintros</code>, you can place <code>rfl</code> where that equality is to auto-substitute.  (I updated the message above.)</p>",
        "id": 208935120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599121611
    },
    {
        "content": "<p>Also, in <code>le_degree_of_mem_supp</code>, the variable <code>a</code> can be implicit, as it can be inferred from <code>a ∈ p.support</code>.</p>",
        "id": 208935347,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1599121768
    },
    {
        "content": "<p>With Sebastien's suggestion, a few more simplifications, some (questionably better?) renamings, and using <code>function.involutive</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finset_of_bounded</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">nN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">subset</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_le_nat</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">nN</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">le_degree_of_mem_supp</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">mem_support_to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">coeff_eq_zero_of_nat_degree_lt</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">min</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">rev_at_invol</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">involutive</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">rev_at</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub_self</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">NiN</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">NiN</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">not_le</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">Ni0</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">iN</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">min1iN</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">min_eq_left</span> <span class=\"n\">iN</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Ni0</span><span class=\"o\">,</span> <span class=\"n\">min1iN</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">rev_at_support</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset_of_bounded</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"n\">rn</span><span class=\"o\">,</span> <span class=\"n\">rnsupp</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">rev_at</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">rle</span> <span class=\"o\">:</span> <span class=\"n\">rn</span> <span class=\"bp\">≤</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">le_degree_of_mem_supp</span> <span class=\"n\">rnsupp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">rn</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"n\">rle</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">min_zero</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"n\">rn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">at_infty</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">rev_at_support</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">rev_at_invol</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">rev_at</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rev_at_invol</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 208935766,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599121974
    },
    {
        "content": "<p>Dear <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, thank you very much for your input!  I was with a student, but I will take a look at your improvements and will learn them for future use!</p>",
        "id": 208938116,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599123254
    },
    {
        "content": "<p>One more thing that's needed is to add <code>/-- documentation comments -/</code> for the definitions.</p>",
        "id": 208938124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599123257
    },
    {
        "content": "<p>I guess also <code>p.to_fun</code> is sort of against the API for polynomials.  It should probably be <code>p.coeff</code> instead:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">at_infty</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">rev_at_support</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">rev_at_invol</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">rev_at</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rev_at_invol</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 208939026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599123833
    },
    {
        "content": "<p>You should also prove a lemma which identifies the coefficients of <code>at_infty p</code>, along with other lemmas that are likely to be useful (if you have a particular use in mind, it may suggest such lemmas).</p>",
        "id": 208940993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599124988
    },
    {
        "content": "<p>Just so we are all on the same page: we are not aiming for readability of the final code, correct?</p>\n<p>for instance is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">rev_at_invol</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">involutive</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">rev_at</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">),</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub_self</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">not_le</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)),</span> <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">h</span><span class=\"o\">))],</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>preferable to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">rev_at_invol</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">involutive</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">rev_at</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub_self</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">NiN</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">NiN</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">not_le</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">Ni0</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">iN</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">min1iN</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">min_eq_left</span> <span class=\"n\">iN</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Ni0</span><span class=\"o\">,</span> <span class=\"n\">min1iN</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 208941240,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599125146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/208940993\">said</a>:</p>\n<blockquote>\n<p>You should also prove a lemma which identifies the coefficients of <code>at_infty p</code>, along with other lemmas that are likely to be useful (if you have a particular use in mind, it may suggest such lemmas).</p>\n</blockquote>\n<p>Ok, I will include that as well!  I was going to also prove that <code>at_infty</code> is \"close to\" an involution</p>",
        "id": 208941382,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599125222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/208941240\">said</a>:</p>\n<blockquote>\n<p>Just so we are all on the same page: we are not aiming for readability of the final code, correct?</p>\n</blockquote>\n<p>I think it depends on how readable you think it should be.  Part of mathlib style seems to be to not care about readability of trivial statements.</p>\n<p>I usually avoid writing proof terms that are too nested, which is why I kept it in the second form rather than putting it into the first.  If it were <code>rw</code> rather than <code>simp</code>, I might go with the first, but that's because you can still step through each rewrite, where <code>simp</code> does things in a more opaque way.</p>",
        "id": 208942127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599125667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/208942127\">said</a>:</p>\n<blockquote>\n<p>I usually avoid writing proof terms that are too nested, which is why I kept it in the second form rather than putting it into the first.  If it were <code>rw</code> rather than <code>simp</code>, I might go with the first, but that's because you can still step through each rewrite, where <code>simp</code> does things in a more opaque way.</p>\n</blockquote>\n<p>Ok, thank you for your input!</p>",
        "id": 208942219,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599125757
    },
    {
        "content": "<p>(These are just my tastes in functional programming -- I'm not an authority in any way, to be clear!)</p>",
        "id": 208942383,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599125861
    },
    {
        "content": "<p>Sure, but your comments help me, nonetheless!</p>",
        "id": 208942933,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599126238
    },
    {
        "content": "<p>Re readability: I think the philosophy is that short assertions which are obvious to any mathematician can be golfed to obscurity, because nobody wants to read the actual proof that deg(fg)=deg(f)deg(g) in an integral domain, it's obvious. Longer proofs which might naturally be proved in tactic mode can still be heavily golfed, because the shorter the code, the quicker it will compile, but if you want to flag something about your proof then you can do it in the module docstring at the top of the file.</p>",
        "id": 208952987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599132750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/208952987\">said</a>:</p>\n<blockquote>\n<p>Re readability: I think the philosophy is that short assertions which are obvious to any mathematician can be golfed to obscurity, because nobody wants to read the actual proof that deg(fg)=deg(f)deg(g) in an integral domain, it's obvious. Longer proofs which might naturally be proved in tactic mode can still be heavily golfed, because the shorter the code, the quicker it will compile, but if you want to flag something about your proof then you can do it in the module docstring at the top of the file.</p>\n</blockquote>\n<p>Thanks!  I like the suggestion of obscuring into the code steps that are completely clear!  As I find that most of these results are pretty straightforward mathematically, I may opt for a shorter version, when I can find one!</p>",
        "id": 208953643,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599133187
    },
    {
        "content": "<p>Is there a way to have <code>rw</code> only rewrite something, but not everything?</p>",
        "id": 208953722,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599133217
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 208953830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599133312
    },
    {
        "content": "<p>also read <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/rewrite.20at.20a.20specific.20variable.3F\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/rewrite.20at.20a.20specific.20variable.3F</a></p>",
        "id": 208953914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599133346
    },
    {
        "content": "<p>Ah, I had read about <code>conv</code> and have never been able to use it...  I will try once more!  Thanks!</p>",
        "id": 208953953,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599133372
    },
    {
        "content": "<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> where you can't get <code>conv</code> to work we could help.</p>",
        "id": 208954007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599133403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/208954007\">said</a>:</p>\n<blockquote>\n<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> where you can't get <code>conv</code> to work we could help.</p>\n</blockquote>\n<p>While trying to produce a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I realized that I may not have found the minimal path to my proof.  I will try to streamline everything and will post something again, once I have a shorter question.</p>\n<p>Thanks for the offer of help, though!</p>",
        "id": 208954807,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599133850
    },
    {
        "content": "<p>I would like to prove that the degree of <code>at_infty p</code> is the <code>degree p - p.support.inf</code>.  Unfortunately, this assertion is riddled with <code>with_bot</code>s and <code>option</code>s and I cannot even produce a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.  Of course, the only issue arises with <code>p=0</code>, since otherwise all the <code>with_bot</code> and <code>option</code>s really are not there.  Nevertheless, I am unable to navigate this.  Can someone write for me a lemma asserting the mathematical fact that <code>degree (at_infty p) = degree p - p.support.inf</code>, whenever there are no weird options and it is <code>none</code> otherwise?</p>\n<p>Thank you very much!</p>",
        "id": 208962444,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599138028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> There is also <code>nat_degree</code>... does that make your life easier?</p>",
        "id": 209184747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599322200
    },
    {
        "content": "<p>It takes values in <code>nat</code>, and it is equal to <code>p.degree</code>, except for <code>p = 0</code>.</p>",
        "id": 209184792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599322222
    },
    {
        "content": "<p>Thanks!  I found the command, but have been having some difficulties navigating between the two: many lemmas intertwine between the two notions and I have been unable to separate them effectively</p>",
        "id": 209185492,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599323374
    },
    {
        "content": "<p>Yup... it's a bit of a dark art to figure out which one is best for the application at hand (-;</p>",
        "id": 209185619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599323536
    },
    {
        "content": "<p>Dear All,</p>\n<p>in case anyone is interested, I wrote a proof of the equality </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">reverse</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">reverse</span> <span class=\"n\">g</span>\n</code></pre></div>\n\n<p>in the case in which the leading coefficients do not multiply to zero.  This assumption can be dropped, modifying slightly the definition of <code>reverse</code> (in the file, the modification is called <code>reflect _ </code>).</p>\n<p>The proof is essentially by induction on the number of terms of a polynomial: this might already exist in Lean, in which case the file can be substantially shortened!</p>\n<p>If anyone has any comments, I would be more than happy to hear them, though maybe in an hour, since I am going for lunch right now!</p>\n<p><a href=\"https://gist.github.com/adomani/4490b69b4a8627e24dae54decaf3f888\">https://gist.github.com/adomani/4490b69b4a8627e24dae54decaf3f888</a></p>",
        "id": 212055198,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601633056
    },
    {
        "content": "<p>Awesome! I don't think we have that induction principle. Looking forward to the PRs (-;</p>",
        "id": 212058395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601635384
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4364\">#4364</a></p>",
        "id": 212096515,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601655561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Great! But it's a rather big PR, I think. Can you split it in two?</p>",
        "id": 212097375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601655983
    },
    {
        "content": "<p>I can probably move stuff from there to data.polynomial.degree.basic, though maybe it will have to wait until Monday</p>",
        "id": 212097558,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601656102
    },
    {
        "content": "<p>Btw, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> does moving stuff around count as splitting or not?</p>",
        "id": 212098203,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601656428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I think that with PRs that are &lt;= 300 lines you get more and better reviews. See also the following blog post<br>\n<a href=\"https://unhashable.com/stacked-pull-requests-keeping-github-diffs-small/\">https://unhashable.com/stacked-pull-requests-keeping-github-diffs-small/</a></p>",
        "id": 212100005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601657403
    },
    {
        "content": "<p>I left some reviews on the first few lemmas, and agree that a lot of stuff should be moved, and then you should split it into multiple PRs, classified mostly on which files you're editing.</p>",
        "id": 212123448,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601669771
    },
    {
        "content": "<p>Ok, do I need to create separate branches for each file that I want to edit?</p>",
        "id": 212123628,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601669878
    },
    {
        "content": "<p>Also, thank you very much for the reviews and the interest!</p>",
        "id": 212123698,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601669896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/212123628\">said</a>:</p>\n<blockquote>\n<p>Ok, do I need to create separate branches for each file that I want to edit?</p>\n</blockquote>\n<p>No, but I'd try to get 2 or 3 PRs each editing only 2 or 3 files if you can.</p>",
        "id": 212124353,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601670239
    },
    {
        "content": "<p>For instance, all the stuff that's really about <code>finset</code>s or <code>finset.min', finset.max'</code> without getting into polynomials could be a good PR to start with.</p>",
        "id": 212124474,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601670298
    },
    {
        "content": "<p>Ok, I will learn how to split the PR!</p>",
        "id": 212124509,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601670322
    },
    {
        "content": "<p>I am reading your comment right now: they are super helpful!</p>",
        "id": 212124530,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601670335
    },
    {
        "content": "<p>I will answer and edit the file properly once I am on the computer, likely on Monday</p>",
        "id": 212124581,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601670363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/reversing.20the.20coefficients/near/212124509\">said</a>:</p>\n<blockquote>\n<p>Ok, I will learn how to split the PR!</p>\n</blockquote>\n<p>I think the easiest thing to do is just to start a new branch and copy-paste, then once that PR merges into master, you merge master back into your original PR. I'm no git expert though, so other people might have better suggestions.</p>",
        "id": 212124678,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601670413
    },
    {
        "content": "<p>This is already a better suggestion than what I had in mind: I was going to copy the files outside of the branch and then gradually add a trickle of lemmas in small chunks!</p>",
        "id": 212125108,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601670666
    },
    {
        "content": "<p>Johan's link of <a href=\"https://unhashable.com/stacked-pull-requests-keeping-github-diffs-small/\">https://unhashable.com/stacked-pull-requests-keeping-github-diffs-small/</a> is a great git guide to how to stack the PR. That way you can break it out in manageable pieces in more robsut ways than just copy-paste.</p>",
        "id": 212125176,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601670708
    },
    {
        "content": "<p>But rather, piecewise add things though commits. A git commit doesn't have to commit an entire file, it can be just a piece of it (often called a hunk).</p>",
        "id": 212125269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601670742
    },
    {
        "content": "<p>Ok, I was reading the file, but will need to experiment with it, before I feel comfortable with its content!</p>",
        "id": 212125638,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601670931
    },
    {
        "content": "<p>Because mathlib uses the \"squash merge\" strategy for dealing with PRs, remember that your commit history on a PR branch is completely irrelevant. You can make it as messy as you like!</p>\n<p>In particular, I'd recommend not bothering with <code>git rebase</code> (and please don't force push to PR branches). You can just keep merging master into later branches as earlier PR branches get merged.</p>",
        "id": 212145229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601686638
    },
    {
        "content": "<p>Is there a good strategy for using git to revert the accidental edits to the weird vscode file?</p>",
        "id": 212155210,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601704743
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git checkout master -- path/to/weird/vscode/file\ngit commit\n</code></pre></div>",
        "id": 212155774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601705787
    },
    {
        "content": "<p>What versions do you have in git history?</p>",
        "id": 212155775,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601705788
    },
    {
        "content": "<p>If you want to revert all your edits in a file restoring the version from <code>HEAD</code>, then <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 212155787,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601705844
    },
    {
        "content": "<p>If you want to revert only some of your edits, then it's less trivial but is still possible.</p>",
        "id": 212155793,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601705880
    },
    {
        "content": "<p>There are git GUIs that let you revert specific chunks of the current <code>git diff</code>.</p>",
        "id": 212155843,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601705935
    },
    {
        "content": "<p>Of course, you can do the same in command line (e.g., add good edits using <code>git add -p</code>, then commit, then see <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's answer) but it's less convenient.</p>",
        "id": 212155901,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601706017
    },
    {
        "content": "<p>I use Emacs + magit, and it allows me to compare any two revisions (or compare any revision to the current version) and apply/revert specific hunks of the diff. I guess, other GUIs and editor plug-ins should have similar functionality.</p>",
        "id": 212155983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601706205
    },
    {
        "content": "<p>Dear All,</p>\n<p>I still do not feel comfortable with doing several small PRs, but I have broken up the main file into 4 files.  Two of them, <code>to_basic</code> and <code>to_trailing_degree</code> contain lemmas that I think should go into the corresponding files.  The remaining two files are called <code>erase_leading</code> and <code>reverse</code>.</p>\n<p><code>erase_leading</code> introduces and establishes some properties of the polynomial <code>f - f.leading_coeff * X ^ f.nat_degree</code>.<br>\n<code>reverse</code> proves that reversal of the coefficients is essentially multiplicative.</p>\n<p>I hope that this is a reasonable compromise, while I understand how to produce smaller PRs!</p>",
        "id": 212157679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601708934
    },
    {
        "content": "<p>In case it helps navigate the PR, the implications among the files are a linear order:</p>\n<p><code>to_basic &lt; to_trailing_degree &lt; erase_leading &lt; reverse_mul</code></p>",
        "id": 212157940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601709391
    },
    {
        "content": "<p>Dear All,</p>\n<p>I took into account the comments that I received on the big PR and have now broken it into small bits.  As I am not completely sure about how to do incremental PRs, I have decided to simply upload the files one at a time.  The first one is <a href=\"https://github.com/leanprover-community/mathlib/issues/4475\">#4475</a>, which contains a few extra lemmas added to the file <code>data/polynomial/degree/basic</code>.  Once this one receives some (hopefully positive!) feedback, I will gradually introduce the rest of the code.</p>",
        "id": 212419126,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601987005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I left some comments.</p>",
        "id": 212423409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601989183
    },
    {
        "content": "<p>Thank you!  I will look at them right now!</p>",
        "id": 212423439,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1601989200
    }
]