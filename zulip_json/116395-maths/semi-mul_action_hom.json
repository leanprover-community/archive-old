[
    {
        "content": "<p>For my work on group actions (proving a theorem of Jordan), I have introduced something which I called <code>mul_action_bihom</code> and is to <code>mul_action_hom</code>of what the semilinear maps introduced in mathlib by  <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> , <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> and <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  are to linear maps.<br>\nNow that I will start tidying up my work, it might be interesting to refactor the <code>mul_action_hom</code>in this direction.</p>\n<p>One motivation is to diminish the numbers of explicit coercions/decoercions that my naïve approach often required…</p>\n<p>A reasonable definition for these equivariant maps is: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">φ</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"n\">φ</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>There are two issues for the moment:</p>\n<ul>\n<li>\n<p>I don't really understand how to build this into a <code>fun_like</code> class.</p>\n</li>\n<li>\n<p>Composition of semilinear maps relies on <code>ring_hom_comp_triple</code> which expresses for three ring morphisms are in composition, and I wonder whether I have to introduce such a class. (The reasons explained in <a href=\"https://arxiv.org/abs/2202.05360\">Formalized functional analysis with semilinear maps, by Frédéric Dupuis, Robert Y. Lewis, Heather Macbeth</a> are not completely clear to me.</p>\n</li>\n</ul>\n<p>What I did is in <a href=\"https://github.com/leanprover-community/mathlib/tree/acl-Wielandt/acl-sandbox/group_theory/jordan/equivariant_map.lean\">branch#acl-Wielandt/acl-sandbox/group_theory/jordan/equivariant_map.lean</a></p>",
        "id": 284520898,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1654022456
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/semi-mul_action_hom\">#new members &gt; semi-mul_action_hom</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 284523811,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654023858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> Something that's interesting to me is that this has less structure than Frédéric, Rob and I needed.  We required the <code>φ</code> (in your notation) to be a ring homomorphism. Yours, as implemented here, is a bare function, but what kind of thing would it be in your use case?</p>\n<p>It matters because the kind of object <code>φ</code> is appears in the type signature of <code>equivariant_map</code>.</p>",
        "id": 284524308,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654024116
    },
    {
        "content": "<p>As you observe, the <code>ring_home_comp_triple</code> mechanism matters if you expect to be doing nontrivial compositions of equivariant maps.  Do you?</p>",
        "id": 284524557,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654024225
    },
    {
        "content": "<p>Eventually,  in the case I'm interested in,<code>M</code>and <code>N</code>will be groups and <code>φ </code>will be a group morphism.</p>",
        "id": 284525328,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1654024570
    },
    {
        "content": "<p>And yes, the group will move in the composition. (Although I did not really use the composition as an equivariant map itself, and applied the equivariant maps one by one.)</p>",
        "id": 284525435,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1654024634
    },
    {
        "content": "<p>This might be a case where the <code>ring_hom_comp_triple</code> mechanism is not useful.  It's useful for us (for linear maps) because we work in settings where <code>M</code> and <code>N</code> (rings for us) are given quite explicitly (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>, etc), there is a finite list of homomorphisms <code>φ</code> of interest (<code>id</code>, <code>conj</code>), and the <code>ring_hom_comp_triple</code> mechanism silently records all of the relationships among these homomorphisms (like <code>conj.comp conj = id</code>, etc).  If you're in a more general setting where the <code>M</code>, <code>N</code> and <code>φ</code> are not known explicitly, this trick might not be useful.</p>",
        "id": 284526684,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654025358
    },
    {
        "content": "<p>For now, you could try just defining the composition naively, so the composition of a <code>equivariant_map Φ₁₂ α₁ α₂</code> and a <code>equivariant_map Φ₂₃ α₂ α₃</code> is a <code>equivariant_map (Φ₂₃.comp Φ₁₂) α₁ α₃</code>.  Also write a \"homomorphism-switching\" constructor which takes a <code>equivariant_map φ α β</code> and a hypothesis <code>(h : Φ = Ψ)</code> and produces an <code>equivariant_map Ψ α β</code>.</p>",
        "id": 284527038,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654025595
    },
    {
        "content": "<p>Or, it may be that your unbundled version <code>is_equivariant_map</code> is more convenient (with otherwise the same notes as in my previous message).</p>",
        "id": 284528346,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654026352
    },
    {
        "content": "<p>OK, so I'll just define it naïvely and see whether it suffices!</p>",
        "id": 284529751,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1654027137
    },
    {
        "content": "<p>A naïve question : why does <code>function.comp ψ φ </code> work, and not <code>ψ.comp φ </code> as you wrote?</p>",
        "id": 284530485,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1654027507
    },
    {
        "content": "<p>That's because dot notation doesn't work on <code>f : α → β</code> (but it does on <code>f : α →* β</code>). I believe this could be fixed.</p>",
        "id": 284530697,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654027626
    },
    {
        "content": "<p>Can you give me a hint on where to look?</p>",
        "id": 284530756,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1654027662
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/function.20namespace/near/256048388\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/function.20namespace/near/256048388</a></p>",
        "id": 284530868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654027729
    },
    {
        "content": "<p>You can just write <code>Ψ ∘ Φ</code>; in my head I had already upgraded them to group homomorphisms (for which you would indeed write <code>Ψ.comp Φ</code>), but maybe there's no advantage.</p>",
        "id": 284531924,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654028351
    },
    {
        "content": "<p>I think there's a danger here that if σ is a bare function, higher order unification will kick in and ruin your day, which it can't do for bundled morphisms</p>",
        "id": 284533513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654029251
    },
    {
        "content": "<p>If Antoine uses his unbundled version <code>is_equivariant_map</code>, this won't be an issue, right?  Because it won't appear in a type signature?</p>",
        "id": 284533659,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654029327
    },
    {
        "content": "<p>This reminds me that I previously wondered if we definitely needed a new structure to handle semi-linear: after all they are just plain old __linear__ maps, it's just that we need a good setup for extension / restriction of scalars to make this all work.</p>",
        "id": 284539900,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1654032732
    },
    {
        "content": "<p>In the case of equivariant maps here, one could try to force <code>mul_action_hom</code> to do the work like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.hom.group_action</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">φ</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mul_action_hom</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">β</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Let `f` be one of these equivariant maps</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Indeed it is equivariant!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">mul_action_hom.map_smul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">β</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 284539981,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1654032787
    },
    {
        "content": "<p>I guess one would need some sort of type synonym for the pair <code>β</code>, <code>φ</code> and that would carry the <code>M</code> action as an instance. It's not clear to me that this would work well but it might be worth a few minutes' thought.</p>",
        "id": 284540366,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1654033015
    },
    {
        "content": "<p>You're suggesting to encode semilinear as \"linear with respect to a twisted scalar structure on the codomain\"?  For example, in the conjugate-linear case this amounts to encoding conjugate-linear as \"linear with respect to the <a href=\"https://en.wikipedia.org/wiki/Complex_conjugate_of_a_vector_space\">complex conjugate vector space</a>\"?</p>",
        "id": 284540624,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654033186
    },
    {
        "content": "<p>Frédéric did try this out at some point in one extended example, the Riesz representation theorem, and found the type synonyms behaved a bit unpredictably.  Here's some of the code from that experiment: <a href=\"https://github.com/leanprover-community/mathlib/pull/5830\">#5830</a>.</p>",
        "id": 284540859,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654033321
    },
    {
        "content": "<p>For what it's worth, this is how semilinear maps are encoded in Coq, and we had some discussion of the relative merits back in March: <a href=\"https://machinemath.zulipchat.com/#narrow/stream/316927-presentations/topic/Semi-linear.20maps.20in.20Lean\">https://machinemath.zulipchat.com/#narrow/stream/316927-presentations/topic/Semi-linear.20maps.20in.20Lean</a></p>",
        "id": 284541090,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654033456
    },
    {
        "content": "<p>One additional question that I have is about  equivariant_map that woud both extend equiv and equivariant_map. <br>\nI am not sure that it is mathematically so interesting, but they appear occasionnally. One issue when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f : X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is a bijective equivariant  map, its inverse is not always equivariant because the important case is that where the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> on scalars is only surjective.</p>\n<p>But my true question lies in the proper way to do it in mathlib: one can start from a function, add <code>map_mul</code>, and then add the rest to make an <code>equiv</code>. And one should have <code>.to_equiv</code>, and <code>.to_equivariant_map</code>. (All of this as <code>fun_like</code>?)</p>",
        "id": 284546910,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1654037402
    },
    {
        "content": "<p>If you use <code>old_structure_cmd</code> then you can just<code>extend</code> all the weaker notions</p>",
        "id": 284548606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654038657
    },
    {
        "content": "<p>(and create a parallel <code>fun_like</code> class for each structure you create)</p>",
        "id": 284548626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654038687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/semi-mul_action_hom/near/284540859\">said</a>:</p>\n<blockquote>\n<p>Frédéric did try this out [...]  Here's some of the code from that experiment: <a href=\"https://github.com/leanprover-community/mathlib/pull/5830\">#5830</a>.</p>\n</blockquote>\n<p>Interesting! It's good to have this PR as a record of what was explored.</p>",
        "id": 284579403,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1654070910
    },
    {
        "content": "<p>That branch seems to take the approach of putting the type synonym on the module; was putting the synonym on the ring also tried?</p>",
        "id": 284589272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654077310
    }
]