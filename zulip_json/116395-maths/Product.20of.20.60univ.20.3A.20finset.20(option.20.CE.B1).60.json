[
    {
        "content": "<p>What is the best approach to proving the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I guess <code>finset.sum_insert</code> would be the first step?</p>",
        "id": 189490955,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583156144
    },
    {
        "content": "<p>I would show that <code>univ : finset (option β)</code> is the same as <code>insert none (erase none univ)</code></p>",
        "id": 189491403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583156533
    },
    {
        "content": "<p>After that, I think there are enough library lemmas to just follow your nose.</p>",
        "id": 189491442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583156562
    },
    {
        "content": "<p>(Just a guess...) If you get stuck, then you've certainly found a hole in the library.</p>",
        "id": 189491471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583156590
    },
    {
        "content": "<p>I can't even parse the statement. Can someone translate this into LaTeX for me?</p>",
        "id": 189491961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583156966
    },
    {
        "content": "<p>What is LateX for <code>option.none</code>?</p>",
        "id": 189492056,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583157008
    },
    {
        "content": "<p>I guess it depends on context.</p>",
        "id": 189492081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583157040
    },
    {
        "content": "<p>Here's a proof.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">calc</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">insert_erase</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_insert</span> <span class=\"o\">(</span><span class=\"n\">not_mem_erase</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)],</span> <span class=\"n\">refl</span>\n  <span class=\"kn\">end</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">v</span> <span class=\"o\">:</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr_arg2</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">prod_bij</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 189492084,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583157042
    },
    {
        "content": "<p>I think I understand the statement now.</p>",
        "id": 189492170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583157116
    },
    {
        "content": "<blockquote>\n<p>Here's a proof.</p>\n</blockquote>\n<p>but where's your proof that it's the best approach? ;-)</p>",
        "id": 189492952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583157609
    },
    {
        "content": "<p>Ah, <code>prod_bij</code> is what I was missing!</p>",
        "id": 189492960,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583157614
    },
    {
        "content": "<p>Would it be worth it to include this in mathlib (as a <code>@[simp]</code> lemma)?</p>",
        "id": 189493085,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583157703
    },
    {
        "content": "<p><code>prod_bij</code> is really handy. We need docs that say things like <code>prod_bij</code> is how you prove a lot of things about products.</p>",
        "id": 189493091,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583157711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Product.20of.20.60univ.20.3A.20finset.20(option.20.CE.B1).60/near/189491961\" title=\"#narrow/stream/116395-maths/topic/Product.20of.20.60univ.20.3A.20finset.20(option.20.CE.B1).60/near/189491961\">said</a>:</p>\n<blockquote>\n<p>I can't even parse the statement. Can someone translate this into LaTeX for me?</p>\n</blockquote>\n<p>It says <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><msub><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>β</mi></mrow></msub><mi>v</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><msub><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>β</mi></mrow></msub><mi>v</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x\\prod_{i\\in\\beta}v(i)=x\\prod_{i\\in\\beta}v(i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 189493500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583157993
    },
    {
        "content": "<p>That translation explains why this is a hard Lean problem. Empty math implies hard Lean almost surely.</p>",
        "id": 189493681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583158137
    },
    {
        "content": "<p>Nice proof Chris. This is exactly, I guess, why one needs <code>prod_bij</code>: it says \"the products over two sets that mathematicians might not be able to tell the difference between, are equal\"</p>",
        "id": 189493723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583158187
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 189493801,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583158223
    }
]