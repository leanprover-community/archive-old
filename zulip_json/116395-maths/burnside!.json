[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem burnside : nonempty ((Σ g, fixed G X g) ≃ (orbits G X × G)) :=\n⟨calc  (Σ g, fixed G X g)\n    ≃ (Σ x, stab G X x) :\n  ⟨λ z, ⟨z.2.1, z.1, z.2.2⟩, λ z, ⟨z.2.1, z.1, z.2.2⟩, λ ⟨g, x, h⟩, rfl, λ ⟨x, g, h⟩, rfl⟩\n... ≃ (Σ A : orbits G X, Σ x : { x | ⟦x⟧ = A }, stab G X x) :\n  ⟨λ z, ⟨⟦z.1⟧, ⟨_, rfl⟩, z.2⟩, λ z, ⟨z.2.1.1, z.2.2⟩, λ ⟨x, z⟩, rfl, λ ⟨A, ⟨x, (hx : ⟦x⟧ = A)⟩, z⟩, sigma.eq hx $ by subst hx⟩\n... ≃ (Σ A : orbits G X, Σ x : { x | ⟦x⟧ = A }, stab G X (quotient.out A)) :\n  equiv.sigma_congr_right (λ A, equiv.sigma_congr_right (λ ⟨x, (hx : ⟦x⟧ = A)⟩,\n    stab_equiv G X _ _ _ (classical.some_spec (quotient.exact (hx.trans (quotient.out_eq A).symm)))))\n... ≃ (Σ A : orbits G X, { x | ⟦x⟧ = A } × stab G X (quotient.out A)) :\n  equiv.sigma_congr_right (λ A, equiv.sigma_equiv_prod _ _)\n... ≃ (Σ A : orbits G X, orbit G X (quotient.out A) × stab G X (quotient.out A)) :\n  equiv.sigma_congr_right (λ A, by rw orbit_out_eq_fibre)\n... ≃ (Σ A : orbits G X, G) :\n  equiv.sigma_congr_right (λ A, classical.choice $ orbit_stab G X _)\n... ≃ (orbits G X × G) :\n  equiv.sigma_equiv_prod _ _⟩\n</pre></div>",
        "id": 125134940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523855018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 125134941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523855027
    },
    {
        "content": "<p>Now you could do Sylow's theorems :-) but they might not be to your taste. I wonder if there's anything to learn from the Coq presentation of all this. I would imagine they use this sort of stuff everywhere in the odd order theorem.</p>",
        "id": 125137378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523860678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> sylow uses burnside?</p>",
        "id": 125137426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523860762
    },
    {
        "content": "<p>One proof I've seen does. I'm sure there are others :-) but it wouldn't surprise me if all of them used \"counting\" in some way.</p>",
        "id": 125137704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523861352
    },
    {
        "content": "<p>There is also Sylow's first theorem in Lean2 <a href=\"https://github.com/leanprover/lean2/tree/master/library/theories/finite_group_theory/pgroup.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/tree/master/library/theories/finite_group_theory/pgroup.lean\">https://github.com/leanprover/lean2/tree/master/library/theories/finite_group_theory/pgroup.lean</a><br>\nWe never did the effort to port this development to Lean 3, and a lot of stuff changed since them. But I think it would be worthwhile to take a look.</p>",
        "id": 125138288,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523862687
    },
    {
        "content": "<p>I say, the theory of (finite) cardinality in Lean is not well-developed</p>",
        "id": 125138291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523862719
    },
    {
        "content": "<p>Come on, you know that mathlib is a open source project. It's only as developed, as people put an effort into developing it.<br>\nThis includes by the way answering comments on pull requests ;-)</p>",
        "id": 125138541,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523863209
    },
    {
        "content": "<p>well</p>",
        "id": 125138590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863381
    },
    {
        "content": "<p>fixing those things created more error for me, so I need time to de-frustrate myself and to fix those errors</p>",
        "id": 125138596,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863405
    },
    {
        "content": "<p>...and revise for mechanics. I might soon need some other localization facts which aren't there yet, but I still didn't finish wrestling with compactness. Is Johannes talking about localization or something else?</p>",
        "id": 125138654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523863519
    },
    {
        "content": "<p>free group</p>",
        "id": 125138658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863537
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/89#discussion_r179398893\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/89#discussion_r179398893\">https://github.com/leanprover/mathlib/pull/89#discussion_r179398893</a></p>",
        "id": 125138659,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863543
    }
]