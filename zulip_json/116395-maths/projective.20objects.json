[
    {
        "content": "<p>I've just kicked <a href=\"https://github.com/leanprover-community/mathlib/issues/7108\">#7108</a> (projective objects) on the queue. Just a quick post here to point out that I think it would be a great project to \"ground\" this abstract stuff in actual examples (modules, vector spaces).</p>",
        "id": 235293446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618899869
    },
    {
        "content": "<p>The correct thing to do with vector spaces is to prove they're all free first. Do we have an <code>is_free</code> predicate?</p>",
        "id": 235293670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618900037
    },
    {
        "content": "<p>Not yet. I think it would be a very useful predicate. Because we have a lot of different ways of constructing free modules.</p>",
        "id": 235293833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618900149
    },
    {
        "content": "<p>Would <code>is_free</code> be defined as the existence of a <code>is_basis</code>?</p>",
        "id": 235294040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618900305
    },
    {
        "content": "<p>That would be my instinct</p>",
        "id": 235294247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618900440
    },
    {
        "content": "<p>I am mostly testing whether <em>my</em> instinct is developing in a \"lean-friendly/reasonable\" way: thanks for confirming, Kevin!</p>",
        "id": 235294407,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618900564
    },
    {
        "content": "<p>And the basic API might be: every module over a field is free, every module over the zero ring is free, zero module is free, product of two free modules is free, arbitrary product of free modules is free, polynomial and multivariable polynomial rings are free over the base semiring</p>",
        "id": 235294435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618900567
    },
    {
        "content": "<p>I see that you are freely using the axiom of choice...</p>",
        "id": 235294474,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618900601
    },
    {
        "content": "<p>Oh I guess every module over the zero ring is zero you don't need the zero ring result</p>",
        "id": 235294498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618900622
    },
    {
        "content": "<p>And then free modules are projective and flat</p>",
        "id": 235294548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618900666
    },
    {
        "content": "<p>Projective implies flat I guess</p>",
        "id": 235294642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618900724
    },
    {
        "content": "<p>I remember you telling me an interesting story about the definition of local rings in mathlib.  To the list above, I would also probably add (maybe as a longer term goal) that, over a \"math local ring\", projective is free.</p>\n<p><a href=\"https://stacks.math.columbia.edu/tag/058Z\">https://stacks.math.columbia.edu/tag/058Z</a></p>",
        "id": 235294694,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618900782
    },
    {
        "content": "<p>Right but that's a bigger project. I certainly agree it needs doing! More generally projective iff locally free</p>",
        "id": 235295649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618901395
    },
    {
        "content": "<p>Indeed!</p>\n<p>I guess that formalising this, all the required finiteness assumptions would should up, when they are needed.</p>",
        "id": 235295784,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618901456
    },
    {
        "content": "<p>I'd like to make a quick warning that <a href=\"https://github.com/leanprover-community/mathlib/tree/bundled-basis\">I'm refactoring</a> <code>is_basis</code> to be bundled, so I'd like to coordinate a bit before defining <code>is_free</code>.</p>",
        "id": 235302496,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618904941
    },
    {
        "content": "<p>Thanks for the reminder!</p>",
        "id": 235302539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618904975
    }
]