[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> , I need to prove a statement for which a step in the proof is that <code>a + b &lt; c + d</code> when <code>a &lt; c</code> and <code>b &lt; d</code>. I want to state it in enough generality that it would apply both to reals and ennreals. So I had a look at the very general version of <code>add_lt_add</code> we have now, in terms of covariant and contravariant classes, but it seems that this version of the lemma does not apply to ennreal as this is not an <code>add_cancel_monoid</code>. Do you see a way out for me?</p>",
        "id": 239723026,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1621590019
    },
    {
        "content": "<p>That is a fabulous example :-)</p>",
        "id": 239724834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621591020
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_lt_add\">docs#add_lt_add</a></p>",
        "id": 239725495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621591325
    },
    {
        "content": "<p>It seems to me that there are just too many typeclass assumptions in the lemma.</p>",
        "id": 239725645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621591401
    },
    {
        "content": "<p>Sébastien, thanks for your interesting test case: I am going to take a look now!</p>",
        "id": 239725744,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621591448
    },
    {
        "content": "<p>Note that this is a complicated example: it is <em>not</em> true that <code>a &lt; b -&gt; a + c &lt; b + c</code>.</p>",
        "id": 239725821,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1621591489
    },
    {
        "content": "<p>... the powers of infinity...</p>",
        "id": 239725895,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621591520
    },
    {
        "content": "<p>First of all, here is a lemma with fewer assumptions.  I have not yet checked that the typeclasses apply to ennreals, though.</p>",
        "id": 239726946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621592050
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sebastien</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left_n</span> <span class=\"n\">_</span> <span class=\"n\">bd.le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_right'</span> <span class=\"n\">ac</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 239726955,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621592055
    },
    {
        "content": "<p>I might have gone down the trap that Sébastien warned about, though...  let me try again!</p>",
        "id": 239727481,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621592392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> , I am really not sure how to make your example work.  As you mention, the <code>top</code> element in <code>ennreal</code> makes (some of) the new typeclasses not apply to this case: the ones that do not apply precisely fail because of <code>top</code>.  Thus, it is not missing instances, it is that they do not apply.  At the moment, I do not know of an order/operation mix typeclass that would work with <code>ennreal</code>.</p>",
        "id": 239732339,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621595155
    },
    {
        "content": "<p>I agree with you that it does not fit in any natural class. Maybe I'll just create a typeclass <code>has_add_lt_add</code> and instantiate it both for ennreal and under the assumptions of your version of <code>add_lt_add</code>.</p>",
        "id": 239733128,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1621595608
    },
    {
        "content": "<p>To be more specific:</p>\n<ul>\n<li><code>covariant</code> states the monotonicity of an operation, </li>\n<li><code>contravariant</code> states the \"contrapositive\", that is, you deduce an inequality <code>a &lt; b</code> if you know an inequality <code>a + c &lt; b + c</code>.</li>\n</ul>\n<p>Thus, <code>+</code> is monotone (i.e. <code>covariant_class ennreal ennreal (+) (≤)</code>).   Since the order is linear, it is also contrapositive monotone (i.e. <code>contravariant_class ennreal ennreal (+) (&lt;)</code>).</p>\n<p>However, the remaining <code>covariant_class ennreal ennreal (+) (&lt;)</code> and <code>contravariant_class ennreal ennreal (+) (≤)</code>are <em>false</em> precisely because of the top-absorbing element.</p>",
        "id": 239733133,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621595611
    },
    {
        "content": "<p>Btw, this <code>add_lt_add</code> really feels like a non-trivial loop: all sides work with <code>\\le</code>, you assume some <code>&lt;</code>, but together they still fail to work with the given typeclasses.  I really like this example (and I am also disappointed by the fact that it exists!).</p>",
        "id": 239733369,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621595746
    },
    {
        "content": "<p>Note that on the reals &lt;= and &lt; are one logical <code>not</code> and one noncanonical isomorphism neg : R -&gt; R away from each other. For a general semiring this won't work.</p>",
        "id": 239815410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621632665
    },
    {
        "content": "<p>Indeed, there are instance between the two assuming various levels of preorder, partial_order, linear_order, cancellability.  I have not checked, but I think that for <code>real</code>, assuming only ≤ on the left might be enough to get all variations.</p>",
        "id": 239861136,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621677351
    }
]