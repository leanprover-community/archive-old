[
    {
        "content": "<p>I am trying to define <code>dir_sys</code> as the following : a collection of finite sets <code>(X_i)_{i ∈ ℕ}</code> such that for <code>j ≤ i</code>, there exists a surjective map <code>π_{ij}</code> such that for <code>k ≤ j ≤ i</code>, <code>π_{ij} ∘ π_{jk} = π_{ik}</code>. I get stuck here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dir_sys</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sys</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>The error I get is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">quot</span> <span class=\"n\">setoid.r</span>\n</code></pre></div>\n<p>I don't understand the error. Does Lean want me to specify the type of <code>(h i).val</code>? Any help is appreciated, thank you!</p>",
        "id": 227918751,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1614341547
    },
    {
        "content": "<p>Adding an explicit <code>↥</code> might help</p>",
        "id": 227919007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614341702
    },
    {
        "content": "<p><code>↥(h i).1 → ↥(h j).1</code> or similar</p>",
        "id": 227919044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614341718
    },
    {
        "content": "<p>Why the  <code>.1</code> which turns your finset into a multiset?</p>",
        "id": 227919052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614341726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Type.20expected.20error/near/227919007\">said</a>:</p>\n<blockquote>\n<p>Adding an explicit <code>↥</code> might help</p>\n</blockquote>\n<p>I get the following error :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_coe_to_sort.S</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 227919639,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1614342087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Type.20expected.20error/near/227919052\">said</a>:</p>\n<blockquote>\n<p>Why the  <code>.1</code> which turns your finset into a multiset?</p>\n</blockquote>\n<p>I was just experimenting..</p>",
        "id": 227919657,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1614342100
    },
    {
        "content": "<p>My instinct is that we might already have some far more general kind of directed systems in mathlib already. I think that the functions themselves should be part of the data, not just some assumption that they exist. Might it be easier to work with types rather than finsets, which are terms?</p>",
        "id": 227921328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614343036
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_limit\">docs#direct_limit</a> which seems to have some things in common with what you're after</p>",
        "id": 227921612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614343209
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dir_sys</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sys</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 227921764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614343322
    },
    {
        "content": "<p>finset has no coercion to sort</p>",
        "id": 227921806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614343328
    },
    {
        "content": "<p>Only coercion to set, which then has a coercion to sort</p>",
        "id": 227921828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614343341
    }
]