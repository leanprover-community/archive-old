[
    {
        "content": "<p>It's seems to have been decided that using bundled ring homs and group homs is going to be the mathlib style. Currently the library is not set up to make it easy for people to write new code using bundled homs, and it is quite a major refactor to update the library to do this. I think perhaps the bulk of the refactor has to be done in one go, as soon as the <code>ideal</code> file is updated, a bunch more stuff will have to be updated as well. Because of this I'm a little bit cautious about merging stuff that will make this refactor harder. </p>\n<p>What's the best way of handling this? Should we refuse to merge anything that uses unbundled homs, or will a more gradual approach work?</p>",
        "id": 175607193,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568366553
    },
    {
        "content": "<p>Thanks for starting this discussion. I think people said that the refactor could be done slowly and gradually, even though the total effort would be more than when everything's done in one go.</p>",
        "id": 175630918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568385994
    },
    {
        "content": "<p>I realize that the amount of unbundled stuff being added to the library might grow faster than the amount of parts in the library being refactored... so the process might never converge.</p>",
        "id": 175630994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568386041
    },
    {
        "content": "<p>Giving bundled versions of the lemmas in the most used parts of the library might help the process converge faster. I'm thinking of ideals, subgroups, and maybe <code>polynomial.eval</code> and <code>map</code></p>",
        "id": 175631502,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568386338
    },
    {
        "content": "<p>Does anyone else have 2 cents to contribute? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 175817473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568644346
    },
    {
        "content": "<p>I don't have a clue. I think I might have been at least partially to blame for the fact that we have both bundled and unbundled versions of some things, but I was just annoyed that everyone seemed to think that bundled was the way to go and yet unbundled was what we had.</p>",
        "id": 175838715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568658496
    },
    {
        "content": "<p>I think it would be good to expand the library as needed when writing new bundled hom code is difficult. That should require a lot less up front work than a full conversion</p>",
        "id": 175857459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568671697
    },
    {
        "content": "<p>Let’s just make sure there are lots of big “deprecated” warnings everywhere old stuff is being used, and hope that people don’t PR too much stuff extending the use of deprecated code...</p>",
        "id": 175866779,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568681411
    },
    {
        "content": "<p>That's exactly what this thread is about. For an example, see my PR on <code>order</code> of power series: <a href=\"https://github.com/leanprover-community/mathlib/issues/1292\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1292\">#1292</a><br>\n(1) It sets up a bunch of maps and proves that they are <code>is_add_group_hom</code>s and occasionally, under suitable conditions they are actually <code>is_ring_hom</code>s...  (In particular, <code>coeff 0</code> is a ring hom, whereas in general <code>coeff n</code> is only additive.)<br>\n(2) Moreover, a bunch of these maps are already defined before the algebraic structure on their source is there. They are used in setting up this structure.</p>\n<p>Both of these points are awkard to pull of in the bundled setting. What do we do with this PR? Because it doubles down on unbundled homs instead of easing the transition to bundled homs.</p>",
        "id": 175874784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568694231
    },
    {
        "content": "<p>I don't really understand what could be awkward. Of course you can define the maps-merely-as-functions before the algebraic structure is there, but surely you can define an <code>is_ring_hom</code> neither earlier nor later than you can define a <code>ring_hom</code>. Is the point that you need then to restate some earlier results, so they are about the coercion of the <code>ring_hom</code>, rather than about the bare function?</p>",
        "id": 175876386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568696722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Yep, you have to restate a bunch of stuff to address (2). I agree that this is not a big problem, only annoying. But (1) is more of an issue. Suppose we have addressed (2), so that for <code>n : ℕ</code> we have a <code>coeff n : power_series R →+ R</code>. Then there is not a very nice way to magically have <code>coeff 0</code> become a <code>→*+</code>.</p>",
        "id": 175877453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698149
    },
    {
        "content": "<p>Ah, I see, that indeed is horrible, and I've been encountering exactly the same issue with functors and monoidal functors while working on enriched categories recently.</p>",
        "id": 175877512,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698238
    },
    {
        "content": "<p>Sometimes life just gives you a functor, and your job is to add the structure of a monoidal functor. At the moment I have a horrible hack.</p>",
        "id": 175877525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698276
    },
    {
        "content": "<p>I've defined <code>functorial</code> and <code>monoidal</code> as typeclasses on functions, as unbundled versions of <code>functor</code> and <code>monoidal_functor</code>. But then at some point I find myself with <code>F : Functor C D</code>, and writing <code>monoidal (F.obj)</code> --- that is, I unbundle a bundled functor, and use a typeclass to express that I know a monoidal structure on it. Yuck!</p>",
        "id": 175877583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698342
    },
    {
        "content": "<p>We need non-linear typechecking. :-)</p>",
        "id": 175877663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698491
    },
    {
        "content": "<p>Does that help?</p>",
        "id": 175877669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698503
    },
    {
        "content": "<p>\"I promise that eventually I'll show that this is a <code>-&gt;*+</code>, and in the meantime only use the coercion to <code>-&gt;</code>, and after a little while the coercion to <code>-&gt;+</code>\"</p>",
        "id": 175877681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698528
    },
    {
        "content": "<p>I mean, once you bundle <code>coeff</code> into an add_hom... you kind of promise that you don't suddenly want to treat it as a ring hom</p>",
        "id": 175877688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698533
    },
    {
        "content": "<p>So you want the type of <code>coeff n</code> to depend on <code>n</code>?</p>",
        "id": 175877694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698558
    },
    {
        "content": "<p>We could do that (-;</p>",
        "id": 175877735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698568
    },
    {
        "content": "<p>Sounds like a pretty ugly hack</p>",
        "id": 175877737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698592
    },
    {
        "content": "<p>Sorry, I don't undestand what you're saying about depending on <code>n</code>.</p>",
        "id": 175877743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698610
    },
    {
        "content": "<p>For <code>n &gt; 0</code> you will not get a ring hom. But for <code>n = 0</code> you do get a ring hom.</p>",
        "id": 175877751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698633
    },
    {
        "content": "<p>oh, duh</p>",
        "id": 175877754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698642
    },
    {
        "content": "<p>So what is the type of <code>coeff n</code>?</p>",
        "id": 175877759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698643
    },
    {
        "content": "<p>I see, sorry, I wasn't paying attention.</p>",
        "id": 175877763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698658
    },
    {
        "content": "<p>well, don't we jsut define <code>constant_term : power_series R -&gt;*+ R</code>?</p>",
        "id": 175877807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698685
    },
    {
        "content": "<p>that doesn't seem so bad</p>",
        "id": 175877812,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698702
    },
    {
        "content": "<p>and a lemma that <code>coeff 0 = (constant_term : power_series R -&gt;+ R)</code>?</p>",
        "id": 175877822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698764
    },
    {
        "content": "<p>(oof, do you separately need <code>(coeff 0 : power_series R -&gt; R) = (constant_term : power_series R -&gt; R)</code>?)</p>",
        "id": 175877841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698802
    },
    {
        "content": "<p>But I think the general answer here is that you make a \"first pass\" development, that mostly stays private, and then restate it all as public API at the end.</p>",
        "id": 175877892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698855
    },
    {
        "content": "<p>Rather than pretend it's possible to make the sausage in front of everyone.</p>",
        "id": 175877909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698879
    },
    {
        "content": "<p>Yeah, but in this case you need even a \"third pass\" defining <code>constant_term</code>...</p>",
        "id": 175877920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698907
    },
    {
        "content": "<p>and maybe the lesson we're learning is that unbundled morphisms are good for the private development, and bundled morphisms are good for the API</p>",
        "id": 175877921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568698914
    },
    {
        "content": "<p>But maybe that's what it takes...</p>",
        "id": 175877922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698916
    },
    {
        "content": "<p>Anyway, I need to run to supervise an LA exam</p>",
        "id": 175877961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698936
    },
    {
        "content": "<p>Wish me luck... we'll have to grade them afterwards <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 175877966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568698950
    },
    {
        "content": "<p>Why is that? In the private development we prove <code>is_add_group_hom (internals.coeff n)</code> and <code>is_ring_hom (internals.coeff 0)</code>, and then in the public API we provide<br>\n<code>coeff (n : nat) : power_series R -&gt;+ R := add_group_hom.of  (internals.coeff n)</code>, and <code>constant_term : power_series R -&gt;+* R := ring_hom.of (internals.coeff 0)</code>.</p>",
        "id": 175877984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568699029
    },
    {
        "content": "<p>Back in the day the whole concept of <code>constant_term</code> wasn't necessary</p>",
        "id": 175878034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568699082
    },
    {
        "content": "<p>good luck!</p>",
        "id": 175878035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568699083
    },
    {
        "content": "<p>Yeah, I agree it's worrying.</p>",
        "id": 175878036,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568699091
    },
    {
        "content": "<p>My point is... the file will probably become 2 times as long</p>",
        "id": 175878037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568699100
    },
    {
        "content": "<p><code>coeff 0</code> is <code>eval 0</code> so we could just make <code>eval 0</code> our canonical way of talking about the constant term.</p>",
        "id": 175878273,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568699514
    },
    {
        "content": "<p>Oh but this is power series not polynomials.</p>",
        "id": 175878324,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568699551
    },
    {
        "content": "<p>It's still true, but it needs more work</p>",
        "id": 175878743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568700208
    },
    {
        "content": "<p>Why not have <code>coeff_0</code>? Then there is no problem with it having a different type</p>",
        "id": 175880255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568702485
    },
    {
        "content": "<p>That's Scott's <code>constant_term</code></p>",
        "id": 175881499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568704144
    },
    {
        "content": "<p>Do we want two versions of everything like <code>is_ring_hom.ker</code> in the meantime whilst the gradual refactor is happening?</p>",
        "id": 176014983,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568819932
    },
    {
        "content": "<p>That's a good question. I want to say no -- we should just develop the bundled theory and stop supporting unbundled ring homs completely, moving them to bundled ring homs whenever we can be bothered. Is this a very naive viewpoint?</p>",
        "id": 176015141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568820019
    },
    {
        "content": "<p>Looking at something like <code>direct_limit</code>, transferring to bundled homs is quite a hard refactor at the moment. Currently a <code>directed system</code> is just a set of functions, and then there's a hypothesis that they're all ring homs. It will have to become a set of morphisms in a category.</p>",
        "id": 176015382,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568820168
    },
    {
        "content": "<p>This approach means the refactor has to be done in one go. Who's going to do that?</p>",
        "id": 176015442,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568820214
    },
    {
        "content": "<p>Are we talking about direct limits in arbitrary categories or direct limits in the category of rings?</p>",
        "id": 176015455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568820223
    },
    {
        "content": "<p>Rings and abelian groups and modules</p>",
        "id": 176015528,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568820245
    },
    {
        "content": "<p>The file Kenny wrote on direct limit.</p>",
        "id": 176015554,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568820263
    },
    {
        "content": "<p>I'm not sure we can get away with only one of the two. Category theory has bundled homs and bundled funtors all over the place. Yet Scott confessed that he introduced <code>functorial</code> and <code>monoidal</code>.</p>",
        "id": 176015787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568820412
    },
    {
        "content": "<p>I intuitively tend to agree with his \"slogan\" that unbundled stuff is good for setting things up, but that bundled stuff is good for API's that users should see.</p>",
        "id": 176015848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568820458
    },
    {
        "content": "<p>I thought there was some sort of philosophical objection to having both? Having both doesn't bother me...</p>",
        "id": 176015933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568820510
    },
    {
        "content": "<p>I mean, having both long term.</p>",
        "id": 176015945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568820521
    },
    {
        "content": "<p>And the general rule can be to not develop any new API for the unbundled stuff unless you're doing foundational things like <code>direct_limit</code>.</p>",
        "id": 176016030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568820577
    },
    {
        "content": "<p>I think we want mainly bundled homs and occasionally unbundled.</p>",
        "id": 176016200,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568820698
    },
    {
        "content": "<p>But I think <code>direct_limit</code> should use bundled.</p>",
        "id": 176016276,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568820729
    },
    {
        "content": "<p>Well... it's there already, if you don't bind bundling some objects along the way...</p>",
        "id": 176016520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568820905
    },
    {
        "content": "<p>If we wait a couple of days, the new concrete category infrastructure due to <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> seems very promising.</p>",
        "id": 176016560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568820930
    },
    {
        "content": "<p>Algebraic closures would be a marvellous place to test it out</p>",
        "id": 176016593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568820947
    },
    {
        "content": "<p>I'm actually coming around to the idea that we want both bundled and unbundled versions of everything, even though we have to pay in the form of writing extra glue code. The glue code seems to work very well; that is, it only needs to be written once when setting up a new bundled/unbundled pair, and then it's pretty straightforward for the user.</p>",
        "id": 176056417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568849932
    },
    {
        "content": "<p>Regarding <code>direct_limit</code> --- there's actually some duplication now between the <code>direct_limits</code> file, and the <code>algebra/category/CommRing/(co)limits.lean</code> files.</p>",
        "id": 176056452,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568849991
    },
    {
        "content": "<p>I would really like to address that soon.</p>",
        "id": 176056457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568850000
    },
    {
        "content": "<p>This is what I don't like about bundled homs: I write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"n\">ψ</span>\n</pre></div>\n\n\n<p>and I get red squiggles under <code>coeff</code> saying:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">mv_power_series</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→+</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n</pre></div>",
        "id": 176183953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568978674
    },
    {
        "content": "<p>It can figure out those metavariables from <code>φ</code></p>",
        "id": 176183967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568978701
    },
    {
        "content": "<p>But it won't do that. So we need to hand hold it. And that means we have to explicitly provide a bunch of types all the time...</p>",
        "id": 176183979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568978727
    },
    {
        "content": "<p>I think unfortunately both unbundled and bundled have major downsides.</p>",
        "id": 176184046,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568978776
    },
    {
        "content": "<p>Would this be an example of type class search failure that Leo wants to see?</p>",
        "id": 176184058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568978804
    },
    {
        "content": "<p>Johan, can you get a minimized version of this that we could give to Leo and Daniel for Lean 4 miraculous resolution?</p>",
        "id": 176184073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568978822
    },
    {
        "content": "<p>Specifically: a coercion is not kicking in. And it's well-understood why it doesn't.</p>",
        "id": 176184078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568978826
    },
    {
        "content": "<p>Ok, you thought about this already...</p>",
        "id": 176184094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568978849
    },
    {
        "content": "<p>Voila, a minimal example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_id</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176184293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568979069
    },
    {
        "content": "<p>Lean doesn't like the <code>example</code></p>",
        "id": 176184302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568979087
    },
    {
        "content": "<p>It's not minimal since <code>→*</code> is not in core, right?</p>",
        "id": 176184369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568979149
    },
    {
        "content": "<p>Aha... are there examples of bundled functions in core?</p>",
        "id": 176184828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568979636
    },
    {
        "content": "<p>Probably not, but you can include (a minimized version of) the definition.</p>",
        "id": 176184855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568979666
    },
    {
        "content": "<p>Just define monoid_hom in your minimal example, it's only about three lines.</p>",
        "id": 176184858,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568979670
    },
    {
        "content": "<p>There's a mysterious (to me) failure of <code>has_coe_to_fun</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/1404\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1404\">#1404</a>. Is this also well understood? It's not at all obvious to me why removing some <code>decidable_eq</code> assumptions should break this lemma.</p>",
        "id": 176185136,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568979944
    },
    {
        "content": "<p>I think Leo mentioned this issue in his request (coercions are not fired unless all metavariables are instantiated), but let's make a minimal example to show this off</p>",
        "id": 176185630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568980472
    },
    {
        "content": "<p>This can be fixed in lean 4 but we have to make the problem clear</p>",
        "id": 176185639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568980502
    },
    {
        "content": "<p>The one in <a href=\"https://github.com/leanprover-community/mathlib/issues/1404\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1404\">#1404</a> doesn't fire even with type annotations.</p>",
        "id": 176185665,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568980533
    },
    {
        "content": "<p>could you summarize the problem? I don't see it in the commit</p>",
        "id": 176185732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568980601
    },
    {
        "content": "<p>line 176 of <code>field_theory/mv_polynomial</code>.</p>",
        "id": 176185859,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568980762
    },
    {
        "content": "<p>Not in the diff.</p>",
        "id": 176185863,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568980771
    },
    {
        "content": "<p>But the <code>coe_to_fun</code> in that statement is broken even with type annotations.</p>",
        "id": 176185884,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568980798
    },
    {
        "content": "<p><code>maximum class-instance resolution depth has been reached (the limit can be increased by setting option 'class.instance_max_depth') (the class-instance resolution trace can be visualized by setting option 'trace.class_instances')</code></p>",
        "id": 176185952,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568980827
    },
    {
        "content": "<p><del>Next issue... bundled homs were supposed to make <code>map_add</code> easier for <code>simp</code>.</del></p>",
        "id": 176189562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568984066
    },
    {
        "content": "<p>Never mind, I should shut up</p>",
        "id": 176189622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568984117
    },
    {
        "content": "<p>I've bundled the homs in the <code>order</code> PR: <a href=\"https://github.com/leanprover-community/mathlib/issues/1292\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1292\">#1292</a></p>",
        "id": 176372541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569248458
    },
    {
        "content": "<p>In the end, I think it wasn't even too painful.</p>",
        "id": 176372555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569248469
    },
    {
        "content": "<p>I think, the problem is that currently the type of <code>coe_fn f</code> can depend on <code>f</code>, not only its type. On the one hand, this way we can coerce to function something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">bundled_fun</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">codom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">dom</span> <span class=\"bp\">→</span> <span class=\"n\">codom</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>On the other hand, if we have <code>coe_fn f x</code>, then Lean can't start looking at <code>x</code> before it knows <code>f</code>. I see two possible solutions:</p>\n<ul>\n<li>\n<p>Define something like<br>\n<code>lean\n  structure has_simple_coe_to_fun (α : Type*) (β : out_param Type*) := (coe : α → β)\n  </code><br>\n  and try it before <code>has_coe_to_fun</code></p>\n</li>\n<li>\n<p>Introduce convention (similar to, e.g., Python) that <code>coe_fn f</code> is a notation for <code>f.to_fun</code>.</p>\n</li>\n</ul>\n<p>Sure, each approach has its pros and cons. Hope, someone will come with a better idea.</p>",
        "id": 176839649,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1569701386
    }
]