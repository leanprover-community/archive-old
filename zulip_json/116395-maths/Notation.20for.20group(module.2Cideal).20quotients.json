[
    {
        "content": "<p>I am currently dealing with quotients of the form <code>I^i / I^e</code> modulo <code>I^(i+1) / I^e</code>, and the result is completely unreadable types. What do we think about introducing notation along the following lines:</p>\n<ul>\n<li><code>G /ᵍ H</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.quotient\">docs#quotient_group.quotient</a></li>\n<li><code>A /ᵃ B</code> or <code>A /⁺ B</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_add_group.quotient\">docs#quotient_add_group.quotient</a></li>\n<li><code>M /ᵐ N</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient\">docs#submodule.quotient</a></li>\n<li><code>R /ⁱ I</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.quotient\">docs#ideal.quotient</a></li>\n</ul>\n<p>And I guess for submonoids we can have:</p>\n<ul>\n<li><code>M /ᶜ c</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con.quotient\">docs#con.quotient</a></li>\n<li><code>M /ᶜ⁺ c</code> or  <code>M /ᵃᶜ c</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_con.quotient\">docs#add_con.quotient</a></li>\n</ul>",
        "id": 262694106,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637839403
    },
    {
        "content": "<p>Could a notation typeclass unify these?</p>",
        "id": 262694409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637839597
    },
    {
        "content": "<p>Also, for your application, do you think life might become easier by reasoning with surjective maps and claims about what their kernels look like?</p>",
        "id": 262694483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637839648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Notation.20for.20group.28module.2Cideal.29.20quotients/near/262694409\">said</a>:</p>\n<blockquote>\n<p>Could a notation typeclass unify these?</p>\n</blockquote>\n<p>Hmm, that could probably work. The issue I foresee is that <code>ideal.quotient</code> is (reducibly) defined as <code>submodule.quotient</code>, which should probably be redefined in terms of <code>add_group.quotient</code> anyway. I don't know how much the elaborator will enjoy that.</p>",
        "id": 262694655,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637839741
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_quotient</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">G</span><span class=\"bp\">`</span> <span class=\"bp\">///</span> <span class=\"bp\">`</span><span class=\"n\">H</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_quotient.quotient</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>or something like that.</p>",
        "id": 262695046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637839930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Notation.20for.20group.28module.2Cideal.29.20quotients/near/262694483\">said</a>:</p>\n<blockquote>\n<p>Also, for your application, do you think life might become easier by reasoning with surjective maps and claims about what their kernels look like?</p>\n</blockquote>\n<p>Probably not much: I'm defining the ramification index and inertia degree of <code>P</code> over <code>p</code>, Following Neukirch 8.2 I want to show <code>e * rank p.quotient P.quotient = rank p.quotient (P^e).quotient</code> by considering the inclusions <code>(P^e).quotient = map (P^e).quotient.mk (P^0) ≥ map (P^e).quotient.mk (P^1) ≥ ... ≥ map (P^e).quotient.mk (P^e) = ⊥</code>. Since these are all <code>p.quotient</code>-linear and injective, it suffices (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/dim_range_add_dim_ker\">docs#dim_range_add_dim_ker</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dim_quotient_add_dim\">docs#dim_quotient_add_dim</a>) to show the successive quotients <code>(P^i / P^e) / (P^(i+1) / P^e)</code> are isomorphic to <code>P.quotient</code>, which follows from the 3rd isomorphism theorem.</p>\n<p>So I don't see how to avoid those quotients - without quotienting by <code>P^e</code> we can't talk about being <code>p.quotient</code>-linear, and the other quotient is needed to do the 3rd isomorphism theorem.</p>",
        "id": 262695666,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637840375
    },
    {
        "content": "<p>The 3rd isomorphism theorem just tells you that (P^i/P^e)/(P^{i+1}/P^e) is isomorphic to P^i/P^{i+1}. It's non-formal to show that this is R/P; this would not be true for a random UFD like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\R[X,Y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P=(X,Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 262696438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637840940
    },
    {
        "content": "<p>Of course, in general this wouldn't be true. But everything should work out in a Dedekind domain :)</p>",
        "id": 262696573,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637841041
    },
    {
        "content": "<p>Yes indeed :-) Dedekind domains are smooth and 1-dimensional, that's the key thing.</p>",
        "id": 262696613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637841073
    },
    {
        "content": "<p>One should really be doing this in a relative setting I guess? I think the FLT-regular people would like to know that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a finite extension of number fields of degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>e</mi><mi>i</mi></msub><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_i e_if_i=n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is a prime of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mi>K</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><msub><mi mathvariant=\"script\">O</mi><mi>L</mi></msub></mrow><annotation encoding=\"application/x-tex\">P\\mathcal{O}_L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> factors as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><msubsup><mi>Q</mi><mi>i</mi><msub><mi>e</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">\\prod_i Q_i^{e_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.4231em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.1449em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2769em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 262696788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637841189
    },
    {
        "content": "<p>I think my approach should work for that case if there are no unexpectedly hard <code>sorry</code>s. My statement goes: if <code>L = Frac(S)</code> is a finite separable extension of <code>K = Frac(R)</code>, <code>S</code> is Dedekind and <code>p : ideal R</code> is maximal, then <code>Σ P ∈ (factors pS).to_finset, multiplicity P pS * [S / P : R / p] = [L : K]</code>.</p>",
        "id": 262697280,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637841582
    },
    {
        "content": "<p>Oh great! I had misunderstood what you were doing! I had assumed p was a prime number not a prime ideal. Sorry to derail</p>",
        "id": 262713413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637851380
    },
    {
        "content": "<p>This is wonderful because it will also apply to extensions of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic local fields.</p>",
        "id": 262713710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637851521
    },
    {
        "content": "<p>Ah, I was already worried I had missed something in setting up my theory :P</p>",
        "id": 262713800,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637851564
    },
    {
        "content": "<p>Back to your question, being p.quotient-linear is the same as being R-linear and p happening to act as 0 everywhere. So you could just let everything be an R-module and then at the end when you're down to P^i/P^{i+1} then deduce that things are p.quotient-modules maps are p.quotient-linear. Does this help?</p>",
        "id": 262721264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637855604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Notation.20for.20group.28module.2Cideal.29.20quotients/near/262695046\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_quotient</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">G</span><span class=\"bp\">`</span> <span class=\"bp\">///</span> <span class=\"bp\">`</span><span class=\"n\">H</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_quotient.quotient</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>or something like that.</p>\n</blockquote>\n<p>I have implemented something like your suggestion, it looks like everything is working without issues: <a href=\"https://github.com/leanprover-community/mathlib/tree/quotient-notation\">branch#quotient-notation</a>.</p>",
        "id": 262727974,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637860412
    },
    {
        "content": "<p>I guess the nice thing about this is it forces <code>G</code> to be visible in the doc-gen type, rather than just showing <code>H.quotient</code>.</p>",
        "id": 262728364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637860728
    },
    {
        "content": "<p>Do you even gain anything by assuming <code>set_like</code> there?</p>",
        "id": 262728387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637860759
    },
    {
        "content": "<p>I think that might just make more work for typeclass inference without any gain</p>",
        "id": 262728399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637860770
    },
    {
        "content": "<p>Not really I guess. Maybe it secretly helps out by forcing <code>A</code> to be an <code>out_param</code> :P</p>",
        "id": 262728459,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637860804
    },
    {
        "content": "<p>You don't even need <code>A</code> if you remove <code>set_like</code></p>",
        "id": 262728498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637860836
    },
    {
        "content": "<p>Yes, but then it won't appear in the notation anymore!</p>",
        "id": 262728529,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637860869
    },
    {
        "content": "<p>That's probably worth a comment explaining the motivation when you PR it</p>",
        "id": 262728615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637860926
    },
    {
        "content": "<p>I would also like to keep the <code>A</code> for Lean-technical reasons: if we create a class of \"<code>set_like</code>s extending <code>add_subgroup</code>\" so we can uniformly define all the quotients listed above, we can't deduce <code>A</code> from the structure of <code>B</code> anymore.</p>",
        "id": 262728751,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637861045
    },
    {
        "content": "<p>That is, I think it would be neat to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">class</span> <span class=\"n\">subgroup_class</span> <span class=\"n\">S</span> <span class=\"n\">G</span> <span class=\"kd\">extends</span> <span class=\"n\">set_like</span> <span class=\"n\">S</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">subgroup_class</span> <span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_quotient</span> <span class=\"n\">S</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;</span><span class=\"n\">current</span> <span class=\"n\">subgroup.quotient</span> <span class=\"n\">implementation</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>and then we can transfer results from quotient groups to quotient modules with a lot less friction.</p>",
        "id": 262728913,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637861189
    },
    {
        "content": "<p>That sounds promising!</p>",
        "id": 262735170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637867607
    }
]