[
    {
        "content": "<p>I'm trying to remove the assumptions of commutativity required to define minimal polynomials, so that we can use them in linear algebra, over at <a href=\"https://github.com/leanprover-community/mathlib/tree/minimal_polynomial_noncomm\">branch#minimal_polynomial_noncomm</a></p>",
        "id": 208512081,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598835125
    },
    {
        "content": "<p>Everything appears to be working without too much effort, except for the theorem <a href=\"https://leanprover-community.github.io/mathlib_docs/find/integral_closure_idem\">docs#integral_closure_idem</a></p>",
        "id": 208512097,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598835174
    },
    {
        "content": "<p>Can anyone help me troubleshoot what's gone wrong? I've changed the instance assumptions of <code>is_integral</code> to let one <code>semiring</code> be noncommutative, but I don't know what that's breaking</p>",
        "id": 208512169,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598835341
    },
    {
        "content": "<p>What's the integral closure of a noncommutative ring?</p>",
        "id": 208512704,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598836243
    },
    {
        "content": "<p>Integral closure still assumes commutativity.</p>",
        "id": 208512723,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598836303
    },
    {
        "content": "<p>I've only changed the assumption on the basic definition <code>is_integral</code>, which amounts to being the root of a monic polynomial, and three lemmas about <code>is_integral</code> that don't deal with integral closures per se.</p>",
        "id": 208512775,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598836366
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 208512833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598836468
    },
    {
        "content": "<p>I'm not on a computer, but my guess is that it's an issue with <code>is_integral_trans</code></p>",
        "id": 208512922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598836621
    },
    {
        "content": "<p>Taking it apart, this almost works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">integral_closure_idem</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">integral_closure</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_bot_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">mem_bot</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_integral_trans</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"o\">,</span>\n          <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">integral_closure</span><span class=\"bp\">.</span><span class=\"n\">is_integral</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>but I'd need to synthesize the <code>is_scalar_tower</code> instance.</p>",
        "id": 208513057,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598836873
    },
    {
        "content": "<p>Of course, I'd really rather not butcher this proof over this bug.</p>",
        "id": 208513059,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598836888
    },
    {
        "content": "<p>(My branch is building, but that's because I've commented out that theorem)</p>",
        "id": 208513105,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598836924
    },
    {
        "content": "<p>Ok, I've got a workaround, but I'd still appreciate insight as to why I need to declare this one instance manually, so I can fix it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">integral_closure_idem</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">integral_closure</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_bot_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">mem_bot</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">is_integral_trans</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"bp\">_</span> <span class=\"n\">integral_closure</span><span class=\"bp\">.</span><span class=\"n\">is_integral</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 208521111,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598850870
    },
    {
        "content": "<p>It looks like it is caused by the diamond <code>subalgebra -&gt; subring -&gt; ring</code> and <code>subalgebra -&gt; comm_ring -&gt; ring</code></p>",
        "id": 208538739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598868015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , I could add minimal polynomials of endomorphisms or matrices to the <code>yaml</code>s, but there's no one <code>decl</code>, as at <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s advice (which did simplify things), I've been working directly with expressions of the form <code>minimal_polynomial f.is_integral</code>. Should I define <code>min_poly</code> somewhere, so we can link to it?</p>",
        "id": 211330637,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601078313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what do you think? Should we just link to <code>minimal_polynomial</code> for the minpoly of a matrix?</p>",
        "id": 211343461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601098037
    },
    {
        "content": "<p>If I had to choose one, then it would be <code>matrix.is_integral</code>, because it contains the matrix/linear algebra specific work.</p>",
        "id": 211354260,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601117090
    }
]