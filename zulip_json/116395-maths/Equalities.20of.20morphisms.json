[
    {
        "content": "<p>I made a quick <a href=\"https://gist.github.com/ChrisHughes24/a49961f41d9cc8b2475bcea8dc524951\">gist</a> about how to prove associativity of polynomial in a very neat way using just the universal property of the free module, and defining multiplication as a bilinear map. Then using the <code>hom_ext</code> lemma and the <code>lift_X</code> lemma, and unfolding the definition of linear map composition, you can quickly a non trivial theorem if you set up the library really nicely. It is a very slow proof at the moment. It can fit onto two lines, but I wrote a longer proof to illustrate the strategy.</p>\n<p>I think that using universal properties in the form of computation rules like <code>lift_X</code> and extensionality lemmas like <code>hom_ext</code> is a very powerful technique, and if mathlib were set up correctly we could potentially prove a lot of equalities of homomorphisms really painlessly. I think this requires some thought however. Every homomorphism that is defined needs to have rules about what it does on a basis for a free module, or what it does on the base ring and X for polynomials etc. You also need to be able to convert an equality of applied morphisms to an equality of morphisms, which might involve things like converting applied ring equivs into a composed ring hom, or some more sophisticated automation in the case of closed categories like modules to do the conversion of <code>mul p (mul q r)</code> into an application of a trilinear map. In the case of closed categories it also might need to be handle inheritance of universal properties, e.g. if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a free module, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(M, N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> is a product of modules. It might need to have have some form of <code>assoc_rw</code> to apply things like <code>eval_comp_C</code> for polynomials. It also needs to be able to handle multiple universal properties at once, polynomials have a UMP in both the category of R-modules and the category of R-algebras, and the category of rings, <code>int</code> is both a free group and the initial ring and the initial comm ring. I feel like this might require some actual understanding of category theory to do really nicely. It also needs to be much faster than the example in the gist.</p>\n<p>Do people have thoughts on this?</p>",
        "id": 257693891,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1634302985
    },
    {
        "content": "<p>Is what you are describing the same technique as what I'm doing here: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/breen_deligne/universal_map.lean#L335\">https://github.com/leanprover-community/lean-liquid/blob/master/src/breen_deligne/universal_map.lean#L335</a><br>\nThere is a lot of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">foo.comp</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">blabla</span><span class=\"o\">,</span>\n<span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>in that file.</p>",
        "id": 257695086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634303518
    },
    {
        "content": "<p>I think so</p>",
        "id": 257695451,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1634303680
    },
    {
        "content": "<p>The trouble is the appropriate <code>simp</code> or <code>ext</code> lemmas aren't always there because we haven't got strict conventions on this.</p>",
        "id": 257695703,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1634303797
    },
    {
        "content": "<p>The whole category theory libray is designed around proving evertthing <code>by { ext, simp, }</code>, so I'm all in favour of this. :-)</p>",
        "id": 257759888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634329583
    },
    {
        "content": "<p>I thing the convention to allow ext lemmas to enable this kind of thing is quite well established already, just not ubiquitous</p>",
        "id": 257769259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634334141
    }
]