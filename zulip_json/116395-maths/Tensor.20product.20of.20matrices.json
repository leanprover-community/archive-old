[
    {
        "content": "<p>I am trying to do stuff with matrices and tensor products, and I am facing two slightly unrelated problems. </p>\n<p>The first is that Lean complains when I try to define the matrix <code>![![1/2, 0], ![0, 1/2]]</code> (please see code below). The problem goes away if I replace the 1/2's with 1's. </p>\n<p>The second is that the tensor product <code> (|ψ⟩⟨ψ| ⊗ₜ[ℂ] |ψ⟩⟨ψ|)</code> doesn't seem to return a matrix whose entries I can access. Lean says that <code>|ψ⟩⟨ψ| ⊗ₜ[ℂ] |ψ⟩⟨ψ|</code> is a tensor product type. How do I convert it to a matrix to access the entries?</p>\n<p>Any help is appreciated.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">1) definition &#39;rho&#39; is noncomputable, it depends on &#39;complex.field&#39;</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">rho</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]]</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">psi</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]]</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩`</span> <span class=\"o\">:=</span> <span class=\"n\">psi</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩⟨</span><span class=\"n\">ψ</span><span class=\"bp\">|`</span> <span class=\"o\">:=</span> <span class=\"n\">psi</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">psi</span><span class=\"bp\">.</span><span class=\"n\">transpose</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">2) function expected at</span>\n<span class=\"cm\">  |ψ⟩.mul |ψ⟩.transpose ⊗ₜ[ℂ] |ψ⟩.mul |ψ⟩.transpose</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  quot setoid.r</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">⊢ Sort ?</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩⟨</span><span class=\"n\">ψ</span><span class=\"bp\">|</span> <span class=\"err\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"bp\">|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩⟨</span><span class=\"n\">ψ</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 203454808,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1594337524
    },
    {
        "content": "<p>The first error is just lean telling you it can't compute with the definition you made, probably this doesn't matter at all to you, you can put <code>noncomputable theory</code> after your imports to tell lean not to bother you about this. Alternatively you can put <code>noncomputable def</code> instead every time this happens.</p>",
        "id": 203455722,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594338355
    },
    {
        "content": "<p>The reason it happens for <code>1/2</code> and not <code>1</code> is that <code>1/2</code> is 1 divided by 2, so it involves division in the field which lean can't compute for an arbitrary field.</p>",
        "id": 203455811,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594338428
    },
    {
        "content": "<p>The problem persists if I use <code>0.5</code> and <code>(0.5 : ℂ)</code>   :)</p>\n<p>Why is <code>1</code> ok and <code>0.5</code> not? Both are equally valid complex numbers that have the right to be in my matrix of complex numbers.</p>",
        "id": 203456539,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1594339088
    },
    {
        "content": "<p>0.5 is defined to be 1/2 in lean, or rather 5/10 which is the same!</p>",
        "id": 203456559,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594339121
    },
    {
        "content": "<p>They're fine complex numbers in lean, they just aren't computable, which like I said is a distinction that likely doesn't  matter to you.</p>",
        "id": 203456573,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594339153
    },
    {
        "content": "<p>Many files begin with <code>noncomputable theory</code> its not a bad thing at all.</p>",
        "id": 203456589,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594339181
    },
    {
        "content": "<p>If you put that then lean will happily accept your definition.</p>",
        "id": 203456683,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594339234
    },
    {
        "content": "<p>Yes, I have tried that. But accessing the matrix throws an error, still.</p>",
        "id": 203456702,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1594339263
    },
    {
        "content": "<p>For 2 I guess you want that <code>matrix n n R ⊗ matrix m m R</code> is equivalent to <code>matrix (n × m) (n × m) R</code> which I don't think we have in mathlib, but wouldn't  be too hard to define, really this would be a choice of such an isomorphism.</p>",
        "id": 203456737,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594339301
    },
    {
        "content": "<p>We do have <code>def matrix_equiv_tensor : matrix n n A ≃ₐ[R] (A ⊗[R] matrix n n R)</code> so you can use that to obtain a <code>matrix n n (matrix m m R)</code> whose entries you can access quite easily.</p>",
        "id": 203456861,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594339418
    },
    {
        "content": "<p>Will give it a try. Thank you.</p>",
        "id": 203457095,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1594339614
    },
    {
        "content": "<p>I tried it and hit a problem I'm unsure how to fix </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>these typeclass problems are above my pay-grade lol</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">matrix_algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">1) definition &#39;rho&#39; is noncomputable, it depends on &#39;complex.field&#39;</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">rho</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]]</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">psi</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]]</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩`</span> <span class=\"o\">:=</span> <span class=\"n\">psi</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩⟨</span><span class=\"n\">ψ</span><span class=\"bp\">|`</span> <span class=\"o\">:=</span> <span class=\"n\">psi</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">psi</span><span class=\"bp\">.</span><span class=\"n\">transpose</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">2) function expected at</span>\n<span class=\"cm\">  |ψ⟩.mul |ψ⟩.transpose ⊗ₜ[ℂ] |ψ⟩.mul |ψ⟩.transpose</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  quot setoid.r</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">⊢ Sort ?</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩⟨</span><span class=\"n\">ψ</span><span class=\"bp\">|</span> <span class=\"err\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"bp\">|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩⟨</span><span class=\"n\">ψ</span><span class=\"bp\">|</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">matrix_equiv_tensor</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩⟨</span><span class=\"n\">ψ</span><span class=\"bp\">|</span> <span class=\"err\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"bp\">|</span><span class=\"n\">ψ</span><span class=\"bp\">⟩⟨</span><span class=\"n\">ψ</span><span class=\"bp\">|</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 203457227,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594339772
    },
    {
        "content": "<p>Oh I think the problem is that <code>matrix_equiv_tensor</code> wants everything to be a commutative ring, rather than just a ring, so you might still have to define your own equivalence between the tensor product of matrix algebras and one big matrix algebra to access entries like that.</p>",
        "id": 203459207,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594342277
    },
    {
        "content": "<p>Yeah, I think I discovered the same problem:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">matrix_algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">fintype</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]]</span>\n<span class=\"n\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"err\">⊗</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"err\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">matrix_equiv_tensor</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 203459371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594342487
    },
    {
        "content": "<p>says</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"err\">⊢</span> <span class=\"n\">algebra</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 203459378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594342506
    },
    {
        "content": "<p>The commutativity requirement on the algebra in <code>matrix_equiv_tensor</code> has been dropped in <a href=\"https://github.com/leanprover-community/mathlib/issues/3351\">#3351</a>.</p>",
        "id": 203460502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594343929
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>'s suggestion of <code>#check (matrix_equiv_tensor ℂ (matrix (fin 2) (fin 2) ℂ) (fin 2)).symm (|ψ⟩⟨ψ| ⊗ₜ[ℂ] |ψ⟩⟨ψ|)</code> now works as a result!</p>",
        "id": 203460532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594343980
    },
    {
        "content": "<p>Oh amazing, thanks Scott!</p>",
        "id": 203460773,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594344278
    }
]