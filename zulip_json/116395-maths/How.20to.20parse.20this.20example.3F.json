[
    {
        "content": "<p>How to parse this example?</p>",
        "id": 131060242,
        "sender_full_name": "None proffered",
        "timestamp": 1533665461
    },
    {
        "content": "<p>example : (∃ x, p x → r) ↔ (∀ x, p x) → r</p>",
        "id": 131060265,
        "sender_full_name": "None proffered",
        "timestamp": 1533665476
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 131060288,
        "sender_full_name": "None proffered",
        "timestamp": 1533665513
    },
    {
        "content": "<p>Is it (1) [(∃ x, p x → r)] ↔[ (∀ x, p x) → r] for CCCC CCCC TNTN TTTT in M8/VL4; or <br>\nIs it (2)  [(∃ x, p x → r) ↔ (∀ x, p x)] → r for CCCC TTTT TNTN TTTT in M8/VL4.<br>\nIn either case, Eqs. 1 or 2 are not tautologous (all designated proof value of T).</p>",
        "id": 131060615,
        "sender_full_name": "None proffered",
        "timestamp": 1533665821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>Apparently it's the former: (1).</p>",
        "id": 131067561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533674173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125128\">@None proffered</span> the parse is (1) as Kevin says. I don't know what \"CCCC CCCC TNTN TTTT\" means; what is M8/VL4? This theorem is not true when the domain of <code>x</code> is empty. I assume you got this example from <code>tests/finish3.lean</code>, which proves two versions of this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">iff_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"kn\">end</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>\n\n\n<p>So it is provable in one direction unconditionally, but the bidirectional version requires some <code>a : A</code>, i.e. <code>A</code> has to be nonempty.</p>",
        "id": 131078022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533687878
    }
]