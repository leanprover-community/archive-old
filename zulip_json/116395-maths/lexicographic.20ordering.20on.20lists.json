[
    {
        "content": "<p>mathlib gives a lex ordering on lists. But I don't know how to use it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 200664305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591965405
    },
    {
        "content": "<p>Yeah, that is pretty bad.</p>",
        "id": 200673785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591970524
    },
    {
        "content": "<p>We are missing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons_le_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">::</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>which would make it usable.</p>",
        "id": 200674398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591970841
    },
    {
        "content": "<p>I am very sleepy, so these are pessimal proofs, but <a href=\"https://gist.github.com/semorrison/f5128fcb8b5da4552153fa7acbccbe24\">proofs</a>.</p>",
        "id": 200675300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591971277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks!</p>",
        "id": 200675753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591971554
    },
    {
        "content": "<p><code>list.nil_le</code> already exists on mathlib as <code>list.nil_lt_cons</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_lt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_lt_cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 200676901,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591972100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> It's not exactly the same, right.</p>",
        "id": 200684732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591975723
    },
    {
        "content": "<p>Well, the only difference I could see in the previous example was that <code>list.nil_lt</code> needed <code>[linear_order α]</code>.</p>",
        "id": 200687660,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591977209
    },
    {
        "content": "<p>As far as I can see, in the following they are the exact same:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_lt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_lt_cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span>\n<span class=\"c1\">-- lemma list.nil_lt : ∀ (a : α) (l : list α), [] &lt; a :: l := list.nil_lt_cons</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_lt</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_lt_cons</span>\n</code></pre></div>",
        "id": 200687692,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591977227
    },
    {
        "content": "<p>As expected, the commented out eta-reduced form gives the same results.</p>",
        "id": 200688056,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591977389
    },
    {
        "content": "<p>Ooh, sorry, you are talking about <code>nil_lt</code>. In your previous post you mentioned <code>nil_le</code>.</p>",
        "id": 200688106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591977415
    },
    {
        "content": "<p>Yup, you are right about <code>nil_lt</code>.</p>",
        "id": 200688162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591977440
    },
    {
        "content": "<p>Oops, my bad. Mistyped that.</p>",
        "id": 200688240,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591977475
    },
    {
        "content": "<p>No worries (-;</p>",
        "id": 200688310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591977496
    },
    {
        "content": "<p>Aah, <code>lt</code> on lists, reminds me of one of my <a href=\"#narrow/stream/113488-general/topic/string_lt.20doesn't.20match.20its.20spec/near/128392824\">favourite Zulip posts ever</a></p>",
        "id": 200700246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591983298
    }
]