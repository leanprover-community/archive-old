[
    {
        "content": "<p>If <code>monoid_hom.comp</code> was using another order of arguments, it would be possible to write something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">f</span>\n<span class=\"bp\">...</span> <span class=\"bp\">→*</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">g</span>\n</code></pre></div>\n\n\n<p>Can I make <code>monoid_hom.comp</code> usable for <code>calc</code> without changing order of arguments?</p>",
        "id": 196267636,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588654227
    },
    {
        "content": "<p>Right now I want to define a <code>linear_map</code> as a long composition of <code>linear_map</code>s and <code>linear_equiv</code>s, and <code>calc</code> would make the definition much more readable.</p>",
        "id": 196267657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588654300
    },
    {
        "content": "<p>Maybe we need to introduce <code>cocalc</code> that will swap the order of the arguments....</p>",
        "id": 196267711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588654359
    },
    {
        "content": "<p>Or wait till those who chose the order of arguments in <code>category_struct.comp</code> will come and tell us to use it everywhere ;-)</p>",
        "id": 196267928,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588654725
    },
    {
        "content": "<p>Now I use</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">linear_proj_of_is_compl</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_compl</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">comap</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⊓</span> <span class=\"n\">q</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">quot_equiv_of_eq_bot</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_bot_mono</span> <span class=\"o\">(</span><span class=\"n\">comap_mono</span> <span class=\"n\">inf_le_right</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">disjoint_iff_comap_eq_bot</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">disjoint</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⊓</span> <span class=\"n\">q</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"err\">$</span>\n<span class=\"o\">((</span><span class=\"n\">quotient_inf_equiv_sup_quotient</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⊔</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⊓</span> <span class=\"n\">q</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"err\">$</span>\n<span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⊔</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mkq</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n<span class=\"o\">((</span><span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">of_top</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⊔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">sup_eq_top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⊔</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 196268774,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588655927
    },
    {
        "content": "<p>Hmm I think I've done something a lot like this, let me see why it worked for me...</p>",
        "id": 196294579,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588677691
    },
    {
        "content": "<p>okay yes, it is because I used the same order as <code>equiv.trans</code></p>",
        "id": 196294747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588677799
    },
    {
        "content": "<p><a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pair.lean#L296\" title=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pair.lean#L296\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pair.lean#L296</a></p>",
        "id": 196294798,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588677836
    },
    {
        "content": "<p>You can always do the calc from right to left.</p>",
        "id": 196295391,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588678244
    }
]