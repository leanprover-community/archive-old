[
    {
        "content": "<p>I need that a product of Cauchy filters is Cauchy. I couldn't see it in mathlib, so I wrote a couple of lines on paper and decided I should be able to brute force Lean to swallow it. The result on <a href=\"https://gist.github.com/PatrickMassot/aca4545c10aa9d96bf37d9231fb3470c\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/aca4545c10aa9d96bf37d9231fb3470c\">https://gist.github.com/PatrickMassot/aca4545c10aa9d96bf37d9231fb3470c</a> is not pretty (even if you cut in half the two redundant parts). Here brutality is to go all the way down to elements of our uniform spaces. I suspect I missed (or mathlib is missing) some support lemmas which would allow to operate at a higher level. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>, this is probably a good occasion to set a new golfing factor record.</p>",
        "id": 130232215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532461194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> if we manage to formalize perfectoid spaces, and someone asks me: \"Wow, so you know about perfectoid spaces?\" I'll answer \"Yeah, it's all about filters...\".</p>",
        "id": 130232299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532461292
    },
    {
        "content": "<p>Oh we'll definitely formalise perfectoid spaces -- although perhaps not before Scholze gets his fields medal. A lot of it is about completions, for sure...</p>",
        "id": 130234862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532464006
    },
    {
        "content": "<p>We still have one week</p>",
        "id": 130235030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532464166
    },
    {
        "content": "<p>How far are you from perfectoid spaces if you assume topological rings have completions?</p>",
        "id": 130235068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532464202
    },
    {
        "content": "<p>I need quotient groups.</p>",
        "id": 130235581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532464599
    },
    {
        "content": "<p>Don't you have quotient groups?</p>",
        "id": 130235768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532464765
    },
    {
        "content": "<p>I wrote something, and then Chris wrote something else which probably contradicts it, and he PR'd his to mathlib. There are just so many stupid things which aren't there. I can't define what it means for a valuation to be continuous without quotient rings, fields of fractions etc. It might be possible to do within a week.</p>",
        "id": 130235778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532464772
    },
    {
        "content": "<p>But with schemes there was a period of several months when I thought it could all be done in a week and then another hitch appeared.</p>",
        "id": 130235798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532464792
    },
    {
        "content": "<p>I'll take a look now.</p>",
        "id": 130235801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532464795
    },
    {
        "content": "<p>I hope I'll be done with completions before the end of this week (but I had the same hope one week ago)</p>",
        "id": 130235900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532464850
    },
    {
        "content": "<p>I had to change my strategy to understand completions of products because I've been too optimistic</p>",
        "id": 130235932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532464886
    },
    {
        "content": "<p>Oh I remember now -- I wrote a list of what I needed in the perfectoid thread. I need that a free group is generated by its generators. Some things are only proved for multiplicative groups and some only for additive.</p>",
        "id": 130235942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532464896
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> can help here. He worked a lot on free groups</p>",
        "id": 130236021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532464941
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">coset</span>\n\n<span class=\"c1\">-- for images</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- finsupp for free abelian groups</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- maybe use group.in_closure?</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">closure_image</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- don&#39;t know why we need decidable equality -- maybe some finsupp reason</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">free_ab_gens</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">closure</span>\n\n<span class=\"c1\">-- do we have to copy out all of the definitions here?</span>\n<span class=\"kn\">definition</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">add_closure</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- maybe use finsupp.induction?</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">closure_free_gens</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">add_closure</span> <span class=\"o\">((</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">free_ab_gens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>was what I thought I needed after spending several hours proving that if something happened in universe v then it also happened in universe u.</p>",
        "id": 130236195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532465110
    },
    {
        "content": "<blockquote>\n<p>Oh I remember now -- I wrote a list of what I needed in the perfectoid thread. I need that a free group is generated by its generators. Some things are only proved for multiplicative groups and some only for additive.</p>\n</blockquote>\n<p>I have a similar theorem for free abelian groups (see the other thread).</p>",
        "id": 130249068,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532482879
    },
    {
        "content": "<p>but actually there's already enough lemmas in <code>free_group.lean</code> to prove it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">gen</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span>\n    <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range_id</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">to_group</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">to_group</span><span class=\"bp\">.</span><span class=\"n\">of_eq</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">to_group</span><span class=\"bp\">.</span><span class=\"n\">range_eq_closure</span>\n</pre></div>",
        "id": 130249323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532483239
    },
    {
        "content": "<p>but here's an alternative proof:</p>",
        "id": 130249394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532483393
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">free_group</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">C0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Cn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Cp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">L</span> <span class=\"n\">C0</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">Cp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Cn</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">C1</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">C1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">gen</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_univ_of_forall</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 130249395,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532483395
    },
    {
        "content": "<p>Sorry -- I need it for free _abelian_ groups, as defined via the finsupp construction :-/</p>",
        "id": 130263318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532508891
    },
    {
        "content": "<p>1. there is a free abelian group in my new tensor product (the constructive one)</p>",
        "id": 130263334,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532508919
    },
    {
        "content": "<p>2. there is a free abelian group in my old tensor product which uses finsupp</p>",
        "id": 130263336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532508926
    },
    {
        "content": "<p>I don't want to use random pieces of your random repos :-(</p>",
        "id": 130263348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532508954
    },
    {
        "content": "<p>my old tensor product is in the stacks project</p>",
        "id": 130263398,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532508972
    },
    {
        "content": "<p>That's still a random repo :-(</p>",
        "id": 130263403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532508982
    },
    {
        "content": "<p>:-(</p>",
        "id": 130263409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532508993
    },
    {
        "content": "<p>Although it sounds super-boring I wonder whether after this perfectoid thing I should stop worrying about putting hard maths into Lean and turn my attention to putting easy maths into mathlib. It might teach me a lot about how to write really good Lean code as opposed to just adequate code which runs.</p>",
        "id": 130263446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532509062
    },
    {
        "content": "<p>Hmm, I don't know... I think you should keep the hat of visionary mathematician. There's enough soldiers in your little army to do the \"easy math\". There are not many people that can think about the big picture.</p>",
        "id": 130263656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509329
    },
    {
        "content": "<p>At some point we really need to have easy stuff though. Maybe it's because I'm learning so slowly, but I'm a bit pessimistic about Kevin's army learning enough in two summer months to be able to significantly improve the amount of easy maths in mathlib.</p>",
        "id": 130263681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532509426
    },
    {
        "content": "<p>True, but Kevin is writing a book. And I hope that will enable a lot of people to do more stuff. You want some exponential growth to happen. That won't happen if Kevin is busy proving stuff about quotient groups.</p>",
        "id": 130263731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509495
    },
    {
        "content": "<p>It might happen if every semester 10 UG's from Imperial get interested in Lean and start their own journeys.</p>",
        "id": 130263741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509528
    },
    {
        "content": "<p>I am pessimistic that by 2 months all the students will be writing mathlib-ready code. However I am very optimistic that some of them will be writing good code, and some of them will be writing code which (perhaps inefficiently) fills in holes in mathlb.</p>",
        "id": 130263742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532509530
    },
    {
        "content": "<p>After 5 years...</p>",
        "id": 130263743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509532
    },
    {
        "content": "<p>I think it is awesome that you guys are now going to teach classes with Lean. I can't pull that off (both because of my Lean-level and career-level).</p>",
        "id": 130263808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509608
    },
    {
        "content": "<p>But this hasn't happened before, I think. That <em>math</em> students get taught with ITP's</p>",
        "id": 130263816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509630
    },
    {
        "content": "<p>Yes, I am trying to make Lean part of the \"culture\" here. When I can be bothered to actually go to work I will walk into a room with 10-15 students all doing, and talking about, Lean, and I'll spend the day helping them. I'm hoping it will slowly snowball but I have no idea how realistic this is. I'm pretty sure that in every class of 250 we have I should be able to find 5-10 who are interested and get the hang of it even with no support. The question is how many more I can get in if I make it much easier for them.</p>",
        "id": 130263822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532509642
    },
    {
        "content": "<p>I'm not even talking of mathlib-ready code (I still can't do it myself!). But it could be close enough so that straightening it would be less work than starting from scratch.</p>",
        "id": 130263836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532509681
    },
    {
        "content": "<p>Right, but already you told us that these students are starting to help each other. Which is fantastic. And 2 years from now it will be easy to find TA's for the courses you are giving.</p>",
        "id": 130263940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509811
    },
    {
        "content": "<p>I won't have 250 students, rather more like 25 (only the students selected for a combined CS/math program). I'm not as brave as Kevin, I'll wait to see what I can do with few good students before trying to use Lean on everybody.</p>",
        "id": 130263944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532509817
    },
    {
        "content": "<p>I do agree that if you teach a course to 250 students, you might want to give them some helper-files that they should import.</p>",
        "id": 130263955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509864
    },
    {
        "content": "<p>That's September's job.</p>",
        "id": 130263961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532509889
    },
    {
        "content": "<p>I just hope that it won't eat up all your time, so that the big picture starts to die...</p>",
        "id": 130263963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532509894
    },
    {
        "content": "<blockquote>\n<p>I think it is awesome that you guys are now going to teach classes with Lean. I can't pull that off (both because of my Lean-level and career-level).</p>\n</blockquote>\n<p>I hope Lean-level is irrelevant... Career level clearly is, partly because it allows to fool people into trusting you, but mostly because it allows to potentially waste time.</p>",
        "id": 130264013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532509951
    },
    {
        "content": "<p>Well, at my Lean-level, it does become relevant. You are several Lean-levels above me. Your career-level is infinitely beyond mine: tenure vs not</p>",
        "id": 130264062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532510042
    }
]