[
    {
        "content": "<p>Lean is asking me to prove <code>f r = g r</code> where <code>f</code> and <code>g</code> are two ring homs, and <code>r : ℚ</code>. Is this statement in mathlib?</p>",
        "id": 165607570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557826911
    },
    {
        "content": "<p>There is <code>eq_cast</code>, but this gives you a ton of goals instead of just <code>is_ring_hom f</code>. Also, the cast only works for division rings <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> (which is of course necessary, but doesn't help me)</p>",
        "id": 165607641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557826958
    },
    {
        "content": "<p>It's not true for arbitrary ring homs, I think. You can freely define the \"divide by p\" operation in the ring unless you know the ring is a domain or is multiplicatively cancellative</p>",
        "id": 165609788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557828959
    },
    {
        "content": "<p>But Mario, the image of <code>1/n</code> must be a multiplicative inverse of <code>n</code>.</p>",
        "id": 165609859,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1557829012
    },
    {
        "content": "<p>that element must satisfy <code>n * a = 1</code> but why is there a unique such element?</p>",
        "id": 165609895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829053
    },
    {
        "content": "<p>unless you know <code>n * a = n * a' =&gt; a = a'</code></p>",
        "id": 165609954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829102
    },
    {
        "content": "<p>Sure yeah, I just baulked at \"freely\" without thinking</p>",
        "id": 165609981,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1557829153
    },
    {
        "content": "<p>I mean freely relative to that restriction of course</p>",
        "id": 165609985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829168
    },
    {
        "content": "<p>I mean, there are even two ring homs <code>Q -&gt; Q</code>, the identity and the zero map.</p>",
        "id": 165609990,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1557829174
    },
    {
        "content": "<p>lol</p>",
        "id": 165609995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829190
    },
    {
        "content": "<p>Wait are mathlib ring homs identity-preserving</p>",
        "id": 165609999,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1557829195
    },
    {
        "content": "<p>yes</p>",
        "id": 165610013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829202
    },
    {
        "content": "<p>Ok then scratch that</p>",
        "id": 165610054,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1557829218
    },
    {
        "content": "<p>Inverses are unique</p>",
        "id": 165610059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829226
    },
    {
        "content": "<p>why?</p>",
        "id": 165610066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829234
    },
    {
        "content": "<p>without cancellation</p>",
        "id": 165610071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829247
    },
    {
        "content": "<p>Are we talking about commutative rings?</p>",
        "id": 165610079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829261
    },
    {
        "content": "<p>I guess so</p>",
        "id": 165610088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829268
    },
    {
        "content": "<p>Then inverses are unique</p>",
        "id": 165610091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829274
    },
    {
        "content": "<p>why?</p>",
        "id": 165610093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829281
    },
    {
        "content": "<p>If <code>a*b=1</code> and <code>a*c=1</code> then <code>b*a*c=b=c</code></p>",
        "id": 165610103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829298
    },
    {
        "content": "<p>Just like there's a unique map from Z to any ring, there's at most one map from Q to any comm ring</p>",
        "id": 165610166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829349
    },
    {
        "content": "<p>I see, so commutativity is essential here</p>",
        "id": 165610178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829366
    },
    {
        "content": "<p>My gut feeling is that we don't need comm ring but I'm supposed to be marking 500 scripts not reading this</p>",
        "id": 165610185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829372
    },
    {
        "content": "<p>So let me humiliate myself by trying to figure this out in real time</p>",
        "id": 165610205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829403
    },
    {
        "content": "<p>Man I am so bad at rings.</p>",
        "id": 165610209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829413
    },
    {
        "content": "<p>by which I mean noncommutative rings</p>",
        "id": 165610212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829422
    },
    {
        "content": "<p>Obviously we need that a ring hom sends 1 to 1 (and I know people who don't even believe this)</p>",
        "id": 165610265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829446
    },
    {
        "content": "<p>Is it true for the ring of half-integers?</p>",
        "id": 165610273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829465
    },
    {
        "content": "<p>It's bound to be true</p>",
        "id": 165610310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829518
    },
    {
        "content": "<p>I'd know a weird example if it weren't true</p>",
        "id": 165610317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829525
    },
    {
        "content": "<p>So the question currently is that if Z[1/2] -&gt; R is a ring hom between rings with 1 (R not necc commutative) which sends 1 to 1 then is it the only one?</p>",
        "id": 165610384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829572
    },
    {
        "content": "<p>yes</p>",
        "id": 165610387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829580
    },
    {
        "content": "<p>And my money is on yes</p>",
        "id": 165610391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829586
    },
    {
        "content": "<p>2<em>1/2=1/2</em>2=1</p>",
        "id": 165610398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829606
    },
    {
        "content": "<p>meh</p>",
        "id": 165610401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829610
    },
    {
        "content": "<p>2 x 1/2 and 1/2 x 2 are both 1 in Z[1/2]</p>",
        "id": 165610405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829621
    },
    {
        "content": "<p>so I bet the same argument works</p>",
        "id": 165610414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829625
    },
    {
        "content": "<p>If a and b are two candidates for the image of 1/2 then we can still run the same argument becuase we have associativity and one_mul and mul_one</p>",
        "id": 165610438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829663
    },
    {
        "content": "<p><code>a*(2*b)=(a*2)*b</code></p>",
        "id": 165610454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829681
    },
    {
        "content": "<p>and this works in general, so Johan doesn't even need commutative, as long as 1 is going to 1</p>",
        "id": 165610505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829697
    },
    {
        "content": "<p>(which implies 2 is going to 1+1)</p>",
        "id": 165610512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829714
    },
    {
        "content": "<p>(i.e. a unique place)</p>",
        "id": 165610517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829720
    },
    {
        "content": "<p>Students learn in maths departments that in lots of categories \"surjective\" is the same as \"epimorphism\" and \"injective\" is the same as \"monomorphism\"</p>",
        "id": 165610555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829786
    },
    {
        "content": "<p>yeah, that sounds right</p>",
        "id": 165610563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557829799
    },
    {
        "content": "<p>and then we pull out the example of the category of rings, where Z -&gt; Q is both monic and epic</p>",
        "id": 165610584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829803
    },
    {
        "content": "<p>so I think I was probably proving that.</p>",
        "id": 165610629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829839
    },
    {
        "content": "<p>whilst worrying about whether we should have been pulling out the category of commutative rings instead.</p>",
        "id": 165610643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829858
    },
    {
        "content": "<p>OK see you in 2 weeks</p>",
        "id": 165610729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829926
    },
    {
        "content": "<p>when I've finished this marking</p>",
        "id": 165610735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829936
    },
    {
        "content": "<p>[yeah right]</p>",
        "id": 165610738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557829943
    },
    {
        "content": "<p>I guess the correct statement is that in a general not-necc-commutative ring, two-sided inverses are unique. There are rings where <code>a*b=1</code> but <code>b*a</code> isn't.</p>",
        "id": 165611459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557830883
    },
    {
        "content": "<p>so it should be called coe_inj for units R -&gt; R or something</p>",
        "id": 165611478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557830936
    },
    {
        "content": "<p>crap I have over 500 scripts still to mark. I really must go away.</p>",
        "id": 165611492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557830961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> GO AWAY!!!</p>",
        "id": 165611499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557830971
    },
    {
        "content": "<p>It's lunchtime now ;-)</p>",
        "id": 165612068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557831568
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">char_zero</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">semiring_hom_eq_cast</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_semiring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_cast&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">is_semiring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">is_semiring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">ring_hom_eq_cast</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">eq_cast</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">ring_hom_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom_cases_on&#39;</span> <span class=\"n\">r</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_div</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">b0&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">b0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">ring_hom_eq_cast</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">ring_hom_eq_cast</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span>\n    <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">b0&#39;</span><span class=\"o\">,</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">this</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span>\n    <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n    <span class=\"err\">←</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">b0&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 165612573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557832038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Merci beaucoup!</p>",
        "id": 165612691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557832145
    },
    {
        "content": "<p>de rien</p>",
        "id": 165612700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557832162
    },
    {
        "content": "<p>Now we know for sure that ring homs from ℚ are unique <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 165612721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557832200
    },
    {
        "content": "<p>If they're two sided inverses then you obviously don't need commutativity.</p>",
        "id": 165613023,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557832434
    },
    {
        "content": "<p>Unless I'm being stupid.</p>",
        "id": 165613078,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557832457
    },
    {
        "content": "<p>The image of a ring hom from a commutative ring is a commutative ring.</p>",
        "id": 165613147,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557832543
    },
    {
        "content": "<p>this is the important bit, I think; the fact that <code>f n</code> is always in the center of the ring</p>",
        "id": 165613230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557832609
    },
    {
        "content": "<blockquote>\n<p>The image of a ring hom from a commutative ring is a commutative ring.</p>\n</blockquote>\n<p>Yes but the problem with this argument is that the two images might be different commutative subrings.</p>",
        "id": 165613293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557832666
    },
    {
        "content": "<blockquote>\n<p>this is the important bit, I think; the fact that <code>f n</code> is always in the center of the ring</p>\n</blockquote>\n<p>Is that obvious? I don't see how we have access to facts about stuff not in the image.</p>",
        "id": 165613389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557832774
    },
    {
        "content": "<p>It might well be true but I don't see it immediately.</p>",
        "id": 165613446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557832808
    },
    {
        "content": "<p>and lunch is nearly over :-/</p>",
        "id": 165613459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557832824
    },
    {
        "content": "<p>I have no feeling for how bad noncommutative rings can be.</p>",
        "id": 165613482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557832857
    },
    {
        "content": "<p>Is there some crazy non-commutative polynomial ring Q[z] where lambda z isn't z lambda for lambda in Q?</p>",
        "id": 165613627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557832962
    },
    {
        "content": "<p>Oops, I mean that <code>f n</code> and <code>f m</code> commute</p>",
        "id": 165613631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557832964
    },
    {
        "content": "<p>there's a theorem about that in <code>nat.cast</code></p>",
        "id": 165613677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557833001
    },
    {
        "content": "<p>For commutative rings I have a really powerful feeling about how to build them -- throwing in generators and relations -- but for non-commutative rings I don't know what one can get away with.</p>",
        "id": 165613689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557833026
    },
    {
        "content": "<p>I think non-commutative rings are as broken as semigroups -- not enough axioms!</p>",
        "id": 165613753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557833059
    },
    {
        "content": "<p>this follows from the universal property of the fraction field and the uniqueness of maps from Z, right?</p>",
        "id": 165623198,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1557841384
    },
    {
        "content": "<p>For commutative rings, sure.</p>",
        "id": 165628851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557845441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you want to PR you lemma? Or shall I do it? What would be a good file to put it in?</p>",
        "id": 165734255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557941050
    }
]