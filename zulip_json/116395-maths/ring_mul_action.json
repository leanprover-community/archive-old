[
    {
        "content": "<p>A <code>mul_action</code> is <code>G →* (X ≃ X)</code>, and a <code>distrib_mul_action</code> is <code>G →* (X ≃+ X)</code>. For the study of decomposition and inertia groups <span class=\"user-mention\" data-user-id=\"454183\">@Michail Karatarakis</span> needs <code>G →* (X ≃+* X)</code>, e.g. a Galois group acting on the top field. Should there be a new typeclass for this? The extra axioms are <code>g \\bub 1 = 1</code> and <code>g \\bub (x * y)  = g \\bub x * g \\bub y</code>.</p>",
        "id": 302321649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664907953
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_semiring_action\">docs#mul_semiring_action</a></p>",
        "id": 302323053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664908455
    },
    {
        "content": "<p>I learned this existed from <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> !</p>",
        "id": 302323079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664908468
    },
    {
        "content": "<p>I learnt it existed only because it being in mathlib interfered with a refactor at one point!</p>",
        "id": 302323265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664908538
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_semiring_action.to_ring_equiv\">docs#mul_semiring_action.to_ring_equiv</a> is almost what Kevin is asking for I think</p>",
        "id": 302323395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664908588
    },
    {
        "content": "<p><del>I think we're missing the group structure on ring automorphisms?</del> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_aut.group\">docs#ring_aut.group</a>)</p>",
        "id": 302323506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664908632
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_semiring_action.to_ring_aut\">docs#mul_semiring_action.to_ring_aut</a> seems to be what's missing</p>",
        "id": 302323604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664908672
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.End\">docs#ring_hom.End</a> is a dead end</p>",
        "id": 302323631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664908681
    },
    {
        "content": "<p>That's the one that I was thinking of as being missing, thanks</p>",
        "id": 302323832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664908741
    },
    {
        "content": "<p>Is <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> asking for the actual morphism <code>G →* (X ≃+* X)</code>, or just for the class? Or both?</p>",
        "id": 302323868,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664908754
    },
    {
        "content": "<p>Well we have the class, just not the morphism</p>",
        "id": 302323934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664908777
    },
    {
        "content": "<p>right</p>",
        "id": 302323946,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664908783
    },
    {
        "content": "<p>The latter would be easy to add!</p>",
        "id": 302323992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664908798
    },
    {
        "content": "<p>Oh nice! Thanks!</p>",
        "id": 302324279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664908889
    },
    {
        "content": "<p>We also seem to be missing the ring_equiv version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_equiv.apply_mul_semiring_action\">docs#alg_equiv.apply_mul_semiring_action</a></p>",
        "id": 302324491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664908953
    },
    {
        "content": "<p>Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">≃</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv_smul_smul</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">smul_inv_smul</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.ext</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">equiv.ext</span> <span class=\"o\">(</span><span class=\"n\">mul_smul</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_one</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">equiv.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_mul</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">equiv.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>  <span class=\"o\">},</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and the equivalent for <code>distrib_mul_action</code> and <code>mul_semiring_action</code>?</p>",
        "id": 302325029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664909151
    },
    {
        "content": "<p>I doubt it.</p>",
        "id": 302325172,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664909200
    },
    {
        "content": "<p>IIRC </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv_smul_smul</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">smul_inv_smul</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>has a name</p>",
        "id": 302327208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664909877
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.to_perm\">docs#mul_action.to_perm</a></p>",
        "id": 302327454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664909949
    },
    {
        "content": "<p>If you add the definitions I mention above then we essentially do have that</p>",
        "id": 302330480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664911075
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_semiring_action.to_ring_aut\">docs#mul_semiring_action.to_ring_aut</a> would be the forward direction, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_semiring_action.comp_hom\">docs#mul_semiring_action.comp_hom</a> would be the reverse (edit: also missing, c.f <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.comp_hom\">docs#mul_action.comp_hom</a>)</p>",
        "id": 302330592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664911123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454183\">@Michail Karatarakis</span> can you put the pieces together?</p>",
        "id": 302337357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664913715
    },
    {
        "content": "<p>Yes, thank you</p>",
        "id": 302339299,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1664914491
    },
    {
        "content": "<p>If you end up PRing these, feel free to ping me in review</p>",
        "id": 302350518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664919022
    },
    {
        "content": "<p>Hi, could someone give me permission to push (this is my first PR) please? My Github name is mkaratarakis</p>",
        "id": 302690452,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665073071
    },
    {
        "content": "<p>Invitation sent!</p>",
        "id": 302692220,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665073582
    },
    {
        "content": "<p>Great, thanks a lot!</p>",
        "id": 302693468,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1665073957
    }
]