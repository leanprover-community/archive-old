[
    {
        "content": "<p>I just listened quickly to Kevin Buzzard's Tuesday Lean lecture on Twitch, where the issue of representing the integers/Z was raised. Is the Lean community aware of the binary encoding of integers used in the Coq standard library? <a href=\"https://coq.inria.fr/distrib/V8.11.0/stdlib/Coq.Numbers.BinNums.html#Z\">https://coq.inria.fr/distrib/V8.11.0/stdlib/Coq.Numbers.BinNums.html#Z</a> - perhaps this is something that could be adapted to Mathlib, since it has nice properties for computation and reasoning (generally doesn't overflow). </p>\n<p>In particular, the representations works well in extracted code: the CompCert compiler internally uses this <code>Z</code> in lieu of (bounded) machine integers. There is also a Coq framework which allows automatically refining any functions that use <code>nat</code> to instead use binary integers defined in this way: <a href=\"https://github.com/CoqEAL/CoqEAL/\">https://github.com/CoqEAL/CoqEAL/</a></p>",
        "id": 202687055,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593696209
    },
    {
        "content": "<p>I think that's already happening under the hood</p>",
        "id": 202687218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593696269
    },
    {
        "content": "<p>well, in any case, it could still be nice to use as the surface representation (most Coq people do)</p>",
        "id": 202687347,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593696323
    },
    {
        "content": "<p>What do you mean with that?</p>",
        "id": 202687494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593696377
    },
    {
        "content": "<p>We have <code>nat</code> (unary), and <code>num</code> (binary nats).</p>",
        "id": 202687524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593696392
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/znum\">docs#znum</a> but it doesn't see much use because we tend not to rely on kernel reduction, and for <code>int</code> there is another mechanism to override the implementation in the VM.</p>",
        "id": 202687541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593696400
    },
    {
        "content": "<p>Does <code>norm_num</code> use <code>znum</code> somehow? I don't know.</p>",
        "id": 202687601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593696428
    },
    {
        "content": "<p>well, I just mean it has more natural constructors than what Kevin showed in the lecture, <code>Z0</code>, <code>Zpos</code>, <code>Zneg</code></p>",
        "id": 202687633,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593696447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198375\">@Karl Palmskog</span> You don't suggest to prove theorems about <code>int</code> using the binary representation, right? So you must mean something else.</p>",
        "id": 202687640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593696450
    },
    {
        "content": "<p>I see, so you have it, but instead people use the <code>of_nat</code> constructors?</p>",
        "id": 202687826,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593696530
    },
    {
        "content": "<p>For <code>int</code>, I think the choice of representation doesn't matter too much for proving, once one has all the standard API bits. For <code>nat</code> it is common to do cases/induction forever, though.</p>",
        "id": 202687850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593696543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198375\">@Karl Palmskog</span> I never use <code>of_nat</code> explicitly.</p>",
        "id": 202688207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593696704
    },
    {
        "content": "<p>Maybe under the hood, but the API doesn't let me know about it.</p>",
        "id": 202688241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593696720
    },
    {
        "content": "<p>If I have a <code>nat</code> and I need an <code>int</code>, automatic coercion will deal with it for me.</p>",
        "id": 202688307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593696743
    },
    {
        "content": "<p>But maybe I'm still misunderstanding you. (I'm far from an expert on the foundational things and design decisions.)</p>",
        "id": 202688345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593696768
    },
    {
        "content": "<p><code>norm_num</code> does not use <code>znum</code></p>",
        "id": 202692498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593698674
    },
    {
        "content": "<p>in fact it doesn't use integers at all</p>",
        "id": 202692521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593698682
    },
    {
        "content": "<p>well, I suppose <code>int</code> is used during execution in the VM to keep track of how the proof is going, but the generated proofs contain no references to <code>int</code> unless the proof is actually about <code>int</code></p>",
        "id": 202692706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593698763
    },
    {
        "content": "<p>When the VM computes with <code>int</code>, it uses GMP bignums, which is more efficient than Coq's <code>Z</code></p>",
        "id": 202692905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593698864
    },
    {
        "content": "<p>In principle <code>znum</code> could also get the special GMP treatment, right?</p>",
        "id": 202693269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593699016
    },
    {
        "content": "<p>that would be interesting</p>",
        "id": 202693911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699290
    },
    {
        "content": "<p>it would mean that <code>znum -&gt; int</code> and vice versa is a no-op</p>",
        "id": 202693932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699301
    },
    {
        "content": "<p>I was thinking that if it's indeed the case that the definitional behavior of <code>int</code> isn't so important once the basic theory is set up, we could even swap in <code>znum</code> for <code>int</code> and get both fast(er) kernel reduction and fast VM computation</p>",
        "id": 202694447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593699551
    },
    {
        "content": "<p>I think the definition of <code>int</code> is inspected sufficiently often that this would be far from painless</p>",
        "id": 202695146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699847
    },
    {
        "content": "<p>plus you can always use <code>znum</code> for those particular cases where kernel computation matters (which is essentially zero cases right now AFAIK, probably in no small part due to my explicit discouragement of the practice when it comes up)</p>",
        "id": 202695305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699929
    },
    {
        "content": "<p>For completeness here, I should also mention the int representation in MathComp, which is subtly different from, but very close to, Lean's <code>Z</code>: <a href=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/algebra/ssrint.v#L58\">https://github.com/math-comp/math-comp/blob/master/mathcomp/algebra/ssrint.v#L58</a> (as usual in MathComp, this one is to my understanding optimized for computations/reflection inside proofs)</p>",
        "id": 202827348,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593800052
    },
    {
        "content": "<p>How is it different?</p>",
        "id": 202831386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593804477
    }
]