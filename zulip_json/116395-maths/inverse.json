[
    {
        "content": "<p>I'm failing to find this in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">def</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">inverse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inverse_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"bp\">⟩</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hl</span> <span class=\"n\">a</span> <span class=\"bp\">▸</span> <span class=\"n\">congr_arg</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 159951684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551734341
    },
    {
        "content": "<p>or maybe even in core?</p>",
        "id": 159951714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551734372
    },
    {
        "content": "<p>interesting lemma, I've never known that</p>",
        "id": 159951817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551734452
    },
    {
        "content": "<p>I'm not asking for irony, I'm asking whether it's already somewhere</p>",
        "id": 159952052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551734627
    },
    {
        "content": "<p>no I really never thought of it</p>",
        "id": 159952214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551734743
    },
    {
        "content": "<p>it's really an interesting lemma</p>",
        "id": 159952221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551734751
    },
    {
        "content": "<p>I wasn't being sarcastic</p>",
        "id": 159952223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551734754
    },
    {
        "content": "<p>Did you look in <code>data.equiv.basic</code>? It feels equiv-ish</p>",
        "id": 159952314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551734802
    },
    {
        "content": "<p>this looks like a special case of the equivalence between the natural-bijection-formulation-of-adjunction and the unit-counit-formulation-of-adjunction</p>",
        "id": 159952737,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551735125
    },
    {
        "content": "<p>huh, I also didn't see this yet. We should add an <code>equiv</code> constructor for this.</p>",
        "id": 159953496,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551735672
    },
    {
        "content": "<p>Ok, I'll add the lemma to <code>logic.function</code> and a constructor in <code>equiv.basic</code> unless Mario tells us otherwise while I wait for the uniform split merge.</p>",
        "id": 159953788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551735902
    },
    {
        "content": "<p>lgtm</p>",
        "id": 159964864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551745368
    },
    {
        "content": "<p>thought i would throw this up here, in case something like it was wanted as well, haven't much looked at mathlib/mathlib style yet though apologies</p>\n<div class=\"codehilite\"><pre><span></span>def inverse_rev {α : Type*} {β : Type*} {g : β → α} {f : α → β} (fg_inv : inverse g f)\n: inverse f g\n:= ⟨fg_inv.right,fg_inv.left⟩\n\ndef inverse_comp {α : Type*} {β : Type*} (f : α → β) (g : β → α) (fg_inv : inverse g f)\n: (∀ a, (g ∘ f) a = a) ∧ (∀ b, (f ∘ g) b = b) :=\n  ⟨fg_inv.left, fg_inv.right⟩\n\ndef inverse_comp_id {α : Type*} {β : Type*} (f : α → β) (g : β → α) (fg_inv  : inverse g f)\n: (g ∘ f = id) ∧ (f ∘ g = id)\n:= ⟨funext (λ a, by rw [(inverse_comp f g fg_inv).left, id]),\n    funext (λ b, by rw [(inverse_comp f g fg_inv).right, id])⟩\n\ndef inverse_bijective {α : Type*} {β : Type*} (f : α → β) (g : β → α) (gf_inv  : inverse g f)\n: bijective f ∧ bijective g\n:= have fg_inv : inverse f g, from inverse_rev gf_inv,\n   have injective f,\n    from (λ x₁ x₂, λ (h : f x₁ = f x₂),\n          show x₁ = x₂, by rw [&lt;- gf_inv.left x₁, h, gf_inv.left]),\n   have surjective f, from (λ y, exists.intro (g y) (gf_inv.right y)),\n   have injective g,\n    from (λ y₁ y₂, λ (h : g y₁ = g y₂),\n      show y₁ = y₂, by rw [&lt;- fg_inv.left y₁, h, fg_inv.left]),\n   have surjective g, from (λ x, exists.intro (f x) (fg_inv.right x)),\n   ⟨⟨‹injective f›, ‹surjective f›⟩, ⟨‹injective g›, ‹surjective g ›⟩⟩\n</pre></div>",
        "id": 160014206,
        "sender_full_name": "matt rice",
        "timestamp": 1551801262
    },
    {
        "content": "<p>added some more proofs to the above...</p>",
        "id": 160428174,
        "sender_full_name": "matt rice",
        "timestamp": 1552245090
    }
]