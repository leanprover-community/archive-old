[
    {
        "content": "<p>I have no clue how to prove this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">pi_mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 126969544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069481
    },
    {
        "content": "<p>Can you prove it in maths?</p>",
        "id": 126969599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527069560
    },
    {
        "content": "<p>:-)</p>",
        "id": 126969600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527069568
    },
    {
        "content": "<p>i.e. \"is it true\"</p>",
        "id": 126969604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527069585
    },
    {
        "content": "<p>Unless I made a stupid mistake: yes</p>",
        "id": 126969606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069598
    },
    {
        "content": "<p>how is the pi topology defined?</p>",
        "id": 126969651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527069616
    },
    {
        "content": "<p>It just says that Pi is some sort of categorical product on steroids</p>",
        "id": 126969652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069617
    },
    {
        "content": "<p>what Mario said</p>",
        "id": 126969654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527069624
    },
    {
        "content": "<p>If I have continuous maps to all the factors, I get a continuous map to the Pi</p>",
        "id": 126969657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069635
    },
    {
        "content": "<p>(in Lean)</p>",
        "id": 126969658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527069637
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"err\">⨆</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126969660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069653
    },
    {
        "content": "<p>so look for theorems about continuity on induced</p>",
        "id": 126969668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527069670
    },
    {
        "content": "<p>There are loads of those... but how do I deal with the <code>⨆a,</code> that is in front?</p>",
        "id": 126969677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069696
    },
    {
        "content": "<p>look for continuity on a Sup</p>",
        "id": 126969678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527069706
    },
    {
        "content": "<p>there is only continuity for <code>sup</code>, not <code>Sup</code></p>",
        "id": 126969728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069760
    },
    {
        "content": "<p>I think it's called that... serach for the bigcup</p>",
        "id": 126969736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527069785
    },
    {
        "content": "<p>I'm already down 5 rabbit holes, I really hope I don't need to go down this one as well...</p>",
        "id": 126969740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069797
    },
    {
        "content": "<p>Search for <code>⨆</code> gives <code>No results</code> in <code>continuity.lean</code></p>",
        "id": 126969744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069814
    },
    {
        "content": "<p>hm, looks like it is missing from the list at <code>continuity.lean</code></p>",
        "id": 126969801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527069873
    },
    {
        "content": "<p>Right, there is constructors for products of two topological spaces, and continous maps towards them, etc... but for Pi types this seems missing. And I don't know exactly how to prove this stuff...</p>",
        "id": 126969827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069950
    },
    {
        "content": "<p>/me doesn't know anything about <code>Sup</code> and friends</p>",
        "id": 126969872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069964
    },
    {
        "content": "<p>okay, so use the existing theorems as guides and write your own version for continuity on supr</p>",
        "id": 126969877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527069970
    },
    {
        "content": "<p>\\me goes down rabbit hole # 6</p>",
        "id": 126969887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527069998
    },
    {
        "content": "<p>(or I can, if this is going too far afield)</p>",
        "id": 126969888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527069999
    },
    {
        "content": "<p>I'm just showing you what I would do</p>",
        "id": 126969895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527070014
    },
    {
        "content": "<p>Well, I'm trying to prove that the face map between two standard simplices is continuous...</p>",
        "id": 126969908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527070027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> At the moment, I don't even know how to write the statement for <code>Sup</code></p>",
        "id": 126969975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527070103
    },
    {
        "content": "<p>here you go:</p>\n<div class=\"codehilite\"><pre><span></span>lemma continuous_Sup_dom {t₁ : set (tspace α)} {t₂ : tspace β}\n  {t : tspace α} (h₁ : t ∈ t₁) : cont t t₂ f → cont (Sup t₁) t₂ f :=\ncontinuous_le_dom (le_Sup h₁)\n\nlemma continuous_Sup_rng {t₁ : tspace α} {t₂ : set (tspace β)}\n  (h : ∀t∈t₂, cont t₁ t f) : cont t₁ (Sup t₂) f :=\ncontinuous_Inf_rng\n  (λ t ht, show t ≤ coinduced f t₁, from h t ht)\n  continuous_coinduced_rng\n\nlemma continuous_supr_dom {t₁ : ι → tspace α} {t₂ : tspace β}\n  {i : ι} : cont (t₁ i) t₂ f → cont (supr t₁) t₂ f :=\ncontinuous_Sup_dom ⟨i, rfl⟩\n\nlemma continuous_supr_rng {t₁ : tspace α} {t₂ : ι → tspace β}\n  (h : ∀i, cont t₁ (t₂ i) f) : cont t₁ (supr t₂) f :=\ncontinuous_Sup_rng $ assume t ⟨i, (t_eq : t = t₂ i)⟩, t_eq.symm ▸ h i\n</pre></div>",
        "id": 126970325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527070806
    },
    {
        "content": "<p>I just copied the Inf stuff and dualized everything</p>",
        "id": 126970334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527070844
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 126970571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527071342
    },
    {
        "content": "<p>Let me see if I can continue with rabbit hole # 5 (-;</p>",
        "id": 126970576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527071361
    },
    {
        "content": "<p>Hurray!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">pi_mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">YY</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">continuous_Sup_rng</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">continuous_induced_rng</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126971289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527072799
    },
    {
        "content": "<p>Ok, so now I'm stuck with this MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous_sums</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 126972217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527074608
    },
    {
        "content": "<p>Whatever I try, I'm pulled hard into all sorts of <code>foldr</code> stuff. And I'm completely out of my comfort zone.</p>",
        "id": 126972240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527074642
    },
    {
        "content": "<p>that's not a trivial theorem</p>",
        "id": 126972265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527074692
    },
    {
        "content": "<p>I would like to mumble some think like... well, addition is continuous... if you repeatedly add, you get continuity by induction</p>",
        "id": 126972267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527074701
    },
    {
        "content": "<p>Can I <code>foldr</code> the continuity proof off <code>add</code>?</p>",
        "id": 126972274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527074722
    },
    {
        "content": "<p>I guess you can prove it by induction on <code>n</code>, you will need to show that <code>fin (succ n) -&gt; R</code> is homeomorphic to <code>R x (fin n -&gt; R)</code></p>",
        "id": 126972276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527074737
    },
    {
        "content": "<p>To link back to the discussion with Kevin, from about an hour ago... do you think this could be made into a trivial theorem?</p>",
        "id": 126972319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527074820
    },
    {
        "content": "<p>no</p>",
        "id": 126972322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527074825
    },
    {
        "content": "<p>okay, maybe that's too strong, you might be able to prove it by induction on the set instead</p>",
        "id": 126972365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527074915
    },
    {
        "content": "<p>that sounds closer to what I wanted to mumble</p>",
        "id": 126972371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527074944
    },
    {
        "content": "<p>in that case you want to use <code>finset.induction_on</code></p>",
        "id": 126972379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527074982
    },
    {
        "content": "<p>and the IH says that a sum of continuous functions over set s is continuous</p>",
        "id": 126972424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527075031
    },
    {
        "content": "<p>Ok, I'm going to try this. Thanks!</p>",
        "id": 126972492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527075211
    },
    {
        "content": "<p>Johan, you may already know, but just in case: there very easy clean up steps you can run on such proofs. <code>YY</code> is never used. <code>unfold</code> is actually much less useful that one thinks in the beginning, so I always try to remove all <code>unfold</code> once a proof work. And then we always try to get rid of <code>simp</code> in the middle of proofs. The result is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">pi_mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_Sup_rng</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_induced_rng</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126974780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527079421
    },
    {
        "content": "<p>Out of curiosity, I also tried to build a term proof, but haven't succeeded because of the mysterious rewrite in the middle (which rewrites implicit arguments, which has the weird effect of not changing the visible goal)</p>",
        "id": 126974828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527079481
    },
    {
        "content": "<p>I can't get more obfuscated than:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">pi_mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_Sup_rng</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hi</span> <span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">continuous_induced_rng</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"kn\">end</span>\n</pre></div>",
        "id": 126974838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527079509
    },
    {
        "content": "<p>For the sum proof: its easiest to generalize for finset, and then go from list to multiset to finset. I will add this to mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous_supr_rng</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">continuous</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t₁</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">continuous</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t₁</span> <span class=\"o\">(</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">supr</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_iff_le_coinduced</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">supr_le</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous_iff_le_coinduced</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">pi_mk</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_supr_rng</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous_induced_rng</span> <span class=\"err\">$</span> <span class=\"n\">H</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_list_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">c</span><span class=\"err\">∈</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">continuous_const</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">continuous_add</span>\n      <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_cons_self</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">continuous_list_sum</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_cons_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">hc</span><span class=\"o\">)))</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_multiset_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">c</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">continuous_list_sum</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_finset_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">c</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_multiset_sum</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 126974960,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527079746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Yes, you are completely right. But it seems the work is now already done (-;</p>",
        "id": 126975014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527079821
    },
    {
        "content": "<p>you can see how Johannes built the term proof for <code>pi_mk</code>; the key is to use <code>continuous_supr_rng</code> not <code>continuous_Sup_rng</code> because the definition uses <code>supr</code> (the indexed supremum) not <code>Sup</code> (the set supremum). In fact <code>supr</code> is defined in terms of <code>Sup</code>, but if you apply the wrong theorem it unfolds this definition and things get harder.</p>",
        "id": 126975238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527080252
    },
    {
        "content": "<p>Yes, I will take a closer look. I think I can learn a lot from how Johannes improved my kludge</p>",
        "id": 126975550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527080779
    },
    {
        "content": "<p>Sure. But this is too efficient in a sense. My message was focused on easy local clean up, that you can actually do without any understanding of the proof. Of course this is only the first step. Really efficient proofs like Johannes' require actual thinking</p>",
        "id": 126975794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527081193
    },
    {
        "content": "<p>you can also look at my term proof of <code>continuous_supr_rng</code>, which uses the <code>\\t</code> for rewriting</p>",
        "id": 126975891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527081348
    },
    {
        "content": "<p>I'm a bit frustrated by this \\t thing. I know it's somehow the term version of <code>rw</code> and I see it everywhere in mathlib, but I was almost never able to use it</p>",
        "id": 126975965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527081435
    },
    {
        "content": "<p>I admit it was a bit delicate for me at first</p>",
        "id": 126975978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527081466
    },
    {
        "content": "<p>it is so much weaker than the lean 2 version, it fails whenever the expected type or the thing to rewrite with has metavariables</p>",
        "id": 126976035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527081515
    },
    {
        "content": "<p>Anyway, I just proved that the face map between standard simplices is continuous!</p>",
        "id": 126976056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527081560
    },
    {
        "content": "<p>The proof is not cleaned up. But it works (-;</p>",
        "id": 126976057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527081573
    },
    {
        "content": "<p>but it's often just the thing when you want to rewrite with an equality in the context</p>",
        "id": 126976067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527081600
    },
    {
        "content": "<p>What about my attempt? Can you use \\t there? (without switching to <code>continuous_supr_rng</code>)</p>",
        "id": 126976197,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527081792
    },
    {
        "content": "<p>yes, the proof should be almost identical to the one I pointed at</p>",
        "id": 126976271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527081859
    },
    {
        "content": "<p>Ok, like I said, the proofs are still ugly. But here goes nothing: <a href=\"https://github.com/jcommelin/mathlib/commit/fec9db2028bea163352f574055dad44029d04788\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/commit/fec9db2028bea163352f574055dad44029d04788\">https://github.com/jcommelin/mathlib/commit/fec9db2028bea163352f574055dad44029d04788</a></p>",
        "id": 126976317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527081947
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma continuous.pi_mk\n  {X I : Type*} {Y : I → Type*} [t₁ : topological_space X] [t₂ : Πi, topological_space (Y i)]\n  (f : Πi, X → (Y i)) (H : Πi, continuous (f i)) :\n  continuous (λ x i, f i x) :=\ncontinuous_Sup_rng $ assume t ⟨i, e⟩, e.symm ▸ continuous_induced_rng (H i)\n</pre></div>",
        "id": 126976321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527081958
    },
    {
        "content": "<p>Hum, I think I stupidly missed the <code>eq.symm</code> when I tried</p>",
        "id": 126980416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527087983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I forgot that there is already <code>tendsto_sum</code>, so you could also derive <code>continuous_finset_sum</code> from this.<br>\nAnyway, this all is now in mathlib.</p>",
        "id": 126981716,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527089509
    },
    {
        "content": "<p>Thanks a lot! I will merge into my fork. Once I clean my stuff up, I think I will make a PR</p>",
        "id": 126985262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527094471
    }
]