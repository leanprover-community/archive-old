[
    {
        "content": "<p>Is it possible to eliminate the <code>hs : ∀ (r : R) x, C x → C (r • x)</code> hypothesis from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mul_induction_on\">docs#submodule.mul_induction_on</a>? My hand-wavey argument is that:</p>\n<ol>\n<li>any element of <code>M * N</code> must be of the form<code>∑ᵢ mᵢ*nᵢ</code> where <code>mᵢ ∈ M</code> and <code>nᵢ ∈ M</code></li>\n<li><code>ha : ∀ x y, C x → C y → C (x + y)</code> already tells us that it's sufficient to prove <code>C (mᵢnᵢ)</code> to show <code>C (∑ᵢ mᵢnᵢ)</code></li>\n<li><code>hm : ∀ (m ∈ M) (n ∈ N), C (m * n)</code> can prove <code>C (mᵢnᵢ)</code></li>\n</ol>\n<p>Is my claim 1) correct? Can I get there without going through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mem_bsupr_iff_exists_dfinsupp\">docs#submodule.mem_bsupr_iff_exists_dfinsupp</a>?</p>",
        "id": 268292141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642437297
    },
    {
        "content": "<p>Are you talking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mul_induction_on\">docs#submodule.mul_induction_on</a> ?</p>",
        "id": 268292373,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642437455
    },
    {
        "content": "<p>I'm pretty <code>1</code> is false when <code>A</code> is noncommutative.</p>",
        "id": 268293616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642438255
    },
    {
        "content": "<p>Or is it the commutativity of <code>R</code> that matters?</p>",
        "id": 268293669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642438295
    },
    {
        "content": "<p>I think only the commutativity of <code>R</code> matters</p>",
        "id": 268294425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642438720
    },
    {
        "content": "<p>Then it must be true.</p>",
        "id": 268294478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642438755
    },
    {
        "content": "<p>I think my difficulty amounts to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- is this true?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_add_submonoid_mul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_submonoid</span> <span class=\"bp\">=</span> <span class=\"n\">M.to_add_submonoid</span> <span class=\"bp\">*</span> <span class=\"n\">N.to_add_submonoid</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(which needs <a href=\"https://github.com/leanprover-community/mathlib/pull/11522\">#11522</a> for the <code>*</code> on the LHS)</p>",
        "id": 268297827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642440852
    },
    {
        "content": "<p>Which in turn I think needs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">supr_to_add_submonoid</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_submonoid</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_submonoid</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 268302200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642443874
    },
    {
        "content": "<p>That looks wrong. Surely <code>(M * N).to_add_submonoid = M.to_add_submonoid + N.to_add_submonoid</code> is true instead.</p>",
        "id": 268302519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642444110
    },
    {
        "content": "<p>Also, you surely meant \"the <code>*</code> on the <strong>R</strong>HS\"</p>",
        "id": 268302565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642444156
    },
    {
        "content": "<p>Oh wait, I was reading <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.to_add_submonoid\">docs#submonoid.to_add_submonoid</a>. Your thing is probably true.</p>",
        "id": 268302873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642444375
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11525\">#11525</a> proves the above <code>supr</code> lemma for <code>sup</code></p>",
        "id": 268303086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642444549
    },
    {
        "content": "<p>Proof was pretty ugly, but I guess not difficult:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">supr_to_add_submonoid</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_submonoid</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_submonoid</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_to_add_submonoid</span><span class=\"o\">,</span> <span class=\"n\">supr_eq_span</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">add_submonoid.supr_eq_closure</span><span class=\"o\">,</span> <span class=\"n\">coe_to_add_submonoid</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">submodule.span_induction</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_submonoid.subset_closure</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_submonoid.zero_mem</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_submonoid.add_mem</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">add_submonoid.closure_induction</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hix</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">add_submonoid.subset_closure</span> <span class=\"o\">(</span><span class=\"n\">set.mem_Union.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n        <span class=\"n\">exact</span> <span class=\"n\">smul_mem</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"n\">hix</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">smul_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">add_submonoid.zero_mem</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">add_submonoid.add_mem</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">supr_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">to_add_submonoid_mono</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_supr</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Presumably there's a slightly easier way to get there...</p>",
        "id": 268323244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642460569
    }
]