[
    {
        "content": "<p>Asking for a friend: <a href=\"https://twitter.com/pruvisto/status/1266339118587555846?s=20\">https://twitter.com/pruvisto/status/1266339118587555846?s=20</a> (in response to <a href=\"https://twitter.com/XenaProject/status/1266336662046597121?s=20\">https://twitter.com/XenaProject/status/1266336662046597121?s=20</a>)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pruvisto/status/1266339118587555846?s=20\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/923281659247677441/F6kETGP8_normal.jpg\"></a><p><a href=\"https://twitter.com/XenaProject\">@XenaProject</a> <a href=\"https://twitter.com/AngelikiKoutso1\">@AngelikiKoutso1</a> That said, I'm impressed that your norm_num tactic is that fast. Do you know how it works exactly?</p><span>- Manuel Eberl (@pruvisto)</span></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/XenaProject/status/1266336662046597121?s=20\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1263810297560735744/gMianQ_V_normal.jpg\"></a><p><a href=\"https://twitter.com/AngelikiKoutso1\">@AngelikiKoutso1</a> Lean:\n```\nimport tactic\n\nopen nat\n\nset_option profiler true -- timing\n\nexample : prime 73727 := by norm_num -- quick\n\nexample : prime 100000007 := by norm_num -- about 5 seconds\n```\n\nMario Carneiro got norm_num doing this after <a href=\"https://t.co/eOoieTdBKc\">https://xenaproject.wordpress.com/2018/07/26/617-is-prime/</a></p><span>- The Xena Project (@XenaProject)</span></div></div>",
        "id": 199144920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590754139
    },
    {
        "content": "<p>Kudos to Mario <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 199161725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590762694
    },
    {
        "content": "<p>Note that</p>\n<blockquote>\n<p>Mario Carneiro got norm_num doing this after <a href=\"https://xenaproject.wordpress.com/2018/07/26/617-is-prime/\">https://xenaproject.wordpress.com/2018/07/26/617-is-prime/</a></p>\n</blockquote>\n<p>is not completely accurate. I think Mario gave <code>norm_num</code> another speedup in 2020 (a couple of weeks ago).</p>",
        "id": 199161923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590762786
    },
    {
        "content": "<p>I don't know if that affects the primality testing. Is it just checking divisibility up to sqrt(n) though?</p>",
        "id": 199163359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590763462
    },
    {
        "content": "<p><code>norm_num</code> got faster in general</p>",
        "id": 199164889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590764125
    },
    {
        "content": "<p>My claim is accurate in the sense that <code>norm_num</code> could not prove<code> nat.prime 617</code> before I wrote that blog post, but it could a few days after it</p>",
        "id": 199165028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590764172
    },
    {
        "content": "<p>Right, but the time measurements probably got better since then.</p>",
        "id": 199180036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590770640
    },
    {
        "content": "<p>Of course the step from <code>infty</code> to <code>10s</code> is a lot more important then from <code>10s</code> to <code>5s</code>.</p>",
        "id": 199180111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590770666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233634\">@Manuel Eberl</span> <code>norm_num</code> actually isn't doing anything very intelligent here. I agree that the fastest option is to do as much unverified work as possible, but the proof method here is still trial division, which I believe is the best performer for small primes. (I have implemented Pocklington certificates in metamath before but they were way overkill for the numbers you usually see in theorem provers.) The main use of the unverified computation here is in proving <em>non</em>-primality: if the input is not prime we find a witness to it externally and then the proof itself is short. But if the number is in fact prime we just demonstrate that for each d = 3,5,7,9,... while d*d &lt;= n, n can be expressed as a + d * b where 0 &lt; a &lt; d (and unverified computation is used to find a and b here).</p>\n<p>So while we can leverage unverified computation to some extent, the proof is still quite long -- for 100000007 that's 5000 applications of the inductive step. Unlike the Coq approach, we are making essentially no use of \"reflection\" -- there are no nontrivial definitional equality problems produced, because in benchmarks this turns out to be slightly faster, at least with lean's current implementation. So it is really quite similar to what you would do in Isabelle.</p>\n<p>I'm not sure how it compare's with isabelle's <code>simp</code>. Lean doesn't have simpprocs, but <code>norm_num</code> is perhaps the nearest approximation to one, since it uses simp for the expression traversal, which calls the core norm_num tactic to simplify subterms. It is possible to use pure <code>simp</code> to prove theorems about <code>+</code> or <code>&lt;=</code> on numerals as well, with the right simp lemmas, but this seems to be about 100 times slower, and perhaps Isabelle's <code>simp</code> lies somewhere in the middle. The problem is that <code>simp</code> does so many things that it can't focus on the one goal, and instead runs through its many simplifications on every subterm, while <code>norm_num</code> is applying exactly the theorems that are needed and produces a proof of <code>prime n</code> all in one go.</p>",
        "id": 199215782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590788478
    },
    {
        "content": "<p>Do I understand correctly that one of the reasons non-trivial <code>rfl</code>s are slow is that from the kernel point of view <code>nat</code> are Peano naturals, not binary numbers?</p>",
        "id": 199216331,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590788809
    },
    {
        "content": "<p>That depends on what is being proved. You can often get lucky if the kernel unfolds things in the right order and reduces things to an exact match before it gets that bad, but the worst case with proving facts about nat is that it reduces the term all the way, to the unary representation</p>",
        "id": 199216730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590789065
    },
    {
        "content": "<p>But it's slower even with the binary <code>num</code> right?</p>",
        "id": 199216764,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590789104
    },
    {
        "content": "<p>Yes, that's the real comparison I'm talking about</p>",
        "id": 199216831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590789126
    },
    {
        "content": "<p>If you did this Coq style you would use an inductive type whose structure matches the proof method</p>",
        "id": 199216864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590789150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000000000000</span> <span class=\"bp\">+</span> <span class=\"mi\">1000000000000</span> <span class=\"bp\">=</span> <span class=\"mi\">2000000000000</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- immediate</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000000000</span> <span class=\"bp\">+</span> <span class=\"mi\">2000000000</span> <span class=\"bp\">=</span> <span class=\"mi\">3000000000</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>",
        "id": 199217254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590789412
    },
    {
        "content": "<p>I should replace \"often\" with \"occasionally\". This is an unlikely event in the space of all random questions you can ask</p>",
        "id": 199217434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590789519
    },
    {
        "content": "<p>Here's another funny variation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">10000000000000000000</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">10000000000000000001</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- immediate</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">10000000000000000001</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">10000000000000000002</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>",
        "id": 199221574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590792414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<p>I see. Perhaps we should try to implement something like that in Isabelle as well.</p>\n<p>There is also the HOL Light approach of not using binary numbers but some larger base <code>b</code> (e.g. 16) with <code>b</code>×<code>b</code> tables for addition and multiplication. That cuts down the constant factor for arithmetic operations quite a bit.</p>\n<p>We even had a student who started implementing this for a Bachelor's thesis, but they never got very far.</p>",
        "id": 199246835,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1590829499
    },
    {
        "content": "<p>Metamath actually uses base 10 arithmetic <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 199247442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590830618
    },
    {
        "content": "<p>To support this comfortably in lean would be complicated because the representation of numerals is innately base 2, so you would have to deal with all the possible half-digits at the end of a number if you chopped things up into 4 bit chunks</p>",
        "id": 199247509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590830734
    },
    {
        "content": "<p>Is this because of definitional equality vs other kinds of equality? In Isabelle/HOL, the representation of numbers is whatever we want it to be at this particular moment.</p>",
        "id": 199247583,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1590830867
    },
    {
        "content": "<p>It's because of the parser</p>",
        "id": 199247624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590830896
    },
    {
        "content": "<p>when you type <code>12345</code> in lean it gets turned into <code>bit1 (bit0 ... (bit1 1))</code></p>",
        "id": 199247629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590830921
    },
    {
        "content": "<p>If you represent numbers in a different way the pretty printer will not show your numbers nicely</p>",
        "id": 199247641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590830956
    },
    {
        "content": "<p>and you can reasonably expect that human inputs will also be in this form</p>",
        "id": 199247652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590830989
    },
    {
        "content": "<p>Same in Isabelle. But why shouldn't norm_num be able to just rewrite that into something else as preprocessing, and back into binary in postprocessing?</p>",
        "id": 199247723,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1590831079
    },
    {
        "content": "<p>It could</p>",
        "id": 199247731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590831092
    },
    {
        "content": "<p>I think that's how it works in HOL Light</p>",
        "id": 199247742,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1590831112
    },
    {
        "content": "<p>It's nice to be able to read intermediate statements though</p>",
        "id": 199247746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590831117
    },
    {
        "content": "<p>In the HOLs that's mostly inaccessible anyway</p>",
        "id": 199247786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590831132
    },
    {
        "content": "<p>I've actually been working with HOL light recently and I think it's binary like lean, at least in the standard library</p>",
        "id": 199247797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590831176
    },
    {
        "content": "<p>but I also recall hearing that there was a large-base implementation of arithmetic for flyspeck</p>",
        "id": 199247803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590831198
    },
    {
        "content": "<p>For MM0 I am implementing base 16 arithmetic. I don't think that really large bases are necessarily better if the digit table overflows the cache</p>",
        "id": 199247854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590831266
    },
    {
        "content": "<p>Yes, more than 16 is probably a bit excessive.</p>",
        "id": 199248505,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1590832227
    }
]