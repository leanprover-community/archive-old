[
    {
        "content": "<p>I've been working with <code>polynomial.lean</code>. I would like</p>\n<div class=\"codehilite\"><pre><span></span>mul_X_pow_eq_zero :\n  ∀ {α : Type u_1} [_inst_1 : decidable_eq α] [_inst_2 : comm_semiring α] (n : ℕ) (f : polynomial α),\n    f * X ^ n = 0 → f = 0\n</pre></div>\n\n\n<p>but I can't see it and it's not so clear to me how to get it from the interface. I am tempted to get my hands dirty and prove <code>(f * X ^ n) (m) = f (n + m)</code> [i.e. break the illusion and start treating polynomials as functions from nat to alpha] from which it follows relatively simply, but I suspect this would involve wading into finsupp. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> or anyone else -- am I missing a trick here?</p>",
        "id": 133588233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536454051
    },
    {
        "content": "<p>Do we have left-regular elements?</p>",
        "id": 133588722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536455215
    },
    {
        "content": "<p>i.e. non-zero divisors</p>",
        "id": 133588727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536455231
    },
    {
        "content": "<p>I would suggest using integral domain properties but I guess you don't have that in a comm_semiring</p>",
        "id": 133588774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536455349
    },
    {
        "content": "<p>I think <code>leading_coeff_mul</code> and <code>leading_coeff_X_pow</code> should help  here,</p>",
        "id": 133598927,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536478432
    },
    {
        "content": "<p>The ring could even be the zero ring here! It's a particularly annoying edge case</p>",
        "id": 133601842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536485217
    },
    {
        "content": "<p>Unfortunately that's how I got here -- I am trying to prove that the leading coefficient of <code>f*X^n</code> equals the leading coefficient of <code>f</code>and this is a goal that pops up along the way</p>",
        "id": 133602100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536485694
    },
    {
        "content": "<p>I just generalized <code>leading_coeff_X_pow</code> to a <code>comm_semiring</code> which should help with the lemma about <code>leading_coeff (f * X ^ n)</code>.</p>",
        "id": 133603221,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536488121
    },
    {
        "content": "<p>I'd love to be proved wrong, but I don't think this is the right direction. The problem I have is not with <code>leading_coeff_X_pow</code>, it's with <code>leading_coeff_mul</code> and friends. The <code>mul</code> version needs an integral domain so I can't use it (I need a result over a general <code>comm_ring</code>). The <code>mul'</code> version cannot say \"if the leading coefficients of <code>f</code> and <code>g</code> are non-zero then the leading coefficient of <code>fg</code> is the product\" because this is not true (if the product of the leading coefficients is zero then there's a problem), so it says \"if the leading coefficient of <code>f*g</code> is non-zero then...\". Because the leading coefficient of a polynomial is non-zero iff the polynomial is non-zero I need <em>exactly</em> that if <code>f</code> is non-zero then <code>f*X^n</code> is non-zero to apply this lemma. This was what led me to the question in the title. My instinct is that one should prove this by hand. I can't seem to find <code>coefficient f d</code>, the coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>X</mi><mi>d</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">d</span></span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>. Of course it's just <code>f d</code> but I think it needs some notation because it's a fundamental concept. With this notion (which I could PR no problem) we have <code>f = 0</code> iff all its coefficients are zero (no problem), and then what I want is <code>coefficient (f * X) (d + 1) = coefficient f d</code>, for which I am going to have to go beyond the interface and into the definition of multiplication of polynomials, and I guess this is the explict lemma that I am asking for advice on. Once I have this I I think I can do everything else.</p>",
        "id": 133604218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536489896
    },
    {
        "content": "<p>For <code>leading_coeff (f * X ^ n)</code> I would case on whether <code>f = 0</code>, if <code>f = 0</code> it's trivial, otherwise it's <code>leading_coeff_mul'</code> and you have to prove that <code>leading_coeff f * 1 != 0</code> which is easy because <code>f != 0</code> and <code>leading_coeff f = 0 iff f = 0</code></p>",
        "id": 133604373,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536490310
    },
    {
        "content": "<p>That relation <code>coefficient (f * X) (d + 1) = coefficient f d</code> seems basic and useful enough that it should be provided as a lemma in any case.</p>",
        "id": 133604414,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536490380
    },
    {
        "content": "<p>Or the same for <code>f * X^n</code>.</p>",
        "id": 133604419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536490389
    },
    {
        "content": "<p>Johannes was talking about some way of representing polynomial as <code>C a + X * (C b + X * (...))</code>, which might give some more general strategies for dealing with this, because I do agree it is annoying at the moment.</p>",
        "id": 133604423,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536490434
    },
    {
        "content": "<p>It might just be a case of people getting stuck and proving millions of lemmas that I didn't think of like <code>(f * X) (d + 1) = f d</code> until the interface is good.</p>",
        "id": 133604472,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536490508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> got it -- thanks.</p>",
        "id": 133604521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536490647
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_X_pow_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">zero_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">single_eq_C_mul_X</span> <span class=\"n\">α</span> <span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H3</span><span class=\"o\">],</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">one_mul</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_subset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H2</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span><span class=\"o\">:=</span><span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_of_ne</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_right_cancel</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H2</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133615540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536508134
    },
    {
        "content": "<p>So Kenny has proved the result in perhaps the \"correct\" way. But I am confused about these things more generally. I talked to Chris about these things today and he cannot see the point of adding <code>def : coeff f n := f n</code> because \"it is there already\". I don't like <code>f n</code> at all for the coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span> because it looks misleading (it looks like evaluation) and ultimately people will need theorems such as <code>coeff (f * X ^ n) (i + n) = coeff f i</code>. Now I guess one could argue that one could still put such theorems in and give them appropriate names, but just write them as <code>(f * X ^ n) (i + n) = f i</code>. I do trust Chris in general but on the other hand I feel like making a good interface is important. Does anyone have any input on this? I feel it's a bit like making <code>set X = X -&gt; Prop</code> and then arguing that you don't need <code>mem</code> because \"it is there already\".</p>",
        "id": 133683986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536608253
    },
    {
        "content": "<p>I completely agree with you that <code>f n</code> looks very <del>evil</del>eval.</p>",
        "id": 133684055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536608334
    },
    {
        "content": "<p>Maybe we should change the <code>has_coe_to_fun</code> to evaluation, and use <code>coeff</code> for coefficients.</p>",
        "id": 133684380,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536608750
    },
    {
        "content": "<p>In fact, I have even wondered if we could set up some coercion to turn <code>f x</code> into the evaluation of <code>f</code> at <code>x</code>. But maybe that is also very confusing. I don't know.</p>",
        "id": 133684430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536608768
    },
    {
        "content": "<p>In general I wouldn't mind having <code>coeff n f</code> for the <code>n</code>th coefficient of <code>f</code>.</p>",
        "id": 133684444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536608796
    },
    {
        "content": "<p>I agree that it is part of my \"mental\" interface to polynomials. After all \"polynomials\" are just some gadgets that float around. They aren't functions on <code>nat</code>. But you can somehow access their coefficients.</p>",
        "id": 133684551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536608920
    },
    {
        "content": "<p>Kenny can you prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_X_coeff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>in a similar way?</p>",
        "id": 133684552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536608921
    },
    {
        "content": "<p>sure</p>",
        "id": 133684651,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536609023
    },
    {
        "content": "<p>in fact that's what I did at first</p>",
        "id": 133684657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536609031
    },
    {
        "content": "<p>and then I realized that I can generalize it</p>",
        "id": 133684658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536609035
    },
    {
        "content": "<p>and prove your theorem directly</p>",
        "id": 133684662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536609042
    },
    {
        "content": "<p>I'm okay with using <code>f x</code> for evaluation instead of coefficient extraction, but in my experience <code>eval</code> is less useful than I would have expected. Usually you actually need <code>eval2</code> since the polynomial actually lives in a different scalar ring than the one you are evaluating into</p>",
        "id": 133684862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536609260
    },
    {
        "content": "<p>i.e. talking about the complex roots of an integer polynomial</p>",
        "id": 133684881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536609288
    },
    {
        "content": "<p>Is there a reason not to make the coercion use <code>eval2</code> then?</p>",
        "id": 133684993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536609418
    },
    {
        "content": "<p>That's a good point. In practice there will be a canonical ring hom floating around that you want to plug into <code>eval2</code>. But I guess this is hard to put into Lean.</p>",
        "id": 133684996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536609422
    },
    {
        "content": "<p>oh, you need the ring hom, I see</p>",
        "id": 133685003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536609434
    },
    {
        "content": "<p>right</p>",
        "id": 133685007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536609437
    },
    {
        "content": "<p>well, if the target ring is an algebra over the ring of definition of the polynomial...</p>",
        "id": 133685024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536609475
    },
    {
        "content": "<p>Excuse me, semialgebra</p>",
        "id": 133685065,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536609493
    },
    {
        "content": "<p>I'm thinking of things like P is a polynomial with integer coefficients, and then in Z[X, Y] I want to state that X - Y divides P(X) - P(Y)</p>",
        "id": 133685128,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536609552
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/subject/Perfectoid.20spaces/near/133304087\" title=\"#narrow/stream/116395-maths/subject/Perfectoid.20spaces/near/133304087\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/Perfectoid.20spaces/near/133304087</a></p>",
        "id": 133685267,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536609683
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/polynomial.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/polynomial.lean\">sounds like something I wrote</a></p>",
        "id": 133685272,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536609691
    },
    {
        "content": "<p><code>eval' R A x f</code> is perhaps not quite as beautiful as the <code>f x</code> I had in mind, but otherwise yes exactly this.</p>",
        "id": 133685601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536610009
    },
    {
        "content": "<p>Were there class inference problems with <code>R</code> and <code>A</code>?</p>",
        "id": 133685627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536610061
    },
    {
        "content": "<p>I forgot</p>",
        "id": 133686431,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536610892
    },
    {
        "content": "<p>I don't know if this will cause troubles</p>",
        "id": 133686435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536610898
    },
    {
        "content": "<p>I don't care about the coercion to fun, I'm just concerned that we don't have a good interface for coefficients. Is there a problem with adding <code>coeff f n</code> and using it to state lemmas and making it the \"official\" interface to access coefficients?</p>",
        "id": 133687008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536611450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_X_coeff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">try_for</span> <span class=\"mi\">400</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">h1</span><span class=\"o\">)],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133688234,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536612844
    },
    {
        "content": "<p>400 ms</p>",
        "id": 133688239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536612847
    },
    {
        "content": "<p>by the way, the <code>try_for</code> is only for debugging, you don't need to leave it in finished proofs</p>",
        "id": 133688313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536612923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_X_coeff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">try_for</span> <span class=\"mi\">300</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">],</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">h1</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133688414,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613023
    },
    {
        "content": "<p>300 ms, shorter and faster</p>",
        "id": 133688422,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613029
    },
    {
        "content": "<p>(remember to remove the <code>try_for</code> when you copy)</p>",
        "id": 133688439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is <code>rw</code> faster or <code>exact</code> faster, in general?</p>",
        "id": 133688699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613267
    },
    {
        "content": "<p>this is a silly question</p>",
        "id": 133688714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536613286
    },
    {
        "content": "<p>it depends on a thousand and one factors</p>",
        "id": 133688721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536613299
    },
    {
        "content": "<p>ok, then let's be specific</p>",
        "id": 133688735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613320
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_X_coeff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">try_for</span> <span class=\"mi\">400</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">],</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">((</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n      <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133688774,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613324
    },
    {
        "content": "<p>why is this slower than the previous one?</p>",
        "id": 133688787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613332
    },
    {
        "content": "<p>the answer is \"try it and find out\"</p>",
        "id": 133688793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536613339
    },
    {
        "content": "<p>there are particular things that can happen that can cause a slowdown, but I don't know if I can account for each millisecond</p>",
        "id": 133688824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536613385
    },
    {
        "content": "<p>ok seriously it can be as fast as 300 ms as long as I use <code>rw</code> instead of <code>refine</code>/<code>exact</code></p>",
        "id": 133689220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613770
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_X_coeff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">try_for</span> <span class=\"mi\">300</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">],</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133689223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613773
    },
    {
        "content": "<p>which is quite counter-intuitive</p>",
        "id": 133689228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536613778
    },
    {
        "content": "<p>I would guess the <code>(if_pos rfl).trans</code> spots are hard for the elaborator</p>",
        "id": 133689346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536613875
    },
    {
        "content": "<p>I need to thank the elaborator some time for his hard work</p>",
        "id": 133689494,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536614000
    },
    {
        "content": "<blockquote>\n<p>I don't care about the coercion to fun, I'm just concerned that we don't have a good interface for coefficients. Is there a problem with adding <code>coeff f n</code> and using it to state lemmas and making it the \"official\" interface to access coefficients?</p>\n</blockquote>\n<p>My only real opinion here is there should be exactly one way to write \"the nth coefficient of f\", so if we add <code>coeff</code> (which seems <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span>) then we should remove or change the coercion to fun instance.</p>",
        "id": 133727884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536668359
    },
    {
        "content": "<p>There are two ways to write \"x is an element of the set S\" (which has never caused me any problems). Oh, and two ways to write \"the integer corresponding to this natural number\" (which has).</p>",
        "id": 133729846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536670640
    }
]