[
    {
        "content": "<p>Can anyone comment on what's reasonable to expect from type class instance synthesis? This question might be to broad for a definitive answer, but here are some illustrative examples, for which I can be more specific.</p>\n<p>1. Lean can infer that a subinterval of the reals is a topological space<br>\n2. ... but it can't infer that 1/x is defined for x in a given subset of the reals<br>\n(1) Why and (2) why not?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span> <span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">two_interval_set</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- we get topological_space for free</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">continuous_id_on_tworeal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">two_interval_set</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">continuous_id</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- but we don&#39;t get has_div or has_one</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">continuous_1_over_x</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">continuous_subtype_mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">continuous_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">continuous_const</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">continuous_inv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162514939,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554377030
    },
    {
        "content": "<p>Error for the second theorem:</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nx : ↥{r : ℝ | r ≠ 0}\n⊢ has_div ↥{r : ℝ | r ≠ 0}\nfailed to synthesize type class instance for\nx : ↥{r : ℝ | r ≠ 0}\n⊢ has_one ↥{r : ℝ | r ≠ 0}\n</pre></div>",
        "id": 162515001,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554377068
    },
    {
        "content": "<p>The problem is that Lean doesn't know what to do with the <code>1/x</code>.</p>",
        "id": 162515129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554377169
    },
    {
        "content": "<p>If you tell it to view <code>1</code> and/or <code>x</code> as a real number, then you might have more luck.</p>",
        "id": 162515147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554377197
    },
    {
        "content": "<p>In particular, it doesn't know how to figure out the codomain of your function (let alone a topology on the codomain).</p>",
        "id": 162515154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554377223
    },
    {
        "content": "<p>Try writing <code>(1 : ℝ)</code> or <code>(x : ℝ)</code>.</p>",
        "id": 162515174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554377244
    },
    {
        "content": "<p>OK, interesting... that got past the initial error.</p>",
        "id": 162515187,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554377261
    },
    {
        "content": "<p>Viz., this proof works.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">continuous_1_over_x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">continuous_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">continuous_const</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">continuous_inv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162515296,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554377341
    },
    {
        "content": "<p>That surpises me. I didn't expect the <code>mul const _</code></p>",
        "id": 162515402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554377415
    },
    {
        "content": "<p>I'd expect something like <code>continuous.comp continuous_inv continuous_subtype_val</code></p>",
        "id": 162515416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554377445
    },
    {
        "content": "<p>Maybe this is more natural.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">continuous_1_over_x&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div_eq_inv</span><span class=\"o\">],</span>\n<span class=\"n\">refine</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">continuous_inv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162515840,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554377851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122022\">@Joseph Corneli</span>  I guess you know about the version in the library?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">continuous_inv&#39;</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">:{</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_iff_continuous_at</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_iff_continuous_at</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">continuous_subtype_val</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">tendsto_inv</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 162515970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554377983
    },
    {
        "content": "<p>I suspect I did see it at one point, yes!  It's interesting that writing <code>a.val⁻¹</code> escapes the problem of defining the codomain.</p>",
        "id": 162516115,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554378095
    },
    {
        "content": "<p>That is because Lean knows exactly where <code>a.val</code> lives.</p>",
        "id": 162516178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554378130
    },
    {
        "content": "<p>But why doesn't it know where <code>x</code> lives, in my example?</p>",
        "id": 162516199,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554378163
    },
    {
        "content": "<p>It also knows exactly where your <code>x</code> lives, but it lives in a space on which division has not been defined.</p>",
        "id": 162516202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554378165
    },
    {
        "content": "<p>Writing <code>(x : ℝ)</code> means that Lean will silently turn your <code>x</code> into <code>x.val</code>.</p>",
        "id": 162516235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554378209
    },
    {
        "content": "<p>Similarly, <code>1</code> can live in any type with a <code>has_one</code> instance. But if you write <code>(1 : ℝ)</code> it figures out which Type you want <code>1</code> to live in.</p>",
        "id": 162516303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554378252
    },
    {
        "content": "<p>You could of course define a topology on <code>units ℝ</code>, and prove that inversion is continuous there.</p>",
        "id": 162516336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554378295
    },
    {
        "content": "<p>That's a different theorem from the one you just proved.</p>",
        "id": 162516357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554378306
    },
    {
        "content": "<p>OK, I think the key take-away for me is that <code>x</code> and <code>x.val</code> are different, which I <em>might</em> have picked up on from some of the other examples I was looking at, but didn't.  Thanks!</p>",
        "id": 162516540,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554378429
    },
    {
        "content": "<p>One lives in the subtype, the other in the ambient type.</p>",
        "id": 162516671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554378495
    }
]