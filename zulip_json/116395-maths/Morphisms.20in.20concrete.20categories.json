[
    {
        "content": "<p>I don't understand how to work with concrete categories. Is there some standard way of saying \"take this bundled homomorphism and turn it into a morphism in the corresponding concrete category\"? For example, the following does not work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Group</span><span class=\"bp\">.</span><span class=\"n\">preadditive</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span><span class=\"bp\">.</span><span class=\"n\">kernels</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddCommGroup</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">kernel_fork</span> <span class=\"o\">:</span> <span class=\"n\">kernel_fork</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">kernel_fork</span><span class=\"bp\">.</span><span class=\"n\">of_ι</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">AddCommGroup</span>\n</code></pre></div>\n\n\n<p>The error is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">kernel_fork</span><span class=\"bp\">.</span><span class=\"n\">of_ι</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n<span class=\"n\">term</span>\n  <span class=\"o\">(</span><span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"err\">↥</span><span class=\"n\">G</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span>\n</code></pre></div>\n\n\n<p>One way to fix this is the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Group</span><span class=\"bp\">.</span><span class=\"n\">preadditive</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span><span class=\"bp\">.</span><span class=\"n\">kernels</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddCommGroup</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">magic</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">G</span> <span class=\"err\">⟶</span> <span class=\"n\">of</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">kernel_fork</span> <span class=\"o\">:</span> <span class=\"n\">kernel_fork</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">kernel_fork</span><span class=\"bp\">.</span><span class=\"n\">of_ι</span> <span class=\"o\">(</span><span class=\"n\">magic</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">)</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">AddCommGroup</span>\n</code></pre></div>\n\n\n<p>Is this the intended thing to do in this situation? Does the function <code>magic</code> already exist somewhere in the setup for bundled categories?</p>",
        "id": 204671376,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595427473
    },
    {
        "content": "<p>Ah, it looks like this exists for the category <code>Type</code> under the name <code>category_theory.as_hom</code>. Should this exist for all concrete categories?</p>",
        "id": 204671752,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595427624
    },
    {
        "content": "<p>hmm... I'm used to this working better \"out of the box\"... Does a type annotation help?</p>",
        "id": 204674093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595428614
    },
    {
        "content": "<p>I'd be happy to hear results of attempting to generalise <code>as_hom</code> (or just provide one for each?)</p>",
        "id": 204674181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595428651
    },
    {
        "content": "<p>I think there's yet-another-up-arrow notation defined for it, but I've barely used it.</p>",
        "id": 204674218,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595428665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Morphisms.20in.20concrete.20categories/near/204674093\">said</a>:</p>\n<blockquote>\n<p>hmm... I'm used to this working better \"out of the box\"... Does a type annotation help?</p>\n</blockquote>\n<p>I talked to Sebastian Ullrich about this a few months ago in the context of my Bachelor's thesis and he explained to me that type annotations do not help in this particular situation.</p>",
        "id": 204674473,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595428773
    },
    {
        "content": "<p>Okay, I guess we better see how polymorphic we can make that hook-up-arrow.</p>",
        "id": 204674920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595428957
    }
]