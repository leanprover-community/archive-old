[
    {
        "content": "<p>Is there a transcript of the rationale behind the design decisions of the category theory part? Specifically, I'd like to know what were the pros and cons of defining <code>category</code> as a type class versus as a structure.</p>",
        "id": 154133811,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546358598
    },
    {
        "content": "<p>I guess one of the big pros of using a type class is that Lean will do more work for you... more automation. And the category theory tries to maximize automation as much as possible.<br>\n(There is still a lot more to be done, and in fact more has been done in Scott's repositories. Quite often you will see proof obligations in the category-lib written out explicitly that are transparent in Scott's repos because he has better automation than mathlib.)</p>",
        "id": 154136146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546363734
    },
    {
        "content": "<p>The main pro is it lets you write <code>a ‚ü∂ b</code></p>",
        "id": 154137154,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546365727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That's a good point. At the same time, that's also a downside because this notation does not tell you which category you're talking of and, I don't know if it's the corner of category theory that I'm in but it seems to be often relevant to distinguish.</p>",
        "id": 154138026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546367528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Can you give me examples of automation that are made possible that way?</p>",
        "id": 154138030,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546367553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Maybe it is not so much automation as it is brevity. Now you don't have to feed Lean the category structure when writing down functors or limits (or hom-sets).</p>",
        "id": 154138082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546367664
    },
    {
        "content": "<p>Are you saying that you often have multiple category structures on the same type?</p>",
        "id": 154138085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546367695
    },
    {
        "content": "<p>You can always use <code>@category.hom</code> explicitly but it might be more convenient (or not) to create synonyms of the underlying type for the different category structures</p>",
        "id": 154138484,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546368530
    },
    {
        "content": "<p>Yes. Often might be over stating it as I'm a very fresh category noob. Let's say I'm seeing a repetition in the proofs I find the hardest and this confusion contributes to it</p>",
        "id": 154138486,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546368535
    },
    {
        "content": "<p>But Johan, I'm not suggesting that you write <code>functor C ùíû D ùíü</code>; rather I'd let <code>ùíû</code> and <code>ùíü</code> stand for both the carrier type and the data+proofs by using <code>has_coe_to_sort</code> (please don't kill me <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, I know you're sick of coercions but maybe this time ...)</p>",
        "id": 154138563,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546368699
    },
    {
        "content": "<blockquote>\n<p>You can always use <code>@category.hom</code> explicitly but it might be more convenient (or not) to create synonyms of the underlying type for the different category structures</p>\n</blockquote>\n<p>Maybe you're right. I could write a reducible definition so that I don't have to feed both the type and the instance. It does not make up for the other shortcoming of type classes though: with <code>category.{u}</code>, inference is often hindered.</p>",
        "id": 154138657,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546368865
    },
    {
        "content": "<p><code>small_category</code> was supposed to help with that, but I guess it doesn't get used much in favor of more generality</p>",
        "id": 154138672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546368944
    },
    {
        "content": "<p>I thought so. That's too bad!</p>",
        "id": 154138754,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546369072
    },
    {
        "content": "<blockquote>\n<p>But Johan, I'm not suggesting that you write <code>functor C ùíû D ùíü</code>; rather I'd let <code>ùíû</code> and <code>ùíü</code> stand for both the carrier type and the data+proofs by using <code>has_coe_to_sort</code> (please don't kill me <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, I know you're sick of coercions but maybe this time ...)</p>\n</blockquote>\n<p>This sounds like bundled vs unbundled categories (e.g. <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.1/src/category_theory/bundled.lean\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.1/src/category_theory/bundled.lean\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.1/src/category_theory/bundled.lean</a>). I'm not sure whether bundled categories were ever considered as the primary interface. It seems like it could be a viable option. It's possible that Scott just chose to use unbundled ones on the basis that other structures (groups, etc.) are unbundled.</p>",
        "id": 154138799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546369108
    },
    {
        "content": "<p>Instead of a reducible type, you could also create a <code>local abbreviation</code> for <code>@category.hom</code>, right?</p>",
        "id": 154138871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546369223
    },
    {
        "content": "<p>I didn't know you could make abbreviation local. Is that useful?</p>",
        "id": 154139060,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546369595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That looks good! I might steal it for myself. Do you see a downside to having the coercion?</p>",
        "id": 154139071,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546369628
    },
    {
        "content": "<p>Like at lines 22-23?</p>",
        "id": 154139079,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546369657
    },
    {
        "content": "<p>To be honest, I've hardly used this at all. I was going to prove that Cat has colimits, but I didn't get very far.</p>",
        "id": 154139082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546369679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I think they have <code>tspace</code> as abbreviation for <code>@topological_space</code> in the <code>topological_space.lean</code> file.</p>",
        "id": 154139126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546369706
    },
    {
        "content": "<p>there's some <code>local notation `cont` := @continuous _ _</code> I think</p>",
        "id": 154139182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546369822
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>git grep tspace\nanalysis/topology/continuity.lean:local notation `tspace` := topological_space\n</pre></div>",
        "id": 154139194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546369874
    },
    {
        "content": "<p>So my memory partly failed me.</p>",
        "id": 154139196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546369894
    },
    {
        "content": "<p>Ah! Ok! It's a local notation, not an an abbreviation</p>",
        "id": 154139198,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546369902
    },
    {
        "content": "<p>Right... (I don't even know the difference...)</p>",
        "id": 154139243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546369925
    },
    {
        "content": "<p>the difference is nobody knows what <code>abbreviation</code> does <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 154139249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546369940
    },
    {
        "content": "<p>Coercions tend to break down once you have implicit parameters inside the term being coerced that Lean needs to infer.</p>",
        "id": 154139267,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546369990
    },
    {
        "content": "<p>Haha! Abbreviation is sometimes useful but if you use it wrong it's pretty annoying because it doesn't come with equations and you can decide to unfold it. And yet, it's not notation because it is represented in the syntax tree, it has a type, etc</p>",
        "id": 154139279,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546370034
    },
    {
        "content": "<p>I've seen that, it's true. I hear coercion used to be better in Lean 2.</p>",
        "id": 154139323,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546370065
    },
    {
        "content": "<p>Maybe an example would be if we had <code>over X : Cat</code>, where <code>X : C</code> and <code>C : Cat</code>, then in <code>A : over X</code>, Lean might play dumb and pretend not to be able to figure out what <code>C</code> is</p>",
        "id": 154139330,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546370096
    },
    {
        "content": "<p>Did it happen with this example?</p>",
        "id": 154139386,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546370164
    },
    {
        "content": "<p>This is just hypothetical because I never got as far as doing things like that with bundled categories</p>",
        "id": 154139399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546370201
    },
    {
        "content": "<p>I guess one could test with something like <code>def over {C : Cat} (X : C) : Cat := C</code> (not the right definition, but it shouldn't matter) and then try to use the coercion</p>",
        "id": 154139415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546370251
    },
    {
        "content": "<p>It also might only fail when Lean needs to use information from outside the thing being coerced to infer implicit arguments inside it--not sure</p>",
        "id": 154139465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546370326
    },
    {
        "content": "<p>I mostly ran into trouble when using coercion to function types and never with coerce to sort. And one reason I would run into trouble was that I coerced to a polymorphic function type and I needed to infer some of the type parameters and Lean would just give up</p>",
        "id": 154139611,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546370576
    },
    {
        "content": "<p>I think I'll run an experiment with reformulating mathlib that way and see how difficult it is</p>",
        "id": 154139820,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546370892
    },
    {
        "content": "<p>Yeah, I can't remember having any issues with coercions to sort either</p>",
        "id": 154139854,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546370993
    },
    {
        "content": "<p>I just had a quick look and the following works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">cat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"n\">cat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Hom</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">_</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">inst</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Hom</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 154140187,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546371494
    },
    {
        "content": "<p>And then I can define the following notation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"err\">‚ü∂</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">c</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Hom</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"c1\">-- x ‚ü∂[C] y : Type v</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">‚ü∂</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Hom</span> <span class=\"bp\">_</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"c1\">-- x ‚ü∂ y : Type v</span>\n</pre></div>",
        "id": 154140275,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546371685
    },
    {
        "content": "<p>A bonus is that we can now give the category of types the correct name, namely <strong>Set</strong></p>",
        "id": 154140405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546371932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Don't you mean to make the argument <code>C</code> to <code>Hom</code> <em>explicit</em>?</p>",
        "id": 154141701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546374129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes you're right! I changed it in my file and didn't bother fixing it here but it does matter you're right</p>",
        "id": 154141723,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546374194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Wouldn't you define <em>Set</em> using <code>set_theory</code> instead?</p>",
        "id": 154141731,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546374240
    },
    {
        "content": "<p>Nope!</p>",
        "id": 154142219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546375060
    },
    {
        "content": "<p>It would be messy, and equivalent anyways</p>",
        "id": 154142273,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546375118
    },
    {
        "content": "<p><code>set_theory</code> sets have notions like global membership/subset predicates, which aren't relevant to Set</p>",
        "id": 154142345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546375265
    },
    {
        "content": "<p>Oh! That simplifies a lot! I was trying to understand pushouts and pullbacks and on <a href=\"http://ncatlab.org\" target=\"_blank\" title=\"http://ncatlab.org\">ncatlab.org</a>, they refer to Set a lot so I kind of pulled back from them</p>",
        "id": 154142459,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546375490
    },
    {
        "content": "<p>The dictionary for reading mathematics is <code>Type</code> = set, and <code>set</code> = subset</p>",
        "id": 154142511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546375578
    },
    {
        "content": "<p>(outside of set theory of course)</p>",
        "id": 154142514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546375595
    },
    {
        "content": "<p>Ooooh</p>",
        "id": 154142524,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546375632
    }
]