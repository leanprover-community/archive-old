[
    {
        "content": "<p>Here's the beginning of the class instances trace:</p>\n<div class=\"codehilite\"><pre><span></span><code>[class_instances]class-instance resolution trace\n[class_instances] (0) ?x_0 : @preserves_colimit (@over C _inst_1 Z) (@over.category C _inst_1 Z) (@over C _inst_1 Y) (@over.category C _inst_1 Y) J\n  _inst_2\n  K\n  F := @limits.comp_preserves_colimit ?x_1 ?x_2 ?x_3 ?x_4 ?x_5 ?x_6 ?x_7 ?x_8 ?x_9 ?x_10 ?x_11 ?x_12 ?x_13\nfailed is_def_eq\n[class_instances] (0) ?x_0 : @preserves_colimit (@over C _inst_1 Z) (@over.category C _inst_1 Z) (@over C _inst_1 Y) (@over.category C _inst_1 Y) J\n  _inst_2\n  K\n  F := @category_theory.preserves_colimit_of_creates_colimit_and_has_colimit ?x_14 ?x_15 ?x_16 ?x_17 ?x_18 ?x_19 ?x_20 ?x_21\n  ?x_22\n  ?x_23\n[class_instances] (1) ?x_23 : @has_colimit J _inst_2 (@over C _inst_1 Y) (@over.category C _inst_1 Y) (K ⋙ F) := @adjunction.has_colimit_comp_equivalence ?x_24 ?x_25 ?x_26 ?x_27 ?x_28 ?x_29 ?x_30 ?x_31 ?x_32 ?x_33\n[class_instances] (2) ?x_33 : @has_colimit J _inst_2 (@over C _inst_1 Z) (@over.category C _inst_1 Z) K := @adjunction.has_colimit_comp_equivalence ?x_34 ?x_35 ?x_36 ?x_37 ?x_38 ?x_39 ?x_40 ?x_41 ?x_42 ?x_43\nfailed is_def_eq\n[class_instances] (2) ?x_33 : @has_colimit J _inst_2 (@over C _inst_1 Z) (@over.category C _inst_1 Z) K := @over.has_colimit ?x_44 ?x_45 ?x_46 ?x_47 ?x_48 ?x_49 ?x_50\n[class_instances] (3) ?x_50 : @has_colimit J _inst_2 C _inst_1 (K ⋙ @over.forget C _inst_1 Z) := @adjunction.has_colimit_comp_equivalence ?x_51 ?x_52 ?x_53 ?x_54 ?x_55 ?x_56 ?x_57 ?x_58 ?x_59 ?x_60\n[class_instances] (4) ?x_60 : @has_colimit J _inst_2 (@over C _inst_1 Z) (@over.category C _inst_1 Z) K := @adjunction.has_colimit_comp_equivalence ?x_61 ?x_62 ?x_63 ?x_64 ?x_65 ?x_66 ?x_67 ?x_68 ?x_69 ?x_70\nfailed is_def_eq\n[class_instances] (4) ?x_60 : @has_colimit J _inst_2 (@over C _inst_1 Z) (@over.category C _inst_1 Z) K := @over.has_colimit ?x_71 ?x_72 ?x_73 ?x_74 ?x_75 ?x_76 ?x_77\n[class_instances] (5) ?x_77 : @has_colimit J _inst_2 C _inst_1 (K ⋙ @over.forget C _inst_1 Z) := @adjunction.has_colimit_comp_equivalence ?x_78 ?x_79 ?x_80 ?x_81 ?x_82 ?x_83 ?x_84 ?x_85 ?x_86 ?x_87\n[class_instances] (6) ?x_87 : @has_colimit J _inst_2 (@over C _inst_1 Z) (@over.category C _inst_1 Z) K := @adjunction.has_colimit_comp_equivalence ?x_88 ?x_89 ?x_90 ?x_91 ?x_92 ?x_93 ?x_94 ?x_95 ?x_96 ?x_97\n</code></pre></div>\n\n\n<p>and here's my mwe:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">over</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">⥤</span> <span class=\"n\">over</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">Z</span> <span class=\"err\">⥤</span> <span class=\"n\">over</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preserves_colimits</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preserves_colimit</span> <span class=\"n\">K</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>What do I change in mathlib to fix this?</p>",
        "id": 199562186,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591137435
    },
    {
        "content": "<p>Or should I locally mark adjunction.has_colimit_comp_equivalence as not an instance</p>",
        "id": 199562317,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591137556
    },
    {
        "content": "<p>The instance should be deleted (or made a def possibly)</p>",
        "id": 199563170,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591138319
    }
]