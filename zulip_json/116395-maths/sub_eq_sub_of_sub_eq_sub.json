[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p><code>abel</code> turns this into <code>a + gsmul (-1) b = c + gsmul (-1) d → a + gsmul (-1) c = b + gsmul (-1) d</code>. </p>\n<p>I can solve these things, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">eq_add_of_sub_eq</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>and I can even PR these things to mathlib if there is a need, but I am not sure whether this is the right thing to do. Is there automation which can solve these goals? Should I just be proving them as I need them in the middle of goals? Is the result there already?</p>",
        "id": 157519867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284054
    },
    {
        "content": "<p>so we're looking at the free Z-module &lt;a,b,c,d&gt; and asking whether (a-c)-(b-d) is in the submodule generated by (a-b)-(c-d) or something like that?</p>",
        "id": 157519975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284187
    },
    {
        "content": "<p>is there some normal form of Z matrices that might solve this?</p>",
        "id": 157519986,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284199
    },
    {
        "content": "<p>Right, this is the problem.</p>",
        "id": 157519987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284201
    },
    {
        "content": "<p>Smith normal form?</p>",
        "id": 157519997,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284222
    },
    {
        "content": "<p>I would not expect <code>ring</code> to solve this because it's not \"this is an identity in all commutative rings\", it's \"this element is in this ideal\"</p>",
        "id": 157520003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284233
    },
    {
        "content": "<p>sure</p>",
        "id": 157520065,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284255
    },
    {
        "content": "<p>So for rings we need Groebner bases, which we don't have, and would be a substantial project to write.</p>",
        "id": 157520067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284257
    },
    {
        "content": "<p>But for abelian groups I thought there was a chance it was easier / already there.</p>",
        "id": 157520081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284272
    },
    {
        "content": "<p>and this isn't \"this element is in this ideal\", it's \"this element is in this submodule\"</p>",
        "id": 157520146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284329
    },
    {
        "content": "<p>our problem is linear</p>",
        "id": 157520161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284331
    },
    {
        "content": "<p>exactly</p>",
        "id": 157520169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284337
    },
    {
        "content": "<p>No doubt the tactic I want has a name and is already in Coq.</p>",
        "id": 157520177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284356
    },
    {
        "content": "<p>I think we need to buy Coq</p>",
        "id": 157520238,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284390
    },
    {
        "content": "<p>I'm sure MS could buy it, I bet it's cheaper than Nokia</p>",
        "id": 157520253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284409
    },
    {
        "content": "<p>I think we need to port it.</p>",
        "id": 157520274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284443
    },
    {
        "content": "<p>you only need to be a nationwide university to pay for it</p>",
        "id": 157520280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549284451
    },
    {
        "content": "<p>But we also need the army of people whose job it is to port all the tactics</p>",
        "id": 157520339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549284490
    },
    {
        "content": "<p>those cost extra</p>",
        "id": 157520351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549284513
    },
    {
        "content": "<p>I think we need to convince Elon Musk to do something</p>",
        "id": 157520360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284538
    },
    {
        "content": "<p>For this theorem, sure you can add it if it's useful. I'd make it a biconditional</p>",
        "id": 157520364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549284543
    },
    {
        "content": "<p><del>(and add <code>@[simp]</code>)</del></p>",
        "id": 157520381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549284583
    },
    {
        "content": "<p>lolno</p>",
        "id": 157520384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549284590
    },
    {
        "content": "<p>another one which might be useful (and we might already have) is <code>a - b = c - d &lt;-&gt; a + d = b + c</code></p>",
        "id": 157520462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549284657
    },
    {
        "content": "<p><code>&lt;-&gt; a + d = c + b &lt;-&gt; d + a = b + c &lt;-&gt; ...</code></p>",
        "id": 157521371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549285709
    },
    {
        "content": "<blockquote>\n<p>I think we need to convince Elon Musk to do something</p>\n</blockquote>\n<p>At <a href=\"http://aitp-conference.org/2019/\" target=\"_blank\" title=\"http://aitp-conference.org/2019/\">AITP</a> I'm going to try and get DeepMind interested. I don't know why they're focussing on medicine, we have to get the basics right first.</p>",
        "id": 157521428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549285801
    },
    {
        "content": "<p>I thought they were focusing on starcraft now</p>",
        "id": 157521498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549285851
    },
    {
        "content": "<p>They finished that last week.</p>",
        "id": 157521508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549285864
    },
    {
        "content": "<p>lol my proof doesn't port. I wanted <code>r - ↑⌊r⌋ = s - ↑⌊s⌋ -&gt; r - s = ↑⌊r⌋ - ↑⌊s⌋</code> but when I rewrite the <code>r</code> it goes in the floor too :-)</p>",
        "id": 157521592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549285973
    }
]