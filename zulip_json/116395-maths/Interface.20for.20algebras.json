[
    {
        "content": "<p>I'm trying to finish off algebraic closure.</p>\n<p>The interface for algebras is really difficult to use as soon as there are a lot of fields involved. <br>\nRight now I have fields <code>K</code>, <code>L</code> and <code>M</code>, such that <code>algebra K L</code>, <code>algebra L M</code> and <code>algebra K M</code>, and the ring homs all commute, but not by definition.</p>\n<p>If want to turn an L-algebra hom from <code>M</code> into a K-algebra hom. Normally I would use <code>alg_hom.comap</code> to do this, but that would require the canonical homs to commute by definition, which they do not. </p>\n<p>I feel like maybe algebra should not be a class, and we should just use explicit homs.</p>",
        "id": 183741031,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576667913
    },
    {
        "content": "<p>Maybe related question: can anyone prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra_operations</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">â„¤</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 183742041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576668783
    },
    {
        "content": "<p>The solution to that is to redefine the Z-algebra instance so that they're defeq.</p>",
        "id": 183742253,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576668964
    },
    {
        "content": "<p>I have no idea how to do that. I know very little about that part of the library.</p>",
        "id": 183743730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576670481
    },
    {
        "content": "<blockquote>\n<p>I have no idea how to do that. I know very little about that part of the library.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1812\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1812\">#1812</a></p>",
        "id": 183744532,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576671336
    },
    {
        "content": "<blockquote>\n<p>I'm trying to finish off algebraic closure.</p>\n<p>The interface for algebras is really difficult to use as soon as there are a lot of fields involved. <br>\nRight now I have fields <code>K</code>, <code>L</code> and <code>M</code>, such that <code>algebra K L</code>, <code>algebra L M</code> and <code>algebra K M</code>, and the ring homs all commute, but not by definition.</p>\n<p>If want to turn an L-algebra hom from <code>M</code> into a K-algebra hom. Normally I would use <code>alg_hom.comap</code> to do this, but that would require the canonical homs to commute by definition, which they do not. </p>\n<p>I feel like maybe algebra should not be a class, and we should just use explicit homs.</p>\n</blockquote>\n<p>This has been a major pain point and major concern for me as well. I have no idea what the library would look like if we use explicit homs. But I fear it won't look like maths as I know it. Otoh, most lean code doesn't look like that anyway...</p>",
        "id": 183744978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576671697
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I have no idea how to do that. I know very little about that part of the library.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1812\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1812\">#1812</a></p>\n</blockquote>\n<p>Thanks, it's on the queue.</p>",
        "id": 183747296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576673849
    },
    {
        "content": "<p>And merged <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> [Thank you Travis, thank you Mergify]</p>",
        "id": 183747309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576673865
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I have no idea how to do that. I know very little about that part of the library.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1812\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1812\">#1812</a></p>\n</blockquote>\n<p>Thank you very much Chris!</p>",
        "id": 183748634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576674955
    }
]