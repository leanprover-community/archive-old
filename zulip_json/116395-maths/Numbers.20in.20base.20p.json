[
    {
        "content": "<p>I thought we had a little bit about numbers written in base <code>p</code>. But I can't find it. Do we have this?</p>",
        "id": 165962445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558162953
    },
    {
        "content": "<p>This rings a bell. Some Imperial undergraduates were working on this stuff, and also on convergence of base p expansions, perhaps for some arbitrary floor ring. But then exams hit and nothing got PR'ed. <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> was one of the key players, I know that.</p>",
        "id": 165967197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558171819
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/digits\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/digits\">https://github.com/leanprover-community/mathlib/tree/digits</a> is something; there was definitely more than that though.</p>",
        "id": 165967214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558171902
    },
    {
        "content": "<p>I have some more stuff, but I only locally. It contains some basic definitions of \"digits\" in  base b in a linearly ordered floor ring and some very elementary theorems.</p>",
        "id": 165970747,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1558178660
    },
    {
        "content": "<p>The only harder theorem I have proved so far is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">digit</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">floor</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">floor</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">approx</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"err\">⌊</span><span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"err\">⌋</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">digit</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 165970765,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1558178742
    },
    {
        "content": "<p>I was wondering if we can formalise (something math-equivalent to):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">multiplicity</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">multiplicity</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_nat_prime_iff</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">↔</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finite_nat_iff</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">gt_one</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_nat_choose_iff&#39;</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finite_nat_iff</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">choose_eq_zero_of_lt</span><span class=\"o\">,</span> <span class=\"n\">not_lt_zero</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">gt_one</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">choose_pos</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">multiplicity_choose_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ipos</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ile</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">((</span><span class=\"n\">finite_nat_choose_iff&#39;</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">ile</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">((</span><span class=\"n\">finite_nat_prime_iff</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">ipos</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 165971685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558180519
    },
    {
        "content": "<p>The underlying fact here is that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>a</mi></mrow><mrow><mi>b</mi></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow></mrow><annotation encoding=\"application/x-tex\">{a \\choose b}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.85em;\"></span><span class=\"strut bottom\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7453919999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span></span> is exactly divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>p</mi><mi>r</mi></msup></mrow><annotation encoding=\"application/x-tex\">p^r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span></span></span></span> is the number of borrows when calculating <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a - b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mbin\">−</span><span class=\"mord mathit\">b</span></span></span></span> in base <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span>. That might be a bit tricky to formalize.<br>\nAnother useful consequence of this is that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>gcd</mi><mo>{</mo><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi></mrow><mrow><mn>1</mn></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow><mo separator=\"true\">,</mo><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow><mo>}</mo></mrow><annotation encoding=\"application/x-tex\">\\gcd\\{{n \\choose 1}, {n \\choose 2}, \\ldots, {n \\choose n-1}\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.85em;\"></span><span class=\"strut bottom\" style=\"height:1.253331em;vertical-align:-0.403331em;\"></span><span class=\"base\"><span class=\"mop\"><span style=\"margin-right:0.01389em;\">g</span>cd</span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7453919999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7453919999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"mpunct\">,</span><span class=\"minner\">…</span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.745392em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"mclose\">}</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span></span></span></span> is a prime power <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><msup><mi>p</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">n = p^k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> and 1 otherwise.</p>",
        "id": 165972325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558181523
    },
    {
        "content": "<p>Right, so we need to formalise the number of borrows...</p>",
        "id": 165972543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558181909
    },
    {
        "content": "<p>Maybe the easiest way is not to talk about digits at all but just the floor of a over p^n</p>",
        "id": 165990737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558212683
    },
    {
        "content": "<p>Because that is what appears in the formula for the number of times p divides n! anyways</p>",
        "id": 165990742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558212718
    },
    {
        "content": "<p>And defining \"borrowing\" sounds more complicated than is really necessary for the things we want to prove</p>",
        "id": 165990792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558212775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Did you by any chance try anything in this direction?</p>",
        "id": 166385191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558634894
    },
    {
        "content": "<p>Haven't tried anything like this yet but I was on phone at the time and I could explain what I had in mind in more detail.</p>",
        "id": 166385242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558634945
    },
    {
        "content": "<p>Ok, that would also be nice (-;</p>",
        "id": 166385263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558634975
    },
    {
        "content": "<p>These facts ultimately rely on the calculation that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mclose\">!</span></span></span></span> exactly <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>≥</mo><mn>1</mn></mrow></msub><mo>⌊</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>i</mi></msup><mo>⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i \\ge 1} \\lfloor n/p^i \\rfloor</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.824664em;\"></span><span class=\"strut bottom\" style=\"height:1.2195529999999999em;vertical-align:-0.39488900000000005em;\"></span><span class=\"base\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">≥</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"></span></span></span></span></span><span class=\"mopen\">⌊</span><span class=\"mord mathit\">n</span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span></span></span></span> times. The borrowing/carrying formulation amounts to the observation that the sum a+b has a carry into the ith place exactly when <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⌊</mo><mo>(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>)</mo><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>i</mi></msup><mo>⌋</mo><mo>−</mo><mo>(</mo><mo>⌊</mo><mi>a</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>i</mi></msup><mo>⌋</mo><mo>+</mo><mo>⌊</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>i</mi></msup><mo>⌋</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor (a+b)/p^i \\rfloor - (\\lfloor a/p^i \\rfloor + \\lfloor b/p^i \\rfloor)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.824664em;\"></span><span class=\"strut bottom\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">⌊</span><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mbin\">+</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span><span class=\"mbin\">−</span><span class=\"mopen\">(</span><span class=\"mopen\">⌊</span><span class=\"mord mathit\">a</span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span><span class=\"mbin\">+</span><span class=\"mopen\">⌊</span><span class=\"mord mathit\">b</span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span><span class=\"mclose\">)</span></span></span></span> is one (and not zero).</p>",
        "id": 166385438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558635113
    },
    {
        "content": "<p>I think we already have a decent API for dealing with floors and divisibility so it's probably easier for formalization to avoid the language of carries/borrows and just work with these floor formulas directly.</p>",
        "id": 166385523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558635163
    },
    {
        "content": "<p>For example to find the power of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span> that divides <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><msup><mi>p</mi><mi>i</mi></msup></mrow><mrow><mi>k</mi></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow></mrow><annotation encoding=\"application/x-tex\">{p^i \\choose k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.0754599999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.4254699999999998em;vertical-align:-0.35001em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0754599999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9020857142857143em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span></span> we need to know how many of these floor differences are 1 and for that we can just write <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>=</mo><msup><mi>p</mi><mi>r</mi></msup><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">k = p^r a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span><span class=\"mord mathit\">a</span></span></span></span> and argue directly about which ones are 1 and which are 0.</p>",
        "id": 166385655,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558635269
    },
    {
        "content": "<p>Ok, sounds like a nice plan.</p>",
        "id": 166385865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558635472
    },
    {
        "content": "<p>Still, the proof of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo>(</mo><mi>n</mi><mo>!</mo><mo>)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>≥</mo><mn>1</mn></mrow></msub><mo>⌊</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>i</mi></msup><mo>⌋</mo></mrow><annotation encoding=\"application/x-tex\">v_p(n!) = \\sum_{i \\ge 1} \\lfloor n/p^i \\rfloor</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.824664em;\"></span><span class=\"strut bottom\" style=\"height:1.2195529999999999em;vertical-align:-0.39488900000000005em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">≥</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"></span></span></span></span></span><span class=\"mopen\">⌊</span><span class=\"mord mathit\">n</span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span></span></span></span> seems quite nontrivial to formalise.</p>",
        "id": 166386154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558635687
    },
    {
        "content": "<p>I'll start with reading the API on floors.</p>",
        "id": 166386174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558635709
    },
    {
        "content": "<p>I think I have that in metamath somewhere</p>",
        "id": 166407441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652040
    },
    {
        "content": "<p><a href=\"http://us2.metamath.org/mpeuni/pcfac.html\" target=\"_blank\" title=\"http://us2.metamath.org/mpeuni/pcfac.html\">http://us2.metamath.org/mpeuni/pcfac.html</a></p>",
        "id": 166407572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652141
    },
    {
        "content": "<p>Interesting to see how you wrote the infinite sum. When I was thinking about this earlier I wondered if it would be sensible to introduce a \"for all sufficiently large M\" quantifier. This is similar, but with an explicit bound</p>",
        "id": 166407786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558652322
    },
    {
        "content": "<p>it helps to know the sum actually stops at n</p>",
        "id": 166407914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652410
    },
    {
        "content": "<p>I guess you would want to know at a use site that the absent terms are all zero</p>",
        "id": 166407937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558652445
    },
    {
        "content": "<p>is there another reason the specific bound is important?</p>",
        "id": 166407955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558652459
    },
    {
        "content": "<p>it's short and a nat</p>",
        "id": 166407972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652470
    },
    {
        "content": "<p>I think that's the main reason</p>",
        "id": 166407975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652474
    },
    {
        "content": "<p>You could also define this function by well-founded recursion but I don't know if that's better for any purpose</p>",
        "id": 166407991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558652513
    },
    {
        "content": "<p><code>v n = n/p + v (n/p)</code></p>",
        "id": 166408045,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558652536
    },
    {
        "content": "<p>I don't think I ever need details about the higher terms later</p>",
        "id": 166408052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652551
    },
    {
        "content": "<p>(This came up as part of bertrand's postulate btw)</p>",
        "id": 166408067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652574
    },
    {
        "content": "<p>The fact that this adds up to the full <code>v_p(n!)</code> is enough</p>",
        "id": 166408085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652606
    },
    {
        "content": "<p>I was just working that out by following the \"used by\" links... \"central binomial coefficients? oh I know where this is going\"</p>",
        "id": 166408086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558652608
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> if you don't need this urgently, it could also make a good wishlist project</p>",
        "id": 166408161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558652653
    },
    {
        "content": "<p>I forget, how hard is the rest of the proof of Bertrand's postulate?</p>",
        "id": 166408261,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558652784
    },
    {
        "content": "<p>pretty elaborate</p>",
        "id": 166408400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652946
    },
    {
        "content": "<p>There is a nice proof on wikipedia that I put there when I was working on it</p>",
        "id": 166408420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558652986
    },
    {
        "content": "<p>(in maths it's only half a page but there is a lot of set up)</p>",
        "id": 166408486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558653021
    },
    {
        "content": "<p>crap, wikipedia deleted it</p>",
        "id": 166408597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558653161
    },
    {
        "content": "<p>well it's still pretty good <a href=\"https://en.wikipedia.org/wiki/Proof_of_Bertrand's_postulate\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Proof_of_Bertrand's_postulate\">https://en.wikipedia.org/wiki/Proof_of_Bertrand's_postulate</a></p>",
        "id": 166408638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558653215
    },
    {
        "content": "<p>apparently the section was too \"technical\"</p>",
        "id": 166411292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558655998
    },
    {
        "content": "<p>this is why being a formalizer in a room of mathematicians is hard</p>",
        "id": 166411372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558656031
    }
]