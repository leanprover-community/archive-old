[
    {
        "content": "<p>I want to show something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">has_inf</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">≥</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>No matter how I rephrase it, I get a </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n</code></pre></div>\n\n\n<p>error.<br>\nAny help is appreciated, thank you!</p>",
        "id": 202994097,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594044469
    },
    {
        "content": "<p><code>has_Inf (with_top ℤ)</code> is a proposition asserting that an operator <code>Inf</code> is defined on the subsets of <code>with_top ℤ</code>. So, Lean gets that you want to compare a proposition with the number <code>0</code>, and it doesn't understand what you mean.</p>",
        "id": 202994651,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594044732
    },
    {
        "content": "<p>Are you are trying to define a <code>has_Inf</code> instance on <code>{ x : with_top \\Z // x \\ge 0}</code>?</p>",
        "id": 202995477,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594045099
    },
    {
        "content": "<p>Note that <code>{ x : with_top \\Z // x \\ge 0}</code> is isomorphic to <code>enat</code>.</p>",
        "id": 202995601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594045160
    },
    {
        "content": "<p>I am actually looking at a subset of has_top \\Z \\geq 0 : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>and I want to show </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"n\">P</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_Inf</span> <span class=\"err\">↥</span><span class=\"n\">P</span>\n</code></pre></div>\n\n\n<p>using f, but I keep getting an error which asks for Inf to be defined on with_top \\Z, hence my question above.</p>",
        "id": 202996139,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594045411
    },
    {
        "content": "<p>Aha... Lean is not going to figure out that <code>↥P</code> is a type for which infima exist. It has never heard of this <code>P</code> before, so it know almost nothing about it.</p>",
        "id": 202996569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594045627
    },
    {
        "content": "<p>Note that arbitrary subsets of <code>with_top \\Z</code> do not have an Inf. So you might run into some complications since the type of <code>P</code> is <code>set (with_top \\Z)</code>.</p>",
        "id": 202996586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594045636
    },
    {
        "content": "<p>I see. Thank you!</p>",
        "id": 202997000,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594045831
    },
    {
        "content": "<p>This seems to be an equivalent definition that does not throw up any error(yet) :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"err\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>I hope it works!</p>",
        "id": 202997511,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594046079
    },
    {
        "content": "<p>So there is already <code>enat</code> and <code>with_top nat</code>. I wonder if it would just be easier to use them?</p>",
        "id": 203000122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594047429
    },
    {
        "content": "<p>What's the actual goal here? Are you trying to prove that a DVR is a PID?</p>",
        "id": 203000577,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594047626
    },
    {
        "content": "<p>I think the goal is that if we start with a discrete valuation field, then the stuff with valuation &gt;= 0 is a discrete valuation ring</p>",
        "id": 203001220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594047937
    },
    {
        "content": "<p>How did you end up defining a DVR?</p>",
        "id": 203001334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594047972
    },
    {
        "content": "<p>I think Ashvni went with Serre's definition: a PID with precisely one non-zero prime ideal.</p>",
        "id": 203001722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594048176
    },
    {
        "content": "<p>Yes, the local goal is to show that the ring obtained from a DVF is a PIR.</p>",
        "id": 203001910,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594048295
    },
    {
        "content": "<p>I see. I guess what I'm wondering is whether the easiest way to approach this is to prove that the set of elements with nonnegative valuation is a Euclidean domain, since you already have the valuation function as part of the definition! This should follow easily from the ultrametric inequality. I think mathlib knows that Euclidean domain implies PID.</p>",
        "id": 203002020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594048346
    },
    {
        "content": "<p>Oh that sounds like a great idea!</p>",
        "id": 203002439,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594048627
    }
]