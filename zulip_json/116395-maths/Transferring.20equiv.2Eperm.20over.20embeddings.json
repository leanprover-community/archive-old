[
    {
        "content": "<p>Is this a valid construction? If it is, a lot of code about transferring <code>perm</code>s to <code>option</code> or across <code>fin</code> can become much simpler since <code>some</code>, <code>fin.succ</code>, <code>fin.cast_succ</code>, <code>fin.succ_above</code> are all embeddings.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.sign</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.embedding.exists_unique</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">f.injective</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha'</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.embedding.exists_unique'</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f.exists_unique</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">finset.mem_univ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">hu</span> <span class=\"n\">a'</span> <span class=\"n\">ha'.right</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function.embedding.inv_of_mem_range</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.choose</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">finset.univ</span> <span class=\"o\">(</span><span class=\"n\">f.exists_unique'</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">function.embedding.left_inv_of_inv_of_mem_range</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f.inv_of_mem_range</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.choose_spec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">finset.univ</span> <span class=\"o\">(</span><span class=\"n\">f.exists_unique'</span> <span class=\"n\">hb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">function.embedding.right_inv_of_inv_of_mem_range</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.inv_of_mem_range</span> <span class=\"o\">(</span><span class=\"n\">set.mem_range_self</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.injective</span> <span class=\"o\">(</span><span class=\"n\">finset.choose_spec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">finset.univ</span>\n  <span class=\"o\">(</span><span class=\"n\">f.exists_unique'</span> <span class=\"o\">(</span><span class=\"n\">set.mem_range_self</span> <span class=\"n\">a</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv.perm.of_embedding</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">function.embedding</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n    <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">f.inv_of_mem_range</span> <span class=\"o\">(</span><span class=\"n\">set.mem_to_finset.mp</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n    <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">f.inv_of_mem_range</span> <span class=\"o\">(</span><span class=\"n\">set.mem_to_finset.mp</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"bp\">;</span>\n      <span class=\"n\">rwa</span> <span class=\"n\">dif_neg</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"bp\">;</span>\n      <span class=\"n\">rwa</span> <span class=\"n\">dif_neg</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222685944,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610608917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 222685997,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610608948
    },
    {
        "content": "<p>Does it make sense to introduce a bundled type for functions and their left inverse, as a stronger form of <code>embedding</code> but a weaker form of <code>equiv</code>?</p>",
        "id": 222693643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610615616
    },
    {
        "content": "<p>Or is that just a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_equiv\">docs#local_equiv</a>?</p>",
        "id": 222693707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610615647
    },
    {
        "content": "<p>Yeah, it's a <code>local_equiv</code> where the source is <code>univ</code> and the constraints become easy to satisfy from that. There's probably some relation here to functorial inductives and how some allow for \"retrieval\", like <code>option</code>, <code>list</code>, etc.</p>",
        "id": 222694137,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610615989
    },
    {
        "content": "<p>You think it's not worth it to provide a generic left-inverse for embeddings (when satisfying the fintype/deceq constraint)?</p>",
        "id": 222694281,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610616089
    },
    {
        "content": "<p>I think if we had the bundled type, then we could replace your left inverse with a promotion to that bundled type</p>",
        "id": 222695058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610616602
    },
    {
        "content": "<p>And that way we have just one <code>equiv.perm.of_left_invertible</code> that works for any construction of the bundled left inverse</p>",
        "id": 222695159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610616658
    },
    {
        "content": "<p>But the embedding itself, when over the fintype/deceq has a unique left inverse as it is. So are you saying have the bundled type without the constraint, and have a <code>def</code> that upgrades any embedding from/to fintype/deceq to the bundled type?</p>",
        "id": 222695315,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610616792
    },
    {
        "content": "<p>Of course, computationally, the provided inverse is terrible because it's O(N)</p>",
        "id": 222695353,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610616828
    },
    {
        "content": "<p>Yes, because that means that a computationally/ definitionally sensible inverse can be also be bundled manually</p>",
        "id": 222695631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610617052
    },
    {
        "content": "<p>Just like we have a way to upgrade <code>bijective</code> to an <code>equiv</code> today</p>",
        "id": 222695715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610617110
    },
    {
        "content": "<p>Maybe just require <code>(g) (hg : function.left_inverse g f_embed)</code>?</p>",
        "id": 222695862,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610617208
    },
    {
        "content": "<p>In fact, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.left_inverse.injective\">docs#function.left_inverse.injective</a></p>",
        "id": 222695951,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610617277
    },
    {
        "content": "<p>so <code>{g} {f} (h : function.left_inverse g f)</code> should be enough, since the injectivity of <code>f</code> that makes it an embedding is inferrable.</p>",
        "id": 222696146,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610617430
    },
    {
        "content": "<p>I'm suggesting that there might be value in bundling those three things eventually, but working with them separately is fine in the meantime.</p>",
        "id": 222701546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610620927
    },
    {
        "content": "<p>How would you phrase it for the left inverse of <code>some</code>?</p>",
        "id": 222701680,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610621025
    },
    {
        "content": "<p>Are you asking for a left-inverse of some? It's just <code>option.cases_on default id</code>, right, or maybe <code>option.get</code>?</p>",
        "id": 222702449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610621501
    }
]