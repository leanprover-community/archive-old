[
    {
        "content": "<p>Hello! I'm a professor of number theory and I'm having trouble proving that 2 does not divide 5. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I was expecting <code>dec_trivial</code> to work [EDIT : it works fine, I was just being an idiot]. I can do cases on the definition and then a painful case by case check but surely there's an easier way?</p>\n<p>[NB for newer users -- that <code>∣</code> sign is not <code>|</code> but actually <code>\\|</code>, I think to avoid confusion with set notation <code>{a : X | p a}</code> ]</p>",
        "id": 129828701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531853662
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"120469\">@Ellen Arlt</span> this is the last remaining case of your last lemma -- I just need to check that there are no 5-loops :-)</p>",
        "id": 129828724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531853710
    },
    {
        "content": "<p>Isn't this a case for <code>cooper</code>?</p>",
        "id": 129828943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531853983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129829812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531855134
    },
    {
        "content": "<p>Ok, this is scandal. Lean shouldn't need any help here.</p>",
        "id": 129829836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531855196
    },
    {
        "content": "<p>What are Jasmin's number theorists doing?!</p>",
        "id": 129829887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531855209
    },
    {
        "content": "<p>At least Lean knows what to do with a five lines proof which contains two name collisions.</p>",
        "id": 129829934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531855280
    },
    {
        "content": "<p>Actually you don't need to know any lemma name <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H&#39;</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129829998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531855358
    },
    {
        "content": "<p>Does Lean know that <code>a \\| b \\iff b % a = 0</code>?</p>",
        "id": 129830010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531855374
    },
    {
        "content": "<p>the name in the first version is Mario's sense of humor.</p>",
        "id": 129830022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531855390
    },
    {
        "content": "<p>Yes, that occurred to me (I wrote this Q and then closed my laptop and went for dinner). I guess the point is that <code>a \\| b</code> should be decidable, but if it isn't there's still a chance that Johan's lemma is known and that <code>a % b = c</code> is decidable</p>",
        "id": 129830042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531855441
    },
    {
        "content": "<p><code>example : ¬ 2 ∣ 5 := dec_trivial</code></p>",
        "id": 129830167,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855574
    },
    {
        "content": "<p>that works for you??</p>",
        "id": 129830174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531855585
    },
    {
        "content": "<p>yes</p>",
        "id": 129830177,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855593
    },
    {
        "content": "<p>something fishy's going on then</p>",
        "id": 129830181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531855606
    },
    {
        "content": "<p>Do you have <code>classical.prop_decidable</code> on?</p>",
        "id": 129830184,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855613
    },
    {
        "content": "<p>no</p>",
        "id": 129830185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531855620
    },
    {
        "content": "<p>are you not posting mwe's?</p>",
        "id": 129830198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531855640
    },
    {
        "content": "<p>I didn't think of checking Kevin was not running a prank.</p>",
        "id": 129830204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531855644
    },
    {
        "content": "<p>I didn't even import anything</p>",
        "id": 129830218,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855662
    },
    {
        "content": "<p>I'm just being an idiot maybe</p>",
        "id": 129830231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531855682
    },
    {
        "content": "<p>I wish that thing would be on by default. People should explicitly state that they want to be constructive if they want to... not vice versa!</p>",
        "id": 129830258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531855683
    },
    {
        "content": "<p>It doesn't even depend on mathlib!</p>",
        "id": 129830264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531855686
    },
    {
        "content": "<blockquote>\n<p>I'm just being an idiot maybe</p>\n</blockquote>\n<p>Don't blame yourself. Blame your Lean!</p>",
        "id": 129830289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531855743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> What error do you get?</p>",
        "id": 129830292,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855744
    },
    {
        "content": "<p>Occasionally imports can break type class inference.</p>",
        "id": 129830306,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855767
    },
    {
        "content": "<p>It works on my desktop but not on my laptop. Thanks Chris. I'll try and figure out what's going on. Sorry for wasting everyone's time.</p>",
        "id": 129830314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531855787
    },
    {
        "content": "<p>Does this need type class inference?</p>",
        "id": 129830318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531855794
    },
    {
        "content": "<p>Kevin, Lean is wasting your time</p>",
        "id": 129830365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531855806
    },
    {
        "content": "<p>It needs to find a <code>decidable</code> instance.</p>",
        "id": 129830400,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855864
    },
    {
        "content": "<p>(Also, I think you just showed that Lean is not a professor of number theory <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> )</p>",
        "id": 129830404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531855867
    },
    {
        "content": "<p>Did you use <code>∣</code> instead of <code>|</code>?</p>",
        "id": 129830410,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855882
    },
    {
        "content": "<p>I think that was the problem. You used the wrong vertical bar.</p>",
        "id": 129830486,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531855976
    },
    {
        "content": "<p>No, it was something far more stupid :-/</p>",
        "id": 129830583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531856139
    },
    {
        "content": "<p>I was in tactic mode and forgot to write <code>exact</code> :-/</p>",
        "id": 129830647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531856172
    },
    {
        "content": "<p>so I was the idiot after all. Apologies.</p>",
        "id": 129830656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531856181
    },
    {
        "content": "<p>At least I finished the thing I promised Ellen I'd do. Getting back to perfectoid stuff is now back to being <a href=\"https://github.com/leanprover/lean/issues/1\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1\">#1</a> Lean job.</p>",
        "id": 129830687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531856246
    },
    {
        "content": "<p>Thanks Chris!</p>",
        "id": 129830695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531856257
    },
    {
        "content": "<p>Funny how many people refer to this first Lean PR.</p>",
        "id": 129831289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531856970
    },
    {
        "content": "<blockquote>\n<p>the name in the first version is Mario's sense of humor.</p>\n</blockquote>\n<p>I am maligned, I tell ya - that name is from core, which doesn't even have my name in the author list</p>",
        "id": 129834281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531860284
    },
    {
        "content": "<p>Personally I prefer to just skip it, since it's just a fancy name for <code>id</code></p>",
        "id": 129834309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531860334
    },
    {
        "content": "<p>That's what I did in the second version</p>",
        "id": 129834374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531860381
    },
    {
        "content": "<p>Your PhD advisor's name in on top of that file, you must endorse it.</p>",
        "id": 129834431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531860477
    },
    {
        "content": "<p>It is the result of slavish adherence to the naming convention, so I can't exactly fault it</p>",
        "id": 129834588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531860658
    },
    {
        "content": "<p>but I usually get bored about halfway into a name like that and just stop writing</p>",
        "id": 129834608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531860685
    },
    {
        "content": "<p>it could be called <code>dvd_def</code></p>",
        "id": 129834658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531860725
    },
    {
        "content": "<p>not quite, it should be biconditional for that</p>",
        "id": 129834673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531860758
    },
    {
        "content": "<p>We should make a silly bet, and the loser open a PR to core replacing this lemma with <code>theorem dvd_def {a b : α} :  a ∣ b ↔ ∃ c, b = a * c := iff.rfl</code></p>",
        "id": 129834764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531860869
    },
    {
        "content": "<p>and Leo is the loser?</p>",
        "id": 129834813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531860952
    },
    {
        "content": "<p>By the way, after the prime 617 challenge (<a href=\"#narrow/stream/116395-maths/subject/prime.20617.20challenge/near/130449391\" title=\"#narrow/stream/116395-maths/subject/prime.20617.20challenge/near/130449391\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/prime.20617.20challenge/near/130449391</a>) the update to <code>norm_num</code> also supports divisibility queries like <code>¬ (2 ∣ 5)</code>, especially larger ones where <code>dec_trivial</code> is not reasonable</p>",
        "id": 130879591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533365057
    }
]