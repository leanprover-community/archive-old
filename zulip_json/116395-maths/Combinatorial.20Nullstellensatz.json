[
    {
        "content": "<p>Hi! I'm working on a proof of the Combinatorial Nullstellensatz:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">combinatorial_nullstellensatz</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_max</span> <span class=\"o\">:</span> <span class=\"n\">max_degree_monomial</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_card_S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>A possible way to define <code>max_degree_monomial</code> would be the following (is this definition reasonable?):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monomial_degree</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t.support</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">max_degree_monomial</span>  <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span> <span class=\"bp\">∧</span> <span class=\"n\">monomial_degree</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">total_degree</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I am following Alon's original paper which is available at <a href=\"http://www.math.tau.ac.il/~nogaa/PDFS/null2.pdf\">http://www.math.tau.ac.il/~nogaa/PDFS/null2.pdf</a></p>\n<p>Most of the machinery needed to prove this result is already on mathlib (e.g <code>polynomial.card_roots</code>, <code>mv_polynomial.fin_succ_equiv</code>).</p>\n<p>To complete the proof I still have to prove many smaller lemmas about <code>coeff</code>, <code>degree_of</code>, <code>total_degree</code>.</p>\n<p>For the moment I have a complete proof of Lemma 2.1 in Alon's paper which already seems something nice to have in Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- What is a reasonable name for this one?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma_2_1</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">degree_of</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>In order to prove this result I had to state and prove many lemmas about polynomials and mv_polynomials that seem useful, for example the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fin_succ_equiv_coeff_coeff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→₀</span>  <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">polynomial.coeff</span> <span class=\"o\">(</span><span class=\"n\">fin_succ_equiv</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">fin.finsupp.cons</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>It seems that <code>cons</code> and <code>tail</code> were not yet defined for maps <code>fin n →₀ ℕ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fin.finsupp.tail</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin.finsupp.cons</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→₀</span>  <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>If these are not already on mathlib, should I open a PR with <code>cons</code>, <code>tail</code> and their properties? I'm not sure where to put these.</p>",
        "id": 263624826,
        "sender_full_name": "Iván Sadofschi Costa",
        "timestamp": 1638558915
    },
    {
        "content": "<p>You probably have seen it but you should definitely check out <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/mv_polynomial/variables.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/mv_polynomial/variables.lean</a> if you haven't already.<br>\nIn <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/ring_theory/polynomial/homogenization.lean\">https://github.com/leanprover-community/flt-regular/blob/master/src/ring_theory/polynomial/homogenization.lean</a> I've been proving a lot of related things about the sum of leading terms, total degrees, supports, homogenizations etc. I'm now PRing this stuff to mathlib, but maybe some of it is useful for you already.</p>",
        "id": 263625732,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638559400
    },
    {
        "content": "<p>It seems a bit strange to talk about <code>fin n →₀  ℕ</code>, after all <code>fin n</code> is finite, and so finitely supported functions on <code>fin n</code> are just functions on <code>fin n</code>, can you rephrase things to be about functions on <code>fin n</code> instead, then maybe there will be more api there for you</p>",
        "id": 263626758,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638559884
    },
    {
        "content": "<p>We also tend to try and use general fintypes where possible rather than specializing to <code>fin n</code> for main results. Of course along the way it might be easier to deal with <code>fin n</code>, and then to prove the main result in general at the end by picking an equivalence between a finite type and <code>fin n</code>. But I'd definitely encourage you to see which of the lemmas are about <code>fin n</code> and which are about some general <code>fintype</code>.</p>",
        "id": 263627019,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638560009
    },
    {
        "content": "<p>Its really cool that you are working on this!</p>",
        "id": 263627170,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638560080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/Combinatorial.20Nullstellensatz/near/263625732\">said</a>:</p>\n<blockquote>\n<p>You probably have seen it but you should definitely check out <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/mv_polynomial/variables.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/mv_polynomial/variables.lean</a> if you haven't already.<br>\nIn <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/ring_theory/polynomial/homogenization.lean\">https://github.com/leanprover-community/flt-regular/blob/master/src/ring_theory/polynomial/homogenization.lean</a> I've been proving a lot of related things about the sum of leading terms, total degrees, supports, homogenizations etc. I'm now PRing this stuff to mathlib, but maybe some of it is useful for you already.</p>\n</blockquote>\n<p>Thanks, it seems that many of this will be useful here too!</p>",
        "id": 263628161,
        "sender_full_name": "Iván Sadofschi Costa",
        "timestamp": 1638560607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/Combinatorial.20Nullstellensatz/near/263626758\">said</a>:</p>\n<blockquote>\n<p>It seems a bit strange to talk about <code>fin n →₀  ℕ</code>, after all <code>fin n</code> is finite, and so finitely supported functions on <code>fin n</code> are just functions on <code>fin n</code>, can you rephrase things to be about functions on <code>fin n</code> instead, then maybe there will be more api there for you</p>\n</blockquote>\n<p>Yes, I agree that this is strange. I used <code>fin n</code> and <code>fin (n+1)</code> here following the definition of <code>fin_succ_equiv</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fin_succ_equiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This leads to considering maps <code>s:fin n →₀  ℕ</code> as the <code>X^s</code>. Is there a way to apply the usual <code>cons</code> and <code>tail</code> directly to these maps?</p>",
        "id": 263629462,
        "sender_full_name": "Iván Sadofschi Costa",
        "timestamp": 1638561220
    },
    {
        "content": "<p>I've finished the proof some days ago: <a href=\"https://github.com/isadofschi/combinatorial_nullstellensatz\">https://github.com/isadofschi/combinatorial_nullstellensatz</a><br>\nThere is a lot that I have to tidy before submitting the main results, but I'm happy that it works!<br>\nFor now I'm sending PR's with lemmas about <code>mv_polynomial</code>s.<br>\nMany results from <code>flt-regular</code> were useful in the proof. Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> for pointing me to <code>homogenization.lean</code>!</p>",
        "id": 265089316,
        "sender_full_name": "Iván Sadofschi Costa",
        "timestamp": 1639609612
    }
]