[
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">x,y\\in\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>2</mn><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>10003</mn></mrow><annotation encoding=\"application/x-tex\">x^2-2y^2=10003</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">3</span></span></span></span> then, because squares are 0 or 1 mod 4 and the RHS is 3 mod 4, we see that we must have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>≡</mo><msup><mi>y</mi><mn>2</mn></msup><mo>≡</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x^2\\equiv y^2\\equiv1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> mod 4 and hence both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> are 1 or 3 mod 4. I want the proof of this to go \"check all 16 cases mod 4; oh look, 12 of them don't work\". I've been using <code>interval_cases</code> to get break down to cases like <code>x % 4 = 2</code> and <code>y % 4 = 1</code> but then it's a bore showing that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>2</mn><msup><mi>y</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^2-2y^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is 2 mod 4. I really want to drop straight into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>4</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/4\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> and do all the arithmetic in there. Ideally in general I'd say \"consider this equation mod N\" (for some small N) and then end up with d&lt;=N^2 goals corresponding to all the possibilities of x and y mod N which satisfy the equation mod N. Is there a painless way of doing this without having to repeatedly apply <code>int.modeq.modeq_mul</code> etc?</p>",
        "id": 194061933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586970435
    },
    {
        "content": "<p>It seems like you should be able to apply <code>coe : int -&gt; zmod 4</code> and then <code>simp</code> it down to the leaves</p>",
        "id": 194064402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586971713
    },
    {
        "content": "<p>although you will have to do something extra to get <code>10003</code> to simplify to <code>3</code></p>",
        "id": 194064493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586971766
    },
    {
        "content": "<p>oh the number doesn't have to be big, I just wanted to stop people trying to come up with other methods.</p>",
        "id": 194064556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586971798
    },
    {
        "content": "<p>thank the lord that these are not natural numbers</p>",
        "id": 194064656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586971810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">123</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">x4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">y4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">x4</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y4</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">123</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>How do I get h4?</p>",
        "id": 194065039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586971859
    },
    {
        "content": "<p>it's not so much about the fact that they are big numbers but rather that we expect numerals to be reduced mod the base while simp only pushes the coe down</p>",
        "id": 194065096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586971884
    },
    {
        "content": "<p>I think Q1 is how to prove h4 from h, and Q2 is how to do the case split on the fintype.</p>",
        "id": 194065177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586971918
    },
    {
        "content": "<p>I think <code>simpa using congr_arg (coe : int -&gt; zmod 4) h</code></p>",
        "id": 194065353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586971983
    },
    {
        "content": "<p>for q2, you might be able to use dec_trivial</p>",
        "id": 194065515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586972054
    },
    {
        "content": "<p>if you revert <code>x4</code> and <code>y4</code></p>",
        "id": 194065540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586972068
    },
    {
        "content": "<p>Why is that not <code>exact_mod_cast h</code>?</p>",
        "id": 194065581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586972094
    },
    {
        "content": "<p>it probably is that too</p>",
        "id": 194065598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586972103
    },
    {
        "content": "<p>well, you still have to use <code>congr_arg</code> (or <code>apply_fun</code>) on <code>h</code></p>",
        "id": 194065635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586972124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">10003</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">cast_mod_int</span> <span class=\"mi\">4</span> <span class=\"mi\">10003</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10003</span> <span class=\"err\">%</span> <span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y4</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> revert x4 y4,</span>\n<span class=\"cm\">  exact dec_trivial -- why doesn&#39;t this work -/</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x4</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">y4</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">H</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- why doesn&#39;t this work</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194066104,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586972342
    },
    {
        "content": "<p>where are my decidable equalities on zmod 4</p>",
        "id": 194066122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586972352
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">10003</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">revert</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194066290,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586972419
    },
    {
        "content": "<p>oh, I misread the question</p>",
        "id": 194066352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586972446
    },
    {
        "content": "<p>I feel like there should be a way to combine <code>generalize</code> and <code>revert</code> in Alex's proof</p>",
        "id": 194066837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586972663
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">10003</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">%</span><span class=\"mi\">4</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"err\">%</span><span class=\"mi\">4</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"err\">%</span><span class=\"mi\">4</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span><span class=\"err\">%</span><span class=\"mi\">4</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">cast_mod_int</span> <span class=\"mi\">4</span> <span class=\"mi\">10003</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10003</span> <span class=\"err\">%</span> <span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">≡</span><span class=\"mi\">1</span><span class=\"o\">[</span><span class=\"n\">ZMOD</span><span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)]</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">≡</span><span class=\"mi\">3</span><span class=\"o\">[</span><span class=\"n\">ZMOD</span><span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)])</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">≡</span><span class=\"mi\">1</span><span class=\"o\">[</span><span class=\"n\">ZMOD</span><span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)]</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span><span class=\"bp\">≡</span><span class=\"mi\">3</span><span class=\"o\">[</span><span class=\"n\">ZMOD</span><span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)]),</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">4</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span> <span class=\"o\">},</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y4</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x4</span> <span class=\"n\">y4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194066975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586972737
    },
    {
        "content": "<p>Isn't <code>(x%4=1 ∨ x%4=3) ∧ (y%4=1 ∨ y%4=3)</code> a very complicated way of saying <code>x%2 = 1</code> and <code>y%2 = 1</code>?</p>",
        "id": 194203550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586973245
    },
    {
        "content": "<p>oh right</p>",
        "id": 194203750,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586973355
    },
    {
        "content": "<p>Yes but somehow it's an extra ingredient that x^2 mod 4 only depends on x mod 2.</p>",
        "id": 194203810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586973374
    },
    {
        "content": "<p>it looks like there is not much communication between different <code>zmod n</code>s</p>",
        "id": 194204623,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586973740
    },
    {
        "content": "<p>Sounds like a good starter project</p>",
        "id": 194204718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586973788
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zmod_communication</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">suffices</span> <span class=\"o\">((((</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">):</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">coe_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">coe_val_cast_int</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_mod_of_dvd</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 194206542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586974726
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zmod_communication</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">suffices</span> <span class=\"o\">((((</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">):</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">coe_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">coe_val_cast_int</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_mod_of_dvd</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">10003</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">%</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"err\">%</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">cast_mod_int</span> <span class=\"mi\">4</span> <span class=\"mi\">10003</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10003</span> <span class=\"err\">%</span> <span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span><span class=\"bp\">≡</span><span class=\"mi\">1</span><span class=\"o\">[</span><span class=\"n\">ZMOD</span><span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)]</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">≡</span><span class=\"mi\">1</span><span class=\"o\">[</span><span class=\"n\">ZMOD</span><span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℕ+</span><span class=\"o\">):</span><span class=\"bp\">ℕ</span><span class=\"o\">)],</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span> <span class=\"o\">},</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">zmod_communication</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span> <span class=\"c1\">-- you can make a tactic out of this</span>\n  <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y4</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x4</span> <span class=\"n\">y4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194206804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586974870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Your tactic is called norm_cast or push_cast</p>",
        "id": 194207924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586975409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do the kata about sum of cubes being square of sum of numbers on codewars and then see my solution</p>",
        "id": 194218294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586980245
    },
    {
        "content": "<p>oh wow the Lean translation is out</p>",
        "id": 194218511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586980336
    },
    {
        "content": "<p>I did it in Coq</p>",
        "id": 194218521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586980340
    },
    {
        "content": "<p>I think my solution is better than everyone else's</p>",
        "id": 194218632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586980413
    },
    {
        "content": "<p>Which is an extremely rare occurrence</p>",
        "id": 194218649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586980423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">10003</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">10003</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n<span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 194219197,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586980690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I translated my Coq solution into Lean and posted it</p>",
        "id": 194219394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586980782
    },
    {
        "content": "<p>wow, monadius learnt Lean?</p>",
        "id": 194219591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586980850
    },
    {
        "content": "<p>I don't have to fart around trying to get a 2 next to my sum from 1 to n, because it's now painless to work in the rationals because of push_cast</p>",
        "id": 194220617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586981305
    },
    {
        "content": "<p>Thanks for all these ideas. I'm doing real life stuff at the minute so haven't had a chance to look at any of them but I'm trying to create a kata</p>",
        "id": 194220718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586981360
    },
    {
        "content": "<p>I'll get back to it later</p>",
        "id": 194220728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586981367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/quickest.20way.20to.20kill.20.22trivial.20mod.20N.22.3F/near/194219591\" title=\"#narrow/stream/116395-maths/topic/quickest.20way.20to.20kill.20.22trivial.20mod.20N.22.3F/near/194219591\">said</a>:</p>\n<blockquote>\n<p>wow, monadius learnt Lean?</p>\n</blockquote>\n<p>His LinkedIn profile is too intimidating... apparently  he was a PhD student and postdoc with both Tom Hales and Georges Gonthier...</p>",
        "id": 194224590,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586983348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> and <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  this is great, thanks a lot. Kenny, your code looks like mine (in fact mine looks worse), which is exactly why I asked. Chris' method is exactly what I need in my use case.</p>",
        "id": 194226101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586984095
    },
    {
        "content": "<p><em>sigh</em> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 194227382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586984685
    },
    {
        "content": "<p><code>val_cast_nat</code> or <code>eq_iff_modeq_int</code></p>",
        "id": 194227549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586984774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/116395-maths/topic/quickest.20way.20to.20kill.20.22trivial.20mod.20N.22.3F/near/194224590\" title=\"#narrow/stream/116395-maths/topic/quickest.20way.20to.20kill.20.22trivial.20mod.20N.22.3F/near/194224590\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/quickest.20way.20to.20kill.20.22trivial.20mod.20N.22.3F/near/194219591\" title=\"#narrow/stream/116395-maths/topic/quickest.20way.20to.20kill.20.22trivial.20mod.20N.22.3F/near/194219591\">said</a>:</p>\n<blockquote>\n<p>wow, monadius learnt Lean?</p>\n</blockquote>\n<p>His LinkedIn profile is too intimidating... apparently  he was a PhD student and postdoc with both Tom Hales and Georges Gonthier...</p>\n</blockquote>\n<p>alexey is part of this chat</p>",
        "id": 194228543,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1586985320
    }
]