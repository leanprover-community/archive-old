[
    {
        "content": "<p>Does mathlib have a builtin well-ordering principle?  If not, here is my attempt to create one: how should I start?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">WOP</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188423358,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582000901
    },
    {
        "content": "<p><code>nat.find </code> will compute this <code>n</code> for you.</p>",
        "id": 188423515,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1582001195
    },
    {
        "content": "<p>Ah okay thanks</p>",
        "id": 188423521,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582001229
    },
    {
        "content": "<p>I'm not sure how to use it?</p>",
        "id": 188423644,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582001486
    },
    {
        "content": "<p>If you hit <code>Ctrl</code>-<code>Shift</code>-<code>p</code> in VScode, and then type <code>#nat.find</code> you'll find all the lemmas about it.</p>",
        "id": 188427457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582008693
    },
    {
        "content": "<p>(and yes, mathlib has a bunch of stuff about general well-orderings as well, although in the case of nat there is more)</p>",
        "id": 188431362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582014037
    },
    {
        "content": "<p>PS <code>k ≥ n</code> is the same as <code>n ≤ k</code> and as a general convention we stick to <code>≤</code> because e.g. then you don't have to state every lemma involving <code>≤</code> twice.</p>",
        "id": 188432471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582015383
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">yadayadayada</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">WOP</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min&#39;</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188432727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582015776
    },
    {
        "content": "<p>My point is that I'm confused about this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">prime</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">prime</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</pre></div>\n\n\n<p>What on earth is the type named via an existential quantifier?</p>",
        "id": 188514768,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582085992
    },
    {
        "content": "<p>You have to provide a proof that some prime exists, and it returns the least prime</p>",
        "id": 188514828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582086081
    },
    {
        "content": "<p>Oh okay...</p>",
        "id": 188514834,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582086105
    },
    {
        "content": "<p>I tried this with a proof that some k exists with k % 4 = 2, but I doubt this is the way to find the smallest such k</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">someK</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">use</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n<span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">someK</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 188514948,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582086244
    },
    {
        "content": "<p>Try <code>#eval nat.find someK</code> it will return 2 so looks like it does the right thing to me.</p>",
        "id": 188514972,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582086324
    },
    {
        "content": "<p>Ah thanks</p>",
        "id": 188514975,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582086337
    },
    {
        "content": "<p>In here, I feel like I'm supposed to change \"0 &lt; a * a\" in the goal to \"a * 0 &lt; a * a\" and then use mul_lt_mul_of_pos_left, but I'm not sure how to...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 188515611,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582087588
    },
    {
        "content": "<p>Using the library <code>library_search</code> tactic I found <code>exact mul_pos' p p</code></p>",
        "id": 188516111,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582088427
    },
    {
        "content": "<p>haha, I was seconds behind:</p>\n<div class=\"codehilite\"><pre><span></span>example (n : ℤ) (a : 0 &lt; n) : 0 &lt; n * n := by library_search\n</pre></div>",
        "id": 188516128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582088460
    },
    {
        "content": "<p>the strategy you wanted you can achieve via</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"o\">(</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_zero</span> <span class=\"n\">a</span><span class=\"o\">)],</span>\n <span class=\"n\">exact</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 188516142,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582088489
    },
    {
        "content": "<p>Thanks</p>",
        "id": 188597781,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582155900
    },
    {
        "content": "<p>Another general question, is there any way to use a lemma statement?</p>\n<p>For example, is there a command which can use lt_trichotomy to turn this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>into this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">2</span>\n</pre></div>",
        "id": 188598891,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582156904
    },
    {
        "content": "<p><code>have q := lt_trichotomy 0 a</code> will do that</p>",
        "id": 188599461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582157561
    },
    {
        "content": "<p>Thanks.  Sorry if I'm overwhelming you guys with questions, I am totally new to Lean</p>",
        "id": 188606372,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582167250
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 188607397,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582169134
    },
    {
        "content": "<p>In proving this, I just need to be able to use p &gt; 0 to get 0 ≠ ↑p (something I can apply s to).  What's the <em>best</em> way you know to do this?  [I feel like I could come up with one myself but it would be unnecessarily overwhelming]</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"mi\">2</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span>\n</pre></div>",
        "id": 188608048,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582170346
    },
    {
        "content": "<p>Not that it matters too much to the answer but : What is the cast <code>↑</code> to? Integers, reals? I.e. what is the actual lemma statement you are proving ?</p>",
        "id": 188609703,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582173254
    },
    {
        "content": "<p>Seems like <code>norm_cast</code> will help a lot to clean that up</p>",
        "id": 188609775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582173419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/well-ordering.20principle/near/188609703\" title=\"#narrow/stream/116395-maths/topic/well-ordering.20principle/near/188609703\">said</a>:</p>\n<blockquote>\n<p>Not that it matters too much to the answer but : What is the cast <code>↑</code> to? Integers, reals? I.e. what is the actual lemma statement you are proving ?</p>\n</blockquote>\n<p>Integers.  I confess that I didn't know ↑ had multiple meanings</p>",
        "id": 188610115,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582173955
    },
    {
        "content": "<p>It means cast in general, so it could be casting nats to reals or rationals or whatever and it will just be printed in the same way. As mario says, whenever you have such a cast the tactic norm_cast can often reduce you back to the case where there are none.</p>",
        "id": 188610176,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582174046
    },
    {
        "content": "<p>Don't know if you wanted a full answer or not, but here is one way of concluding:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188610295,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582174245
    },
    {
        "content": "<p>And the exact same proof still applies even if we started with reals or whatever as after norm_cast we end up in the same state.</p>",
        "id": 188610363,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582174355
    },
    {
        "content": "<p>Thank you greatly.  I am learning Lean slowly but surely</p>",
        "id": 188611419,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582176426
    },
    {
        "content": "<blockquote>\n<p><code>have q := lt_trichotomy 0 a</code> will do that</p>\n</blockquote>\n<p>This works but doesn't teach Nicholas what he should have done. <span class=\"user-mention\" data-user-id=\"263857\">@Nicholas McConnell</span> what you wanted here was to type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>and look at the messages view.</p>",
        "id": 188617880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582186691
    },
    {
        "content": "<p>I know from experience of watching students that this one is hard to find because you have to get the three terms in the right order and I think &lt; vs &gt; might also matter</p>",
        "id": 188618183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582187119
    },
    {
        "content": "<p>Nicholas had the right statement!</p>",
        "id": 188619030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582188198
    },
    {
        "content": "<p>But it's true that library_search would find the variations. That would be a job for Gabriel.</p>",
        "id": 188619069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582188236
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/KNUIIBNpeX8YqZtMhhe9pVR4/bandicam-2020-02-20-12-06-47-319.mp4\" target=\"_blank\" title=\"bandicam-2020-02-20-12-06-47-319.mp4\">bandicam-2020-02-20-12-06-47-319.mp4</a> </p>\n<p>So I tried using nat.find.  You say I'm supposed to pass in a proposition that a natural number satisfying a certain property exists, and then it'll return the smallest one.  I thought in the general case, it would return a new variable and adjoin conditions \"it satisfies it\" and \"nothing smaller satisfies it.\"  But this is happening instead.  What should I really do?</p>",
        "id": 188656833,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582218560
    },
    {
        "content": "<p>I can't watch the video on my phone because of download issues but iirc nat.find just produces a natural, and then lean also supplies the theorems saying that nat.find h satisfies all the things you want it to satisfy</p>",
        "id": 188657112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582218741
    },
    {
        "content": "<p>But the theorems are a different part of the api</p>",
        "id": 188657147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582218773
    },
    {
        "content": "<p>You want to write <code>open_locale classical</code> near the top of your file (but not directly after the <code>import</code> statements). Then Lean will stop complaining about predicates being decidable.</p>",
        "id": 188658806,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582219887
    },
    {
        "content": "<p>Also, you want to use <code>let ds := nat.find d</code>, not <code>have</code>. <code>have</code> is for proofs of propositions, and Lean will forget how you proved them. <code>let</code> is for data, and Lean will remember how you defined them.</p>",
        "id": 188658898,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582219956
    },
    {
        "content": "<p><code>nat.find</code> itself will only give you the natural number. You can then use <code>nat.find_spec</code> and <code>nat.find_min</code> (or <code>nat.find_min'</code>) to know the properties about this natural number.</p>",
        "id": 188658969,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582220022
    },
    {
        "content": "<p>Now I'm wondering if there's a way to convert, e.g., ↑(a+b*c) to ↑a + ↑b * ↑c, using the casting from naturals to integers<br>\nBecause I think I know how to carry on in this case.  [I just tried \"ring\" on expressions involving integers and it worked.]</p>",
        "id": 188945210,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582564056
    },
    {
        "content": "<p><code>norm_cast</code></p>",
        "id": 188945240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582564081
    },
    {
        "content": "<p>I've tried that, but all I've seen it do is eliminate unnecessary ↑'s, such as changing the goal from ↑(a+b) * ↑c = ↑d to (a+b) * c = d</p>",
        "id": 188945576,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582564292
    },
    {
        "content": "<p>I'm talking about expressions with subtraction, that you can't just do that do, but you can still distribute ↑ over + and *.</p>",
        "id": 188945658,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582564327
    },
    {
        "content": "<p><code>push_cast</code>?</p>",
        "id": 188945718,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582564371
    },
    {
        "content": "<p>Alright, let me try that</p>",
        "id": 188945741,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582564396
    },
    {
        "content": "<p>Thanks Alex!</p>",
        "id": 188945749,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582564407
    },
    {
        "content": "<p>I guess I'll mostly be here asking what commands are called. XD There are (presumed hyperbole) zillions of commands, as someone else pointed out</p>",
        "id": 188945773,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582564437
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>",
        "id": 188946252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582564766
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast</a> is where you want to look. <code>norm_cast</code> goes the other way to what you want -- <code>push_cast</code> goes the right way.</p>",
        "id": 188946567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582565011
    },
    {
        "content": "<p>Should <code>norm_cast</code> be renamed to <code>pull_cast</code>? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 188946898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582565223
    },
    {
        "content": "<p>I'd be ready to bet that, if we could see the whole proof, we would end up using <code>norm_cast</code>.</p>",
        "id": 188946908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582565233
    },
    {
        "content": "<p>It is true that people usually want <code>norm_cast</code> rather than <code>push_cast</code>.  The fewer coercions the better!</p>",
        "id": 188947084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582565334
    },
    {
        "content": "<p>For an expression with subtraction there is <code>omega</code>. For example <code>example (n m : ℕ) : m + n - m = n := by omega</code> works, but <code>ring</code> fails because of natural number subtraction. On the other hand <code>omega</code> doesn't work with multiplication of two non-constant terms.</p>",
        "id": 188947280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582565478
    },
    {
        "content": "<p>I think <code>simp</code> will also work to push down casts in most cases</p>",
        "id": 188955042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582570864
    },
    {
        "content": "<p>which I think is the real reason <code>push_cast</code> doesn't see much use</p>",
        "id": 188955115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582570920
    },
    {
        "content": "<p>that probably would have been my first step on Nicholas's goal</p>",
        "id": 188955188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582570946
    },
    {
        "content": "<p>push_cast isn't changing the goal from \"↑(d * q + r) - ↑d * ↑q = ↑r\" to \"(↑d * ↑q + ↑r) - ↑d * ↑q = ↑r\"... how should I do this?</p>",
        "id": 188967952,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582579674
    },
    {
        "content": "<p>MWE?</p>",
        "id": 188968015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582579700
    },
    {
        "content": "<p>post some code?</p>",
        "id": 188968020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582579702
    },
    {
        "content": "<p>Do you actually want to make this change, or do you just want to prove the result?</p>",
        "id": 188968068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582579746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188968309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582579909
    },
    {
        "content": "<p>Just want to prove the result</p>",
        "id": 188968392,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582579951
    },
    {
        "content": "<p><code>push_cast</code> changed the goal to <code>⊢ ↑d * ↑q + ↑r - ↑d * ↑q = ↑r</code> for me, so you'll need to give some more clues</p>",
        "id": 188968418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582579970
    },
    {
        "content": "<p>If it helps, here's my topmost goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">12</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">divides</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">divides</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">zero_lt_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">p_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">dh</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">dh</span><span class=\"o\">,</span>\n<span class=\"n\">dm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d&#39;</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">dx1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hq1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">hq2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">x_ex</span> <span class=\"n\">y_ex</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">x_ex</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y_ex</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">htr1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">r</span>\n</pre></div>\n\n\n<p>push_cast is doing absolutely nothing for me</p>",
        "id": 188968573,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580083
    },
    {
        "content": "<p>This is no good, I can't tell what the uparrows mean.</p>",
        "id": 188968729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580189
    },
    {
        "content": "<p>Casting from natural number to integer</p>",
        "id": 188968759,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580213
    },
    {
        "content": "<p>Can't you just post a working example of some code that I can just cut and paste so I can get into the same situation as you?</p>",
        "id": 188968771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580221
    },
    {
        "content": "<p>I can't diagnose it just from the tactic state.</p>",
        "id": 188968791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580234
    },
    {
        "content": "<p>PS I am impressed by the number of goals. There are tricks you can do with brackets which keeps this sort of thing under control.</p>",
        "id": 188968841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580279
    },
    {
        "content": "<p>You gotta forgive me for being new to Lean! (<em>sniffs</em>)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bezout</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">hp1</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">p_pos</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">hp1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">dh</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">LCex</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">p_pos</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">dh</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">dh</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">dm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d&#39;</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">d&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min&#39;</span> <span class=\"n\">dh</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">dx</span> <span class=\"k\">with</span> <span class=\"n\">dx1</span> <span class=\"n\">dx2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trichotomy</span> <span class=\"mi\">1</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">r1</span> <span class=\"o\">:=</span> <span class=\"n\">div_alg</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"n\">dx1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">r1</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hq</span> <span class=\"k\">with</span> <span class=\"n\">hq1</span> <span class=\"n\">hq2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">dx2</span> <span class=\"k\">with</span> <span class=\"n\">x_ex</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">y_ex</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"n\">dm</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">htr</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trichotomy</span> <span class=\"mi\">0</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">htr</span> <span class=\"k\">with</span> <span class=\"n\">htr1</span> <span class=\"n\">htr2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">x_ex</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y_ex</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">claim2</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hq1</span><span class=\"o\">,</span>\n<span class=\"n\">push_cast</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- ...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188968921,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580325
    },
    {
        "content": "<p>Alternatively type <code>set_option pp.all true</code> before your code and just post the goal (if you can find it ;-) )</p>",
        "id": 188968931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580334
    },
    {
        "content": "<p>It doesn't run for me. Are you missing some imports or opens or something?</p>",
        "id": 188968978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580380
    },
    {
        "content": "<p>Added them</p>\n<p>(Also I omitted LCex and div_alg so you may as well change them to \"sorry\")</p>",
        "id": 188969058,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580424
    },
    {
        "content": "<p>It still doesn't run for me. Cut and paste what you're posting into a new file called <code>scratch.lean</code> or whatever and get it running.</p>",
        "id": 188969098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580458
    },
    {
        "content": "<p>The optimal way to get help here is to make other people's lives easier.</p>",
        "id": 188969130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580486
    },
    {
        "content": "<p>I did that and there's the same result</p>",
        "id": 188969228,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580549
    },
    {
        "content": "<p>Should I... upload the file to my drive so you can see it or something?</p>",
        "id": 188969240,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580561
    },
    {
        "content": "<p>Try minimising the file for a bit, and then copy and paste it here.</p>",
        "id": 188969320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582580627
    },
    {
        "content": "<p>Which Lean are you using? Which mathlib? With the latest Lean and mathlib I get</p>\n<div class=\"codehilite\"><pre><span></span>unknown identifier &#39;prime&#39;\n\nunknown identifier &#39;divides&#39;\n</pre></div>",
        "id": 188969327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580632
    },
    {
        "content": "<p>Oh my bad, I mentioned div_alg but forgot I also defined my own \"prime\" and \"divides\"</p>",
        "id": 188969393,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580656
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">q</span>  <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span>  <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188969414,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582580673
    },
    {
        "content": "<p>OK so I say again: make a completely new file. Paste what you're pasting here into the new file. Make it work. Then post here.</p>",
        "id": 188969446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580699
    },
    {
        "content": "<p>Doesn't matter if it's super-long. But neither Floris nor I can see the problem yet.</p>",
        "id": 188969479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580721
    },
    {
        "content": "<p>Alright, that's what I'm about to do.  (Just a few minutes ago I was <em>very</em> unwilling to)</p>",
        "id": 188969497,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580736
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>\n\n<span class=\"n\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span>\n<span class=\"n\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n<span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">square_eq_times_itself</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nonzero_square_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- to make things easier to read</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">square_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- to make things easier to read</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">LCex</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- to make things easier to read</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">div_alg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- to make things easier to read</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">isLC</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bezout</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">hp1</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">p_pos</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">hp1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">dh</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">LCex</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">p_pos</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">dh</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">dh</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">dm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d&#39;</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">d&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">d&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min&#39;</span> <span class=\"n\">dh</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">dx</span> <span class=\"k\">with</span> <span class=\"n\">dx1</span> <span class=\"n\">dx2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trichotomy</span> <span class=\"mi\">1</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">r1</span> <span class=\"o\">:=</span> <span class=\"n\">div_alg</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"n\">dx1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">r1</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hq</span> <span class=\"k\">with</span> <span class=\"n\">hq1</span> <span class=\"n\">hq2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">dx2</span> <span class=\"k\">with</span> <span class=\"n\">x_ex</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">y_ex</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"n\">dm</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">htr</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trichotomy</span> <span class=\"mi\">0</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">htr</span> <span class=\"k\">with</span> <span class=\"n\">htr1</span> <span class=\"n\">htr2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">x_ex</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y_ex</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">claim2</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hq1</span><span class=\"o\">,</span>\n<span class=\"n\">push_cast</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- ...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188969593,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580790
    },
    {
        "content": "<p>(And while Kevin says it doesn't matter if it's super-long, learning how to generate a _minimal_ example of the problem you're encountering is a great skill -- more often than not you solve the problem yourself while minimising.)</p>",
        "id": 188969597,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582580793
    },
    {
        "content": "<p>Oh yeah, I minimized it by replacing all the unimportant bodies to \"sorry\"</p>",
        "id": 188969642,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580821
    },
    {
        "content": "<p>When I did that, the push_cast still had the same result for me</p>",
        "id": 188969656,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580838
    },
    {
        "content": "<p>Replace the line with <code>claim2</code> to <code>have claim2 : (a : ℤ)-↑d*↑q = ↑r,</code></p>",
        "id": 188969760,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582580920
    },
    {
        "content": "<p>You didn't actually tell Lean what the target of the <code>↑</code>'s were.</p>",
        "id": 188969785,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582580941
    },
    {
        "content": "<p>Yes, they are not integers after all.</p>",
        "id": 188969794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580949
    },
    {
        "content": "<p>They are just \"some coercion from naturals to any old thing\"</p>",
        "id": 188969820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582580972
    },
    {
        "content": "<p>Generally, you don't ever want to type <code>↑</code> yourself: always use the <code>(x : T)</code> mechanism.</p>",
        "id": 188969828,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582580978
    },
    {
        "content": "<p>Ohh, I finally get it.</p>\n<p>And you're finally glad I posted that MWE, huh.</p>",
        "id": 188969831,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582580980
    },
    {
        "content": "<p>In fact you can probably write <code>claim2 : (a : ℤ) - d * q = r</code> because Lean will  figure out all the coercions itself once you explicitly tell it the first one.</p>",
        "id": 188969926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582581038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263857\">Nicholas McConnell</span> <a href=\"#narrow/stream/116395-maths/topic/well-ordering.20principle/near/188969831\" title=\"#narrow/stream/116395-maths/topic/well-ordering.20principle/near/188969831\">said</a>:</p>\n<blockquote>\n<p>And you're finally glad I posted that MWE, huh.</p>\n</blockquote>\n<p>In the sense that I wasted some time trying to diagnose your problem when you were withholding information, but the moment you posted a MWE the answer was clear, yes.</p>",
        "id": 188970020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582581102
    },
    {
        "content": "<p>Alright, my apologies for that.</p>",
        "id": 188970300,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582581246
    },
    {
        "content": "<p>I guess the other thing worth saying is that once you learn how to post MWEs and not just WEs, you start stripping away the irrelevant stuff and you then often end up solving your own problems. If you had done that here, you would see that the goal was created by <code>claim2</code> and once everything else was stripped away you would have ended up with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"c1\">-- irrelevant goal</span>\n  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">claim2</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hq1</span><span class=\"o\">,</span>\n<span class=\"n\">push_cast</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>You could have made that yourself. Now look at what happens after <code>claim2</code> -- the number of goals goes from 1 to 9. So now you can see where the problem probably is.</p>",
        "id": 188971547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582582097
    },
    {
        "content": "<p>Other notes: <code>square_eq_times_itself</code> is already in mathlib and is called <code>pow_two</code>. Of course it's very good practice for a beginner to prove these things themselves, but don't forget <code>library_search</code>. We have <code>mul_self_pos</code> and <code>mul_self_nonneg</code> as well, which will make some of those sorrys easy to remove. The rule of thumb is: if it's obvious, it's already there.</p>",
        "id": 188972512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582582844
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 188974255,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582584217
    },
    {
        "content": "<p>In tactic mode you can just do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),(</span><span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),(</span><span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>In term mode you can use the stupid triangle which I can never get to work.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),(</span><span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),(</span><span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"c1\">-- doesn&#39;t work</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 188974572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582584480
    },
    {
        "content": "<p>oh I got it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),(</span><span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),(</span><span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 188974635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582584513
    },
    {
        "content": "<p>I always forget it's not as smart as <code>rw</code></p>",
        "id": 188974644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582584521
    },
    {
        "content": "<p>Thanks, even though I figured it out</p>",
        "id": 188974649,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582584530
    },
    {
        "content": "<p>How do I change a hypothesis from 0 ≤ 2 * r to 0 ≤ 2 * ↑r (involving integers)?  I don't see how to use norm_cast while specifying I want it to go to integers.</p>\n<p>In other words, given</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">b_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">ho</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">tri1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">divq1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">divq2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span>\n</pre></div>\n\n\n<p>how can I get thing2 : 0 ≤ 2 * ↑r ?</p>",
        "id": 189086513,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582693405
    },
    {
        "content": "<p>[I trust that since this is not a problem-diagnosing question I don't need to put an MWE]</p>",
        "id": 189086524,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582693432
    },
    {
        "content": "<p>By the way, my ambition is to prove that (-2) * ↑r ≤ 0</p>",
        "id": 189086632,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582693590
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">thing2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">thing</span> <span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>[MWEs are always preferable because it's easier to give a good suggestion when we can quickly check whether it works. Very few of us can emulate Lean + mathlib perfectly in our heads.]</p>",
        "id": 189086824,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582694040
    },
    {
        "content": "<p>Thanks.  Also, I'll keep that in mind.</p>",
        "id": 189086938,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582694228
    }
]