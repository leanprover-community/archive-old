[
    {
        "content": "<p>I am attempting to prove the following lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_integral_of_finite_extension</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I thought the best approach would be to use the <code>is_integral_of_mem_of_fg</code> lemma, combined with <code>iff_fg</code> in <code>finite_dimensional.lean</code>. However, I have been unable to get lean to translate between these three objects:</p>\n<ul>\n<li><code>⊤ : submodule F L</code></li>\n<li><code>⊤ : subalgebra F L</code></li>\n<li><code>L</code> itself</li>\n</ul>\n<p>Put succinctly, <code>iff_fg</code> is written in terms of <code>⊤ : submodule F L</code>, and <code>is_integral_of_mem_of_fg</code> requires a <code>subalgebra</code> type, while my mental model wants to use <code>L</code>.<br>\nI see three possible approaches:</p>\n<ol>\n<li>\n<p>write everything in terms of <code>⊤ : subalgebra F L</code>.<br>\nBut doing this would require a term of type <code>(⊤ : subalgebra F L).to_submodule = (⊤ : submodule F L)</code>, which I don't know how to do.</p>\n</li>\n<li>\n<p>write everthing in terms of <code>⊤ : submodule F L</code>.<br>\nIn this case, I just don't know how to convert a <code>submodule</code> into a <code>subalgebra</code> in the presence of multiplication.</p>\n</li>\n<li>\n<p>write everthing in terms of <code>L</code>.<br>\nThis seems to require coercing <code>L</code> to be a <code>submodule</code> and proving that it is equal to <code>⊤ : submodule F L</code>.</p>\n</li>\n</ol>\n<p>Any advice on which direction I should go?</p>",
        "id": 201775350,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1592942620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> did you already prove this?</p>",
        "id": 201776806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592943444
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 201776838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592943473
    },
    {
        "content": "<p>It's some noetherian thing</p>",
        "id": 201776906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592943497
    },
    {
        "content": "<p>I recall seeing this recently in a PR.</p>",
        "id": 201778502,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592944224
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3096\">#3096</a></p>",
        "id": 201779160,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592944548
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3096\">#3096</a> works great--thanks!</p>",
        "id": 201797851,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1592955568
    }
]