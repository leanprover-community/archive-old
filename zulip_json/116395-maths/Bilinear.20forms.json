[
    {
        "content": "<p>I'm going to rewrite bilinear forms using the modules over a ring instead of M, M, and R. Should I care about noncommutative rings?</p>",
        "id": 190414952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584032307
    },
    {
        "content": "<p>What kind of change do you mean exactly?</p>",
        "id": 190415114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584032382
    },
    {
        "content": "<p>Since we only have left-modules, I guess that bilinear forms over non-commutative rings are currently hard to do.</p>",
        "id": 190415257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584032427
    },
    {
        "content": "<p>We clearly need someone to care about noncommutative rings in mathlib. We can't let algebraic geometers pretend there are no commutative rings forever.</p>",
        "id": 190415331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584032453
    },
    {
        "content": "<p>I care about central simple algebras. I bet that Kevin also cares about them.</p>",
        "id": 190415421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584032495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I still can define</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">bilinear_map</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">→</span> <span class=\"n\">M₂</span> <span class=\"bp\">→</span> <span class=\"n\">M₃</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add_left&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul_left&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add_right&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul_right&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 190418251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584033899
    },
    {
        "content": "<p>The question is: does it make sense in the non-commutative case?</p>",
        "id": 190418317,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584033937
    },
    {
        "content": "<p>For a commutative case, I can use <code>M₁ →ₗ[R] M₂ →ₗ[R] M₃</code> with a custom constructor.</p>",
        "id": 190418461,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584033985
    },
    {
        "content": "<p>But in a non-commutative case there is no <code>R</code>-module structure on <code>M₂ →ₗ[R] M₃</code>, so I have to use the <code>structure</code> definition above and define separately <code>to_linear_left</code>, <code>to_linear_right</code> etc.</p>",
        "id": 190419366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584034384
    },
    {
        "content": "<p>There are also already general multilinear maps (over a non-commutative ring) in <code>linear_algebra/multilinear</code>. They are defined on a Pi type, so I think it is worth having a concrete specialisation for bilinear maps, but establishing a link between the two would also be useful.</p>",
        "id": 190420220,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1584034763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  Sure.</p>",
        "id": 190421313,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584035214
    },
    {
        "content": "<p>But before starting the refactor I need to know whether it is OK to define <code>bilinear_map</code> only for modules over commutative rings, or I should care about modules over non-commutative rings. In the latter case, (a) what is the \"good\" definition? (b) what examples I should care about?</p>",
        "id": 190421590,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584035325
    },
    {
        "content": "<p>Hmmm, re (a) I'm not sure what the correct definition is; re (b) I think I've only used bilinear forms over quaternion algebras, I think. So I don't know good examples.</p>",
        "id": 190424972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584036690
    },
    {
        "content": "<p>How do you define bilinear forms over quaternion algebras? Do you have two left modules, or one left module and one right module?</p>",
        "id": 190426316,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584037406
    },
    {
        "content": "<p>One right and one left module.</p>",
        "id": 190427563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584038162
    },
    {
        "content": "<p>Thank you, I'll take this route then</p>",
        "id": 190437191,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584043071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Which route do you mean? We don't have right modules, and surely you don't only want forms.</p>",
        "id": 190437801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584043393
    },
    {
        "content": "<p>We probably have opposite rings</p>",
        "id": 190443653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584046352
    },
    {
        "content": "<p>Now I'm wondering, as a math question: in situations involving sesquilinear forms, Hermitian matrices, etc, if I have a left <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>-vector space, am I supposed to consider it as a right <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>-vector space by the conjugate action?</p>",
        "id": 190446126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584047712
    },
    {
        "content": "<p>Yep, I think that's right.</p>",
        "id": 190446293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584047810
    },
    {
        "content": "<p>I'm wondering how I never knew that before.</p>",
        "id": 190446546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584047965
    },
    {
        "content": "<p>Is there some specific fancy structure on a monoidal category or something that tells me how to turn a left module into a right module (<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>)?</p>",
        "id": 190446678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584048025
    },
    {
        "content": "<p>The category being braided, and the algebra being commutative wrt that braiding.</p>",
        "id": 190447604,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584048595
    },
    {
        "content": "<p>I didn't know that way of thinking about sesquilinear forms either. I always thought they were just weird.</p>",
        "id": 190448442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584049091
    },
    {
        "content": "<p>What's the category here then?</p>",
        "id": 190448463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584049114
    }
]