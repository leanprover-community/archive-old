[
    {
        "content": "<p>I am planning on making a pull request to add a lemma similar to the following lemma to mathlib's <code>data.set.intervals.basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc</span> <span class=\"o\">(</span><span class=\"n\">I₁_s</span> <span class=\"n\">I₁_e</span> <span class=\"n\">I₂_s</span> <span class=\"n\">I₂_e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hI₁</span> <span class=\"o\">:</span> <span class=\"n\">I₁_s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">I₁_e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hI₂</span> <span class=\"o\">:</span> <span class=\"n\">I₂_s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I₂_s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">I₁_s</span> <span class=\"bp\">∧</span> <span class=\"n\">I₁_e</span> <span class=\"bp\">&lt;</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"n\">I₁_s</span> <span class=\"n\">I₁_e</span> <span class=\"bp\">⊂</span> <span class=\"n\">set.Icc</span> <span class=\"n\">I₂_s</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hs</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hIcc</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"n\">I₁_s</span> <span class=\"n\">I₁_e</span> <span class=\"bp\">⊆</span> <span class=\"n\">set.Icc</span> <span class=\"n\">I₂_s</span> <span class=\"n\">I₂_e</span> <span class=\"o\">:=</span> <span class=\"n\">set.Icc_subset_Icc</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">set.ssubset_iff_of_subset</span> <span class=\"n\">hIcc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">⟨</span> <span class=\"n\">I₂_s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span> <span class=\"o\">⟩</span> <span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.left_mem_Icc</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hI₂</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But before I transform the lemma above to match the style and structure of the lemmas in <code>data.set.intervals.basic</code>, is there a way to simplify the <code>intro h, cases h with hs he,</code>?</p>",
        "id": 221108347,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609211079
    },
    {
        "content": "<p>take a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a></p>",
        "id": 221108432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609211253
    },
    {
        "content": "<p>Note: you can remove hypothesis <code>hI₁</code></p>",
        "id": 221119256,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609230397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/Icc_ssubset_Icc/near/221119256\">said</a>:</p>\n<blockquote>\n<p>Note: you can remove hypothesis <code>hI₁</code></p>\n</blockquote>\n<p>Is there a way to remove hypothesis <code>hI₂</code> as well?</p>",
        "id": 221173828,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609281423
    },
    {
        "content": "<p>Below is a proof not using <code>finish</code> or <code>linarith</code> of a slightly tightened result.  There are several other cases where there is a strict containment that are not taken into account by this lemma.  Note that hypothesis <code>hI₂</code> cannot simply be removed since otherwise there is the possibility that both intervals are empty and therefore the conclusion would be false.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc</span>\n  <span class=\"o\">(</span><span class=\"n\">I₁_s</span> <span class=\"n\">I₁_e</span> <span class=\"n\">I₂_s</span> <span class=\"n\">I₂_e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hI₂</span> <span class=\"o\">:</span> <span class=\"n\">I₂_s</span> <span class=\"bp\">≤</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">I₂_s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">I₁_s</span> <span class=\"bp\">∧</span> <span class=\"n\">I₁_e</span> <span class=\"bp\">≤</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"n\">I₁_s</span> <span class=\"n\">I₁_e</span> <span class=\"bp\">⊂</span> <span class=\"n\">set.Icc</span> <span class=\"n\">I₂_s</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">set.ssubset_iff_of_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n    <span class=\"o\">⟨</span> <span class=\"n\">I₂_s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.left_mem_Icc.mpr</span> <span class=\"n\">hI₂</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">not_le.mpr</span> <span class=\"n\">h.1</span> <span class=\"n\">a.1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h.1</span><span class=\"o\">)</span> <span class=\"n\">b.1</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">b.2</span> <span class=\"n\">h.2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221207178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609329148
    },
    {
        "content": "<p>Note that a lemma in <code>data/set/intervals/basic</code> should deal with any type, not just <code>\\R</code>. Is there any reason to use <code>∧</code> in <code>h</code> instead of 2 assumptions?</p>",
        "id": 221313727,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609445823
    },
    {
        "content": "<p>At least any <a href=\"https://leanprover-community.github.io/mathlib_docs/find/densely_ordered\">docs#densely_ordered</a> type</p>",
        "id": 221327200,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609461515
    },
    {
        "content": "<p>The proof uses nothing but the endpoints, so it should work without <code>densely_ordered</code>. Any <code>preorder</code>?</p>",
        "id": 221329580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609465478
    },
    {
        "content": "<p>BTW, this proof is about the left endpoint; the PR should include a version about the right endpoint.</p>",
        "id": 221329596,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609465528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Icc_ssubset_Icc/near/221313727\">said</a>:</p>\n<blockquote>\n<p>Note that a lemma in <code>data/set/intervals/basic</code> should deal with any type, not just <code>\\R</code>. Is there any reason to use <code>∧</code> in <code>h</code> instead of 2 assumptions?</p>\n</blockquote>\n<p>I made the type <code>ℝ</code> in the lemma on purpose to make it minimal, but I will make sure to make the pull request version of the lemma work with any type.</p>",
        "id": 221487946,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609733650
    },
    {
        "content": "<p>Here's a slightly improved version of the lemma after factoring-in many suggestions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc</span>\n  <span class=\"o\">(</span><span class=\"n\">I₁_s</span> <span class=\"n\">I₁_e</span> <span class=\"n\">I₂_s</span> <span class=\"n\">I₂_e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I₂_s</span> <span class=\"bp\">≤</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">I₂_s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">I₁_s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">I₁_e</span> <span class=\"bp\">≤</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"n\">I₁_s</span> <span class=\"n\">I₁_e</span> <span class=\"bp\">⊂</span> <span class=\"n\">set.Icc</span> <span class=\"n\">I₂_s</span> <span class=\"n\">I₂_e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">set.ssubset_iff_of_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n    <span class=\"o\">⟨</span> <span class=\"n\">I₂_s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.left_mem_Icc.mpr</span> <span class=\"n\">hI</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">not_le.mpr</span> <span class=\"n\">hs</span> <span class=\"n\">a.1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"n\">b.1</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">b.2</span> <span class=\"n\">he</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221488192,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609734068
    },
    {
        "content": "<p>I think there would need to be three lemmas: one for the left endpoint, one for the right endpoint, and <del>one for both endpoints</del>. I forgot that the original lemma was supposed to handle the both endpoints case rather than the left endpoint case.<br>\n<strong>Edit:</strong> The both endpoints lemma is not needed.</p>",
        "id": 221489279,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609735860
    },
    {
        "content": "<blockquote>\n<p>The both endpoints lemma is not needed</p>\n</blockquote>\n<p>what do you mean by this? It seems useful enough to me</p>",
        "id": 221489924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609736888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Icc_ssubset_Icc/near/221489924\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The both endpoints lemma is not needed</p>\n</blockquote>\n<p>what do you mean by this? It seems useful enough to me</p>\n</blockquote>\n<p>I think the left endpoint lemma can be used wherever the both endpoints lemma can be used.</p>",
        "id": 221489956,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609736969
    },
    {
        "content": "<p>The two endpoints lemma is more general in its conclusion</p>",
        "id": 221490887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609738446
    },
    {
        "content": "<p>A different generalization of the <code>ℝ</code>case, would be strict containment of closed balls in a metric space.  Those lemmas might also be useful, unless they are already in mathlib!</p>",
        "id": 221496896,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609746919
    },
    {
        "content": "<p>Your slightly improved version looks like it's one step away from a term-mode proof, so you might as well go there :)</p>",
        "id": 221520437,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1609765347
    },
    {
        "content": "<p>I have partially transformed the lemma to match the lemmas in <code>data.set.intervals.basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_left</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">set.ssubset_iff_of_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n    <span class=\"o\">⟨</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.left_mem_Icc.mpr</span> <span class=\"n\">hI</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">not_le.mpr</span> <span class=\"n\">ha</span> <span class=\"n\">m.1</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">n.1</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">n.2</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and put it between <code>Ico_subset_Ici_self</code> and <code>Icc_subset_Icc_iff</code>. But for some reason, the line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.left_mem_Icc.mpr</span> <span class=\"n\">hI</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">not_le.mpr</span> <span class=\"n\">ha</span> <span class=\"n\">m.1</span> <span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>is causing the error:</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>type mismatch at application\n  not_le.mpr ha\nterm\n  ha\nhas type\n  a₂ &lt; a₁\nbut is expected to have type\n  ?m_3 &lt; ?m_4\nstate:\nα : Type u,\n_inst_1 : preorder α,\na₁ a₂ b₁ b₂ : α,\nhI : a₂ ≤ b₂,\nha : a₂ &lt; a₁,\nhb : b₁ ≤ b₂\n⊢ Icc a₁ b₁ ⊂ Icc a₂ b₂\n</code></pre></div>",
        "id": 221607590,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609814322
    },
    {
        "content": "<p>Otherwise, replacing <code>not_le.mpr ha m.1</code> with <code>sorry</code> causes no further errors.</p>",
        "id": 221607739,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609814523
    },
    {
        "content": "<p>I managed to prove the lemma with a completely different proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_left</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"n\">Icc_subset_Icc</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">ssubset_iff_of_subset</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">≤</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I will now try to make it smaller.</p>",
        "id": 221609639,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609817191
    },
    {
        "content": "<p>Nice, I'd write <code>  refine (ssubset_iff_of_subset h).mpr _,</code> as <code>rw ssubset_iff_of_subset h</code></p>",
        "id": 221609987,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609817754
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_left</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"n\">Icc_subset_Icc</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ssubset_iff_of_subset</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">≤</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_right</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"n\">Icc_subset_Icc</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ssubset_iff_of_subset</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">b₂</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">b₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221610594,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609818762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Would you be okay if I added you as co-authors of the PR's commit?</p>",
        "id": 221611685,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609820706
    },
    {
        "content": "<p>The final version of the code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_left</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"n\">Icc_subset_Icc</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ssubset_iff_of_subset</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">≤</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_right</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"n\">Icc_subset_Icc</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ssubset_iff_of_subset</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">b₂</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">b₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221611769,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609820813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373871\">Mohamed Al-Fahim</span> <a href=\"#narrow/stream/116395-maths/topic/Icc_ssubset_Icc/near/221611685\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> Would you be okay if I added you as co-authors of the PR's commit?</p>\n</blockquote>\n<p>If you want to thats fine with me, but I don't mind if you don't as I didn't contribute much to your work at all, it was mostly your proof still!</p>",
        "id": 221612198,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609821351
    },
    {
        "content": "<p>Yeah, I have the same thought. Feel free to either include me or not include me.</p>",
        "id": 221612479,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609821728
    },
    {
        "content": "<p>In that case, the commit message will be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">feat</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">intervals</span><span class=\"o\">):</span> <span class=\"n\">add</span> <span class=\"mi\">2</span> <span class=\"n\">Icc</span> <span class=\"n\">ssubset</span> <span class=\"n\">lemmas</span>\n\n<span class=\"n\">Add</span> <span class=\"n\">two</span> <span class=\"n\">strict</span> <span class=\"n\">subset</span> <span class=\"n\">lemmas</span> <span class=\"n\">for</span> <span class=\"n\">Icc</span><span class=\"o\">,</span> <span class=\"n\">discussed</span> <span class=\"k\">in</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">leanprover.zulipchat.com</span><span class=\"bp\">/#</span><span class=\"n\">narrow</span><span class=\"bp\">/</span><span class=\"n\">stream</span><span class=\"bp\">/</span><span class=\"mi\">116395</span><span class=\"bp\">-</span><span class=\"n\">maths</span><span class=\"bp\">/</span><span class=\"n\">topic</span><span class=\"bp\">/</span><span class=\"n\">Icc_ssubset_Icc.</span>\n</code></pre></div>\n<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> May I have push permission? My GitHub username is MohamedAlFahim.</p>",
        "id": 221612548,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609821851
    },
    {
        "content": "<p>invite sent!</p>",
        "id": 221612696,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609822157
    },
    {
        "content": "<p>There are term mode versions of your proofs!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_left</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ssubset_iff_of_subset</span> <span class=\"o\">(</span><span class=\"n\">Icc_subset_Icc</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">left_mem_Icc.mpr</span> <span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"n\">not_and.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">a₂</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">ha</span> <span class=\"n\">f</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_right</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ssubset_iff_of_subset</span> <span class=\"o\">(</span><span class=\"n\">Icc_subset_Icc</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hb</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">right_mem_Icc.mpr</span> <span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">b₁</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hb</span> <span class=\"n\">f.2</span><span class=\"o\">))⟩</span>\n</code></pre></div>",
        "id": 221612708,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609822193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I will make sure to add your version in the next commit</p>",
        "id": 221612975,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609822599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Running <code>git push --set-upstream origin interval_ssubset</code> (I named the branch <code>interval_ssubset</code>) gives:</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>remote: Permission to leanprover-community/mathlib.git denied to MohamedAlFahim.\nfatal: unable to access 'https://github.com/leanprover-community/mathlib.git/': The requested URL returned error: 403\n</code></pre></div>",
        "id": 221613050,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609822691
    },
    {
        "content": "<p>Did you visit <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a> and accept?</p>",
        "id": 221613088,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609822759
    },
    {
        "content": "<p>yes</p>",
        "id": 221613108,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609822797
    },
    {
        "content": "<p>I will install the GitHub Pull Requests and Issues extension then try again to see if that would fix it.<br>\n<strong>Edit:</strong> It didn't fix it, and the extension won't even let me sign in to GitHub. Is there a workaround I can use, besides using the GitHub UI to edit the files?</p>",
        "id": 221613243,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609822950
    },
    {
        "content": "<p><del>I will try pushing to a fork instead, then make a PR</del></p>",
        "id": 221613956,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609823909
    },
    {
        "content": "<p>I'm guessing something is up with your permissions on github, do you have the right ssh keys for the computer you are on added to github? You could try to configure git to use the git protocol rather than https with <code>git remote set-url origin  git@github.com:leanprover-community/mathlib.git</code></p>",
        "id": 221614013,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609824000
    },
    {
        "content": "<p>The error message now after running <code>git push --set-upstream origin interval_ssubset</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span> <span class=\"n\">Permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">publickey</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"n\">read</span> <span class=\"k\">from</span> <span class=\"n\">remote</span> <span class=\"n\">repository.</span>\n\n<span class=\"n\">Please</span> <span class=\"n\">make</span> <span class=\"n\">sure</span> <span class=\"n\">you</span> <span class=\"k\">have</span> <span class=\"n\">the</span> <span class=\"n\">correct</span> <span class=\"n\">access</span> <span class=\"n\">rights</span>\n<span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">repository</span> <span class=\"n\">exists.</span>\n</code></pre></div>",
        "id": 221614286,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609824378
    },
    {
        "content": "<p>I think the GitHub UI is my only option at this point <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 221614300,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609824419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I really appreciate your kind effort!</p>",
        "id": 221614394,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609824596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373871\">Mohamed Al-Fahim</span> <a href=\"#narrow/stream/116395-maths/topic/Icc_ssubset_Icc/near/221613050\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> Running <code>git push --set-upstream origin interval_ssubset</code> (I named the branch <code>interval_ssubset</code>) gives:</p>\n<p><div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>remote: Permission to leanprover-community/mathlib.git denied to MohamedAlFahim.\nfatal: unable to access 'https://github.com/leanprover-community/mathlib.git/': The requested URL returned error: 403\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"373871\">@Mohamed Al-Fahim</span> what system are you on? Linux/Mac/Windows? Do you have ssh keys on Github?</p>",
        "id": 221614641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609824950
    },
    {
        "content": "<p>I am on Mac OS</p>",
        "id": 221614698,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609825002
    },
    {
        "content": "<p>I have no GitHub SSH keys</p>",
        "id": 221614736,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609825073
    },
    {
        "content": "<p>Aha... you might want to have those anyways. They will make your life a lot easier.</p>",
        "id": 221614784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609825097
    },
    {
        "content": "<p>I personally authenticate with SSH, and you seem to authenticate with HTTPS. So I'm not too familiar with what the problem could be.<br>\nYou did enter your Github login info before/after pushing?</p>",
        "id": 221614791,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609825113
    },
    {
        "content": "<p>I will take your suggestion of using SSH</p>",
        "id": 221614809,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609825147
    },
    {
        "content": "<p>How do I generate one?</p>",
        "id": 221614827,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609825187
    },
    {
        "content": "<p>SSH takes a little bit to setup (but Github has detailed guides on how to do it). The advantage is that after you have set it up you can authenticate yourself once with <code>ssh-add</code> and then fetch/push an unlimited number of times.</p>",
        "id": 221614829,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609825197
    },
    {
        "content": "<p><a href=\"https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh\">https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh</a></p>",
        "id": 221614881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609825234
    },
    {
        "content": "<p>You will also have to run (in your mathlib dir) <code>git remote set-url origin git@github.com:leanprover-community/mathlib.git</code> at some point (this tells git to connect to mathlib via SSH) (this URL can be found on <a href=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a> under downloading code &gt; SSH)</p>",
        "id": 221614905,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609825284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/Icc_ssubset_Icc/near/221612708\">said</a>:</p>\n<blockquote>\n<p>There are term mode versions of your proofs!</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_left</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ssubset_iff_of_subset</span> <span class=\"o\">(</span><span class=\"n\">Icc_subset_Icc</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">left_mem_Icc.mpr</span> <span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"n\">not_and.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">a₂</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">ha</span> <span class=\"n\">f</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_ssubset_Icc_right</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">⊂</span> <span class=\"n\">Icc</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ssubset_iff_of_subset</span> <span class=\"o\">(</span><span class=\"n\">Icc_subset_Icc</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hb</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">right_mem_Icc.mpr</span> <span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">b₁</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hb</span> <span class=\"n\">f.2</span><span class=\"o\">))⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Would you be fine if I added you as a co-author to a commit?</p>",
        "id": 221617234,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609828637
    },
    {
        "content": "<p>Sure, no problem!</p>",
        "id": 221617566,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609829088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> SSH solved the problem. Thank you!</p>",
        "id": 221618100,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609829887
    },
    {
        "content": "<p>Here's the Pull Request: <a href=\"https://github.com/leanprover-community/mathlib/pull/5617\">https://github.com/leanprover-community/mathlib/pull/5617</a>.</p>",
        "id": 221618101,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1609829891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373871\">Mohamed Al-Fahim</span> <a href=\"#narrow/stream/116395-maths/topic/Icc_ssubset_Icc/near/221618101\">said</a>:</p>\n<blockquote>\n<p>Here's the Pull Request: <a href=\"https://github.com/leanprover-community/mathlib/pull/5617\">https://github.com/leanprover-community/mathlib/pull/5617</a>.</p>\n</blockquote>\n<p>If you'd like people to review it, you should tag the PR with \"awaiting-review\" otherwise people may not see it.</p>",
        "id": 221625646,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609837932
    }
]