[
    {
        "content": "<p>I think I have the right statement I was missing for a tiny part of the perfectoid project that slowed me down since two days ago:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous_extend_of_really_wants_to</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">S&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i_X</span> <span class=\"o\">:</span> <span class=\"n\">X&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j_X</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k_X</span> <span class=\"o\">:</span> <span class=\"n\">X&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">Y&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_Y</span> <span class=\"o\">:</span> <span class=\"n\">Y&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i_R</span> <span class=\"o\">:</span> <span class=\"n\">R&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j_R</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k_R</span> <span class=\"o\">:</span> <span class=\"n\">R&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">S&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_S</span> <span class=\"o\">:</span> <span class=\"n\">S&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">R&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hiX</span> <span class=\"o\">:</span> <span class=\"n\">dense_embedding</span> <span class=\"n\">i_X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkX</span> <span class=\"o\">:</span> <span class=\"n\">dense_embedding</span> <span class=\"n\">k_X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hiY</span> <span class=\"o\">:</span> <span class=\"n\">dense_embedding</span> <span class=\"n\">i_Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hiR</span> <span class=\"o\">:</span> <span class=\"n\">dense_embedding</span> <span class=\"n\">i_R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkR</span> <span class=\"o\">:</span> <span class=\"n\">dense_embedding</span> <span class=\"n\">k_R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hiS</span> <span class=\"o\">:</span> <span class=\"n\">dense_embedding</span> <span class=\"n\">i_S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hjX</span> <span class=\"o\">:</span> <span class=\"n\">uniform_embedding</span> <span class=\"n\">j_X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hjR</span> <span class=\"o\">:</span> <span class=\"n\">uniform_embedding</span> <span class=\"n\">j_R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">j_X</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">range</span> <span class=\"n\">i_Y</span> <span class=\"err\">⊆</span> <span class=\"n\">range</span> <span class=\"n\">i_X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">range</span> <span class=\"n\">i_S</span> <span class=\"err\">⊆</span> <span class=\"n\">j_R</span> <span class=\"err\">&#39;&#39;</span> <span class=\"bp\">-</span><span class=\"n\">range</span> <span class=\"n\">i_R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X&#39;</span><span class=\"o\">,</span> <span class=\"n\">cauchy_of</span> <span class=\"n\">i_X</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">range</span> <span class=\"n\">i_X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">i_X</span> <span class=\"err\">$</span> <span class=\"err\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n           <span class=\"o\">(</span><span class=\"n\">cauchy_of</span> <span class=\"n\">i_R</span> <span class=\"err\">$</span> <span class=\"n\">map</span> <span class=\"n\">φ</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"err\">∉</span> <span class=\"n\">range</span> <span class=\"n\">i_R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">i_R</span> <span class=\"err\">$</span> <span class=\"err\">𝓝</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">map</span> <span class=\"n\">φ</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">hkX</span><span class=\"bp\">.</span><span class=\"n\">extend</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 163135381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555015338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  At some point we'll really need a version of Lean which allows to write the first four lines of assumptions in a more concise way (fixing the Type* bug would be a nice first step)</p>",
        "id": 163135444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555015406
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Kmz_fHoY4eFTMXzcZeP12kcP/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Kmz_fHoY4eFTMXzcZeP12kcP/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/3121/Kmz_fHoY4eFTMXzcZeP12kcP/pasted_image.png\"></a></div>",
        "id": 163135547,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555015478
    },
    {
        "content": "<p>That's the comment above the lemma</p>",
        "id": 163135561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555015491
    },
    {
        "content": "<p>It's not so bad, much bigger diagrams will have to be handled by Lean at some point</p>",
        "id": 163135627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555015550
    },
    {
        "content": "<p>It's a dependently typed language, just make a function that parses the diagram from a string and generates the type of the lemma <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 163137350,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555016890
    },
    {
        "content": "<p>Programming languages in general tend to struggle with areas of math that are usually filled with diagrams on paper... even outside the theorem proving world, low-level graphics programming tends to be full of comments with ASCII diagrams like that</p>",
        "id": 163137603,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555017108
    },
    {
        "content": "<p>I misread the title as \"cube lemma\" at first and got excited for a moment</p>",
        "id": 163138718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555018070
    },
    {
        "content": "<p>then the diagram almost turned out to be a cube anyways</p>",
        "id": 163138722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555018078
    },
    {
        "content": "<p>Using category theory (or just bundled objects and morphisms) helps a little bit</p>",
        "id": 163138795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555018130
    },
    {
        "content": "<p>This is the biggest diagram I've encountered so far<br>\n<a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/formal/cofibrations/gluing.lean#L18\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/formal/cofibrations/gluing.lean#L18\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/formal/cofibrations/gluing.lean#L18</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">a₃</span> <span class=\"n\">a₄</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">b₃</span> <span class=\"n\">b₄</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f₁₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"err\">⟶</span> <span class=\"n\">a₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁₃</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"err\">⟶</span> <span class=\"n\">a₃</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₂₄</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"err\">⟶</span> <span class=\"n\">a₄</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₃₄</span> <span class=\"o\">:</span> <span class=\"n\">a₃</span> <span class=\"err\">⟶</span> <span class=\"n\">a₄</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">po_f</span> <span class=\"o\">:</span> <span class=\"n\">Is_pushout</span> <span class=\"n\">f₁₂</span> <span class=\"n\">f₁₃</span> <span class=\"n\">f₂₄</span> <span class=\"n\">f₃₄</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">g₁₂</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"err\">⟶</span> <span class=\"n\">b₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g₁₃</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"err\">⟶</span> <span class=\"n\">b₃</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g₂₄</span> <span class=\"o\">:</span> <span class=\"n\">b₂</span> <span class=\"err\">⟶</span> <span class=\"n\">b₄</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g₃₄</span> <span class=\"o\">:</span> <span class=\"n\">b₃</span> <span class=\"err\">⟶</span> <span class=\"n\">b₄</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">po_g</span> <span class=\"o\">:</span> <span class=\"n\">Is_pushout</span> <span class=\"n\">g₁₂</span> <span class=\"n\">g₁₃</span> <span class=\"n\">g₂₄</span> <span class=\"n\">g₃₄</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u₁</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"err\">⟶</span> <span class=\"n\">b₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"err\">⟶</span> <span class=\"n\">b₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u₃</span> <span class=\"o\">:</span> <span class=\"n\">a₃</span> <span class=\"err\">⟶</span> <span class=\"n\">b₃</span><span class=\"o\">}</span> <span class=\"c1\">-- u₄ will be the induced map of pushouts</span>\n  <span class=\"o\">(</span><span class=\"n\">ha₁</span> <span class=\"o\">:</span> <span class=\"n\">cofibrant</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha₃</span> <span class=\"o\">:</span> <span class=\"n\">cofibrant</span> <span class=\"n\">a₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb₁</span> <span class=\"o\">:</span> <span class=\"n\">cofibrant</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb₃</span> <span class=\"o\">:</span> <span class=\"n\">cofibrant</span> <span class=\"n\">b₃</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf₁₂</span> <span class=\"o\">:</span> <span class=\"n\">is_cof</span> <span class=\"n\">f₁₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg₁₂</span> <span class=\"o\">:</span> <span class=\"n\">is_cof</span> <span class=\"n\">g₁₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hwu₁</span> <span class=\"o\">:</span> <span class=\"n\">is_weq</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hwu₂</span> <span class=\"o\">:</span> <span class=\"n\">is_weq</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hwu₃</span> <span class=\"o\">:</span> <span class=\"n\">is_weq</span> <span class=\"n\">u₃</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s₁₂</span> <span class=\"o\">:</span> <span class=\"n\">f₁₂</span> <span class=\"err\">≫</span> <span class=\"n\">u₂</span> <span class=\"bp\">=</span> <span class=\"n\">u₁</span> <span class=\"err\">≫</span> <span class=\"n\">g₁₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₁₃</span> <span class=\"o\">:</span> <span class=\"n\">f₁₃</span> <span class=\"err\">≫</span> <span class=\"n\">u₃</span> <span class=\"bp\">=</span> <span class=\"n\">u₁</span> <span class=\"err\">≫</span> <span class=\"n\">g₁₃</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><a href=\"/user_uploads/3121/pfp9_5iHEksCdv20AbxhVfln/cube.png\" target=\"_blank\" title=\"cube.png\">cube.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pfp9_5iHEksCdv20AbxhVfln/cube.png\" target=\"_blank\" title=\"cube.png\"><img src=\"/user_uploads/3121/pfp9_5iHEksCdv20AbxhVfln/cube.png\"></a></div>",
        "id": 163139072,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555018395
    },
    {
        "content": "<p>Patrick's diagram is trickier though because there are really two categories</p>",
        "id": 163139315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555018621
    }
]