[
    {
        "content": "<p>This is more of a funny story than anything else.</p>\n<p>This week just gone at Imperial, we were looking at the real numbers and the completeness axiom in my class. Some of the students were involved in a (maths not Lean) project of constructing the real numbers as Dedekind cuts. The sheet started by defining totally ordered sets (the <code>linear_order</code> class in Lean) and the \"least upper bound property\" -- any non-empty bounded-above subset has a least upper bound. The sheet then remarked something I'd never realised -- there is no point defining also the \"greatest lower bound property\", because this follows from the least upper bound property. For the reals I had always imagined that this was proved by just considering <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>{</mo><mo>−</mo><mi>x</mi><mspace width=\"0.16667em\"></mspace><mo>∣</mo><mspace width=\"0.16667em\"></mspace><mi>x</mi><mo>∈</mo><mi>S</mi><mo>}</mo></mrow><annotation encoding=\"application/x-tex\">\\{-x\\,\\mid\\,x\\in S\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord mathit\">x</span><span class=\"mrel\"><span class=\"mspace thinspace\"></span><span class=\"mrel\">∣</span></span><span class=\"mord mathit\"><span class=\"mspace thinspace\"></span><span class=\"mord mathit\">x</span></span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">}</span></span></span></span> but actually there is a direct proof which only uses total orders. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- from order/bounds.lean</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">is_least</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">is_greatest</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_least</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">is_glb</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_greatest</span> <span class=\"o\">(</span><span class=\"n\">lower_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">warm_up</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_lub</span> <span class=\"n\">E</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_glb</span> <span class=\"n\">E</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Of course the proof requires a mathematical idea -- knowing any non-empty bounded-above set has a sup, and given a non-empty bounded-below set, we need to produce an inf without this involution which we have on the reals.</p>",
        "id": 147874320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542453811
    },
    {
        "content": "<p>So I could see what the idea must be, and knocked up a tactic proof without too much trouble.</p>\n<p>And then because the bounds definitions applied not just to <code>linear_order</code> but to <code>preorder</code>, Chris asked whether my proof also worked for partial orders or preorders. So the question became -- what do you actually need to assume about your order to prove this warm-up question? I'll post our conclusions later on today if nobody else fancies trying to figure this out :-)</p>",
        "id": 147874402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542453965
    },
    {
        "content": "<p>No spoilers Kenny/Chris, if you're reading :-)</p>",
        "id": 147874403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542453985
    },
    {
        "content": "<p>This is a standard construction at least for complete lattices, there often one defines the supremum or infimum and derives the other exterma. And these structures where the extrema only exists for non-empty bounded sets are called \"conditionally complete lattices\"</p>",
        "id": 147875349,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542455886
    },
    {
        "content": "<p>Right. So the question is: you might well know already that if, in a lattice, all non-empty bounded-above sets have a sup, then all non-empty bounded-below sets have an inf. This is a pleasant exercise. The question is whether you can get away with less than a lattice.</p>",
        "id": 147878523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542462874
    },
    {
        "content": "<p>if every set has a least upper bound, then it's already a lattice</p>",
        "id": 147878636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463163
    },
    {
        "content": "<p>I am only demanding on my order that every non-empty bounded above set has a least upper bound.</p>",
        "id": 147878638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463189
    },
    {
        "content": "<p>then you get a conditionally complete lattice</p>",
        "id": 147878687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463212
    },
    {
        "content": "<p>but I need enough from my order to be able to deduce from this that every non-empty bounded-below set has a greatest lower bound.</p>",
        "id": 147878690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463217
    },
    {
        "content": "<p>You might have to be careful about how you say bounded below, but the usual proof should go through</p>",
        "id": 147878699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463262
    },
    {
        "content": "<p>I explain exactly what I mean by all of these terms in the original post</p>",
        "id": 147878709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463277
    },
    {
        "content": "<p>The question is how much you can relax the typeclasses and still be able to fill in the sorry</p>",
        "id": 147878711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463294
    },
    {
        "content": "<p>e.g. can you prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">is_least</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">is_greatest</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_least</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">is_glb</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_greatest</span> <span class=\"o\">(</span><span class=\"n\">lower_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">warm_up</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_lub</span> <span class=\"n\">E</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_glb</span> <span class=\"n\">E</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 147878753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463361
    },
    {
        "content": "<p>I think so</p>",
        "id": 147878808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463479
    },
    {
        "content": "<p>so now begin dropping the axioms of a preorder</p>",
        "id": 147878810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463491
    },
    {
        "content": "<p>and how far can you get?</p>",
        "id": 147878818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463503
    },
    {
        "content": "<p>if you take <code>E := lower_bounds E</code> then it's nonempty, and an element of <code>E</code> is an upper bound for <code>lower_bounds E</code></p>",
        "id": 147878822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463525
    },
    {
        "content": "<p>right. And which axioms for a preorder do you use in this proof?</p>",
        "id": 147878825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463551
    },
    {
        "content": "<p>if <code>a in E</code> and <code>b in lower_bounds E</code> then <code>b &lt;= a</code> so <code>a</code> is an upper bound of <code>lower_bounds E</code></p>",
        "id": 147878866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463615
    },
    {
        "content": "<p>it uses nothing</p>",
        "id": 147878867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463617
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">is_least</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">is_greatest</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_least</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">is_glb</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_greatest</span> <span class=\"o\">(</span><span class=\"n\">lower_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">warm_up</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_lub</span> <span class=\"n\">E</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_glb</span> <span class=\"n\">E</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">E</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">haE</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hbuE</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs1</span><span class=\"o\">,</span> <span class=\"n\">hs2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">lower_bounds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hbuE</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hs</span> <span class=\"n\">a</span> <span class=\"n\">haE</span><span class=\"bp\">⟩⟩</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">htE</span><span class=\"o\">,</span> <span class=\"n\">hs2</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hzLE</span><span class=\"o\">,</span> <span class=\"n\">hzLE</span> <span class=\"n\">t</span> <span class=\"n\">htE</span><span class=\"o\">),</span> <span class=\"n\">hs1</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 147878872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463625
    },
    {
        "content": "<p>punchline achieved</p>",
        "id": 147878874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463634
    },
    {
        "content": "<p>it could be any relation</p>",
        "id": 147878877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463648
    },
    {
        "content": "<p>This made me wonder why preorder was assumed in bounds.lean</p>",
        "id": 147878878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463660
    },
    {
        "content": "<p>because preorder is our weakest \"lawful\" order class</p>",
        "id": 147878922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463699
    },
    {
        "content": "<p>surely has_le is weaker?</p>",
        "id": 147878923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463713
    },
    {
        "content": "<p>It's surely an order class</p>",
        "id": 147878925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463720
    },
    {
        "content": "<p>because of the notation</p>",
        "id": 147878926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463722
    },
    {
        "content": "<p>you yourself know that has_add and has_mul are two completely different classes</p>",
        "id": 147878938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463748
    },
    {
        "content": "<p>that's why you had to define groups twice</p>",
        "id": 147878939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542463754
    },
    {
        "content": "<p>if it's not a preorder, you probably shouldn't be using <code>&lt;=</code></p>",
        "id": 147878994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463826
    },
    {
        "content": "<p>plus all the terminology there doesn't really make sense without some transitivity</p>",
        "id": 147879007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542463871
    },
    {
        "content": "<p>I am surprised that this is your attitude. I think the notation implies a \"way of thinking\" about the structure, but why can't I define the \"upper bounds\" of a set with has_le to be the obvious things? I thought that this was the mathlib philosophy -- you define things in the max generality that they parse, and for these definitions like upper_bounds we need nothing more than the predicate.</p>",
        "id": 147879514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542464957
    },
    {
        "content": "<p>Octonians aren't associative, and yet people still use <code>*</code> to multiply them</p>",
        "id": 147879519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542464997
    },
    {
        "content": "<p>octonions aren't completely lawless though</p>",
        "id": 147879616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542465143
    },
    {
        "content": "<p>If we cared about them we would define loops or power-associative monoids or whatever</p>",
        "id": 147879619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542465181
    },
    {
        "content": "<p>I think it helps to be at least a little application-driven here. If it's only ever used on preorders then why the suprious generalization?</p>",
        "id": 147879676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542465321
    },
    {
        "content": "<p>note also that typeclass inference is a bit longer for lower classes, although this is probably a small effect</p>",
        "id": 147879678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542465359
    },
    {
        "content": "<p>I would recommend using pure notation classes only in lawless situations like <code>meta</code> programming</p>",
        "id": 147879731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542465416
    },
    {
        "content": "<p>Oh that's an interesting comment. So there is a place for the has_lt typeclass beyond just a notational trick?</p>",
        "id": 147880123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542466145
    },
    {
        "content": "<p>It's just in lawless metaland :-)</p>",
        "id": 147880125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542466152
    },
    {
        "content": "<blockquote>\n<p>I think it helps to be at least a little application-driven here. If it's only ever used on preorders then why the suprious generalization?</p>\n</blockquote>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/789\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/789\">#789</a> I PR'ed <code>monoid_equiv</code> and Chris suggested I change it to <code>mul_equiv</code>. I want <code>linear_ordered_comm_group_equiv</code> but should this be extending <code>le_equiv</code> or <code>preorder_equiv</code>? Note the conversation above.</p>",
        "id": 161006728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552842636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . I just seem to be getting conflicting ideas about this one.</p>",
        "id": 161006736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552842669
    }
]