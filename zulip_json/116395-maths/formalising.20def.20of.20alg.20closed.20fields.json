[
    {
        "content": "<p>It is a source of some frustration to me that I still often don't know the best way to proceed when defining new concepts in Lean. Proofs I feel like I have learnt a lot of the techniques (tactic/term mode etc). But I found myself on the way back from Pittsburgh wanting alg closed fields, and ended up writing this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span> <span class=\"c1\">-- just a sanity check, probably shouldn&#39;t be imported</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"n\">class</span> <span class=\"n\">algebraically_closed_field</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">discrete_field</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_root&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">is_root</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">algebraically_closed_field</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">algebraically_closed_field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">exists_root</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">is_root</span> <span class=\"n\">f</span> <span class=\"n\">z</span>\n\n<span class=\"c1\">-- sanity check</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebraically_closed_field</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">exists_root&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exists_root</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"bp\">..</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">discrete_field</span><span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">algebraically_closed_field</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_algebraically_closed</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">is_root</span> <span class=\"n\">f</span> <span class=\"n\">z</span>\n\n<span class=\"c1\">-- sanity check</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_algebraically_closed</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exists_root</span>\n</pre></div>\n\n\n<p>Should it be a new class, or just a definition? What should I be doing in order to be able to confidently make this decision myself?</p>",
        "id": 185448389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578860032
    },
    {
        "content": "<p>You can make it a class either way. The question is only whether it should extend <code>discrete_field</code> or take it as a parameter.</p>",
        "id": 185448508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1578860252
    },
    {
        "content": "<p>Since it doesn't use more types than <code>discrete_field</code>, Mario's rule is to extend.</p>",
        "id": 185448557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1578860289
    },
    {
        "content": "<p>But I guess either way would be fine.</p>",
        "id": 185448560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1578860316
    },
    {
        "content": "<blockquote>\n<p>But I guess either way would be fine.</p>\n</blockquote>\n<p>This is exactly the problem! There is so often more than one way to do it and I never know which one to choose.</p>",
        "id": 185448586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578860386
    }
]