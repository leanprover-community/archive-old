[
    {
        "content": "<p>This seems strange:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.star.unitary</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"n\">‚ÑÇ</span><span class=\"bp\">‚Üí</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">A</span> <span class=\"bp\">‚àà</span> <span class=\"n\">unitary</span> <span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"bp\">‚Üí</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">star</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">‚ÑÇ</span><span class=\"bp\">‚Üí</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h.1</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I would have expected <code>(star A) * A</code> to be the identity map?</p>",
        "id": 296719079,
        "sender_full_name": "Bj√∏rn Kjos-Hanssen",
        "timestamp": 1662078409
    },
    {
        "content": "<p>You're probably looking for <code>‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ</code> instead of <code>‚ÑÇ ‚Üí ‚ÑÇ</code>. The monoid instance on <code>‚ÑÇ ‚Üí ‚ÑÇ</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.monoid\">docs#pi.monoid</a>, which defines one to be <code>Œª x, 1</code>, as you can see by trying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 296727411,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1662079092
    },
    {
        "content": "<p>Ah, thanks <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span> . I guess it does make sense that in the general case of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>:</mo><mi>M</mi><mo>‚Üí</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">A: M \\to N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> for monoids <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo mathvariant=\"normal\">‚â†</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M\\ne N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\">ÓÄ†</span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, there is no identity map, so 1 should mean the constant function 1.</p>",
        "id": 296732518,
        "sender_full_name": "Bj√∏rn Kjos-Hanssen",
        "timestamp": 1662080832
    },
    {
        "content": "<p>How do you type / import the <code>L</code>?</p>",
        "id": 296732976,
        "sender_full_name": "Bj√∏rn Kjos-Hanssen",
        "timestamp": 1662081340
    },
    {
        "content": "<p>that's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map\">docs#continuous_linear_map</a>. So anything that imports that will suffice.</p>",
        "id": 296733067,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662081446
    },
    {
        "content": "<p>You can also use <code>1 : function.End ‚ÑÇ</code></p>",
        "id": 296890081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662150108
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Indeed, I was wondering if there was a way to take advantage of the fact that an identity function exists when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>=</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M=N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> (above)</p>",
        "id": 296895424,
        "sender_full_name": "Bj√∏rn Kjos-Hanssen",
        "timestamp": 1662152782
    },
    {
        "content": "<p>To guarantee that <code>unitary</code> maps are <code>linear</code> perhaps we have to use something like <code>euclidean_space</code>?</p>",
        "id": 296895521,
        "sender_full_name": "Bj√∏rn Kjos-Hanssen",
        "timestamp": 1662152833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bj√∏rn Kjos-Hanssen</span> has marked this topic as unresolved.</p>",
        "id": 296895536,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662152839
    },
    {
        "content": "<p>The identity function M -&gt; M is called <code>id</code> rather than <code>1</code>.</p>",
        "id": 296903100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662156667
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/unitary\">docs#unitary</a> is a submonoid of a star monoid. That is, for any type with <code>star</code>, <code>1</code> and <code>*</code> (plus compatibility requirements), the unitary elements are exactly those <code>u</code> such that <code>u‚Åª¬π = u‚ãÜ</code>.  So, for example, <code>u : unitary ‚ÑÇ</code> is a complex number of modulus one. One can always view unitaries as elements of the original monoid (i.e., if <code>u : unitary ‚ÑÇ</code>, then <code>‚Üëu : ‚ÑÇ</code> makes sense, the <code>‚Üë</code> is a <em>coercion</em>). However, there is no way to view this as a linear map; I know there is mathematically, but there is no linear coercion from <code>‚ÑÇ</code> to linear maps from <code>‚ÑÇ</code> to <code>‚ÑÇ</code>. Thus, in general, one cannot think of unitaries as linear maps.</p>\n<p>Note that this is what you should expect. For example, if <code>A</code> is a C‚ãÜ-algebra, and <code>u : unitary A</code>, then it makes sense to think of <code>‚Üëu : A</code>, but the only way to think of <code>u</code> as a linear map is to represent <code>A</code> faithfully on some Hilbert space, but which one should you choose? So, we shouldn't expect this behavior.</p>\n<p>Finally, to answer what I <em>think</em> is your question: the type of linear maps <code>E ‚Üí‚Çó[ùïú] E</code> where <code>E</code> is an inner product space over <code>ùïú</code> (= <code>‚Ñù</code> or <code>‚ÑÇ</code>) has an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.adjoint\">docs#linear_map.adjoint</a> which is the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.has_star\">docs#linear_map.has_star</a> operation on this type. Moreover, such linear maps also have <code>1</code> and <code>*</code> (identity map and composition). Therefore, <code>unitary (E ‚Üí‚Çó[ùïú] E)</code> makes sense and some <code>u</code> of this type will have a coercion to an honest-to-God linear map.</p>",
        "id": 297058980,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662267116
    },
    {
        "content": "<p>The type <code>euclidean_space ‚ÑÇ (fin n) ‚Üí‚Çó[‚ÑÇ] euclidean_space ‚ÑÇ (fin n)</code> where <code>n : ‚Ñï</code> is the type of all <code>‚ÑÇ</code>-linear maps from <code>‚ÑÇ‚Åø</code> to itself.</p>",
        "id": 297059165,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662267251
    }
]