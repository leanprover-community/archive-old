[
    {
        "content": "<p>(continuing conversation from <a href=\"#narrow/stream/113488-general/topic/lintsprint.205.20Oct/near/212366576\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/lintsprint.205.20Oct/near/212366576</a>) I had a go at changing the existing <code>Kleisli</code> to work for category theory monads rather than control monads, which works (just about) okay in principle, but it ends up breaking <code>mfoldl</code> in <code>control.fold</code>. In particular, that uses <code>monad m</code> (and no <code>is_lawful_</code>) instances, which is problematic if (category theory) Kleisli is defined as <code>def kleisli (T : C тед C) [category_theory.monad.{v} T]  := C</code>, because the conversion of <code>m : Type u -&gt; Type u</code> with <code>[control.monad m]</code> to a <code>[category_theory.monad m]</code> requires <code>is_lawful_monad m</code>.  The obvious fix is to remove the <code>monad</code> requirement here, but unfortunately this doesn't fix it, since we still need <code>is_lawful_functor m</code> in order to lift <code>m</code> to a category theory functor. As I see it, there are two ways of moving forward now: </p>\n<ol>\n<li>Keep both versions, and add an equivalence of kleisli categories when the control.monad instance is lawful.</li>\n<li>Change <code>of_type_functor</code> to produce a \"pre\"functor if there is no lawful functor instance (and a functor if there is such an instance), and set <code>category_theory.kleisli</code> to accept a prefunctor instead of a functor.</li>\n<li>Make <code>mfoldl</code> use the stronger <code>is_lawful_monad m</code> requirement.</li>\n</ol>\n<p>My instinct is towards 1, but I'm happy with 2 as well, and for 3 it strongly depends on what <code>mfoldl</code> is actually used for. Pinging <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> since you brought this up and <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> since you wrote <code>mfoldl</code>.</p>",
        "id": 212713983,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602173721
    },
    {
        "content": "<p>I'd like to avoid 3. A lot of classes used for programming separate the laws from the functions. One useful effect of that is that, I can use the classes in writing automation that would be useful to prove the laws</p>",
        "id": 212715028,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602174170
    },
    {
        "content": "<p>I think 1 is simpler. 2 risks contaminating the category theory library with the same set of design constraints. There is a little of that already with <code>category_struct</code> and <code>has_hom</code>, I'm not sure it's good idea to keep pushing in that direction.</p>",
        "id": 212718308,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602175708
    },
    {
        "content": "<p>On the other hand, I would like a richer connection between programming and category theory. There's a class I'm working on which I call <code>reified_monad</code> (it comes with <code>reified_functor</code>) in order to embed a monad in <code>Type</code> (from <code>control</code>) into a different category. It might be that the separation would be useful then. But we can also just cross that bridge when we get there.</p>",
        "id": 212718610,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602175841
    },
    {
        "content": "<p>Is the dependence of <code>mfoldl</code> on <code>Kleisli</code> really necessary?</p>",
        "id": 212720257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602176525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/116395-maths/topic/kleisli.20vs.20kleisli/near/212715028\">said</a>:</p>\n<blockquote>\n<p>I'd like to avoid 3. A lot of classes used for programming separate the laws from the functions. One useful effect of that is that, I can use the classes in writing automation that would be useful to prove the laws</p>\n</blockquote>\n<p>For sake of reducing the sizes of variable lists, would it make any sense to rename things like <code>is_lawful_X</code> to <code>lawful_X</code> and make them extend <code>X</code> rather than taking an <code>[X f]</code> parameter?  (Or even rename <code>is_lawful_X</code> to <code>X</code> and <code>X</code> to <code>pre_X</code>?  Then there ought to be an understanding that functions should use <code>pre_X</code> when possible.)</p>",
        "id": 212724348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602178501
    },
    {
        "content": "<p>Whatever happened with this <code>[[foo]]</code> proposal? I.e. writing <code>[[is_lawful_monad M]]</code> is supposed to be equivalent to <code>[monad M] [is_lawful_monad M]</code>.</p>",
        "id": 212725274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602178949
    },
    {
        "content": "<p>This would be lovely, but it would be a big change, and without hearing that there was enthusiasm for it in Lean 4 we wouldn't even start trying to make it happen in Lean 3.</p>",
        "id": 212764600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602202157
    }
]