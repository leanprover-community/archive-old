[
    {
        "content": "<p>Now we have simplicial complexes!</p>",
        "id": 127203178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509624
    },
    {
        "content": "<p>And also the singular complex</p>",
        "id": 127203179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509629
    },
    {
        "content": "<p>With coefficients in arbitrary <code>\\Z</code>-modules</p>",
        "id": 127203191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509642
    },
    {
        "content": "<p>See <a href=\"https://github.com/jcommelin/mathlib/tree/simplicial\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/tree/simplicial\">https://github.com/jcommelin/mathlib/tree/simplicial</a></p>",
        "id": 127203237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509681
    },
    {
        "content": "<p>A less magical solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">simplicial_identity₁</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_set</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">j</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">simplex_category</span><span class=\"bp\">.</span><span class=\"n\">simplicial_identity₁</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127203238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527509682
    },
    {
        "content": "<p>Aaah, so <code>congr'</code> is what I was waiting for...</p>",
        "id": 127203241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509697
    },
    {
        "content": "<p>I have no idea what that does...</p>",
        "id": 127203244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509704
    },
    {
        "content": "<p>Uses congruence exactly once</p>",
        "id": 127203250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527509721
    },
    {
        "content": "<p>congruence is something we wouldn't bother to state</p>",
        "id": 127203254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527509734
    },
    {
        "content": "<p>Alas, we don't have singular homology yet. Because there are no quotient groups... only quotient modules...</p>",
        "id": 127203256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509744
    },
    {
        "content": "<p>x = y implies f(x) = f(y)</p>",
        "id": 127203257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527509747
    },
    {
        "content": "<p>And although we take coeffients in <code>\\Z</code>-modules, we get a complex of <code>add_comm_group</code>s</p>",
        "id": 127203301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509769
    },
    {
        "content": "<p>Because <code>finsupp</code> gives me <code>add_comm_group</code>, and because <code>is_linear_map</code> drove me crazy...</p>",
        "id": 127203311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509815
    },
    {
        "content": "<p>Small tip: <code>i</code> and <code>j</code> should be implicit arguments because they can be inferred from <code>H</code></p>",
        "id": 127203317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527509834
    },
    {
        "content": "<p>Ok, fair enough</p>",
        "id": 127203320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509852
    },
    {
        "content": "<p>And this is what I did in my <code>simplex_category.simplicial_identity₁ _ _ H</code></p>",
        "id": 127203321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527509857
    },
    {
        "content": "<p>So, now begins the ugly part...</p>",
        "id": 127203364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509938
    },
    {
        "content": "<p>cleaning up the proof</p>",
        "id": 127203365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509942
    },
    {
        "content": "<p><a href=\"https://github.com/jcommelin/mathlib/blob/06469f0cd7c502ec64b31ba5e6211e937a00b0e1/algebraic_topology/simplicial_set.lean#L49\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/06469f0cd7c502ec64b31ba5e6211e937a00b0e1/algebraic_topology/simplicial_set.lean#L49\">https://github.com/jcommelin/mathlib/blob/06469f0cd7c502ec64b31ba5e6211e937a00b0e1/algebraic_topology/simplicial_set.lean#L49</a> certainly looks like it could use some cleaning</p>",
        "id": 127203429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527510047
    },
    {
        "content": "<p>I cleaned up that line</p>",
        "id": 127204820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527512478
    },
    {
        "content": "<p>I also added some user comments to the definitions</p>",
        "id": 127204821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527512488
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/144\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/144\">https://github.com/leanprover/mathlib/pull/144</a></p>",
        "id": 127204822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527512490
    },
    {
        "content": "<p><a href=\"https://gist.github.com/PatrickMassot/ef4d356b2c42e469a94f392d61cf173b\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/ef4d356b2c42e469a94f392d61cf173b\">https://gist.github.com/PatrickMassot/ef4d356b2c42e469a94f392d61cf173b</a></p>",
        "id": 127209260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527519401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I went through your file, with random local edits</p>",
        "id": 127209274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527519434
    },
    {
        "content": "<p>I stopped when I went below 150 lines</p>",
        "id": 127209277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527519442
    },
    {
        "content": "<p>I hope you can learn stuff from the diff</p>",
        "id": 127209281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527519453
    },
    {
        "content": "<p>But keep in mind these are only local edits</p>",
        "id": 127209285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527519465
    },
    {
        "content": "<p>Thanks! I'm looking at it!</p>",
        "id": 127209326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527519484
    },
    {
        "content": "<p>You certainly need some global thinking to get useful lemmas replacing parts of this gigantic proof</p>",
        "id": 127209332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527519489
    },
    {
        "content": "<p>and using <code>calc</code> would almost certainly make a more readable proof</p>",
        "id": 127209344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527519534
    },
    {
        "content": "<p>One last edit spotted because VScode showed me a large area without blue marking: after line 75 of my version <code>simpa using nat.succ_le_succ (mem_filter.mp hp).2</code> closes the goal</p>",
        "id": 127209719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527520051
    },
    {
        "content": "<p>So what is the best way to get some intuition for when to try the <code>finish</code> magic? Or should I just always try it?</p>",
        "id": 127213378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527526211
    },
    {
        "content": "<p>don't use it :P</p>",
        "id": 127213387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527526275
    },
    {
        "content": "<p>Reading the doc is a good start</p>",
        "id": 127213438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527526414
    },
    {
        "content": "<p>Oooh, and thanks a lot for shaving of 80 lines!</p>",
        "id": 127213549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527526640
    },
    {
        "content": "<p>Again, you can certainly shave much more, but I hope you can still learn something from this diff</p>",
        "id": 127213663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527526844
    },
    {
        "content": "<p>Johan I have had my mind on other things today and have only just noticed this -- well done! Want to try perfectoid spaces now? :-)</p>",
        "id": 127222299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Well, I'm not so sure what the best way forward is. (1) I need to do some paper writing on non-formal maths. (2) I would love to formalise something cool (like perfectoid spaces), but I will need a lot of help. (3) There is still a lot of scaffolding missing. <code>module.lean</code> needs some love, I would like to do finitely generated groups/modules/algebras/fields. Then we can do number fields, rings of integers. Define etale morphisms of schemes. Galois theory... the list goes on and on.</p>",
        "id": 127237060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527575891
    },
    {
        "content": "<p>So, concerning (3). Your plan is to train an army of students  to do this for us.</p>",
        "id": 127237062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527575907
    },
    {
        "content": "<p>Yes, I also do not know what the best way forward is. Here are some things that need doing.</p>",
        "id": 127241755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584403
    },
    {
        "content": "<p>1) I should look at your code and review it</p>",
        "id": 127241788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584412
    },
    {
        "content": "<p>2) Someone should look at my schemes code and review it</p>",
        "id": 127241793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584419
    },
    {
        "content": "<p>3) A group of people should define a perfectoid space before 1st August</p>",
        "id": 127241798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584434
    },
    {
        "content": "<p>I am unclear about how important it is to put those things in an appropriate order</p>",
        "id": 127241800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584447
    },
    {
        "content": "<blockquote>\n<p>2) Someone should look at my schemes code and review it</p>\n</blockquote>\n<p>I could try to be that someone. But I guess that doesn't help. I can't give much feedback on the Lean... and I'm quite sure that the maths is fine (-; After all, Lean thinks its fine. So I definitely want to review it. But I guess the only one gaining something from that is myself.</p>",
        "id": 127241826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584499
    },
    {
        "content": "<p>1) is not very important. That can wait.</p>",
        "id": 127241875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584529
    },
    {
        "content": "<p>Sounds like Assia wants to look at your scheme code as well.</p>",
        "id": 127241902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584576
    },
    {
        "content": "<p>Ok, Kevin, I've attended a seminar on perfectoid spaces. And I have seen some talks on them (including one by you). Do you think the complexity of the definition is much beyond that of schemes? To me it seems like you need to prove some stuff on power-bounded elements and such, and otherwise you just run the \"sheaf of rings on a space\" machinery, with a different model of affines.</p>",
        "id": 127242065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584782
    },
    {
        "content": "<p>But of course that is hopelessly naive. Both math-wise and lean-wise, I guess.</p>",
        "id": 127242071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584803
    },
    {
        "content": "<p>No, I think defining a perfectoid space will be easy</p>",
        "id": 127242099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584866
    },
    {
        "content": "<p>that's why I'm so keen to do it</p>",
        "id": 127242102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584872
    },
    {
        "content": "<p>I can see no obstruction</p>",
        "id": 127242104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584878
    },
    {
        "content": "<p>and if we find an obstruction</p>",
        "id": 127242110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584882
    },
    {
        "content": "<p>then we learn more about whether Lean is an appropriate place to do interesting mathematics</p>",
        "id": 127242145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584895
    },
    {
        "content": "<p>but if we find an obstruction</p>",
        "id": 127242148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584907
    },
    {
        "content": "<p>I am optimistic the CS guys will fix it</p>",
        "id": 127242153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584921
    },
    {
        "content": "<p>because look at my horrible pre_semi_sheaf question</p>",
        "id": 127242155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584930
    },
    {
        "content": "<p>those goals looked awful</p>",
        "id": 127242156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584933
    },
    {
        "content": "<p>and they fixed it</p>",
        "id": 127242157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527584936
    },
    {
        "content": "<p>Ok... do you want to do it in a separate project? Or in a feature branch of mathlib?</p>",
        "id": 127242177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584991
    },
    {
        "content": "<blockquote>\n<p>because look at my horrible pre_semi_sheaf question<br>\nthose goals looked awful<br>\nand they fixed it</p>\n</blockquote>\n<p>Yes, that was fantastic.</p>",
        "id": 127242302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527585214
    },
    {
        "content": "<blockquote>\n<p>Ok... do you want to do it in a separate project? Or in a feature branch of mathlib?</p>\n</blockquote>\n<p>I recommend not starting from a fork of mathlib. Your compile times will generally be faster. You can always add it to mathlib later.</p>",
        "id": 127242305,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527585236
    },
    {
        "content": "<p>Ok, I developed simplicial sets in a feature branch. And I was quite happy.</p>",
        "id": 127242353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527585279
    },
    {
        "content": "<p>The positive side is that it is very easy to make small improvements to mathlib when you need them.</p>",
        "id": 127242365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527585312
    },
    {
        "content": "<p>For example, I made small changes to <code>fin</code> and later added <code>nnreal</code>, and I got those merged before my current PR.</p>",
        "id": 127242369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527585343
    },
    {
        "content": "<p>I've done both, and I was happier not starting from mathlib. <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 127242416,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527585376
    },
    {
        "content": "<p>I just add files to the same directory as mathlib that I intend to place them. It's just as easy.</p>",
        "id": 127242432,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527585439
    },
    {
        "content": "<p>Oh that's a nice idea</p>",
        "id": 127264180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527616244
    },
    {
        "content": "<p>I was just mulling over this sort of thing myself.</p>",
        "id": 127264181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527616251
    },
    {
        "content": "<p>I think an advantage of working in a feature branch of mathlib is that it keeps at the front of your mind that it's important that new work is eventually merged into mathlib.</p>",
        "id": 127279311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1527635239
    },
    {
        "content": "<p>(Otherwise, the work is lost. Of course, indirect consequences of the work, such as inspiring people to think about interactive theorem proving through talks, may survive.)</p>",
        "id": 127279353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1527635284
    },
    {
        "content": "<p>Not that I am doing this myself. But as soon as I have satisfactory resolution of handling universes in category theory (getting there?), next up should be a PR. :-)</p>",
        "id": 127279366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1527635334
    },
    {
        "content": "<p>Johan Commelin suggests that I wait for you before defining more sheaves of things</p>",
        "id": 127279720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527635964
    },
    {
        "content": "<p>and perfectoid spaces have sheaves of topological rings...</p>",
        "id": 127279722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527635973
    },
    {
        "content": "<p>But Johan Commelin is a layman, who doesn't know anything about proper writing of structures and interfaces. I guess he thinks you just use some abstract category theory imported from Scott's library, and then definitions become 1-liners. But he forgets that you will still need a lot of interface writing. And this interface writing may or may not become more complicated with the overhead of the category lib. Johan has no clue whether this is a good idea or not.</p>",
        "id": 127286907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527649565
    },
    {
        "content": "<p>I'm really sorry about being slow. I am feeling lame about not finishing real papers recently, and trying to get some non-Lean work done. Given the perfectoid spaces project is not immediately planning on contributing to mathlib (tsk) perhaps I could give you a relatively stable version of my category theory library to use as a dependency, and once (I mustn't say \"if\") I get it PR'd into mathlib it should be relatively easy to replumb.</p>",
        "id": 127287077,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1527649936
    },
    {
        "content": "<p>No worries. We all have other obligations as well (-;</p>",
        "id": 127287092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527650010
    },
    {
        "content": "<p>The thing is: I really am a layman. I have no clue whether you lib will allow us to write shorter code. Or whether we still need to write lots of plumbing stuff. I just don't have enough experience with formalisations to have good intuition about this.</p>",
        "id": 127287147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527650096
    },
    {
        "content": "<p>In maths you would say: \"Look, Scott has written a book on category theory! Let's just refer to that, instead of writing a 50 page appendix ourselves. That will save us 50 pages!\"</p>",
        "id": 127287164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527650137
    },
    {
        "content": "<p>But it seems like it might not work that way in Lean.</p>",
        "id": 127287166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527650147
    },
    {
        "content": "<blockquote>\n<p>Of course, indirect consequences of the work, such as inspiring people to think about interactive theorem proving through talks, may survive.</p>\n</blockquote>\n<p>Did you already gave talks about interactive theorem proving?</p>",
        "id": 127293960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527663928
    },
    {
        "content": "<p>I tried to update my <code>simplicial</code> branch today: <a href=\"https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplicial_set.lean#L188\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplicial_set.lean#L188\">https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplicial_set.lean#L188</a> is the proof that <code>boundary (boundary x) = 0</code>.</p>",
        "id": 148191703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542914755
    },
    {
        "content": "<p>I do have some issues with <code>pmf.map f</code> where <code>f</code> is a function between two fintypes. This should be continuous for the subspace topology. And I had a working proof. But in the last months, the topology on <code>nnreal</code> has changed, using uniform spaces. Now my proof seems pretty broken.</p>",
        "id": 148191759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542914835
    },
    {
        "content": "<p>If any of the uniform spaces wizards want to help me out there, that would be cool.</p>",
        "id": 148191764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542914855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I think that I would like to make use of all the machinery that you have developed in you homotopy repo. So I won't push this much further. At least now the files are somewhat up to date with mathlib again.</p>",
        "id": 148192272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542915748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So now I have a proof that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lboundary_lboundary</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lboundary</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">lboundary</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">boundary_boundary</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>Is there now an easy way to take homology? What is the <em>correct</em> way to do that?</p>",
        "id": 148193784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918521
    },
    {
        "content": "<p>Which machinery did you have in mind?</p>",
        "id": 148193785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918522
    },
    {
        "content": "<p>Aah, the stuff about cylinders etc</p>",
        "id": 148193787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918531
    },
    {
        "content": "<p>Can we do a version for simplicial modules now?</p>",
        "id": 148193788,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918533
    },
    {
        "content": "<p>I do not have a working functor <code>Top</code> to <code>simplicial_set</code> yet. It is a bit annoying.</p>",
        "id": 148193798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918576
    },
    {
        "content": "<p>But the other pieces are now becoming quite nice.</p>",
        "id": 148193800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918586
    },
    {
        "content": "<p>Also, I guess I should call them simplicial types? And the category should be <code>sType</code>?</p>",
        "id": 148193859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918606
    },
    {
        "content": "<p>That is--this argument also works to show that the (unnormalized) chain complex associated to any simplicial module is in fact a chain complex. The original simplicial module doesn't have to be free.</p>",
        "id": 148193863,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918627
    },
    {
        "content": "<p>I don't know whether that will make the proof any easier</p>",
        "id": 148193867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918650
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/Moore+complex#ForSimplicialAbelianGroups\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/Moore+complex#ForSimplicialAbelianGroups\">https://ncatlab.org/nlab/show/Moore+complex#ForSimplicialAbelianGroups</a></p>",
        "id": 148193881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918690
    },
    {
        "content": "<p>Aaah, I don't know anything about this.</p>",
        "id": 148193886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918716
    },
    {
        "content": "<p>Are you planning to PR parts of your project into mathlib in the near future?</p>",
        "id": 148193928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918744
    },
    {
        "content": "<p>Probably not the near future. It's more likely that I will do a \"version 2.0\" of some parts in the less near future.</p>",
        "id": 148193942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918794
    },
    {
        "content": "<p>Aha</p>",
        "id": 148193944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918806
    },
    {
        "content": "<p>But, it depends on the part. Some stuff about Top could probably be PRed relatively soon without many changes</p>",
        "id": 148193947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918814
    },
    {
        "content": "<p>Let me see if I can read your proof</p>",
        "id": 148193954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918835
    },
    {
        "content": "<p>It would be nice to have singular homology</p>",
        "id": 148193955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918839
    },
    {
        "content": "<p>I wrote out a plan for it in a comment on one of your earlier PRs</p>",
        "id": 148194000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918869
    },
    {
        "content": "<p>what's the story with the topological simplices functor?</p>",
        "id": 148194014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918908
    },
    {
        "content": "<p>Delta -&gt; Top</p>",
        "id": 148194017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918922
    },
    {
        "content": "<p>Something broke with it?</p>",
        "id": 148194021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542918930
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/144#issuecomment-425715546\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/144#issuecomment-425715546\">https://github.com/leanprover/mathlib/pull/144#issuecomment-425715546</a></p>",
        "id": 148194023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918941
    },
    {
        "content": "<p>Yes, that's broken...</p>",
        "id": 148194028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542918960
    },
    {
        "content": "<p>And I didn't see an obvious fix. The topology on <code>pmf [n]</code> is now no longer a subspace topology of a Pi-topology. But a subspace of some uniform thing.</p>",
        "id": 148194081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919014
    },
    {
        "content": "<p>And my uniform-fu is nil.</p>",
        "id": 148194086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919024
    },
    {
        "content": "<p>Technically we can do all this right now I think, without even waiting for limits or adjunctions</p>",
        "id": 148194092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542919039
    },
    {
        "content": "<p>Yes, apart from this stupid brokenness, all the other parts are mostly there.</p>",
        "id": 148194140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919111
    },
    {
        "content": "<p>I didn't abstract complexes yet.</p>",
        "id": 148194145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919131
    },
    {
        "content": "<p>Did you do complexes somewhere?</p>",
        "id": 148194275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919410
    },
    {
        "content": "<p>I know that we had some discussion here on zulip a long time ago.</p>",
        "id": 148194277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919421
    },
    {
        "content": "<p>Not yet</p>",
        "id": 148194280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542919437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Are you interested in exercising your mastery of uniform spaces again?</p>",
        "id": 148194348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919559
    },
    {
        "content": "<p>I can try</p>",
        "id": 148194403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542919630
    },
    {
        "content": "<p>Did you already precisely described the problem? I didn't read carefully</p>",
        "id": 148194411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542919655
    },
    {
        "content": "<p>Is there something I could clone?</p>",
        "id": 148194455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542919687
    },
    {
        "content": "<p>Nope, there is a broken proof. It used to work, long ago. But then uniform spaces came along, and now it is broken.</p>",
        "id": 148194458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919691
    },
    {
        "content": "<p><code>simplicial</code> branch on community mathlib</p>",
        "id": 148194460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919701
    },
    {
        "content": "<p>did you push everything relevant to that branch?</p>",
        "id": 148194462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542919725
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/standard_topological_simplex.lean#L31\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/standard_topological_simplex.lean#L31\">https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/standard_topological_simplex.lean#L31</a></p>",
        "id": 148194471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919747
    },
    {
        "content": "<p>That might not be the exact statement that you want to prove...</p>",
        "id": 148194473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919765
    },
    {
        "content": "<p>You could generalise to any <code>f : X → Y</code> where <code>X</code> and <code>Y</code> are fintypes.</p>",
        "id": 148194475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919790
    },
    {
        "content": "<p>you get an induced map <code>pmf.map f</code></p>",
        "id": 148194512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919803
    },
    {
        "content": "<p>And that should be continuous</p>",
        "id": 148194519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919809
    },
    {
        "content": "<p>We will then apply this to monotone maps between <code>[n]</code> and <code>[m]</code></p>",
        "id": 148194530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542919840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I investigate a bit. There isn't much uniform space here, only metric space. The seemingly missing lemma is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">metric_pi_topology</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)]:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space_pi</span> <span class=\"bp\">_</span> <span class=\"n\">π</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"bp\">_</span> <span class=\"n\">π</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148196152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542922821
    },
    {
        "content": "<p>Which says the topology on a finite product of metric spaces is the product topology. It probably used to be rfl but isn't.</p>",
        "id": 148196155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542922856
    },
    {
        "content": "<p>After proving that lemma, typing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pmf_top</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">pmf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">pmf_top</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">map</span><span class=\"bp\">.</span><span class=\"n\">cont</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_subtype_mk</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric_pi_topology</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_pi</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>should put you back on track</p>",
        "id": 148196167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542922905
    },
    {
        "content": "<p>because then <code>theorem map.continuous (f : [m] → [n]) : continuous (map f) := map.cont f</code></p>",
        "id": 148196212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542922940
    },
    {
        "content": "<p>It may be better to state a <code>continuous_metric_pi</code> with proof containing the <code>rw metric_pi_topology</code> which we'd rather keep hidden</p>",
        "id": 148196266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542923052
    },
    {
        "content": "<p>Clearly the definition <code>metric_space_pi</code> currently lacks proper API. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> do you have opinons about that (you don't need to read anything before this monologue)?</p>",
        "id": 148196287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542923137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I pushed an \"exercise\" for you, in <a href=\"https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplicial_module.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplicial_module.lean\">https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplicial_module.lean</a></p>",
        "id": 148201901,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542935196
    },
    {
        "content": "<p>It should be a proper subset of your existing <code>boundary_boundary</code> proof, I hope.</p>",
        "id": 148201905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542935215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks a lot for investigating. I'll connect the pieces together now.</p>",
        "id": 148209235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542949834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Thanks! I'll take a look.</p>",
        "id": 148209238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542949849
    },
    {
        "content": "<p>Johan, are you working on this product topology vs product metric? Or do you need help?</p>",
        "id": 148214146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959586
    },
    {
        "content": "<p>I just finished some bureaucracy. I'll look at it now</p>",
        "id": 148214147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542959606
    },
    {
        "content": "<p>It probably requires quite a bit of preparation if you want to do it right</p>",
        "id": 148214150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959635
    },
    {
        "content": "<p>including figuring out what is already in mathlib</p>",
        "id": 148214190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959647
    },
    {
        "content": "<p>stuff like the base of the product topology in terms of open subsets in the factors, maybe some congr lemma for topologies, balls in the product metric space is products of balls etc.</p>",
        "id": 148214196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959702
    },
    {
        "content": "<p>maybe also things like projection on factors is an open map</p>",
        "id": 148214208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Why do your fintypes have such strange names? Did you give up on <code>X</code> and <code>Y</code>?</p>",
        "id": 148214276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542959879
    },
    {
        "content": "<p>I copied and pasted too much. The idea of using π in <code>{π : α → Type*} [fintype α] [∀ a, metric_space (π a)]</code> is also a nightmare, since there are Pi-type mixed with π map everywhere then</p>",
        "id": 148214345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Ok, my proof works again, modulo the lemma. It is a bit scary (in the sense of <em>unmathematical</em>) to do rewrites that don't change the pretty printed goal. But I guess it is fine.</p>",
        "id": 148215270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961374
    },
    {
        "content": "<p>Which lemma? <code>metric_pi_topology</code>?</p>",
        "id": 148215286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542961424
    },
    {
        "content": "<p>Right, that one.</p>",
        "id": 148215369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961554
    },
    {
        "content": "<p>I need to dive into mathlib to figure out how to prove that...</p>",
        "id": 148215412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961565
    },
    {
        "content": "<p>Do you want me to try proving it?</p>",
        "id": 148215415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542961579
    },
    {
        "content": "<p>I'd rather have you work on sheaves or that localization API hole</p>",
        "id": 148215426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542961604
    },
    {
        "content": "<p>Yeah, I should stop again with this project. I needed to do something else than sheaves for a day. But now I should return.</p>",
        "id": 148215517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> How did Lean figure out that your definition of <code>boundary</code> is a linear map?! That's really slick!</p>",
        "id": 148215526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961782
    },
    {
        "content": "<p>Kudos to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 148215533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961792
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">simplicial_module</span> <span class=\"o\">:=</span> <span class=\"n\">simplicial_object</span> <span class=\"o\">(</span><span class=\"n\">RMod</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">simplex_category</span><span class=\"bp\">.</span><span class=\"n\">from_nat</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">boundary</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum</span> <span class=\"n\">univ</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">gsmul</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 148215581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961812
    },
    {
        "content": "<p>I don't know what you are talking about but I'm happy to take credit</p>",
        "id": 148215584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542961825
    },
    {
        "content": "<p>That's so concise! You'dd almost call it normal math.</p>",
        "id": 148215585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961827
    },
    {
        "content": "<p><code>boundary</code> is a map between to modules. And there you have it.</p>",
        "id": 148215595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961856
    },
    {
        "content": "<p>The only difference from regular math is pretty printing</p>",
        "id": 148215603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961880
    },
    {
        "content": "<p>It's using the fact that <code>linear_map</code> is a group. It is really nice that this <em>Just Works™</em></p>",
        "id": 148215665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542961997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Did you also prove that composition of linear maps is bilinear?</p>",
        "id": 148215829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542962257
    },
    {
        "content": "<p>yeah, that's <code>lcomp</code> or <code>llcomp</code></p>",
        "id": 148215832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542962271
    },
    {
        "content": "<p>Otherwise that would be a natural step in <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>s challenge.</p>",
        "id": 148215833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542962271
    },
    {
        "content": "<p>Ok, cool.</p>",
        "id": 148215838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542962277
    },
    {
        "content": "<p>llcomp is linear in all the ways</p>",
        "id": 148215879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542962284
    },
    {
        "content": "<p>btw, <code> : ℤ</code> isn't necessary there</p>",
        "id": 148232028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542982990
    },
    {
        "content": "<p>And yes, I was pretty happy about how easy it was to write down this statement. Now let's see how the proof turns out :)</p>",
        "id": 148232113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542983075
    },
    {
        "content": "<p>Yes, I think that we need to change the definition of composition to <code>llcomp g f</code>. After that, there is <code>map_sum</code> for <code>linear_map</code>s. If that works, I think we are good to go. I'll try it when I'm home.</p>",
        "id": 148233797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542985070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Sadly, this gives a failure</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">RMod_category</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">RMod</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">llcomp</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Once again, Lean can not find the ring over which <code>M</code> is a module...</p>",
        "id": 148236827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988309
    },
    {
        "content": "<p>I'm confused, why are you trying to use <code>llcomp</code>?</p>",
        "id": 148236903,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988400
    },
    {
        "content": "<p>Because then I can pull <code>sum</code> through the linear map that is composition.</p>",
        "id": 148237005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988528
    },
    {
        "content": "<p>I see. So in the level of generality that I picked (RMod for a not necessarily commutative ring), the homs are only abelian groups, not modules. Of course, this is still enough but we have to use this additivity somehow</p>",
        "id": 148237097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988623
    },
    {
        "content": "<p>Aah, yes, I changed <code>R</code> to <code>comm_ring</code>, but that is not the problem I think.</p>",
        "id": 148237106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988645
    },
    {
        "content": "<p>It is still maxing out on some typeclass search</p>",
        "id": 148237115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988661
    },
    {
        "content": "<p>Well, there is no reason it should not work for <code>ring</code> as well, or any additive category even</p>",
        "id": 148237119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988675
    },
    {
        "content": "<p>Sure, but we don't have enriched categories etc</p>",
        "id": 148237192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988744
    },
    {
        "content": "<p>what about just proving the equality element-wise?</p>",
        "id": 148237198,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988748
    },
    {
        "content": "<p>Well, in any case, <code>comp</code> cannot be <code>llcomp</code>, because it has the wrong type. Right?</p>",
        "id": 148237205,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988764
    },
    {
        "content": "<p><code>llcomp g f</code> should be an element of <code>linear_map M P</code></p>",
        "id": 148237219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988798
    },
    {
        "content": "<p>Or, sorry</p>",
        "id": 148237276,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988811
    },
    {
        "content": "<p>because <code>llcomp</code> is cast to a function that eats <code>g</code>, etc...</p>",
        "id": 148237279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988816
    },
    {
        "content": "<p>So how can <code>llcomp</code> help</p>",
        "id": 148237284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988831
    },
    {
        "content": "<p><code>llcomp boundary</code> is a linear map</p>",
        "id": 148237297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988855
    },
    {
        "content": "<p>is the idea to get an expression containing a coercion of <code>llcomp</code>, so that some lemma can see it's linear?</p>",
        "id": 148237322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988879
    },
    {
        "content": "<p>This sounds kind of fragile to me</p>",
        "id": 148237392,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988935
    },
    {
        "content": "<p>why?</p>",
        "id": 148237410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542988961
    },
    {
        "content": "<p>It just does?</p>",
        "id": 148237429,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542988994
    },
    {
        "content": "<p>Easy to imagine the simplifier deciding to rewrite <code>llcomp f g</code> to <code>lcomp f g</code> or whatever</p>",
        "id": 148237431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542989008
    },
    {
        "content": "<p>and then you're stuck</p>",
        "id": 148237433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542989012
    },
    {
        "content": "<p>That would be <code>lcomp g f</code> because of [see above]</p>",
        "id": 148237488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542989049
    },
    {
        "content": "<p>Anyway, I'm sidetracking.</p>",
        "id": 148237490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542989058
    },
    {
        "content": "<p>Ok, I'll just <code>change</code> to the <code>llcomp</code> expression inside my proof.</p>",
        "id": 148237499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542989080
    },
    {
        "content": "<p>What lemma are you using to pull the sum through the composition?</p>",
        "id": 148237843,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542989507
    },
    {
        "content": "<p><code>algebra/module.lean:@[simp] lemma map_sum</code></p>",
        "id": 148237918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542989593
    },
    {
        "content": "<p>That was my plan, at least.</p>",
        "id": 148237921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542989605
    },
    {
        "content": "<p>I see</p>",
        "id": 148237987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542989671
    },
    {
        "content": "<p>hmm</p>",
        "id": 148237989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542989672
    },
    {
        "content": "<p>Maybe it's better to make lemmas like <code>sum_comp</code>/<code>comp_sum</code> phrased in terms of the category composition and then write the proof in terms of those</p>",
        "id": 148238375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542990230
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">100</span>\n</pre></div>\n\n\n<p>I found this at the top of the <code>tensor_product</code> file. That was why the <code>llcomp</code> stuff wasn't working (<span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>)<br>\nSeems a bit fragile indeed...</p>",
        "id": 148243762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542998106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I just pushed some stuff. I can indeed copy most of my previous proof. I need one more little simp-lemma near the end. But I now need to do some other stuff first...</p>",
        "id": 148244765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542999613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Done.</p>",
        "id": 148248147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543004573
    },
    {
        "content": "<p>I just did it too :)</p>",
        "id": 148248153,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543004583
    },
    {
        "content": "<p>Ooh, sorry...</p>",
        "id": 148248159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543004604
    },
    {
        "content": "<p>Are our proofs homotopic?</p>",
        "id": 148248162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543004614
    },
    {
        "content": "<p>Oooh, wait... this isn't HoTT</p>",
        "id": 148248163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543004620
    },
    {
        "content": "<p>They're pretty similar</p>",
        "id": 148248232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543004719
    },
    {
        "content": "<p>I added a bunch of lemmas for bilinearity of composition (without proofs)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/simplicial2/category_theory/examples/modules.lean#L35\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/simplicial2/category_theory/examples/modules.lean#L35\">https://github.com/leanprover-community/mathlib/blob/simplicial2/category_theory/examples/modules.lean#L35</a></p>",
        "id": 148248350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543004924
    },
    {
        "content": "<p>Ok, now I should really get back to sheaves</p>",
        "id": 148248469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543005098
    },
    {
        "content": "<p>But I'm a bit stuck there...</p>",
        "id": 148248476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543005115
    }
]