[
    {
        "content": "<p>Is this in mathlib (or anything like this)? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 134671259,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1537966351
    },
    {
        "content": "<p>this doesn't hold. <code>f</code> needs to be continuous at <code>a</code></p>",
        "id": 134671293,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537966402
    },
    {
        "content": "<p>he's just editing :-)</p>",
        "id": 134671306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537966410
    },
    {
        "content": "<p>Sorry I've just updated it with continuous f</p>",
        "id": 134671321,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1537966433
    },
    {
        "content": "<p>otherwise it is composition of <code>continuous.tendsto</code>, <code>tendsto.comp</code> and <code>H</code></p>",
        "id": 134671367,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537966454
    },
    {
        "content": "<p>Thanks again Johannes. I've never used this stuff before.</p>",
        "id": 134671383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537966473
    },
    {
        "content": "<p>so all I do is offer encouragement and tell Rohan to ask his questions here :-) [he's sitting next to me]</p>",
        "id": 134671392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537966496
    },
    {
        "content": "<p>hehe, peer proving</p>",
        "id": 134671475,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537966570
    },
    {
        "content": "<p>But this lemma is the reason why we use filters. We can express a lot of things as filters, and then just compose them</p>",
        "id": 134671498,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537966605
    },
    {
        "content": "<p>I encourage Rohan to formalise precisely the statement he needs and ask it here. I think that's a good way of learning how to think about Lean.</p>",
        "id": 134671516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537966620
    },
    {
        "content": "<p>He's almost proved the contraction mapping theorem, this is just the last bit.</p>",
        "id": 134671528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537966632
    },
    {
        "content": "<p>I could see it was going to follow from standard filter stuff, I just don't yet know how to drive filters. I am all over the road.</p>",
        "id": 134671615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537966696
    },
    {
        "content": "<p>Brilliant, that worked!</p>",
        "id": 134671746,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1537966809
    },
    {
        "content": "<p>For those reading without typing: the proof that Rohan wanted is <code>tendsto.comp H (H1.tendsto a)</code> This is the point of filters: the limit lemmas don't care whether you take the limit of a sequence at infinity, the limit of a function at a point or whatever</p>",
        "id": 134672107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537967147
    },
    {
        "content": "<p>Extra tip for Rohan: <code>f</code>, <code>seq</code> and <code>a</code> can be implicit arguments, they can be inferred from <code>H</code> and <code>H1</code> by unification</p>",
        "id": 134672226,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537967256
    },
    {
        "content": "<p>a last one: your assumptions that <code>X</code> and <code>Y</code> are metric spaces are useless. You can replace them by <code>topological_space</code> without changing anything else</p>",
        "id": 134672326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537967343
    },
    {
        "content": "<p>Note also that the proof is much shorter than the statement, and very easy to remember, so the final tip may be to erase the lemma...</p>",
        "id": 134672489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537967466
    },
    {
        "content": "<p><code>tendsto (λ (n : ℕ), n + 1) at_top at_top</code></p>",
        "id": 134672534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537967506
    },
    {
        "content": "<p>We're so close :-)</p>",
        "id": 134672542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537967511
    },
    {
        "content": "<p>Do I have to actually unravel things here?</p>",
        "id": 134672559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537967522
    },
    {
        "content": "<p>I did the beginning up to the point where I hate those things:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">s_in</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_at_top_sets</span> <span class=\"n\">at</span> <span class=\"n\">s_in</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">s_in</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">mem_at_top_sets</span><span class=\"o\">],</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134673138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537967954
    },
    {
        "content": "<p>State is now <code> b ≥ a ⊢ b + 1 ≥ a</code></p>",
        "id": 134673171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537967978
    },
    {
        "content": "<p>Of course the <code>change</code> in the middle is purely psychological, you can remove it</p>",
        "id": 134673260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968019
    },
    {
        "content": "<p>Full proof is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">s_in</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_at_top_sets</span> <span class=\"n\">at</span> <span class=\"n\">s_in</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">s_in</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">mem_at_top_sets</span><span class=\"o\">],</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134673463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968193
    },
    {
        "content": "<p>try <code>constructor</code></p>",
        "id": 134673487,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537968213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I guess this is yet another test for mono</p>",
        "id": 134673511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968231
    },
    {
        "content": "<p>Kenny, this works but it's even more ridiculous</p>",
        "id": 134673602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968279
    },
    {
        "content": "<p>The only acceptable answer here is a finishing tactic (mono should do the trick)</p>",
        "id": 134673625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968302
    },
    {
        "content": "<p><code>linarith</code> should work too.</p>",
        "id": 134673662,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1537968336
    },
    {
        "content": "<p>true</p>",
        "id": 134673672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968341
    },
    {
        "content": "<p>It does!</p>",
        "id": 134673741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968372
    },
    {
        "content": "<p>And it's already in mathlib</p>",
        "id": 134673758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968386
    },
    {
        "content": "<p>Do we have the contraction mapping theorem then?</p>",
        "id": 134673780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968411
    },
    {
        "content": "<p>That being said, this proof is still too handcrafted. We should prove a lemma saying that the identity of a linearly_ordered type goes to top at top, and then use a version of squeeze</p>",
        "id": 134673899,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968499
    },
    {
        "content": "<p>I've just finished a very long proof of </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Banach_fixed_point</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_contraction</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 134674225,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1537968723
    },
    {
        "content": "<p>Now you can try to break it into ten lemmas</p>",
        "id": 134674398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537968851
    },
    {
        "content": "<p>I need to go and do real work, but I'll be happy to read your proof once it's available</p>",
        "id": 134674664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537969041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_at_top_sets</span><span class=\"o\">,</span> <span class=\"n\">mem_map_sets_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">},</span> <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134675116,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537969365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">tendsto_def</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">HU</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Ha</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">HU</span> <span class=\"k\">in</span>\n  <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span><span class=\"n\">Ha</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">le_trans</span> <span class=\"n\">Hx</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 134675982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537970073
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_def</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">HU</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Ha</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">HU</span> <span class=\"k\">in</span>\n  <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span><span class=\"n\">Ha</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">le_trans</span> <span class=\"n\">Hx</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 134676038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537970124
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/banach_contraction.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/banach_contraction.lean\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/banach_contraction.lean</a></p>",
        "id": 134677014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537970816
    },
    {
        "content": "<p>He's pushed!</p>",
        "id": 134677027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537970824
    },
    {
        "content": "<p>rofl he has the vmap version of filter so it doesn't compile for me :-) I'll fix it. <span class=\"user-mention\" data-user-id=\"120559\">@Rohan Mitta</span> I'm editing your file so that it compiles with the most recent mathlib</p>",
        "id": 134677164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537970917
    },
    {
        "content": "<p><em>rofl</em> there's still a sorry! Rohan I think you hadn't saved before you pushed :-) OK so the current state of the contraction mapping theorem is that the only finished version is on a laptop owned by an undergraduate who has just gone off to prepare a treasure hunt for Fresher's week.</p>",
        "id": 134677333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537971051
    },
    {
        "content": "<p>Okay whoops, I've saved and pushed again. Hopefully its all there now?</p>",
        "id": 134683456,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1537975802
    },
    {
        "content": "<p>Congratulations Rohan!</p>",
        "id": 134684774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537976987
    }
]