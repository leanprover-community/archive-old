[
    {
        "content": "<p>I want to define/prove some stuff about <code>submodule</code>s (actually <code>lie_subalgebras</code> ultimately, though this is irrelevant) and it seems to be far more convenient to work with a linear embedding than an actual <code>submodule</code>. So I had a poke around and it seems that there is no definition for linear embeddings. Have I missed something, or would this be a welcome addition to Mathlib?</p>",
        "id": 197325470,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589311353
    },
    {
        "content": "<p>The definition / lemmas I have in mind are approximately:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n<span class=\"kn\">structure</span> <span class=\"n\">linear_embedding</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"err\">↪</span> <span class=\"n\">M₂</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"err\">↪ₗ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">R</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">M₂</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">linear_embedding</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"o\">(</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M&#39;</span> <span class=\"err\">↪ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">embedding_range&#39;</span> <span class=\"o\">(</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M&#39;</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">=</span> <span class=\"n\">M&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">range_embedding</span> <span class=\"o\">{</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M&#39;</span> <span class=\"err\">↪ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M&#39;</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 197325620,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589311428
    },
    {
        "content": "<p>(modulo tidy up / naming etc. ofc)</p>",
        "id": 197325767,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589311486
    },
    {
        "content": "<p>Phone doesn't show the notation. Which symbol do you use?</p>",
        "id": 197329837,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589313454
    },
    {
        "content": "<p>\\hookrightarrow with the little l subscript.</p>",
        "id": 197329915,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589313483
    },
    {
        "content": "<p>The arrow is the same as the one already defined for structureless embedding</p>",
        "id": 197329963,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589313502
    },
    {
        "content": "<p>Lgtm.</p>",
        "id": 197330119,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589313566
    },
    {
        "content": "<p>OK thanks, I'll try to put together a PR and see what feedback I get there.</p>",
        "id": 197330147,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589313582
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2668\">https://github.com/leanprover-community/mathlib/pull/2668</a></p>",
        "id": 197345320,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589320693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> I completely agree that it is often a lot more useful to work with an embedding than a substructure. Good move!<br>\nThe downside of your new structure is that you have to reprove lots of basic coercion and simp-lemma stuff. And then again for \"ring embeddings\" and \"group embeddings\" and \"lie algebra embeddings\" etc... An alternative approach to just use a linear map + assumption that it is injective. Have you considered that?</p>",
        "id": 197364452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589338921
    },
    {
        "content": "<p>I wish we had a tactic that magically exports lemmas about a substructure while adjusting some types and coercions.</p>",
        "id": 197370739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589348300
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you have answered my implicit question perfectly, and unbundling properties like injectivity / surjectivity certainly seems like a plausible place to draw the line.</p>",
        "id": 197377930,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589355933
    },
    {
        "content": "<p>The dream would be <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> 's suggestion of automatically creating these lemmas. I don't see any reason why we couldn't do that. Is there a fundamental obstruction or is this just something that has not been important enough yet?</p>",
        "id": 197378247,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589356175
    },
    {
        "content": "<p>Anyway,  I should have some time again in a day or so and I'll try to push ahead with morphisms + injectivity assumption instead. In the meantime I'll close that PR.</p>",
        "id": 197378271,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589356194
    },
    {
        "content": "<p>I think the bottleneck is availability of tactic writing expertise*hours</p>",
        "id": 197380078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589357455
    },
    {
        "content": "<p>Interesting. I currently have zero seconds experience writing tactics but I'd like to learn about it. Maybe in a few weeks when I get to a natural stopping point with the Lie algebra stuff I've been trying to set up, I'll see if I can at least learn enough about tactic writing to understand how challenging this would be.</p>",
        "id": 197380581,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589357815
    },
    {
        "content": "<p>Anyway, I better get back to the day job.</p>",
        "id": 197380589,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589357825
    },
    {
        "content": "<p>Is there some way to make something like this compile?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">embedding_of</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">f</span><span class=\"o\">]:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inj&#39;</span>   <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"err\">⇑</span><span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205281658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595965557
    }
]