[
    {
        "content": "<p>Hello, <br>\nI'm reading a little the theory of degree in <code>data.polynomial</code> and there is a strange object : <code> with_bot \\N</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Do you have an idea to deal with bot ?  For example !  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span>\n<span class=\"kn\">open</span> <span class=\"n\">with_bot</span>\n<span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196812378,
        "sender_full_name": "orlando",
        "timestamp": 1588876401
    },
    {
        "content": "<p>what is <code>bot+1</code> supposed to be in this statement?</p>",
        "id": 196813746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588876980
    },
    {
        "content": "<p>That's true as long as you are talking about nats, and nats embed in <code>with_bot nat</code></p>",
        "id": 196813805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588877016
    },
    {
        "content": "<p>Hello Mario, </p>\n<p>For me  <code>bot + 1 =  bot </code>  so i each case it ok !  <br>\nBut i don't understand who to deal in lean ?   Is there is a file where this arithmetic property are state ?</p>",
        "id": 196816320,
        "sender_full_name": "orlando",
        "timestamp": 1588878176
    },
    {
        "content": "<p>Just do cases on a and b?</p>",
        "id": 196816795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588878376
    },
    {
        "content": "<p>Yep i can cases ... but but but <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rcases</span>  <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n     <span class=\"n\">rw</span> <span class=\"n\">none_eq_bot</span>  <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">some_eq_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">rw</span>  <span class=\"n\">le_bot_iff</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n     <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">none_eq_bot</span>  <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">some_eq_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n     <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">some_eq_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n   <span class=\"n\">not</span> <span class=\"n\">finish</span>\n</code></pre></div>",
        "id": 196818498,
        "sender_full_name": "orlando",
        "timestamp": 1588879240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> Note that there is also <code>nat_degree</code>.</p>",
        "id": 196818556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588879274
    },
    {
        "content": "<p>They are the same, except for the zero polynomial</p>",
        "id": 196818568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588879284
    },
    {
        "content": "<p>Yep Johan, but a  try to use   the theorem   : in    <span class=\"tex-error\">$$ \\C $$</span> all polynomial of  <code>0 &lt; degree </code> have roots ... and i have   to deal i little with <code> degree</code>  <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 196818965,
        "sender_full_name": "orlando",
        "timestamp": 1588879468
    },
    {
        "content": "<p>I little better </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span>  <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">erw</span>  <span class=\"n\">le_bot_iff</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span>  <span class=\"n\">some_le_some</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">some_le_some</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196821297,
        "sender_full_name": "orlando",
        "timestamp": 1588880656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> There is a lemma <code>degree_eq_nat_degree</code>, which is probably useful</p>",
        "id": 196821301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588880658
    },
    {
        "content": "<p>Of course it comes with the assumption that the polynomial is not zero</p>",
        "id": 196821384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588880706
    },
    {
        "content": "<p>perhaps it help me ! I'm trying to make caracteristic polynomial of a matrix. And i  have to proof that the degree of the polynomial is equal to the dimension of the matrix.</p>",
        "id": 196822402,
        "sender_full_name": "orlando",
        "timestamp": 1588881273
    },
    {
        "content": "<p>where is this <code>+</code> even defined?</p>",
        "id": 196823659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588881945
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span>\n</code></pre></div>",
        "id": 196823757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588881983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">o₁</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">o₂</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"bp\">..@</span><span class=\"n\">additive</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I blame Mario</p>",
        "id": 196823795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882003
    },
    {
        "content": "<p>I can't find <code>some x + some y = some (x+y)</code></p>",
        "id": 196823889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882063
    },
    {
        "content": "<p><code>norm_cast</code> won't do it</p>",
        "id": 196823913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882077
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">with_bot</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span>\n\n<span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">none_eq_bot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">bot_add</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">bot_le</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">none_eq_bot</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_bot_iff</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hab</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">some_le_some</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Everything else is easy</p>",
        "id": 196824054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/196823757\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/196823757\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>okay thanks, then the proof is <code>add_le_add_right'</code>.</p>",
        "id": 196824218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> because you don't format your code properly it's difficult for other people to read. You should use <code>{}</code> instead of having multiple goals open at once</p>",
        "id": 196824252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882219
    },
    {
        "content": "<p>I don't know why <code>apply</code> can't apply this or why <code>library_search</code> can't find it though.</p>",
        "id": 196824264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882227
    },
    {
        "content": "<p>Orlando is doing induction on a but the issue isn't going to go away: the other goal is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>It all hinges on <code>some</code> being a monoid hom.</p>",
        "id": 196824526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/196824264\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/196824264\">said</a>:</p>\n<blockquote>\n<p>I don't know why <code>apply</code> can't apply this</p>\n</blockquote>\n<p>Aha, because <code>le</code> is cleverly implemented as a forall/function.</p>",
        "id": 196824563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882436
    },
    {
        "content": "<p>aah, <code>coe_add</code> isn't tagged with one of these <code>norm_cast</code> tags.</p>",
        "id": 196824565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882438
    },
    {
        "content": "<p>Why are you mucking around with casts and stuff?</p>",
        "id": 196824614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882447
    },
    {
        "content": "<p>because I couldn't find the algebraic class which with_bot nat was</p>",
        "id": 196824662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882489
    },
    {
        "content": "<p>It's annoying how hard it is to find instances.</p>",
        "id": 196824707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882520
    },
    {
        "content": "<p>but you're right, it's an <code>ordered_add_comm_monoid</code>.</p>",
        "id": 196824740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span>\n<span class=\"kn\">open</span> <span class=\"n\">with_bot</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">han</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">m</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">han</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196824761,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588882557
    },
    {
        "content": "<p>my proof is shorter than kenny's <span aria-label=\"hole in one\" class=\"emoji emoji-26f3\" role=\"img\" title=\"hole in one\">:hole_in_one:</span></p>",
        "id": 196824820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882572
    },
    {
        "content": "<p>oh</p>",
        "id": 196824861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588882596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">coe_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">o</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>gaargh</p>",
        "id": 196824918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882630
    },
    {
        "content": "<p>that's not what <code>coe_le</code> is supposed to say</p>",
        "id": 196824959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882655
    },
    {
        "content": "<p>proposition to make <code>\\le</code> inductive</p>",
        "id": 196825078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588882716
    },
    {
        "content": "<p>Hopefully it goes better than when I tried to do that to <code>continuous</code>...</p>",
        "id": 196825143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>   ... <code> add_le_add_right' </code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 196825470,
        "sender_full_name": "orlando",
        "timestamp": 1588882935
    },
    {
        "content": "<p>The trick is to realise that it's an <code>ordered_add_comm_monoid</code></p>",
        "id": 196825514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882970
    },
    {
        "content": "<p>Yep Kevin ! That give property ! That good !</p>",
        "id": 196825568,
        "sender_full_name": "orlando",
        "timestamp": 1588883013
    },
    {
        "content": "<p>I see. So somehow the correct way to proceed would have been to say to Lean \"hey Lean, give me the complete list of instances on <code>with_bot nat</code> because I can't remember the axioms for half of them and so don't actually know if it's an ordered semigroup or even if Lean has ordered semigroups\"</p>",
        "id": 196826643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588883631
    },
    {
        "content": "<p>Well, ideally <code>library_search</code> would have simply worked but probably it ran into the apply bug</p>",
        "id": 196826737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588883662
    },
    {
        "content": "<p>But otherwise, yes that would be nice to have.</p>",
        "id": 196826764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588883676
    },
    {
        "content": "<p><code> libraty_search </code> and <code>suggest </code> are nice tactic !!!</p>",
        "id": 196827084,
        "sender_full_name": "orlando",
        "timestamp": 1588883872
    },
    {
        "content": "<p>\"and then tell me all the lemmas which apply to that object\". I see. That's what <code>library_search</code>is supposed to do?</p>",
        "id": 196827220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588883950
    },
    {
        "content": "<p>In 10 years lean will work on his own, we will just have to watch him prove theorems <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 196827589,
        "sender_full_name": "orlando",
        "timestamp": 1588884151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/196826643\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/196826643\">said</a>:</p>\n<blockquote>\n<p>I see. So somehow the correct way to proceed would have been to say to Lean \"hey Lean, give me the complete list of instances on <code>with_bot nat</code> because I can't remember the axioms for half of them and so don't actually know if it's an ordered semigroup or even if Lean has ordered semigroups\"</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">env_fold</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">get_env</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">((</span><span class=\"n\">return</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">result</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">result</span><span class=\"bp\">.</span><span class=\"n\">exception</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">monad</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_all_classes</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">env_fold</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">mcond</span> <span class=\"o\">(</span><span class=\"n\">is_class</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span> <span class=\"o\">(</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">univ_params</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">list_instances</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">get_all_classes</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mfoldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">e&#39;</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n    <span class=\"n\">mk_instance</span> <span class=\"n\">e&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e&#39;</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"bp\">.</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">list_instances</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_expr</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list_instances</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"n\">trace</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">list_instances</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">list_instances</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 196835021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588888347
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">add_semigroup</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_sub</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">inhabited</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">add_monoid</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_well_founded</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">semigroup</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_lt</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_to_tactic_format</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">decidable_linear_ordered_cancel_add_comm_monoid</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_to_format</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_one</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">monoid</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">preorder</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">add_comm_monoid</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">add_comm_semigroup</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_zero</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_mod</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">comm_semigroup</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">zero_ne_one_class</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_sizeof</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">reflected</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_le</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_repr</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">comm_monoid</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">nonempty</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">linear_order</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">distrib</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_to_string</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">add_right_cancel_semigroup</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">ordered_semiring</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">decidable_linear_order</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_add</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">mul_zero_class</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_dvd</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">semiring</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_mul</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">has_div</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">add_left_cancel_semigroup</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">decidable_linear_ordered_semiring</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">linear_ordered_semiring</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">comm_semiring</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">partial_order</span> <span class=\"bp\">ℕ</span>\n</code></pre></div>",
        "id": 196835028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588888355
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">list_instances</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">trivial</span><span class=\"o\">}</span>\n<span class=\"c1\">-- add_semigroup (with_bot ℕ)</span>\n<span class=\"c1\">-- inhabited (with_bot ℕ)</span>\n<span class=\"c1\">-- semilattice_sup_bot (with_bot ℕ)</span>\n<span class=\"c1\">-- add_monoid (with_bot ℕ)</span>\n<span class=\"c1\">-- has_well_founded (with_bot ℕ)</span>\n<span class=\"c1\">-- has_lt (with_bot ℕ)</span>\n<span class=\"c1\">-- has_to_tactic_format (with_bot ℕ)</span>\n<span class=\"c1\">-- lattice (with_bot ℕ)</span>\n<span class=\"c1\">-- has_sup (with_bot ℕ)</span>\n<span class=\"c1\">-- ordered_add_comm_monoid (with_bot ℕ)</span>\n<span class=\"c1\">-- has_to_format (with_bot ℕ)</span>\n<span class=\"c1\">-- has_one (with_bot ℕ)</span>\n<span class=\"c1\">-- distrib_lattice (with_bot ℕ)</span>\n<span class=\"c1\">-- preorder (with_bot ℕ)</span>\n<span class=\"c1\">-- add_comm_monoid (with_bot ℕ)</span>\n<span class=\"c1\">-- add_comm_semigroup (with_bot ℕ)</span>\n<span class=\"c1\">-- has_zero (with_bot ℕ)</span>\n<span class=\"c1\">-- has_bot (with_bot ℕ)</span>\n<span class=\"c1\">-- has_sizeof (with_bot ℕ)</span>\n<span class=\"c1\">-- semilattice_inf (with_bot ℕ)</span>\n<span class=\"c1\">-- reflected (with_bot ℕ)</span>\n<span class=\"c1\">-- has_le (with_bot ℕ)</span>\n<span class=\"c1\">-- nonempty (with_bot ℕ)</span>\n<span class=\"c1\">-- linear_order (with_bot ℕ)</span>\n<span class=\"c1\">-- decidable_linear_order (with_bot ℕ)</span>\n<span class=\"c1\">-- semilattice_inf_bot (with_bot ℕ)</span>\n<span class=\"c1\">-- has_add (with_bot ℕ)</span>\n<span class=\"c1\">-- semilattice_sup (with_bot ℕ)</span>\n<span class=\"c1\">-- has_inf (with_bot ℕ)</span>\n<span class=\"c1\">-- order_bot (with_bot ℕ)</span>\n<span class=\"c1\">-- partial_order (with_bot ℕ)</span>\n</code></pre></div>",
        "id": 196835270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588888506
    },
    {
        "content": "<p>Oh this was the thing that was called ordered_comm_monoid which confused the perfectoid project? How come there's no ordered_monoid?</p>",
        "id": 196840461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588892069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> In mathlib/core what used to be called an <code>ordered_monoid</code> is now called <code>ordered_add_monoid</code>. Once <code>norm_num</code> is out of core, we can refactor everything and also have (multiplicative) <code>ordered_monoid</code>s.<br>\nOf course we could have them now, but not with all the nice <code>to_additive</code> machinery. That's why the <code>norm_num</code> PR is important.</p>",
        "id": 196855342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588909685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/196824707\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/196824707\">said</a>:</p>\n<blockquote>\n<p>It's annoying how hard it is to find instances.</p>\n</blockquote>\n<p>With the new widget stuff by <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> this will hopefully be a lot easier soon. It's really ironic that the goal window has all this information (in principle), but is only showing us a really nice <code>pp</code> version. And if you ask for the raw stuff, that's what you get. A brutal flood of <span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span>  (-;</p>\n<p>Anyway, in the mean time: what about a command <code>#find_instance</code> that just like <code>#simp</code> uses variables that have been declared in the context, so that you can do things like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find_instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find_instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>etc...</p>",
        "id": 196855434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588909880
    },
    {
        "content": "<p>Hello, just to understand the mecanism of coersion. Is there is a quick way to do that ? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">cast_bot&#39;</span>   <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>   <span class=\"err\">???</span>\n</code></pre></div>",
        "id": 196960343,
        "sender_full_name": "orlando",
        "timestamp": 1588979112
    },
    {
        "content": "<p>If you had used the notation for <code>nat.cast</code> I think <code>simp</code> would solve it. Otherwise, I think it would have to be done by induction on <code>a</code> if it isn't in the library.</p>",
        "id": 196961450,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588980290
    },
    {
        "content": "<p>There's two coercion from nat to <code>with_bot nat</code>, and you should usually just use the higher priority <code>with_bot</code> coercion. Most of the necessary lemmas are in the <code>with_bot</code> namespace.</p>",
        "id": 196961546,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588980413
    },
    {
        "content": "<p>Ok for the two coersion, so the definition is <code> with_bot</code> not <code>nat.cast </code> !    Thx !</p>",
        "id": 196963421,
        "sender_full_name": "orlando",
        "timestamp": 1588982691
    },
    {
        "content": "<p>I think the trick is to find out which one is used in the library and then to always use that one, and to always use it in the exact syntactic form which is in the library, because if you don't then <code>simp</code> will not work</p>",
        "id": 196978005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  : In theory, i understand ! But i practice i have some difficulty  for example at the last proof  i can't finish the proof without a conversion  <code> int.cast vs bot_cast </code>.  </p>\n<p>The tactic state before <code> cast_with_bot </code> is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">hyp_lc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">monic</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ℓ</span><span class=\"o\">),</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">s</span><span class=\"o\">)</span>   <span class=\"c1\">----- AHHAHAHAHAHAHAHAH  :upside_down:</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">polynomial</span> <span class=\"n\">with_bot</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span>\n          <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_monic</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">monic</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n                <span class=\"n\">monic</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">s</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">))</span>  <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n      <span class=\"n\">erw</span> <span class=\"n\">prod_empty</span> <span class=\"n\">at</span>  <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">leading_coeff_C</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">ℓ</span>  <span class=\"n\">s</span> <span class=\"n\">hyp&#39;</span> <span class=\"n\">hyp_rec</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_insert</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">),</span>\n       <span class=\"n\">exact</span> <span class=\"n\">monic_mul</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>  <span class=\"n\">hyp_rec</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n <span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">degree_prod_monic</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_lc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">monic</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ℓ</span> <span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">s</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span>  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n          <span class=\"n\">rw</span> <span class=\"n\">prod_empty</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">degree_C</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">ℓ</span>  <span class=\"n\">s</span> <span class=\"n\">hyp&#39;</span> <span class=\"n\">hyp_rec</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_insert</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hyp_rec</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">degree_mul_eq&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n            <span class=\"n\">rw</span>  <span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hyp_lc</span> <span class=\"n\">ℓ</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span>  <span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">prod_monic</span> <span class=\"n\">s</span> <span class=\"n\">φ</span> <span class=\"n\">hyp_lc</span><span class=\"o\">),</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cast_with_bot</span>   <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">a</span><span class=\"o\">),</span>  <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ℓ</span>  <span class=\"n\">hyp_rec</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">ℓ</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">hyp_rec</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">coeff_prod_nat&#39;</span>  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">degree</span><span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ℓ</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_lc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">monic</span><span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>   <span class=\"c1\">-- monic !</span>\n  <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">s</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span>  <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">degree_prod_monic</span> <span class=\"n\">s</span> <span class=\"n\">φ</span>  <span class=\"n\">hyp_lc</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_lhs</span><span class=\"o\">{</span>\n        <span class=\"n\">apply_congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hyp</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">,</span>  <span class=\"n\">rw</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_one</span><span class=\"o\">,</span>\n                                            <span class=\"c1\">---- here i have to use nat.cast = with_bot coe  HERE</span>\n      <span class=\"n\">refine</span> <span class=\"n\">cast_with_bot</span>  <span class=\"bp\">_</span> <span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196978641,
        "sender_full_name": "orlando",
        "timestamp": 1589009868
    },
    {
        "content": "<p>Maybe sometimes it is unavoidable?</p>",
        "id": 196978749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010024
    },
    {
        "content": "<p>Maybe there is a missing <code>simp</code> lemma though?</p>",
        "id": 196978788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010063
    },
    {
        "content": "<p>I am not an expert in <code>simp</code> but maybe one should expect <code>norm_cast</code> to solve this. Unfortunately I just regard <code>norm_cast</code> as magic</p>",
        "id": 196978842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010172
    },
    {
        "content": "<p>i try all the <code> simp hint library_search and suggest </code>  before understanding that the first coersion is <code>nat.cast</code> and the second <code>bot_cast </code></p>",
        "id": 196978847,
        "sender_full_name": "orlando",
        "timestamp": 1589010193
    },
    {
        "content": "<p>So I don't know whether <code>norm_cast</code> should be taught to solve this or whether it is not its job</p>",
        "id": 196978858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010216
    },
    {
        "content": "<p><code> hint </code> give me a command<code>unfold_coes </code> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 196978860,
        "sender_full_name": "orlando",
        "timestamp": 1589010225
    },
    {
        "content": "<p>there should be a theorem that says they are the same</p>",
        "id": 196978862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010227
    },
    {
        "content": "<p>But should the user be required to know its name?</p>",
        "id": 196978903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010247
    },
    {
        "content": "<p>first the theorem, then the fancy</p>",
        "id": 196978908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010264
    },
    {
        "content": "<p>Because I am always confused about whether it's cast or coe, and which namespace it's in</p>",
        "id": 196978911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010284
    },
    {
        "content": "<p>are we sure the theorem even exists?</p>",
        "id": 196978912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010286
    },
    {
        "content": "<p>because if it doesn't I won't expect the tactics to find the proof</p>",
        "id": 196978922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010304
    },
    {
        "content": "<p>I don't know enough about <code>simp</code> to know how to even state the lemma</p>",
        "id": 196978933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010353
    },
    {
        "content": "<p>I don't know exactly what the lemma is here, something about with_bot?</p>",
        "id": 196978988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010394
    },
    {
        "content": "<p>i don't see  <code> nat.coe = bot_coe </code> theorem in mathlib</p>",
        "id": 196978989,
        "sender_full_name": "orlando",
        "timestamp": 1589010405
    },
    {
        "content": "<p>does that even typecheck?</p>",
        "id": 196978994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010428
    },
    {
        "content": "<p>This is all part of the CS machinery which I don't have much of an understanding of. I am not even 100% sure that <code>norm_cast</code> should do it, but I guess that would be my instinct</p>",
        "id": 196978996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010438
    },
    {
        "content": "<p>what are the types</p>",
        "id": 196978997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010440
    },
    {
        "content": "<p>And I wouldn't know how to make it do it if it didn't</p>",
        "id": 196979000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589010459
    },
    {
        "content": "<p>there is a mathematical part of this to be dealt with before the tactics can take over</p>",
        "id": 196979004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010467
    },
    {
        "content": "<p>This is ok </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">cast_with_bot</span>   <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">a</span><span class=\"o\">),</span>  <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ℓ</span>  <span class=\"n\">hyp_rec</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">ℓ</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">hyp_rec</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196979007,
        "sender_full_name": "orlando",
        "timestamp": 1589010481
    },
    {
        "content": "<p>just over nat though?</p>",
        "id": 196979045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010499
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2636\" title=\"https://github.com/leanprover-community/mathlib/issues/2636\">#2636</a></p>",
        "id": 196980139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589012229
    },
    {
        "content": "<p>It's apparently not eligible for any kind of <code>*_cast</code> tactic, but it can be a simp lemma</p>",
        "id": 196980196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589012287
    },
    {
        "content": "<p>Youppi : i finish the first part of <a href=\"https://github.com/Or7ando/group_representation/tree/master/caracteristique_pol\" title=\"https://github.com/Or7ando/group_representation/tree/master/caracteristique_pol\">caracteristic polynomial</a>  <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"kn\">theorem</span>  <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">A</span>  <span class=\"o\">):</span>  <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span>  <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">det</span> <span class=\"o\">(</span> <span class=\"n\">M</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"err\">•</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">ℂ</span> <span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 197004119,
        "sender_full_name": "orlando",
        "timestamp": 1589047633
    },
    {
        "content": "<p>Congratulations!</p>",
        "id": 197004186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047689
    },
    {
        "content": "<p>So now we know that eigenvalues exist (-;</p>",
        "id": 197004209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047737
    },
    {
        "content": "<p>What is the determinant of a 0x0 matrix?</p>",
        "id": 197004226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047747
    },
    {
        "content": "<p>I guess it's 1</p>",
        "id": 197004267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/197004209\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/197004209\">said</a>:</p>\n<blockquote>\n<p>So now we know that eigenvalues exist (-;</p>\n</blockquote>\n<p>we don't know that C is alg. closed</p>",
        "id": 197004358,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589047843
    },
    {
        "content": "<p>We do</p>",
        "id": 197004365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047850
    },
    {
        "content": "<p>Chris did that ages ago</p>",
        "id": 197004377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/197004267\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/197004267\">said</a>:</p>\n<blockquote>\n<p>I guess it's 1</p>\n</blockquote>\n<p>yes</p>",
        "id": 197004378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589047855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/197004377\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/197004377\">said</a>:</p>\n<blockquote>\n<p>Chris did that ages ago</p>\n</blockquote>\n<p>wait what</p>",
        "id": 197004385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589047863
    },
    {
        "content": "<p>We don't have algebraic closures, but we do know what an algebraically closed field is</p>",
        "id": 197004409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>   hum : it's a sum over the permutation of empty set ... so  a sum with one term ! so it's one  i think !</p>",
        "id": 197004421,
        "sender_full_name": "orlando",
        "timestamp": 1589047899
    },
    {
        "content": "<p>Maybe we don't have a type class <code>[algebraically_closed K]</code>, but we have FTA</p>",
        "id": 197004427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> Does your proof work for arbitrary alg closed fields?</p>",
        "id": 197004470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047933
    },
    {
        "content": "<p>If so, we quickly need to add that typeclass</p>",
        "id": 197004476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589047942
    },
    {
        "content": "<p>The theorem FTA i s in the file : The theorem  is in the file  <code> analysis.complex.polynomial </code></p>",
        "id": 197004508,
        "sender_full_name": "orlando",
        "timestamp": 1589048013
    },
    {
        "content": "<p>Yes a think it's ok  for all algebraicly closed field</p>",
        "id": 197004587,
        "sender_full_name": "orlando",
        "timestamp": 1589048056
    },
    {
        "content": "<p>what was the proof?</p>",
        "id": 197004598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589048070
    },
    {
        "content": "<p>Of what?</p>",
        "id": 197004611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589048079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> Are you planning to PR this?</p>",
        "id": 197004620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589048088
    },
    {
        "content": "<p>of FTA</p>",
        "id": 197004671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589048130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 197004687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589048144
    },
    {
        "content": "<p>Congratulations!!</p>",
        "id": 197004712,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589048161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  : i have to simplify ! It's very complicated with the sum and the product of the determinant.  </p>\n<p>Thx <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 197004797,
        "sender_full_name": "orlando",
        "timestamp": 1589048234
    },
    {
        "content": "<p>I think there's even a link to the proof I used in the file. I did it well over a year ago.</p>",
        "id": 197004798,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589048240
    },
    {
        "content": "<p>yeah you linked to <a href=\"https://ncatlab.org/nlab/show/fundamental+theorem+of+algebra#classical_fta_via_advanced_calculus\" title=\"https://ncatlab.org/nlab/show/fundamental+theorem+of+algebra#classical_fta_via_advanced_calculus\">https://ncatlab.org/nlab/show/fundamental+theorem+of+algebra#classical_fta_via_advanced_calculus</a></p>",
        "id": 197004804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589048256
    },
    {
        "content": "<p>aha, you proof the open mapping theorem specifically for polynomials</p>",
        "id": 197004824,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589048274
    },
    {
        "content": "<p>which does not require complex analysis</p>",
        "id": 197004866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589048286
    },
    {
        "content": "<p>therefore the minimum (which exists by O analysis) must be 0</p>",
        "id": 197004870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589048302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> I strongly encourage you to PR this</p>",
        "id": 197005126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589048552
    },
    {
        "content": "<p><code>theorem jenesaispas</code>, nice (-;<br>\nIt will need some cleaning up and unfrenchyfying <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 197005292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589048741
    },
    {
        "content": "<p>Shouldn't that be <code>theorem je_ne_sais_pas</code>?</p>",
        "id": 197005765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589049270
    },
    {
        "content": "<p>Je ne sais pas...</p>",
        "id": 197005788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589049349
    },
    {
        "content": "<p>I have no idea of  name at the end <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 197005914,
        "sender_full_name": "orlando",
        "timestamp": 1589049595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/197004209\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/197004209\">said</a>:</p>\n<blockquote>\n<p>So now we know that eigenvalues exist (-;</p>\n</blockquote>\n<p>Isn't it sad to use determinants for that?</p>",
        "id": 197011223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589056123
    },
    {
        "content": "<p>Congratulations to Orlando anway!</p>",
        "id": 197011285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589056184
    },
    {
        "content": "<p>Now you can start a very important part of your initiation to Lean. Turning this mess into a merged mathlib PR will teach you at least as much Lean as what you learned up to now.</p>",
        "id": 197011399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589056251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/197011399\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/197011399\">said</a>:</p>\n<blockquote>\n<p>Now you can start a very important part of your initiation to Lean. Turning this mess into a merged mathlib PR will teach you at least as much Lean as what you learned up to now.</p>\n</blockquote>\n<p>I couldn't agree with this more!</p>",
        "id": 197012015,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589057143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  : There is a long way to go to understand lean and mathlib. I have been using lean for two months and even if I have made progress, I am not really comfortable with it! Always a feeling of not understanding how it works. But that fun and i have time <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 197013154,
        "sender_full_name": "orlando",
        "timestamp": 1589058798
    },
    {
        "content": "<p>My first PR was the complex numbers and it got changed a huge amount before it was accepted. It's a very interesting experience!</p>",
        "id": 197016159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589061979
    }
]