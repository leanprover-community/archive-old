[
    {
        "content": "<p>Over in <a class=\"stream\" data-stream-id=\"267928\" href=\"/#narrow/stream/267928-condensed-mathematics\">#condensed mathematics</a> we've been discussing gradings on a ring. There seems to be an almost lattice-theoretic part to the definition: an M-grading (M an add_comm_monoid) on a ring R is a map from M to the lattice of add_subgroups of R which (amongst other things) induces an isomorphism of add_comm_groups between the direct sum of the subgroups and R. It seems that there is a purely lattice-theoretic way to say this: we want the Sup of all the subgroups to be top, and we want the inf of (one subgroup) and (the Sup of all the other subgroups) to be bot. It almost feels like this is some kind of \"basis\" for the lattice. Is this a thing in lattice theory? Is this something to do with matroids <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> ? Rather annoyingly, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a> works with sets of elements rather than maps from a type (rather like the issue we had with bases of a vector space recently).</p>",
        "id": 234368041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618334864
    },
    {
        "content": "<p>The thread in question starts <a href=\"#narrow/stream/267928-condensed-mathematics/topic/toric/near/234331187\">about here in <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>'s message</a></p>",
        "id": 234368433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618335002
    },
    {
        "content": "<p>The proposal so far is to refactor <code>independent</code> so that it works with an indexed family but just to spell out <code>independent</code> and <code>span</code> explicitly, lattice-theoretically, however if there's something there already it might be possible to use it</p>",
        "id": 234368548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618335036
    },
    {
        "content": "<p>Comparing the definitions, this is what we have in mathlib today:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">independent</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">disjoint</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}))</span>\n</code></pre></div>\n<p>and this I think is the indexed alternative we're wishing we had:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">independent'</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">⦄,</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234369122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618335251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Gradings.20on.20a.20ring/near/234368041\">said</a>:</p>\n<blockquote>\n<p>Over in <a class=\"stream\" data-stream-id=\"267928\" href=\"/#narrow/stream/267928-condensed-mathematics\">#condensed mathematics</a> we've been discussing gradings on a ring. There seems to be an almost lattice-theoretic part to the definition: an M-grading (M an add_comm_monoid) on a ring R is a map from M to the lattice of add_subgroups of R which (amongst other things) induces an isomorphism of add_comm_groups between the direct sum of the subgroups and R. It seems that there is a purely lattice-theoretic way to say this: we want the Sup of all the subgroups to be top, and we want the inf of (one subgroup) and (the Sup of all the other subgroups) to be bot. It almost feels like this is some kind of \"basis\" for the lattice. Is this a thing in lattice theory? Is this something to do with matroids <span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> ? Rather annoyingly, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a> works with sets of elements rather than maps from a type (rather like the issue we had with bases of a vector space recently).</p>\n</blockquote>\n<p>When you say 'direct sum of the subgroups', which collection of subgroups are you summing over?</p>",
        "id": 234370353,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1618335711
    },
    {
        "content": "<p>I'm struggling to tidily prove it, but <code>independent s ↔ independent' (coe : s → α)</code>, so clearly the primed version is more powerful</p>",
        "id": 234370545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618335777
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Don't PR this without cleanup!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">independent_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">independent</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">independent'</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">independent</span> <span class=\"n\">independent'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set_coe.forall</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">set.has_coe_to_sort</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">supr_subtype</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Sup_eq_supr</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">supr_and</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 234370894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618335918
    },
    {
        "content": "<p>We could also forget about all the independence business completely and take a function <code>M \\to subgroup R</code>, say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>↦</mo><msub><mi>H</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">m \\mapsto H_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that the canonical map<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨁</mo><mrow><mi>m</mi><mo>∈</mo><mi>M</mi></mrow></msub><msub><mi>H</mi><mi>m</mi></msub><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\"> \\bigoplus_{m \\in M} H_m \\to R </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨁</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17862099999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span><br>\nis bijective</p>",
        "id": 234371834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618336319
    },
    {
        "content": "<p><del>Well, I guess we need to ensure that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are nontrivial</del></p>",
        "id": 234371957,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618336357
    },
    {
        "content": "<p>Actually I now think the independence condition is not what we want anyway! What if I want to consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k[X]/(X^2)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>-graded ring whose components in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\geq 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> are all trivial?</p>",
        "id": 234372639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618336635
    },
    {
        "content": "<p>The collection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>⋅</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{k, x \\cdot k[X]/(X^2), 0, 0, \\ldots\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">}</span></span></span></span> is not an independent collection of subgroups of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k[X]/(X^2)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 234372855,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618336722
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">--rename me</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp.sum_add_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">grading</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">graded_part</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"n\">graded_part</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">grading_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">graded_part</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">grading_mul</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">graded_part</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">graded_part</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">graded_part</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 234375940,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618337928
    },
    {
        "content": "<p>I might go further and require an explicit inverse</p>",
        "id": 234384758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618341455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Gradings.20on.20a.20ring/near/234372855\">said</a>:</p>\n<blockquote>\n<p>The collection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>⋅</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{k, x \\cdot k[X]/(X^2), 0, 0, \\ldots\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">}</span></span></span></span> is not an independent collection of subgroups of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k[X]/(X^2)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n</blockquote>\n<p>Isn't it? The zero subgroup should be disjoint from everything</p>",
        "id": 234384945,
        "sender_full_name": "David Wärn",
        "timestamp": 1618341523
    },
    {
        "content": "<p>I mean, I guess it depends on the definition?</p>",
        "id": 234385366,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618341694
    },
    {
        "content": "<p>But I guess you're right <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> with the way independence is defined now</p>",
        "id": 234385501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618341738
    },
    {
        "content": "<p>Another issue that came up is that independence is defined for sets and not parameterized families, so one would have to enforce some injectivity condittion on the family to make it compatible with the set-wise definition, and having multiple 0's as above would break this.</p>",
        "id": 234385690,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618341829
    },
    {
        "content": "<p>Aha. Yes, we need the indexed-family version of independence to make sense of this example</p>",
        "id": 234386079,
        "sender_full_name": "David Wärn",
        "timestamp": 1618341987
    },
    {
        "content": "<p>I posted a version of that above</p>",
        "id": 234386115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618342007
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> 's comment shows that independence (for objects in a lattice) really does need to be defined in terms of families and not sets ;))</p>",
        "id": 234386207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618342042
    },
    {
        "content": "<p>I think if we add a tidy version of spoiler'd lemma, it should be easy to change the definition in mathlib</p>",
        "id": 234386216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618342046
    },
    {
        "content": "<p>(and punt actually changing the downstream statements to a future PR)</p>",
        "id": 234386266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618342075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> what imports am I missing from your spoiler code?</p>",
        "id": 234386531,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618342175
    },
    {
        "content": "<p>Right, <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>'s example shows injectivity may be too strong a constraint</p>",
        "id": 234386534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618342176
    },
    {
        "content": "<p><code>order.complete_lattice</code></p>",
        "id": 234386578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618342199
    },
    {
        "content": "<p>I was taught the terminology \"internal / external direct sum\" (in the binary case). The external direct sum is the explicit <code>finsupp</code> construction. An internal direct sum is when you have some submodules of a given module. You can define it either as \"the canonical map from the external direct sum is an isomorphism\", or as \"together the submodules span the entire module, and moreover they are independent\"</p>",
        "id": 234387049,
        "sender_full_name": "David Wärn",
        "timestamp": 1618342390
    },
    {
        "content": "<p>I assume you mean <code>dfinsupp</code> not <code>finsupp</code>?</p>",
        "id": 234387350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618342528
    },
    {
        "content": "<p>Note that \"internal direct sum\" is a missing item in undergrad.yaml</p>",
        "id": 234387550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618342617
    },
    {
        "content": "<p>It is missing, because it's such an awkard notion... it asserts two things at the same time.</p>",
        "id": 234388224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618342976
    },
    {
        "content": "<p>Also, is \"internal direct sum\" just a predicate on two submodules? Or is it a predicate + a construction?</p>",
        "id": 234388299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618343023
    },
    {
        "content": "<p>It should be a subsingleton at least. Normally you'd use it for two submodules but in this situation we have an <code>M</code>-indexed family of submodules</p>",
        "id": 234388471,
        "sender_full_name": "David Wärn",
        "timestamp": 1618343102
    },
    {
        "content": "<p>Right now I'm torn between the \"map from direct sum is bijective\" and  (<code>independent'</code> + \"Sup = top\" ). Maybe it doesn't matter what the definition is because probably it should be proved that they're the same thing</p>",
        "id": 234388543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618343121
    },
    {
        "content": "<p>How about a statement <code>submodule.direct_sum_is_internal X</code> that states what adam put in his definition about a family X?</p>",
        "id": 234388877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618343214
    },
    {
        "content": "<p>And ditto for <code>submonoid</code> and <code>subgroup</code></p>",
        "id": 234388907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618343231
    },
    {
        "content": "<p>Aargh I think that people might allow internal direct sum of two subgroups of a noncommutative group :-/</p>",
        "id": 234388914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618343235
    },
    {
        "content": "<p>Two is just a direct sum over bool :)</p>",
        "id": 234388995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618343258
    },
    {
        "content": "<p>Maybe that's \"internal product\"?</p>",
        "id": 234389024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618343270
    },
    {
        "content": "<p>No the issue here is that the underlying monoid law might not be abelian</p>",
        "id": 234389129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618343298
    },
    {
        "content": "<p>Why does that matter?</p>",
        "id": 234389188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618343315
    },
    {
        "content": "<p>The monoid law has nothing to do with the direct sum issue,</p>",
        "id": 234389221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343327
    },
    {
        "content": "<p>it only comes in play in the compatibility with the ring structure</p>",
        "id": 234389253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343341
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">--rename me</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp.sum_add_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">grading</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">graded_part</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"n\">graded_part</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">graded_ring</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">grading</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">grading_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">graded_part</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">grading_mul</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">graded_part</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">graded_part</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">graded_part</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 234389540,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343464
    },
    {
        "content": "<p>Just to be clear, I am talking about the assertion that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are normal subgroups of a group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">G=AB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">A\\cap B=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\times B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and I was suggesting that \"internal direct sum\" might cover this situation, whereas nothing we're doing does.</p>",
        "id": 234389682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618343526
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 234389741,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343548
    },
    {
        "content": "<p>This can be done in any category with coproducts, and subobjects which form a complete lattice</p>",
        "id": 234389761,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343557
    },
    {
        "content": "<p>But I'm rather hoping that this is \"internal direct product\" :-)</p>",
        "id": 234389792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618343572
    },
    {
        "content": "<p>Yes product and sum of groups are not the same</p>",
        "id": 234389848,
        "sender_full_name": "David Wärn",
        "timestamp": 1618343593
    },
    {
        "content": "<p>But the issue is that the universal property of the product tells you how to map into it, not map out of it.</p>",
        "id": 234390042,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343664
    },
    {
        "content": "<p>Groups are awful</p>",
        "id": 234390059,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343674
    },
    {
        "content": "<p>Internal direct product should not be a thing</p>",
        "id": 234390172,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343722
    },
    {
        "content": "<p>since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Z \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> gives <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>∐</mo><mi>Z</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\coprod Z \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∐</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></p>",
        "id": 234390235,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343744
    },
    {
        "content": "<p>I think for internal direct product you might want a family of quotients instead of subobjects</p>",
        "id": 234390311,
        "sender_full_name": "David Wärn",
        "timestamp": 1618343763
    },
    {
        "content": "<p>I guess you could parameterize the quotients of a group by the normal subgroups, and go that way</p>",
        "id": 234390478,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618343790
    },
    {
        "content": "<p>Great -- if it shouldn't happen then I'm sure the French wouldn't be teaching it, they know what they're talking about. I'll stick to arbitrary internal direct sums and throw something into <code>submonoid</code> of a <code>comm_monoid</code>.</p>",
        "id": 234390533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618343818
    },
    {
        "content": "<p>Anyway internal direct sums of submodules should be useful in other situations? They naturally generalize bases, and there are nice theorems like. \"a f.d. complex representation of a finite group is the internal direct sum of its isotypical components\", and \"a f.d. complex vector space with an endomorphism is the internal direct sum of its generalised eigenspaces\"</p>",
        "id": 234391397,
        "sender_full_name": "David Wärn",
        "timestamp": 1618344114
    },
    {
        "content": "<p>Yes, I was really struck earlier about how one condition was called <code>independent'</code> and the other one <code>span</code> -- somehow I'd not put two and two together before</p>",
        "id": 234392128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618344375
    },
    {
        "content": "<p>Ok so the plan is: refactor <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a> so that it takes an indexed family not a subset, prove that an indexed family of submonoids of a commutative monoid are independent iff the map from the direct sum is injective, the family spans iff the direct sum is surjective, do everything for additive monoids too, tick off internal direct sums in the undergraduate yaml, and then define a grading by a (not nec commutative) monoid on a (not necc commutative) semiring as an internal direct sum by additive submonoids (plus a couple of extra axioms saying that 1 and * play well with the monoid map). Thanks for the help everyone and let me know if I've missed something.</p>",
        "id": 234392945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618344756
    },
    {
        "content": "<p>Using the <code>bijective</code> definition, do we want <a href=\"https://github.com/leanprover-community/mathlib/issues/7190\">#7190</a> so that we can tick off the item in undergrad.yaml?</p>",
        "id": 234510056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618411284
    },
    {
        "content": "<p>Given the context in the yaml, I'm wondering whether it should point to the submodule definition (everything else seems to be about vector spaces).</p>",
        "id": 234510586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618411458
    }
]