[
    {
        "content": "<p>The rule in general for equality lemmas in Lean seems to be \"more complicated thing on the left, less complicated thing on the right\". So how come <code>add_assoc : a + b + c = a + (b + c)</code>? The right hand side is more brackety than the left.</p>",
        "id": 166011379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558251561
    },
    {
        "content": "<p>that's a reflection of the defined associativity in the parser, not the complexity of the expression. Both sides have the same complexity</p>",
        "id": 166011629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558251978
    },
    {
        "content": "<p>Aah, if I think of things in terms of trees then I don't see the brackets.</p>",
        "id": 166011634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558252005
    },
    {
        "content": "<p>So is this a bug in the parser? ;-)</p>",
        "id": 166011637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558252015
    },
    {
        "content": "<p>Lean 3.5.0c ;)</p>",
        "id": 166011762,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558252237
    },
    {
        "content": "<p>Yeah maybe they could knock up some way of being able to switch between parsers so we could choose our associativities to suit.</p>",
        "id": 166011772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558252306
    },
    {
        "content": "<p>it's because <code>+</code> is defined as <code>infix `+`:65 := has_add.add</code> instead of <code>infixr `+`:65 := has_add.add</code></p>",
        "id": 166012153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558253022
    },
    {
        "content": "<p>This I understand. What I am confused about is why the \"general rule\" is not applied in this setting.</p>",
        "id": 166012258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558253089
    }
]