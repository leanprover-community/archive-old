[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">union_basis_elemnts_of_open</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">HB</span> <span class=\"o\">:</span> <span class=\"n\">is_topological_basis</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">HU</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">},</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_basis_subset_of_mem_open</span> <span class=\"n\">HB</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"n\">HU</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">g1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">Hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">Hy</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n        <span class=\"n\">existsi</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Hy</span> <span class=\"k\">with</span> <span class=\"n\">V</span> <span class=\"n\">HV</span><span class=\"o\">,</span><span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">HV</span> <span class=\"n\">Hy</span><span class=\"o\">,</span><span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">Hi</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"err\">←</span><span class=\"n\">Hi</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"n\">i</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126495112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211045
    },
    {
        "content": "<p>That's the sort of proof I find very easy to write nowadays in tactic mode.</p>",
        "id": 126495116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211065
    },
    {
        "content": "<p>At its heart though is a triviality.</p>",
        "id": 126495122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211072
    },
    {
        "content": "<p><code>mem_basis_subset_of_mem_open</code> says</p>",
        "id": 126495124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211098
    },
    {
        "content": "<p>you shouldn't use <code>let</code> for propositions (<code>f0</code>, <code>f1</code>, <code>g1</code>)</p>",
        "id": 126495167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526211143
    },
    {
        "content": "<p>for every element <code>x</code> of an open set <code>U</code>, there's some basis element <code>V</code> with <code>x \\in V</code> and <code>V \\sub U</code></p>",
        "id": 126495169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211151
    },
    {
        "content": "<p>So it's one of those things which is in some sense completely trivial</p>",
        "id": 126495172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211169
    },
    {
        "content": "<p>however because I have to use classical arguments I find writing a one-liner very hard</p>",
        "id": 126495177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211194
    },
    {
        "content": "<p>also I don't think you need choice to do that, there's a trick I read somewhere</p>",
        "id": 126495179,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526211211
    },
    {
        "content": "<p>So I just write it in tactic mode and I know I'll never get stuck</p>",
        "id": 126495180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211213
    },
    {
        "content": "<p>instead of choosing one of them, choose all of them</p>",
        "id": 126495183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526211235
    },
    {
        "content": "<p>Kenny what I care about is whether I should be concerned that I am writing this sort of proof in 30 lines of tactic mode</p>",
        "id": 126495184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211235
    },
    {
        "content": "<p>well I say that <code>classical.some</code> doesn't have a good interface</p>",
        "id": 126495223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526211247
    },
    {
        "content": "<p>and whether I should be striving to write a one-liner in term mode.</p>",
        "id": 126495224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211250
    },
    {
        "content": "<p>Well I say that you are supposed to be sitting my exam at 10am tomorrow morning, so what are you doing chatting here? ;-)</p>",
        "id": 126495225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211270
    },
    {
        "content": "<p>proving that determinant is multiplicative (not in Lean)</p>",
        "id": 126495227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526211299
    },
    {
        "content": "<p>I talked about interface to classical.some recently and Simon wrote <code>ccases</code> and Mario wrote <code>classical.rec_on</code></p>",
        "id": 126495229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211302
    },
    {
        "content": "<p>so there are some interfaces if you need them</p>",
        "id": 126495269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211362
    },
    {
        "content": "<p>well you didn't use them</p>",
        "id": 126495274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526211373
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/cases.20eliminating.20into.20type/near/125696468\" title=\"#narrow/stream/113488-general/subject/cases.20eliminating.20into.20type/near/125696468\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/cases.20eliminating.20into.20type/near/125696468</a></p>",
        "id": 126495276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211396
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/cases.20eliminating.20into.20type/near/125695647\" title=\"#narrow/stream/113488-general/subject/cases.20eliminating.20into.20type/near/125695647\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/cases.20eliminating.20into.20type/near/125695647</a></p>",
        "id": 126495282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211442
    },
    {
        "content": "<p>I didn't use them because I have my own interface now -- see f,f1 and g,g1</p>",
        "id": 126495283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211461
    },
    {
        "content": "<p>I don't really like it but it was easier to do it like that than find the thread</p>",
        "id": 126495284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211480
    },
    {
        "content": "<p>that's not true</p>",
        "id": 126495324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211502
    },
    {
        "content": "<p>I didn't use them because I didn't know how to use them in the middle of a function</p>",
        "id": 126495325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211522
    },
    {
        "content": "<p>well, I didn't know how to use Simon's, and Mario's is in some sense just as complicated as what I did</p>",
        "id": 126495327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211538
    },
    {
        "content": "<p>I was not in a situation where I had <code>exists x, p x</code> and I wanted <code>x</code> and <code>H : p x</code></p>",
        "id": 126495334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211567
    },
    {
        "content": "<p>I was in a situation where I wanted to construct a function</p>",
        "id": 126495336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211587
    },
    {
        "content": "<p>so I had <code>forall i, exists x, p i x</code></p>",
        "id": 126495337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211600
    },
    {
        "content": "<p>and I wanted a map sending i to x</p>",
        "id": 126495383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211610
    },
    {
        "content": "<p>hey, maybe I'm just saying that the interface for classical.some isn't great</p>",
        "id": 126495384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211623
    },
    {
        "content": "<p>I guess I wanted a map sending i to x and a map sending i to a proof of p i x</p>",
        "id": 126495393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211683
    },
    {
        "content": "<p>More precisely, I wanted a map <code>f</code> sending <code>i</code> to <code>x</code> and a map <code>f_proof</code> sending <code>i</code> to a proof of <code>p i (f i)</code></p>",
        "id": 126495394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211705
    },
    {
        "content": "<p>(rather than a proof of <code>p i (classical.some _)</code></p>",
        "id": 126495433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211733
    },
    {
        "content": "<p>and it still irks me a bit that I can't use a tactic which just builds these functions for me (with exactly those types, so no classical.some mentioned anywhere in the types, just in the definitions of the terms of these types)</p>",
        "id": 126495439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211787
    },
    {
        "content": "<p>because my constructions of f f1 g and g1 involved building f, copying the type of the some_spec, editing it to replace classical.some _ with f i, then building f1, and this is a purely mechanical procedure.</p>",
        "id": 126495441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211815
    },
    {
        "content": "<p>i.e. I started by writing</p>",
        "id": 126495489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211930
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">f1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 126495490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526211934
    },
    {
        "content": "<p>and then I looked at the type of <code>f1</code> in the context, edited it to remove all trace of <code>classical.some</code> (replacing it with <code>f i</code>) and then inserted the explicit type of <code>f1</code>.</p>",
        "id": 126495530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526212003
    },
    {
        "content": "<p>It somehow all feels like both a waste of time and something which students would find confusing.</p>",
        "id": 126495531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526212017
    },
    {
        "content": "<p>Kenny can you write a proof in term mode?</p>",
        "id": 126495536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526212030
    },
    {
        "content": "<p>You shouldn't be using classical.some in the first place in this proof. It complicates things and there's no need. Before you start optimizing your use don't forget to see if another proof strategy works better by making canonical choices only</p>",
        "id": 126496195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526213418
    },
    {
        "content": "<p>I am a classical guy and have no feeling as to when I can get away with constructive maths</p>",
        "id": 126496206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526213480
    },
    {
        "content": "<p>I just wrote the first proof I thought of</p>",
        "id": 126496259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526213610
    },
    {
        "content": "<p>and I still find this sort of proof a joy to write</p>",
        "id": 126496298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526213668
    },
    {
        "content": "<p>I would go for the version with a set first:</p>\n<div class=\"codehilite\"><pre><span></span>lemma sUnion_basis_elemnts_of_open {α : Type u} [topological_space α]\n{B : set (set α)} (HB : is_topological_basis B) {U : set α} (HU : is_open U) :\n∃ (S : set (set α)), U = ⋃₀ S ∧ S ⊆ B :=\n⟨{b ∈ B | b ⊆ U}, set.ext (λ a,\n   ⟨λ ha, let ⟨b, hb, ab, bu⟩ := mem_basis_subset_of_mem_open HB _ ha HU in\n              ⟨b, ⟨hb, bu⟩, ab⟩,\n    λ ⟨b, ⟨hb, bu⟩, ab⟩, bu ab⟩),\n λ b h, h.1⟩\n\nlemma Union_basis_elemnts_of_open {α : Type u} [topological_space α]\n{B : set (set α)} (HB : is_topological_basis B) {U : set α} (HU : is_open U) :\n∃ (β : Type u) (f : β → set α), U = (⋃ i, f i) ∧ ∀ i : β, f i ∈ B :=\nlet ⟨S, su, sb⟩ := sUnion_basis_elemnts_of_open HB HU in\n⟨S, subtype.val, su.trans set.sUnion_eq_Union&#39;, λ ⟨b, h⟩, sb h⟩\n</pre></div>\n\n\n<p>(I didn't start out planning to write a term proof, but there never really came a point where I needed a tactic)</p>",
        "id": 126496746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526214753
    },
    {
        "content": "<p>Right -- I generally switch to tactic mode when I want to do something like a rw which I'm too lazy to figure out with the funny triangle thing. But here I switched because it just felt easier with the classical.stuff and I felt I'd been beaten too early, that was the reason I asked.</p>",
        "id": 126496845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526215056
    },
    {
        "content": "<p>I see the constructivist's trick now -- thanks.</p>",
        "id": 126496886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526215119
    },
    {
        "content": "<p>That was the idea I was missing -- I feel confident that I could have generated a term proof now.</p>",
        "id": 126496892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526215159
    },
    {
        "content": "<p>PS the mis-spelling of <code>elements</code> in the name was not intentional :-)</p>",
        "id": 126496936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526215244
    },
    {
        "content": "<p>I wanted to write \"Union_of_basis_elements_of_open\" but then I had two different ofs with two different meanings</p>",
        "id": 126496941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526215282
    },
    {
        "content": "<p>PS1 is this already in mathlib? I couldn't find it. It is the canonical thing you do with a basis!</p>",
        "id": 126496982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526215332
    },
    {
        "content": "<blockquote>\n<p>I was in a situation where I wanted to construct a function<br>\nso I had forall i, exists x, p i x<br>\nand I wanted a map sending i to x</p>\n</blockquote>\n<p>Use <code>classical.axiom_of_choice</code></p>",
        "id": 126501829,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526227150
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gu\">@@ -11,6 +11,3 @@</span>\n   let f0 := λ i : β, (mem_basis_subset_of_mem_open HB U i.property HU),\n<span class=\"gd\">-  let f := λ i, classical.some (f0 i),</span>\n<span class=\"gd\">-  let f1 : ∀ (i : β), ∃ (H : (f i) ∈ B), (i.val ∈ (f i) ∧ (f i) ⊆ U) := λ i, classical.some_spec (f0 i),</span>\n<span class=\"gd\">-  let g := λ i, classical.some (f1 i),</span>\n<span class=\"gd\">-  let g1 : ∀ (i : β), (i.val ∈ f i ∧ f i ⊆ U) := λ i, classical.some_spec (f1 i),</span>\n<span class=\"gi\">+  cases classical.axiom_of_choice f0 with f hf,</span>\n   existsi f,\n<span class=\"gu\">@@ -25,3 +22,3 @@</span>\n         refl,\n<span class=\"gd\">-      exact (g1 i).left,</span>\n<span class=\"gi\">+      exact (hf i).snd.1</span>\n     },\n<span class=\"gu\">@@ -29,3 +26,3 @@</span>\n       cases Hy with V HV,cases HV with HV Hy,cases HV with i Hi,\n<span class=\"gd\">-      apply (g1 i).2,</span>\n<span class=\"gi\">+      apply (hf i).snd.2,</span>\n       rwa ←Hi,\n<span class=\"gu\">@@ -34,3 +31,3 @@</span>\n   { intro i,\n<span class=\"gd\">-    exact g i</span>\n<span class=\"gi\">+    exact (hf i).fst</span>\n   }\n</pre></div>",
        "id": 126501880,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526227231
    },
    {
        "content": "<p>Oh yes, sorry for not engaging with the original question, Reid is right that you should use <code>axiom_of_choice</code> here</p>",
        "id": 126501890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526227270
    }
]