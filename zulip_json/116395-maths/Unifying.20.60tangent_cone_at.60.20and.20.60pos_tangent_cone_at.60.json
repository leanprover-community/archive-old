[
    {
        "content": "<p>I'd like to prove more properties of tangent cones. With the definitions we have now, I'll have to prove every fact twice: once for <code>tangent_cone_at</code>, and once for <code>pos_tangent_cone_at</code>. I see two ways to unify these definitions:</p>\n<ol>\n<li>Introduce <code>(M : submonoid ùïú)</code> in the definition, and require <code>c n ‚àà M</code>. This requires coercions here and there.</li>\n<li>Define semifields and normed semifields, then <code>pos_tangent_cone_at</code> becomes <code>tangent_cone_at nnreal</code>.</li>\n</ol>\n<p>The second approach looks like the right way to do it but it requires a lot of refactoring. What do you think?</p>\n<p>BTW, is there any technical reason to have <code>module</code> and <code>vector_space</code> instead of always dealing with a <code>semimodule</code>?</p>",
        "id": 187425395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580878236
    },
    {
        "content": "<p>Re <code>semimodule</code>: No, I don't think so. It's just to create a (useful, I think?) air of familiarity for mathematicians</p>",
        "id": 187430638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580886585
    },
    {
        "content": "<blockquote>\n<p>I'd like to prove more properties of tangent cones. With the definitions we have now, I'll have to prove every fact twice: once for <code>tangent_cone_at</code>, and once for <code>pos_tangent_cone_at</code>. I see two ways to unify these definitions:</p>\n<ol>\n<li>Introduce <code>(M : submonoid ùïú)</code> in the definition, and require <code>c n ‚àà M</code>. This requires coercions here and there.</li>\n<li>Define semifields and normed semifields, then <code>pos_tangent_cone_at</code> becomes <code>tangent_cone_at nnreal</code>.</li>\n</ol>\n<p>The second approach looks like the right way to do it but it requires a lot of refactoring. What do you think?</p>\n</blockquote>\n<p>I would go for the first way: in any case, there will be coercions involved (in the second approach, you would need to see a real module as an nnreal semimodule), so let's keep it as simple as it can be.</p>",
        "id": 187431993,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580888483
    },
    {
        "content": "<blockquote>\n<p>BTW, is there any technical reason to have <code>module</code> and <code>vector_space</code> instead of always dealing with a <code>semimodule</code>?</p>\n</blockquote>\n<p>I have tried to make <code>module</code> and <code>vector_space</code> all abbreviations for <code>semimodule</code>, but some things became too slow. I still think this is a good move, but it will probably have to wait for Lean 4. Link to the conversation: <a href=\"#narrow/stream/116395-maths/topic/linear.20maps.20over.20semimodule/near/185824677\" title=\"#narrow/stream/116395-maths/topic/linear.20maps.20over.20semimodule/near/185824677\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/linear.20maps.20over.20semimodule/near/185824677</a></p>",
        "id": 187432160,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580888707
    }
]