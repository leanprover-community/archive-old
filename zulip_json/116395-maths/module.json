[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Shouldn't this be flipped, for consistency with <code>comp</code> and <code>llcomp</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lcomp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"c1\">-- I would expect:   def lcomp (f : N →ₗ P) : (M →ₗ N) →ₗ M →ₗ P :=</span>\n</pre></div>",
        "id": 148227117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542977366
    },
    {
        "content": "<p>maybe, but the other direction is harder</p>",
        "id": 148227175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542977404
    },
    {
        "content": "<p>there is an order to the definitions</p>",
        "id": 148227185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542977410
    },
    {
        "content": "<p>Also, are there compatibilities between <code>comp</code> and <code>lcomp</code> etc...? Is <code>(lcomp f).to_fun</code> defeq to <code>f.comp</code>?</p>",
        "id": 148227192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542977420
    },
    {
        "content": "<p>yeah, it's all defeq</p>",
        "id": 148227195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542977431
    },
    {
        "content": "<p>it's just composition so it's easy</p>",
        "id": 148227203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542977442
    },
    {
        "content": "<p>also there is a difference between <code>lcomp</code> that is there and the one you said</p>",
        "id": 148227283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542977534
    },
    {
        "content": "<p>one is precomposition and the other is postcomposition</p>",
        "id": 148227284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542977545
    },
    {
        "content": "<p>Right, and I think the library isn't completely consistent about which one it uses for <code>comp</code>, <code>lcomp</code> and <code>llcomp</code>. Wouldn't it be easier if they were all post-composition?</p>",
        "id": 148228046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542978474
    },
    {
        "content": "<p>I mean there is a need for it, I didn't write that for no reason</p>",
        "id": 148228136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542978563
    },
    {
        "content": "<p>it's used before we have tensor products and swap and eval and such, so they aren't yet interchangeable</p>",
        "id": 148228156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542978596
    },
    {
        "content": "<p>Ok, I see</p>",
        "id": 148228209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542978612
    },
    {
        "content": "<p>So, may I then complain that the name is slightly confusing?</p>",
        "id": 148228225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542978633
    },
    {
        "content": "<p><code>rcomp</code> :)</p>",
        "id": 148228232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542978651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I couldn't find where the zero linear map is defined, but apparently it is somewhere. However <code>⇑0 m</code> doesn't <code>simp</code> to <code>0</code>. Where should I add this simp rule?</p>",
        "id": 148241025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542993820
    }
]