[
    {
        "content": "<p>Challenge: make the most comfy-to-use cycle notation. This is inspired by <a href=\"https://github.com/leanprover-community/mathlib/issues/7453\">#7453</a>.<br>\nHere is what I have so far. (I would love to have something like <code>mk_cycle</code> in mathlib.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">vector_index</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.find_index</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">⟨[],</span>     <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span>  <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">else</span> <span class=\"n\">option.map</span> <span class=\"n\">fin.succ</span> <span class=\"o\">(</span><span class=\"n\">vector.find_index</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_injective</span> <span class=\"n\">hl</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.index_of</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">v.find_index</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">vector_index</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv.perm.mk_cycle</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">σ.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.interactive.refl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">σ_inv</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">option.iget</span> <span class=\"bp\">∘</span> <span class=\"n\">vector.index_of</span> <span class=\"o\">⟨</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ_inv</span> <span class=\"o\">(</span><span class=\"n\">vector.nth</span> <span class=\"o\">⟨</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">vector.nth</span> <span class=\"o\">⟨</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">σ_inv</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">vector.nth</span> <span class=\"o\">⟨</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">σ_inv</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv.perm</span>\n\n<span class=\"sd\">/-- A 3-cycle -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">σ1</span> <span class=\"o\">:=</span> <span class=\"n\">mk_cycle</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A (2,2)-cycle -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">σ2</span> <span class=\"o\">:=</span> <span class=\"n\">mk_cycle</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A 3-cycle -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">σ3</span> <span class=\"o\">:=</span> <span class=\"n\">mk_cycle</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_derived_series</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ1</span> <span class=\"bp\">∈</span> <span class=\"n\">derived_series</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_top</span> <span class=\"n\">σ1</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"n\">σ1</span> <span class=\"bp\">=</span> <span class=\"n\">σ3</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">σ2</span> <span class=\"bp\">*</span> <span class=\"n\">σ1</span> <span class=\"bp\">*</span> <span class=\"n\">σ2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">σ1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ2</span> <span class=\"bp\">*</span> <span class=\"n\">σ1</span> <span class=\"bp\">*</span> <span class=\"n\">σ2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">σ1</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">σ3</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">derived_series_normal</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conj_mem</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">general_commutator_containment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">derived_series_normal</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conj_mem</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_solvable'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_solvable</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">σ1</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">equiv.ext_iff</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n<span class=\"n\">not_solvable_of_mem_derived_series</span> <span class=\"n\">this</span> <span class=\"n\">mem_derived_series</span>\n</code></pre></div>",
        "id": 237772169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620366685
    },
    {
        "content": "<p>I've been working a lot towards this</p>",
        "id": 237772434,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620366981
    },
    {
        "content": "<p>That's what my <code>form_perm</code> PR is for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">])</span>\n<span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 237772452,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620367008
    },
    {
        "content": "<p>With other branches working towards a <code>cycle</code> type that is the quotient of lists by cyclic permutations</p>",
        "id": 237772471,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620367031
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7451\">#7451</a></p>",
        "id": 237772494,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620367076
    },
    {
        "content": "<p>This looks really sweet! I haven't been following the PR stream close enough apparently. Great job!</p>",
        "id": 237772592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620367185
    },
    {
        "content": "<p>There’s still a question of what the notation <em>looks like</em></p>",
        "id": 237843951,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620402186
    }
]