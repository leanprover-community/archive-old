[
    {
        "content": "<p>I'm currently trying to understand the various tricks used in mathlib to avoid extremely tedious manipulations of unitors and associators in monoidal categories. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_category.monoidal_comp\">docs#category_theory.monoidal_category.monoidal_comp</a> seems interesting, but I'm having trouble understanding how to manipulate it. For example, how would you prove the following <code>monoidal_comp</code> version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_category.id_tensor_comp\">docs#category_theory.monoidal_category.id_tensor_comp</a>? We probably need the <code>coherence</code> tactic to do that but by itself it doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kn\">import</span> <span class=\"n\">category_theory.monoidal.coherence</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.monoidal_category</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_coherence</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊗≫</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291449923,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659213779
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_coherence</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊗≫</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tensor_hom</span><span class=\"o\">,</span> <span class=\"n\">monoidal_comp</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 291505997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659293284
    },
    {
        "content": "<p>Thanks. Weirdly I can't even state the analog for right tensoring by the identity because <code>monoidal_coherence (X ⊗ A) (Y ⊗ A)</code> isn't an instance. The left version is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_category.monoidal_coherence.tensor\">docs#category_theory.monoidal_category.monoidal_coherence.tensor</a> but we don't have the right version.</p>",
        "id": 291507877,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659295660
    },
    {
        "content": "<p>I'm getting some very weird behavior with <code>monoidal_coherence</code>. The first example here fails with an error message \"failed to synthesize type class instance for <code>monoidal_coherence X (X ⊗ 𝟙_ C)</code>\", but this instance does exist as shown by the second example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.monoidal.coherence</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.monoidal_category</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">id_tensor_monoidal_comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoidal_coherence</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊗≫</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">monoidal_comp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊗≫</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">id_tensor_monoidal_comp</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monoidal_coherence</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Does anyone have an explanation?</p>",
        "id": 291510072,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659298395
    },
    {
        "content": "<p><code>id_tensor_monoidal_comp</code> is not general enough because it picked the \"refl\" instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_category.monoidal_coherence\">docs#category_theory.monoidal_category.monoidal_coherence</a>.<br>\nYou can fix it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">id_tensor_monoidal_comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">lift_obj</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lift_obj</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_coherence</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 291510806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659299305
    },
    {
        "content": "<p>It works but I'm not sure I understand what <code>lift_obj</code> is doing here. What do you mean when you say it picked the \"refl\" instance?</p>",
        "id": 291511011,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659299635
    },
    {
        "content": "<p>Also, even with <code>lift_obj</code> added the following fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.monoidal.coherence</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.monoidal_category</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">id_tensor_monoidal_comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">lift_obj</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lift_obj</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_coherence</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊗≫</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">monoidal_comp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"bp\">⊗</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊗≫</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"bp\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">id_tensor_monoidal_comp</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 291511881,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659300739
    },
    {
        "content": "<p>Whoops, I was looking at the wrong thing before. I actually meant the \"of\" instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_category.lift_obj\">docs#category_theory.monoidal_category.lift_obj</a> .</p>",
        "id": 291623373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659382908
    },
    {
        "content": "<p>But I don't actually understand how this works, and in particular why <code>monoidal_coherence</code> requires <code>lift_obj</code> instance but then doesn't use them at all.</p>",
        "id": 291623490,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659382951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Are you familiar with that?</p>",
        "id": 291624709,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659383599
    }
]