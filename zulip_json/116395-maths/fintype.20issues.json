[
    {
        "content": "<p>Looks like I'm going to have to engage with fintypes for the first time. They're already driving me nuts. I have managed to construct two proofs that the identity subgroup of a group is a fintype (one uses fintype_set and LEM, the other uses the fact that it's the trivial subgroup). I know I can somehow dig my way out of things with <code>convert</code> or what have you -- but I wouldn't be in this mess if there were a <code>Prop</code>-valued <code>fintype</code>. I remember <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> complaining about this when doing Sylow's theorems (we still don't have Sylow 2 or 3 in mathlib, even though he formalised them for his 1st year project two years ago). I'm refactoring <code>subgroup</code> and am having to engage with this proof of Sylow. These problems are completely superficial as far as I can see, and I think they would be solved with an <code>is_fintype</code> typeclass. Does such a typeclass not exist? Is there a call for such a typeclass? Is it <code>nonempty (fintype X)</code>?</p>\n<p>Related: I made a little API for <code>fincard</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">fincard -- ℕ-valued cardinality of a type (zero for infinite types)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fincard</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>I proved <code>fincard (X × Y) = fincard X * fincard Y</code> (no finiteness assumptions necessary). </p>\n<p>I have students thinking about finite groups and it's so much messier than I want it to be. I'm wondering if there are any tricks which people know about, which haven't been implemented yet.</p>",
        "id": 205168275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595883972
    },
    {
        "content": "<p>My suggested proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">bot</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"err\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_finset</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"err\">⊥</span><span class=\"o\">:</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">):</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 205169345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595884621
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"err\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 205169670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595884828
    },
    {
        "content": "<p>Yeah but the issue is that I'm in the middle of the proof of Sylow's first theorem and <code>rw card_trivial</code> is failing for reasons which I'm finding hard to control.</p>",
        "id": 205169717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595884869
    },
    {
        "content": "<p>do you have a representative example aka MWE?</p>",
        "id": 205169736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595884893
    },
    {
        "content": "<p>On a WIP branch of mathlib :-/</p>",
        "id": 205169750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595884909
    },
    {
        "content": "<p>a non-compiling example then?</p>",
        "id": 205169845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595884954
    },
    {
        "content": "<p>The question is not \"can you fix this proof\" -- I can fix it with a <code>convert</code> -- the question is why I'm having to even think about this issue, because my mental model of \"this set is finite\" is a Prop and I'm hurting because this isn't Lean's example.</p>",
        "id": 205169853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595884959
    },
    {
        "content": "<p>I want to see the proof so I can fix it without <code>convert</code></p>",
        "id": 205169875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595884977
    },
    {
        "content": "<p>In the <code>quotient_group_refactor</code> branch of mathlib, in <code>group_theory.sylow</code></p>",
        "id": 205169908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885001
    },
    {
        "content": "<p>wait a second, let me see what state it's in on GH</p>",
        "id": 205169921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885014
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/86a4929c05bd5807981ced1f469fd0507d998315/src/group_theory/sylow.lean#L201\">https://github.com/leanprover-community/mathlib/blob/86a4929c05bd5807981ced1f469fd0507d998315/src/group_theory/sylow.lean#L201</a></p>",
        "id": 205170031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885074
    },
    {
        "content": "<p>I don't know whether that proof works, but sometimes it doesn't. There's a random <code>local attribute [instance] set_fintype</code> before it, and if you remove it then you can observe that it still has the instance attribute anyway.</p>",
        "id": 205170070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885114
    },
    {
        "content": "<p>the issue is that <code>rw</code> sees the mismatch between the two different proofs of <code>fintype</code>?</p>",
        "id": 205170075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595885117
    },
    {
        "content": "<p>yes</p>",
        "id": 205170102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885137
    },
    {
        "content": "<p>but there's a bigger issue, which is that people are randomly adding <code>local attribute [instance] set_fintype</code> in an attempt to make things work (I think this just changes the priority of the instance). People are doing some sort of juggling game to try and make the instances fire in the right order. It shouldn't be like this, surely!</p>",
        "id": 205170204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885197
    },
    {
        "content": "<p>Earlier we have <code>local attribute [instance, priority 10] subtype.fintype set_fintype</code></p>",
        "id": 205170234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885217
    },
    {
        "content": "<p>People (perhaps Chris) are having to juggle with instance priorities to make stuff as basic as Sylow's 1st theorem work. There must be a better way. I'm happy to spend some time writing the API for it but I don't know what it is.</p>",
        "id": 205170331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885280
    },
    {
        "content": "<p><code>fincard</code> seems like a reasonable fix here</p>",
        "id": 205170507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595885380
    },
    {
        "content": "<p>another fix would be an <code>is_card s n</code> predicate</p>",
        "id": 205170577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595885407
    },
    {
        "content": "<p>I support <code>fincard</code></p>",
        "id": 205170587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595885418
    },
    {
        "content": "<p>In my current unpushed work, the proof that the trivial group is finite is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fintype_bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and Lean wants it to be</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_fintype</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_coe_t_aux</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base_aux</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">has_coe</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n             <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_coe_t_aux</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base_aux</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">has_coe</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n                  <span class=\"n\">a</span><span class=\"o\">))))</span>\n</code></pre></div>\n\n\n<p>Note that the latter has some <code>classical.prop_decidable</code> in. I traced it back to <code>def set_fintype {α} [fintype α] (s : set α) [decidable_pred s] : fintype s :=</code>, whereas the simpler proof comes from <code>fintype_bot</code>.</p>",
        "id": 205170598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885427
    },
    {
        "content": "<p><code>fintype_bot</code> explicitly enumerates the trivial group as <code>{1}</code>, whereas <code>set_fintype</code> says that any decidable subset of a fintype is a fintype.</p>",
        "id": 205170688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595885509
    },
    {
        "content": "<p>fwiw, I am constantly fighting issues like that, and find it indeed very frustrating</p>",
        "id": 205214201,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1595928468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306293\">@Carl Friedrich Bolz-Tereick</span> Also with <code>fintype</code>? Or with other instances?</p>",
        "id": 205214292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595928531
    },
    {
        "content": "<p>no, specifically fintype (I am doing things with finite groups)</p>",
        "id": 205214384,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1595928576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'll try to post a concrete example soon (still busy with post-semester admin)</p>",
        "id": 205215243,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1595929047
    }
]