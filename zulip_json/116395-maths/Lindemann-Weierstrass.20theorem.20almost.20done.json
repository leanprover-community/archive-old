[
    {
        "content": "<p>Dear All,</p>\n<p>I'm happy to tell everyone that I have formalized most of the <a href=\"https://en.wikipedia.org/wiki/Lindemann%E2%80%93Weierstrass_theorem\">Lindemann-Weierstrass theorem</a>. The main theorem is <a href=\"https://github.com/negiizhao/transcendental/blob/master/src/lindemann.lean#L2296\">here</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">linear_independent_exp</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">u_inj</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>There are still some sorry in the code. Two of them are waiting for <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>'s work on <code>is_domain</code> for <code>add_monoid_algebra</code>. And the other two are <a href=\"https://en.wikipedia.org/wiki/Elementary_symmetric_polynomial#Fundamental_theorem_of_symmetric_polynomials\">fundamental theorem of symmetric polynomials</a>. Symmetric polynomials are only used in the very last part of the proof, and I believe it can be replaced by some Galois theory, however, it seems to be the simplest way if we have sufficient infrastructures.</p>\n<p>There is also a file <code>e.lean</code> in this repository, that is <em>unrelated</em> to this work. I just reused this repository.</p>\n<p>If there is any way to improve my proof, please feel free to give suggestions.</p>",
        "id": 297900963,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662693052
    },
    {
        "content": "<p>That's great, congratulations!</p>\n<p>I've broken one of the <code>is_domain</code> PR, but have not yet had time to figure out which instance I still need to provide to make it compile again.  I'll try to do it soon, but I'm not sure how much time I'll have before late next week.</p>",
        "id": 297905682,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662698955
    },
    {
        "content": "<p>Have you considered using <code>is_algebraic</code> in your statement? It's trivially equivalent, of course, but it matches what people would usually write, I think.</p>",
        "id": 297907606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662700997
    },
    {
        "content": "<p>Nice, sounds like I can drop  <a href=\"https://github.com/leanprover-community/mathlib/pull/15954\">#15954</a> then :)</p>",
        "id": 297908486,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662701830
    },
    {
        "content": "<p>Isn't that a prerequisite? Or did <span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> do a completely new proof?</p>",
        "id": 297912037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662704524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Lindemann-Weierstrass.20theorem.20almost.20done/near/297912037\">said</a>:</p>\n<blockquote>\n<p>Isn't that a prerequisite? Or did <span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> do a completely new proof?</p>\n</blockquote>\n<p>My proof is independent. I think I knew about that PR very late, probably after I had finished the analytical part. I didn't check how many duplicates there are.</p>",
        "id": 297914192,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662705960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Lindemann-Weierstrass.20theorem.20almost.20done/near/297907606\">said</a>:</p>\n<blockquote>\n<p>Have you considered using <code>is_algebraic</code> in your statement? It's trivially equivalent, of course, but it matches what people would usually write, I think.</p>\n</blockquote>\n<p>I would add some variants of this statement.</p>",
        "id": 297914462,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662706128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/Lindemann-Weierstrass.20theorem.20almost.20done/near/297905682\">said</a>:</p>\n<blockquote>\n<p>That's great, congratulations!</p>\n<p>I've broken one of the <code>is_domain</code> PR, but have not yet had time to figure out which instance I still need to provide to make it compile again.  I'll try to do it soon, but I'm not sure how much time I'll have before late next week.</p>\n</blockquote>\n<p><code>K s</code> is a ℚ-vector space, so it's just ring equiv to <code>is_domain (add_monoid_algebra (ι →₀ ℚ) F)</code>.</p>",
        "id": 297915590,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662706847
    },
    {
        "content": "<p>I see. So you have an independent proof of transcendence of <code>e</code>. Because that mathematical fact is still an input to your proof of Lindemann─Weierstrass, right?</p>",
        "id": 297915614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662706855
    },
    {
        "content": "<p>No, it just doesn't need the proof of transcendence of <code>e</code>. I mean <code>e.lean</code> is previously written in this repository and has no relation to this proof.</p>",
        "id": 297916472,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662707345
    },
    {
        "content": "<p>Oooh, ok! <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span></p>",
        "id": 297916508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662707373
    },
    {
        "content": "<p>I'm outlining in Lean <a href=\"https://en.wikipedia.org/wiki/Elementary_symmetric_polynomial#Alternative_proof\">the second proof in Wikipedia</a> for the symmetric polynomial theorem, which essentially uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.lex\">docs#finsupp.lex</a> that Damiano introduced into mathlib recently (looks like we'll also need well-foundedness apart from linear order). The first thing I observed is that the <code>sorry</code> as stated seems to be wrong: we don't get an isomorphism for comm_semiring because for example x^2+y^2=(x+y)^2+(-2)xy, and -2 doesn't exist in ℕ. However I think <span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> only applies it to comm_rings, so it should be okay.</p>",
        "id": 298494571,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663025736
    },
    {
        "content": "<p>Thanks! I didn't check the conditions carefully and the assumption <code>comm_semiring</code> is too weak, but <code>comm_ring</code> is certainly enough.</p>",
        "id": 298504470,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1663034583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> have you (or someone else) been working on the symmetric polynomial proof? Would be cool to get this finished</p>",
        "id": 305551504,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666452453
    },
    {
        "content": "<p>I don't know anyone who is working on the symmetric polynomial proof. This part of the theory is related to integer partitions or Young diagrams, and their APIs still seem inadequate. I think it might be better to discuss with other people who need these APIs.</p>",
        "id": 305560847,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1666457460
    },
    {
        "content": "<p>I <a href=\"#narrow/stream/116395-maths/topic/Lindemann-Weierstrass.20theorem.20almost.20done/near/298494571\">thought about the proof</a> and opened <a href=\"https://github.com/leanprover-community/mathlib/pull/16772\">#16772</a> (well-foundedness of lexicographic orders) with the proof as an motivation (the other motivation being <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22sort.22.20a.20function/near/299256970\">this thread</a>). (I proved a much more general result, but deducing what we actually need from the general result is arguably what we should do for mathlib.) However, one dependency <a href=\"https://github.com/leanprover-community/mathlib/pull/16777\">#16777</a> of the well-foundedness result hasn't been merged yet, and I haven't returned to the symmetric polynomial proof. As far as I can see, it doesn't have to depend on Young diagrams, but it may be nice to make the connection.</p>",
        "id": 305737792,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666579182
    }
]