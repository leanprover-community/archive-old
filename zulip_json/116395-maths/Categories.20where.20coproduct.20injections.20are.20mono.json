[
    {
        "content": "<p>In the development of split simplicial objects (see <a href=\"https://github.com/leanprover-community/mathlib/pull/16274\">#16274</a>, which will be followed by some examples and a study of their skeleta), I need to introduce a class for categories where inclusions like <code>A ⟶ A ⨿ B</code>are monomorphisms. Would you think <code>mono_coprod_in</code> be a suitable name?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_finite_coproducts</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">mono_coprod_in</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mono_coprod_inl'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">coprod.inl</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span> <span class=\"bp\">⨿</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(This is true for the category of sets, and categories that have zero morphisms.)</p>",
        "id": 296134947,
        "sender_full_name": "Joël Riou",
        "timestamp": 1661869860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>, did you introduce this? (I didn't see this earlier.)  I think I would like this definition for something else, too. Perhaps just <code>mono_coprod</code> suffices as a name, as it's not entirely clear what the <code>_in</code> is referring to.</p>",
        "id": 298873376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663195016
    },
    {
        "content": "<p>Ok for <code>mono_coprod</code>. I have not yet PRed this. I could do it soon, once PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16444\">#16444</a> is merged.</p>",
        "id": 298914567,
        "sender_full_name": "Joël Riou",
        "timestamp": 1663226211
    }
]