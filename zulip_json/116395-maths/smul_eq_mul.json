[
    {
        "content": "<p>I have the following definition :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.bernoulli</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bernoulli_neg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">bernoulli</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am trying to show</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bernoulli_neg</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bernoulli_neg</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"mi\">0</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bernoulli_neg</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p><code>algebra.id.smul_eq_mul</code> and <code>mul_one</code> don't seem to help with <code>bernoulli_neg n • 1</code>, where <code>1 : ℚ</code>. I don't understand why, because it works if I put it as a separate lemma.</p>\n<p>Any help is appreciated, thank you!</p>",
        "id": 226503499,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613476142
    },
    {
        "content": "<p>How are you using the lemma?</p>",
        "id": 226504741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613476982
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> demonstrating the failure?</p>",
        "id": 226504830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613477027
    },
    {
        "content": "<p>Apologies for the late reply. I found an alternate solution to my problem. However, I find it very strange that if I make a lemma of the above statement, then I can solve it using  <code>algebra.id.smul_eq_mul</code>, but it does not seem to work in the theorem I am trying to prove :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.bernoulli</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bernoulli_neg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">bernoulli</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bernoulli_poly</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">((</span><span class=\"n\">bernoulli_neg</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bernoulli_poly_zero'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bernoulli_poly</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">bernoulli_neg</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">bernoulli_poly</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bernoulli_neg</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_right_eq_self</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">,</span> <span class=\"n\">rat.algebra_map_rat_rat</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">sum_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_pow'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.lt_le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">mem_range.1</span> <span class=\"n\">Hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.sub_eq_zero_iff_le.1</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Originally, I wanted to use <code>smul_eq_mul</code> after the <code>simp</code> on the line after <code>suffices</code>. However, I seem to be having the same issue with using <code>smul_zero</code> on the first <code>sorry</code> line.</p>",
        "id": 226511861,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613481783
    },
    {
        "content": "<p><code>convert smul_zero _</code> solves the first <code>sorry</code>. You don't seem to be doing anything weird with typeclasses here, I don't know why <code>exact smul_zero _</code> doesn't work, but you're right, it doesn't.</p>",
        "id": 226513089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613482495
    },
    {
        "content": "<p>There is just some stupid typeclass issue with <code>has_scalar.smul</code>.</p>",
        "id": 226513266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613482604
    },
    {
        "content": "<p>Is there something I can do about it? I have a feeling I am going to be encountering this problem a lot more going ahead.</p>",
        "id": 226513460,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613482711
    },
    {
        "content": "<p>Your problem is that you are using smul at all, rather than using <code>polynomial ℚ</code>. Every polynomial with rational coefficients gives you a map A -&gt; A for any Q-algebra A, but you don't want to encode a polynomial as a collection of functions, you want to encode it as a polynomial.</p>",
        "id": 226513482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613482723
    },
    {
        "content": "<p>You should make the polynomial as a term of type <code>polynomial Q</code> and then there are various <code>eval</code> functions you can use to create the functions from A to A.</p>",
        "id": 226513563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613482772
    },
    {
        "content": "<p>There's definitely a problem hiding here</p>",
        "id": 226514821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613483552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/smul_eq_mul/near/226513563\">said</a>:</p>\n<blockquote>\n<p>You should make the polynomial as a term of type <code>polynomial Q</code> and then there are various <code>eval</code> functions you can use to create the functions from A to A.</p>\n</blockquote>\n<p>I see, that makes sense, thank you!</p>",
        "id": 226514840,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613483567
    },
    {
        "content": "<p>I was able to get lean to spit out what I assume is causing the unification issue when trying to apply <code>mul_eq_smul</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.comm_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.comm_semiring</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rat.algebra_rat</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.division_ring</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.semiring</span>\n</code></pre></div>\n<p>by adding this at the first sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bernoulli_neg</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">smul_eq_mul</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 226514908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613483599
    },
    {
        "content": "<p>Are we missing a <code>subsingleton (semimodule ℚ A)</code> instance to follow the trend set by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.nat_semimodule.subsingleton\">docs#add_comm_monoid.nat_semimodule.subsingleton</a>? Or is that statement not true?</p>",
        "id": 226515097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613483730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/smul_eq_mul/near/226514908\">said</a>:</p>\n<blockquote>\n<p>I was able to get lean to spit out what I assume is causing the unification issue when trying to apply <code>mul_eq_smul</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.comm_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.comm_semiring</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rat.algebra_rat</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.division_ring</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.semiring</span>\n</code></pre></div>\n<p>by adding this at the first sorry:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bernoulli_neg</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">smul_eq_mul</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">},</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ooh nice, thank you!</p>",
        "id": 226515430,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1613483909
    },
    {
        "content": "<p>I think there is a subsingleton instance, which is why <code>convert</code> works.</p>",
        "id": 226515778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613484088
    },
    {
        "content": "<p>The <code>smul_zero</code> problem is a different one</p>",
        "id": 226515801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613484105
    },
    {
        "content": "<p><code>convert smul_zero _ using 2,</code> gives you a preview of what's maybe going wrong</p>",
        "id": 226516292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613484347
    },
    {
        "content": "<p>Although interesting you can get stuck if you use <code>convert rfl</code> after that</p>",
        "id": 226516319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613484359
    },
    {
        "content": "<p>The closest subsingleton I can think of is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.algebra_rat_subsingleton\">docs#rat.algebra_rat_subsingleton</a>, but that's not an instance because we're now scared of adding new subsingleton instances. Making it an instance doesn't help here anyway.</p>",
        "id": 226516574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613484484
    },
    {
        "content": "<p>This is the statement that is either false or missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">semimodule_ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 226517353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613484873
    },
    {
        "content": "<p>It's true.</p>",
        "id": 226517388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613484896
    },
    {
        "content": "<p>If q=n/d then q.a is the unique solution to d(q.a)=na, and there's a unique Z-module structure on any abelian group.</p>",
        "id": 226517548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613484969
    },
    {
        "content": "<blockquote>\n<p>and there's a unique Z-module structure on any abelian group</p>\n</blockquote>\n<p>Thankfully this part exists already as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group.int_semimodule.subsingleton\">docs#add_comm_group.int_semimodule.subsingleton</a></p>",
        "id": 226517860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613485111
    },
    {
        "content": "<p>The semimodule instance is a subsingleton for any  add_comm_monoid A by the way</p>",
        "id": 226518052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613485210
    },
    {
        "content": "<p>Ah, I just added <code>[division_ring A] [char_zero A] </code> because the instance doesn't exist at all without those</p>",
        "id": 226518152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613485269
    },
    {
        "content": "<p>Right -- with those it's <code>unique</code>.</p>",
        "id": 226518181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613485287
    },
    {
        "content": "<p>If  R is a commutative semiring and L is a localisation of R (e.g. its semifield of fractions) then there's an injection from the L-semimodule structures on M to the R-semimodule structures on N.</p>",
        "id": 226518478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613485432
    },
    {
        "content": "<p>and the image is the R-semimodule structures on N for which all the elements you're localising at act as bijections.</p>",
        "id": 226518580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613485471
    },
    {
        "content": "<p>I think there might already be an instance from <code>division_ring R</code> + <code>char_zero R</code> to <code>algebra \\Q R</code></p>",
        "id": 226518707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613485541
    },
    {
        "content": "<p>Yes, there is</p>",
        "id": 226518732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613485554
    },
    {
        "content": "<p>And a proof it's a subsingleton, I link it above</p>",
        "id": 226518800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613485565
    },
    {
        "content": "<p>I see, but asking that the module structure is a subsingleton is a stronger statement.</p>",
        "id": 226518875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613485616
    },
    {
        "content": "<p>Indeed</p>",
        "id": 226519125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613485744
    },
    {
        "content": "<p>I can get to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">semimodule_ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rat.forall</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">x.mul_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">y.mul_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←@</span><span class=\"n\">gsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←@</span><span class=\"n\">gsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>at which point I think I need to apply char_zero to <code>gsmul</code> both sides by <code>b</code></p>",
        "id": 226519664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613485973
    },
    {
        "content": "<p>Solved!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">semimodule_ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rat.forall</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">x.mul_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">y.mul_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←@</span><span class=\"n\">gsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←@</span><span class=\"n\">gsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">x.zero_smul</span><span class=\"o\">,</span> <span class=\"n\">y.zero_smul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">inv_smul_eq_iff'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x.to_distrib_mul_action.to_mul_action</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←@</span><span class=\"n\">gsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">gsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">smul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y.to_distrib_mul_action.to_mul_action</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">y.one_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">hb</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 226520455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613486364
    },
    {
        "content": "<p>I'll leave someone else to golf away the <code>@</code>s...</p>",
        "id": 226520486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613486382
    },
    {
        "content": "<p>We probably need the full set of <code>gsmul_eq_smul_cast</code> lemmas for a hypothetical <code>qsmul</code> to make the original problem easy to work with though</p>",
        "id": 226520746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613486478
    }
]