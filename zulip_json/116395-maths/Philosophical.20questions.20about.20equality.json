[
    {
        "content": "<p>If n is a real number, is n + 0i a real number? Is it equal to n?<br>\nAccording to wikipedia, \"equality is a relationship between two quantities or, more generally two mathematical expressions, asserting that the quantities have the same value, or that the expressions represent the same mathematical object.\"</p>\n<p>I agree they have the same value, but do they represent the same mathematical object? n is a point on the number line, while n + 0i is a point on the complex plane</p>",
        "id": 299354606,
        "sender_full_name": "Mujtaba Alam",
        "timestamp": 1663441350
    },
    {
        "content": "<p>The Lean answer is that terms of <code>real</code> and terms of <code>complex</code> are completely different things, and so (via <code>eq</code>) they are neither equal nor not equal. There is an injective function <code>coe : real -&gt; complex</code> that lets you <em>coerce</em> real numbers to let you think about real numbers as being complex numbers, and it carries properties of reals over to properties of the corresponding complex numbers.</p>\n<p>With this in mind, when you write <code>n + 0*complex.I</code>, what happens is that Lean will automatically insert the coercion so that it is <code>coe n + 0*complex.I</code>, giving you the illusion that the reals sit inside the complexes. Furthermore, if you write <code>n + 0*complex.I = n</code> then using the same mechanism it is actually <code>coe n + 0*complex.I = coe n</code>. This proposition is true in Lean.</p>",
        "id": 299355781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663442244
    },
    {
        "content": "<p>In Lean, a real number is the Cauchy completion of the rationals and a complex number is a pair of real numbers. It's hard to say whether this sort of symbolic data <em>is</em> a number line and a plane.</p>\n<p>If we're talking philosophy, then we have to be careful about what we mean by \"equals.\" Lean already has definitional equality and <code>eq</code>, but there's the more nebulous one you seem to be talking about, which is whether two things somehow represent the same thing.</p>",
        "id": 299356015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663442431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> had a <a href=\"https://twitter.com/XenaProject/status/1541841109961383936\">twitter thread</a> talking about whether <code>ℕ = ℤ</code> or even whether <code>ℕ ⊆ ℤ</code>. This is kind of the situation here as you are debating whether the reals is a subset of C, or merely isomorphic to a subset of C.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/XenaProject/status/1541841109961383936\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/9686557e167ea0d81d62930b9cefbd210a469b3c/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313236333831303239373536303733353734342f674d69616e515f565f6e6f726d616c2e6a7067\"></a><p>1) ℕ={1,2,3,...} or {0,1,2,3,...} (who cares) where 0={} and 1={0} and 2={0,1} etc.\n2) ℤ is a localisation of ℕ, or a quotient of ℕ^2 (same thing) and you can make quotients using equivalence classes.\n3) ℕ ⊆ ℤ in the obvious way.\nThese can't all be true at once. 3/n</p><span>- Kevin Buzzard (@XenaProject)</span></div></div>",
        "id": 299356048,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663442472
    },
    {
        "content": "<p>The tl;dr answer is that in lean it <em>doesn't even make sense</em> to ask if a real number and a complex number are equal.</p>",
        "id": 299370216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663455160
    },
    {
        "content": "<p>But in other foundations of mathematics you might get different answers.</p>",
        "id": 299370250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663455196
    },
    {
        "content": "<p>(and if you <em>really</em> want to write the equality, <code>n == ↑n + 0 * complex.I</code> is undecidable [​ <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq\">docs#heq</a>​ ])</p>",
        "id": 299371922,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663457163
    },
    {
        "content": "<p>It's also not the right question (in some cardinality model you might have \\R=\\C in a guaranteed-to-be-mathematically-meaningless way)</p>",
        "id": 299398198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663486410
    },
    {
        "content": "<blockquote>\n<p>The way I was told to fix this was to either redefine <code>ℕ</code> to be the subset of <code>ℤ</code>, or redefine <code>ℤ</code> to be \"<code>ℤ</code> with the thing isomorphic to <code>ℕ</code> removed, and then union with actual <code>ℕ</code>\". Both of these approaches are actually quite problematic in practice.</p>\n</blockquote>\n<p>In my opinion, the most intuitive way to define <code>ℕ</code> in ZFC is to use the axiom of (global) choice to pick a set that satisfies Peano axioms. Then we can construct <code>ℤ</code> by using choice again to pick a set that satisfies appropriate conditions for <code>ℤ</code> (including <code>ℕ ⊆ ℤ</code>). Using any explicit model for any of those sets seems like cheating - we're adding more information to the system that we actually need, leading to proofs that diverge from reality.</p>\n<p>Next, addition on natural numbers can be defined using choice to be some function that satisfies <code>n + 0 = n</code> and <code>n + succ m = succ (n + m)</code>. We can define subtraction using choice to be some function that satisfies <code>n - 0 = n</code> and <code>succ n - succ m = n - m</code>. We cannot prove anything about <code>5 - 7</code> for example. However, when we define <code>ℤ</code>, we can extend the definitions for <code>+</code> and <code>-</code> by adding new conditions to the choice predicate, so that it covers the set of integers as well. We need to prove that the new models of <code>+</code> and <code>-</code> on <code>ℤ</code> (used only in the proof of existence) also satisfy the conditions for <code>+</code> and <code>-</code> on <code>ℕ</code>.</p>\n<p>I don't think this approach would be \"quite problematic in practice\", especially given that we don't use any explicit model outside of the proof that at least one model exists. Note that this only applies to set theory.</p>\n<p>Regarding the <code>n = n + 0i</code> question, the most common definition of equality in math is that any two objects <code>x</code> and <code>y</code> are said to be equal iff for any statement <code>P</code>, if <code>P x</code> holds then <code>P y</code> also holds. In Lean, this cannot be accurately expressed because of how dependent type theory works. That is, in some cases we cannot even construct a statement (types do not match), even though in set theory the same statement would make perfect sense. So, not only that <code>ℝ = ℂ</code> is undecidable, but <code>n = n + 0 * complex.I</code> does not even type check for <code>n : ℝ</code>. We can use heterogeneous equality, but as pointed out already, it's undecidable in that case. Moreover, whether heterogeneous equality in Lean represents the actual math notion of equality is disputable, because if <code>x == y</code> and <code>P x</code> holds for some statement <code>P</code>, we may not be able to prove <code>P y</code> because types do not match, even though <code>x</code> and <code>y</code> are provably the same object.</p>",
        "id": 299404749,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1663489737
    },
    {
        "content": "<p>That last statement is not true, Patrick: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/type_eq_of_heq\">docs#type_eq_of_heq</a></p>",
        "id": 299416537,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663497518
    },
    {
        "content": "<p>No, I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- type mismatch</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>We can't even express <code>P y</code> without rewriting predicate <code>P</code> itself, while in set theory we can express <code>P y</code> directly.</p>",
        "id": 299428125,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1663504152
    },
    {
        "content": "<p>sure, but you can <code>subst</code> <code>type_eq_of_heq</code> and this sorts itself out</p>",
        "id": 299433380,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663506945
    },
    {
        "content": "<p>I see what you're saying, though</p>",
        "id": 299433484,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663506974
    }
]