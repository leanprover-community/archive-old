[
    {
        "content": "<p>Essentially I'm trying to do Cantor's diagonal argument, and I've gotten close:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">diagonal_argument</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">g_sur</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">surjective</span> <span class=\"n\">at</span> <span class=\"n\">g_sur</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">diagonal_new</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">g_sur</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">diagonal_new</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">g_n</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Currently at <code>sorry</code> I have the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">g_sur</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">g_n</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Unless I'm mistaken I should be able to apply m to both sides, as <code>g m</code> is a sequence of <code>alpha</code>s, and <code>λ (n : ℕ), f (g n n)</code> is definitionally equal. Can I do this, and if so how?</p>",
        "id": 244007035,
        "sender_full_name": "Ian Wood",
        "timestamp": 1624702329
    },
    {
        "content": "<p>I do not really get what you're trying to do. Are you trying to show that there's no surjective function from <code>X</code> to its powerset?</p>",
        "id": 244007136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624702544
    },
    {
        "content": "<p>Given a function that can \"change\" one alpha to a different alpha (like in the example of showing reals are uncountable, would be 0 -&gt; 1, 1 -&gt; 2, ... 9 -&gt; 0), there cannot be a surjective mapping from naturals to infinite sequences of alphas (eg there cannot be a list of all real numbers between 0 and 1), because if there was we can create a new sequence that wasn't taken into account.</p>",
        "id": 244007261,
        "sender_full_name": "Ian Wood",
        "timestamp": 1624702721
    },
    {
        "content": "<p>Also I didn't realise this wasn't new members, sorry.</p>",
        "id": 244007273,
        "sender_full_name": "Ian Wood",
        "timestamp": 1624702746
    },
    {
        "content": "<p>Ah I see. But the only point of your function is to show that <code>α</code> has at least two elements. So I would suggest to abstract it away for now and first try proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">diagonal_argument</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 244007458,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624702978
    },
    {
        "content": "<p><code>f</code> basically has the same role as <code>¬</code></p>",
        "id": 244007588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624703137
    }
]