[
    {
        "content": "<p>Hi, I was trying to prove some things about the graph of <code>linear_pmap</code>s in inner product spaces, but there seems to be quite a serious issue with the definition of the norm of the product: if I see it correctly it is at the moment impossible to define an instance <code>inner_product_space ùïú (E √ó F)</code> since the norm is the  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi mathvariant=\"normal\">‚àû</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span></span></span></span> norm and not the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> norm. On the other side I think there were very good reasons to take the maximum and I think I saw some discussion on zulip about this, but I could not find it.</p>",
        "id": 291488589,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659271350
    },
    {
        "content": "<p>the 'bad' definition is this one <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.seminormed_add_comm_group\">docs#prod.seminormed_add_comm_group</a></p>",
        "id": 291488725,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659271562
    },
    {
        "content": "<p>You should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod\">docs#prod</a>.</p>",
        "id": 291490624,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1659274023
    },
    {
        "content": "<p>I would guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.inner_product_space\">docs#pi_Lp.inner_product_space</a>.</p>",
        "id": 291490645,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1659274056
    },
    {
        "content": "<p>This maybe raises the question of whether defining <code>prod_Lp</code> is worth the boilerplate it comes with</p>",
        "id": 291492477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659276390
    },
    {
        "content": "<p>One previous discussion where this gap was observed:<br>\n<a href=\"#narrow/stream/116395-maths/topic/Fubini's.20for.20fin.202.20-.3E.20R/near/222198621\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Fubini's.20for.20fin.202.20-.3E.20R/near/222198621</a></p>\n<p>I don't think we could outright switch to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> definition, because the square root function is defined much later in the library than the max function.</p>\n<p>As Ya√´l says, so far people have mostly been getting along by using <code>pi_Lp (fin 2)</code>.  But I would be mildly in favour of having <code>prod_Lp</code> if you have the energy to implement it!</p>",
        "id": 291499217,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1659285058
    },
    {
        "content": "<p>On a tangentially related topic, just FYI, I am currently implementing the equivalence between lp and pi_Lp. Should be ready in a day or two once I have time to work on it again.</p>",
        "id": 291499716,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659285695
    },
    {
        "content": "<p>I guess will not do it in the near future, except if I really need it. I would not be happy using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a> that feels rather unnatural to me. For the definition of the adjoint there is a construction that avoids using the graph, so I don't need products of Hilbert spaces.</p>",
        "id": 291500398,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659286518
    },
    {
        "content": "<p>What about defining <code>prod_Lp</code> as <code>pi_Lp (fin 2)</code>?</p>",
        "id": 291504918,
        "sender_full_name": "Violeta Hern√°ndez",
        "timestamp": 1659291912
    },
    {
        "content": "<p>Or perhaps <code>pi_Lp bool</code>, as I imagine that this is the canonical 2-element type</p>",
        "id": 291504991,
        "sender_full_name": "Violeta Hern√°ndez",
        "timestamp": 1659291966
    },
    {
        "content": "<p>I think <code>prod_Lp</code> would be a natural thing to have, and imo it would be best to define it as a type alias over the true <code>prod</code> and then pull back all the structure from <code>pi_Lp</code></p>",
        "id": 291507594,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659295269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/prod.20of.20inner.20product.20spaces/near/291499217\">said</a>:</p>\n<blockquote>\n<p>One previous discussion where this gap was observed:<br>\n<a href=\"#narrow/stream/116395-maths/topic/Fubini's.20for.20fin.202.20-.3E.20R/near/222198621\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Fubini's.20for.20fin.202.20-.3E.20R/near/222198621</a></p>\n<p>I don't think we could outright switch to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> definition, because the square root function is defined much later in the library than the max function.</p>\n<p>As Ya√´l says, so far people have mostly been getting along by using <code>pi_Lp (fin 2)</code>.  But I would be mildly in favour of having <code>prod_Lp</code> if you have the energy to implement it!</p>\n</blockquote>\n<p>Actually it is possible to include <code>data.real.sqrt</code> in <code>analysis.normed.group.basic</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/mcdoll/adjoint/src/analysis/normed/group/basic.lean\">https://github.com/leanprover-community/mathlib/blob/mcdoll/adjoint/src/analysis/normed/group/basic.lean</a></p>",
        "id": 291509055,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659297035
    },
    {
        "content": "<p>But it would need to be even earlier, right?  We have e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.metric_space_max\">docs#prod.metric_space_max</a></p>",
        "id": 291509738,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1659297960
    },
    {
        "content": "<p>Do NOT change the default distance on the product. This is a very general thing and it is personally crucial to me right now that balls are cubes for proving that upper sets in <code>Œπ ‚Üí ‚Ñù</code> are measurable.</p>",
        "id": 291510084,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1659298420
    },
    {
        "content": "<p>Even if we wanted to do that, I don't think we would find anyone volunteering for that insane amount of work</p>",
        "id": 291510178,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659298527
    },
    {
        "content": "<p>Actually, can <code>pi_Lp</code> even represent the max norm? It takes in a real, not a <code>ennreal</code>.</p>",
        "id": 291510263,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1659298658
    },
    {
        "content": "<p>Heather, you are of course right. there are cyclic import if one wants to import <code>data.real.sqrt</code> in the metric space file.</p>",
        "id": 291510446,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659298882
    },
    {
        "content": "<p>Should <code>pi_Lp</code> be generalized to take in <code>ereal</code>, so that we can state results about the infinity norm homogeneously with the other norms?</p>",
        "id": 291510617,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1659299059
    },
    {
        "content": "<p>There might be a point to that, since right now I think it would be impossible to state interpolation results in good way.</p>",
        "id": 291510758,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659299264
    },
    {
        "content": "<p>and maybe mean inequalities?</p>",
        "id": 291510821,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1659299340
    },
    {
        "content": "<p>Do you definitely mean ereal and not ennreal?</p>",
        "id": 291513112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659302401
    },
    {
        "content": "<p>Yes, because currently <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a> takes in a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real\">docs#real</a>, but maybe it could really be restricted to <code>nnreal</code>.</p>",
        "id": 291513355,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1659302749
    },
    {
        "content": "<p>I was thinking it could be nice if it took an <code>ennreal</code>. Then it would match <code>lp</code>. This should also make the equivalence significantly simpler.</p>",
        "id": 291539389,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659338266
    },
    {
        "content": "<p>I'm going to undertake the change of switching to <code>ennreal</code>, unless someone objects, but there seemed to be enough <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> to do it.</p>",
        "id": 291622483,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659382452
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, who wrote <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a></p>",
        "id": 291645163,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1659395383
    },
    {
        "content": "<p>I think it is a very good idea to refactor <code>pi_Lp</code> to use an <code>ennreal</code>, and also to define <code>prod_Lp</code>.</p>",
        "id": 291676918,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1659427320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> the refactor of <code>pi_Lp</code> is ready: <a href=\"https://github.com/leanprover-community/mathlib/pull/15833\">#15833</a> (modulo moving a few lemmas at the top of the file to appropriate places). I thought you might want to be the one(s) to take a look since you are the authors of <code>pi_Lp</code> and <code>lp</code>.</p>",
        "id": 291912630,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659556978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inner.20product.20space.20on.20.CE.B1.20.C3.97.20.CE.B2/near/292769533\">just asked</a> for the inner product on a <code>prod</code>. Is anyone implementing it currently? I don't think it should be too hard: just define a type synonym for <code>prod</code> and a map from there into <code>pi_Lp (fin 2)</code> and pull all the structure back. Actually, now that I think about it, does that pullback actually make the product, uniform and bornological structures match those of <code>prod</code> definitionally? Probably not?</p>",
        "id": 292776476,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660145118
    },
    {
        "content": "<p>No but if forgetful inheritance is setup correctly that shouldn‚Äôt be too much of a problem</p>",
        "id": 292794713,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660150879
    },
    {
        "content": "<p>You can also just do it by hand and that won't be too hard. I've been waiting to have time to pull it off myself but that didn't happen yet <span aria-label=\"slight frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"slight frown\">:slight_frown:</span></p>",
        "id": 292831182,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660164784
    },
    {
        "content": "<p>I mean, it's not a terrible amount of work, but it would be annoying to do it twice (once for <code>pi_Lp</code> and once for <code>prod_Lp</code>).</p>",
        "id": 292832988,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660165453
    },
    {
        "content": "<p>Eh, we treat <code>pi</code> and <code>prod</code> separately everywhere else.</p>",
        "id": 292833322,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660165616
    },
    {
        "content": "<p>Yeah, but with <code>pi_Lp</code> you have to (or rather, prefer to) do all these shenanigans to make the structures determined by the metric structure agree definitionally with the ones that exist on the underlying Œ†-type. We would want to do the same with <code>prod_Lp</code>. It would be nice if we can just get it for free instead of duplicating the work. I believe this is why everyone has been loathe to implement it.</p>",
        "id": 292835277,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660166544
    }
]