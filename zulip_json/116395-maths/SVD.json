[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> and I see a route to formalizing the singular value decomposition (SVD) by following Axler's book a bit further.  We would build on the work by <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span> and <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  on adjoints and spectral theory, and then we'd like to extract SVD for real/complex matrices.  Is anyone else working on this?</p>\n<p>I should add that Dan and I are Lean novices, and so our \"first draft\" will probably need some help to make it useful for <code>mathlib</code>.</p>",
        "id": 269335821,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1643150231
    },
    {
        "content": "<p>Sounds like a great project! I'll take the opportunity to bring up again a relevant issue that came up recently: it's currently very unpleasant to work with the standard basis (i.e. <code>pi.basis_fun</code>, and related things like <code>matrix.to_lin'</code>) on <code>pi_Lp</code> and <code>euclidean_space</code>. The reason is that <code>pi.basis_fun</code> is defined as the standard basis on <code>Œπ ‚Üí ùïú</code> and while those other two spaces are type copies of this, Lean never figures it out, so we always have to feed in the types manually.</p>\n<p>One can think of a few solutions, for example we could duplicate the API of <code>pi.basis_fun</code>, <code>matrix.to_lin'</code> and friends to the type copies, but I'm afraid of the code duplication this would entail. Another possibility would be to have a <code>[has_standard_basis Œπ ùïú E]</code> typeclass, which sounds more promising to me.</p>\n<p>Any thoughts?</p>",
        "id": 269336949,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643150947
    },
    {
        "content": "<p>Did you think about having the two \"identity\" equivalences as is done with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.to_dual\">docs#order_dual.to_dual</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.of_dual\">docs#order_dual.of_dual</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_lex\">docs#to_lex</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_lex\">docs#of_lex</a>?</p>",
        "id": 269337348,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643151130
    },
    {
        "content": "<p>Works great in order theory, once you fight pattern-matching a bit (cf <a href=\"https://tqft.net/mathlib/data/sum/interval\">file#data/sum/interval</a>.lean) when dealing with inductives.</p>",
        "id": 269337448,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643151186
    },
    {
        "content": "<p>I actually have been thinking of a more radical proposal, which is to demote the current metric space instance on <code>pi</code> (with the sup-norm) to a locale.  This would allow for a rival locale, used in the inner product space library, in which it's the l2-norm.</p>",
        "id": 269338870,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643151917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269337348\">said</a>:</p>\n<blockquote>\n<p>Did you think about having the two \"identity\" equivalences as is done with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.to_dual\">docs#order_dual.to_dual</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.of_dual\">docs#order_dual.of_dual</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_lex\">docs#to_lex</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_lex\">docs#of_lex</a>?</p>\n</blockquote>\n<p>That could be another option, though I suspect having to use those equivalences all the time could get old pretty fast.</p>",
        "id": 269354172,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643163234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269338870\">said</a>:</p>\n<blockquote>\n<p>I actually have been thinking of a more radical proposal, which is to demote the current metric space instance on <code>pi</code> (with the sup-norm) to a locale.  This would allow for a rival locale, used in the inner product space library, in which it's the l2-norm.</p>\n</blockquote>\n<p>I'm not sure I'm getting this right -- you would propose to get rid of <code>euclidean_space</code> and <code>pi_Lp</code> entirely and replace them by locales?</p>",
        "id": 269354287,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643163320
    },
    {
        "content": "<p>I would keep the type synonym <code>pi_Lp</code> since (at this stage) I don't see the other Lp spaces being used often enough to give headaches.  But yes, I'd get rid of <code>euclidean_space</code>.  We'd instead have that in the locale <code>inner_product_space</code> the metric and norm instances on finitely-indexed pi-types, including <code>Œπ ‚Üí ùïú</code>, be given by the L2 norm.</p>",
        "id": 269357727,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643167399
    },
    {
        "content": "<p>It is indeed a bit of a drastic proposal, and I haven't tried it out yet.</p>",
        "id": 269357738,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643167426
    },
    {
        "content": "<p>If we're going to fix this, I think we should also fix it for <code>pi_Lp</code>, it'll be used with bases sooner or later. If we go down the route of duplicating the API, we could get rid of <code>euclidean_space</code>, put an inner product space structure on <code>pi_Lp 2</code>, and hope we don't have to worry about a third type copy down the road.</p>",
        "id": 269360040,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643169756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269360040\">said</a>:</p>\n<blockquote>\n<p>with bases </p>\n</blockquote>\n<p>What do you mean by this, sorry?</p>",
        "id": 269360101,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643169793
    },
    {
        "content": "<p>I mean we'll want to use <code>matrix.to_lin'</code> and friends with those spaces at some point.</p>",
        "id": 269360131,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643169815
    },
    {
        "content": "<p>Do you think so?  I never have ...</p>",
        "id": 269360148,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643169840
    },
    {
        "content": "<p>Sure, I use the 1-norm all the time and matrices are involved.</p>",
        "id": 269360244,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643169914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269360040\">said</a>:</p>\n<blockquote>\n<p>If we go down the route of duplicating the API, we could get rid of <code>euclidean_space</code>, put an inner product space structure on <code>pi_Lp 2</code>, and hope we don't have to worry about a third type copy down the road.</p>\n</blockquote>\n<p>And with this proposal, I don't quite follow?  We already have an inner product space structure on <code>pi_Lp 2</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.inner_product_space\">docs#pi_Lp.inner_product_space</a></p>",
        "id": 269360248,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643169915
    },
    {
        "content": "<p>Hmm, so why do we have <code>euclidean_space</code> again?</p>",
        "id": 269360353,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643169985
    },
    {
        "content": "<p><code>pi_Lp</code> is for a finite dependent family <code>E : Œπ ‚Üí Type*</code>, <code>euclidean_space</code> is its special case <code>E = Œª i, ùïú</code>.</p>",
        "id": 269360407,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269360244\">said</a>:</p>\n<blockquote>\n<p>Sure, I use the 1-norm all the time and matrices are involved.</p>\n</blockquote>\n<p>The 1-norm is also somewhat special, though (maybe we would have a third locale for it!), the other <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-norms I personally only tend to use in some kind of auxiliary step building up to a better norm.</p>",
        "id": 269360482,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170146
    },
    {
        "content": "<p>Then making <code>euclidean_space</code> notation instead of a type copy would be a good first step!</p>",
        "id": 269360502,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643170170
    },
    {
        "content": "<p>I don't think it would fix problems like in <a href=\"https://github.com/leanprover-community/mathlib/pull/11551\">#11551</a>, though ... a type synonym of a type synonym is still as annoying as a type synonym, I think.</p>",
        "id": 269360596,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170253
    },
    {
        "content": "<p>And there are also a lot of annoying unification errors that tend to strike when you work with a dependent pi-type, it may be that <code>euclidean_space</code> was introduced to circumvent that issue.</p>",
        "id": 269360636,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170298
    },
    {
        "content": "<p>Still, it would be interesting to try it!</p>",
        "id": 269360706,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170343
    },
    {
        "content": "<p>I guess with my other proposal, my concern is that I don't see how to have a \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-dependent locale\"</p>",
        "id": 269360744,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269360596\">said</a>:</p>\n<blockquote>\n<p>I don't think it would fix problems like in <a href=\"https://github.com/leanprover-community/mathlib/pull/11551\">#11551</a>, though ... a type synonym of a type synonym is still as annoying as a type synonym, I think.</p>\n</blockquote>\n<p>It still means that we could get away with only two versions of <code>matrix.to_lin'</code> and friends. At 3 copies I think it starts being excessive.</p>",
        "id": 269360747,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643170399
    },
    {
        "content": "<p>In any case, I still think the <code>[has_standard_basis Œπ ùïú E]</code> class looks like the best way out. Is there an obvious drawback?</p>",
        "id": 269360923,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643170582
    },
    {
        "content": "<p>Can you explain this idea a bit more?  I didn't understand when you mentioned it before.</p>",
        "id": 269360940,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170609
    },
    {
        "content": "<p>We would define, say, <code>matrix.to_lin'</code> so that it constructs a linear map on <code>E</code> if the class <code>[has_standard_basis Œπ ùïú E]</code> is there.</p>",
        "id": 269361010,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643170686
    },
    {
        "content": "<p>It's a data class, containing precisely an <code>Œπ</code>-indexed basis for <code>E</code>?</p>",
        "id": 269361039,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170719
    },
    {
        "content": "<p>Yeah</p>",
        "id": 269361046,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643170729
    },
    {
        "content": "<p>I think this also seems like an elegant solution, yes.  I'd be curious to go a little way with both this and the separate-locales method, and see how they work.</p>",
        "id": 269361068,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170764
    },
    {
        "content": "<p>I wonder whether with <code>has_standard_basis</code> you'd lose convenient things like the ability to directly consider a vector constructed using the <code>![3, 2, 5]</code> notation as an element of the space.</p>",
        "id": 269361262,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170864
    },
    {
        "content": "<p>Or, if you redefined the <code>![3, 2, 5]</code> notation to apply to <code>has_standard_basis</code>, whether you'd lose its computational power for the original setting of <code>Œπ ‚Üí ùïú</code>.</p>",
        "id": 269361441,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170938
    },
    {
        "content": "<p>We'd have to try it to find out!</p>",
        "id": 269361454,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643170946
    },
    {
        "content": "<p>You would if you directly work with <code>euclidean_space</code> or <code>Œπ ‚Üí ùïú</code>. But admittedly we would end up doing this less often if we go down that route.</p>",
        "id": 269361486,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643170959
    },
    {
        "content": "<p>Hmm, so what would we do with a file like<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/number_theory/modular.html\">https://leanprover-community.github.io/mathlib_docs/number_theory/modular.html</a><br>\nwhich is full of explicit calculations about 2x2 matrices?</p>",
        "id": 269361594,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643171030
    },
    {
        "content": "<p>Are we converting back and forth between matrices and linear maps there? At first glance it looks mostly like we're considering the space of matrices as a vector space.</p>",
        "id": 269361924,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643171195
    },
    {
        "content": "<p>Mostly it's individual matrices, so simpler really than either of those things.  But the <code>![3, 2, 5]</code> notation is used quite a bit.</p>",
        "id": 269362075,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643171287
    },
    {
        "content": "<p>But this wouldn't affect the ability to define matrices.</p>",
        "id": 269362210,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643171376
    },
    {
        "content": "<p>Actually, could <code>[has_coe (Œπ ‚Üí ùïú) E]</code> work instead of creating a new typeclass?</p>",
        "id": 269362342,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643171427
    },
    {
        "content": "<p>I see, so you would go for this<br>\n<span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269361262\">said</a>:</p>\n<blockquote>\n<p>I wonder whether with <code>has_standard_basis</code> you'd lose convenient things like the ability to directly consider a vector constructed using the <code>![3, 2, 5]</code> notation as an element of the space.</p>\n</blockquote>\n<p>(with the vector/matrix notation unaffected, but not applying to <code>euclidean_space</code>) rather than this<br>\n<span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269361441\">said</a>:</p>\n<blockquote>\n<p>Or, if you redefined the <code>![3, 2, 5]</code> notation to apply to <code>has_standard_basis</code>, whether you'd lose its computational power for the original setting of <code>Œπ ‚Üí ùïú</code>.</p>\n</blockquote>",
        "id": 269362359,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643171437
    },
    {
        "content": "<p>I think we should test this <code>has_coe</code> thing first, if it works then I think it solves all our problems.</p>",
        "id": 269362474,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643171561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269362342\">said</a>:</p>\n<blockquote>\n<p>Actually, could <code>[has_coe (Œπ ‚Üí ùïú) E]</code> work instead of creating a new typeclass?</p>\n</blockquote>\n<p>Hmm ... I think it works to allow you to easily consider <code>![3, 2, 5]</code> as an element of <code>E</code>, but not to allow you to easily consider  <code>![[3, 2, 5], [0, 0, 1], [1, 1, 1]]</code> as an operator on <code>E</code>?</p>",
        "id": 269362486,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643171590
    },
    {
        "content": "<p>Well, this notation would just work like does now.</p>",
        "id": 269362498,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643171637
    },
    {
        "content": "<p>It's a bit tricky, too, right?  Because you don't want just any coercion, you want a coercion which is an isomorphism of vector spaces.</p>",
        "id": 269362538,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643171664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269362498\">said</a>:</p>\n<blockquote>\n<p>Well, this notation would just work like does now.</p>\n</blockquote>\n<p>But the situation now is unsatisfactory, that's why we have all these problems with <code>matrix.to_lin'</code> on <code>euclidean_space</code>.</p>",
        "id": 269362557,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643171705
    },
    {
        "content": "<p>Oh, does that notation not work with <code>euclidean_space</code>?</p>",
        "id": 269362581,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643171753
    },
    {
        "content": "<p>I believe not.  The notation makes a matrix (i.e., <code>Œπ ‚Üí Œπ ‚Üí ùïú</code>), <code>matrix.to_lin'</code> turns a matrix into an operator on <code>Œπ ‚Üí ùïú</code>, and as we saw in <a href=\"https://github.com/leanprover-community/mathlib/pull/11551\">#11551</a> it's quite painful to identify that with an operator on <code>euclidean_space</code>.</p>",
        "id": 269362652,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643171843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269362538\">said</a>:</p>\n<blockquote>\n<p>It's a bit tricky, too, right?  Because you don't want just any coercion, you want a coercion which is an isomorphism of vector spaces.</p>\n</blockquote>\n<p>It might be just enough to work for the few types we care about here. It'll produce garbage for a general coercion, but we could probably live with it.</p>",
        "id": 269362930,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643172126
    },
    {
        "content": "<p>It's worth a shot!  I think we should do some experiments.</p>",
        "id": 269363052,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643172302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269354172\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269337348\">said</a>:</p>\n<blockquote>\n<p>Did you think about having the two \"identity\" equivalences as is done with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.to_dual\">docs#order_dual.to_dual</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.of_dual\">docs#order_dual.of_dual</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_lex\">docs#to_lex</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_lex\">docs#of_lex</a>?</p>\n</blockquote>\n<p>That could be another option, though I suspect having to use those equivalences all the time could get old pretty fast.</p>\n</blockquote>\n<p>It's surprisingly not. Just a matter of inserting them at the correct places, which doesn't happen too often. And I think you should have them in all cases, because they're roughly the only way to make stuff typecheck without breaking the API barrier and ending up with nonsensical goals.</p>",
        "id": 269383210,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643189821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/SVD/near/269383210\">said</a>:</p>\n<blockquote>\n<p>It's surprisingly not. Just a matter of inserting them at the correct places, which doesn't happen too often. And I think you should have them in all cases, because they're roughly the only way to make stuff typecheck without breaking the API barrier and ending up with nonsensical goals.</p>\n</blockquote>\n<p>Part of the reason why I'm skeptical is that in this particular case, it involves dealing with things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">linear_map.to_matrix'</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">‚âÉ‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>on type copies of <code>n ‚Üí R</code> and <code>m ‚Üí R</code>. So even just figuring out how to insert those equivs would be quite painful.</p>",
        "id": 269425589,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643209559
    }
]