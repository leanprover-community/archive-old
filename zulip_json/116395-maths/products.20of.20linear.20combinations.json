[
    {
        "content": "<p>If you have a <code>comm_ring R</code> and an <code>algebra R A</code>, then you can look at <code>R</code>-linear combinations of elements in <code>A</code>. Those are terms of <code>lc R A</code>. Of course you can naturally multiply those things, so that you get <code>algebra R (lc R A)</code>. Also, <code>lc.total</code> becomes an algebra hom.<br>\n(N.b.: The multiplication on <code>lc R A</code> is <em>not</em> the multiplication on <code>finsupp</code>.)<br>\nI've proven these things in <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/lc_algebra.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/lc_algebra.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/lc_algebra.lean</a><br>\nWhat is the right place in mathlib for these facts? Should I start a new file? (If so, where?) Or should this go in <code>linear_algebra.linear_combination</code>?</p>",
        "id": 161539440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553369354
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/847\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/847\">#847</a></p>",
        "id": 161622661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553501902
    },
    {
        "content": "<p>What is this for?</p>",
        "id": 161624431,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553503962
    },
    {
        "content": "<p>I needed this for some stuff on topological rings (part of the perfectoid project).</p>",
        "id": 161624644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553504221
    },
    {
        "content": "<p>It's a natural thing to do, right?</p>",
        "id": 161624874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553504467
    },
    {
        "content": "<p>In particular, I needed the <code>mul_support</code> theorem.</p>",
        "id": 161624886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553504480
    },
    {
        "content": "<p>It feels like a strange construction. It seems you're using much less than that <code>A</code> is an R-algebra here. Is it just that <code>A</code> needs to be a monoid, and then <code>lc R A</code> is an algebra?</p>",
        "id": 161627748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553507402
    },
    {
        "content": "<p><code>lc R A</code> needs that <code>A</code> is an <code>R</code>-module.</p>",
        "id": 161628117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553507736
    },
    {
        "content": "<p>So if you have a monoid in <code>R</code>-modules...</p>",
        "id": 161628122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553507754
    },
    {
        "content": "<p>I'm confused, sorry, why does <code>lc R A</code> need that <code>A</code> is an <code>R</code>-module? I thought it was just formal <code>R</code>-linear combinations of terms in <code>A</code>.</p>",
        "id": 161629050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553508619
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/b39d6d8a502edfb5adb3026c256c82bea526328b/src/linear_algebra/linear_combination.lean#L18\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/b39d6d8a502edfb5adb3026c256c82bea526328b/src/linear_algebra/linear_combination.lean#L18\">https://github.com/leanprover-community/mathlib/blob/b39d6d8a502edfb5adb3026c256c82bea526328b/src/linear_algebra/linear_combination.lean#L18</a></p>",
        "id": 161629243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553508818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I guess there is a <em>lot</em> of linear algebra that can be generalised.</p>",
        "id": 161629303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553508843
    },
    {
        "content": "<p>I guess I've never looked at <code>lc</code> before... :-)</p>",
        "id": 161629374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553508940
    },
    {
        "content": "<p>That's so weird that they put <code>[add_comm_group β] [module α β]</code> in the requirements for <code>lc</code>, right from the beginning.</p>",
        "id": 161629567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553509108
    },
    {
        "content": "<p>It's like <code>lc</code> doesn't mean \"formal linear combinations\", which is what I'd always assumed, but \"not-yet -added-up linear expressions in a module\"</p>",
        "id": 161629717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553509210
    },
    {
        "content": "<p>Yup...</p>",
        "id": 161629734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553509241
    },
    {
        "content": "<p>.... ugh?</p>",
        "id": 161629739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553509249
    },
    {
        "content": "<p>I guess this might be the first time you need the assumption: <a href=\"https://github.com/leanprover-community/mathlib/blob/b39d6d8a502edfb5adb3026c256c82bea526328b/src/linear_algebra/linear_combination.lean#L142\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/b39d6d8a502edfb5adb3026c256c82bea526328b/src/linear_algebra/linear_combination.lean#L142\">https://github.com/leanprover-community/mathlib/blob/b39d6d8a502edfb5adb3026c256c82bea526328b/src/linear_algebra/linear_combination.lean#L142</a></p>",
        "id": 161629744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553509254
    },
    {
        "content": "<p>but then much of the rest of the file doesn't need such strong assumptions again</p>",
        "id": 161629874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553509385
    },
    {
        "content": "<p>I'm willing to invest time in refactoring the algebraic hierarchy... but it will need to be streamlined. Currently PR's are opened faster than they are merged.</p>",
        "id": 161629880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553509392
    }
]