[
    {
        "content": "<p>What is the current status of inductive limits with respect to mathlib? I have a sequence of isometric embeddings <code>i n : C n -&gt; C (n+1)</code> for <code>n : nat</code>, and I want to get the inductive limit as a metric space in which all <code>C n</code> embed isometrically. I can definitely do it by hand, but if the direct limit in <code>Set</code> is already there it might be fun to try to use it. And if mathlib is ready for a categoric framework with metric spaces as objects and isometric embeddings as maps, why not!</p>",
        "id": 157612795,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549379236
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/types.lean#L49\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/types.lean#L49\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/types.lean#L49</a> has the colimit of a general diagram of types. You can specialize the index category to <code>nat</code> (which is a poset, and therefore automatically a category).<br>\nI also have the more specific description of the equivalence relation on a filtered colimit of types in a form which is more or less ready to PR.</p>",
        "id": 157613017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549379411
    },
    {
        "content": "<p>Do you know the joke that, when you ask a question to a category theorist and you listen to his answer, then after that you don't understand your own question any more? :)</p>",
        "id": 157613165,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549379550
    },
    {
        "content": "<p>To be honest, I don't know what a cocone is, or a colimit, but I would very much like to see how the general framework works in a super-concrete setting just like the one I asked, on <code>Set</code>.</p>",
        "id": 157613256,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549379645
    },
    {
        "content": "<p>Btw, for what I am asking #PR585 by Kenny would be very useful.</p>",
        "id": 157613404,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549379784
    },
    {
        "content": "<p>inductive limits are special cases of colimits</p>",
        "id": 157614377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549380534
    },
    {
        "content": "<p>And a cocone is the thing that shows up in the statement of the universal property: another object together with compatible maps from all the objects in the diagram (the <code>C n</code>).</p>",
        "id": 157615682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549381507
    },
    {
        "content": "<p>Is the statement you need just that there exists a metric space in which all the <code>C n</code> embed isometrically and compatibly with the give maps <code>i n</code>?</p>",
        "id": 157615950,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549381749
    },
    {
        "content": "<blockquote>\n<p>Is the statement you need just that there exists a metric space in which all the <code>C n</code> embed isometrically and compatibly with the give maps <code>i n</code>?</p>\n</blockquote>\n<p>Yes, exactly. Note that the category of metric spaces and isometric embeddings is not really well behaved, for instance if you have two embeddings FY : X -&gt; Y and FZ : X -&gt; Z, then there are several non-isometric ways to complete the square, but there is a maximal one, so universal properties would be expressed in terms of 1-Lipschitz maps instead of isometries.<br>\nBut for limits along <code>nat</code> everything is fine (as the embeddings are injection, it is just an increasing sequence of spaces, and you take the union)</p>",
        "id": 157625890,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549389727
    }
]