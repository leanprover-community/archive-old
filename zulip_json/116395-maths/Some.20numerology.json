[
    {
        "content": "<p>I have a little riddle for people who like numbers in Lean.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 176232783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569015844
    },
    {
        "content": "<p>Of course the question is not about the math proof, it's about convincing Lean</p>",
        "id": 176232861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569015957
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">h2p</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">not_lt</span><span class=\"o\">],</span> <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_neg</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_add_one</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">not_le</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">fpow_le_of_le</span> <span class=\"n\">h2p</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fpow_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fpow_neg</span><span class=\"o\">,</span> <span class=\"n\">div_le_iff</span> <span class=\"o\">(</span><span class=\"n\">fpow_pos_of_pos</span> <span class=\"n\">h3p</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">one_le_fpow_of_nonneg</span> <span class=\"n\">h2p</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176233939,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569017161
    },
    {
        "content": "<p>the <code>-n</code> seems unnecessary</p>",
        "id": 176234155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569017397
    },
    {
        "content": "<p>Using Mario's comment, I golfed it to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fpow_le_one_of_nonpos</span> <span class=\"n\">h2p</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">not_lt</span><span class=\"o\">],</span> <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_one_le_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_le</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">fpow_le_of_le</span> <span class=\"n\">h2p</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">fpow_one</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176234439,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569017716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_of_not_lt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">fpow_le_of_le</span> <span class=\"n\">hp&#39;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_one_le_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">fpow_le_of_le</span> <span class=\"n\">hp&#39;</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176234649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569017975
    },
    {
        "content": "<p>the golfy version is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">hp&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">fpow_le_of_le</span> <span class=\"n\">hp&#39;</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">h</span> <span class=\"err\">$</span>\n  <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">fpow_le_of_le</span> <span class=\"n\">hp&#39;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_one_le_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h&#39;</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 176234873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569018201
    },
    {
        "content": "<p>if I cheat by simplifying the statement some more:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">fpow_le_of_le</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">h</span> <span class=\"err\">$</span>\n  <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">fpow_le_of_le</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_one_le_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h&#39;</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 176234980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569018301
    },
    {
        "content": "<p>Thanks Floris and Mario!</p>",
        "id": 176255152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569053714
    },
    {
        "content": "<p>Here's one I ran into the other day: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Should that be in mathlib? Is it there already?</p>",
        "id": 176263880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569070816
    },
    {
        "content": "<p><code>int.to_nat</code> is not maths right?</p>",
        "id": 176263914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569070902
    },
    {
        "content": "<p>It sends negative things to 0, that's why this is true. This should be called <code>to_nat_strict_mono</code> or something.</p>",
        "id": 176264013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569071044
    },
    {
        "content": "<p>It's far from strict</p>",
        "id": 176264021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569071060
    },
    {
        "content": "<p>So yes, it's not maths.</p>",
        "id": 176264022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569071060
    },
    {
        "content": "<p>I tend to prefer <code>nat_abs</code></p>",
        "id": 176264027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569071074
    },
    {
        "content": "<p>I thought strict meant \"working with lt not le\"</p>",
        "id": 176264029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569071075
    },
    {
        "content": "<p>Also, we now have the <code>lift</code> tactic</p>",
        "id": 176264031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569071082
    },
    {
        "content": "<p><code>nat_abs</code> is the maths one, right?</p>",
        "id": 176264032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569071090
    },
    {
        "content": "<p>I assume it is <code>int.to_nat_lt_to_nat</code></p>",
        "id": 176275506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569090716
    },
    {
        "content": "<p>I can't find that in mathlib. Johan -- this all started with me trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Ioo_fin_equiv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>The size of {a&lt;x&lt;b} really is to_nat. But I could prove something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 176346629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569224537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">le_to_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">to_nat</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">to_nat_eq_max</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_max_left</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">to_nat_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">to_nat</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">coe_nat_le_coe_nat_iff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">to_nat_eq_max</span><span class=\"o\">,</span> <span class=\"n\">max_le_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">exact</span> <span class=\"n\">and_iff_left</span> <span class=\"o\">(</span><span class=\"n\">coe_zero_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">lt_to_nat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">to_nat</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_iff_le_iff_lt_iff_lt</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">to_nat_le</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">to_nat_le_to_nat</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nat</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">to_nat</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">to_nat_le</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">le_to_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">to_nat_lt_to_nat</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nat</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">to_nat</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">lt_to_nat</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 176346759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569224716
    },
    {
        "content": "<p>this goes in data.int.basic</p>",
        "id": 176346774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569224752
    },
    {
        "content": "<p>I was unsure whether the idea was to develop the theory of <code>to_nat</code> any more, or whether one should use the \"superior\" <code>nat_abs</code> which is more mathematically appealing in some weird way</p>",
        "id": 176347158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569225259
    },
    {
        "content": "<p>Is there some monotonicity tactic which needs to know about <code>to_nat_lt_to_nat</code> ? <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ?</p>",
        "id": 176347180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569225306
    },
    {
        "content": "<p>I don't know how well mono handles side conditions</p>",
        "id": 176348385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569226544
    },
    {
        "content": "<p>I think <code>mono</code> could help here. What it does is that it tries <code>assumption</code> on the side condition while selecting a lemma. If it fails with <code>assumption</code> it just means that the lemma is more expensive to apply. The lemma with the fewest remaining side condition is selected. If there's only one candidate, you're just going to get a dump of all the side conditions that <code>mono</code> can't handle</p>",
        "id": 176365579,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569243569
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Ioo_fin_equiv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">has</span> <span class=\"n\">hsb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_lt_to_nat</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">sub_lt_sub_iff_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hsb</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_of_add_one_le</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_add_of_nonneg_left</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">add_lt_add_left</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt_coe_nat_of_lt</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_eq_max</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">max_eq_left</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">lt_iff_not_ge&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">sa</span><span class=\"o\">,</span> <span class=\"n\">sb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"k\">begin</span> <span class=\"n\">ring</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I really hope this can be seriously golfed. I just muddle through with stuff like this; there are a couple of non-terminal simps :-/</p>",
        "id": 176401132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569267118
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Ico_fin_equiv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sub_nonneg</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">le_add_of_nonneg_left</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt_sub_iff_add_lt</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n <span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))]</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Ioo_fin_equiv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">of_eq</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_one_le_iff</span><span class=\"o\">])</span>\n<span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Ico_fin_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Ioc_fin_equiv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">of_eq</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_add_one_iff</span><span class=\"o\">])</span>\n<span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Ioo_fin_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟨</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_of_veq</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_of_veq</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Icc_fin_equiv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">of_eq</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_add_one_iff</span><span class=\"o\">])</span>\n<span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">Ico_fin_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 176405142,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569269708
    },
    {
        "content": "<p>Kevin, it is now your duty to PR this before it disappear from sight.</p>",
        "id": 176405283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569269782
    },
    {
        "content": "<p>I'll have to remember how to PR stuff. I have to Skype interview someone in 30 minutes and I want to clean up the kitchen before that :-/ I'll get my act together after that.</p>",
        "id": 176406643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569270663
    },
    {
        "content": "<p>That's very nice Chris. I just chose the equiv I needed, but if you prove the more convenient one first the rest can happen relatively simply.</p>",
        "id": 176406754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569270735
    },
    {
        "content": "<p>I feel like various steps in Chris's proof need to be separated out  in their own lemmas when we PR this to mathlib.</p>",
        "id": 176407319,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569271126
    },
    {
        "content": "<p><em>sigh</em> how do you do <code>update-mathlib</code> when you're editing mathlib, again?</p>",
        "id": 176413744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569276197
    },
    {
        "content": "<p>I can't find it in the docs :-/</p>",
        "id": 176413830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569276274
    },
    {
        "content": "<p>aah got it <code>cache-olean</code></p>",
        "id": 176413879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569276360
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1479\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1479\">#1479</a> is the of_nat lemmas. I haven't done the equiv yet; I can see at least some of what can come off, my issue is simply that I don't know the import hierarchy so I just don't know where these lemmas go.</p>",
        "id": 176414693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569277082
    },
    {
        "content": "<p>(3) Does this give anyone else an assertion violation?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico_equiv_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>[added 19th Oct 2019 -- I also seem to need to import data.equiv.basic now but I can still get the assertion violation]</p>",
        "id": 176425065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569288922
    },
    {
        "content": "<p>(1) I thought I'd try it myself after I realised what I should be proving.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"err\">$</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_lt_to_nat</span> <span class=\"o\">(</span><span class=\"n\">sub_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">sub_lt_sub_right</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span>\n    <span class=\"n\">le_add_of_nonneg_left</span> <span class=\"err\">$</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">add_lt_of_lt_sub_right</span>\n    <span class=\"err\">$</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_to_nat</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hsb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span>\n    <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_coe_nat</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 176425066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569288922
    },
    {
        "content": "<p>(4)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico_equiv_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le_sub_right_of_add_le</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sub_lt_iff_lt_add</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 176425067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569288922
    },
    {
        "content": "<p>(2)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico_equiv_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sub_le_sub_right</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">sub_lt_sub_right</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le_add_of_sub_right_le</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add_lt_of_lt_sub_right</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">≃</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico_equiv_sub</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>I was inspired to do the result Chris had; I should have used + not - for  the sign of n. We're proving that the counting measure is invariant :-) (and hence must be the Haar measure).</p>",
        "id": 176425068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569288922
    },
    {
        "content": "<p>(5) [meh, that'll teach me to post when offline; messages have appeared in random order]</p>",
        "id": 176425081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569288956
    },
    {
        "content": "<p>Sorting is hard... every computer scientist knows that <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 176431595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569299545
    }
]