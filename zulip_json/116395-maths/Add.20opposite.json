[
    {
        "content": "<p>Related to <a href=\"#narrow/stream/116395-maths/topic/smul.20invariant.20measure\">this thread</a>, I want to have an additive version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mul.to_has_opposite_scalar\">docs#has_mul.to_has_opposite_scalar</a></p>",
        "id": 259476388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635474755
    },
    {
        "content": "<p>To do this, I need to define <code>add_opposite</code>.</p>",
        "id": 259476399,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635474788
    },
    {
        "content": "<p>Of course, I can do it but may be it's a good reason to think about <code>opposite</code> API. I have a few questions:</p>\n<ol>\n<li>Why do we want <code>opposite</code> to be irreducible (unlike <code>order_dual</code> etc)?</li>\n<li>Should I separate <code>opposite</code> (category theory) from <code>opposite</code> (multiplicative opposite)?</li>\n<li>If we want it to stay irreducible, should I turn it into a one-field <code>structure</code>?</li>\n</ol>",
        "id": 259476577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635474989
    },
    {
        "content": "<p>For 1, is it because multiplication is a binary operation that returns data while le is a binary relation that returns a Prop?</p>",
        "id": 259479261,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635478769
    },
    {
        "content": "<p>My guess is that people who wrote <code>opposite</code> and <code>order_dual</code> had different applications in mind.</p>",
        "id": 259479586,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635479209
    },
    {
        "content": "<p>Regarding 2: since preorders and categories are quite related, I guess it almost makes more sense to unify \"opposite category\" (currently <code>opposite</code>) and \"opposite order\" (currently <code>order_dual</code>), and have a different type alias for \"opposite algebra\" (currently <code>opposite</code>)</p>",
        "id": 259480212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635480084
    },
    {
        "content": "<p>My understanding is that <code>opposite</code> was made irreducible because the category library got mightily confused otherwise. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Can you confirm? Or was there another reason?</p>",
        "id": 259480229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635480121
    },
    {
        "content": "<p>I don't want <code>order_dual</code> to be irreducible!</p>",
        "id": 259480311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635480218
    },
    {
        "content": "<p>If we split two meanings of opposite, which one inherits the notation? What notation should we use for the other one?</p>",
        "id": 259480384,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635480281
    },
    {
        "content": "<p>Sure, I understand. So maybe Scott will save my idea by telling us that <code>opposite</code> doesn't need to be irreducible for categories after all...</p>",
        "id": 259480395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635480312
    },
    {
        "content": "<p>But maybe it's as Yakov says: <code>order_dual</code> flips Proppy things around, whereas <code>opposite</code> flips data things around.</p>",
        "id": 259480451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635480367
    },
    {
        "content": "<p>If we flip <code>≤</code> and <code>≥</code>, then we flip <code>min</code> and <code>max</code>, and this is data.</p>",
        "id": 259480505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635480461
    },
    {
        "content": "<p>That's right, and <code>inf</code> and <code>sup</code> as well, of course.</p>",
        "id": 259480654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635480637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> could you please have a look at this thread?</p>",
        "id": 259716431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635579476
    },
    {
        "content": "<p>I don't think it <em>needs</em> to be irreducible, but having <code>opposite</code> irreducible removed an easy source of confusion.</p>",
        "id": 259716478,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635579524
    },
    {
        "content": "<p>It would be equally good as a structure.</p>",
        "id": 259716495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635579570
    },
    {
        "content": "<p>I guess I don't understand in this discussion why we might want to make to semireducible again.</p>",
        "id": 259716498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635579590
    },
    {
        "content": "<p>To be able to use it for \"dual\" proofs like we do with <code>order_dual</code>?</p>",
        "id": 259716776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635579997
    },
    {
        "content": "<p>And the main question is whether we should use different <code>opposite</code> for \"multiplicative opposite\" and \"category theory opposite\".</p>",
        "id": 259716790,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635580054
    },
    {
        "content": "<p>Since the \"multiplicative opposite\" is going to get an additive version.</p>",
        "id": 259716794,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635580080
    },
    {
        "content": "<p>And what should we do with notation if we split to <code>opposite</code>s.</p>",
        "id": 259716838,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635580101
    },
    {
        "content": "<p>I don't object to splitting opposites. The category theory one is a common generalisation of the multiplicative opposite and the order dual, and I can't think of any particular reason it is \"closer\" to one or the other.</p>",
        "id": 259716920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635580291
    },
    {
        "content": "<p>What do you think about notation?</p>",
        "id": 259717041,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635580448
    },
    {
        "content": "<p>If we can't use \\op for both, that seems a good reason not to split them to me. :-)</p>",
        "id": 259717958,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635581899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Add.20opposite/near/259716495\">said</a>:</p>\n<blockquote>\n<p>It would be equally good as a structure.</p>\n</blockquote>\n<p>Equally good from the standpoint of avoiding confusion, but actually making it a structure would be pretty rough for the opposite category, I found.</p>",
        "id": 259732290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635602227
    },
    {
        "content": "<p>Logically, <code>opposite</code> corresponds to <code>order_dual</code> because <code>opposite</code> is something we apply to the objects of a category, not the morphisms. (The thing corresponding to the multiplicative opposite would be the construction that reverses the order of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊗</span></span></span></span> in a monoidal category.)</p>",
        "id": 259732365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635602303
    },
    {
        "content": "<p>However, the practical difference between <code>opposite</code> for categories and <code>order_dual</code> is that it seems like <code>order_dual</code> is almost exclusively used in \"dual proofs\", while the <code>opposite</code> of a category is something we're actually interested in. I'm not sure exactly why this should be (it seems like the uses of opposite categories in category theory should also correspond to uses of the opposite orders in order theory, maybe order theory is just simpler so we can just unfold the definition where it would otherwise arise, and/or we have less order theory).</p>",
        "id": 259732607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635602638
    },
    {
        "content": "<p>I would assume that is why the fact that <code>order_dual</code> is a plain <code>def</code> hasn't led to any confusion about what <code>a &lt;= b</code> means yet.</p>",
        "id": 259732697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635602749
    },
    {
        "content": "<p>On the other hand, I am not sure if we have any good solution for <code>opposite</code> in Lean 4 yet.</p>",
        "id": 259732853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635602931
    },
    {
        "content": "<p>Good reason to split: we want <code>to_additive</code> to send <code>opposite Monoid</code> to <code>opposite AddMonoid</code>, not <code>add_opposite AddMonoid</code>.</p>",
        "id": 259733056,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635603165
    },
    {
        "content": "<p>What about <code>Xᵒᵖ</code> (category theory), <code>Xᵐᵒᵖ</code> (multiplicative),  <code>Xᵃᵒᵖ</code> (additive)?</p>",
        "id": 259757535,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635636325
    },
    {
        "content": "<p>Or maybe put the notation behind a locale?</p>",
        "id": 259757969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635636953
    },
    {
        "content": "<p>And use <code>X⁺ᵒᵖ</code> and <code>Xᵒᵖ</code> for the algebra versions,  and <code>Xᵒᵖ</code> for category theory, but in different locales</p>",
        "id": 259758016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635636983
    },
    {
        "content": "<p>We in fact already have <code>ᵐᵒᵖ</code>, in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal.opposite/src\">src#category_theory.monoidal.opposite</a>, although as Reid points out above this matches up well with the multiplicative opposite anyway. In any case, the monoidal opposite is sufficiently specialized that it can of course disappear into a locale if it is ever problematic.</p>",
        "id": 259758953,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635638611
    },
    {
        "content": "<p>One more possibility: <code>Xˣᵒᵖ</code> and <code>X⁺ᵒᵖ</code> for multiplicative and additive opposites.</p>",
        "id": 259760158,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635640684
    },
    {
        "content": "<p>There is also <code>Xᕯᵒᵖ</code></p>",
        "id": 259760312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635641022
    },
    {
        "content": "<p>(two stars, one symbol)</p>",
        "id": 259760315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635641028
    },
    {
        "content": "<p>I'm trying to separate category theory opposite from multiplicative opposite. Which one should I use for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rack\">docs#rack</a>?</p>",
        "id": 260675676,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636386740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 260675724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636386757
    },
    {
        "content": "<p>Let's call this a multiplicative opposite, since <code>x ◃ y</code> is is generalizing <code>x * y * x⁻¹</code></p>",
        "id": 260682358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636389252
    },
    {
        "content": "<p>I wonder how much overlap <code>shelf</code> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_distrib_mul_action\">docs#mul_distrib_mul_action</a> have</p>",
        "id": 260682454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636389293
    },
    {
        "content": "<p>I'm trying to remember why I didn't use <code>has_scalar</code> (and introduce a <code>has_inv_scalar</code>) instead of using the quandle-traditional triangle.  I think there might have been two reasons: (1) some quandles have a scalar structure already, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>t</mi><mo separator=\"true\">,</mo><msup><mi>t</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[t,t^{-1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, and (2) it's a self-action, and homomorphisms of self-actions transform both arguments of the operation.</p>",
        "id": 260684109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636389991
    },
    {
        "content": "<p>Regarding 2, I guess we don't have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_distrib_mul_action_hom\">docs#mul_distrib_mul_action_hom</a> to sit between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action_hom\">docs#mul_action_hom</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_semiring_action_hom\">docs#mul_semiring_action_hom</a></p>",
        "id": 260693714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636393944
    }
]