[
    {
        "content": "<p>At 8pm UK time (2000 BST, so 1900 GMT) I am going to a live Lean explanation, in this thread, of a very simple mathlib file which defines a (non-inductive) structure. Mathematicians need to learn how to make structures, it's something we do very differently in mathematics. Here we need a far more formal kind of interface. I will hopefully do a few of these. It's like \"talking people through mathlib files\".</p>",
        "id": 127264270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527616406
    },
    {
        "content": "<p>youtube live?</p>",
        "id": 127264325,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527616449
    },
    {
        "content": "<p>No, it seems \"Zulip live\"</p>",
        "id": 127264635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527616904
    },
    {
        "content": "<p>Johan, I was inspired to do it after looking at the structure you constructed, which reminded me of the terrible first structure I constructed.</p>",
        "id": 127265656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618035
    },
    {
        "content": "<p>Hello, this is just me talking through <code>pnat.lean</code></p>",
        "id": 127267673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620444
    },
    {
        "content": "<p>It should be easy</p>",
        "id": 127267674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620451
    },
    {
        "content": "<p>and maybe people will find it later.</p>",
        "id": 127267678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620456
    },
    {
        "content": "<p>Ok so mathematicians use a lot of structures, and one structure I was brought up on is \"the UK mathematician's nat\", namely {1,2,3,...}</p>",
        "id": 127267695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620485
    },
    {
        "content": "<p>Ok so how do we define the UK mathematician's nat?</p>",
        "id": 127267698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620495
    },
    {
        "content": "<p>Well pretty clearly we could define it like the computer scientist's nat := {0,1,2,3,...}</p>",
        "id": 127267701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620513
    },
    {
        "content": "<p>we could just make a structure</p>",
        "id": 127267702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620518
    },
    {
        "content": "<p>hmm</p>",
        "id": 127267742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620525
    },
    {
        "content": "<p>let me fire up lean</p>",
        "id": 127267745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620528
    },
    {
        "content": "<p>that's better</p>",
        "id": 127267771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620573
    },
    {
        "content": "<p>I am so rubbish at structures</p>",
        "id": 127267796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620608
    },
    {
        "content": "<p>aah bingo</p>",
        "id": 127267810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620626
    },
    {
        "content": "<p>it's not a structure</p>",
        "id": 127267813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620628
    },
    {
        "content": "<p>it's an inductive type</p>",
        "id": 127267817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620630
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">pnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">→</span> <span class=\"n\">pnat</span>\n</pre></div>",
        "id": 127267819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620635
    },
    {
        "content": "<p>So there's pnat</p>",
        "id": 127267820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620638
    },
    {
        "content": "<p>and that would work</p>",
        "id": 127267825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620641
    },
    {
        "content": "<p>and we could define addition and multiplication and prove addition is commutative</p>",
        "id": 127267870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620654
    },
    {
        "content": "<p>and do all that stuff again</p>",
        "id": 127267873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620659
    },
    {
        "content": "<p>and that's stuff we already did with nat</p>",
        "id": 127267877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620664
    },
    {
        "content": "<p>and that's kind of a waste</p>",
        "id": 127267879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620668
    },
    {
        "content": "<p>it would be nice to inherit all those theorems about nat and get them to pnat immediately</p>",
        "id": 127267889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620686
    },
    {
        "content": "<p>so let's take a look at what they did in Lean or mathlib, wherever they defined pnat</p>",
        "id": 127267896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620696
    },
    {
        "content": "<p>Ok so it's in mathlib</p>",
        "id": 127267932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620740
    },
    {
        "content": "<p>which means that computer scientists are not interested in this structure</p>",
        "id": 127267936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620746
    },
    {
        "content": "<p>You can get to it with \"import data.pnat\"</p>",
        "id": 127267939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620755
    },
    {
        "content": "<p>let's find it on github</p>",
        "id": 127267943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620761
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/data/pnat.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/pnat.lean\">https://github.com/leanprover/mathlib/blob/master/data/pnat.lean</a></p>",
        "id": 127267993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620790
    },
    {
        "content": "<p>There it is.</p>",
        "id": 127267996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620794
    },
    {
        "content": "<p>Last modified two days ago!</p>",
        "id": 127267999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620798
    },
    {
        "content": "<p>Things never stand still around here</p>",
        "id": 127268002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620804
    },
    {
        "content": "<p>OK so I'm going to talk through this file, or at least what I understand of this file, which is pretty much all of it I hope</p>",
        "id": 127268022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620830
    },
    {
        "content": "<p>and the first thing we notice</p>",
        "id": 127268029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620840
    },
    {
        "content": "<p>is that on line 1</p>",
        "id": 127268034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620847
    },
    {
        "content": "<p>they don't define it using an inductive structure like nat</p>",
        "id": 127268037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620853
    },
    {
        "content": "<p>they define it as a _subtype_</p>",
        "id": 127268039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620859
    },
    {
        "content": "<p>which is a bit more annoying to use in practice</p>",
        "id": 127268041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620868
    },
    {
        "content": "<p>oh wait I skipped a line</p>",
        "id": 127268066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620882
    },
    {
        "content": "<p><code>import tactic.basic</code></p>",
        "id": 127268093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620889
    },
    {
        "content": "<p>let's come back to that line when I have figured out why it's there</p>",
        "id": 127268099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620895
    },
    {
        "content": "<p><code>def pnat := {n : ℕ // n &gt; 0}</code></p>",
        "id": 127268104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620906
    },
    {
        "content": "<p>And there it is.</p>",
        "id": 127268105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620912
    },
    {
        "content": "<p>There are sets <code>{x | blah}</code></p>",
        "id": 127268107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620919
    },
    {
        "content": "<p>and there are subtypes <code>{x // blah}</code></p>",
        "id": 127268110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620927
    },
    {
        "content": "<p>this one is a subtype</p>",
        "id": 127268112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620938
    },
    {
        "content": "<p>don't mind me I'm just editing mathlib</p>",
        "id": 127268135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620987
    },
    {
        "content": "<p>Ok so I was trying to work out what a subtype was</p>",
        "id": 127268138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620994
    },
    {
        "content": "<p>but I know the answer</p>",
        "id": 127268140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620998
    },
    {
        "content": "<p>to make a pnat you have to give two pieces of data</p>",
        "id": 127268197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621013
    },
    {
        "content": "<p>1) a nat</p>",
        "id": 127268200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621016
    },
    {
        "content": "<p>2) a proof that it's positive</p>",
        "id": 127268204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621020
    },
    {
        "content": "<p>(that's &gt; 0 for you French speakers)</p>",
        "id": 127268209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621029
    },
    {
        "content": "<p>so here's an example</p>",
        "id": 127268220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621051
    },
    {
        "content": "<p><code>definition x : pnat := ⟨59,oh crap⟩</code></p>",
        "id": 127268230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621080
    },
    {
        "content": "<p>that didn't go well</p>",
        "id": 127268232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621082
    },
    {
        "content": "<p>I was in the middle of defining 59</p>",
        "id": 127268235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621087
    },
    {
        "content": "<p>and all of a sudden I needed a proof.</p>",
        "id": 127268238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621093
    },
    {
        "content": "<p>OK so let's try again but this time be prepared</p>",
        "id": 127268240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621103
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">59</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">definition</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">59</span><span class=\"o\">,</span><span class=\"n\">H</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127268288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621135
    },
    {
        "content": "<p>Ok that went better</p>",
        "id": 127268289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621141
    },
    {
        "content": "<p>I cheated with my proof that 59 &gt; 0 by saying the proof was sorry (which means \"just assume it\")</p>",
        "id": 127268295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621162
    },
    {
        "content": "<p>and now I can finally make my pnat</p>",
        "id": 127268298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621169
    },
    {
        "content": "<p>This is going to be pretty inconvenient having to prove that things are positive</p>",
        "id": 127268311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621195
    },
    {
        "content": "<p>but actually in a couple of lines we're going to see a really good way of doing it</p>",
        "id": 127268316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621206
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`ℕ+`</span> <span class=\"o\">:=</span> <span class=\"n\">pnat</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">coe_pnat_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127268324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621229
    },
    {
        "content": "<p>Those are the next couple of lines</p>",
        "id": 127268325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621233
    },
    {
        "content": "<p>The first one is easy: it sets up notation, and we're going to use the completely non-standard notation <code>ℕ+</code> for pnat</p>",
        "id": 127268373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621264
    },
    {
        "content": "<p>as opposed to a little plus or a little star or whatever the French use, maybe some sub zero or super zero</p>",
        "id": 127268376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621291
    },
    {
        "content": "<p>this sort of thing is a minefield</p>",
        "id": 127268383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621298
    },
    {
        "content": "<p><code>ℕ+</code> will do</p>",
        "id": 127268387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621302
    },
    {
        "content": "<p>and now this incomprehensible coe line is where we start making the interface for our structure</p>",
        "id": 127268413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621332
    },
    {
        "content": "<p>ℕ^*</p>",
        "id": 127268417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527621342
    },
    {
        "content": "<p>because we are already finished with the structure</p>",
        "id": 127268418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621343
    },
    {
        "content": "<p>Submit a PR Patrick</p>",
        "id": 127268425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621351
    },
    {
        "content": "<p>The thing that mathematicians don't realise</p>",
        "id": 127268486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621383
    },
    {
        "content": "<p>or at least that I didn't realise at all</p>",
        "id": 127268490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621388
    },
    {
        "content": "<p>(I suspect Patrick knew full well)</p>",
        "id": 127268492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621392
    },
    {
        "content": "<p>was that it's not just about making the structure</p>",
        "id": 127268493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621398
    },
    {
        "content": "<p>the next thing you have to do is to say to yourself</p>",
        "id": 127268494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621407
    },
    {
        "content": "<p>\"what is every single basic thing that my users might want to do with this structure?\"</p>",
        "id": 127268502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621422
    },
    {
        "content": "<p>And the first basic thing is that given a positive natural, a mathematician might also want to think of it as a natural.</p>",
        "id": 127268515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621435
    },
    {
        "content": "<p>And in fact it's such a natural (no pun intended) to move from pnat to nat</p>",
        "id": 127268519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621451
    },
    {
        "content": "<p>that not only did they design a function for it</p>",
        "id": 127268520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621457
    },
    {
        "content": "<p>but they made it into a coercion</p>",
        "id": 127268529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621469
    },
    {
        "content": "<p>which means \"it happens magically\"</p>",
        "id": 127268532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621476
    },
    {
        "content": "<p>Aah I see what to do</p>",
        "id": 127268580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621492
    },
    {
        "content": "<p>I have mathlib pnat open</p>",
        "id": 127268582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621498
    },
    {
        "content": "<p>and a copy of it</p>",
        "id": 127268584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621503
    },
    {
        "content": "<p>and I edit the copy</p>",
        "id": 127268586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621504
    },
    {
        "content": "<p>great</p>",
        "id": 127268587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621506
    },
    {
        "content": "<p>so let's see if we can understand this coercion</p>",
        "id": 127268598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621518
    },
    {
        "content": "<p>and then let's see it happen</p>",
        "id": 127268602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621521
    },
    {
        "content": "<p><code>instance coe_pnat_nat : has_coe ℕ+ ℕ := ⟨subtype.val⟩</code></p>",
        "id": 127268616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621535
    },
    {
        "content": "<p>instances are something I never understood</p>",
        "id": 127268617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621541
    },
    {
        "content": "<p>coercions not really either</p>",
        "id": 127268622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621545
    },
    {
        "content": "<p>and then those dreaded pointy brackets</p>",
        "id": 127268629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621550
    },
    {
        "content": "<p>and then an incomprehensible <code>subtype.val</code></p>",
        "id": 127268633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621557
    },
    {
        "content": "<p>That's what I thought of that line in about January.</p>",
        "id": 127268636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621567
    },
    {
        "content": "<p>But as Kenny once told me, Lean does not do magic</p>",
        "id": 127268646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621579
    },
    {
        "content": "<p>so we can work out what this line does</p>",
        "id": 127268652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621590
    },
    {
        "content": "<p>and I work it out by having this pnat file open in Lean and just right clicking on subtype.val</p>",
        "id": 127268719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621621
    },
    {
        "content": "<p>and then selecting \"go to definition\"</p>",
        "id": 127268723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621625
    },
    {
        "content": "<p>and then we find ourselves right in the heart of core lean</p>",
        "id": 127268728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621636
    },
    {
        "content": "<p>and we see</p>",
        "id": 127268731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621648
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127268733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621652
    },
    {
        "content": "<p>and pnat, the positive naturals, was a subtype</p>",
        "id": 127268742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621670
    },
    {
        "content": "<p>in fact if we switch notation off and look at pnat</p>",
        "id": 127268750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">pnat</span>\n</pre></div>",
        "id": 127268765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621712
    },
    {
        "content": "<p>we see</p>",
        "id": 127268803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621725
    },
    {
        "content": "<p><code>def pnat : Type :=\nsubtype (λ (n : nat), gt n 0)</code></p>",
        "id": 127268808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621729
    },
    {
        "content": "<p>eew</p>",
        "id": 127268814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621738
    },
    {
        "content": "<p><code>gt</code> is <code>&gt;</code></p>",
        "id": 127268816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621740
    },
    {
        "content": "<p>so indeed we see a function nat to Prop</p>",
        "id": 127268824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621762
    },
    {
        "content": "<p>sending n to \"n &gt; 0\"</p>",
        "id": 127268827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621766
    },
    {
        "content": "<p>and we get a subtype, consisting of the n such that we have a proof that n &gt; 0</p>",
        "id": 127268833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621782
    },
    {
        "content": "<p>and we see from the definition of the subtype structure that the <code>n</code> is the <code>val</code> and the proof is the <code>property</code></p>",
        "id": 127268846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621803
    },
    {
        "content": "<p>so subtype.val sends the pnat <code>⟨59,H⟩</code></p>",
        "id": 127268904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621872
    },
    {
        "content": "<p>to its value</p>",
        "id": 127268905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621876
    },
    {
        "content": "<p>which is 59</p>",
        "id": 127268906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621878
    },
    {
        "content": "<p>and we made it a coercion using coercion instance magic</p>",
        "id": 127268913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621893
    },
    {
        "content": "<p>so that means it should happen naturally</p>",
        "id": 127268920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621905
    },
    {
        "content": "<p>Ok it works!</p>",
        "id": 127268930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621932
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">59</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">definition</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">59</span><span class=\"o\">,</span><span class=\"n\">H</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"c1\">-- x : pnat</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127268987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621976
    },
    {
        "content": "<p>it would be better if you could see me typing</p>",
        "id": 127268991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621985
    },
    {
        "content": "<p>that would save me having to cut and paste</p>",
        "id": 127268992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621990
    },
    {
        "content": "<p>how do I do that?</p>",
        "id": 127268993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527621995
    },
    {
        "content": "<p>Did someone say youtube ?</p>",
        "id": 127268994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622004
    },
    {
        "content": "<p>Does twitch take this sort of stuff?</p>",
        "id": 127268996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622014
    },
    {
        "content": "<p>I have done all manner of weird things on twitch</p>",
        "id": 127268997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622020
    },
    {
        "content": "<p>Yes, I don't understand why you don't record that and put it on youtube</p>",
        "id": 127269004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527622031
    },
    {
        "content": "<p>because I'm just squeezing this in before I put the kids to bed</p>",
        "id": 127269008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622045
    },
    {
        "content": "<p>so back to the point</p>",
        "id": 127269009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622050
    },
    {
        "content": "<p>a miracle occurred!</p>",
        "id": 127269011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622052
    },
    {
        "content": "<p>A contradiction in type theory!</p>",
        "id": 127269012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622058
    },
    {
        "content": "<p>x had type pnat</p>",
        "id": 127269015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622061
    },
    {
        "content": "<p>and type nat</p>",
        "id": 127269016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622064
    },
    {
        "content": "<p>as well</p>",
        "id": 127269019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622066
    },
    {
        "content": "<p>but actually what happened was that coercion kicked in</p>",
        "id": 127269021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622076
    },
    {
        "content": "<p>The output of the second check was <code>↑x : ℕ</code></p>",
        "id": 127269062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622089
    },
    {
        "content": "<p>and that arrow (which you get with <code>\\u</code>)</p>",
        "id": 127269074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622096
    },
    {
        "content": "<p>means \"I got coerced!\"</p>",
        "id": 127269077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622102
    },
    {
        "content": "<p>so that has solved our first fundamental problem</p>",
        "id": 127269084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622114
    },
    {
        "content": "<p>which is that for a mathematician, pnat is a subset of nat</p>",
        "id": 127269086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622123
    },
    {
        "content": "<p>and hence every pnat _is_ a nat</p>",
        "id": 127269088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622128
    },
    {
        "content": "<p>They don't have it so easy in DTT</p>",
        "id": 127269092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622135
    },
    {
        "content": "<p>so we are stuck with the cute little arrows</p>",
        "id": 127269100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622144
    },
    {
        "content": "<p>let's press on</p>",
        "id": 127269107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622156
    },
    {
        "content": "<p>The next line is clever</p>",
        "id": 127269120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622196
    },
    {
        "content": "<p><code>def to_pnat (n : ℕ) (h : n &gt; 0 . tactic.exact_dec_trivial) : ℕ+ := ⟨n, h⟩</code></p>",
        "id": 127269146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622202
    },
    {
        "content": "<p>That's using a really cool piece of Lean functionality</p>",
        "id": 127269177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622212
    },
    {
        "content": "<p>...which breaks if I remove that <code>import</code> line</p>",
        "id": 127269191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622235
    },
    {
        "content": "<p>so that's why the import is there</p>",
        "id": 127269193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622240
    },
    {
        "content": "<p>This is pretty much the rarest of ways to make a function input for Lean</p>",
        "id": 127269213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622272
    },
    {
        "content": "<p>you could still hide the  cute little arrows from pp display though</p>",
        "id": 127269215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527622276
    },
    {
        "content": "<p>there's something in the manual about this</p>",
        "id": 127269225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622304
    },
    {
        "content": "<p>you can do pp.no_cute_arrows Patrick?</p>",
        "id": 127269228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622312
    },
    {
        "content": "<p>here we are</p>",
        "id": 127269280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622340
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\" target=\"_blank\" title=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\">https://leanprover.github.io/reference/expressions.html#implicit-arguments</a></p>",
        "id": 127269281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622342
    },
    {
        "content": "<p><code>set_option pp.coercions false</code></p>",
        "id": 127269282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527622343
    },
    {
        "content": "<p>does that mean Lean doesn't do them?</p>",
        "id": 127269286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622351
    },
    {
        "content": "<p>or just doesn't print the arrows?</p>",
        "id": 127269290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622355
    },
    {
        "content": "<p>doesn't print</p>",
        "id": 127269291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527622360
    },
    {
        "content": "<p>thought so :-)</p>",
        "id": 127269293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622364
    },
    {
        "content": "<p>hence the pp</p>",
        "id": 127269297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527622372
    },
    {
        "content": "<p><code>pp</code> means \"pretty print\"</p>",
        "id": 127269299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527622373
    },
    {
        "content": "<p>meaning pretty print</p>",
        "id": 127269300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527622377
    },
    {
        "content": "<p>presumably no setting of options can change Lean's behaviour?</p>",
        "id": 127269305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622384
    },
    {
        "content": "<p>in pnat we have the last of the ways that Lean can make an implicit argument</p>",
        "id": 127269320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622406
    },
    {
        "content": "<p><code>class.instance_max_depth</code></p>",
        "id": 127269324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527622412
    },
    {
        "content": "<p>\"run a tactic to make the argument for you\"</p>",
        "id": 127269331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622416
    },
    {
        "content": "<p>Patrick: touch\\'e</p>",
        "id": 127269333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622420
    },
    {
        "content": "<p><code>def to_pnat (n : ℕ) (h : n &gt; 0 . tactic.exact_dec_trivial) : ℕ+ := ⟨n, h⟩</code></p>",
        "id": 127269339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622437
    },
    {
        "content": "<p>means \"take an input n, and then see if you can prove n &gt; 0 by using the tactic <code>tactic.exact_dec_trivial</code>\"</p>",
        "id": 127269389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622467
    },
    {
        "content": "<p>Let's see this tactic in action</p>",
        "id": 127269394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622479
    },
    {
        "content": "<p><code>theorem H : 59 &gt; 0 := by tactic.exact_dec_trivial</code></p>",
        "id": 127269414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622512
    },
    {
        "content": "<p>It works!</p>",
        "id": 127269416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622514
    },
    {
        "content": "<p>To find out what it does you can right click on it and it will be all tacticy stuff</p>",
        "id": 127269420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622526
    },
    {
        "content": "<p>so I'm not going to do that</p>",
        "id": 127269422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622530
    },
    {
        "content": "<p>but I know what is going on</p>",
        "id": 127269424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622534
    },
    {
        "content": "<p>in fact there's a shorter way of doing it</p>",
        "id": 127269425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622541
    },
    {
        "content": "<p><code>theorem H : 59 &gt; 0 := dec_trivial</code></p>",
        "id": 127269430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622555
    },
    {
        "content": "<p>(not a tactic, so no <code>by</code> this time)</p>",
        "id": 127269432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622562
    },
    {
        "content": "<p><code>dec_trivial</code> just means \"&gt; is decidable on nat so just please decide this for me by proving it's true\"</p>",
        "id": 127269485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622592
    },
    {
        "content": "<p>apparently you can't use it to prove things are false though</p>",
        "id": 127269505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622625
    },
    {
        "content": "<p><code>theorem H1 : 0 &gt; 0 := dec_trivial</code></p>",
        "id": 127269512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622631
    },
    {
        "content": "<p>doesn't work</p>",
        "id": 127269514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622632
    },
    {
        "content": "<p>so let's see <code>to_pnat</code> in action!</p>",
        "id": 127269527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622656
    },
    {
        "content": "<p><code>definition y : pnat := to_pnat 12 </code></p>",
        "id": 127269542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622680
    },
    {
        "content": "<p>that's much better than what we had before</p>",
        "id": 127269579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622685
    },
    {
        "content": "<p><code>definition z : pnat := to_pnat 0</code></p>",
        "id": 127269595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622700
    },
    {
        "content": "<p>you get some weird error</p>",
        "id": 127269600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622709
    },
    {
        "content": "<p>OK so let's press on</p>",
        "id": 127269610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622726
    },
    {
        "content": "<p><code>def succ_pnat (n : ℕ) : ℕ+ := ⟨succ n, succ_pos n⟩</code></p>",
        "id": 127269612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622728
    },
    {
        "content": "<p>this one looks easy.</p>",
        "id": 127269616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622732
    },
    {
        "content": "<p>Given n a nat, we are building a pnat called <code>succ_pnat n</code></p>",
        "id": 127269626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622745
    },
    {
        "content": "<p>and you can guess from the name that it will be n + 1</p>",
        "id": 127269633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622754
    },
    {
        "content": "<p>so I reckon that succ_pos n is going to be the theorem that n + 1 &gt; 0</p>",
        "id": 127269638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622768
    },
    {
        "content": "<p>we can check that easily</p>",
        "id": 127269644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622771
    },
    {
        "content": "<p>Obviously you can't prove false things using <code>dec_trivial</code>, they're false</p>",
        "id": 127269659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527622791
    },
    {
        "content": "<p>but you can prove the negation using <code>dec_trivial</code></p>",
        "id": 127269708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527622804
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">succ_pos</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 127269733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622825
    },
    {
        "content": "<p><code>succ_pos n : 0 &lt; succ n</code></p>",
        "id": 127269739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622836
    },
    {
        "content": "<p>we could have right clicked and wandered back in to core lean or so, but this is another way</p>",
        "id": 127269750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622856
    },
    {
        "content": "<p>So that's two maps from nat to pnat and a map from pnat to nat</p>",
        "id": 127269767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622898
    },
    {
        "content": "<p>It's certainly the case that we could imagine using both those maps</p>",
        "id": 127269774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622919
    },
    {
        "content": "<p>but what do we need to do next?</p>",
        "id": 127269818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622932
    },
    {
        "content": "<p>This is the question that I as a mathematician find hard</p>",
        "id": 127269824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622939
    },
    {
        "content": "<p>and I think that people like Mario just somehow know</p>",
        "id": 127269825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622944
    },
    {
        "content": "<p>I'm just going to cheat and look at the code</p>",
        "id": 127269828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622955
    },
    {
        "content": "<p><code>@[simp] theorem succ_pnat_coe (n : ℕ) : (succ_pnat n : ℕ) = succ n := rfl</code></p>",
        "id": 127269831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622967
    },
    {
        "content": "<p>OK so this says that given a nat, if we compute its successor as a pnat then it equals its successor as a nat</p>",
        "id": 127269845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527622998
    },
    {
        "content": "<p>Notice the secret coercion! That equality is between a pnat and a nat</p>",
        "id": 127269852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623008
    },
    {
        "content": "<p>and Lean coerces the left hand side</p>",
        "id": 127269854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623015
    },
    {
        "content": "<p>so if you think about it</p>",
        "id": 127269855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623017
    },
    {
        "content": "<p>when you unravel it</p>",
        "id": 127269857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623020
    },
    {
        "content": "<p>that theorem just says <code>succ n = succ n</code></p>",
        "id": 127269860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623027
    },
    {
        "content": "<p>so the proof is <code>rfl</code></p>",
        "id": 127269865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623032
    },
    {
        "content": "<p>Ok now <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> told me that theorems whose proofs were rfl sometimes don't get names</p>",
        "id": 127269928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623054
    },
    {
        "content": "<p>but this one got lucky</p>",
        "id": 127269932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623059
    },
    {
        "content": "<p>it got a name</p>",
        "id": 127269934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623061
    },
    {
        "content": "<p>it's a simp lemma, those need names</p>",
        "id": 127269936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623068
    },
    {
        "content": "<p>and presumably that's because someone somewhere realised that this was a good simp lemma</p>",
        "id": 127269940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623077
    },
    {
        "content": "<p>NOTE FOR BEGINNERS</p>",
        "id": 127269944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623090
    },
    {
        "content": "<p>also I'm not sure that's a good rule of thumb</p>",
        "id": 127269946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623093
    },
    {
        "content": "<p>rfl proofs are very common</p>",
        "id": 127269960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623108
    },
    {
        "content": "<p>It's important that you get your simp lemma the right way round</p>",
        "id": 127269963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623111
    },
    {
        "content": "<p>you don't want to prove that <code>succ n</code> equals <code>succ_pnat n</code></p>",
        "id": 127269971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623134
    },
    {
        "content": "<p>because that would be a comp lemma</p>",
        "id": 127269975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623138
    },
    {
        "content": "<p>in maths it doesn't matter which order you put the things that are equal</p>",
        "id": 127269984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623158
    },
    {
        "content": "<p><code>x = y</code> and <code>y = x</code> mean the same thing</p>",
        "id": 127270022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623163
    },
    {
        "content": "<p>but in Lean you might want to consider putting the more complicated thing on the left</p>",
        "id": 127270034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623177
    },
    {
        "content": "<p>and then simp will simplify it to the right if it uses your lemma</p>",
        "id": 127270042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623188
    },
    {
        "content": "<p>and even if simp does not use your lemma</p>",
        "id": 127270046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623195
    },
    {
        "content": "<p>imagine when you're doing a rewrite</p>",
        "id": 127270053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623202
    },
    {
        "content": "<p>you are trying to prove something</p>",
        "id": 127270060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623209
    },
    {
        "content": "<p>so you're usally trying to make stuff easier</p>",
        "id": 127270065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623216
    },
    {
        "content": "<p>and you don't want to have to put left arrows everywhere because they look weird</p>",
        "id": 127270075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623232
    },
    {
        "content": "<p>so, mathematicians everywhere, remember that THIS WEIRD CS WORLD IS ASYMMETRIC</p>",
        "id": 127270085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623250
    },
    {
        "content": "<p>and if you've proved x = y, make sure x takes more characters to type</p>",
        "id": 127270092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623263
    },
    {
        "content": "<p>or else you should have proved y = x</p>",
        "id": 127270097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623268
    },
    {
        "content": "<p>Next line</p>",
        "id": 127270142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623286
    },
    {
        "content": "<p><code>@[simp] theorem pos (n : ℕ+) : (n : ℕ) &gt; 0 := n.2</code></p>",
        "id": 127270143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623288
    },
    {
        "content": "<p>that looks like really poor Lean to me</p>",
        "id": 127270150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623294
    },
    {
        "content": "<p>who wrote this file anyway</p>",
        "id": 127270153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623297
    },
    {
        "content": "<p>oh I heard of that guy</p>",
        "id": 127270156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623306
    },
    {
        "content": "<p>Now everyone knows that simp is used to prove _equalities_</p>",
        "id": 127270165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623316
    },
    {
        "content": "<p>so all your simp lemmas should be _equalities_</p>",
        "id": 127270170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623324
    },
    {
        "content": "<p>or _iff_s</p>",
        "id": 127270171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623326
    },
    {
        "content": "<p>and anything which is a random thing like &gt;</p>",
        "id": 127270175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623332
    },
    {
        "content": "<p>obviously should not be a simp lemma</p>",
        "id": 127270180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623340
    },
    {
        "content": "<p>because simp, it turns out, does <em>not</em> stand for \"this lemma is pretty simple\"</p>",
        "id": 127270196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623361
    },
    {
        "content": "<p>This is useful for fulfulling side conditions in algebraic rules, which sometimes need that things are nonzero or positive</p>",
        "id": 127270200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623368
    },
    {
        "content": "<p>it stands for \"this lemma is appropriate for the simplifier\"</p>",
        "id": 127270203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623372
    },
    {
        "content": "<p>and 9 times out of 10 it's because it's an equality</p>",
        "id": 127270215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623387
    },
    {
        "content": "<p>I disagree our equality is symmetric. Would you write some cohomological vanishing theorem as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>=</mo><msup><mi>H</mi><mi>i</mi></msup><mo>(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>F</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">0 = H^i(X, F)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.824664em;\"></span><span class=\"strut bottom\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 127270221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527623394
    },
    {
        "content": "<p>but apparently there are other times when it's not</p>",
        "id": 127270268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623405
    },
    {
        "content": "<p>Interesting point Patrick I guess you're right</p>",
        "id": 127270285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623413
    },
    {
        "content": "<p>Maybe 0 is a special case</p>",
        "id": 127270288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623424
    },
    {
        "content": "<p>The conclusion of this is that working out if something is a simp lemma is still something which I haven't got the hang of</p>",
        "id": 127270303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623447
    },
    {
        "content": "<p>most \"let x = value\" type statements have the variable on the left in math</p>",
        "id": 127270309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623459
    },
    {
        "content": "<p>What about <span class=\"tex-error\">$$\\int_{-\\infty}^\\infty e^{-x^2} dx = \\srqt\\pi$$</span>?</p>",
        "id": 127270343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527623502
    },
    {
        "content": "<p>Now look at these</p>",
        "id": 127270345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623504
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">pnat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_coe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">add_pos</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">add_coe</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>",
        "id": 127270348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623509
    },
    {
        "content": "<p>The last thing we want to do is to define random theorems like <code>ne_zero</code> (the last one) and have its actual name be <code>ne_zero</code> in the root namespace</p>",
        "id": 127270404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623537
    },
    {
        "content": "<p>I did that a lot when I started</p>",
        "id": 127270408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623542
    },
    {
        "content": "<p>The statement that if n is a pnat then n isn't zero -- clearly ne_zero is a good name for it</p>",
        "id": 127270416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623559
    },
    {
        "content": "<p>but its full name is <code>pnat.ne_zero</code></p>",
        "id": 127270417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623565
    },
    {
        "content": "<p>like all the other pnat things we're going to do now</p>",
        "id": 127270423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623571
    },
    {
        "content": "<p>So, why is <code>theorem eq</code> not a simp theorem?</p>",
        "id": 127270429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527623578
    },
    {
        "content": "<p>so that's why we opened the pnat namespace</p>",
        "id": 127270430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623579
    },
    {
        "content": "<p>we namespaced</p>",
        "id": 127270435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623585
    },
    {
        "content": "<p>and we opened nat for good measure</p>",
        "id": 127270438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623589
    },
    {
        "content": "<p>because the RHS has a variable not on the LHS</p>",
        "id": 127270443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623603
    },
    {
        "content": "<p>So theorem <code>eq</code> says a fundamental thing about subtypes.</p>",
        "id": 127270452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623617
    },
    {
        "content": "<p>Remember -- a subtype is a term and then a proof of something that depends only on the term</p>",
        "id": 127270507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623645
    },
    {
        "content": "<p>so if we have two subtype things with the same term and different proofs, are they the same?</p>",
        "id": 127270516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623661
    },
    {
        "content": "<p>What RHS variable?</p>",
        "id": 127270520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527623669
    },
    {
        "content": "<p>And yes they are, because all proofs are the same</p>",
        "id": 127270523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623672
    },
    {
        "content": "<p>so that's why pnat.eq is true</p>",
        "id": 127270526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623683
    },
    {
        "content": "<p>and indeed the proof is subtype.eq and you can guess what that says</p>",
        "id": 127270530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623693
    },
    {
        "content": "<p>or right click on ir</p>",
        "id": 127270532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623696
    },
    {
        "content": "<p>it</p>",
        "id": 127270534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623698
    },
    {
        "content": "<p>or #check it</p>",
        "id": 127270536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623701
    },
    {
        "content": "<p>Oh I know why eq isn't a simp lemma</p>",
        "id": 127270549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623714
    },
    {
        "content": "<p>it's not an equality</p>",
        "id": 127270550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623716
    },
    {
        "content": "<p><code>m = n</code> is not a simplification</p>",
        "id": 127270552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623720
    },
    {
        "content": "<p>it's an implication</p>",
        "id": 127270555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623725
    },
    {
        "content": "<p>and where is <code>n</code> coming from?</p>",
        "id": 127270559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623735
    },
    {
        "content": "<p>aah</p>",
        "id": 127270567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623743
    },
    {
        "content": "<p>that's what I mean, <code>n</code> doesn't show up on the LHS</p>",
        "id": 127270570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623748
    },
    {
        "content": "<p>There's another simp rule of thumb</p>",
        "id": 127270575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623754
    },
    {
        "content": "<p>all the variables on the RHS should be in the LHS too</p>",
        "id": 127270620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623776
    },
    {
        "content": "<p>Whenever I have to subtype thingies in my goal, and I need to prove that they are equal, Lean should always apply <code>subtype.eq</code>. I can't think of any reason why you wouldn't want to do that.</p>",
        "id": 127270625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527623786
    },
    {
        "content": "<p>why this rule?</p>",
        "id": 127270626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527623787
    },
    {
        "content": "<p>I should mention that to the guy who wrote the simp docs</p>",
        "id": 127270627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623789
    },
    {
        "content": "<p>It's an extensionality theorem</p>",
        "id": 127270637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623812
    },
    {
        "content": "<p>you don't always want it applied, because it complicates the goal</p>",
        "id": 127270644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623827
    },
    {
        "content": "<p>should it be tagged as such?</p>",
        "id": 127270651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527623833
    },
    {
        "content": "<p>probably</p>",
        "id": 127270655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623840
    },
    {
        "content": "<p>More generally Johan, if you have two structures that are equal, you might want Lean to just decompose them and demand that you prove that all the bits you used to make them are equal</p>",
        "id": 127270657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623844
    },
    {
        "content": "<p>but I think it would be a bit confusing if you were just motoring along and all of a sudden you have 10 goals</p>",
        "id": 127270666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623863
    },
    {
        "content": "<blockquote>\n<p>you don't always want it applied, because it complicates the goal</p>\n</blockquote>\n<p>Huh, the goal becomes easier, right? I just got rid of some irrelevant proofs...</p>",
        "id": 127270670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527623874
    },
    {
        "content": "<p>because you wanted to prove complicated structures were equal</p>",
        "id": 127270672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623876
    },
    {
        "content": "<p>I think this sort of thing is an art</p>",
        "id": 127270717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623887
    },
    {
        "content": "<p>I'm not sure what the best answer is but clearly Mario will speak from experience</p>",
        "id": 127270731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623902
    },
    {
        "content": "<p>you were trying to prove <code>m = n</code>, now you are proving <code>\\u m = \\u n</code></p>",
        "id": 127270732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623902
    },
    {
        "content": "<p>the goal got more complicated</p>",
        "id": 127270740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623914
    },
    {
        "content": "<p>sometimes that's what you want, but it needs to be an explicit choice</p>",
        "id": 127270744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623923
    },
    {
        "content": "<p>Aah -- Johan -- if you actually had variables m and n which were pnats</p>",
        "id": 127270745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623930
    },
    {
        "content": "<p>then you might well not want it</p>",
        "id": 127270749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623935
    },
    {
        "content": "<p>but if m was explicitly <code>&lt;nat,proof&gt;</code></p>",
        "id": 127270756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623942
    },
    {
        "content": "<p>and so was n</p>",
        "id": 127270760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623944
    },
    {
        "content": "<p>then you might want it</p>",
        "id": 127270766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623950
    },
    {
        "content": "<p>(but you might not)</p>",
        "id": 127270767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623952
    },
    {
        "content": "<p>Hmm, fair enough</p>",
        "id": 127270774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527623962
    },
    {
        "content": "<p>and that version is a simp lemma</p>",
        "id": 127270775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527623964
    },
    {
        "content": "<p>ooh my son's gone</p>",
        "id": 127270789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623980
    },
    {
        "content": "<p>I just inherited a second screen</p>",
        "id": 127270791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527623986
    },
    {
        "content": "<p>Ok, I have met subtypes where it was not a simp lemma, I think</p>",
        "id": 127270796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527623993
    },
    {
        "content": "<p>Ok so mk_coe</p>",
        "id": 127270801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624000
    },
    {
        "content": "<p>Or is it a simp lemma for general subtypes?</p>",
        "id": 127270811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527624002
    },
    {
        "content": "<p>that says \"make the subtype and then coerce back to nat and you're back where you started\"</p>",
        "id": 127270861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624017
    },
    {
        "content": "<p>Hmm, yes, let's move on with this chat</p>",
        "id": 127270864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527624019
    },
    {
        "content": "<p><code>subtype.mk_eq_mk</code></p>",
        "id": 127270870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624028
    },
    {
        "content": "<p><code>@[simp] theorem mk_coe (n h) : ((⟨n, h⟩ : ℕ+) : ℕ) = n := rfl</code></p>",
        "id": 127270885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624039
    },
    {
        "content": "<p>it's a general simp lemma</p>",
        "id": 127270888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624040
    },
    {
        "content": "<p>Actually there are several cool things about <code>mk_coe</code></p>",
        "id": 127270901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624057
    },
    {
        "content": "<p>first, it's something which I wanted for my structure and Mario said it didn't have a name</p>",
        "id": 127270918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624080
    },
    {
        "content": "<p>hmm</p>",
        "id": 127270922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624084
    },
    {
        "content": "<p>maybe that's not entirely true</p>",
        "id": 127270924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624088
    },
    {
        "content": "<p>Mario -- why does this lemma use coercion instead of val?</p>",
        "id": 127270933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624105
    },
    {
        "content": "<p>They're definitionally equal, right?</p>",
        "id": 127270937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624113
    },
    {
        "content": "<p>Does it matter which one you choose when making your structure?</p>",
        "id": 127270972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624123
    },
    {
        "content": "<p>it's a simp lemma</p>",
        "id": 127270986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624129
    },
    {
        "content": "<p>But what about <code>(⟨n, h⟩ : ℕ+).val = n</code></p>",
        "id": 127270995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624148
    },
    {
        "content": "<p>The val version is automatic, because simp knows about structures</p>",
        "id": 127270999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624151
    },
    {
        "content": "<p>or <code>subtype.val (⟨n, h⟩ : ℕ+) = n</code></p>",
        "id": 127271006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624160
    },
    {
        "content": "<p>but when the val is hidden in a coercion simp misses it</p>",
        "id": 127271010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624167
    },
    {
        "content": "<p>oh so simp doesn't need to be told that</p>",
        "id": 127271014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624170
    },
    {
        "content": "<p>the thing I wrote</p>",
        "id": 127271017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624173
    },
    {
        "content": "<p>but does need to be told the thing you put in the file</p>",
        "id": 127271021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624178
    },
    {
        "content": "<p>right</p>",
        "id": 127271030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624184
    },
    {
        "content": "<p>You see -- there is so much subtlety in this stuff</p>",
        "id": 127271036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624190
    },
    {
        "content": "<p>I saw the definition of pnat in a maths lecture</p>",
        "id": 127271045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624202
    },
    {
        "content": "<p>I mean you could have it as a simp lemma if you want</p>",
        "id": 127271048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624206
    },
    {
        "content": "<p>it was \"take nat and remove 0\"</p>",
        "id": 127271050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624207
    },
    {
        "content": "<p>and that was it</p>",
        "id": 127271054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624213
    },
    {
        "content": "<p>but it probably won't trigger</p>",
        "id": 127271056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624215
    },
    {
        "content": "<p>There is all this extra stuff here</p>",
        "id": 127271059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624218
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">add_pos</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">add_coe</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 127271068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624235
    },
    {
        "content": "<p>We want add on pnat</p>",
        "id": 127271073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624242
    },
    {
        "content": "<p>and here's something I only learnt recently</p>",
        "id": 127271116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624252
    },
    {
        "content": "<p>the only purpose of <code>has_add</code> and the 20 or so other <code>has_notation</code> things</p>",
        "id": 127271134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624284
    },
    {
        "content": "<p>is notation</p>",
        "id": 127271138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624286
    },
    {
        "content": "<p>The instance is so unimportant that it doesn't even deserve a name</p>",
        "id": 127271143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624300
    },
    {
        "content": "<p>although probably one could have called it <code>pnat.add</code></p>",
        "id": 127271155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624309
    },
    {
        "content": "<p>it gets an automatic name if you don't specify, in this case <code>pnat.has_add</code></p>",
        "id": 127271162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624330
    },
    {
        "content": "<p>The definition of add on pnat clearly needs a theorem -- it needs the theorem that if a&gt;0 and b&gt;0 then a+b&gt;0</p>",
        "id": 127271167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624337
    },
    {
        "content": "<p>Oh I didn't know that -- thanks</p>",
        "id": 127271170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624344
    },
    {
        "content": "<p><code>pnat.add</code> would be the name of the function itself</p>",
        "id": 127271173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624348
    },
    {
        "content": "<p>if it had a name</p>",
        "id": 127271179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624355
    },
    {
        "content": "<p>Oh of course</p>",
        "id": 127271181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624357
    },
    {
        "content": "<p>The function is add</p>",
        "id": 127271222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624366
    },
    {
        "content": "<p>and the proof that it has an add is something else</p>",
        "id": 127271233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624376
    },
    {
        "content": "<p>actually it's not a proof</p>",
        "id": 127271243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624394
    },
    {
        "content": "<p>it's data</p>",
        "id": 127271245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624395
    },
    {
        "content": "<p>OK so we need to proev that if a&gt;0 and b&gt;0 then a+b&gt;0</p>",
        "id": 127271253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624410
    },
    {
        "content": "<p>and we cheat and look at what Mario did</p>",
        "id": 127271258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624417
    },
    {
        "content": "<p>and why is the output from #check so ugly?</p>",
        "id": 127271277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624437
    },
    {
        "content": "<p><code>#check add_pos </code></p>",
        "id": 127271284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624447
    },
    {
        "content": "<p><code>add_pos : 0 &lt; ?M_3 → 0 &lt; ?M_4 → 0 &lt; ?M_3 + ?M_4</code></p>",
        "id": 127271291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624459
    },
    {
        "content": "<p>thanks Lean</p>",
        "id": 127271293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624461
    },
    {
        "content": "<p><code>#check @add_pos </code></p>",
        "id": 127271299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624472
    },
    {
        "content": "<p><code>add_pos : ∀ {α : Type u_1} [_inst_1 : ordered_cancel_comm_monoid α] {a b : α}, 0 &lt; a → 0 &lt; b → 0 &lt; a + b</code></p>",
        "id": 127271304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624479
    },
    {
        "content": "<p>not ideal either</p>",
        "id": 127271339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624483
    },
    {
        "content": "<p>I would have preferred</p>",
        "id": 127271358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624499
    },
    {
        "content": "<p><code>0 &lt; a → 0 &lt; b → 0 &lt; a + b</code></p>",
        "id": 127271364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624506
    },
    {
        "content": "<p>but unsurprisingly</p>",
        "id": 127271371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624516
    },
    {
        "content": "<p>it's the lemma we need</p>",
        "id": 127271376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624522
    },
    {
        "content": "<p>Now these should be straightforward</p>",
        "id": 127271395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624544
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">add_coe</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">nat_coe_coe</span>  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">succ_pred_eq_of_pos</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">to_pnat&#39;_coe</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">to_pnat&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">succ_pred_eq_of_pos</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">coe_nat_coe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">nat_coe_coe</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127271401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624547
    },
    {
        "content": "<p>you see -- this is the advantage of making it a subtype</p>",
        "id": 127271414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624560
    },
    {
        "content": "<p>we have to carry around all these proofs</p>",
        "id": 127271420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624566
    },
    {
        "content": "<p>but <code>add_coe</code> says \"adding the pnats is the same as adding the nats, by definition\"</p>",
        "id": 127271425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624581
    },
    {
        "content": "<p>and indeed if you look at the coercion you can see that this is just a statement of the form X = X</p>",
        "id": 127271485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624607
    },
    {
        "content": "<p>ne_zero : we will need to prove n &gt; 0 -&gt; n ne 0</p>",
        "id": 127271500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624624
    },
    {
        "content": "<p>and it would not surprise me if that were called ne_of_gt</p>",
        "id": 127271514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624638
    },
    {
        "content": "<p>and note that</p>",
        "id": 127271517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624640
    },
    {
        "content": "<p><code>n.2</code> is the proof</p>",
        "id": 127271528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624657
    },
    {
        "content": "<p>that n &gt; 0</p>",
        "id": 127271531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624659
    },
    {
        "content": "<p>it's <code>n.property</code></p>",
        "id": 127271536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624664
    },
    {
        "content": "<p>for kids who are too cool to write such a long thing</p>",
        "id": 127271546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624673
    },
    {
        "content": "<p><code>nat_coe_coe</code></p>",
        "id": 127271563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624692
    },
    {
        "content": "<p>I have no idea why this is a simp lemma</p>",
        "id": 127271565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624696
    },
    {
        "content": "<p>I guess I do know</p>",
        "id": 127271571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624711
    },
    {
        "content": "<p>it's kind of \"well there's only a minor precondition\"</p>",
        "id": 127271573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624718
    },
    {
        "content": "<p>\"and then we get some serious simplification\"</p>",
        "id": 127271614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624730
    },
    {
        "content": "<p>I am kind of surprised this works</p>",
        "id": 127271619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624748
    },
    {
        "content": "<p>we coerce a nat to a pnat</p>",
        "id": 127271626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624756
    },
    {
        "content": "<p>that doesn't even make sense</p>",
        "id": 127271632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624762
    },
    {
        "content": "<p>oh crap</p>",
        "id": 127271635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624769
    },
    {
        "content": "<p>I am looking at an old version of pnat</p>",
        "id": 127271642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624776
    },
    {
        "content": "<p>rofl</p>",
        "id": 127271645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624777
    },
    {
        "content": "<p>I'm now looking at the up to date version</p>",
        "id": 127271669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624813
    },
    {
        "content": "<p>and that line is gone :-)</p>",
        "id": 127271672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624820
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">add_coe</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">to_pnat&#39;_coe</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">to_pnat&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">succ_pred_eq_of_pos</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">coe_to_pnat&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_pnat&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">to_pnat&#39;_coe</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127271680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624834
    },
    {
        "content": "<blockquote>\n<p>Last modified two days ago!<br>\nThings never stand still around here</p>\n</blockquote>",
        "id": 127271682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527624837
    },
    {
        "content": "<p>Things stand still with my mathlib install I can assure you :-)</p>",
        "id": 127271734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624856
    },
    {
        "content": "<p>Ok great</p>",
        "id": 127271747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624883
    },
    {
        "content": "<p><code>@[simp] theorem to_pnat'_coe {n : ℕ} : n &gt; 0 → (n.to_pnat' : ℕ) = n := succ_pred_eq_of_pos</code></p>",
        "id": 127271750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624888
    },
    {
        "content": "<p>that starts with a nat, uses <code>to_pnat'</code> to get to a pnat and then coerces back to a nat and the claim is we're back where we started</p>",
        "id": 127271766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624919
    },
    {
        "content": "<p><code>def to_pnat' (n : ℕ) : ℕ+ := succ_pnat (pred n)</code></p>",
        "id": 127271777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624934
    },
    {
        "content": "<p>Ok so this looks good</p>",
        "id": 127271778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624945
    },
    {
        "content": "<p>if you unravel then we're claiming that succ (pred n) = n</p>",
        "id": 127271785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624954
    },
    {
        "content": "<p>and this is not rfl</p>",
        "id": 127271786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624957
    },
    {
        "content": "<p>indeed it's not even true</p>",
        "id": 127271789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624960
    },
    {
        "content": "<p>it's false for n=0</p>",
        "id": 127271816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624963
    },
    {
        "content": "<p>but we have the hypo n &gt; 0</p>",
        "id": 127271835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624969
    },
    {
        "content": "<p>so we need a lemma that says n &gt; 0 implies succ pred n = n</p>",
        "id": 127271843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624983
    },
    {
        "content": "<p>and that would be called something like <code>succ_pred_eq_of_pos</code></p>",
        "id": 127271849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624996
    },
    {
        "content": "<p>which it indeed is</p>",
        "id": 127271850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527624999
    },
    {
        "content": "<p>Ok nearly there</p>",
        "id": 127271869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625027
    },
    {
        "content": "<p>oh one more simp lemma</p>",
        "id": 127271876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625036
    },
    {
        "content": "<p>you see this is exactly what I don't get</p>",
        "id": 127271882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625042
    },
    {
        "content": "<p>who decides (a) what to prove (b) what to make a simp lemma</p>",
        "id": 127271885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625050
    },
    {
        "content": "<p>We have just proved 10 trivial things</p>",
        "id": 127271889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625057
    },
    {
        "content": "<p><code>@[simp] theorem coe_to_pnat' (n : ℕ+) : (n : ℕ).to_pnat' = n := eq (to_pnat'_coe n.pos)</code></p>",
        "id": 127271892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625063
    },
    {
        "content": "<p>This is a very basic file, so it has almost nothing but simp lemmas</p>",
        "id": 127271896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625068
    },
    {
        "content": "<p>look!</p>",
        "id": 127271897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625069
    },
    {
        "content": "<p>We just proved <code>n = n</code> again</p>",
        "id": 127271899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625073
    },
    {
        "content": "<p>let's make it a simp lemma!</p>",
        "id": 127271902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625078
    },
    {
        "content": "<p>to_pnat' is a bit funny isn't it</p>",
        "id": 127271950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625099
    },
    {
        "content": "<p><code>def to_pnat' (n : ℕ) : ℕ+ := succ_pnat (pred n)</code></p>",
        "id": 127271959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625121
    },
    {
        "content": "<p>sends n to n if n is positive</p>",
        "id": 127271964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625127
    },
    {
        "content": "<p>and 0 to 1</p>",
        "id": 127271967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625129
    },
    {
        "content": "<p>because nobody listens to me when I say it should be 37</p>",
        "id": 127271974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625142
    },
    {
        "content": "<p>hey, the succ pred thing wouldn't work with 37</p>",
        "id": 127271991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625161
    },
    {
        "content": "<p>and perhaps in this particular case they're right</p>",
        "id": 127271992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625161
    },
    {
        "content": "<p>Ok so we basically think of every possible way we can move between nats and pnats and then figure out what is true and make every simplification a simp lemma</p>",
        "id": 127272066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625214
    },
    {
        "content": "<p>exactly</p>",
        "id": 127272079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625225
    },
    {
        "content": "<p>Now here's a meaty bit of file</p>",
        "id": 127272088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">one</span>       <span class=\"o\">:=</span> <span class=\"n\">succ_pnat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_one</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_comm</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127272092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625239
    },
    {
        "content": "<p>it's a commutative monoid!</p>",
        "id": 127272101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625248
    },
    {
        "content": "<p>You can see what Lean thinks the axioms for a commutative monoid are, right there</p>",
        "id": 127272109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625260
    },
    {
        "content": "<p>Now if I had been doing this I would have done <code>instance : has_mul pnat := &lt;...&gt;</code> first</p>",
        "id": 127272133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625280
    },
    {
        "content": "<p>outside the monoid</p>",
        "id": 127272135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625283
    },
    {
        "content": "<p>and I would have done <code>has_one pnat</code></p>",
        "id": 127272142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625294
    },
    {
        "content": "<p>Mario -- does your pnat have a mul?</p>",
        "id": 127272147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625302
    },
    {
        "content": "<p>yes, it's right there</p>",
        "id": 127272150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625310
    },
    {
        "content": "<p><code>comm_monoid</code> implies <code>has_mul</code></p>",
        "id": 127272203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625331
    },
    {
        "content": "<p>If I type <code>#print comm_monoid</code></p>",
        "id": 127272232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625390
    },
    {
        "content": "<p>I can't see this</p>",
        "id": 127272243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625401
    },
    {
        "content": "<p>Do I have to look at the source code to see that comm_monoid extends has_mul?</p>",
        "id": 127272252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625412
    },
    {
        "content": "<p>Or have I misunderstood?</p>",
        "id": 127272254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625420
    },
    {
        "content": "<p><code>comm_monoid</code> extends <code>monoid</code> which extends <code>semigroup</code> which extends <code>has_mul</code></p>",
        "id": 127272264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625435
    },
    {
        "content": "<p><code>class comm_monoid (α : Type u) extends monoid α, comm_semigroup α</code></p>",
        "id": 127272268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625440
    },
    {
        "content": "<p>but you had to know that</p>",
        "id": 127272331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625464
    },
    {
        "content": "<p>I could have written comm_monoid in a different way</p>",
        "id": 127272336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625470
    },
    {
        "content": "<p>and it would have _looked_ like there was a mul</p>",
        "id": 127272338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625477
    },
    {
        "content": "<p>but you wouldn't have got the notation</p>",
        "id": 127272339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625481
    },
    {
        "content": "<p>so I have to look in the source code to check my mul is a mul?</p>",
        "id": 127272343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625500
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>set_option pp.implicit true\n#check (by apply_instance : has_mul ℕ+)\n-- @semigroup.to_has_mul ℕ+ (@monoid.to_semigroup ℕ+ (@comm_monoid.to_monoid ℕ+ pnat.comm_monoid)) : has_mul ℕ+\n</pre></div>",
        "id": 127272353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625516
    },
    {
        "content": "<p>The technical point here, for those wondering, is how I can get Lean to use the notation <code>*</code> for multiplication of pnats</p>",
        "id": 127272357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625524
    },
    {
        "content": "<p>you already have the notation</p>",
        "id": 127272369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625550
    },
    {
        "content": "<p>after that instance</p>",
        "id": 127272370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625554
    },
    {
        "content": "<p>after making it a commutative monoid</p>",
        "id": 127272409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625566
    },
    {
        "content": "<p>but you didn't know for sure that was going to happen</p>",
        "id": 127272416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625579
    },
    {
        "content": "<p>proving it's a comm monoid a fortiori implies it's a monoid and a has_mul and all that</p>",
        "id": 127272419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625583
    },
    {
        "content": "<p>you could only work it out by doing it and then checking that the multiplication notation stuck</p>",
        "id": 127272425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625595
    },
    {
        "content": "<p>with your #check</p>",
        "id": 127272430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625609
    },
    {
        "content": "<p>if you had wanted to know before writing the code</p>",
        "id": 127272434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625614
    },
    {
        "content": "<p>you would have had to read Lean source code</p>",
        "id": 127272436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625619
    },
    {
        "content": "<p>If you define something with a <code>mul := </code> field it's in all likelihood extending <code>has_mul</code></p>",
        "id": 127272444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625630
    },
    {
        "content": "<p>you can't just work it out by querying the system</p>",
        "id": 127272451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625636
    },
    {
        "content": "<p>exactly</p>",
        "id": 127272458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625639
    },
    {
        "content": "<p>You had to rely on someone else being sensible</p>",
        "id": 127272469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625655
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">one</span>       <span class=\"o\">:=</span> <span class=\"n\">succ_pnat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_one</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_comm</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127272471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625668
    },
    {
        "content": "<p>you can either read the code, the inheritance hierarchy, or get lean to tell you</p>",
        "id": 127272473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625674
    },
    {
        "content": "<p>But you didn't get Lean to tell you</p>",
        "id": 127272512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625687
    },
    {
        "content": "<p>no because I knew that <code>comm_monoid</code> extends <code>has_mul</code> (and it wouldn't make sense any other way)</p>",
        "id": 127272523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625714
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">tricky1</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">tricky_bit</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127272538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625760
    },
    {
        "content": "<p>It is important that <code>has_mul</code> be declared only once though</p>",
        "id": 127272539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625760
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">tricky2</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tricky_bit</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127272546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625775
    },
    {
        "content": "<p>only <code>tricky2</code> gets the notation, yes</p>",
        "id": 127272555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527625797
    },
    {
        "content": "<p>but your method for checking this fails</p>",
        "id": 127272596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625805
    },
    {
        "content": "<p>because you can't make any instances</p>",
        "id": 127272607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625810
    },
    {
        "content": "<p><code>#check (by apply_instance : has_mul ℕ+)</code></p>",
        "id": 127272614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625824
    },
    {
        "content": "<p>sorry, you can</p>",
        "id": 127272615,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527625824
    },
    {
        "content": "<p>your method relied on pnat existing</p>",
        "id": 127272620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625830
    },
    {
        "content": "<p>show me Kenny :-)</p>",
        "id": 127272625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625838
    },
    {
        "content": "<p>just <code>sorry</code> everything</p>",
        "id": 127272628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527625847
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 127272630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625852
    },
    {
        "content": "<p>even mul?</p>",
        "id": 127272634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625859
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 127272638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625862
    },
    {
        "content": "<p>I seem to have wandered a bit</p>",
        "id": 127272649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625887
    },
    {
        "content": "<p>OK so what do we need for mul -- clearly we need a proof that if a &gt; 0 and b &gt; 0 then a * b &gt; 0, and we think of what a good name for this lemma would be, and we think \"oh maybe <code>mul_pos_of_pos_of_pos</code></p>",
        "id": 127272700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625930
    },
    {
        "content": "<p>and then we think \"wait a minute that's too long\"</p>",
        "id": 127272706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625943
    },
    {
        "content": "<p>why don't we just go with mul_pos</p>",
        "id": 127272707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625948
    },
    {
        "content": "<p>and indeed that's what it is</p>",
        "id": 127272709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625954
    },
    {
        "content": "<p>naming is an art</p>",
        "id": 127272710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625957
    },
    {
        "content": "<p>and it's another thing mathematicians are bad at</p>",
        "id": 127272712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625963
    },
    {
        "content": "<p>The only training we get</p>",
        "id": 127272713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625966
    },
    {
        "content": "<p>is \"Now by lemma 3.1 and 3.2 we see that Theorem A is proved!\"</p>",
        "id": 127272719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625983
    },
    {
        "content": "<p>from our teachers</p>",
        "id": 127272724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527625989
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class tricky1 (G : Type) :=\n(mul : G → G → G)\n(tricky_bit : 0 = 1)\n\nclass tricky2 (G : Type) extends has_mul G :=\n(tricky_bit : 0 = 1)\n\nsection\nvariables (G : Type) [tricky1 G]\n#check (by apply_instance : has_mul G) --fail\n\ninstance tricky1.has_mul : has_mul G := ⟨tricky1.mul⟩\n\n#check (by apply_instance : has_mul G) --fixed\nend\n\nsection\nvariables (G : Type) [tricky2 G]\n#check (by apply_instance : has_mul G) --success\nend\n</pre></div>",
        "id": 127272729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626006
    },
    {
        "content": "<p>There you go</p>",
        "id": 127272739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626026
    },
    {
        "content": "<p>couldn't be easier</p>",
        "id": 127272741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626028
    },
    {
        "content": "<p>Now</p>",
        "id": 127272779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626045
    },
    {
        "content": "<p>how are we going to prove all these stupid axioms?</p>",
        "id": 127272783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626050
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">one</span>       <span class=\"o\">:=</span> <span class=\"n\">succ_pnat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_one</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_comm</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127272786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626060
    },
    {
        "content": "<p>mul_assoc -- that's already proved for nats</p>",
        "id": 127272787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626071
    },
    {
        "content": "<p>as is mul_comm</p>",
        "id": 127272789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626084
    },
    {
        "content": "<p>and the full proof of mul_comm is quite long if you have defined pnat as an inductive type with one and succ</p>",
        "id": 127272795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626100
    },
    {
        "content": "<p>so here we see the benefits</p>",
        "id": 127272804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626107
    },
    {
        "content": "<p>the proof of mul_comm is \"to check a * b = b * a, all we have to do is to check the underlying nats are the same, which is true because that's mul_comm for nat\"</p>",
        "id": 127272821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626149
    },
    {
        "content": "<p>was subtype.eq a simp lemma?</p>",
        "id": 127272827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626155
    },
    {
        "content": "<p>oh no</p>",
        "id": 127272867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626164
    },
    {
        "content": "<p>of course not</p>",
        "id": 127272869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626165
    },
    {
        "content": "<p>it has an implies</p>",
        "id": 127272871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626167
    },
    {
        "content": "<p>so we can't hope to prove that with simp I guess</p>",
        "id": 127272875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626176
    },
    {
        "content": "<p>all the proofs are the same</p>",
        "id": 127272878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626181
    },
    {
        "content": "<p>on the other hand it still feels like a machine could have written those four proofs</p>",
        "id": 127272885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626197
    },
    {
        "content": "<p>whereas I suspect Mario wrote them</p>",
        "id": 127272888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626210
    },
    {
        "content": "<p>Mario, why isn't there some weird tactic which deduces a bunch of lemmas for subtypes from the corresponding lemmas for the types?</p>",
        "id": 127272905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626247
    },
    {
        "content": "<p>We still have no conclusive proof that Mario is not a machine</p>",
        "id": 127272907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527626251
    },
    {
        "content": "<p>true</p>",
        "id": 127272910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626255
    },
    {
        "content": "<p>This situation looks like what Simon solve for pi instances</p>",
        "id": 127272916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527626274
    },
    {
        "content": "<p>People like Simon Hudon are good at writing that sort of thing</p>",
        "id": 127272917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626275
    },
    {
        "content": "<p>Where is Simon by the way?</p>",
        "id": 127272921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527626280
    },
    {
        "content": "<p>he's cool -- don't underestimate him</p>",
        "id": 127272956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626284
    },
    {
        "content": "<p>Haven't we lost him?</p>",
        "id": 127272960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527626287
    },
    {
        "content": "<p>All that's left is <code>one</code></p>",
        "id": 127272965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626291
    },
    {
        "content": "<p>because the proof is so short it's not worth automating</p>",
        "id": 127272967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626299
    },
    {
        "content": "<p>there is a balance point there</p>",
        "id": 127272970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626310
    },
    {
        "content": "<p>and Mario used succ_pnat, there were 5 other ways he could have done it, I am pretty sure that 1 &gt; 0 is a named theorem, he could have used that</p>",
        "id": 127272976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626324
    },
    {
        "content": "<p>I don't think it matters</p>",
        "id": 127272981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626328
    },
    {
        "content": "<p>If I had to define a hundred more like that, sure</p>",
        "id": 127272982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626329
    },
    {
        "content": "<p>I think every method will produce basically the same term</p>",
        "id": 127272985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626341
    },
    {
        "content": "<p>All that's left is this:</p>",
        "id": 127272994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626360
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">one_coe</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mul_coe</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The power of a pnat and a nat is a pnat. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_pow_of_pos</span> <span class=\"bp\">_</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">pow</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">pow_coe</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pnat</span>\n</pre></div>",
        "id": 127272996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626364
    },
    {
        "content": "<p>one_coe -- who knows why this is a simp lemma</p>",
        "id": 127273053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626409
    },
    {
        "content": "<p>Where does it end</p>",
        "id": 127273057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626419
    },
    {
        "content": "<p>two_coe? Why is that not a simp lemma?</p>",
        "id": 127273060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626424
    },
    {
        "content": "<p>because that's not an atomic term</p>",
        "id": 127273064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626436
    },
    {
        "content": "<p>mul_coe -- proof is refl</p>",
        "id": 127273068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626440
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 127273072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626452
    },
    {
        "content": "<p>one just _became_ an atomic term</p>",
        "id": 127273075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626460
    },
    {
        "content": "<p>the simp lemma would be about <code>\\u bit0 n = bit0 \\u n</code></p>",
        "id": 127273076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626461
    },
    {
        "content": "<p>when you decided that the fact that it was a monoid was worth proving</p>",
        "id": 127273084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626473
    },
    {
        "content": "<p>and finally power</p>",
        "id": 127273097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626507
    },
    {
        "content": "<p>There's a has_pow thing instance. That presumably is tied to the <code>^</code> notation</p>",
        "id": 127273144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626536
    },
    {
        "content": "<p>how new-fangled and fancy</p>",
        "id": 127273146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626542
    },
    {
        "content": "<p>it wasn't like this when I learnt it</p>",
        "id": 127273149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626546
    },
    {
        "content": "<p><code>#print notation ^</code></p>",
        "id": 127273154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626561
    },
    {
        "content": "<p><code>_ </code>^<code>:80 _:79 := has_pow.pow #1 #0</code></p>",
        "id": 127273157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626568
    },
    {
        "content": "<p>Ok so the definition of pow is \"work out pow in nats\"</p>",
        "id": 127273169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626590
    },
    {
        "content": "<p>but you now need to prove that if m&gt;0 and n&gt;=0 then m^n&gt;0</p>",
        "id": 127273180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626611
    },
    {
        "content": "<p>and if this was me 6 months ago</p>",
        "id": 127273182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626616
    },
    {
        "content": "<p>I would think \"oh I quite fancy this one\"</p>",
        "id": 127273186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626628
    },
    {
        "content": "<p>\"induction on n should do it\"</p>",
        "id": 127273188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626632
    },
    {
        "content": "<p>and I'd prove it</p>",
        "id": 127273190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626639
    },
    {
        "content": "<p>but that's not the way to think about Lean</p>",
        "id": 127273229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626644
    },
    {
        "content": "<p>the way to think about it is</p>",
        "id": 127273230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626647
    },
    {
        "content": "<p>\"this looks pretty standard -- m &gt; 0 implies m^n &gt; 0\"</p>",
        "id": 127273239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626660
    },
    {
        "content": "<p>maybe the person who was implementing pow on nat thought of this</p>",
        "id": 127273245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626670
    },
    {
        "content": "<p>and even if they didn't</p>",
        "id": 127273248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626672
    },
    {
        "content": "<p>maybe some obsessive mathlib guy thought of it</p>",
        "id": 127273253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626682
    },
    {
        "content": "<p>and maybe they gave it a name</p>",
        "id": 127273259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626689
    },
    {
        "content": "<p>and maybe it's someething like <code>pos_pow_of_pos</code></p>",
        "id": 127273273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626708
    },
    {
        "content": "<p>This is the way to write Lean</p>",
        "id": 127273279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626717
    },
    {
        "content": "<p>don't write the code because you can</p>",
        "id": 127273282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626721
    },
    {
        "content": "<p>try and find the code someone else wrote already that does it</p>",
        "id": 127273287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626736
    },
    {
        "content": "<p>write <code>nat.pos_pow</code> and hit ctrl-space</p>",
        "id": 127273291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626753
    },
    {
        "content": "<p>and see if you get lucky</p>",
        "id": 127273292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626757
    },
    {
        "content": "<p>note that Mario used <code>m.pos</code> not <code>m.2</code></p>",
        "id": 127273351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626788
    },
    {
        "content": "<p>That might just be for readability</p>",
        "id": 127273355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626797
    },
    {
        "content": "<p>The philosophy is that <code>m.2</code> is something Lean will always offer you</p>",
        "id": 127273359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626815
    },
    {
        "content": "<p>but <code>m.pos</code> is basically better</p>",
        "id": 127273364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626824
    },
    {
        "content": "<p>because it's more readable</p>",
        "id": 127273371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626831
    },
    {
        "content": "<p><code>@[simp] theorem pos (n : ℕ+) : (n : ℕ) &gt; 0 := n.2</code></p>",
        "id": 127273375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626845
    },
    {
        "content": "<p>I'm sure it's just inconsistency</p>",
        "id": 127273376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626846
    },
    {
        "content": "<p>But you are making an interface for pnat</p>",
        "id": 127273380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626859
    },
    {
        "content": "<p>and that interface should involve a nice name for the assertion that a positive nat is positive</p>",
        "id": 127273388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626871
    },
    {
        "content": "<p>of course it doesn't matter at all what gets used in the proof</p>",
        "id": 127273390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626879
    },
    {
        "content": "<p>which you should encourage the users to use</p>",
        "id": 127273425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626883
    },
    {
        "content": "<p>It literally makes no difference to anything?</p>",
        "id": 127273442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626901
    },
    {
        "content": "<p>Doesn't it increase compile time by a zillisecond?</p>",
        "id": 127273449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626916
    },
    {
        "content": "<p>you had to look up <code>pos</code> in some table</p>",
        "id": 127273456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626933
    },
    {
        "content": "<p>It's not literally the same proof term, and who knows how compile time is affected, but whatever difference is extremely minimal</p>",
        "id": 127273464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626945
    },
    {
        "content": "<p>Let me think epsilon more about poe</p>",
        "id": 127273472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626962
    },
    {
        "content": "<p>pow</p>",
        "id": 127273474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626963
    },
    {
        "content": "<p>What is going through the writer's mind when they write this</p>",
        "id": 127273481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The power of a pnat and a nat is a pnat. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_pow_of_pos</span> <span class=\"bp\">_</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127273492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527626981
    },
    {
        "content": "<p>note that projection notation in both cases only works if <code>n</code> has visible type pnat</p>",
        "id": 127273493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527626981
    },
    {
        "content": "<p>They are thinking \"yay we now have pow\"</p>",
        "id": 127273503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627003
    },
    {
        "content": "<p>but then <em>immediately after</em></p>",
        "id": 127273548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627008
    },
    {
        "content": "<p>they think \"OK I now have some obligations\"</p>",
        "id": 127273555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627018
    },
    {
        "content": "<p>There's the obvious one -- make an instance of has_pow, which is just an elaborate way of saying \"let's enable <code>^</code> notation\"</p>",
        "id": 127273562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627056
    },
    {
        "content": "<p>but then there's the less obvious (to me) fact:</p>",
        "id": 127273568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627069
    },
    {
        "content": "<p>which we've seen lots of times before</p>",
        "id": 127273571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627074
    },
    {
        "content": "<p>we want to check that powers in pnat agree with powers in nat</p>",
        "id": 127273576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627089
    },
    {
        "content": "<p>and even though the proof is refl</p>",
        "id": 127273578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627096
    },
    {
        "content": "<p>this looks like it should be a simp lemma</p>",
        "id": 127273580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627102
    },
    {
        "content": "<p>It says \"if we coerce m ^ n to nat we get what we expect\"</p>",
        "id": 127273634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627144
    },
    {
        "content": "<p>That is a way of thinking which is not normally taught to the mathematician</p>",
        "id": 127273641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627170
    },
    {
        "content": "<p>to define pow : pnat -&gt; nat -&gt; nat we just use induction</p>",
        "id": 127273650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627189
    },
    {
        "content": "<p>to prove it lands in pnat we prove a lemma</p>",
        "id": 127273652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627193
    },
    {
        "content": "<p>and that's the end</p>",
        "id": 127273653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627196
    },
    {
        "content": "<p>We stop here:</p>",
        "id": 127273654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627198
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_pow_of_pos</span> <span class=\"bp\">_</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">pow</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127273655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627207
    },
    {
        "content": "<p>We don't do this bit</p>",
        "id": 127273657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627213
    },
    {
        "content": "<p><code>@[simp] theorem pow_coe (m : ℕ+) (n : ℕ) : (↑(m ^ n) : ℕ) = m ^ n := rfl</code></p>",
        "id": 127273659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627222
    },
    {
        "content": "<p>but in CS if you don't do this</p>",
        "id": 127273662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627229
    },
    {
        "content": "<p>then your users moan that they used a pnat 50 lines ago and it won't disappear</p>",
        "id": 127273704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627248
    },
    {
        "content": "<p>even though we only care about nats now</p>",
        "id": 127273705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627255
    },
    {
        "content": "<p>in fact did we prove all the coercions?</p>",
        "id": 127273710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627265
    },
    {
        "content": "<p><code>@[simp] theorem mul_coe (m n : ℕ+) : ((m * n : ℕ+) : ℕ) = m * n := rfl</code></p>",
        "id": 127273711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627273
    },
    {
        "content": "<p><code>@[simp] theorem one_coe : ((1 : ℕ+) : ℕ) = 1 := rfl</code></p>",
        "id": 127273716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627279
    },
    {
        "content": "<p><code>@[simp] theorem add_coe (m n : ℕ+) : ((m + n : ℕ+) : ℕ) = m + n := rfl</code></p>",
        "id": 127273723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627290
    },
    {
        "content": "<p>They all got proved</p>",
        "id": 127273733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627306
    },
    {
        "content": "<p>Does that mean that if I have some complicated number made using lots of pnats and addition and multiplication etc</p>",
        "id": 127273744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627324
    },
    {
        "content": "<p>and then I made it a nat</p>",
        "id": 127273745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627327
    },
    {
        "content": "<p>then simp would remove all the pnats for me?</p>",
        "id": 127273747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627332
    },
    {
        "content": "<p>I think it might!</p>",
        "id": 127273748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627335
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127273796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627392
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127273811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627436
    },
    {
        "content": "<p>One thing I learnt a while ago was that instead of asking \"can Lean do this\"</p>",
        "id": 127273818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627451
    },
    {
        "content": "<p>it's not hard to just make Lean try to do it yourself</p>",
        "id": 127273822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627459
    },
    {
        "content": "<p>you just use variables to make stuff</p>",
        "id": 127273827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627469
    },
    {
        "content": "<p>rofl</p>",
        "id": 127273890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627535
    },
    {
        "content": "<p>I need to work harder</p>",
        "id": 127273906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627550
    },
    {
        "content": "<p>dammit</p>",
        "id": 127273925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627589
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 127273937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627599
    },
    {
        "content": "<p>doesn't typecheck yet</p>",
        "id": 127273974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627603
    },
    {
        "content": "<p>Note that <code>A</code> and <code>B</code> are the same</p>",
        "id": 127273996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527627613
    },
    {
        "content": "<p>You should use <code>parameters</code> instead</p>",
        "id": 127274000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527627623
    },
    {
        "content": "<p>for a b c</p>",
        "id": 127274008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627641
    },
    {
        "content": "<p>what about the proofs?</p>",
        "id": 127274009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627647
    },
    {
        "content": "<p>all six</p>",
        "id": 127274010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527627651
    },
    {
        "content": "<p>Parameters can only be used in a section</p>",
        "id": 127274039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627711
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"kn\">section</span>\n</pre></div>",
        "id": 127274043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627718
    },
    {
        "content": "<p>and this typechecks</p>",
        "id": 127274085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627735
    },
    {
        "content": "<p>now let's remove the sorry (which I put there for typechecky reasons)</p>",
        "id": 127274092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627749
    },
    {
        "content": "<p>maybe that's something I could mention</p>",
        "id": 127274093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627760
    },
    {
        "content": "<p>I like my lean files to have no red squiggly underlines ever</p>",
        "id": 127274098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627776
    },
    {
        "content": "<p>but I am happy with plenty of sorrys</p>",
        "id": 127274102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627783
    },
    {
        "content": "<p>green squiggly underlines ftw</p>",
        "id": 127274108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627795
    },
    {
        "content": "<p>the reason for this</p>",
        "id": 127274111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627797
    },
    {
        "content": "<p>is that if you make an error</p>",
        "id": 127274113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627800
    },
    {
        "content": "<p>then sometimes your new red squiggly underline appears in a weird place</p>",
        "id": 127274116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627813
    },
    {
        "content": "<p>and you might not notice it if they're everywhere</p>",
        "id": 127274118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627819
    },
    {
        "content": "<p>so every time I split in tactic mode</p>",
        "id": 127274121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627829
    },
    {
        "content": "<p>I always put in two sorrys</p>",
        "id": 127274123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627835
    },
    {
        "content": "<p>etc etc</p>",
        "id": 127274162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627843
    },
    {
        "content": "<p><code>example : (A * (A + B) * (C + (A + B)) : ℕ) = a * (a + b) * (c + (a + b)) := rfl </code></p>",
        "id": 127274174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627861
    },
    {
        "content": "<p>that's not surprising</p>",
        "id": 127274181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627866
    },
    {
        "content": "<p><code>example : ↑(A * (A + B) * (C + (A + B))) = a * (a + b) * (c + (a + b)) := rfl </code></p>",
        "id": 127274188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627885
    },
    {
        "content": "<p>that's not surprising</p>",
        "id": 127274193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627891
    },
    {
        "content": "<p>why did he make all these rfl things simp lemmas?</p>",
        "id": 127274201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627899
    },
    {
        "content": "<p><code>example : ↑(A * (A + B) * (C + (A + B))) = a * (a + b) * (c + (a + b)) := by simp  </code></p>",
        "id": 127274217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627916
    },
    {
        "content": "<p>fails :-)</p>",
        "id": 127274218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627920
    },
    {
        "content": "<p><em>doh</em></p>",
        "id": 127274222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627923
    },
    {
        "content": "<p>aah well so it was probably for another reason</p>",
        "id": 127274232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627950
    },
    {
        "content": "<p>but at least we made it to the end, even if I'm still not 100% sure what makes a good simp lemma. Maybe I'm beginning to get the hang of it.</p>",
        "id": 127274284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627972
    },
    {
        "content": "<p>You have to unfold your new definitions</p>",
        "id": 127274294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527627994
    },
    {
        "content": "<p>But it's interesting to see the way of thinking -- put new structure on pnat, now immediately ask yourself if we need some lemmas</p>",
        "id": 127274295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527627997
    },
    {
        "content": "<p>try <code>by simp [A, B, C]</code></p>",
        "id": 127274299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">end</span> <span class=\"kn\">section</span>\n</pre></div>",
        "id": 127274314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628034
    },
    {
        "content": "<p>That works because I told Lean to unfold A B and C eagerly</p>",
        "id": 127274321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628050
    },
    {
        "content": "<p><code>simp [A,B,C]</code>?</p>",
        "id": 127274333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628072
    },
    {
        "content": "<p>Is <code>A</code> a good simp lemma??</p>",
        "id": 127274336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628079
    },
    {
        "content": "<p>Normally when you start putting <code>simp [random thing]</code> it complains that the random thing isn't a good simp lemma</p>",
        "id": 127274383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">C</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">end</span> <span class=\"kn\">section</span>\n</pre></div>",
        "id": 127274392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628118
    },
    {
        "content": "<p>well blow me down it works</p>",
        "id": 127274396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628123
    },
    {
        "content": "<p><code>simp [my_def]</code> where <code>my_def</code> is a <code>def</code> means <code>simp [my_def.&lt;equation lemmas&gt;]</code></p>",
        "id": 127274400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628135
    },
    {
        "content": "<p>ooh</p>",
        "id": 127274405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628143
    },
    {
        "content": "<p>How do I see A's equation lemmas?</p>",
        "id": 127274411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628156
    },
    {
        "content": "<p><code>#print prefix A </code></p>",
        "id": 127274420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628182
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"bp\">ℕ+</span>\n<span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127274428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628192
    },
    {
        "content": "<p>That doesn't look like a good simp lemma to me</p>",
        "id": 127274479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628213
    },
    {
        "content": "<p>not by default, no</p>",
        "id": 127274482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628221
    },
    {
        "content": "<p>there are variables on the RHS which don't appear on the LHS</p>",
        "id": 127274486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628227
    },
    {
        "content": "<p>Actually they appear on the left too</p>",
        "id": 127274492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628244
    },
    {
        "content": "<p>and a wise person once told me not to put these into simp</p>",
        "id": 127274498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628249
    },
    {
        "content": "<p>they are hidden because of the parameter thing</p>",
        "id": 127274501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628254
    },
    {
        "content": "<p>or possibly because you have <code>{a} {ha}</code></p>",
        "id": 127274521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628279
    },
    {
        "content": "<p>heh</p>",
        "id": 127274523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628285
    },
    {
        "content": "<p>I think the latter</p>",
        "id": 127274524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628287
    },
    {
        "content": "<p>Ok so we got there</p>",
        "id": 127274531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628316
    },
    {
        "content": "<p>and that's pnat.</p>",
        "id": 127274569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628323
    },
    {
        "content": "<p>if they didn't appear on the left, you could use this theorem to prove 1 = 2</p>",
        "id": 127274572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628324
    },
    {
        "content": "<p>Oh that would be a cool application of pnat</p>",
        "id": 127274578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628335
    },
    {
        "content": "<p>I need to go to tend to the family</p>",
        "id": 127274586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628363
    },
    {
        "content": "<p>but there's a random thing</p>",
        "id": 127274589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628368
    },
    {
        "content": "<p>which people will be able to link to and look at later on</p>",
        "id": 127274593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628377
    },
    {
        "content": "<p>and in particular in a couple of weeks when I am supposed to be teaching a bunch of mathematicians Lean and they don't know how to make structures</p>",
        "id": 127274605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628407
    },
    {
        "content": "<p>and it was much easier to write than a proper document</p>",
        "id": 127274610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628418
    },
    {
        "content": "<p>Thanks for the help Mario and Patrick and Johan and others</p>",
        "id": 127274613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527628431
    }
]