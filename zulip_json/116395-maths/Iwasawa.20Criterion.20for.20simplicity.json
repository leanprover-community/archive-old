[
    {
        "content": "<p>I just finished the Lean proof of the Iwasawa criterion for simplicity. <br>\nUltimately, I will add the applications to the simplicity of the alternating group and of PSL(n,K). <br>\n(I do not know whether the latter will require a lot of stuff or not, I am not sure it is already proved that SL(n,K)<br>\nis generated by transvections.)</p>\n<p>The file is a bit long (500 lines), but it incorporates some definitions and ad hoc lemmas which may have simpler proofs,<br>\norganized in a few sections.<br>\nHow should I do a pull request ? Try to guess in which files each lemma could go ?<br>\nOr send a big file and wait for reviews ?<br>\nAlso, the names of the lemmas might need to be adjusted.</p>",
        "id": 260870177,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1636496160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/Iwasawa.20Criterion.20for.20simplicity/near/260870177\">said</a>:</p>\n<blockquote>\n<p>The file is a bit long (500 lines), but it incorporates some definitions and ad hoc lemmas which may have simpler proofs,<br>\norganized in a few sections.<br>\nHow should I do a pull request ? Try to guess in which files each lemma could go ?<br>\nOr send a big file and wait for reviews ?<br>\nAlso, the names of the lemmas might need to be adjusted.</p>\n</blockquote>\n<p>In general, the advice is to make lemmas available as soon as possible, i.e. in the file with the fewest transitive imports. However if you can't find an obvious candidate, I'd like to encourage you to make a new file - I like working with short files. And if you are unsure, it's fine to leave the lemmas in the original file, especially if you note such cases with a comment.</p>",
        "id": 260877303,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636499983
    },
    {
        "content": "<p>More important than making the code look nice is making the code available at all! So in case of doubt, please don't hesitate to create the PR as it is now, and the experienced users can help you with any issues that come up.</p>",
        "id": 260877521,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636500154
    },
    {
        "content": "<p>Done! see <a href=\"https://github.com/leanprover-community/mathlib/issues/10253\">#10253</a></p>",
        "id": 260879189,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1636501427
    },
    {
        "content": "<p>Congratulations! I left two first comments. We'll try to give a detailed review later this week.</p>",
        "id": 260944675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636518624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/Iwasawa.20Criterion.20for.20simplicity/near/260870177\">said</a>:</p>\n<blockquote>\n<p>(I do not know whether the latter will require a lot of stuff or not, I am not sure it is already proved that SL(n,K)<br>\nis generated by transvections.)</p>\n</blockquote>\n<p>We already have that <code>GL (n, K)</code> is generated by transvections and diagonal matrices, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.diagonal_transvection_induction_of_det_ne_zero\">docs#matrix.diagonal_transvection_induction_of_det_ne_zero</a>. From this the <code>SL (n, K)</code> case should not be too painful (essentially do <code>2 x 2</code> matrices to replace iteratively the diagonal terms by <code>1</code>).</p>",
        "id": 260952732,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1636527988
    },
    {
        "content": "<p>Thanks for your comments <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> .<br>\nTo implement the second remark of Johan, it seems that I need, if <code>X</code>is a type and <code>n:ℕ</code>,  to define a type representing the subtype of <code>X^n</code> representing <code>n</code>-tuples with distinct entries in the type <code>X</code> — and to endow it with its natural action of <code>G</code> if <code>X</code>has an action of <code>G</code>(<code>mul_action G X</code>) . What is the standard way to code this ? <code>(s :fin n → X) (inj: injective s)</code> ?</p>",
        "id": 260966548,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1636537858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> Ooh, I was thinking of formalizing the definition you wrote in the module docstring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The action is *primitive* if it is transitive, and if all stabilizers G_x are maximal subgroups.</span>\n</code></pre></div>",
        "id": 260974675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636542642
    },
    {
        "content": "<p>Is that not the kind of thing that you are using in the lemmas that of <code>primitive</code> in their name?</p>",
        "id": 260974713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636542663
    },
    {
        "content": "<p>You can us function.embedding (fin n) X to bundle the injectivity</p>",
        "id": 260975576,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636543200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Iwasawa.20Criterion.20for.20simplicity/near/260974675\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> Ooh, I was thinking of formalizing the definition you wrote in the module docstring:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The action is *primitive* if it is transitive, and if all stabilizers G_x are maximal subgroups.</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The file already includes </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">is_primitive</span>\n<span class=\"kd\">extends</span> <span class=\"n\">is_transitive</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">has_maximal_stabilizers</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_maximal</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Isn't it sufficient then ?</p>",
        "id": 261014521,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1636561574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> ooh, sorry I hadn't seen that. So why are you not using that definition in those lemmas? Maybe I haven't thought enough about the maths. But the names of the lemmas suggest you want to talk about a primitive action. But the statement doesn't use <code>is_primitive</code>.</p>",
        "id": 261049511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636575818
    },
    {
        "content": "<p>Don't I use it ? I'm completely puzzled…</p>",
        "id": 261050156,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1636576146
    },
    {
        "content": "<p>Sorry, maybe I'm just blind. Let me look at your code again.</p>",
        "id": 261050275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636576194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> My apologies for all the noise. I was probably still asleep when I wrote that comment.</p>",
        "id": 261050423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636576252
    },
    {
        "content": "<p>Please ignore my second remark.</p>",
        "id": 261050449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636576263
    },
    {
        "content": "<p>To make up for the bad review. Let me try to do a better one now.</p>",
        "id": 261050633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636576337
    },
    {
        "content": "<p>No worry… You cannot guess how pleasant I find to realize that people thousand miles away are looking, commenting at one's work, providing help, making suggestions of improvements…</p>",
        "id": 261050859,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1636576469
    },
    {
        "content": "<p>Ok, I left several more comments. Hopefully less stupid this time.</p>",
        "id": 261051878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636576991
    },
    {
        "content": "<p>Just to let you know that 2 weeks ago, I (almost) completed the formal proof that the alternating group is simple using the Iwasawa criterion for simplicity. This is really a long proof, because it requires to prove that some subgroups of the alternating group are maximal subgroups, and in turn that result follows from a 1871 theorem of Jordan (that a primitive subgroup of $S_n$ that contains a 3-cycle contains the alternating group). All of this is in <a href=\"https://github.com/leanprover-community/mathlib/tree/acl_Wielandt\">branch#acl_Wielandt</a>.</p>\n<p>Actually, there is one case missing, when $n=6$, because in that case, the relevant subgroup of $A_6$, $A_6 \\cap (S_3\\times S_3)$, is not maximal. To use that method, I wish to consider double transpositions, but first I need to prove that the double transpositions (and identity) form a commutative subgroup of $A_4$ —This is the “Kleiner Vierergruppe”. </p>\n<p>By hand, this is clear, but it looked annoying to try to formalize these arguments, so I imagined another way. <br>\nYou can observe that these elements (identity and double transpositions) are the only elements of $A_4$ whose order is a power of $2$;<br>\nso once you know there are of them, they will fill any Sylow subgroup of $A_4$ hence they would constitute the unique 2-Sylow subgroup of $A_4$.</p>\n<p>Lean easily tells you that there are 3 elements with cycle type [2,2], via #eval, but it is a bit slow and I don't know how to use such a computation in a formal proof.<br>\nSo I embarked in computing the number of permutations in a given conjugacy class in the general symmetric/alternating group. <br>\n(This is almost done but will take a few weeks.)</p>",
        "id": 300660999,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1664118361
    },
    {
        "content": "<p>A few more weeks meant 3 months, <br>\nbut I finally accomplished what I started to 14 months ago!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If α has at least 5 elements,</span>\n<span class=\"sd\">then the only nontrivial normal sugroup of (perm α) is the alternating_group. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">alternating_group.normal_subgroups</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hnN</span> <span class=\"o\">:</span> <span class=\"n\">N.normal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ntN</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hα'</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">alternating_group.normal_subgroups_8</span> <span class=\"n\">hα</span> <span class=\"n\">_</span> <span class=\"n\">hnN</span> <span class=\"n\">ntN</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hα'</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">alternating_group.normal_subgroups_6</span> <span class=\"n\">hα</span> <span class=\"n\">hα'</span> <span class=\"n\">hnN</span> <span class=\"n\">ntN</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 316394058,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1671245079
    },
    {
        "content": "<p>The docstring seems to be about the symmetric group but the lemma says that the alternating group is simple?</p>",
        "id": 316420758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671267936
    },
    {
        "content": "<p>“Just to check that some people are actually reading…”</p>",
        "id": 316466708,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1671287385
    }
]