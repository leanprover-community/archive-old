[
    {
        "content": "<p>When talking about measures, sometimes it's useful to say that <code>s ⊆ t</code> (or <code>s = t</code>) modulo a measure zero set. In my local branch about FTC (I'm submitting chunks as PRs) I sometimes use <code>s ≤ᵐ[μ] t</code> and <code>s =ᵐ[μ] t</code> for this.</p>\n<p>I'm not sure if it's OK to abuse notation in this way, or I should go back to <code>∀ᵐ x ∂μ, x ∈ s → x ∈ t</code>.</p>",
        "id": 205188505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595900703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ?</p>",
        "id": 205193677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595904508
    },
    {
        "content": "<p>I'm completely fine with your notations. It happens all the time in measure theory and analysis to work up to measure zero, so having a good set of supporting notations is a good idea in my opinion.</p>",
        "id": 205202547,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595918647
    },
    {
        "content": "<p>I think the notation is intuitive. It will be important to have lemmas whose names follow the notation</p>",
        "id": 205202723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595918893
    },
    {
        "content": "<p>Otherwise you have to manually unfold the notation to figure out which names to look for</p>",
        "id": 205202734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595918906
    },
    {
        "content": "<p>Of course this doesn't have to be a complete API right from the start</p>",
        "id": 205202750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595918937
    },
    {
        "content": "<p>It's reusing notation for <code>eventually_eq</code> and <code>eventually_le</code>. The main downside is that when one wants to prove <code>s =ᵐ[μ] t</code>, e.g., using <code>eventually.mono</code>, then after <code>intros</code> the goal looks like <code>s x = t x</code>, not <code>x ∈ s = x ∈ t</code>.</p>",
        "id": 205204009,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595920580
    },
    {
        "content": "<p>The downside seems pretty bad. And adding yet another API on top of filters worries me.</p>",
        "id": 205213262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595927695
    },
    {
        "content": "<p>Would that downside be prevented by making <code>set</code> irreducible?</p>",
        "id": 205213707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595928030
    },
    {
        "content": "<p>I don't think so. It would rather prevent Yury from reusing the notation.</p>",
        "id": 205213857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595928154
    },
    {
        "content": "<p>I think you need a lemma to unfold <code>s =ᵐ[μ] t</code></p>",
        "id": 205215420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595929187
    },
    {
        "content": "<p>Of course this \"downside\" can be fixed by a lemma.</p>",
        "id": 205259481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595954193
    },
    {
        "content": "<p>E.g., <code>eventually_eq.mem_iff</code> and <code>eventually.set_ext</code>.</p>",
        "id": 205259553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595954236
    }
]