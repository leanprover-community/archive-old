[
    {
        "content": "<p>Consider the following category:</p>\n<ul>\n<li>objects: natural numbers</li>\n<li>morphisms between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>: the free abelian group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[\\mathrm{Mat}_{m \\times n}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">M</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">t</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m \\times n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-matrices.</li>\n</ul>\n<p>How do you call this gadget? The best I could come up with is <code>FreeMat</code>. But maybe there is a better name out there?</p>",
        "id": 231470334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616506392
    },
    {
        "content": "<p>Just to make sure that I understand: this is equivalent to the category of free, Z-modules with a finite basis, right?</p>",
        "id": 231471044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616506651
    },
    {
        "content": "<p>Then you would only have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Mat}_{m \\times n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">M</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">t</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> as morphisms, right?</p>",
        "id": 231471576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616506852
    },
    {
        "content": "<p>Ah, you are right: I read <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} [..]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\">]</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>Mat</mtext><mrow><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\textrm{Mat}_{...} (\\mathbb{Z})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord textrm\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.076108em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">.</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">.</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mclose\">)</span></span></span></span>!</p>\n<p>... whereas, this is some form of group completion on the morphisms.</p>",
        "id": 231471944,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616506988
    },
    {
        "content": "<p>Also, I am not sure that I know of a better name.</p>",
        "id": 231472054,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616507031
    },
    {
        "content": "<p>Ooh yeah, I should have specified that the matrices have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> coefficients as well</p>",
        "id": 231473515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616507587
    },
    {
        "content": "<p>You're going to factor this into a general construction, right?</p>",
        "id": 231555852,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616539650
    },
    {
        "content": "<p>the categorical analogue of <code>monoid_algebra</code>.</p>",
        "id": 231555877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616539674
    },
    {
        "content": "<p>(This is a common pattern, e.g. formal linear combinations of cobordisms or diagrams in quantum topology.)</p>",
        "id": 231555968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616539719
    },
    {
        "content": "<p>So it should bee something like <code>Free ℤ (Mat ℤ)</code>, given appropriate definitions of <code>Free</code> and <code>Mat</code>.</p>",
        "id": 231556241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616539915
    },
    {
        "content": "<p>(Presumably also you want objects to by fintypes, not nats.)</p>",
        "id": 231556425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616540018
    },
    {
        "content": "<p>(huh... I could swear we used to have a <code>dmatrix</code> type (dependently typed matrices)... but it seems I'm crazy.)</p>",
        "id": 231556758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616540218
    },
    {
        "content": "<p>In what level of generality does it make sense to define this? I guess something similar can be done for every category, where this is the case of <code>Mat</code> which is the category with naturals as objects and matrices as morphisms. I guess you can even replace free abelian groups with any functor from types!?</p>",
        "id": 231560166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616542475
    },
    {
        "content": "<p>I would have said <code>Mat C</code> makes sense for any preadditive <code>C</code>. Its objects are finite tuples of objects of <code>C</code>, and its morphisms are dependently typed matrices.</p>",
        "id": 231562502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616544186
    },
    {
        "content": "<p>I'm failing to work out where the generalisation free abelian groups to functor from types is happening. :-)</p>",
        "id": 231562560,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616544231
    },
    {
        "content": "<p>Maybe to be more precise, the functor should be a lax monoidal endofunctor on Type*</p>",
        "id": 231563943,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616545109
    },
    {
        "content": "<p>Ah! :-) Now I see.</p>",
        "id": 231564880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616545703
    },
    {
        "content": "<p>We do have those, ready to go. :-)</p>",
        "id": 231564908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616545718
    },
    {
        "content": "<p>It's a special case of changing the category you're enriching over, just in this case going from Type to Type you stay in the land of non-enriched categories.</p>",
        "id": 231564972,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616545768
    },
    {
        "content": "<p>(Lax monoidal functors are exactly what you're allowed to apply to the hom-objects of an enriched category.)</p>",
        "id": 231564992,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616545788
    },
    {
        "content": "<p>I made <code>Mat C</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/6845\">#6845</a>.</p>",
        "id": 231574434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616553715
    },
    {
        "content": "<p>Hmm, I will have to think about whether <code>Fintype</code> instead of <code>nat</code> as object type will work well in my use case</p>",
        "id": 231589698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616567740
    },
    {
        "content": "<p>But thanks for the responses!</p>",
        "id": 231589707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616567758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> But your PR doesn't even use any <code>matrix</code> under the hood, right. So it will be hard to use the API for <code>matrix (fin n) (fin m)</code></p>",
        "id": 231589796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616567861
    },
    {
        "content": "<p>You're right. It does use <code>dmatrix</code>, which is new.</p>",
        "id": 231590166,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616568263
    },
    {
        "content": "<p>I will think about how to make it smoother in the case where <code>C</code> only has one object to begin with.</p>",
        "id": 231590174,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616568280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, okay, I fixed this, hopefully to your satisfaction. Now <code>Mat_ C</code> is the full categorical construction for any preadditive category <code>C</code>, and <code>Mat R</code> is the construction for a ring, and it has objects <code>\\nat</code>.</p>",
        "id": 231590985,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616569189
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">Mat.of</span> <span class=\"n\">ℤ</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231590988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616569200
    },
    {
        "content": "<p>Merci</p>",
        "id": 231591153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616569294
    },
    {
        "content": "<p>and also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Mat.of</span> <span class=\"n\">ℤ</span> <span class=\"mi\">2</span> <span class=\"bp\">⟶</span> <span class=\"n\">Mat.of</span> <span class=\"n\">ℤ</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"mi\">42</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 231591827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616569844
    },
    {
        "content": "<p>(It does intrinsically require a <code>ring</code>, not a <code>semiring</code>, however.)</p>",
        "id": 231591921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616569926
    }
]