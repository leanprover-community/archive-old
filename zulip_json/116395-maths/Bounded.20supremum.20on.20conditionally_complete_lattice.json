[
    {
        "content": "<p>I was hoping to be able to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.sup'_eq_csupr</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>However, I'm starting to think it might be false. The problem is that <code>(⨆ a ∈ s, f a)</code> expands to <code>(⨆ a, ⨆ (h : a ∈ s), f a)</code>, but <code>⨆ (h : a ∈ s), f a</code> is not defined when <code>a ∉ s</code>. Am I right then in concluding that <code>⨆ a ∈ s, f a</code> is completely unusable given <code>conditionally_complete_lattice β</code>  and <code>(f : α → β)</code>?</p>",
        "id": 239863880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621680260
    },
    {
        "content": "<p>The best I could do was;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- `⨆ a ∈ s, f a` means the wrong thing :(</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sup'_eq_csupr_subtype</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">finset.sup'_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">le_csupr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset.le_sup'</span> <span class=\"n\">_</span> <span class=\"n\">j.prop</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">H.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">nonempty.intro</span> <span class=\"bp\">$</span> <span class=\"n\">subtype.mk</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">csupr_le</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finset.le_sup'</span> <span class=\"n\">_</span> <span class=\"n\">a.prop</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 239864585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621681023
    },
    {
        "content": "<p>I guess this is a bit like <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>'s nested \"finprod\" thread</p>",
        "id": 239864636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621681074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Bounded.20supremum.20on.20conditionally_complete_lattice/near/239863880\">said</a>:</p>\n<blockquote>\n<p>Am I right then in concluding that <code>⨆ a ∈ s, f a</code> is completely unusable given <code>conditionally_complete_lattice β</code>  and <code>(f : α → β)</code>?</p>\n</blockquote>\n<p>Hmm, I think you're right. I guess the issue is that if there are values <code>a : α</code> such that <code>a ∉ s</code> then for such an <code>a</code> we have <code>⨆ (H : a ∈ s), f a = Sup ∅</code> and we know nothing about <code>Sup ∅</code> so everything becomes a mess.</p>",
        "id": 239956149,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1621781180
    },
    {
        "content": "<p>So if <code>β</code> has a <code>⊥</code> and <code>Sup ∅ = ⊥</code> then presumably everything is fine but in general there is a problem.</p>",
        "id": 239956275,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1621781321
    },
    {
        "content": "<p>I _think_ I could use the following to cook up a counterexample to <code>finset.sup'_eq_csupr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">uhoh</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">a'</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">⊔</span> <span class=\"o\">{</span><span class=\"n\">Sup</span> <span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Avert your eyes from the horrendous proof below.</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">Sup</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha'</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha'</span><span class=\"o\">],</span> <span class=\"n\">unfold</span> <span class=\"n\">supr</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_range</span><span class=\"o\">,</span> <span class=\"n\">exists_false_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.le_eq_subset</span><span class=\"o\">,</span> <span class=\"n\">set.empty_subset</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"bp\">∅</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">{</span><span class=\"n\">Sup</span> <span class=\"bp\">∅</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ohdear</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">a'</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">⊔</span> <span class=\"o\">{</span><span class=\"n\">Sup</span> <span class=\"bp\">∅</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">supr</span><span class=\"o\">,</span> <span class=\"n\">uhoh</span> <span class=\"n\">s</span> <span class=\"n\">a'</span> <span class=\"n\">hs</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 239956468,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1621781548
    },
    {
        "content": "<p>This might not be a bad time to remind you about <a href=\"https://github.com/leanprover-community/mathlib/issues/7439\">#7439</a> !</p>",
        "id": 239956482,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1621781580
    },
    {
        "content": "<p>So yeah, this is a bit like my \"finprod\" thread: I presume it's convenient that <code>supr</code> is always defined for conditionally complete lattices, but appropriate hypotheses are needed in order to get sensible results etc.</p>",
        "id": 239956842,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1621781997
    },
    {
        "content": "<p>I had the same issue recently. I was defining the projective (semi)norm on a tensor product, and wrote something of the form <code>⨅ x (hx : p x), f x</code> for some predicate <code>p</code> and a function with nonnegative real values <code>f</code>. I thought that it would take the infimum of <code>f</code> over those <code>x</code> for which <code>p x</code>, but that's not how it works. It took me 2 hours to realize that it was not at all what I thought: there was always an <code>x</code> for which the property was not true, and my definition was in fact always equal to 0 (due to the default value for Inf being 0 on <code>ℝ</code>). I could prove that it was a seminorm without issues :)<br>\nSo indeed, the bounded supremum/infimum notation on a conditionally complete lattice did not conform at all to my intuition.</p>",
        "id": 239956931,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1621782030
    },
    {
        "content": "<p>I ended up stating my lemma as <code>finset.sup'_eq_cSup_image : s.sup' H f = Sup (f '' s)</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/7689\">#7689</a> to avoid awkwardness with <code>supr</code></p>",
        "id": 239960564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621785726
    },
    {
        "content": "<p>Your <code>oh_dear</code> lemma might be worth having simply to caution against using <code>supr</code> over <code>Prop</code> for conditionally_complete lattices</p>",
        "id": 239960626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621785788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/Bounded.20supremum.20on.20conditionally_complete_lattice/near/239956482\">said</a>:</p>\n<blockquote>\n<p>This might not be a bad time to remind you about <a href=\"https://github.com/leanprover-community/mathlib/issues/7439\">#7439</a> !</p>\n</blockquote>\n<p>I was hoping to leave that for Yury, but they've been absent for a while.</p>",
        "id": 239960660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621785815
    },
    {
        "content": "<p>I also fall into this trap every now and then. The most recent iteration was <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/prop_92/concrete.lean#L118-L119\">https://github.com/leanprover-community/lean-liquid/blob/master/src/prop_92/concrete.lean#L118-L119</a>  that  I initially stated wrong because of this (it seems very close to Eric's example).</p>",
        "id": 239962654,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621787826
    }
]