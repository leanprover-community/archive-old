[
    {
        "content": "<p>Is there any theory in mathlib about continuous group actions on topological spaces?</p>",
        "id": 264862824,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639491177
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_continuous_smul\">docs#has_continuous_smul</a> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 264862948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639491252
    },
    {
        "content": "<p>There's also <a href=\"https://github.com/leanprover-community/mathlib/pull/10465\">#10465</a>, adding <code>has_continuous_smul₂</code></p>",
        "id": 264864595,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639491995
    },
    {
        "content": "<p>Ah, OK. What about continuous partial actions?</p>",
        "id": 264865765,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639492442
    },
    {
        "content": "<p>Actually, I don't see anything about partial actions. Speaking of which, how does mathlib deal with partial functions in general?</p>",
        "id": 264865994,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639492527
    },
    {
        "content": "<p>If I want to define a partial function a -&gt; b, do I define it as a -&gt; option b?</p>",
        "id": 264866048,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639492554
    },
    {
        "content": "<p>Often, mathlib defines partial functions as a total function, sending things outside of the domain to a junk value. One that is often useful for proofs. Otherwise repeated application of the partial function require constant proofs that you're in the range you expect</p>",
        "id": 264866479,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639492696
    },
    {
        "content": "<p>For example, division by 0 is defined in your usual number systems as 0.</p>",
        "id": 264866586,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639492742
    },
    {
        "content": "<p>Or the derivative of nondifferentiable functions is the 0 function (I think)</p>",
        "id": 264866670,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639492775
    },
    {
        "content": "<p>I see.</p>",
        "id": 264866919,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639492849
    },
    {
        "content": "<p>Since I'm working abstractly, I won't have junk values available.</p>",
        "id": 264866978,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639492876
    },
    {
        "content": "<p>If you have a group, you always have the unit available for junk</p>",
        "id": 264867460,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639493070
    },
    {
        "content": "<p>You'll have junk values when you'll want to apply general results.</p>",
        "id": 264867490,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639493080
    },
    {
        "content": "<p>When you formulate them, you assume that you have a total function and it has good properties on some set.</p>",
        "id": 264867565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639493109
    },
    {
        "content": "<p>If you want true partial functions, then have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun\">docs#pfun</a></p>",
        "id": 264867736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639493166
    },
    {
        "content": "<p>Ah, didn't know about pfun. Nice.</p>",
        "id": 264867787,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639493194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/continuous.20group.20actions/near/264867565\">said</a>:</p>\n<blockquote>\n<p>When you formulate them, you assume that you have a total function and it has good properties on some set.</p>\n</blockquote>\n<p>Yeah. This sounds like the way to go.</p>",
        "id": 264868356,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639493405
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 264868397,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639493419
    },
    {
        "content": "<p>We usually work with total functions because you can't, e.g., rewrite on <code>h : a = b</code> in <code>(f : α →. β) a (ha : (f a).dom)</code>.</p>",
        "id": 264869800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639493958
    },
    {
        "content": "<p>Can you <code>simp_rw</code>?</p>",
        "id": 264883452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639499132
    },
    {
        "content": "<p>I'm not sure. For some reasons I don't fully understand, <code>simp only</code> (used by <code>simp_rw</code>) sometimes fails to apply <code>@[congr]</code> lemmas.</p>",
        "id": 264902234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639506065
    },
    {
        "content": "<p>tl;dr: it's easier to try</p>",
        "id": 264902302,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639506105
    }
]