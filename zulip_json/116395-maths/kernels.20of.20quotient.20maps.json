[
    {
        "content": "<p>I was surprised that I couldn't find that the kernel of R -&gt; R / I was I (R a ring, I an ideal)</p>",
        "id": 158424441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049189
    },
    {
        "content": "<p>Then I was more surprised that I couldn't find kernels at all.</p>",
        "id": 158424445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049203
    },
    {
        "content": "<p>Kenny says I should bundle linear maps</p>",
        "id": 158424446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049212
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n\n<span class=\"n\">def</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">kernel</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"err\">⊥</span>\n</pre></div>\n\n\n<p>How am I doing so far?</p>",
        "id": 158424457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049232
    },
    {
        "content": "<p>What confuses me now is that <code>submodule.quotient.mk</code> is not a <code>linear_map R M M/P</code> for P a submodule</p>",
        "id": 158424533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049291
    },
    {
        "content": "<p>it's just a map M -&gt; M / P</p>",
        "id": 158424542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> is what I need already in mathlib? Some analogue of <a href=\"http://submodule.quotient.mk\" target=\"_blank\" title=\"http://submodule.quotient.mk\">submodule.quotient.mk</a> which produces the structure you want me to use?</p>",
        "id": 158424587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049354
    },
    {
        "content": "<p>well it's a ring hom <code>R -&gt; R/I</code></p>",
        "id": 158424662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550049409
    },
    {
        "content": "<p>I thought I'd do the module case</p>",
        "id": 158424681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049427
    },
    {
        "content": "<p>wait <code>submodule.quotient.mk</code> isn't linear...?</p>",
        "id": 158424683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550049431
    },
    {
        "content": "<p>try <code>submodule.mkq</code> or something</p>",
        "id": 158424685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550049436
    },
    {
        "content": "<p><code>submodule.quotient.mk</code> is just the map M -&gt; M / N</p>",
        "id": 158424697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049456
    },
    {
        "content": "<p>No doubt there's a theorem that it's linear</p>",
        "id": 158424701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049462
    },
    {
        "content": "<p>but my understanding is that you don't want me to use that map in public</p>",
        "id": 158424710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550049476
    },
    {
        "content": "<p>does <code>submodule.mkq</code> work?</p>",
        "id": 158424759,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550049498
    },
    {
        "content": "<p>Yes.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n\n<span class=\"n\">def</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">kernel</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"err\">⊥</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">ker_quotient</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">kernel</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">mkq</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 158426504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550051326
    },
    {
        "content": "<p>I don't know the API for this bundled version but in principle it feels like tehe right thing to do</p>",
        "id": 158426547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550051355
    },
    {
        "content": "<p>the kernel of a linear map should definitely be there, I think it is <code>linear_map.ker</code></p>",
        "id": 158458934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550078309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">ker_mkq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">mkq</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n</pre></div>",
        "id": 158459102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550078426
    },
    {
        "content": "<p>Excellent! Thanks. I'm learning my way around the bundled module set-up. I've been reading <code>linear_algebra/basic.lean</code> but I was only up to line 600 when I saw your message :-) Why does this theorem live in the <code>submodule</code> namespace, whereas <code>linear_map.ker</code> lives in the <code>linear_map</code> namespace?</p>",
        "id": 158464862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550082670
    },
    {
        "content": "<p>The quotient is indexed by the submodule, so one can write <code>p.mkq ...</code>, and <code>ker</code> is indexed by the linear map, so one can write <code>f.ker</code></p>",
        "id": 158469326,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1550085815
    },
    {
        "content": "<p>\"is indexed by...\" := \"the first input of the function is...\"? So this goes back to the dot notation which I was learning about last week.</p>",
        "id": 158469537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550085952
    },
    {
        "content": "<p>I see, so this dot notation trick informs naming conventions.</p>",
        "id": 158469601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550085971
    },
    {
        "content": "<p>Yes, but it doesn't explain why the <em>theorem</em> is in a particular namespace, right?</p>",
        "id": 158470273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550086451
    },
    {
        "content": "<p>Oh yes! You're right.</p>",
        "id": 158470294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550086480
    },
    {
        "content": "<p>Well, actually it does... because it is a theorem about submodules...</p>",
        "id": 158470297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550086484
    },
    {
        "content": "<p>I guess <code>N : submodule</code> is the first argument of the thm</p>",
        "id": 158470313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550086500
    },
    {
        "content": "<p>It's a theorem about the kernel of M -&gt; M / N.</p>",
        "id": 158470320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550086503
    },
    {
        "content": "<p>But you first need an <code>N</code>, before you can talk about that map</p>",
        "id": 158470342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550086525
    },
    {
        "content": "<p>It's not a theorem about arbitrary linear maps</p>",
        "id": 158470352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550086542
    },
    {
        "content": "<p>I see, perhaps N is the only input because everything else can be inferred.</p>",
        "id": 158470435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550086582
    },
    {
        "content": "<p>Which somehow makes N the thing which is controlling everything. I guess you know as well as I do Johan that mathematicians never put too much thought into names. I still don't really see what they've got against \"Theorem 3.1\"...</p>",
        "id": 158470786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550086881
    },
    {
        "content": "<p>I hate reading notes and seeing \"by theorem 7.8\". I can never remember what 7.8 is. Mathematicians could definitely learn the habit of better names.</p>",
        "id": 158474283,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550089710
    },
    {
        "content": "<p>But you can infer from the context what the statement of the theorem is! The reference number is there, only if you want to look up the proof.</p>",
        "id": 158474450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550089857
    },
    {
        "content": "<p>I never attempt to infer. I'll try that in future.</p>",
        "id": 158474689,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550090065
    },
    {
        "content": "<p>Just look at your internal tactic state before and just after the theorem application. The difference is the statement of theorem 7.8.</p>",
        "id": 158474875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550090224
    },
    {
        "content": "<p>Ok, so this gives us kernels of linear maps between modules. But can I build a linear map from a ring hom?</p>",
        "id": 158524504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550146604
    },
    {
        "content": "<p>If I said in a lecture \"now we're done by theorem abs_pow_mul\" or whatever then where is the algorithm which takes this name and finds the theorem earlier in your notes? The advantage of our numbering system is that in the absence of hyperlinks, which is what we had to work with until the 1990s, the \"theorem 7.8\" notation was a solid way of making referencing previous results easy. The issue is that we now do have hyperlinks but mathematicians haven't adapted.</p>",
        "id": 158531350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550153346
    },
    {
        "content": "<p>You can find it under the \"A\".</p>",
        "id": 158531383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550153398
    },
    {
        "content": "<blockquote>\n<p>Ok, so this gives us kernels of linear maps between modules. But can I build a linear map from a ring hom?</p>\n</blockquote>\n<p><code>linear_algebra/basic.lean</code> is quite an easy read :-) but I don't remember seeing it in there. I think it's a recent addition to mathlib that if A -&gt; B is a ring map then B is an A-module.</p>",
        "id": 158531463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550153440
    },
    {
        "content": "<p>But I don't know where that addition is. Shouldn't be hard to find though, try to make the instance using type class inference and then see what it's called</p>",
        "id": 158532088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550154113
    }
]