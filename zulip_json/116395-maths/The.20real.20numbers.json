[
    {
        "content": "<p>How are our real numbers getting along? Do we have the definition of a differentiable function yet, and of its derivative?</p>",
        "id": 127331937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718054
    },
    {
        "content": "<p>one thing about analysis is that there are a lot of promises made</p>",
        "id": 127331992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718091
    },
    {
        "content": "<p>when we say the derivative of a function, we don't just mean the derivative of a function</p>",
        "id": 127331996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718103
    },
    {
        "content": "<p>we mean that it exists</p>",
        "id": 127331999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718105
    },
    {
        "content": "<p>Do we have that the reals are the unique Dedekind-complete ordered field up to unique isomorphism?</p>",
        "id": 127332157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718299
    },
    {
        "content": "<p>is R[ε] Dedekind-complete?</p>",
        "id": 127332202,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718331
    },
    {
        "content": "<p>I was writing a chapter in my book on reals and I was trying to figure out the interface that a mathematician needed.</p>",
        "id": 127332210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718355
    },
    {
        "content": "<p>I figure we need the uniqueness statement above, and the intermediate value theorem and the mean value theorem</p>",
        "id": 127332219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718389
    },
    {
        "content": "<p>and I reckon we have then got a huge chunk of 1st year Imperial analysis</p>",
        "id": 127332221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718408
    },
    {
        "content": "<p>analysis is tricky, I took a long look at awhile back since I was interested in probability</p>",
        "id": 127332225,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527718414
    },
    {
        "content": "<p>I could get students working on this over the summer but I don't have a clue about the current state of things and just thought it was easiest to ask</p>",
        "id": 127332231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718437
    },
    {
        "content": "<p>I already proved the IVT ^^</p>",
        "id": 127332232,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718437
    },
    {
        "content": "<p>Where Kenny?</p>",
        "id": 127332274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718447
    },
    {
        "content": "<p>in my own construction of the real numbers</p>",
        "id": 127332279,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718457
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/cauchy_real.lean#L1508\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/cauchy_real.lean#L1508\">https://github.com/kckennylau/Lean/blob/master/cauchy_real.lean#L1508</a></p>",
        "id": 127332294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718493
    },
    {
        "content": "<p>my plan for attacking it (which I eventually gave up on when I realized is was quite some work) was to follow the isabelle analysis theorems (many of them were written by johannes and jeremy avigad!)</p>",
        "id": 127332316,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527718549
    },
    {
        "content": "<p>well, you could just ask <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  for his advice on what analysis developments to work on :)</p>",
        "id": 127332393,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527718657
    },
    {
        "content": "<p>Kenny did you prove that your real numbers were the unique complete ordered field up to unique isomorphism?</p>",
        "id": 127332436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718695
    },
    {
        "content": "<p>no</p>",
        "id": 127332438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718700
    },
    {
        "content": "<p>Is it in mathlib?</p>",
        "id": 127332442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527718718
    },
    {
        "content": "<p>no idea</p>",
        "id": 127332444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527718725
    },
    {
        "content": "<p>out of curiosity is there a good reference on filters around? I only know about the Cauchy sequence construction, but it seems I must know more to use the reals in mathlib...</p>",
        "id": 127332530,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527718873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span>  most of Isabelle's analysis developed over some time. Starting from Fleuriot, over porting stuff from HOL Light by Amine Chaieb, and then generalizing it to type classes by Brian Huffman, Fabian Immler and me.</p>",
        "id": 127332539,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527718911
    },
    {
        "content": "<p>and a lot of other people</p>",
        "id": 127332541,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527718920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I don't think there is a uniqueness proof in mathlib</p>",
        "id": 127332591,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527718958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> Given a point in a space, you get a \"filter\" of sets on the space, namely the sets containing the point.</p>",
        "id": 127332645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719046
    },
    {
        "content": "<p>So a filter is kind-of a generalization of a point</p>",
        "id": 127332652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719056
    },
    {
        "content": "<p>it's a really cool way of saying \"tends to +infinity\" for example</p>",
        "id": 127332655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719073
    },
    {
        "content": "<p>because even though infinity isn't a real number</p>",
        "id": 127332658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> do you know our filter paper <a href=\"http://home.in.tum.de/~hoelzl/documents/hoelzl2013typeclasses.pdf\" target=\"_blank\" title=\"http://home.in.tum.de/~hoelzl/documents/hoelzl2013typeclasses.pdf\">http://home.in.tum.de/~hoelzl/documents/hoelzl2013typeclasses.pdf</a> ? at least it explains how filters are used in Isabelle.</p>",
        "id": 127332659,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527719095
    },
    {
        "content": "<p>the sets of reals that contain an open interval (r,infinity) is a filter</p>",
        "id": 127332663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719098
    },
    {
        "content": "<ul>\n<li>the sets of sets (r, infinite) over all r</li>\n</ul>",
        "id": 127332686,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527719136
    },
    {
        "content": "<p>the sets of all neighbourhoods around x forms a filter, all left neighbourhoods (and right neibourhoods) etc</p>",
        "id": 127332740,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527719170
    },
    {
        "content": "<p>but currently you need to do a lot of operations directly with filters, there is a lot of <em>porcelian</em> missing. Porcelain the sense that a lot the nice lemmas to show continuity of a function and using it are just not there yet. Many should be proved in a couple of lines but need to be written down.</p>",
        "id": 127332826,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527719374
    },
    {
        "content": "<p>Am I right in thinking that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> -- that all of you wrote distinct definitions of real numbers recently?</p>",
        "id": 127332892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719421
    },
    {
        "content": "<p>Each one of you should prove the fundamental theorem of real numbers</p>",
        "id": 127332893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719430
    },
    {
        "content": "<p>that you are a Dedekind complete ordered field</p>",
        "id": 127332904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719451
    },
    {
        "content": "<p>and the moment you do that you can access all the theorems proved about the other real numbers</p>",
        "id": 127332913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719480
    },
    {
        "content": "<p>Did you all do that?</p>",
        "id": 127332921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719512
    },
    {
        "content": "<p>Uniqueness is overrated</p>",
        "id": 127332965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719535
    },
    {
        "content": "<p>rofl</p>",
        "id": 127332967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719539
    },
    {
        "content": "<p>you people</p>",
        "id": 127332969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719544
    },
    {
        "content": "<p>you don't understand equality</p>",
        "id": 127332971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719552
    },
    {
        "content": "<p>It's really not needed for anything practical though</p>",
        "id": 127332974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719562
    },
    {
        "content": "<p>in a sense it tells you you \"got it right\" but that's it</p>",
        "id": 127332978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719575
    },
    {
        "content": "<p>it's needed for clear thinking</p>",
        "id": 127332979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719576
    },
    {
        "content": "<p>and so we have to teach it to computers</p>",
        "id": 127332984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719586
    },
    {
        "content": "<p>it makes the world a simpler place</p>",
        "id": 127332990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719609
    },
    {
        "content": "<p>when you want to apply theorems about reals, you need to have theorems on (your) reals</p>",
        "id": 127332993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719615
    },
    {
        "content": "<p>a uniqueness statement doesn't help here</p>",
        "id": 127332995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719626
    },
    {
        "content": "<p>I just mean you can port theorems with the uniqueness statement</p>",
        "id": 127333062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719685
    },
    {
        "content": "<p>yeah, that's a bad idea, avoid if you can help it</p>",
        "id": 127333067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719702
    },
    {
        "content": "<p>I want to do more than port theorems</p>",
        "id": 127333079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719733
    },
    {
        "content": "<p>I want to identify them as one</p>",
        "id": 127333083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719740
    },
    {
        "content": "<p>Better to have a single definition and prove equivalent \"views\" of it</p>",
        "id": 127333125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719770
    },
    {
        "content": "<p>uniqueness theorem is a part of interface, because sometimes you would have more than one instance, because it's describing a class of objects (e.g. algebra homomorphism)</p>",
        "id": 127333128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527719793
    },
    {
        "content": "<p>but in this case there is only one object that we call the real numbers</p>",
        "id": 127333130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527719803
    },
    {
        "content": "<p>I have so much to learn about the way you guys think about things.</p>",
        "id": 127333131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719803
    },
    {
        "content": "<p>we won't be constructing other real numbers</p>",
        "id": 127333133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527719807
    },
    {
        "content": "<p>so I don't see why uniqueness is important</p>",
        "id": 127333135,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527719812
    },
    {
        "content": "<p>What is the point of having three copies of the real numbers?</p>",
        "id": 127333149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719839
    },
    {
        "content": "<p>Is one of them \"the best one\" or do they all have their merits or what?</p>",
        "id": 127333154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719850
    },
    {
        "content": "<p>i just did it for myself</p>",
        "id": 127333158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527719864
    },
    {
        "content": "<p>There's only one I'm aware of, unless Kenny did something</p>",
        "id": 127333161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719866
    },
    {
        "content": "<p>i did it privately</p>",
        "id": 127333164,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527719875
    },
    {
        "content": "<p>There was an old construction by Johannes and I replaced it with my own</p>",
        "id": 127333204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719886
    },
    {
        "content": "<p>I thought we had a filter one and a cauchy sequence one in mathlib at different times</p>",
        "id": 127333207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719893
    },
    {
        "content": "<p>right</p>",
        "id": 127333208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719902
    },
    {
        "content": "<p>and then Kenny's</p>",
        "id": 127333210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719904
    },
    {
        "content": "<p>The filter construction is gone, although the theorems aren't</p>",
        "id": 127333213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527719914
    },
    {
        "content": "<p>rip filter construction 2017-2018</p>",
        "id": 127333219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527719927
    },
    {
        "content": "<p>OK so Mario, let's say that in Johannes' construction of real numbers with filters, he proved that the real numbers were a Dedekind complete totally ordered field (he almost certainly did prove this, I believe I remember checking once).</p>",
        "id": 127333229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719987
    },
    {
        "content": "<p>Then isn't that all you will ever need from the real numbers?</p>",
        "id": 127333231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527719999
    },
    {
        "content": "<p>Yes, and that theorem is still there</p>",
        "id": 127333284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527720007
    },
    {
        "content": "<p>no, you need a way to construct real numbers</p>",
        "id": 127333287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527720015
    },
    {
        "content": "<p>like sqrt(2)</p>",
        "id": 127333288,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527720018
    },
    {
        "content": "<p>and filters are hard to work with</p>",
        "id": 127333291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527720022
    },
    {
        "content": "<p>but if Johannes had made it to that pinnacle</p>",
        "id": 127333292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720025
    },
    {
        "content": "<p>you would never need to think about filters any more</p>",
        "id": 127333294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720035
    },
    {
        "content": "<p>how would you make sqrt(2)?</p>",
        "id": 127333299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527720047
    },
    {
        "content": "<p>take the sup of the set of real whose square was less than 2</p>",
        "id": 127333310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720059
    },
    {
        "content": "<p>My construction just slots in where the old one was, all the theorems still work after porting (with filters and everything)</p>",
        "id": 127333329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527720074
    },
    {
        "content": "<p>and then say that you're a complete field</p>",
        "id": 127333333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720078
    },
    {
        "content": "<p>The abstract theorems like that exist, but that's still a far cry from the \"algebraic\" theory with say transcendental functions</p>",
        "id": 127333347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527720116
    },
    {
        "content": "<p>Chris did exp and sin and cos</p>",
        "id": 127333392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720135
    },
    {
        "content": "<p>did that ever make it into mathlib?</p>",
        "id": 127333395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720141
    },
    {
        "content": "<p>I need that for October!</p>",
        "id": 127333398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720150
    },
    {
        "content": "<p>it's still in PR i think</p>",
        "id": 127333399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527720151
    },
    {
        "content": "<p>If it needs work, let me know, that would be a great thing for students to work on</p>",
        "id": 127333406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720166
    },
    {
        "content": "<p>I need e^(i theta) = cos(theta) + i sin(theta)</p>",
        "id": 127333414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720188
    },
    {
        "content": "<p>you're on the wrong thread then</p>",
        "id": 127333422,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527720218
    },
    {
        "content": "<p>you mentioned R[e] earlier, this is R[i]</p>",
        "id": 127333432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720233
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/questions/269353/isomorphism-of-dedekind-complete-ordered-fields\" target=\"_blank\" title=\"https://math.stackexchange.com/questions/269353/isomorphism-of-dedekind-complete-ordered-fields\">https://math.stackexchange.com/questions/269353/isomorphism-of-dedekind-complete-ordered-fields</a></p>",
        "id": 127333708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720661
    },
    {
        "content": "<p>The quote from Spivak</p>",
        "id": 127333715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720666
    },
    {
        "content": "<p>[not the question itself]</p>",
        "id": 127333718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720671
    },
    {
        "content": "<p>Is that proof, that any two complete ordered fields are isomorphic, in mathlib?</p>",
        "id": 127333726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720704
    },
    {
        "content": "<p>(removed)</p>",
        "id": 127333767,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527720726
    },
    {
        "content": "<p>up to unique isomorphism</p>",
        "id": 127333774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720738
    },
    {
        "content": "<p>they are _the same_</p>",
        "id": 127333780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720748
    },
    {
        "content": "<p>they are equal</p>",
        "id": 127333784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720755
    },
    {
        "content": "<p>they are <code>maths-equivalent</code></p>",
        "id": 127333813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527720817
    },
    {
        "content": "<p>Having that theorem will just make you more frustrated when it isn't as powerful as you want</p>",
        "id": 127333950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527720994
    },
    {
        "content": "<p>Incidentally, in my limited experience, it's better not to work with any particular model of the reals directly, but just axiomatize the features that you need using type classes</p>",
        "id": 127334011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527721091
    },
    {
        "content": "<p>Don't prove a single theorem about the reals</p>",
        "id": 127334024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721166
    },
    {
        "content": "<p>just prove a theorem about complete totally ordered fields?</p>",
        "id": 127334027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721180
    },
    {
        "content": "<p>I got frustrated when Lean would keep running out of memory when trying to check stuff like <code>rfl : 2 * 1 = 1 + 1</code></p>",
        "id": 127334032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527721191
    },
    {
        "content": "<p>but then when I switched to working over a general totally ordered discrete topological whatever field, my compile times went way down</p>",
        "id": 127334077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527721211
    },
    {
        "content": "<p>that one is mul_one :P</p>",
        "id": 127334078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527721211
    },
    {
        "content": "<p>norm_num ftw</p>",
        "id": 127334081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721215
    },
    {
        "content": "<p>I know, but it's hard to stop Lean from trying to reduce</p>",
        "id": 127334089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527721225
    },
    {
        "content": "<p>2 is defined to be bit0 1, which is defined to be 1+1</p>",
        "id": 127334090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527721225
    },
    {
        "content": "<p>It means every time you use <code>simp</code> or something, you might fall into a memory leak</p>",
        "id": 127334100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527721247
    },
    {
        "content": "<p>but you still have to reduce (1+1)*1 = 1+1 there</p>",
        "id": 127334102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721255
    },
    {
        "content": "<p>and then you have to back up and carefully walk around it</p>",
        "id": 127334103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527721255
    },
    {
        "content": "<p>Sure, and then <code>norm_num</code> can do that for you</p>",
        "id": 127334115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527721267
    },
    {
        "content": "<p>so I said it's <code>mul_one</code></p>",
        "id": 127334117,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527721269
    },
    {
        "content": "<p>I have wondered whether the reals should be a typeclass too, in case somebody wants to have a really efficient computable version at some point in the future</p>",
        "id": 127334125,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527721295
    },
    {
        "content": "<p>but Kenny what about <code>2/3*4/5=8/30*2</code></p>",
        "id": 127334135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721314
    },
    {
        "content": "<p>but there is no computable version</p>",
        "id": 127334137,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527721314
    },
    {
        "content": "<p>well, the current version is as computable as it gets</p>",
        "id": 127334179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721327
    },
    {
        "content": "<p>I see, so the issue is of course not about proving theorems, it is about doing calculations</p>",
        "id": 127334186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721342
    },
    {
        "content": "<p>computations</p>",
        "id": 127334188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721348
    },
    {
        "content": "<p>i.e. stuff like <code>2 * 3 = 6</code> computes</p>",
        "id": 127334189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721349
    },
    {
        "content": "<p>everything is about computation</p>",
        "id": 127334194,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527721358
    },
    {
        "content": "<p>which are of course important when you want to prove theorems</p>",
        "id": 127334196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721359
    },
    {
        "content": "<p>you want your reals to be \"as computable as possible\"?</p>",
        "id": 127334200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721380
    },
    {
        "content": "<p>well yes</p>",
        "id": 127334206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721398
    },
    {
        "content": "<p>Don't you take one look at a question involving rationals and instantly descend to the rationals?</p>",
        "id": 127334213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721418
    },
    {
        "content": "<p>then make <code>inv</code> into a function that takes a proof that it is not zero</p>",
        "id": 127334216,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527721427
    },
    {
        "content": "<p>I did</p>",
        "id": 127334217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721432
    },
    {
        "content": "<p>Kenny, there is such a thing as constructive, computable reals. You can treat it as arbitrary-precision floating point</p>",
        "id": 127334218,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527721434
    },
    {
        "content": "<p>It's called <code>divp</code></p>",
        "id": 127334256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721446
    },
    {
        "content": "<p>and does it work on an arbitrary complete totally ordered field?</p>",
        "id": 127334263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527721462
    },
    {
        "content": "<p>It works on any <em>ring</em></p>",
        "id": 127334265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721471
    },
    {
        "content": "<p>you won't want to formalize computable reals</p>",
        "id": 127334268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527721481
    },
    {
        "content": "<p>you won't want to, but yet it'll be super useful</p>",
        "id": 127334284,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527721530
    },
    {
        "content": "<p>are you going to set up turing machines now</p>",
        "id": 127334345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527721609
    },
    {
        "content": "<p>lol I'm actually typing out turing machines right now</p>",
        "id": 127334354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721633
    },
    {
        "content": "<p>Actually I'm going via Wang B-machines</p>",
        "id": 127334361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527721673
    },
    {
        "content": "<p>Lean challenge : <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi mathvariant=\"normal\">√</mi><mn>2</mn><mo>+</mo><mi mathvariant=\"normal\">√</mi><mn>3</mn><msup><mo>)</mo><mn>2</mn></msup><mo>=</mo><mn>5</mn><mo>+</mo><mn>2</mn><mi mathvariant=\"normal\">√</mi><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">(\\surd2+\\surd3)^2=5+2\\surd6</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathrm\">√</span><span class=\"mord mathrm\">2</span><span class=\"mbin\">+</span><span class=\"mord mathrm\">√</span><span class=\"mord mathrm\">3</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">5</span><span class=\"mbin\">+</span><span class=\"mord mathrm\">2</span><span class=\"mord mathrm\">√</span><span class=\"mord mathrm\">6</span></span></span></span></p>",
        "id": 127336402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527725082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">√</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">√</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"err\">√</span><span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"err\">←</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul_self</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul_self</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 127336620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527725458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">√</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">√</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"err\">√</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"err\">√</span><span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"err\">←</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul_self</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul_self</span><span class=\"o\">,</span> <span class=\"n\">add_right_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 127336744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527725661
    },
    {
        "content": "<p>Thanks Kenny.</p>",
        "id": 127341099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527733730
    },
    {
        "content": "<p>In <code>data/real/basic.lean</code> there is an import of <code>algebra.big_operators </code> which doesn't seem to me to be used. Is this sort of PR welcome?</p>",
        "id": 127341111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527733776
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/bdd54acda358f535b42951b784757135213dcf52/data/real/basic.lean#L16\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/bdd54acda358f535b42951b784757135213dcf52/data/real/basic.lean#L16\">https://github.com/leanprover/mathlib/blob/bdd54acda358f535b42951b784757135213dcf52/data/real/basic.lean#L16</a></p>",
        "id": 127342055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527735744
    },
    {
        "content": "<p>At that line, <code>#check mk</code> gives that <code>mk</code> is <code>rat.mk</code>. And then on the next line it feels like it was redefined. Why is mk not overloaded now?</p>",
        "id": 127342065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527735796
    },
    {
        "content": "<p>Is there some priority trick?</p>",
        "id": 127342067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527735825
    },
    {
        "content": "<p><code>mk</code> is overloaded at that point. But when one of the theorems with that name is in the current namespace (i.e. inside a <code>namespace</code> block), it takes precedence over other <code>open</code> namespaces.</p>",
        "id": 127342234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736095
    },
    {
        "content": "<p>I see. Thanks.</p>",
        "id": 127342250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736154
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">f₁</span> <span class=\"n\">g₁</span> <span class=\"n\">f₂</span> <span class=\"n\">g₂</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"err\">$</span>\n  <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[(</span><span class=\"bp\">≈</span><span class=\"o\">),</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">add_lim_zero</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127342253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736160
    },
    {
        "content": "<p>and then</p>",
        "id": 127342254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736163
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"err\">$</span>\n  <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[(</span><span class=\"bp\">≈</span><span class=\"o\">),</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">neg_lim_zero</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127342255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736177
    },
    {
        "content": "<p>That's the same code again!</p>",
        "id": 127342257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736186
    },
    {
        "content": "<p>sure is, less than 30 seconds copy paste work</p>",
        "id": 127342305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736210
    },
    {
        "content": "<p>That should be <code>by math_trivial [add_lim_zero]</code></p>",
        "id": 127342307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736211
    },
    {
        "content": "<p>and then <code>by math_trivial [neg_lim_zero]</code></p>",
        "id": 127342311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736224
    },
    {
        "content": "<p>like I said, ~20 times repetition before I even consider making a tactic</p>",
        "id": 127342315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736247
    },
    {
        "content": "<p>6 or 7 times is not enough</p>",
        "id": 127342321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736263
    },
    {
        "content": "<p>but if someone just came along and made that tactic and offered it to mathlib, do you think it would be useful?</p>",
        "id": 127342329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736282
    },
    {
        "content": "<p>I am seeing this ... idiom or whatever you call it over and over again</p>",
        "id": 127342330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736297
    },
    {
        "content": "<p>\"we laboriously transport structure\"</p>",
        "id": 127342332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736306
    },
    {
        "content": "<p>in particular, it is often the case that all the axioms of concrete structure X are similar to each other, but not similar to structure Y</p>",
        "id": 127342334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736310
    },
    {
        "content": "<p>having a tactic that proves axioms of X is not that helpful since there are only O(1) of them, and the tactic won't help with Y</p>",
        "id": 127342382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736359
    },
    {
        "content": "<p>Transport of structure is a central idea of mathematics as we see in the work of Grothendieck and Deligne</p>",
        "id": 127342387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736383
    },
    {
        "content": "<p>Would this <code>math_trivial</code> tactic apply equally to <code>real</code> and <code>pnat</code>?</p>",
        "id": 127342390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736400
    },
    {
        "content": "<p>This is just the sort of thing I want to find out</p>",
        "id": 127342392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736414
    },
    {
        "content": "<p>I found myself when doing schemes</p>",
        "id": 127342395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736421
    },
    {
        "content": "<p>wanting a tactic like this</p>",
        "id": 127342397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736424
    },
    {
        "content": "<p>and I know that when I start perfectoids</p>",
        "id": 127342398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736430
    },
    {
        "content": "<p>I'll find it again</p>",
        "id": 127342401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736433
    },
    {
        "content": "<p>My point is that there are not that many similarities between the proof that <code>pnat</code> has an add and <code>real</code> does</p>",
        "id": 127342444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736450
    },
    {
        "content": "<p>yeah isn't that interesting</p>",
        "id": 127342447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736473
    },
    {
        "content": "<p>lol</p>",
        "id": 127342450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736484
    },
    {
        "content": "<p>Kevin</p>",
        "id": 127342451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736485
    },
    {
        "content": "<p>the sky is blue</p>",
        "id": 127342452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736488
    },
    {
        "content": "<p>These guys need to make a proper mathematician</p>",
        "id": 127342462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736510
    },
    {
        "content": "<p>with the right kind of equals</p>",
        "id": 127342464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736525
    },
    {
        "content": "<p>it's foggy</p>",
        "id": 127342506,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736571
    },
    {
        "content": "<p>relative humidity 98%</p>",
        "id": 127342511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736616
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Extra instances to short-circuit type class resolution -/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"n\">ℝ</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">ℝ</span>         <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_semigroup</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">ℝ</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">ℝ</span>     <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℝ</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">ℝ</span>           <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 127342570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736769
    },
    {
        "content": "<p>Why do they make life better?</p>",
        "id": 127342571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736774
    },
    {
        "content": "<p>This is all in data/real/basic.lean</p>",
        "id": 127342572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736780
    },
    {
        "content": "<p>because beneath you is an uncomputable instance</p>",
        "id": 127342573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736782
    },
    {
        "content": "<p>those are the best kind IMO</p>",
        "id": 127342575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736796
    },
    {
        "content": "<p>if you don't do this, the uncomputable instance will be used</p>",
        "id": 127342576,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736799
    },
    {
        "content": "<p>so your definitions would have to be noncomputable</p>",
        "id": 127342614,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736806
    },
    {
        "content": "<p>and it is used because it is declared the latest</p>",
        "id": 127342619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736814
    },
    {
        "content": "<p>none of this makes any sense to me</p>",
        "id": 127342620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736816
    },
    {
        "content": "<p>no, that's not related</p>",
        "id": 127342621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736818
    },
    {
        "content": "<p>those instances</p>\n<blockquote>\n<p>short-circuit type class resolution</p>\n</blockquote>",
        "id": 127342623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736830
    },
    {
        "content": "<p>so they are creating new paths in the system</p>",
        "id": 127342626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736845
    },
    {
        "content": "<p>well in my construction, if I don't do that, my things become uncomputable</p>",
        "id": 127342627,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527736849
    },
    {
        "content": "<p>which are defeq to longer paths</p>",
        "id": 127342629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736852
    },
    {
        "content": "<p>yes</p>",
        "id": 127342630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736856
    },
    {
        "content": "<p>and this is perhaps making the system better for some reason</p>",
        "id": 127342635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736864
    },
    {
        "content": "<p>why doesn't the system run all those commands every time anyone makes anything a comm_ring?</p>",
        "id": 127342640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736885
    },
    {
        "content": "<p>it means less time traversing the instance graph</p>",
        "id": 127342641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736885
    },
    {
        "content": "<p>then it would be much less time</p>",
        "id": 127342642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736898
    },
    {
        "content": "<p>because that wouldn't save any time, it would just create lots of space</p>",
        "id": 127342645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736920
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">f₁</span> <span class=\"n\">g₁</span> <span class=\"n\">f₂</span> <span class=\"n\">g₂</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">propext</span> <span class=\"err\">$</span>\n  <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lt_of_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_eq</span> <span class=\"n\">h</span> <span class=\"n\">hg</span><span class=\"o\">),</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lt_of_eq_of_lt</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_eq</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hg</span><span class=\"o\">))</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 127342685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736960
    },
    {
        "content": "<p>They're getting quite tricky for my tactic now</p>",
        "id": 127342687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736967
    },
    {
        "content": "<p>If you do it in <em>every</em> case, there is no advantage over just searching the graph, since you have just precalculated all paths</p>",
        "id": 127342689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527736976
    },
    {
        "content": "<p>ha ha</p>",
        "id": 127342692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527736983
    },
    {
        "content": "<p>the point is that I know that <code>real</code> is important and people want to use it lots</p>",
        "id": 127342699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527737009
    },
    {
        "content": "<p>so I set up the system to make that easier</p>",
        "id": 127342702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527737023
    },
    {
        "content": "<p>What else can you control within the type class inference system?</p>",
        "id": 127342742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527737052
    },
    {
        "content": "<p>so that when weirdos state <code>ring</code> theorems over the reals for some reason, it's not horribly slow</p>",
        "id": 127342743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527737057
    },
    {
        "content": "<p>I liked <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> 's comment about typeclasses.</p>",
        "id": 127342748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527737087
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--def real := quotient (@cau_seq.equiv ℚ _ _ _ abs _) -- orig</span>\n<span class=\"n\">def</span> <span class=\"n\">real</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">cau_seq</span> <span class=\"n\">ℚ</span> <span class=\"n\">abs</span><span class=\"o\">))</span> <span class=\"c1\">-- clearer for me</span>\n</pre></div>",
        "id": 127342763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527737134
    },
    {
        "content": "<p>You prefer yours?</p>",
        "id": 127342764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527737139
    },
    {
        "content": "<p><code>@</code> and <code>_</code> are a bit ugly maybe</p>",
        "id": 127342767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527737161
    },
    {
        "content": "<p>but yours is shorter</p>",
        "id": 127342806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527737167
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def real := @quotient (cau_seq ℚ abs) cau_seq.equiv\n</pre></div>",
        "id": 127342867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527737310
    },
    {
        "content": "<p>What is your preference? The mathlib one?</p>",
        "id": 127343308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738315
    },
    {
        "content": "<p>I don't have a strong preference</p>",
        "id": 127343310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527738328
    },
    {
        "content": "<p>In terms of Lean they're all presumably defeq</p>",
        "id": 127343312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738350
    },
    {
        "content": "<p>but in terms of readability some have more worth than others</p>",
        "id": 127343321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738362
    },
    {
        "content": "<p>they are all syntactically equal</p>",
        "id": 127343351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527738363
    },
    {
        "content": "<p>My favourite is the last one <code>@quotient (cau_seq ℚ abs) cau_seq.equiv</code> because it's the most readable to mathematicians</p>",
        "id": 127343365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738466
    },
    {
        "content": "<p><code>instance : has_le ℝ := ⟨λ x y, x &lt; y ∨ x = y⟩</code></p>",
        "id": 127343406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738508
    },
    {
        "content": "<p>You've gone the wrong way</p>",
        "id": 127343408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738513
    },
    {
        "content": "<p>you can do <code>has_le</code> first and get <code>has_lt</code> for free!</p>",
        "id": 127343411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738529
    },
    {
        "content": "<p>I know</p>",
        "id": 127343412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527738537
    },
    {
        "content": "<p>You did it this way for a reason, presumably?</p>",
        "id": 127343413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738541
    },
    {
        "content": "<p>the constructively natural one is lt</p>",
        "id": 127343418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527738554
    },
    {
        "content": "<p>I see</p>",
        "id": 127343419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738563
    },
    {
        "content": "<p>it's all about computing</p>",
        "id": 127343420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527738568
    },
    {
        "content": "<p>it states that there is some epsilon separating them</p>",
        "id": 127343421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527738574
    },
    {
        "content": "<p>for le, it's either the negation of that or the disjunction with equals</p>",
        "id": 127343422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527738600
    },
    {
        "content": "<blockquote>\n<p>that you are a Dedekind complete ordered field</p>\n</blockquote>\n<p>Note: as a mathematician, I use real numbers every day, and I have no idea what is a \"Dedekind complete ordered field\"</p>",
        "id": 127349002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527750387
    },
    {
        "content": "<blockquote>\n<p>How are our real numbers getting along? Do we have the definition of a differentiable function yet, and of its derivative?</p>\n</blockquote>\n<p>I have a definition of a function from a real normed vector space to another one which is differentiable at a point. But I don't have a normed space structure on ℝ^n because I'm swamped in type class resolution issues (<a href=\"#narrow/stream/113488-general/topic/tc.20loop.20again\" title=\"#narrow/stream/113488-general/topic/tc.20loop.20again\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/tc.20loop.20again</a>). Life is really hard here.</p>",
        "id": 127349061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527750517
    },
    {
        "content": "<p><em>boggle</em> I am typing up my exam into Lean and I need the fact that the decimal expansion of the real number 0.71 contains no 8's :-)</p>",
        "id": 127388365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808171
    },
    {
        "content": "<p>does Lean have decimal expansions??</p>",
        "id": 127388372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808183
    },
    {
        "content": "<p>maybe a function from the non-negative reals to (functions from nat to nat)</p>",
        "id": 127388432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808227
    },
    {
        "content": "<p>with f(succ n)&lt;=9</p>",
        "id": 127388438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808241
    },
    {
        "content": "<p>you can write that yourself</p>",
        "id": 127388441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527808260
    },
    {
        "content": "<p>it's quite explicit using floor</p>",
        "id": 127388444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527808264
    },
    {
        "content": "<p>you are right!</p>",
        "id": 127388446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808267
    },
    {
        "content": "<p>given a real number r</p>",
        "id": 127388450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527808278
    },
    {
        "content": "<p>But I was just asking if someone had already written it</p>",
        "id": 127388452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808279
    },
    {
        "content": "<p>Kenny I can do it :-)</p>",
        "id": 127388454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808284
    },
    {
        "content": "<p>I even lecture it in M1F some years</p>",
        "id": 127388456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808288
    },
    {
        "content": "<p>Darn it</p>",
        "id": 127388459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808298
    },
    {
        "content": "<p>if I'd lectured it this year then <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  would have done it :-)</p>",
        "id": 127388463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527808316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">real</span> <span class=\"c1\">-- should come with a warning</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">floor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exists_floor</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">expansion</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">floor</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n</pre></div>",
        "id": 127389782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810489
    },
    {
        "content": "<p>I made a slip: real.floor r on the last but one line is an int not a nat</p>",
        "id": 127389786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810505
    },
    {
        "content": "<p>Kevin</p>",
        "id": 127389791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527810531
    },
    {
        "content": "<p>the fllor is there already</p>",
        "id": 127389792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527810534
    },
    {
        "content": "<p>but when using reals, sllips like this bring the system to its knees. 100% CPU usage, orange bars</p>",
        "id": 127389794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810534
    },
    {
        "content": "<p>it's in archimedean</p>",
        "id": 127389797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527810537
    },
    {
        "content": "<p>Thanks</p>",
        "id": 127389804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810546
    },
    {
        "content": "<p>but why does my code make Lean have a deterministic timeout?</p>",
        "id": 127389809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810559
    },
    {
        "content": "<p>Mario has answered this before</p>",
        "id": 127389811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810564
    },
    {
        "content": "<p>but this behaviour (\"use the imported definitions wisely or there will be timeouts\") is not the norm</p>",
        "id": 127389853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810605
    },
    {
        "content": "<p>it's just a typeclass fallout</p>",
        "id": 127389864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527810632
    },
    {
        "content": "<p>right</p>",
        "id": 127389866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810638
    },
    {
        "content": "<p>but is this a design problem with Lean or something which can be fixed in mathlib or what?</p>",
        "id": 127389870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810658
    },
    {
        "content": "<p>no idea</p>",
        "id": 127389877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527810667
    },
    {
        "content": "<p>hey that floor_ring stuff is a really cool way of doing it :-)</p>",
        "id": 127389940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810775
    },
    {
        "content": "<p><code>⌊10 / 3⌋ : ℤ</code></p>",
        "id": 127390072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527810984
    },
    {
        "content": "<p><code>#reduce ⌊(real.sqrt 2 : ℝ)⌋</code></p>",
        "id": 127390088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811061
    },
    {
        "content": "<p>100% CPU usage!</p>",
        "id": 127390092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811067
    },
    {
        "content": "<p>For some reason, coercing an int to a nat causes a typeclass overflow</p>",
        "id": 127390094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811078
    },
    {
        "content": "<p>segv :-)</p>",
        "id": 127390096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811082
    },
    {
        "content": "<p>I've seen this many times before</p>",
        "id": 127390133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811087
    },
    {
        "content": "<p>but it's only with reals</p>",
        "id": 127390141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811093
    },
    {
        "content": "<p>Lean is really good with most structures</p>",
        "id": 127390143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811102
    },
    {
        "content": "<p>Oh indpt of reals?</p>",
        "id": 127390151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811112
    },
    {
        "content": "<p>you defined an int function and applied it to get a  nat</p>",
        "id": 127390169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811149
    },
    {
        "content": "<p>I know</p>",
        "id": 127390186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811190
    },
    {
        "content": "<p>I assumed the problem was because reals always time out</p>",
        "id": 127390193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811200
    },
    {
        "content": "<p>but maybe you fixed that</p>",
        "id": 127390237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811205
    },
    {
        "content": "<p>and this is an independent timeout</p>",
        "id": 127390253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811210
    },
    {
        "content": "<p>The major source of that was fixed a while ago</p>",
        "id": 127390254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811216
    },
    {
        "content": "<p>this is just Z -&gt; N timeout</p>",
        "id": 127390260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811229
    },
    {
        "content": "<p>What do you get with</p>",
        "id": 127390266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811251
    },
    {
        "content": "<p><code>#reduce ⌊(real.sqrt 2 : ℝ)⌋</code> ?</p>",
        "id": 127390267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811254
    },
    {
        "content": "<p>something horrible, don't do that</p>",
        "id": 127390276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811270
    },
    {
        "content": "<p>What part of <code>noncomputable</code> don't you understand?</p>",
        "id": 127390279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811296
    },
    {
        "content": "<p>:-)</p>",
        "id": 127390283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811303
    },
    {
        "content": "<p>I thought there was no harm trying</p>",
        "id": 127390286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811312
    },
    {
        "content": "<p>it will be some huge stuck term depending on <code>classical.choice</code></p>",
        "id": 127390288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811314
    },
    {
        "content": "<p>after all, schoolkid can do it</p>",
        "id": 127390289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811320
    },
    {
        "content": "<p>it's 1 Mario</p>",
        "id": 127390326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811323
    },
    {
        "content": "<p>You can do it, but not like this</p>",
        "id": 127390330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811331
    },
    {
        "content": "<p>In order for <code>reduce</code> to work it has to be true generally</p>",
        "id": 127390334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811346
    },
    {
        "content": "<p>this is going to be tough to explain to the mathematicians</p>",
        "id": 127390335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811346
    },
    {
        "content": "<p>I'm just being daft, I know about eval</p>",
        "id": 127390340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811367
    },
    {
        "content": "<p>and there are messy terms you can give where it's impossible to decide</p>",
        "id": 127390344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811371
    },
    {
        "content": "<p><code>#eval</code> won't do any better</p>",
        "id": 127390347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811380
    },
    {
        "content": "<p>no but it could</p>",
        "id": 127390354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811387
    },
    {
        "content": "<p>actually it will just complain up front</p>",
        "id": 127390356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811390
    },
    {
        "content": "<p>no it can't, <code>real.floor</code> is <em>necessarily</em> noncomputable</p>",
        "id": 127390362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811406
    },
    {
        "content": "<p>the reduce gives me a segv (twice now)</p>",
        "id": 127390371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811432
    },
    {
        "content": "<p>What <em>can</em> do better is <code>norm_num</code> style tactics that prove specific instances of this in some subset of the full language of lean</p>",
        "id": 127390414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811448
    },
    {
        "content": "<p>but the floor of the square root of 2 isn't noncomputable</p>",
        "id": 127390415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811453
    },
    {
        "content": "<p>That statement doesn't make sense</p>",
        "id": 127390426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811479
    },
    {
        "content": "<p>noncomputability is a property of a term, not its denotation</p>",
        "id": 127390431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> local computability does not patch to give global computability</p>",
        "id": 127390432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811501
    },
    {
        "content": "<p>it ain't no sheaf</p>",
        "id": 127390442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811513
    },
    {
        "content": "<p>is the obstruction finite?</p>",
        "id": 127390443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811514
    },
    {
        "content": "<p>?</p>",
        "id": 127390444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811520
    },
    {
        "content": "<p>floor is computable iff halting problem can be solved</p>",
        "id": 127390446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811527
    },
    {
        "content": "<p>you have an obstructio in each integer, so no it ain't finite</p>",
        "id": 127390448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811544
    },
    {
        "content": "<p>I know but you can do it on sqrt(2)</p>",
        "id": 127390449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811548
    },
    {
        "content": "<p>I can prove that 1 is floor of sqrt(2)</p>",
        "id": 127390450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811559
    },
    {
        "content": "<p>So do that</p>",
        "id": 127390491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811570
    },
    {
        "content": "<p>that doesn't mean you can compute floor(sqrt(2))</p>",
        "id": 127390493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811571
    },
    {
        "content": "<p>so it can be computed in this case</p>",
        "id": 127390495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811574
    },
    {
        "content": "<p>Kenny -- doesn't it?</p>",
        "id": 127390497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811582
    },
    {
        "content": "<p><code>floor (sqrt 2)</code> is a computable number, yes</p>",
        "id": 127390500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811600
    },
    {
        "content": "<p>but <code>floor</code> is not a computable function</p>",
        "id": 127390502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811609
    },
    {
        "content": "<p>so you can't just plug <code>sqrt 2</code> into <code>floor</code> and expect an answer</p>",
        "id": 127390509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811626
    },
    {
        "content": "<p>you need uniform computability without creativeness</p>",
        "id": 127390516,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811646
    },
    {
        "content": "<p>informally</p>",
        "id": 127390519,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811650
    },
    {
        "content": "<p>you need a canonical function</p>",
        "id": 127390520,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811658
    },
    {
        "content": "<p>We could get transcendental numbers into Lean if we could get Chris' sin and cos stuff</p>",
        "id": 127390521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811661
    },
    {
        "content": "<p>that works across everything</p>",
        "id": 127390523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811667
    },
    {
        "content": "<p>floor is daft. Give me exp any day</p>",
        "id": 127390566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811704
    },
    {
        "content": "<p>Is that computable?</p>",
        "id": 127390572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811718
    },
    {
        "content": "<p>By the way, floor is computable on algebraic numbers</p>",
        "id": 127390574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811734
    },
    {
        "content": "<p>I reckon I can prove the sequence is Cauchy</p>",
        "id": 127390575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811737
    },
    {
        "content": "<p>everything is computable on algebraic numbers</p>",
        "id": 127390579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811746
    },
    {
        "content": "<p>so you can write <code>floor (sqrt 2)</code> and compute to <code>1</code></p>",
        "id": 127390581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811746
    },
    {
        "content": "<p>surprise</p>",
        "id": 127390584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811747
    },
    {
        "content": "<p><code>exp</code> is computable</p>",
        "id": 127390586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811767
    },
    {
        "content": "<p>Kenny I'm sure there are non-recursive or whatever subsets of the natural numbers</p>",
        "id": 127390589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811794
    },
    {
        "content": "<p>I was uttering hyperbole</p>",
        "id": 127390640,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811819
    },
    {
        "content": "<p>and so of the algebraic numbers</p>",
        "id": 127390641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811826
    },
    {
        "content": "<p>I think real numbers are overrated in math</p>",
        "id": 127390643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811833
    },
    {
        "content": "<p>agree</p>",
        "id": 127390644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811839
    },
    {
        "content": "<p>They're just some random completion</p>",
        "id": 127390645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811841
    },
    {
        "content": "<p>I was about to say, let's study other local fields</p>",
        "id": 127390646,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811850
    },
    {
        "content": "<p>that sometimes helps in physics</p>",
        "id": 127390647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811855
    },
    {
        "content": "<p>exactly</p>",
        "id": 127390649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811858
    },
    {
        "content": "<p>you don't need <em>full</em> completion in 99.9% of cases</p>",
        "id": 127390651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811859
    },
    {
        "content": "<p>but there's a problem <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 127390657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811872
    },
    {
        "content": "<p>in number theory we need the product of all the completions :-)</p>",
        "id": 127390658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811874
    },
    {
        "content": "<p>something like complete under computable sequences is more than enough</p>",
        "id": 127390659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811875
    },
    {
        "content": "<p>Mario do you think Langlands' work on cyclic base change would work with this smaller subset of the reals?</p>",
        "id": 127390699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811925
    },
    {
        "content": "<p>or maybe \"complete under all the operations I'm talking about today\"</p>",
        "id": 127390700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811926
    },
    {
        "content": "<p>I'm sure it uses AC everywhere</p>",
        "id": 127390705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527811936
    },
    {
        "content": "<p>I can't recall the name of the theroem</p>",
        "id": 127390706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811949
    },
    {
        "content": "<p>it's not so different to doing categories in ZFC</p>",
        "id": 127390707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811951
    },
    {
        "content": "<p>but essentially, if you include exp, then your field is noncomputable</p>",
        "id": 127390709,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811958
    },
    {
        "content": "<p>algebraic numbers and exp</p>",
        "id": 127390710,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811966
    },
    {
        "content": "<p>maybe some other things</p>",
        "id": 127390711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811969
    },
    {
        "content": "<p>maybe you'll know the name</p>",
        "id": 127390712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527811975
    },
    {
        "content": "<p>you just want enough stuff for your theorem, but you assume too much for simplicity</p>",
        "id": 127390713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527811977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I guess it would be too easy to just compute to find out if e + pi is irrational</p>",
        "id": 127390779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527812132
    },
    {
        "content": "<p>that's irrelevant</p>",
        "id": 127390782,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812148
    },
    {
        "content": "<p>for every rational r, if you spent enough time, you can prove that e+pi is not r</p>",
        "id": 127390784,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812160
    },
    {
        "content": "<p>you just can't prove that, for every rational r, e+pi is not r</p>",
        "id": 127390825,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812167
    },
    {
        "content": "<p>decidable equality doesn't mean decidable pi equality</p>",
        "id": 127390829,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812179
    },
    {
        "content": "<p>pi equality meaning forall equality</p>",
        "id": 127390831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812192
    },
    {
        "content": "<p>not 3.14159</p>",
        "id": 127390832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812196
    },
    {
        "content": "<p>I know, but rationality is decidable on algebraic numbers</p>",
        "id": 127390834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527812200
    },
    {
        "content": "<p>oh is it</p>",
        "id": 127390835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812206
    },
    {
        "content": "<p>how do you define algebraic numbers?</p>",
        "id": 127390837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812217
    },
    {
        "content": "<p>yes, just compute the minimal polynomial and see if it has degree 1</p>",
        "id": 127390838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527812223
    },
    {
        "content": "<p>do you store the minimal polynomial?</p>",
        "id": 127390845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812236
    },
    {
        "content": "<p>yes</p>",
        "id": 127390846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527812242
    },
    {
        "content": "<p>I see</p>",
        "id": 127390847,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812246
    },
    {
        "content": "<p>I think the most impressive thing about the algebraic numbers is that irreducibility and factoring of Q[x] polynomials is decidable</p>",
        "id": 127390900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527812335
    },
    {
        "content": "<p>agree</p>",
        "id": 127390904,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527812343
    },
    {
        "content": "<p>come on norm-num</p>",
        "id": 127391365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813221
    },
    {
        "content": "<p><code>↑⌊0⌋ * 10 = 0</code></p>",
        "id": 127391366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813223
    },
    {
        "content": "<p>you can do it</p>",
        "id": 127391367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813226
    },
    {
        "content": "<p>gaargh</p>",
        "id": 127391369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813229
    },
    {
        "content": "<p>stupid floor function</p>",
        "id": 127391374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813241
    },
    {
        "content": "<p>oh there is a lemma</p>",
        "id": 127391420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813266
    },
    {
        "content": "<p>I remember now</p>",
        "id": 127391422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813267
    },
    {
        "content": "<p><code>floor_coe</code></p>",
        "id": 127391429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813298
    },
    {
        "content": "<p>I guess floor_zero and floor_one should be simp lemmas</p>",
        "id": 127391439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813312
    },
    {
        "content": "<p>and theorems</p>",
        "id": 127391442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813320
    },
    {
        "content": "<p>oh you're right, that's not (0 : Z)</p>",
        "id": 127391511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813448
    },
    {
        "content": "<p>that one of your other zeros</p>",
        "id": 127391514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813452
    },
    {
        "content": "<p>it's defeq though, you can just apply <code>floor_coe</code></p>",
        "id": 127391560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813492
    },
    {
        "content": "<p>not in a rewrite :-/</p>",
        "id": 127391939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814116
    },
    {
        "content": "<p>here, use as you like:</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] theorem floor_zero : ⌊(0:α)⌋ = 0 := floor_coe 0\n\n@[simp] theorem floor_one : ⌊(1:α)⌋ = 1 :=\nby rw [← int.cast_one, floor_coe]\n</pre></div>",
        "id": 127391953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527814150
    },
    {
        "content": "<blockquote>\n<p>that one of your other zeros</p>\n</blockquote>\n<p>lol</p>",
        "id": 127391956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527814166
    },
    {
        "content": "<p>unfortunately this doesn't help with say <code>⌊2⌋ = 2</code>, that gets tricky in general</p>",
        "id": 127392017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527814224
    },
    {
        "content": "<p>because the two <code>2</code>'s are represented differently</p>",
        "id": 127392018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527814238
    },
    {
        "content": "<p>I've got interested in what needs names</p>",
        "id": 127392030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814277
    },
    {
        "content": "<p>I would vote for floor_zero</p>",
        "id": 127392031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814290
    },
    {
        "content": "<p>rofl I just tried it in my code and it didn't work</p>",
        "id": 127392080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814330
    },
    {
        "content": "<p>and then I remembered that someone writing some code on the internet doesn't mean my computer runs it</p>",
        "id": 127392085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814341
    },
    {
        "content": "<p>and you have to copy paste</p>",
        "id": 127392087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814352
    },
    {
        "content": "<p>Those lines were written in <code>archimedean.lean</code>, they might not work out of context</p>",
        "id": 127392101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527814399
    },
    {
        "content": "<p>I know archimedean.lean so I could fix it up</p>",
        "id": 127392176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814522
    },
    {
        "content": "<p>I've been reading some of the real code recently</p>",
        "id": 127392179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814540
    },
    {
        "content": "<p>and I'd missed archimedean so I read it the moment Kenny pointed it out to me</p>",
        "id": 127392181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814553
    },
    {
        "content": "<p>I already have added those lines to my local copy, they will be out with the next batch</p>",
        "id": 127392183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527814561
    },
    {
        "content": "<p>I was just thinking I should do the same</p>",
        "id": 127392224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814573
    },
    {
        "content": "<p>but for me it's much harder</p>",
        "id": 127392225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814576
    },
    {
        "content": "<p>I'm doing undergrad stuff in my xena project at the minute (e.g. decimal expansions) but the library imports your mathlib</p>",
        "id": 127392232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814608
    },
    {
        "content": "<p>so I can't edit my fork of your mathlib and then run it easily in my project, unless I actually start importing my mathlib</p>",
        "id": 127392249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527814647
    },
    {
        "content": "<p>ha ha, to finish Q2 of my exam all I now need to do is to prove that if <code>s : ℝ := 71/100</code> then <code>⌊s⌋ = 7</code></p>",
        "id": 127393083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816129
    },
    {
        "content": "<p>the students didn't spend too much time on this bit</p>",
        "id": 127393085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816141
    },
    {
        "content": "<p>does that mean you finished Q1?</p>",
        "id": 127393100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527816209
    },
    {
        "content": "<p>I guess this isn't stated as a theorem explicitly, but the way to prove <code>⌊x⌋ = n</code> is to prove <code>n &lt;= x &lt; n+1</code>, and norm_num will usually take care of that</p>",
        "id": 127393146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527816266
    },
    {
        "content": "<p>no</p>",
        "id": 127393148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816268
    },
    {
        "content": "<p>I liked Q2 better</p>",
        "id": 127393149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816268
    },
    {
        "content": "<p>right</p>",
        "id": 127393151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816283
    },
    {
        "content": "<p>also, the theorem you stated is false</p>",
        "id": 127393153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527816303
    },
    {
        "content": "<p>the floor of s is zero</p>",
        "id": 127393159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527816309
    },
    {
        "content": "<p>:-)</p>",
        "id": 127393160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816310
    },
    {
        "content": "<p>oh too many 10s</p>",
        "id": 127393161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816316
    },
    {
        "content": "<p>sorry</p>",
        "id": 127393162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816318
    },
    {
        "content": "<p>I have to work out the full decimal expansion</p>",
        "id": 127393167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816347
    },
    {
        "content": "<p>so i need a fair few floors</p>",
        "id": 127393169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816360
    },
    {
        "content": "<p>You really want to do this on rat</p>",
        "id": 127393211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527816378
    },
    {
        "content": "<p>then you can just compute</p>",
        "id": 127393212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527816385
    },
    {
        "content": "<p>just take your real number and map it to rat</p>",
        "id": 127393216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527816415
    },
    {
        "content": "<p>I didn't know to what extent that mattered</p>",
        "id": 127393271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816527
    },
    {
        "content": "<p>now I need some theorem that says that the floors agree</p>",
        "id": 127393275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816539
    },
    {
        "content": "<p><code>noncomputable definition s : ℝ := 71/100\nlemma bound1 : 0 ≤ s := by norm_num -- fails</code> :-(</p>",
        "id": 127393282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816553
    },
    {
        "content": "<p>I am already on it</p>",
        "id": 127393284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527816567
    },
    {
        "content": "<p><code>by unfold s; norm_num</code></p>",
        "id": 127393285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527816568
    },
    {
        "content": "<p>thanks</p>",
        "id": 127393286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527816572
    },
    {
        "content": "<p>this should work for you:</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] theorem rat.cast_floor\n  {α} [linear_ordered_field α] [archimedean α] (x : ℚ) :\n  by haveI := archimedean.floor_ring α; exact ⌊(x:α)⌋ = ⌊x⌋ :=\nbegin\n  haveI := archimedean.floor_ring α,\n  apply le_antisymm,\n  { rw [le_floor, ← @rat.cast_le α, rat.cast_coe_int],\n    apply floor_le },\n  { rw [le_floor, ← rat.cast_coe_int, rat.cast_le],\n    apply floor_le }\nend\n</pre></div>",
        "id": 127394102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527818009
    },
    {
        "content": "<p>you have to use <code>haveI</code> in the statement to make it typecheck</p>",
        "id": 127394219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527818236
    },
    {
        "content": "<p>I did...</p>",
        "id": 127394222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527818247
    },
    {
        "content": "<p>and then again in the proof</p>",
        "id": 127394224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527818252
    },
    {
        "content": "<p>The devs don't come here, this is the maths chat</p>",
        "id": 127394227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527818261
    },
    {
        "content": "<p>what do you think about all this haveI stuff?</p>",
        "id": 127394230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527818273
    },
    {
        "content": "<p>Aren't things worse than they used to be?</p>",
        "id": 127394269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527818284
    },
    {
        "content": "<p>Or did other stuff get fixed when that change was made?</p>",
        "id": 127394272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527818291
    },
    {
        "content": "<p>I think I got Leo angry about it, so I'm not going to try again</p>",
        "id": 127394273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527818296
    },
    {
        "content": "<p>haveI is the compromise position</p>",
        "id": 127394275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527818308
    },
    {
        "content": "<p>...but it's not unreasonable here</p>",
        "id": 127394281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527818335
    },
    {
        "content": "<p>I'm injecting an instance which is not an instance normally</p>",
        "id": 127394290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527818354
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 127394371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527818473
    },
    {
        "content": "<p>I feel like I want to apply <code>int.succ_le_of_lt</code> out of decency</p>",
        "id": 127394670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527819061
    },
    {
        "content": "<p><code>lemma int.succ_le_of_lt (a b : ℤ) : a &lt; b → int.succ a ≤ b :=</code></p>",
        "id": 127394677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527819084
    },
    {
        "content": "<p>but proof is id</p>",
        "id": 127394680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527819105
    },
    {
        "content": "<p>It's up to you</p>",
        "id": 127394683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527819114
    },
    {
        "content": "<p>it looks like bad style to just know it's id</p>",
        "id": 127394721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527819124
    },
    {
        "content": "<p>who the .... cares</p>",
        "id": 127394724,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527819133
    },
    {
        "content": "<p>it's the interface Kenny</p>",
        "id": 127394727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527819147
    },
    {
        "content": "<p>proofs are irrelevant</p>",
        "id": 127394734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527819165
    },
    {
        "content": "<p>id sometimes deserves a name :-)</p>",
        "id": 127394735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527819166
    },
    {
        "content": "<p>proofs are irrelevant but names are important</p>",
        "id": 127394740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527819176
    },
    {
        "content": "<p>You are absolutely right, using defeq like this breaks the interface</p>",
        "id": 127394744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527819183
    },
    {
        "content": "<p>but it's not a hill I want to die on</p>",
        "id": 127394750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527819198
    },
    {
        "content": "<p>I would say \"use in moderation\"</p>",
        "id": 127394759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527819223
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">floor_of_bounds</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">⌊</span> <span class=\"n\">r</span> <span class=\"err\">⌋</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span><span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"c1\">-- easy one</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">floor_le</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑⌊</span><span class=\"n\">r</span><span class=\"err\">⌋</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n      <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">lt_succ_floor</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">le_floor</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">d</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">J</span><span class=\"o\">,</span><span class=\"n\">cases</span> <span class=\"n\">J</span> <span class=\"k\">with</span> <span class=\"n\">floor_le&#39;</span> <span class=\"n\">lt_succ_floor&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">le_or_gt</span> <span class=\"err\">⌊</span><span class=\"n\">r</span><span class=\"err\">⌋</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">HT</span> <span class=\"n\">HF</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- false one</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">XXX</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">HF</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span> <span class=\"n\">at</span> <span class=\"n\">XXX</span><span class=\"o\">,</span>\n    <span class=\"n\">clear</span> <span class=\"n\">HF</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">XXX</span> <span class=\"n\">lt_succ_floor&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">H2</span><span class=\"o\">,</span><span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">HT</span> <span class=\"k\">with</span> <span class=\"n\">HF</span> <span class=\"n\">HT&#39;</span><span class=\"o\">,</span><span class=\"n\">swap</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">HT&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">XXX</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">floor_le&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">XXX</span> <span class=\"n\">HF</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127395229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820037
    },
    {
        "content": "<p>Rubbish lean code but it's a proof</p>",
        "id": 127395230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820048
    },
    {
        "content": "<p>What tricks am I missing?</p>",
        "id": 127395235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820073
    },
    {
        "content": "<p><code>le_floor</code>?</p>",
        "id": 127395291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820201
    },
    {
        "content": "<p>given <code>z &lt;= r</code>, use <code>le_floor</code> to deduce <code>z &lt;= floor(r)</code></p>",
        "id": 127395337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820237
    },
    {
        "content": "<p>here's the reals back to their old tricks</p>",
        "id": 127395346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820309
    },
    {
        "content": "<p>given <code>r &lt; z+1</code>, <code>floor_lt</code> tells you <code>floor(r) &lt; z + 1</code></p>",
        "id": 127395388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820332
    },
    {
        "content": "<p>then deduce <code>floor(r) &lt;= z</code> (everything is an integer now)</p>",
        "id": 127395391,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820348
    },
    {
        "content": "<p>and then <code>le_antisymm</code></p>",
        "id": 127395393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">71</span><span class=\"bp\">/</span><span class=\"mi\">100</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">floor</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">show</span> <span class=\"n\">floor</span> <span class=\"o\">((</span><span class=\"mi\">71</span><span class=\"bp\">/</span><span class=\"mi\">100</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127395400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820393
    },
    {
        "content": "<p>deterministic timeout</p>",
        "id": 127395401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820399
    },
    {
        "content": "<p>because 71:R / 100:R is not defeq to 71:Q / 100:Q</p>",
        "id": 127395406,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820416
    },
    {
        "content": "<p>I did it by contradiction :-)</p>",
        "id": 127395446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820445
    },
    {
        "content": "<p>you always want to do things constructively</p>",
        "id": 127395450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820453
    },
    {
        "content": "<p>?</p>",
        "id": 127395451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820453
    },
    {
        "content": "<p>I see</p>",
        "id": 127395454,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820462
    },
    {
        "content": "<p>to each their own</p>",
        "id": 127395455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820466
    },
    {
        "content": "<p>I have no time</p>",
        "id": 127395457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820476
    },
    {
        "content": "<p>I need to learn what the Weil group is</p>",
        "id": 127395458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820481
    },
    {
        "content": "<p>oh the coercion to R is done before the division</p>",
        "id": 127395459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820497
    },
    {
        "content": "<p>The magic of biconditional theorems...</p>\n<div class=\"codehilite\"><pre><span></span>lemma floor_of_bounds (r : α) (z : ℤ) :\n  ↑z ≤ r ∧ r &lt; (z + 1) ↔ ⌊ r ⌋ = z :=\nby rw [← le_floor, ← int.cast_one, ← int.cast_add, ← floor_lt,\n  int.lt_add_one_iff, le_antisymm_iff, and.comm]\n</pre></div>",
        "id": 127395466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820503
    },
    {
        "content": "<p>lol</p>",
        "id": 127395470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820516
    },
    {
        "content": "<p>two lines vs 100 lines</p>",
        "id": 127395472,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820531
    },
    {
        "content": "<p>very nice</p>",
        "id": 127395473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820533
    },
    {
        "content": "<p>but I never got stuck</p>",
        "id": 127395475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820540
    },
    {
        "content": "<p>I just proved it and enjoyed it</p>",
        "id": 127395477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820548
    },
    {
        "content": "<p>walking around the gardens of mathematics</p>",
        "id": 127395478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820560
    },
    {
        "content": "<p>oh you proved by contradiction</p>",
        "id": 127395526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820641
    },
    {
        "content": "<p>that's a bit roundabout</p>",
        "id": 127395527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820648
    },
    {
        "content": "<p>it's inbuilt</p>",
        "id": 127395571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820709
    },
    {
        "content": "<p>I asked 250 students to prove sup(S) + sup(T) = sup(S+T)</p>",
        "id": 127395575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820726
    },
    {
        "content": "<p>you have so many cases in this proof...</p>",
        "id": 127395576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820729
    },
    {
        "content": "<p>and about 80 did it</p>",
        "id": 127395577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820731
    },
    {
        "content": "<p>really</p>",
        "id": 127395578,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820737
    },
    {
        "content": "<p>and 79 did it by contradiction</p>",
        "id": 127395579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820739
    },
    {
        "content": "<p>such a simple theorem</p>",
        "id": 127395581,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820741
    },
    {
        "content": "<p>only 80 out of 250</p>",
        "id": 127395584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820746
    },
    {
        "content": "<p>it's about that</p>",
        "id": 127395588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820753
    },
    {
        "content": "<p>I didn't count carefully and it's all gone back to the exams office now</p>",
        "id": 127395590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and the 1 is me lol</p>",
        "id": 127395591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820769
    },
    {
        "content": "<p>maybe more</p>",
        "id": 127395592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820769
    },
    {
        "content": "<p>I recall this story</p>",
        "id": 127395594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820778
    },
    {
        "content": "<p>like seriously</p>",
        "id": 127395595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820779
    },
    {
        "content": "<p>the UMPs of sup is all you need</p>",
        "id": 127395598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820786
    },
    {
        "content": "<p>contradiction is the most powerful method of proof</p>",
        "id": 127395599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820790
    },
    {
        "content": "<p>you get to assume the most stuff</p>",
        "id": 127395600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820799
    },
    {
        "content": "<p>but 0% of the people know about UMP and UMP of sup</p>",
        "id": 127395640,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820805
    },
    {
        "content": "<p>rounded down to the nearest percent</p>",
        "id": 127395644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820809
    },
    {
        "content": "<p>I'm not even against it on intuitionistic grounds</p>",
        "id": 127395645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820812
    },
    {
        "content": "<p>if you've never had your brain polluted by constructivism it's a very natural first step</p>",
        "id": 127395647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820819
    },
    {
        "content": "<p>cleansed</p>",
        "id": 127395652,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820832
    },
    {
        "content": "<p>it has a way of making thinking easier and proof more complicated</p>",
        "id": 127395654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820835
    },
    {
        "content": "<p>right</p>",
        "id": 127395656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820846
    },
    {
        "content": "<p>I even saw, on several occasions, and this is certainly not the first time,</p>",
        "id": 127395658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820860
    },
    {
        "content": "<p>people writing</p>",
        "id": 127395659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820862
    },
    {
        "content": "<p>it's not even about constructivism anymore, I'm just chaining UMPs all around</p>",
        "id": 127395666,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820869
    },
    {
        "content": "<p>it's not about constructivism when people use UMP in category theory</p>",
        "id": 127395669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820884
    },
    {
        "content": "<p>because it's what it is</p>",
        "id": 127395670,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820888
    },
    {
        "content": "<p>it's the UMP</p>",
        "id": 127395671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820889
    },
    {
        "content": "<p>\"We want to prove X. Let's prove it by contradiction. So assume X is false. Now consider the following perfectly good proof of X. But X is false! Contradiction!</p>",
        "id": 127395672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820894
    },
    {
        "content": "<p>\"</p>",
        "id": 127395674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527820895
    },
    {
        "content": "<p>if you are a lazy person who only knows proof by contradiction it's a very natural first step</p>",
        "id": 127395713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820926
    },
    {
        "content": "<p>For things like timed tests it's a good strategy</p>",
        "id": 127395720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820964
    },
    {
        "content": "<p>I find UMPs easier</p>",
        "id": 127395723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527820972
    },
    {
        "content": "<p>where you just write and write until you get the answer</p>",
        "id": 127395726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527820984
    },
    {
        "content": "<p>I just use 100 UMPs until I get the answer</p>",
        "id": 127395732,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821008
    },
    {
        "content": "<p>and I always get it</p>",
        "id": 127395733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821011
    },
    {
        "content": "<p>because it's universal</p>",
        "id": 127395734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821013
    },
    {
        "content": "<p>Also resolution theorem proving is based on this idea</p>",
        "id": 127395736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527821020
    },
    {
        "content": "<p>solve_by_elim ain't</p>",
        "id": 127395745,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821032
    },
    {
        "content": "<p>where you whittle down a counterexample until it is impossible</p>",
        "id": 127395748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527821041
    },
    {
        "content": "<p>but the resulting proof looks ugly I think</p>",
        "id": 127395790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527821098
    },
    {
        "content": "<p>(whatever)</p>",
        "id": 127395800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821115
    },
    {
        "content": "<p>when you want that \"polished\" look it's best to avoid proof by contradiction</p>",
        "id": 127395801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527821116
    },
    {
        "content": "<p>My goal is <code>has_le.le (coe 0) (has_div.div 71 100)</code></p>",
        "id": 127395980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821494
    },
    {
        "content": "<p>and if I try and unfold either <code>has_le.le</code> or <code>coe</code> I get a deterministic timeout</p>",
        "id": 127395983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821509
    },
    {
        "content": "<p>so don't unfold them?</p>",
        "id": 127396024,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821527
    },
    {
        "content": "<p>norm_num times out too</p>",
        "id": 127396038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821630
    },
    {
        "content": "<p>did you use <code>div</code> lemmas?</p>",
        "id": 127396081,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821656
    },
    {
        "content": "<p><code>div_nonneg</code></p>",
        "id": 127396082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821661
    },
    {
        "content": "<p>oh I need to feed those in</p>",
        "id": 127396084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821674
    },
    {
        "content": "<p>you just need that one</p>",
        "id": 127396085,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821685
    },
    {
        "content": "<p>the rest should be <code>norm_num</code></p>",
        "id": 127396087,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821690
    },
    {
        "content": "<p>do I put it in the context?</p>",
        "id": 127396088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821693
    },
    {
        "content": "<p>no, you apply it</p>",
        "id": 127396096,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821714
    },
    {
        "content": "<p>you want me to actually prove it by hand??</p>",
        "id": 127396146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821801
    },
    {
        "content": "<p>what is this -- the 1980s?</p>",
        "id": 127396149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821809
    },
    {
        "content": "<p>we have norm_num!</p>",
        "id": 127396152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821822
    },
    {
        "content": "<p>my math teacher at high school would tell the story of people using calculators to verify that 5 x 0 = 0</p>",
        "id": 127396163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821847
    },
    {
        "content": "<p><code>refine div_nonneg _ _,</code> times out</p>",
        "id": 127396207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821917
    },
    {
        "content": "<p>everything times out</p>",
        "id": 127396209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821919
    },
    {
        "content": "<p>my goal is corrupted</p>",
        "id": 127396211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821922
    },
    {
        "content": "<p>code</p>",
        "id": 127396215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527821932
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">71</span><span class=\"bp\">/</span><span class=\"mi\">100</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sQ</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">71</span><span class=\"bp\">/</span><span class=\"mi\">100</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">s</span><span class=\"bp\">;</span><span class=\"n\">norm_num</span>\n\n<span class=\"c1\">--set_option pp.all true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">floor</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sQ</span><span class=\"o\">,</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_floor</span><span class=\"o\">],</span>\n<span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">floor_of_bounds</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">100</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">div_nonneg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">--unfold has_le.le,</span>\n<span class=\"c1\">--show 0 ≤ 71 / 100,</span>\n\n    <span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127396229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821968
    },
    {
        "content": "<p>all this fuss about <code>0.71</code></p>",
        "id": 127396231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821973
    },
    {
        "content": "<p>I should have been in bed hours ago</p>",
        "id": 127396232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527821978
    },
    {
        "content": "<p>I'm glad none of my students spent 2 hours on this bit</p>",
        "id": 127396276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527822008
    },
    {
        "content": "<p>it was only a 2 hour exam</p>",
        "id": 127396283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527822017
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">floor</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">floor_of_bounds</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">div_nonneg</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">div_lt_iff</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127396337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527822147
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example : floor s = 0 := by rw [← floor_of_bounds, s, int.cast_zero]; norm_num\n</pre></div>",
        "id": 127396449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527822397
    },
    {
        "content": "<p>So using rat.cast_floor was a bad idea</p>",
        "id": 127396503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527822486
    },
    {
        "content": "<p>Even though my instinct is to get out of R ASAP</p>",
        "id": 127396509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527822506
    },
    {
        "content": "<p>there's a box</p>",
        "id": 127396510,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527822510
    },
    {
        "content": "<p>I meant to use that if you were planning on kernel computation</p>",
        "id": 127396511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527822513
    },
    {
        "content": "<p>think out of it</p>",
        "id": 127396512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527822513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> i couldn't get the kernel to compute it</p>",
        "id": 127396513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527822525
    },
    {
        "content": "<p>Actually <code>71</code> might be too big for the kernel...</p>",
        "id": 127396517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527822542
    },
    {
        "content": "<p>lol</p>",
        "id": 127396521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527822545
    },
    {
        "content": "<p>71 is too big for the kernel</p>",
        "id": 127396524,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527822553
    },
    {
        "content": "<p><a href=\"https://tio.run/##K6gsycjPM/7/v6AoM69Ew9xQS8vcUPP/fwA\" target=\"_blank\" title=\"https://tio.run/##K6gsycjPM/7/v6AoM69Ew9xQS8vcUPP/fwA\">https://tio.run/##K6gsycjPM/7/v6AoM69Ew9xQS8vcUPP/fwA</a></p>",
        "id": 127396526,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527822566
    },
    {
        "content": "<p>that's VM computation though</p>",
        "id": 127396531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527822590
    },
    {
        "content": "<p>or would be if it were lean</p>",
        "id": 127396534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527822597
    },
    {
        "content": "<p>python doesn't have to bother proving it is correct</p>",
        "id": 127396578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527822615
    },
    {
        "content": "<p>and it also doesn't use a braindead representation</p>",
        "id": 127396582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527822647
    },
    {
        "content": "<p>Kenny I did it:</p>",
        "id": 127397530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527824708
    },
    {
        "content": "<p><code>theorem no_eights (n : ℕ) : decimal.expansion s (by unfold s;norm_num) n ≠ 8 := ...</code></p>",
        "id": 127397531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527824718
    },
    {
        "content": "<p><code>0.71</code> has no 8's in its decimal expansion</p>",
        "id": 127397532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527824729
    },
    {
        "content": "<blockquote>\n<p>Actually <code>71</code> might be too big for the kernel...</p>\n</blockquote>\n<p>Would it help if we compute in base <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span></span></span></span> (with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo>=</mo><mn>1</mn><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">r = 10</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">16</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">6</span></span></span></span>)? Then we could have a lookup-table of simp-lemmas. And we could implement stuff like <a href=\"https://en.wikipedia.org/wiki/Multiplication_algorithm#Karatsuba_multiplication\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Multiplication_algorithm#Karatsuba_multiplication\">https://en.wikipedia.org/wiki/Multiplication_algorithm#Karatsuba_multiplication</a></p>",
        "id": 127402805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527835466
    },
    {
        "content": "<p>And for specific computations, of course a specific base could be used, with pre-computed lookup-tables.</p>",
        "id": 127402818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527835503
    },
    {
        "content": "<p>Ok, to be clear: I am not suggesting that we change the implementation of <code>nat</code>. But I am suggesting that we have a parallel implementation specifically for computations in base <code>r</code>. And an isomorphism between the implementations.</p>",
        "id": 127402890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527835616
    },
    {
        "content": "<p>But maybe this means that we also need a parallel implementation of <code>int</code> and <code>rat</code>. And then I'm not sure if I would want to go down that rabbit-hole</p>",
        "id": 127402899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527835654
    },
    {
        "content": "<p>Yes, it would help to work in base r. The really important part is that r should be greater than 1</p>",
        "id": 127403216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836227
    },
    {
        "content": "<p>The <code>num</code> type is used to address these issues, by implementing binary natural numbers instead of the default <code>nat</code> which is unary</p>",
        "id": 127403221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836273
    },
    {
        "content": "<p><code>znum</code> is the parallel implementation of <code>int</code>; there is no qnum type (yet)</p>",
        "id": 127403272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836331
    },
    {
        "content": "<p>Hmm, ok. So then you would need a <code>qnum</code> and afterwards an <code>rnum</code> and a <code>cnum</code>...</p>",
        "id": 127403365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527836507
    },
    {
        "content": "<p>well, those last two don't matter anyway</p>",
        "id": 127403409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836529
    },
    {
        "content": "<p>or at least, they would be significantly different from the <code>real</code> type you know and love</p>",
        "id": 127403415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836550
    },
    {
        "content": "<p>because computable reals are not like regular reals</p>",
        "id": 127403421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836561
    },
    {
        "content": "<p>I am not suggesting that <code>rnum</code> be computable</p>",
        "id": 127403424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527836577
    },
    {
        "content": "<p>But maybe then it isn't useful either (-;</p>",
        "id": 127403431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527836584
    },
    {
        "content": "<p>That's the whole point</p>",
        "id": 127403438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836590
    },
    {
        "content": "<p>The idea is to have a \"programming numbers\" type which is proven isomorphic to the abstract version</p>",
        "id": 127403446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836619
    },
    {
        "content": "<p>Right</p>",
        "id": 127403450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527836628
    },
    {
        "content": "<p>But for a speed-up of Kevin's question, you would like to convert to <code>num</code> at some point. Is that correct?</p>",
        "id": 127403501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527836692
    },
    {
        "content": "<p>Unfortunately, you currently have to make a decision between VM-optimized and kernel-optimized data types</p>",
        "id": 127403502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836700
    },
    {
        "content": "<p>so there are valid reasons to keep both around</p>",
        "id": 127403511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836714
    },
    {
        "content": "<p><code>nat</code> is actually the faster one in the VM, because lean replaces it with GMP bignums or C ints if small enough</p>",
        "id": 127403555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836777
    },
    {
        "content": "<p>while <code>num</code> is just a regular inductive type so it's implemented as a linked list of digits</p>",
        "id": 127403558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836804
    },
    {
        "content": "<p>If you want to prove theorems by <code>rfl</code> or <code>dec_trivial</code>, you need to use kernel-efficient data types or else keep the numbers very small</p>",
        "id": 127403607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836897
    },
    {
        "content": "<p>Yes, I understand. So, are things like Karatsuba or Tom-Cook implemented for <code>num</code>?</p>",
        "id": 127403619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527836968
    },
    {
        "content": "<p>If you are using <code>norm_num</code> or <code>simp</code>, you want VM-efficient data types</p>",
        "id": 127403621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836972
    },
    {
        "content": "<p>No, the numbers have not got that big (yet)</p>",
        "id": 127403622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527836986
    },
    {
        "content": "<p>That requires significant size before it pays off</p>",
        "id": 127403662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837006
    },
    {
        "content": "<p>I guess another problem is that for big numbers the conversion between <code>nat</code> and <code>num</code> will become the bottle-neck. Right?</p>",
        "id": 127403665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837030
    },
    {
        "content": "<p>You can't do anything that even mentions <code>nat</code> in the kernel with big numbers</p>",
        "id": 127403666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837060
    },
    {
        "content": "<p>you can't even accept nat input and convert to num because the parser produces some <code>bit0 (bit0 ... 1)</code> term to pass to your function, and the kernel evaluates it before getting to your function</p>",
        "id": 127403686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837122
    },
    {
        "content": "<p>O.o (-;</p>",
        "id": 127403713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837143
    },
    {
        "content": "<p>So this means that any conversion from <code>nat</code> has to be done in the VM. The good news is that this can be done efficiently and still be verified</p>",
        "id": 127403716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837167
    },
    {
        "content": "<p>Ok, I don't follow this anymore... but I think it means that I can relax (-;</p>",
        "id": 127403722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837199
    },
    {
        "content": "<p>You just have theorems saying <code>bit0 \\u x = \\u bit0 x</code> where <code>\\u : nat -&gt; num</code></p>",
        "id": 127403724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837213
    },
    {
        "content": "<p>I thought that the VM cheated... and you would lose verification</p>",
        "id": 127403725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837215
    },
    {
        "content": "<p>and you have a tactic (running in the VM) that selectively chooses to apply this theorem</p>",
        "id": 127403754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837243
    },
    {
        "content": "<p>by looking at the <em>term</em> in the goal</p>",
        "id": 127403766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837257
    },
    {
        "content": "<p>with regular lean functions you can only look at the value that is given, but tactics can decompose the expr that represents the value</p>",
        "id": 127403771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837297
    },
    {
        "content": "<p>so something like <code>bit0 (bit0 ... 1)</code> has reasonable size as a term but not as a value</p>",
        "id": 127403779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837323
    },
    {
        "content": "<p>and you can apply log(n) <code>bit0 \\u x = \\u bit0 x</code> theorems to get it down to a theorem just about <code>num</code></p>",
        "id": 127403816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837364
    },
    {
        "content": "<p>and then you prove by <code>rfl</code> or whatever</p>",
        "id": 127403820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837378
    },
    {
        "content": "<p>and the kernel never has to evaluate big nats</p>",
        "id": 127403821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837389
    },
    {
        "content": "<p>Ok, I see the strategy.</p>",
        "id": 127403881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837532
    },
    {
        "content": "<p>I think Kevin is going to like that if at some point he wants to do some modular form stuff...</p>",
        "id": 127403891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837570
    },
    {
        "content": "<p>Because their coefficients explode</p>",
        "id": 127403897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837598
    },
    {
        "content": "<p>So <code>norm_num</code> is also working in binary, I guess</p>",
        "id": 127403938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837630
    },
    {
        "content": "<p>it produces a theorem that is longer for larger numbers though</p>",
        "id": 127403940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837651
    },
    {
        "content": "<p>while a kernel proof is always just <code>rfl</code></p>",
        "id": 127403944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837666
    },
    {
        "content": "<p>For the most part, kernel computation is discouraged because it's not particularly optimized for that</p>",
        "id": 127403990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837726
    },
    {
        "content": "<p>But I think it's amusing that in dependent type theory you can write down a very short proof of almost anything</p>",
        "id": 127404013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837801
    },
    {
        "content": "<p>What do you mean with that last statement?</p>",
        "id": 127404066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837885
    },
    {
        "content": "<p>for example, I can write a program that enumerates proofs in ZFC or whatever, and then if there is a proof of RH with fewer than 2^2^2^2^2^2^2^2^2^2^2 symbols, then I can prove it by <code>rfl</code></p>",
        "id": 127404068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837896
    },
    {
        "content": "<p>Right, but that proof will require a lot of prerequisite work</p>",
        "id": 127404077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837939
    },
    {
        "content": "<p>(Which I consider part of the proof.)</p>",
        "id": 127404078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527837946
    },
    {
        "content": "<p>The only work that needs to be done is the setup, stating the problem</p>",
        "id": 127404123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527837969
    },
    {
        "content": "<p>the \"hard part\" is completely absent from the accounting, except in the length bound</p>",
        "id": 127404127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838000
    },
    {
        "content": "<p>but I can write functions that grow ridiculously fast in DTT so that's not saying much</p>",
        "id": 127404134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838025
    },
    {
        "content": "<p>Ok, so we can prove that RH doesn't have a short proof.</p>",
        "id": 127404140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838057
    },
    {
        "content": "<p>And neither has Fermat's Last Theorem</p>",
        "id": 127404141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838069
    },
    {
        "content": "<p>Okay, fermat is a good example, since we know that one is true</p>",
        "id": 127404183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838091
    },
    {
        "content": "<p>For otherwise they would already have been in mathlib with a <code>rfl</code> proof.</p>",
        "id": 127404184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838092
    },
    {
        "content": "<p>I can prove Fermat's last theorem by <code>rfl</code></p>",
        "id": 127404190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838104
    },
    {
        "content": "<p>I would love to see that done.</p>",
        "id": 127404193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838119
    },
    {
        "content": "<p>The statement is already there</p>",
        "id": 127404195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838126
    },
    {
        "content": "<p>And that is all the setup you need.</p>",
        "id": 127404196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838139
    },
    {
        "content": "<p>I just write a <code>bool</code> function that checks the first bazillion proofs and returns <code>tt</code> if one works, and assert by <code>rfl</code> that it is <code>tt</code></p>",
        "id": 127404211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838171
    },
    {
        "content": "<p>Right. And of course Lean will never finish running.</p>",
        "id": 127404258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838216
    },
    {
        "content": "<p>that proof checks if and only if there is a short enough proof of FLT, and since we know there is, that means I have a short proof</p>",
        "id": 127404270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838229
    },
    {
        "content": "<p>Of course the problem with this kind of analysis is that lean will run (almost) forever on such a proof</p>",
        "id": 127404282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838276
    },
    {
        "content": "<p>But it seems to be some kind of deficiency in DTT, that the length of a proof is no longer a suitable measure of the hardness of the proof</p>",
        "id": 127404288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838319
    },
    {
        "content": "<p>Yes, and that's why we still dont have FLT in mathlib (-;</p>",
        "id": 127404323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838323
    },
    {
        "content": "<p>No, but compile-time is still a good measure</p>",
        "id": 127404333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838357
    },
    {
        "content": "<p>Yes. Or number of proof steps including definitional reductions</p>",
        "id": 127404340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838382
    },
    {
        "content": "<p>This doesn't come up in ZFC since there's no definitional reduction, what you see is what you get</p>",
        "id": 127404351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838427
    },
    {
        "content": "<p>anyway, this \"feature\" of DTT should be thought of as abuse of lean, so don't be surprised if it starts to sweat</p>",
        "id": 127404418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838529
    },
    {
        "content": "<p>when you try to <code>#reduce 71 / 100</code></p>",
        "id": 127404428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838550
    },
    {
        "content": "<p>Sure, and in fact, we don't even know what the value of \"bazillion\" is for your <code>bool</code> function. We only have a very clear suggestion that it is finite.</p>",
        "id": 127404477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838594
    },
    {
        "content": "<p>I think there are some pretty reasonable upper bounds based on physical considerations</p>",
        "id": 127404491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838633
    },
    {
        "content": "<p>i.e. the proof appears to fit in the universe, so it's shorter than Graham's number</p>",
        "id": 127404496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527838657
    },
    {
        "content": "<p>ok, fair enough</p>",
        "id": 127404502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527838678
    },
    {
        "content": "<p>It seems that <code>real</code> is not an instance of <code>has_pow</code>. Should I add it, or is there some computability reason for not doing that?</p>",
        "id": 127411378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527851525
    },
    {
        "content": "<p>I think the definition of <code>has_pow</code> is post-real so it might just be that nobody used them seriously enough since. As you can see, I've come back to the reals recently, and I am always interested in making them \"undergraduate-friendly\" so I would have run into this sooner or later.</p>",
        "id": 127414076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527856384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> -- where do these definitions go? Mathlib? My own Xena library? (I'm writing a library for stuff my UG mathematicians might want or need and which is not in mathlib -- can you envisage there being good reasons for such a library?)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">is_upper_bound</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"kn\">definition</span> <span class=\"n\">is_bounded_above</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_upper_bound</span> <span class=\"n\">x</span> <span class=\"n\">S</span>\n<span class=\"kn\">definition</span> <span class=\"n\">is_LUB</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_upper_bound</span> <span class=\"n\">x</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">is_upper_bound</span> <span class=\"n\">y</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">has_LUB</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_LUB</span> <span class=\"n\">x</span> <span class=\"n\">S</span>\n</pre></div>",
        "id": 127414077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527856384
    },
    {
        "content": "<p>Hmm, I guess to do has_pow properly, we should define <code>x^r</code> for <code>x r : real</code>. And then all of a sudden you have to work.</p>",
        "id": 127414310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527856784
    },
    {
        "content": "<p>Or can we have multiple instances, depending on whether <code>r</code> has type <code>nat</code> or <code>int</code> or <code>rat</code> or <code>real</code>.</p>",
        "id": 127414359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527856833
    },
    {
        "content": "<p>this is exactly the problem with pow</p>",
        "id": 127414447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527856973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Isn't <code>Sup</code> already on line 316 of data.real.basic?</p>",
        "id": 127414459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527856987
    },
    {
        "content": "<p>Chris Hughes wrote exp : C -&gt; C but it's still not in mathlib</p>",
        "id": 127414460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527856988
    },
    {
        "content": "<p>That's CS sup</p>",
        "id": 127414712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857389
    },
    {
        "content": "<p>sup(S)+sup(T) = sup(S+T) is not true for that sup</p>",
        "id": 127414713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857389
    },
    {
        "content": "<p>let S have one element and let T be empty</p>",
        "id": 127414714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857389
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 127414715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857389
    },
    {
        "content": "<p>it returns 37 if the set has no sup</p>",
        "id": 127414716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857389
    },
    {
        "content": "<p>This is philosophy not mathematics</p>",
        "id": 127414717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857389
    },
    {
        "content": "<p>but if you're going to define sup globally</p>",
        "id": 127414723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857400
    },
    {
        "content": "<p>then it should be taking values in -infty + R + infty</p>",
        "id": 127414776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857412
    },
    {
        "content": "<p>not just spewing out 37s when it's stuck</p>",
        "id": 127414781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857424
    },
    {
        "content": "<p>You see how my predicate solves this problem?</p>",
        "id": 127414795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857464
    },
    {
        "content": "<p>I can say \"if a is the sup of S and b is the sup of T then a + b is the sup of S + T</p>",
        "id": 127414799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857478
    },
    {
        "content": "<p>Ok, so I read too quickly (-;</p>",
        "id": 127414804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527857489
    },
    {
        "content": "<p>My question is how to formalize that statement in mathlib</p>",
        "id": 127414807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857492
    },
    {
        "content": "<p>and my predicates make it look nice and easy</p>",
        "id": 127414813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857503
    },
    {
        "content": "<p>whereas I can't quite do it with what we have</p>",
        "id": 127414815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857512
    },
    {
        "content": "<p>however I am unclear about whether \"what I want as someone who wants to formulate elementary lemmas about sup\"</p>",
        "id": 127414856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857531
    },
    {
        "content": "<p>has anything to do with \"what should be in mathlib\"</p>",
        "id": 127414862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857539
    },
    {
        "content": "<p>I am very unclear about what the boundaries of mathlib are</p>",
        "id": 127414863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857546
    },
    {
        "content": "<p>Look, watch this:</p>",
        "id": 127414865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> -- should I put schemes in mathlib? Let me know. I don't care either way but you never answer</p>",
        "id": 127414867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857564
    },
    {
        "content": "<p>he never answers</p>",
        "id": 127414871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857572
    },
    {
        "content": "<p>I think he reads the question, thinks \"hmm, I don't know offhand, I should look at the repo, oh look it's 7000 lines of sometimes poorly-written code\"</p>",
        "id": 127414878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857602
    },
    {
        "content": "<p>\"this will need some thought\"</p>",
        "id": 127414879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857607
    },
    {
        "content": "<p>I'll try another approach</p>",
        "id": 127414886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think definitions of high-level mathematical objects and statements of extremely technical theorems are extremely important things to have in Lean and I will be making quite a few of these in the future. Do you want them in mathlib or do you feel that they are beyond mathlib's remit? I hope I have conveyed in the past how I feel about this matter (namely that I think that there are many people whose interest would be sparked by a small database of complex objects built in Lean)</p>",
        "id": 127414954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857744
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thinks they should be in mathlib</p>",
        "id": 127414996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527857780
    },
    {
        "content": "<p>least upper bounds etc as predicates are already there: <a href=\"https://github.com/leanprover/mathlib/blob/master/order/bounds.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/order/bounds.lean\">https://github.com/leanprover/mathlib/blob/master/order/bounds.lean</a></p>",
        "id": 127416299,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527859948
    },
    {
        "content": "<p>You can also have a look at <a href=\"https://github.com/leanprover/mathlib/blob/master/order/conditionally_complete_lattice.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/order/conditionally_complete_lattice.lean\">https://github.com/leanprover/mathlib/blob/master/order/conditionally_complete_lattice.lean</a></p>",
        "id": 127417740,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1527862055
    },
    {
        "content": "<blockquote>\n<p>-- should I put schemes in mathlib? Let me know. I don't care either way but you never answer</p>\n</blockquote>\n<p>RIght now? No. As Patrick has mentioned before, the scheme code is huge and requires major refactoring to go into mathlib, much like some other planned additions, e.g. Scott's category theory stuff (and he's made some progress on this last I checked). As it currently exists, it is written as a \"race to the finish\" which gets the job done without worrying about looking good while doing it, whereas I need \"polished\" code to go into mathlib. It's like the difference between research notes and a journal article or textbook. This process of bringing schemes in will take a lot of both of our time and right now I think you have bigger plans, so I would hold off on attempting this for the present.</p>",
        "id": 127422500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527867921
    },
    {
        "content": "<blockquote>\n<p>I think definitions of high-level mathematical objects and statements of extremely technical theorems are extremely important things to have in Lean and I will be making quite a few of these in the future. Do you want them in mathlib or do you feel that they are beyond mathlib's remit?</p>\n</blockquote>\n<p>The \"level\" of the definition is not a problem, it can be as advanced as you like. But it must also be good lean code, that's my main concern.</p>",
        "id": 127422552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527867988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> There is a definition of has_pow on real, because it is a field. You can use <code>a^n</code> where <code>n : nat</code> and <code>a : real</code></p>",
        "id": 127422727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527868293
    },
    {
        "content": "<p>Actually <code>a^n</code> where <code>n : int</code> is not quite there, since the instance that exists is for <code>group</code>s and <code>real</code> isn't a (multiplicative) group. Maybe there should be another definition for <code>division_ring</code>s that sets <code>0^-n = 0</code>?</p>",
        "id": 127422826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527868419
    },
    {
        "content": "<p>You could use the (tiny) library of proper division in mathlib though: <code>units.mk0 a h</code> where <code>a : real</code> and <code>h : a != 0</code> is an element of <code>units real</code>, which is a group, so you can raise it to an integer power and coerce back to real</p>",
        "id": 127422964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527868597
    },
    {
        "content": "<p>Ok, thanks. I will take a look at those functions.</p>",
        "id": 127425169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527871447
    },
    {
        "content": "<p>Is it now easy to have the integers \\cup infty? How about <code>int \\cup -\\infty</code> ? Including the order and addition on them. (Otherwise I could just take <code>option int</code>.</p>",
        "id": 127425350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527871737
    },
    {
        "content": "<p>Yes, <code>with_top int</code> has an addition operation and an order, and is defeq to <code>option int</code></p>",
        "id": 127425837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527872389
    },
    {
        "content": "<p>Hmm, but there is no <code>with_bot</code> for semigroups. I want to define a function <code>f : nat \\to (with_top int)</code>, and then another function <code>nat \\to real := \\lam n, b^(- f(n))</code>, where <code>b</code> is some fixed real number.</p>",
        "id": 127426287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527872915
    },
    {
        "content": "<p>So then I need to extend <code>-</code> to <code>- : with_top int \\to with_bot int</code>. And I need to explain to <code>has_pow real</code> that <code>b^(-infty) = 0</code>.</p>",
        "id": 127426324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527872981
    },
    {
        "content": "<p>eww</p>",
        "id": 127426376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873004
    },
    {
        "content": "<p>that's a bit specialized</p>",
        "id": 127426384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873011
    },
    {
        "content": "<p>Ok, <code>f(n) = infty \\iff n = 0</code>.</p>",
        "id": 127426404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873036
    },
    {
        "content": "<p>You can define <code>-</code> as <code>option.map (\\lam x, -x)</code>, and <code>b^o</code> where <code>o : with_bot int</code> by cases</p>",
        "id": 127426420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873066
    },
    {
        "content": "<p>The other option is that I just use if-then-else everywhere... but I don't really like that either...</p>",
        "id": 127426421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873067
    },
    {
        "content": "<p>no if-then</p>",
        "id": 127426432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873079
    },
    {
        "content": "<p>it's an option, use cases</p>",
        "id": 127426437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873086
    },
    {
        "content": "<p>Right. (I meant avoiding <code>option</code> and just do <code>dite (n = 0)</code> in all the definitions.</p>",
        "id": 127426457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873120
    },
    {
        "content": "<p>(This stuff shows up everywhere in nonarchimedean valuations.)</p>",
        "id": 127426525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873164
    },
    {
        "content": "<p>what <code>n = 0</code> are you talking about?</p>",
        "id": 127426532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873177
    },
    {
        "content": "<p>you said <code>f</code> returns an option</p>",
        "id": 127426548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873193
    },
    {
        "content": "<p>well, a <code>with_top</code></p>",
        "id": 127426554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873206
    },
    {
        "content": "<p>Yes, but I could also define <code>f</code> on <code>pnat</code>, and <code>g</code> with a <code>dite</code>.</p>",
        "id": 127426559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873217
    },
    {
        "content": "<p>Right?</p>",
        "id": 127426561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873219
    },
    {
        "content": "<p>Oh, I misunderstood your iff statement</p>",
        "id": 127426610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873244
    },
    {
        "content": "<p>But I like your approach. I'll try to implement it when I'm back at Lean. (And should I just clone and dualise the <code>with_top</code> stuff to <code>with_bot</code> for semigroups?</p>",
        "id": 127426662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873342
    },
    {
        "content": "<p>It's already there</p>",
        "id": 127426664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873351
    },
    {
        "content": "<p>Hmm, for <code>with_bot</code> I only see instances for partial orders and lattices. Not for semigroups.</p>",
        "id": 127426731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873390
    },
    {
        "content": "<p>There is <code>with_zero</code> also, there are lots of ways to construe the added element in all the structures</p>",
        "id": 127426754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873423
    },
    {
        "content": "<p>Oh, I see, <code>with_top</code> and <code>with_bot</code> are actually the same as add_semigroups</p>",
        "id": 127426835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873528
    },
    {
        "content": "<p>Ok, so maybe you can also give a hint on how to define <code>f</code>. It is the p-adic valuation (where p is a prime). So <code>f(n)</code> is the maximal <code>e : nat</code> such that <code>p^e</code> divides <code>n</code>.</p>",
        "id": 127426845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873548
    },
    {
        "content": "<blockquote>\n<p>Oh, I see, <code>with_top</code> and <code>with_bot</code> are actually the same as add_semigroups</p>\n</blockquote>\n<p>Yes, but not as ordered add_semigroups.</p>",
        "id": 127426852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873561
    },
    {
        "content": "<p>Yeah, I'll work on that</p>",
        "id": 127426863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> see <a href=\"https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea\">https://gist.github.com/rwbarton/599327954b01b2e840894189981172ea</a></p>",
        "id": 127426978,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527873699
    },
    {
        "content": "<p>First, I would want a \"prime count\" function that takes a nat and finds the appropriate power of p. It is defined arbitrarily at zero, but for concreteness that means <code>f 0 = 0</code></p>",
        "id": 127426979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873699
    },
    {
        "content": "<p>I gave that to Kevin earlier and I think he has improved it some in the Fibonacci project</p>",
        "id": 127427030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527873726
    },
    {
        "content": "<p>Yes, or f 0 = infty. And then you would be done.</p>",
        "id": 127427033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873729
    },
    {
        "content": "<p>Reid, thanks. I'll take a look.</p>",
        "id": 127427047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527873747
    },
    {
        "content": "<p>Then the valuation function is defined by cases on <code>n</code></p>",
        "id": 127427048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873748
    },
    {
        "content": "<p>actually, I just checked what I did in metamath for this and I used with_top as well. So past me seems to think that's a better idea</p>",
        "id": 127427138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873889
    },
    {
        "content": "<p>I'm a bit worried about having to coerce all the time though</p>",
        "id": 127427163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527873933
    },
    {
        "content": "<p>I don't think I ever got the code completely working in the Fibonacci project, there was perhaps one sorry I never got rid of</p>",
        "id": 127428342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875251
    },
    {
        "content": "<blockquote>\n<p>As it currently exists, it is written as a \"race to the finish\" which gets the job done without worrying about looking good while doing it, whereas I need \"polished\" code to go into mathlib. It's like the difference between research notes and a journal article or textbook. This process of bringing schemes in will take a lot of both of our time and right now I think you have bigger plans, so I would hold off on attempting this for the present.</p>\n</blockquote>\n<p>Yes, this is exactly how I wrote it, and I put very little thought into how to make structures because I didn't really know how to make structures at the time. Here are my more long-term thoughts on these matters:</p>",
        "id": 127428438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875339
    },
    {
        "content": "<p>I'm going to do perfectoid spaces because I think it would be funny to do them</p>",
        "id": 127428457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875355
    },
    {
        "content": "<p>Some scheme stuff we will need e.g. sheaves</p>",
        "id": 127428470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875369
    },
    {
        "content": "<p>but I was thinking about re-doing it</p>",
        "id": 127428479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875377
    },
    {
        "content": "<p>doing it all for a second time in a perfectoid spaces directory</p>",
        "id": 127428485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875388
    },
    {
        "content": "<p>and this time doing it better and checking with people like Mario along the way as to whether the structures looked sensible</p>",
        "id": 127428548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875411
    },
    {
        "content": "<p>I understand now much better what I can do well and what I do badly</p>",
        "id": 127428559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875425
    },
    {
        "content": "<p>and especially what I do so badly that it will take a lot of time to fix</p>",
        "id": 127428567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875435
    },
    {
        "content": "<p>I make no apologies for the race to the finish with schemes -- this was simply a test to see if it could be done, and it could be done</p>",
        "id": 127428580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875453
    },
    {
        "content": "<p>I thnk that's a good plan</p>",
        "id": 127428624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527875500
    },
    {
        "content": "<p>In the long term with schemes, I propose doing perfectoid spaces, seeing the parts which are common to both theories, using this commonality as an argument for inclusion in mathlib, and then spending some time writing these parts of the code properly</p>",
        "id": 127428673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875523
    },
    {
        "content": "<p>so for example we will need sheaves of types at some point</p>",
        "id": 127428688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875539
    },
    {
        "content": "<p>and when we need them in the perfectoid theory I will revisit what I did for schemes</p>",
        "id": 127428693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875555
    },
    {
        "content": "<p>The second time around you will have a <em>much</em> better appreciation for the subtleties and design questions and can do it right</p>",
        "id": 127428694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527875560
    },
    {
        "content": "<p>(in fact we did these already and I even have a suggested definition from Mario somewhere in my starred messages)</p>",
        "id": 127428705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875576
    },
    {
        "content": "<p>yes -- second time round much better</p>",
        "id": 127428708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875582
    },
    {
        "content": "<p>Not to mention you are a better lean programmer now than last month (and the month before that etc)</p>",
        "id": 127428729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527875615
    },
    {
        "content": "<p>so second time round I think \"this is important, I knocked up a definition in 10 minutes when I was doing schemes, here are the problems I had with it, let's fix those problems now and aim for mathlib\"</p>",
        "id": 127428731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875615
    },
    {
        "content": "<p>\"and write a proper interface while we're here\"</p>",
        "id": 127428737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875629
    },
    {
        "content": "<p>so it's partly some random repo with random bits of people's papers formalised</p>",
        "id": 127428749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875642
    },
    {
        "content": "<p>and then some directory called \"mathlib_someday\"</p>",
        "id": 127428789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875660
    },
    {
        "content": "<p>When I look at <code>dioph.lean</code> I am ashamed of myself, I would write that so much better now and it's been only a year</p>",
        "id": 127428799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527875680
    },
    {
        "content": "<p>where we put files where someone has actually made an effort to make the file mathlib-worthy</p>",
        "id": 127428805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875692
    },
    {
        "content": "<p>You're absolutely right that I get better every month. When I started schemes I had no idea how to use type class inference so never used it -- I would just supply all the missing proofs myself.</p>",
        "id": 127428825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527875730
    },
    {
        "content": "<p>This all sounds like a great plan --- schemes absolutely deserve to be in mathlib (what would be the point of mathlib if we weren't aiming for it to cover the basic essentials?), and at the same time we should try to make sure code going into mathlib is good (not perfect, though).</p>",
        "id": 127440781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1527891338
    },
    {
        "content": "<p>My categories code (getting there! :-) is still abysmal, probably, and I appreciate it's going to be lots of work to get it into mathlib. :-)</p>",
        "id": 127440829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1527891368
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">archimedean</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">abs_nonneg</span>\n<span class=\"c1\">-- abs_nonneg : ∀ {α : Type u_1}</span>\n<span class=\"c1\">--   [_inst_1 : decidable_linear_ordered_comm_group α] (a : α),</span>\n<span class=\"c1\">--   abs a ≥ 0</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">abs_nonneg&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">floor_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_ordered_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">abs_nonneg</span> <span class=\"n\">r</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 127482657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527984494
    },
    {
        "content": "<p>My understanding of something Reid said a few days ago about the reals</p>",
        "id": 127482660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527984518
    },
    {
        "content": "<p>diamond of death?</p>",
        "id": 127482661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527984522
    },
    {
        "content": "<p>was that I shouldn't be proving things about the reals</p>",
        "id": 127482664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527984535
    },
    {
        "content": "<p>I should just demand I'm a complete totally ordered field and deduce everything from that</p>",
        "id": 127482670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527984561
    },
    {
        "content": "<p>yeah, this is a diamond problem</p>",
        "id": 127482671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527984574
    },
    {
        "content": "<p>but the real problem was decidability I think</p>",
        "id": 127482672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527984586
    },
    {
        "content": "<p>you have two conflicting group structures on A</p>",
        "id": 127482674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527984588
    },
    {
        "content": "<p>and order structure?</p>",
        "id": 127482675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527984597
    },
    {
        "content": "<p>I want to use this abs &gt;= 0 lemma</p>",
        "id": 127482676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527984600
    },
    {
        "content": "<p>a floor_ring has an order</p>",
        "id": 127482721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527984616
    },
    {
        "content": "<p>Why do you have two typeclasses here? that's the question</p>",
        "id": 127482723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527984652
    },
    {
        "content": "<p>In this case I think you don't need <code>decidable_linear_ordered_comm_group</code></p>",
        "id": 127482728,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527984667
    },
    {
        "content": "<p>you do, to state <code>abs</code></p>",
        "id": 127482730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527984707
    },
    {
        "content": "<p>but you don't need the floor_ring</p>",
        "id": 127482731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527984714
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">abs_expansion</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_ordered_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">expansion</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127482878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985000
    },
    {
        "content": "<p>that's what the problem becomes if I remove the floor_ring</p>",
        "id": 127482879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985017
    },
    {
        "content": "<p>what's <code>expansion</code></p>",
        "id": 127482884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  expansion (abs r) _\nterm\n  abs_nonneg r\nhas type\n  @ge α\n    (@preorder.to_has_le α\n       (@partial_order.to_preorder α\n          (@ordered_comm_group.to_partial_order α\n             (@decidable_linear_ordered_comm_group.to_ordered_comm_group α _inst_3))))\n    (@abs α _inst_3 r)\n    0\nbut is expected to have type\n  @ge α\n    (@preorder.to_has_le α\n       (@partial_order.to_preorder α\n          (@ordered_comm_monoid.to_partial_order α\n             (@ordered_cancel_comm_monoid.to_ordered_comm_monoid α\n                (@ordered_semiring.to_ordered_cancel_comm_monoid α\n                   (@ordered_ring.to_ordered_semiring α\n                      (@linear_ordered_ring.to_ordered_ring α (@floor_ring.to_linear_ordered_ring α _inst_2))))))))\n    (@abs α _inst_3 r)\n    0\n</pre></div>",
        "id": 127482885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985047
    },
    {
        "content": "<p>Again, conflicting typeclasses</p>",
        "id": 127482887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985059
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">expansion</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">floor</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">floor</span> <span class=\"o\">(</span><span class=\"n\">chomp</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 127482890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985065
    },
    {
        "content": "<p><code>inst_3</code> in one, <code>inst_2</code> in the other</p>",
        "id": 127482892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985069
    },
    {
        "content": "<p>But it's just a decidability issue</p>",
        "id": 127482895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985075
    },
    {
        "content": "<p>no it's a conflicting typeclasses issue</p>",
        "id": 127482933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985085
    },
    {
        "content": "<p>I just want to \"switch decidability on\"</p>",
        "id": 127482936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985091
    },
    {
        "content": "<p>I assume you don't care about classical?</p>",
        "id": 127482938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985112
    },
    {
        "content": "<p>right</p>",
        "id": 127482940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985121
    },
    {
        "content": "<p>just <code>local instance decidable_prop</code></p>",
        "id": 127482941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985125
    },
    {
        "content": "<p>This is stuff for mathematicians</p>",
        "id": 127482942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985129
    },
    {
        "content": "<p>Maybe you should just do this over <code>\\R</code> instead of <code>A</code></p>",
        "id": 127483004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985213
    },
    {
        "content": "<p>or else use the noncomputable floor instance for archimedean <code>A</code></p>",
        "id": 127483006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985252
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">floor_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">floor_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 127483010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985264
    },
    {
        "content": "<p>I am a complete idiot</p>",
        "id": 127483116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985555
    },
    {
        "content": "<p>I should just be proving a junk theorem</p>",
        "id": 127483117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985555
    },
    {
        "content": "<p>I was defining decimal expansions of real numbers</p>",
        "id": 127483158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985572
    },
    {
        "content": "<p>and being fussy about issues with negative numbers</p>",
        "id": 127483159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985583
    },
    {
        "content": "<p>I should just let the function return some random result if the input is negative and then stop fussing</p>",
        "id": 127483168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985640
    },
    {
        "content": "<p>57</p>",
        "id": 127483214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527985701
    },
    {
        "content": "<p>I can't believe I'm going to prove a junk theorem</p>",
        "id": 127483216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985707
    },
    {
        "content": "<p>I feel dirty</p>",
        "id": 127483218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985710
    },
    {
        "content": "<p>This is the problem</p>",
        "id": 127483233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985786
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">expansion</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">floor</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">floor</span> <span class=\"o\">(</span><span class=\"n\">chomp</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 127483234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985786
    },
    {
        "content": "<p>I just have to drop <code>H</code></p>",
        "id": 127483237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985799
    },
    {
        "content": "<p>It's not even used</p>",
        "id": 127483279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985815
    },
    {
        "content": "<p>and coerce a negative integer into nat</p>",
        "id": 127483280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985816
    },
    {
        "content": "<p>that's not the point Mario</p>",
        "id": 127483283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985832
    },
    {
        "content": "<p>it's all part of the mathematician's promise</p>",
        "id": 127483285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985841
    },
    {
        "content": "<p>That goes in theorems, not definitions</p>",
        "id": 127483288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985852
    },
    {
        "content": "<p>we don't quite model things in the same way</p>",
        "id": 127483289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985856
    },
    {
        "content": "<p>I have never seen a mathematician write a function that has an additional proof argument</p>",
        "id": 127483298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985876
    },
    {
        "content": "<p>I think they would have a hard time even understanding what that means</p>",
        "id": 127483303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527985914
    },
    {
        "content": "<blockquote>\n<p>It's not even used</p>\n</blockquote>\n<p>it should be there on moral grounds</p>",
        "id": 127483304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985917
    },
    {
        "content": "<p>there should be some tactic bringing it along</p>",
        "id": 127483346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985957
    },
    {
        "content": "<p>\"mathematicians promise that they will not run this programme on negative numbers\"</p>",
        "id": 127483349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527985985
    },
    {
        "content": "<p>@kevin just treat it like how you treat <code>nat.sub</code></p>",
        "id": 127483354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527986004
    },
    {
        "content": "<p>You could use <code>roption</code> for partial functions too</p>",
        "id": 127483355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527986004
    },
    {
        "content": "<p>\"subtraction with a star\"</p>",
        "id": 127483356,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527986009
    },
    {
        "content": "<p>alternatively, you could actually make sense of expansions of negative numbers</p>",
        "id": 127483399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527986055
    },
    {
        "content": "<p>which of course makes perfect sense and generates p-adic numbers</p>",
        "id": 127483402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527986083
    },
    {
        "content": "<p>or two's complement for the CS folks</p>",
        "id": 127483404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527986101
    },
    {
        "content": "<blockquote>\n<p>It's not even used</p>\n</blockquote>\n<p>It's used in <code>int.to_nat</code></p>",
        "id": 127483414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527986160
    },
    {
        "content": "<p>Yet more alternatively, don't define it as a function, have an existence theorem</p>",
        "id": 127483464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527986255
    },
    {
        "content": "<p>the inverse to this is a lot easier to state</p>",
        "id": 127483466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527986263
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def expansion (r : α) (n : ℕ) : ℕ :=\n⌊r * (10 ^ n : ℕ)⌋.nat_mod 10\n</pre></div>",
        "id": 127483624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527986541
    },
    {
        "content": "<p>I'm not sure why <code>n</code> is a nat here, there are both negative and positive exponent terms in the expansion</p>",
        "id": 127483636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527986631
    },
    {
        "content": "<blockquote>\n<p>least upper bounds etc as predicates are already there: <a href=\"https://github.com/leanprover/mathlib/blob/master/order/bounds.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/order/bounds.lean\">https://github.com/leanprover/mathlib/blob/master/order/bounds.lean</a></p>\n</blockquote>\n<p>I see that I did mine a different way around to you. I defined <code>is_LUB x S</code> and you <code>is_lub S x</code>. Is there a preference for yours over mine? I chose \"x S\" because I would say x before S (\"x is a least upper bound for S\")</p>",
        "id": 127484618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527988736
    },
    {
        "content": "<p>yes, this allows you to view <code>is_lub S</code> as a predicate by currying</p>",
        "id": 127484680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527988826
    },
    {
        "content": "<p>generally speaking, more \"parameter\" like things should come first</p>",
        "id": 127484692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527988908
    },
    {
        "content": "<p>I'm far more likely to be fixing S and trying various x's than I am to be fixing an x and seeing if it bounds any S's, this seems far more unlikely to occur in practice</p>",
        "id": 127484745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527989040
    },
    {
        "content": "<p>that's why I said that</p>",
        "id": 127484944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527989434
    },
    {
        "content": "<p><code>S</code> is the parameter, <code>x</code> is the variable</p>",
        "id": 127484947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527989451
    },
    {
        "content": "<p>so <code>S</code> comes first</p>",
        "id": 127484948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527989457
    },
    {
        "content": "<blockquote>\n<p>that's why I said that</p>\n</blockquote>\n<p>I know, I was just translating you into maths</p>",
        "id": 127503868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528034172
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 127518169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066380
    },
    {
        "content": "<p>I was playing with sups</p>",
        "id": 127518175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066393
    },
    {
        "content": "<p>what do you think this is:</p>",
        "id": 127518193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066442
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨λ</span> <span class=\"n\">u</span> <span class=\"n\">Hu</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">Hs</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">Ht</span><span class=\"o\">,</span><span class=\"n\">Hu</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Hu</span> <span class=\"k\">in</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Hu</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">HSb</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"n\">Hs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HTc</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">t</span> <span class=\"n\">Ht</span><span class=\"o\">),</span>\n <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">Hd</span><span class=\"o\">,</span><span class=\"n\">add_le_of_le_sub_right</span> <span class=\"err\">$</span> <span class=\"n\">HSb</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">Hs</span><span class=\"o\">,</span><span class=\"n\">le_sub</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">s₁</span> <span class=\"n\">Hs₁</span><span class=\"o\">,</span><span class=\"n\">HTc</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">Ht</span><span class=\"o\">,</span><span class=\"n\">le_sub_left_of_add_le</span> <span class=\"err\">$</span> <span class=\"n\">Hd</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span><span class=\"n\">Hs₁</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">Ht</span><span class=\"o\">,</span><span class=\"n\">rfl</span> <span class=\"c1\">-- the proof</span>\n   <span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">Hs</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127518220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066457
    },
    {
        "content": "<p>my constructive proof?</p>",
        "id": 127518224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528066480
    },
    {
        "content": "<p>right</p>",
        "id": 127518226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066486
    },
    {
        "content": "<p>yay</p>",
        "id": 127518228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528066490
    },
    {
        "content": "<p>here's an even better version</p>",
        "id": 127518236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066509
    },
    {
        "content": "<p>I wrote it twice</p>",
        "id": 127518237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066511
    },
    {
        "content": "<p>second time looked like this</p>",
        "id": 127518238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066515
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">lub_add&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HSb</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HTc</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">T</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">+</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">u</span> <span class=\"n\">Hu</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">Hs</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">Ht</span><span class=\"o\">,</span><span class=\"n\">Hu</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Hu</span> <span class=\"k\">in</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Hu</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">HSb</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"n\">Hs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HTc</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">t</span> <span class=\"n\">Ht</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">Hd</span><span class=\"o\">,</span><span class=\"n\">add_le_of_le_sub_right</span> <span class=\"err\">$</span> <span class=\"n\">HSb</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">Hs</span><span class=\"o\">,</span><span class=\"n\">le_sub</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">HTc</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">Ht</span><span class=\"o\">,</span><span class=\"n\">le_sub_left_of_add_le</span> <span class=\"err\">$</span> <span class=\"n\">Hd</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">Hs</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">Ht</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127518240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066519
    },
    {
        "content": "<p>more dollar signs?</p>",
        "id": 127518244,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528066545
    },
    {
        "content": "<p><code>instance : has_add (set ℝ) := ⟨λ S T,{u | ∃ (s ∈ S) (t ∈ T), u = s + t}⟩</code></p>",
        "id": 127518245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066550
    },
    {
        "content": "<p><code>import order.bounds </code></p>",
        "id": 127518291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066567
    },
    {
        "content": "<p>and <code>analysis.real</code></p>",
        "id": 127518294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066576
    },
    {
        "content": "<p>and it will run</p>",
        "id": 127518295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066579
    },
    {
        "content": "<p>I couldn't get that stupid triangle thing to work on the first line of the proof</p>",
        "id": 127518298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066593
    },
    {
        "content": "<p>the \\t triangle that Patrick and I both dread</p>",
        "id": 127518300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066606
    },
    {
        "content": "<p>so I have to use rw;exact :-)</p>",
        "id": 127518302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066621
    },
    {
        "content": "<p>so that can be golfed a bit more</p>",
        "id": 127518309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066632
    },
    {
        "content": "<p>but the proof the other way I was extremely pleased with :-)</p>",
        "id": 127518311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066640
    },
    {
        "content": "<p>I formulated the theorem</p>",
        "id": 127518315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066670
    },
    {
        "content": "<p>I proved it in tactic mode</p>",
        "id": 127518316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066673
    },
    {
        "content": "<p>I then translated my tactic mode proof into term mode</p>",
        "id": 127518318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066680
    },
    {
        "content": "<p>nice!</p>",
        "id": 127518357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528066683
    },
    {
        "content": "<p>and then I started again and proved it in term mode</p>",
        "id": 127518358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066685
    },
    {
        "content": "<p>from scratch</p>",
        "id": 127518365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066700
    },
    {
        "content": "<p>looking at my old term mode proof for hints about which arithmetic functions to use :-)</p>",
        "id": 127518370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066712
    },
    {
        "content": "<p>in that last proof line, Lean was somehow always \"on the last term\" -- I never had to fill in a hole with a non-zero number of characters to the right of it (other than the close bracket)</p>",
        "id": 127518441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066878
    },
    {
        "content": "<p>Kenny if you had given me that answer I would have had a hard time marking it.</p>",
        "id": 127518446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066918
    },
    {
        "content": "<p>I mean the lambda</p>",
        "id": 127518485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066927
    },
    {
        "content": "<p>it's become unreadable, right?</p>",
        "id": 127518486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528066933
    },
    {
        "content": "<p>lol</p>",
        "id": 127518487,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528066934
    },
    {
        "content": "<p>but you can verify it</p>",
        "id": 127518488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528066939
    },
    {
        "content": "<p>that is a very different thing from understanding it</p>",
        "id": 127518498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528067030
    }
]