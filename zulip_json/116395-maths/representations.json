[
    {
        "content": "<p>What is going on here? I was playing around with representations together with <span class=\"user-mention\" data-user-id=\"220718\">@Ben McDonnell</span> <br>\nAfter importing <code>linear_algebra.basic</code> a silly lemma broke at the bottom of the quoted code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">group_action</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"c1\">-- this import breaks the commented lines at the end of the file</span>\n\n<span class=\"n\">class</span> <span class=\"n\">group_module</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_add</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">m₂</span><span class=\"o\">)</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">group_module</span><span class=\"bp\">.</span><span class=\"n\">smul_add</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">fixed_points</span>\n<span class=\"kn\">open</span> <span class=\"n\">mul_action</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">group_module</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_mem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">fixed_points</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">fixed_points</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">fixed_points</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_stabilizer_iff</span><span class=\"o\">,</span> <span class=\"n\">group_module</span><span class=\"bp\">.</span><span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">mem_fixed_points</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">fixed_points</span>\n\n<span class=\"n\">class</span> <span class=\"n\">representation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">group_module</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">representation</span>\n<span class=\"kn\">open</span> <span class=\"n\">mul_action</span> <span class=\"n\">linear_map</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">representation</span> <span class=\"n\">G</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- set_option trace.class_instances true</span>\n\n<span class=\"c1\">-- lemma smul_mem_fixed_points (r : R) (m : M) (hm : m ∈ fixed_points G M) :</span>\n<span class=\"c1\">--   r • m ∈ fixed_points G M :=</span>\n<span class=\"c1\">-- begin</span>\n<span class=\"c1\">--   simp only [mem_fixed_points] at *,</span>\n<span class=\"c1\">--   intro g,</span>\n<span class=\"c1\">--   rw [smul_comm, hm],</span>\n<span class=\"c1\">-- end</span>\n<span class=\"kn\">end</span> <span class=\"n\">representation</span>\n</pre></div>",
        "id": 165253263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557409390
    },
    {
        "content": "<p>Without the import the code runs fine. With the import it reports maximum type class error.</p>",
        "id": 165253299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557409424
    },
    {
        "content": "<p>increase depth?</p>",
        "id": 165253368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557409458
    },
    {
        "content": "<p>I couldn't figure out which type class it is even searching for. It performs a <code>has_mul</code> search and a <code>mul_action</code> search, and it finds those two instantly.</p>",
        "id": 165253374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557409464
    },
    {
        "content": "<p>Bumping the depth to <code>100</code> didn't solve it.</p>",
        "id": 165253387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557409473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Any other ideas?</p>",
        "id": 165253550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557409597
    },
    {
        "content": "<p>Modules work a lot better than half a year ago. But they are still pretty fragile, at least that's my impression...</p>",
        "id": 165253601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557409634
    },
    {
        "content": "<p>Putting some brackets in lets you see the failing search. It's for <code>has_scalar R M</code></p>",
        "id": 165257337,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557412100
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">smul_mem_fixed_points</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">fixed_points</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">fixed_points</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_fixed_points</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_comm</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 165257347,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557412107
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 165257413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412150
    },
    {
        "content": "<p>Now the question is... why does that import bork the class search</p>",
        "id": 165257425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412164
    },
    {
        "content": "<p>is <code>R</code>a discrete field?</p>",
        "id": 165257710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412352
    },
    {
        "content": "<p>the tc looks for that a lot</p>",
        "id": 165257717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412360
    },
    {
        "content": "<p>Just any ring</p>",
        "id": 165257719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412361
    },
    {
        "content": "<p>not exactly sure why... I mean it's directly looking for it</p>",
        "id": 165257749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412384
    },
    {
        "content": "<p>There is a <code>module R M</code> staring it in the face</p>",
        "id": 165257791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412408
    },
    {
        "content": "<p>Shouldn't be too hard to get a <code>has_scalar R M</code> from that.</p>",
        "id": 165257811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412425
    },
    {
        "content": "<p>that's not all it's searching for</p>",
        "id": 165257821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412437
    },
    {
        "content": "<p>it looks for <code>has_scalar R M</code> a bunch, <code>discrete_field R</code> a bunch more, and also <code>discrete_field (M →ₗ[R] M)</code></p>",
        "id": 165257985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412532
    },
    {
        "content": "<p>That last one is obviously stupid...</p>",
        "id": 165258010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412552
    },
    {
        "content": "<p>You misunderstand. This is not a garden path it's looking for, it's the initial problem</p>",
        "id": 165258080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412586
    },
    {
        "content": "<p>Hmmm... so how do we fix this?</p>",
        "id": 165258205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412675
    },
    {
        "content": "<p>Are we just hitting limitations of tc search?</p>",
        "id": 165258256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412684
    },
    {
        "content": "<p>no, this is worse</p>",
        "id": 165258274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412692
    },
    {
        "content": "<p>Wow, ok. I still don't understand the problem</p>",
        "id": 165258293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412710
    },
    {
        "content": "<p>it's searching for things that don't make any sense</p>",
        "id": 165258297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412710
    },
    {
        "content": "<p>it needs <code>has_scalar</code> so that's all it should be looking for</p>",
        "id": 165258323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412732
    },
    {
        "content": "<p>I don't know why these discrete_field problems are coming up</p>",
        "id": 165258349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412749
    },
    {
        "content": "<p>oh! I started deleting your definitions beforehand and <code>representation</code> causes the problem</p>",
        "id": 165258517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412865
    },
    {
        "content": "<p>of course, <code>representation</code> is a bad class</p>",
        "id": 165258561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412908
    },
    {
        "content": "<p>Huh, what's wrong with it?</p>",
        "id": 165258604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">representation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">group_module</span> <span class=\"n\">G</span> <span class=\"n\">M</span>\n</pre></div>\n\n\n<p>This creates an instance <code>group_module G M &lt;= representation G ?R M</code> and lean gets lost at <code>ring ?R</code></p>",
        "id": 165258688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557412979
    },
    {
        "content": "<p>you shouldn't extend something with fewer explicit type parameters</p>",
        "id": 165258752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557413023
    },
    {
        "content": "<p>Oh boy... that's really bad.</p>",
        "id": 165258769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413040
    },
    {
        "content": "<p>it's pretty easy to fix:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">representation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group_module</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 165258918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557413111
    },
    {
        "content": "<p>You know what this means, though</p>",
        "id": 165258951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413160
    },
    {
        "content": "<p>When a mathematician says: Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> be a finite group, and let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span> be a representation over a field <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span></span></span></span>.</p>",
        "id": 165259033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413202
    },
    {
        "content": "<p>That all fits nicely on one line.</p>",
        "id": 165259041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413209
    },
    {
        "content": "<p>To turn that line into Lean, we all of a sudden need 25 type class assumptions. And only 3 or 4 of them are actually interesting.</p>",
        "id": 165259084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413240
    },
    {
        "content": "<p>Can we have <code>extends'</code>?</p>",
        "id": 165259128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413279
    },
    {
        "content": "<p>If you need the totality of representations, then you should bundle M, or R or something</p>",
        "id": 165259130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557413280
    },
    {
        "content": "<p>Sure, but I don't want that category, yet.</p>",
        "id": 165259183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413294
    },
    {
        "content": "<p>well, with the parameters pulled out <code>representation</code> is a prop</p>",
        "id": 165259219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557413334
    },
    {
        "content": "<p>it's not quite saying the same thing as your one line</p>",
        "id": 165259226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557413343
    },
    {
        "content": "<p>I want <code>extends'</code> that signals to Lean: \"Hey, if someone writes <code>variable [representation G R M]</code>, please add <code>[add_comm_group M] [module R M] [group_module G M]</code> yourself.\"</p>",
        "id": 165259243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413350
    },
    {
        "content": "<p>you need <code>lean'</code> for <code>extends'</code></p>",
        "id": 165259250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557413354
    },
    {
        "content": "<p>sebastian proposed that back in the stone age, I don't know what happened to that proposal</p>",
        "id": 165259278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557413381
    },
    {
        "content": "<p>Hmmz... I'm really not so happy with stacking all these assumptions on top of each other.</p>",
        "id": 165260009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you see another solution, except for bundling?</p>",
        "id": 165260121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413866
    },
    {
        "content": "<p>the problem is that if you describe your structure as data shared between objects then you potentially need one for every subset of objects in the context</p>",
        "id": 165260122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557413867
    },
    {
        "content": "<p>make fewer classes?</p>",
        "id": 165260325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557413966
    },
    {
        "content": "<p><code>group_module</code> is not just some random definition. They are pretty useful gadgets in their own right.</p>",
        "id": 165260326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557413967
    },
    {
        "content": "<p>okay but do you care about them right now?</p>",
        "id": 165260440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557414014
    },
    {
        "content": "<p>Not exactly right now</p>",
        "id": 165260480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414054
    },
    {
        "content": "<p>But I somehow thought that refactoring it in later only made things harder</p>",
        "id": 165260514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414074
    },
    {
        "content": "<p>on the contrary, I think it's best to refactor when you know what you want</p>",
        "id": 165260540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557414097
    },
    {
        "content": "<p>Well, I do know that I want every representation to also be a G-module</p>",
        "id": 165260633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414134
    },
    {
        "content": "<p>Kevin has a student who is working on G-modules.</p>",
        "id": 165260735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414201
    },
    {
        "content": "<p>Ben wants to work on representation theory</p>",
        "id": 165260758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414217
    },
    {
        "content": "<p>It would be nice if their work was somewhat compatible at the end of the day...</p>",
        "id": 165260778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414231
    },
    {
        "content": "<p>I assure you that having written down the definition <code>group_module</code> is nowhere near enough to ensure everyone's work is compatible at the end of the day</p>",
        "id": 165260943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557414319
    },
    {
        "content": "<p>Ooh, I believe that.</p>",
        "id": 165260968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414346
    },
    {
        "content": "<p>I was just surprised that having written down two def's and two lemmas already brought the system to its knees</p>",
        "id": 165261040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414369
    },
    {
        "content": "<p>I now understand the error</p>",
        "id": 165261051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414374
    },
    {
        "content": "<p>I don't yet see a nice solution.</p>",
        "id": 165261055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557414381
    },
    {
        "content": "<p>the too many classes thing is a slow problem that won't get in your way in the immediate future, so I suggest you go with it for now</p>",
        "id": 165261097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557414419
    },
    {
        "content": "<blockquote>\n<p>you shouldn't extend something with fewer explicit type parameters</p>\n</blockquote>\n<p>What about the existing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">normed_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">normed_group</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">vector_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">has_norm</span><span class=\"bp\">.</span><span class=\"n\">norm</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">norm</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>which seems to work pretty well?</p>",
        "id": 165455649,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557651240
    },
    {
        "content": "<p>I am pretty sure you can also use that to cook up a bad typeclass search</p>",
        "id": 165457091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557653768
    },
    {
        "content": "<p>it's possible we just haven't run across it by accident yet</p>",
        "id": 165457094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557653800
    },
    {
        "content": "<p>Here's a bad typeclass search example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"n\">def</span> <span class=\"n\">normify</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">normed_field</span> <span class=\"o\">(</span><span class=\"n\">normify</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">-</span><span class=\"n\">a</span>\n</pre></div>\n\n\n<p>The reason we haven't come across this yet is because <code>normed_field</code> is pretty high in the hierarchy so there aren't many ways to get lower down yet. Here I've made up a perfectly normal instance for some made up <code>normify</code> operator that, in conjunction with <code>normed_space</code>, causes a loop that causes basically every typeclass search to overflow (like <code>has_neg A</code> here)</p>",
        "id": 165457391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557654394
    },
    {
        "content": "<p>Mario, do you see a way to modify how type class search works that would solve this issue? Or is it the concept of type class itself that is irremediably broken and we should switch everything to unification hints?</p>",
        "id": 165457852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557655241
    },
    {
        "content": "<p>not typeclass search per se, but \"prolog-like\" needs some tweaking to make it not quite so stupid in some cases, i.e. loop detection and some forward inference</p>",
        "id": 165457913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655328
    },
    {
        "content": "<p>Is this something you could play with in the fork?</p>",
        "id": 165457929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557655411
    },
    {
        "content": "<p>It's such a fundamental part of Lean that, to me, it looks much more important to fix than VM override or FFI or pretty much anything else</p>",
        "id": 165457979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557655464
    },
    {
        "content": "<p>possibly... It's a really hard problem in general though, and lots and lots of words have been spent on it, months of peoples' work can gone into proposals and alterations and no one has found that silver bullet yet</p>",
        "id": 165457982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655491
    },
    {
        "content": "<p>But prolog itself isn't so dumb, right? Why can't we look at what they do there?</p>",
        "id": 165458002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557655537
    },
    {
        "content": "<blockquote>\n<p>It's such a fundamental part of Lean that, to me, it looks much more important to fix</p>\n</blockquote>\n<p>the problem with fixing fundamental things is that everything else has to adapt</p>",
        "id": 165458003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655560
    },
    {
        "content": "<p>there is a high cost of switching and only a vague promise of something better on the other end</p>",
        "id": 165458055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655593
    },
    {
        "content": "<p>also it looks like this is not something that is currently worked on in the Lean 4 repository, so maybe there is hope to contribute some battle tested idea in this direction. Whereas things related to programming are clearly worked on by Leo and Sebastian, so everything done in the fork will be erased</p>",
        "id": 165458072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557655643
    },
    {
        "content": "<p>Prolog gives more mechanisms for being able to control how the search goes. For example you can say \"no backtracking past this point\"</p>",
        "id": 165458074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655649
    },
    {
        "content": "<p>typeclasses are essential to lean. If you think you can sneak a change to it past leo I think you are mistaken</p>",
        "id": 165458123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655695
    },
    {
        "content": "<p>Who said \"sneak\"? Of course you don't want to sneak anything</p>",
        "id": 165458124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557655721
    },
    {
        "content": "<p>Meaning, you have to be working in conjunction with leo on the stuff</p>",
        "id": 165458136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655746
    },
    {
        "content": "<p>I wrote \"contribute a battle tested idea\"</p>",
        "id": 165458137,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557655747
    },
    {
        "content": "<p>so unless he's interested in such a collaboration there's no chance of it happening in lean 4</p>",
        "id": 165458142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655783
    },
    {
        "content": "<p>or if he does something himself</p>",
        "id": 165458145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655794
    },
    {
        "content": "<p>also, nothing in the fork will be erased. I'm not sure exactly what will happen, but there is no way I am going to accept a regression like that</p>",
        "id": 165458249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557655961
    },
    {
        "content": "<p>\"replaced with something better\" is okay, \"deleted with no alternatives\" is not</p>",
        "id": 165458265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557656010
    },
    {
        "content": "<p>Sure, you'll be able to continue using the fork if you want. But I guess most users will switch to Lean 4. And when I write \"erased\", I mean from the point of view of users. Nothing will be erased in the sense that the repository will still be there.</p>",
        "id": 165458318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557656073
    },
    {
        "content": "<p>Leo doesn't have to care about that fork, he won't have to \"delete\" anything, he can simply and rightfully ignore it</p>",
        "id": 165458347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557656119
    },
    {
        "content": "<p>we still have to deal with integrating lean 4 and mathlib. That's not an easy task, and by the end of it we will probably know what the answer to this is</p>",
        "id": 165458403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557656172
    },
    {
        "content": "<p>Lean 4 promises to put a lot more into lean code that we can modify. If all the stuff in the fork is now in lean, then the contents of it can simply move to mathlib</p>",
        "id": 165458580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557656405
    },
    {
        "content": "<p>I guess type class inference will stay C++ forever, it's a performance critical mission</p>",
        "id": 165458664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557656579
    },
    {
        "content": "<p>possibly</p>",
        "id": 165458675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557656602
    },
    {
        "content": "<p>lean is compiled now, maybe it can be made to work</p>",
        "id": 165458678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557656615
    },
    {
        "content": "<p>I don't know if Lean 4 will ever be \"open for business\" as in accepting issues or PRs. It's really hard to tell if that was just a phase of lean 3 during the transition, or if that's the new normal</p>",
        "id": 165458726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557656648
    },
    {
        "content": "<p>but I think the fork has a reason to exist at least until that day</p>",
        "id": 165458730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557656680
    },
    {
        "content": "<p>Leo told me</p>\n<blockquote>\n<p>Sebastian and I have a few ideas on how to improve the typeclass inference procedure, but we didn't get there yet. We are currently working on the new compiler, parser and expander. </p>\n</blockquote>\n<p>From what Mario says, the whole thing sounds extremely delicate.</p>",
        "id": 165462286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557663008
    }
]