[
    {
        "content": "<p>How do we want to set up 2-categories in mathlib?<br>\nSome time ago I wrote down:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">two_category</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_hom.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">hom_cats</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">),</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CAT</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">CAT</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">bundled.α</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">str</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">CAT.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">C.str</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">two_category</span> <span class=\"n\">CAT</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">⥤</span> <span class=\"n\">Y</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>\n<p>(which should probably be named <code>two_category_struct</code>) - I think the other obvious option gives a bunch of <code>eq_to_hom</code>s when you start writing the details, but I could be wrong</p>",
        "id": 231851198,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616696342
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 231851223,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616696350
    },
    {
        "content": "<p>Aren't 2-categories super-duper scary to work with in a formal theorem prover?</p>",
        "id": 231851438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616696430
    },
    {
        "content": "<p>We also have the option of going straight for enriched categories and deducing 2-categories from there, but I think that's even harder</p>",
        "id": 231851477,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616696452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Two-categories/near/231851438\">said</a>:</p>\n<blockquote>\n<p>Aren't 2-categories super-duper scary to work with in a formal theorem prover?</p>\n</blockquote>\n<p>Possibly :) But there are a few places across mathlib category theory where they'd be nice to have, so I think it's worth experimenting if we can get a usable API</p>",
        "id": 231851561,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616696485
    },
    {
        "content": "<p>Related but unrelated: I think we can also define quasicategories (= <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\infty,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>-cats) now that we have simplicial sets.</p>",
        "id": 231851840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616696597
    },
    {
        "content": "<p>But here it might be good to take a step back, and take very close look at what Riehl--Verity are doing</p>",
        "id": 231851918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616696631
    },
    {
        "content": "<p>For 2-cats you have multiple versions, right. Strict or not</p>",
        "id": 231852014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616696660
    },
    {
        "content": "<p>Yeah - I was thinking of going for strict 2-categories because the cases I can think of where it's nice to use this language in mathlib involve strict 2-(co)limits</p>",
        "id": 231852429,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616696839
    },
    {
        "content": "<p>As far as I am concerned, the place where this would be immediately helpful is in the case where we have a pseudofunctor taking values in the 2-category of categories, and we apply some (co)limits on the target of such a pseudofunctor</p>",
        "id": 231854571,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616697619
    },
    {
        "content": "<p>I don't know if this is a silly suggestion, but we could \"define\" 2-categories as categories enriched over Cat?</p>",
        "id": 231854640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616697644
    },
    {
        "content": "<p>Does mathlib have the monoidal structure on Cat?</p>",
        "id": 231854693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616697671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/2-categories/near/231854640\">said</a>:</p>\n<blockquote>\n<p>I don't know if this is a silly suggestion, but we could \"define\" 2-categories as categories enriched over Cat?</p>\n</blockquote>\n<p>I think this is a good suggestion but from what I hear from Scott, enriched categories are hard to get right anyway, so I suspected it would be easier to go straight for this special case</p>",
        "id": 231855276,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616697904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/2-categories/near/231852429\">said</a>:</p>\n<blockquote>\n<p>Yeah - I was thinking of going for strict 2-categories because the cases I can think of where it's nice to use this language in mathlib involve strict 2-(co)limits</p>\n</blockquote>\n<p>I think I was completely wrong here actually - the cases in mathlib are weak 2-(co)limits, for instance <a href=\"https://github.com/leanprover-community/mathlib/pull/6845/files/af09c336e93a29fcd637bef0a65f1ed650016439#r601697612\">this discussion</a> which is about a 2-initial object?</p>",
        "id": 231855862,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616698144
    },
    {
        "content": "<p>Alright, I had a go at weak 2-categories (ie bicategories) together with pseudofunctors and it went surprisingly well? <a href=\"https://github.com/leanprover-community/mathlib/blob/two-cat/src/category_theory/category/2-category.lean\">https://github.com/leanprover-community/mathlib/blob/two-cat/src/category_theory/category/2-category.lean</a></p>",
        "id": 231872604,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616704822
    },
    {
        "content": "<p>I think the next main test of this would be to figure out the right simp lemmas and define the <a href=\"https://ncatlab.org/nlab/show/pseudofunctor#composition_of_pseudofunctors\">composition of pseudofunctors</a>, with the hope that <code>tidy</code> takes care of some of the annoying details</p>",
        "id": 231872733,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616704887
    },
    {
        "content": "<p>It may take a few days before I get to this discussion properly, sorry. I don't think strict 2-categories are going to be helpful, because no examples exist. Even the ones we think exist in normal maths will actually be infected with <code>eq.rec</code> when formalised, and will work better as weak 2-categories.</p>",
        "id": 231876800,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616706728
    },
    {
        "content": "<p>Just from a philosophical point of view, I'm fairly prejudiced against thinking of 2-categories as categories enriched in categories, but don't have the time to articulate why right now.</p>",
        "id": 231877058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616706848
    },
    {
        "content": "<p>I had been thinking much more in terms of copying and pasting the definition of monoidal category and adding in 0-objects. :-)</p>",
        "id": 231877173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616706870
    },
    {
        "content": "<p>In particular, I'm tempted to parametrise by 0-morphisms and 1-morphisms, and bundle 2-morphisms.</p>",
        "id": 231877264,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616706895
    },
    {
        "content": "<p>Regardless of what happens, can we introduce this notation ASAP?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">η</span> <span class=\"bp\">`</span> <span class=\"bp\">▶</span> <span class=\"bp\">`</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">two_category_struct.right_whisker</span> <span class=\"n\">f</span> <span class=\"n\">η</span>\n<span class=\"kd\">notation</span> <span class=\"n\">η</span> <span class=\"bp\">`</span> <span class=\"bp\">◄</span> <span class=\"bp\">`</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">two_category_struct.left_whisker</span> <span class=\"n\">η</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`λ</span><span class=\"n\">_</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">two_category_struct.left_unitor</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ρ_</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">two_category_struct.right_unitor</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">α_</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">two_category_struct.associator</span>\n</code></pre></div>",
        "id": 231879507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616707930
    },
    {
        "content": "<p>(for functors I mean)</p>",
        "id": 231879567,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616707964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/2-categories/near/231876800\">said</a>:</p>\n<blockquote>\n<p>It may take a few days before I get to this discussion properly, sorry. I don't think strict 2-categories are going to be helpful, because no examples exist. Even the ones we think exist in normal maths will actually be infected with <code>eq.rec</code> when formalised, and will work better as weak 2-categories.</p>\n</blockquote>\n<p>Yup, I completely agree with this, I think weak 2-categories are absolutely the way to go</p>",
        "id": 231879857,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616708061
    },
    {
        "content": "<p>I'd be perfectly happy adding that notation immediately (presumebly without even mentioning <code>two_category_struct</code>, until we decide what that is) for functors.</p>",
        "id": 231881450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616708831
    },
    {
        "content": "<p>Likewise, though I wonder if we can come up with nicer symbols for the whiskerings</p>",
        "id": 231882976,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616709612
    },
    {
        "content": "<p>I just realised I didn't even use the correct triangle opposites :|</p>",
        "id": 231883112,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616709668
    }
]