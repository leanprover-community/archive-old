[
    {
        "content": "<p>Hello, it would be possible to have some basic tautology by examples? I found extremely hard to reconciliate, my knowledge about rules of inference into actual code. Thanks</p>",
        "id": 164289401,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556305724
    },
    {
        "content": "<p>Did you look at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a> and <a href=\"https://leanprover.github.io/logic_and_proof/\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/\">https://leanprover.github.io/logic_and_proof/</a>?</p>",
        "id": 164289529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556305841
    },
    {
        "content": "<p>Thanks for replying to me so quickly. Yes, I have taken a look and I have currently open, but, I found it extremely hard to reconcile how to do it with what I know anyway. It is far from anything I ever programmed with. A simple, modus pones p and (p-&gt;q)-&gt;q, seems so complex. (that's a bit my feedback as not used to this kind of proof technologies.)</p>",
        "id": 164289856,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556306128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219700\">@mindwarelab</span> I don't understand exactly what kind of examples you are looking for. Also, experience has showed this community that it depends very much on your background how we should help you. Are you a mathematician or a computer scientist?</p>",
        "id": 164290042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306257
    },
    {
        "content": "<p>Do you want:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tautology</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 164290117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306292
    },
    {
        "content": "<p>I am a Bsc. computer science, so my approach is more C style approach to the problems, but I understand this is more a  mathematician tool. </p>\n<p>I am trying to write the rule of inference of modus pones as I do on paper, so extract the premises and then arrive at a conclusion.</p>",
        "id": 164290375,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556306496
    },
    {
        "content": "<p>Just post some code, we'll give feedback</p>",
        "id": 164290467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306558
    },
    {
        "content": "<p>Are these examples <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html</a> of any use?</p>",
        "id": 164290482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556306574
    },
    {
        "content": "<p>Weren't those written by a mathematician, for mathematicians? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 164290511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306610
    },
    {
        "content": "<p>Right. And Theorem Proving In Lean was written by computer scientists for computer scientists.</p>",
        "id": 164290524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556306639
    },
    {
        "content": "<p>So somehow those are the two options available.</p>",
        "id": 164290571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556306647
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 164290581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306661
    },
    {
        "content": "<blockquote>\n<p>Just post some code, we'll give feedback</p>\n</blockquote>\n<p>theorem prop_1 : A ∧ (A → B) → B := sorry<br>\nin pseudo code i would write premise1 = A, premise2 = A-&gt;B, conclusion = B I am struggluing to chope down some actual LEAN code.</p>",
        "id": 164290590,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556306685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219700\">@mindwarelab</span> have you had a course on functional programming (Haskell and such)?</p>",
        "id": 164290598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219700\">@mindwarelab</span> Use</p>\n<div class=\"codehilite\"><pre><span></span>```lean\ncode goes here\n```\n</pre></div>",
        "id": 164290624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306712
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"219700\">mindwarelab</span> have you had a course on functional programming (Haskell and such)?</p>\n</blockquote>\n<p>No, I have never approach any of them, I will have a classe the next year. I honestly know nothing about.</p>",
        "id": 164290640,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556306736
    },
    {
        "content": "<p>Did you actually try to read anything from the links I posted?</p>",
        "id": 164290658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556306758
    },
    {
        "content": "<blockquote>\n<p>Right. And Theorem Proving In Lean was written by computer scientists for computer scientists.</p>\n</blockquote>\n<p>Thanks, I will take a look rn :)</p>",
        "id": 164290719,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556306780
    },
    {
        "content": "<p>Because the questions you ask is more than covered there</p>",
        "id": 164290720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556306781
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">prop_1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 164290729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306793
    },
    {
        "content": "<p>I didn't test that code</p>",
        "id": 164290743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556306810
    },
    {
        "content": "<p>It's pretty safe...</p>",
        "id": 164290761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556306826
    },
    {
        "content": "<blockquote>\n<p>Because the questions you ask is more than covered there</p>\n</blockquote>\n<p>I know it's there, but I find extremely hard to extrapolate it from the documentation itself. I am kind of used to other type of documentation and for me it's very challenging. But again I really have to do it, so yeas I will read it over and over.</p>",
        "id": 164290796,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556306869
    },
    {
        "content": "<p>Imperial college <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\" target=\"_blank\" title=\"https://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\">https://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html</a> is pretty good! Thanks!</p>",
        "id": 164290891,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556306938
    },
    {
        "content": "<p>you are doing the wrong degree ;-)</p>",
        "id": 164291033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556307038
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">prop_1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p>Thanks a lot, I will try it. <br>\nI need to go to do the exercises, but thanks for the suggestions!</p>",
        "id": 164291047,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556307055
    },
    {
        "content": "<blockquote>\n<p>you are doing the wrong degree ;-)</p>\n</blockquote>\n<p>Ahaha well ... this is for another conversation :D</p>",
        "id": 164291139,
        "sender_full_name": "mindwarelab",
        "timestamp": 1556307124
    },
    {
        "content": "<p>Here are some other versions that also work.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">taut_a</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span><span class=\"n\">hab</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">hab</span> <span class=\"n\">ha</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">taut_b</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span><span class=\"n\">hab</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hab</span> <span class=\"n\">ha</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">taut_c</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span><span class=\"n\">hab</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hab</span> <span class=\"n\">ha</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">taut_d</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>",
        "id": 164447457,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1556541088
    }
]