[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/chebpoly\">branch#chebpoly</a> is a little experiment that I did for fun. And it turned out to be a lot of fun!<br>\nIt's 350 lines of code where I mix polynomials, trigonometric functions and zmod p.</p>\n<p>Everything fit pretty smoothly together, but it will need some cleaning up before it can be PR'd. In particular, it would benefit from having <a href=\"https://github.com/leanprover-community/mathlib/issues/4241\">#4241</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/4197\">#4197</a> merged.</p>\n<p>The end result is that we get a family of polynomials over Z, that commute with each other, and such that the <code>p</code>-th polynomial is congruent to <code>X ^ p</code> modulo <code>p</code>.</p>",
        "id": 211231463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601023017
    },
    {
        "content": "<p>Such a family is a Lambda structure, and there are only two such structures on <code>polynomial int</code>.</p>",
        "id": 211231491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601023041
    },
    {
        "content": "<p>On the topic of Chebyshev polynomials, I wanted to ask about the design</p>",
        "id": 291630948,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659386555
    },
    {
        "content": "<p>Chebyshev polynomials have the property that <code>2*T(x/2)</code> and <code>U(x/2)</code> are monic and have integer coefficients (save for <code>2*T₀(x/2) = 2</code>), and I need to use this first fact to prove Niven's theorem</p>",
        "id": 291631022,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659386600
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 291631069,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659386641
    },
    {
        "content": "<p>There are recursive formulas for these half-Chebyshev polynomials, which means they can be defined independently of the others</p>",
        "id": 291631489,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659386818
    },
    {
        "content": "<p>So, it seems kind of tempting to redefine, at the very least, U in terms of the half-version</p>",
        "id": 291631672,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659386900
    },
    {
        "content": "<p>Most likely this is a bad idea, since I imagine the recursive characterization of these polynomials is easier to work with, but I still wanted to bring up that idea</p>",
        "id": 291632041,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659387113
    },
    {
        "content": "<p>The most conservative and probably best approach would be to define <code>T_half</code> and <code>U_half</code> via their own recursive definitions, and prove the equivalences</p>",
        "id": 291634544,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659388466
    },
    {
        "content": "<p>Did you see that there are also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.dickson\">docs#polynomial.dickson</a>, which might be (related to) what you want?</p>",
        "id": 291669746,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1659421375
    },
    {
        "content": "<p>Oh nice! I didn't know about these. <code>dickson 1 1</code> is exactly what I want.</p>",
        "id": 291693685,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659438346
    },
    {
        "content": "<p>Related question, is <code>C 2 * X</code> really the simp-normal form? I expected <code>monomial 1 2</code>.</p>",
        "id": 291693855,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659438446
    },
    {
        "content": "<p>I would expect <code>2 * X</code>, that's surely the mathematician-normal form</p>",
        "id": 291696925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659440494
    },
    {
        "content": "<p>I would of thought that <code>2 * X</code> was the most <code>ring</code>-friendly form, for example. Perhaps it depends a lot on what you're doing?</p>",
        "id": 291697038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659440554
    },
    {
        "content": "<p>A lot of lemmas about polynomials benefit from maintaining a distinction between the stuff that comes from the ground ring and the stuff that is inherently a polynomial.  Using <code>C</code> helps maintaining such a distinction.  For a fun exercise, try filling in the two sorries</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"mi\">200</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">200</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and see which one is easier!</p>",
        "id": 291699367,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659442136
    },
    {
        "content": "<p>Isn't <code>nat_degree n = 0</code> for any integer <code>n</code>? Surely that's already proven</p>",
        "id": 291700447,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659442794
    },
    {
        "content": "<p>Does 2 really come from the ground ring though? My gut feeling is that it comes from the fundamental nat action on an additive abelian group, which is embedded in mathlib way before polynomials appear. Which is easier to prove, <code>2 * X = X + X</code> or <code>(C 2) * X = X + X</code>? <code>ring</code> will nail the former, and perhaps <code>abel</code> too.</p>",
        "id": 291700502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659442803
    },
    {
        "content": "<p>Sure, <code>2</code> comes from <code>bit0/1</code> and this also causes further issues.  I was addressing the reason why <code>C</code> appears, not specifically with numerals.</p>",
        "id": 291700653,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659442881
    },
    {
        "content": "<p>My guess is that this is a situation where the question of you want the normal form to be depends on what you're doing, so there's no \"best\" answer to what the simp normal form should be. If you're proving stuff about all polynomials by induction then  <code>monomial</code> is going to show up, for example</p>",
        "id": 291700755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659442928
    },
    {
        "content": "<p>Indeed, you can prove the nat_degree (numeral) by repeated application of bit0 and bit1 and going forwards, but there is no type of numerals, as far as I know.  Whereas, assuming that something has the shape <code>C _</code> is much easier to deal with.</p>",
        "id": 291700791,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659442946
    },
    {
        "content": "<p>For this particular question ;-)</p>",
        "id": 291700947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659443041
    },
    {
        "content": "<p>Also, <code>200 : R[X]</code> is not the same as <code>((200 : ℕ) : R[X])</code>.</p>",
        "id": 291700995,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659443046
    },
    {
        "content": "<p>The plan is for them to be, though.</p>",
        "id": 291701032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659443065
    },
    {
        "content": "<p>This is the plan, yes, and I think that Anne is working on this.  I am also told that Lean4 will no longer have <code>bit0/1</code>, so this is also a transient issue.</p>",
        "id": 291701085,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659443098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/chebyshev.20polynomials/near/291700947\">said</a>:</p>\n<blockquote>\n<p>For this particular question ;-)</p>\n</blockquote>\n<p>Agreed, although a lot of the API revolves around having lemmas for <code>C</code> whereas lemmas about \"a term arising from repeated application of <code>bit0/1</code> starting from <code>0, 1</code>\" are... rare!</p>",
        "id": 291701246,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659443175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/chebyshev.20polynomials/near/291700447\">said</a>:</p>\n<blockquote>\n<p>Isn't <code>nat_degree n = 0</code> for any integer <code>n</code>? Surely that's already proven</p>\n</blockquote>\n<p>Actually, the lemma with the coercion from <code>nat</code> to <code>R[X]</code> is in the library (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_nat_cast\">docs#polynomial.nat_degree_nat_cast</a>).  This lemma, however, needs to be forced through to prove the given example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"mi\">200</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">nat_degree_nat_cast</span> <span class=\"mi\">200</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_bit0</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_bit1</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You can see that <code>simp</code> goes via <code>bit0/1</code>.</p>",
        "id": 291701782,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659443460
    },
    {
        "content": "<p>For the record, this works, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">200</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat_degree_C</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 291701851,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659443504
    },
    {
        "content": "<p>Ultimately, the issue is that it is hard to quantify over all possible ways in which <code>nat, int, R,...</code> fit inside <code>R[X]</code> and <code>C</code> conveniently deals with a lot of cases.</p>",
        "id": 291702153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659443666
    },
    {
        "content": "<p>For the record, the simp-normal form does remove the <code>C</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">200</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span>  <span class=\"c1\">--  ⊢ (200 * X).nat_degree = 0</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 291702546,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659443889
    },
    {
        "content": "<p>Surely <code>simp only [nat.cast_bit0, nat.cast_bit1, nat.cast_one]</code> is just <code>norm_num</code>?</p>",
        "id": 291702567,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659443902
    },
    {
        "content": "<p>Even more: it is <code>simp</code>.</p>",
        "id": 291702597,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659443919
    },
    {
        "content": "<p>Surely <code>norm_num</code> is faster here. <code>simp</code> is a kitchen sink tactic.</p>",
        "id": 291702654,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659443947
    },
    {
        "content": "<p>With 200 it is hard to notice a difference, here <code>simp</code> takes about a second, while <code>norm_num</code> is essentially instantaneous:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2000000</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2000000</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2000000</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2000000</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291703030,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659444132
    },
    {
        "content": "<p>look at the <code>show_term</code> for 200 on both</p>",
        "id": 291703094,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659444174
    },
    {
        "content": "<p>the difference comes down to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_bit0\">docs#nat.cast_bit0</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_num.nat_cast_bit0\">docs#norm_num.nat_cast_bit0</a>, the first one needs <code>rw</code>s but the second one can literally just be basically an <code>apply</code> chain</p>",
        "id": 291703253,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659444266
    },
    {
        "content": "<p>Are <code>bit0</code> and <code>bit1</code> ever used for <em>anything</em> other than numerals?</p>",
        "id": 291703871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659444593
    },
    {
        "content": "<p>My point stands, though: with <code>C</code> you can often get away with not needing either <code>simp</code> or <code>norm_num</code>.</p>",
        "id": 291703945,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659444614
    },
    {
        "content": "<p>Technically, <code>bit0</code> only needs an addition and <code>bit1</code> also a one.  Once these are in place, you have \"numerals\".  I do not know of any \"exotic\" situations where you use <code>bit0/1</code> in a context where \"seeing numbers\" would seem strange.</p>",
        "id": 291704287,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659444771
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.fractional_ideal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span> <span class=\"n\">non_zero_divisors</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fractional_ideal</span> <span class=\"o\">(</span><span class=\"n\">R⁰</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n</code></pre></div>",
        "id": 291705826,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659445538
    },
    {
        "content": "<p>(note that <code>bit0</code> is <code>id</code> and <code>bit1 1 = 1</code>)</p>",
        "id": 291706805,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659446050
    },
    {
        "content": "<p>That's the same for submodules, right?</p>",
        "id": 291713820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659449029
    },
    {
        "content": "<p>So what factional ideal is that??</p>",
        "id": 291742847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659462105
    },
    {
        "content": "<p>The identity I guess?</p>",
        "id": 291742915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659462126
    },
    {
        "content": "<p>all of them are 1 yeah</p>",
        "id": 291748065,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659464443
    },
    {
        "content": "<p>What will Lean4 use instead of the bits?</p>",
        "id": 291804152,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659506325
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat#doc\">docs4#OfNat</a> or similar</p>",
        "id": 291809758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659511320
    },
    {
        "content": "<p>I've used bit0 and bit1 for things before that weren't numerals.</p>",
        "id": 291816991,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659515838
    }
]