[
    {
        "content": "<p>Have I formalised this right and is it in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">dist</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 134666418,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1537961520
    },
    {
        "content": "<p>looks good to me, and I don't think we have it in mathlib yet</p>",
        "id": 134666547,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537961643
    },
    {
        "content": "<p>sorry, just found it <code>uniform_continuous_of_metric </code></p>",
        "id": 134666569,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537961668
    },
    {
        "content": "<p>Thanks Johannes!</p>",
        "id": 134666760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537961880
    },
    {
        "content": "<p>Rohan, note that <code>∀ ε, ε &gt; 0</code> can be written <code>∀ ε &gt; 0</code> like you would do on paper</p>",
        "id": 134668357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537963522
    },
    {
        "content": "<p>Lean will parse that exactly as you originally wrote</p>",
        "id": 134668427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537963572
    },
    {
        "content": "<p>Thanks everyone!</p>",
        "id": 134668976,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1537964094
    },
    {
        "content": "<blockquote>\n<p>Lean will parse that exactly as you originally wrote</p>\n</blockquote>\n<p>well not exactly...</p>",
        "id": 134673009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537967851
    }
]