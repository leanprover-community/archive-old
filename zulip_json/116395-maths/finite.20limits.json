[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, I came across <a href=\"https://github.com/b-mehta/topos/issues/22\">https://github.com/b-mehta/topos/issues/22</a>. How do you understand the statement \"C has finite products\", in the absence of choice? Do you understand section A.1.2 of the Elephant?</p>",
        "id": 198507496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590191625
    },
    {
        "content": "<p>If I recall correctly the Elephant doesn't talk about this in much detail - I'm happy with the definition of finite limits that's currently in mathlib</p>",
        "id": 198507599,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590191745
    },
    {
        "content": "<p>I also take back my first comment there - not really sure what I had in mind</p>",
        "id": 198507656,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590191783
    },
    {
        "content": "<p>Also the issues and readme there are getting quite out of date, if there's something in particular you're looking for do let me know!</p>",
        "id": 198507689,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590191843
    },
    {
        "content": "<p>At the moment, I'm just looking through the library to see what's in it and I saw this issue referenced from the code.</p>",
        "id": 198507698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590191872
    },
    {
        "content": "<p>The most recent stuff is in <code>sheaf-new</code> right now, I'm trying to refactor because I've got some pretty terribly written and organised code at the moment (and make PRs to mathlib)</p>",
        "id": 198507769,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590191941
    },
    {
        "content": "<p>I now agree with the opinion that binary products + terminal =&gt; finite products probably requires finite choice</p>",
        "id": 198507852,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590192018
    },
    {
        "content": "<p>Also I realised today that in lean <code>unique_choice {α : Sort u} [subsingleton α] : nonempty α → α</code> is equivalent to 'every mono in (Type u) is regular' which I didn't know before!</p>",
        "id": 198507901,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590192072
    },
    {
        "content": "<p>(maybe that should be <code>Type u</code> rather than <code>Sort u</code> but something like that)</p>",
        "id": 198507917,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590192104
    },
    {
        "content": "<p>Does <code>unique_choice</code> imply LEM?</p>",
        "id": 198512664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590199446
    },
    {
        "content": "<p>No</p>",
        "id": 198512678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590199488
    },
    {
        "content": "<p>Well, I guess I am not 100% sure about the situation with universes. A topos yields a model of the other axioms, without (in general) LEM.</p>",
        "id": 198512822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590199693
    },
    {
        "content": "<p>does proof irrelevance affect anything here?</p>",
        "id": 198512842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590199742
    },
    {
        "content": "<p>And always satisfies unique choice.</p>",
        "id": 198512850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590199769
    },
    {
        "content": "<p>I don't think proof irrelevance is a problem. Two proofs of a proposition are interpreted as two sections of a monomorphism, which must be equal. I'm not so sure how to interpret types which depend on proofs though.</p>",
        "id": 198512968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590199956
    },
    {
        "content": "<p>even in lean those aren't really a problem; you can always replace a type depending on a proof with a pi type over that proof and proof irrelevance ensures a definitional isomorphism going in both directions</p>",
        "id": 198513037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200044
    },
    {
        "content": "<p>I guess the interpretation of <code>unique_choice</code> asserts \"existence\" a bit less strongly (and in particular not computably), almost as if everything is in the <code>erased</code> monad</p>",
        "id": 198513225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200352
    },
    {
        "content": "<p>in fact I think <code>unique_choice' {α : Type u} [subsingleton α] : nonempty α → erased α</code> is provable</p>",
        "id": 198513264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200380
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">erased</span>\n\n<span class=\"n\">def</span> <span class=\"n\">erased_unique_choice</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">erased</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">eq_true_intro</span> <span class=\"o\">(</span><span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198513377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200539
    },
    {
        "content": "<p>So all of these are equivalent to <code>unique_choice</code>:</p>\n<ul>\n<li><code>subsingleton A -&gt; nonempty A -&gt; A</code></li>\n<li><code>unique A -&gt; A</code></li>\n<li><code>nonempty A -&gt; trunc A</code></li>\n<li><code>erased A -&gt; A</code></li>\n</ul>",
        "id": 198513459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200694
    },
    {
        "content": "<p>I don't think the second is equivalent to unique choice, since <code>unique</code> uses inhabited rather than nonempty, so <code>unique</code> does contain the data of what we want</p>",
        "id": 198515019,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590203378
    },
    {
        "content": "<p>I believe <code>Type u</code> in Lean is a quasitopos computably, and a topos iff we have unique choice. (We always have unique choice for <code>Prop</code> though by proof irrel)</p>",
        "id": 198515594,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590204364
    },
    {
        "content": "<p>Maybe not by proof irrel actually but because the existential in the nonempty eliminates nicely</p>",
        "id": 198515606,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590204420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/finite.20limits/near/198513459\">said</a>:</p>\n<blockquote>\n<p>So all of these are equivalent to <code>unique_choice</code>:</p>\n<ul>\n<li><code>subsingleton A -&gt; nonempty A -&gt; A</code></li>\n<li><code>unique A -&gt; A</code></li>\n<li><code>nonempty A -&gt; trunc A</code></li>\n<li><code>erased A -&gt; A</code></li>\n</ul>\n</blockquote>\n<p>I feel like these equivalences would make a fun kata if we figure out how to block usage of choice</p>",
        "id": 198515615,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590204463
    }
]