[
    {
        "content": "<p>Hi Everybody,<br>\nI this this way of proving 1 &lt; 4 is not a smart way. Do you have any better way for doing this. Thanks</p>\n<p>theorem oiooo : 1 &lt; 4 :=<br>\nbegin<br>\nhave thh: 1 &lt; nat.succ 1, from nat.lt_succ_self 1,<br>\nhave hht6: nat.succ 1 &lt; 3, from nat.lt_succ_self 2,<br>\nhave ht5: 3 &lt; 4, from nat.lt_succ_self 3,<br>\nhave tg: 1 &lt; 3, from nat.lt_trans thh hht6,<br>\nshow 1 &lt; 4, from nat.lt_trans tg ht5<br>\nend</p>",
        "id": 133271618,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535996194
    },
    {
        "content": "<p>You can format code by putting three backticks before and after it:</p>\n<div class=\"codehilite\"><pre><span></span>```lean\nYour code goes here\n```\n</pre></div>",
        "id": 133271642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535996260
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">oiooo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 133271717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535996282
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">oiooo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">constructor</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 133271728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535996297
    },
    {
        "content": "<p>rofl</p>",
        "id": 133271729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535996303
    },
    {
        "content": "<p>that's some obscure proof</p>",
        "id": 133271731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535996314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125610\">@Truong Nguyen</span> the correct proof is <code>dec_trivial</code> -- inequalities are decidable on the naturals</p>",
        "id": 133271750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535996363
    },
    {
        "content": "<p>Unfortunately the reals do not have decidable equality, so for them you have to prove stuff like 1 &lt; 4 using <code>norm_num</code></p>",
        "id": 133271800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535996418
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">oiooo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">_</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 133271865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535996524
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">oiooo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_lt_bit0</span> <span class=\"err\">$</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_bit0</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_ne_zero</span>\n</pre></div>",
        "id": 133271869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535996528
    },
    {
        "content": "<p>The <code>{! _ !}</code> is called a goal. You can fill it in in two ways: (1) Click the light bulb. (2) Put your cursor in the goal and hit <code>Ctrl-.</code></p>",
        "id": 133271880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535996580
    },
    {
        "content": "<p>Choose the option \"Use <code>tidy</code> to fill in the goal.\"</p>",
        "id": 133271887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535996602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">oiooo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span>\n</pre></div>\n\n\n<p>will also work.</p>",
        "id": 133271898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535996624
    },
    {
        "content": "<p>Oh, Thank you.<br>\nHow about this one: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">tyyy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 133273683,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535999342
    },
    {
        "content": "<p>This is part of the way there:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">tyyy0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span>\n<span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>\n\n\n<p>There should be some way to use <code>zmod.cast_mod_nat</code> but I'm stuck.</p>",
        "id": 133274209,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536000405
    },
    {
        "content": "<p>I am stuck too.</p>",
        "id": 133274358,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536000685
    },
    {
        "content": "<p>I think the original tyyy is a lemma somewhere in mathlib</p>",
        "id": 133274407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536000792
    },
    {
        "content": "<p>There's <code>int.add_mod_mod</code> and <code>int.mod_add_mod</code></p>",
        "id": 133274562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536001061
    },
    {
        "content": "<p>Which you can combine to get what you want</p>",
        "id": 133274692,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536001222
    },
    {
        "content": "<p>I think this should work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">tyyy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_add</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_mod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_mod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 133274701,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536001294
    }
]