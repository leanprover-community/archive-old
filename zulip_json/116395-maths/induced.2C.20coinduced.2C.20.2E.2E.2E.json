[
    {
        "content": "<p>If I have a function f:A-&gt;B with a topology on B, are the following two topologies on A x A the same?<br>\n1. equip A with the induced topology, and then do the product topology<br>\n2. build fxf:AxA-&gt;BxB and then use the induced topology, where BxB has the product topology</p>",
        "id": 128116033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529063495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 128116036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529063503
    },
    {
        "content": "<p>They are equal but not defeq</p>",
        "id": 128116082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529063547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how do you suggest I prove it?</p>",
        "id": 128116170,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529063751
    },
    {
        "content": "<p>you should be able to use some nonsense in the lattice of top spaces to prove it relatively easily</p>",
        "id": 128116227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529063817
    },
    {
        "content": "<p>we have <code>induced_le</code> but not <code>le_induced</code>, so...</p>",
        "id": 128116242,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529063862
    },
    {
        "content": "<p>isn't <code>induced</code> defined as some kind of supremum? That gives you a proof approach</p>",
        "id": 128116294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529063915
    },
    {
        "content": "<p>i'll try</p>",
        "id": 128116297,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529063924
    },
    {
        "content": "<p>(no, prod is supremum, induced isn't)</p>",
        "id": 128116302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529063933
    },
    {
        "content": "<p>oh and is there an idiom to obtain the categorical product of two functions?</p>",
        "id": 128116321,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529063986
    },
    {
        "content": "<p>not particularly, <code>embedding_prod_mk</code> just uses <code>(λx:α×γ, (f x.1, g x.2))</code></p>",
        "id": 128116410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529064065
    },
    {
        "content": "<p>is that an idiom?</p>",
        "id": 128116416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529064092
    },
    {
        "content": "<p>I suppose</p>",
        "id": 128116420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529064101
    },
    {
        "content": "<p>I think <code>induced_sup</code> will help</p>",
        "id": 128116471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529064162
    },
    {
        "content": "<p>and <code>induced_compose</code></p>",
        "id": 128116474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529064174
    },
    {
        "content": "<p>why are they in <code>continuity</code> @_@</p>",
        "id": 128116482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529064199
    },
    {
        "content": "<p>because <code>induced</code> is really talking about continuous functions</p>",
        "id": 128116486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529064218
    },
    {
        "content": "<p>consider <code>continuous_iff_induced_le</code></p>",
        "id": 128116491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529064231
    },
    {
        "content": "<p>also the proofs use continuity arguments</p>",
        "id": 128116539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529064268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> oh my god I just realized I have been asking the wrong question</p>",
        "id": 128116668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529064498
    },
    {
        "content": "<p>f:A-&gt;B be a set-theoretic function, and a topology on A. Are the following two topologies on BxB the same?<br>\n1. equip B with coinduced, and then product<br>\n2. coinduced from fxf:AxA-&gt;BxB, where AxA has the product topology</p>",
        "id": 128116683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529064547
    },
    {
        "content": "<p>let's say f is surjective</p>",
        "id": 128116684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529064552
    },
    {
        "content": "<p>I expect so, try to prove it and find out</p>",
        "id": 128117009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529065147
    },
    {
        "content": "<p>I'm almost certain they are not the same in general.</p>",
        "id": 128118668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529067738
    },
    {
        "content": "<p>If A-&gt;B is a quotient map, then XxA-&gt;XxB need not be a quotient map. But I don't know the counterexample off-hand.</p>",
        "id": 128118746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529067860
    },
    {
        "content": "<p>I just proved it with one extra assumption</p>",
        "id": 128118753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529067899
    },
    {
        "content": "<p>It's true if X is locally compact, or in your original question if A and B are</p>",
        "id": 128118770,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529067935
    },
    {
        "content": "<p>what was your extra assumption?</p>",
        "id": 128118814,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529067979
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span> <span class=\"n\">β</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">coinduced</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">coinduced</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">coinduced</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">coinduced</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">induced_le_iff_le_coinduced</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">coinduced</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"bp\">;</span>\n<span class=\"k\">from</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"o\">(</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">sup_le</span>\n    <span class=\"o\">(</span><span class=\"n\">induced_le_iff_le_coinduced</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">induced_compose</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">induced_compose</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"k\">from</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">induced_mono</span> <span class=\"n\">H3</span><span class=\"o\">)</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">le_sup_left</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">induced_le_iff_le_coinduced</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">induced_compose</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">induced_compose</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"k\">from</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">induced_mono</span> <span class=\"n\">H3</span><span class=\"o\">)</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">le_sup_right</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">is_open_prod_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf1</span> <span class=\"n\">y</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">hmu</span><span class=\"o\">,</span> <span class=\"n\">hnv</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_prod_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hs</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hxy</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hf2</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hf2</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hmu</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hnv</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hp1</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">hq1</span><span class=\"o\">,</span> <span class=\"n\">hq2</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hp2</span> <span class=\"n\">hq2</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hq2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"bp\">@</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">hp1</span><span class=\"o\">,</span> <span class=\"n\">hq1</span><span class=\"bp\">⟩⟩</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128118818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529067989
    },
    {
        "content": "<p>that the map be open</p>",
        "id": 128118820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529067993
    }
]