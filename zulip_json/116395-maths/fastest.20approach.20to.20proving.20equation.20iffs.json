[
    {
        "content": "<p>I want to prove the following:</p>\n<p>(EDIT: mwe + backticks)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.rewrite_search.frontend</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">delta_A</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">T</span> <span class=\"bp\">Δ</span><span class=\"n\">A</span> <span class=\"bp\">Δ</span><span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">posA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">posT</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">posA'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">A</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">posT'</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">T</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mina</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mint</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">maxa</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">maxt</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span>\n   <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">T</span><span class=\"bp\">^</span><span class=\"n\">t</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">t</span>\n   <span class=\"bp\">↔</span>\n   <span class=\"bp\">Δ</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">T</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">+Δ</span><span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rewrite_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>how would be the best way to go about this? rewrite_search says \"search failed: all vertices explored\". Also I feel I have to tell LEAN about the assumptions somehow - in the numbers game I would use cases but not sure what it does with reals.</p>\n<p>(I guess I could manually invoke all the lemmas but doubt this is the fastest approach)</p>",
        "id": 231842658,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616693221
    },
    {
        "content": "<p>right now that's pretty easy to prove because maxt is a false assumption. Why not set this up as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and post code in triple backticks?</p>",
        "id": 231842902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616693311
    },
    {
        "content": "<p>ah, right. Typo, also did not know about the mwe rule. brb.</p>",
        "id": 231843379,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616693490
    },
    {
        "content": "<p>I'm not sure your goal is true even if you fix the maxt issue -- if Delta A is large and negative then you're going to be taking the a'th power of a negative number, which will give meaningless results.</p>",
        "id": 231843387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616693493
    },
    {
        "content": "<p>another oversight, thanks</p>",
        "id": 231843533,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616693536
    },
    {
        "content": "<p>Once you've got it straight, the way to do it would be to rewrite lemmas which will use assumptions as input hypotheses.</p>",
        "id": 231843615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616693567
    },
    {
        "content": "<p>Here is a way to do it . The first two lemmas should probably be added to mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.rewrite_search.frontend</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.rpow_inj_on</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.inj_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.Ici</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">real.rpow_mul</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">real.rpow_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.rpow_eq_rpow_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">real.rpow_inj_on</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">delta_A</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">T</span> <span class=\"bp\">Δ</span><span class=\"n\">A</span> <span class=\"bp\">Δ</span><span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">posA</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">posT</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">posA'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">posT'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">T</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mina</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mint</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">maxa</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">maxt</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span>\n   <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">T</span><span class=\"bp\">^</span><span class=\"n\">t</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">t</span>\n   <span class=\"bp\">↔</span>\n   <span class=\"bp\">Δ</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">T</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">+Δ</span><span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- first, get rid of the denominators in the second equation</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real.div_rpow</span> <span class=\"n\">posT.le</span> <span class=\"n\">posT'.le</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">+</span> <span class=\"bp\">Δ</span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">posT'.ne'</span><span class=\"o\">,</span> <span class=\"n\">real.rpow_eq_zero_iff_of_nonneg</span> <span class=\"n\">posT'.le</span><span class=\"o\">],</span>\n  <span class=\"n\">field_simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero_iff_eq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- then, remove the power `a` in the first equation</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_mul</span> <span class=\"n\">hz.le</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mina.ne'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">real.rpow_nonneg_of_nonneg</span> <span class=\"n\">hz.le</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"n\">posT</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">posT'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">real.mul_rpow</span> <span class=\"n\">posA.le</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"n\">posT</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">real.mul_rpow</span> <span class=\"n\">posA'.le</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"n\">posT'</span><span class=\"o\">),</span>\n    <span class=\"n\">real.rpow_eq_rpow_iff</span> <span class=\"n\">mina.ne'</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"n\">posA.le</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"n\">posT</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"n\">posA'.le</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"n\">posT'</span><span class=\"o\">)),</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero_iff_eq</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- check that we have brought both equations to the same form</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>",
        "id": 231864539,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616701392
    },
    {
        "content": "<p>As you can see, this is pretty painful. What I do is massage the two equations to make them the same up to algebraic manipulations, and then ask <code>ring</code> to check that indeed I have got to the same expressions. To massage the first one, I cancel out the exponent <code>a</code> using the lemma <code>real.rpow_eq_rpow_iff</code> that I prove above. To massage the second one, I remove the denominators by calling <code>field_simp</code> (but first I need to check that the denominator is nonzero).</p>",
        "id": 231864853,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616701518
    },
    {
        "content": "<p>Note that the call to <code>lint</code> at the end is to let you see which assumptions of your lemmas I ended up not using. Also, many of your assumptions that are strict inequalities can be weakened to large inequalities without harm. Note that you formulated your inequalities like <code>A &gt; 0</code>, but instead you should use <code>0 &lt; A</code> (which is mathematically the same, but most of our lemmas are designed to work with the second form, so it is good practice to only use this one).</p>",
        "id": 231865224,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616701651
    },
    {
        "content": "<p>Just saw it thanks to you pointing it out in the other thread. Thanks again - there is a lot to unpack. Having a look now.</p>",
        "id": 231926044,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616745017
    },
    {
        "content": "<p>ok - I think I managed to understand the first two lemmas (I like the approach by the way), except for the following:<br>\nthe lemma real.rpow_inj_on shows that exponentiation is injective on set.Ici 0 which I understand to be the strictly positive numbers - but what about negative exponents?</p>\n<p>LEAN accepts lemma real.rpow_eq_rpow_iff too which I think it should not (EDIT because real.rpow_inj_on talks only about positive exponents). Where is my error?</p>",
        "id": 231930396,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616747894
    },
    {
        "content": "<p>Why do you think it shouldn't work?</p>",
        "id": 231930630,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1616748059
    },
    {
        "content": "<p>well because the first lemma only talks about positive exponents but a can be negative too, no?</p>",
        "id": 231931336,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616748500
    },
    {
        "content": "<p>This one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real.rpow_inj_on</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.inj_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.Ici</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That talks about non-zero exponents and non-negative base</p>",
        "id": 231931540,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1616748614
    },
    {
        "content": "<p>The first lemma talks about nonzero exponents (that's what the assumption <code>ha</code> says). The <code>Ici 0</code> is the set on which the function is injective.</p>",
        "id": 231931549,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616748621
    },
    {
        "content": "<p>aah I think I get it. The <code>Ici 0</code> is the codomain. Was assuming it to be the domain.</p>",
        "id": 231932339,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616749093
    },
    {
        "content": "<p>No, it is the domain, but of the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><msup><mi>x</mi><mi>a</mi></msup></mrow><annotation encoding=\"application/x-tex\">x \\mapsto x^a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span></span></span>. I.e., we are requiring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> to be nonnegative, but this doesn't say anything about <code>a</code> (which is just required to be nonzero).</p>",
        "id": 231932453,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616749176
    },
    {
        "content": "<p>Right. That was my error. Thanks!</p>",
        "id": 231932609,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616749255
    },
    {
        "content": "<p>There's a (long and most likely golfable) proof that <code>rpow</code> with an odd natural exponent is strictly monotonic on all the reals in <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223005490\">this thread</a>. It'd be good for someone to PR a bunch of lemmas from that thread too.</p>",
        "id": 231962079,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616764707
    }
]