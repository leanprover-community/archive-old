[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> the following used to be no problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 249467913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959064
    },
    {
        "content": "<p>It used to be <code>mul_action.to_has_scalar B (submodule R B) : has_scalar B (submodule R B)</code> which used <code>submodule.mul_action_algebra : mul_action B (submodule R B)</code>.</p>",
        "id": 249467975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959109
    },
    {
        "content": "<p>Do you know what happened to those instances?</p>",
        "id": 249467977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959118
    },
    {
        "content": "<p>Beware: when I write \"used to work\" I mean it worked two years ago.</p>",
        "id": 249468040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959207
    },
    {
        "content": "<p>I have no memory of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mul_action_algebra\">docs#submodule.mul_action_algebra</a>, but I suppose it's possible I removed it by accident</p>",
        "id": 249468046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628959235
    },
    {
        "content": "<p>\"Two years ago\" is helpful, that's a starting point for a git blame</p>",
        "id": 249468050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628959259
    },
    {
        "content": "<p>Oh I'm sorry. I followed the trail and actually ended up somewhere in the perfectoid spaces project. So it probably never was in mathlib.</p>",
        "id": 249468105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959345
    },
    {
        "content": "<p>Sorry about the noise.</p>",
        "id": 249468108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959349
    },
    {
        "content": "<p>And we should probably do it differently now.</p>",
        "id": 249468121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959433
    },
    {
        "content": "<p>I would assume it generalizes to <code>has_scalar S (submodule R A)</code> for some compatibility condition on <code>R</code>,<code>S</code>, <code>A</code> that presumably becomes obvious once you try to prove it</p>",
        "id": 249468153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628959444
    },
    {
        "content": "<p>Do you know the name of the linear map given by scalar multiplication?</p>",
        "id": 249468163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959452
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_span_singleton\">docs#linear_map.to_span_singleton</a>?</p>",
        "id": 249468167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628959465
    },
    {
        "content": "<p>Or do you mean one of the other ones?</p>",
        "id": 249468173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628959487
    },
    {
        "content": "<p>One of the other ones</p>",
        "id": 249468176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959493
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.lsmul\">docs#linear_map.lsmul</a>?</p>",
        "id": 249468196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628959514
    },
    {
        "content": "<p>I think there's a less bundled version but I don't remember where it is</p>",
        "id": 249468210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628959554
    },
    {
        "content": "<p>I can now use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">toto</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">submodule.map</span> <span class=\"o\">((</span><span class=\"n\">linear_map.lsmul</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 249468319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959724
    },
    {
        "content": "<p>I'll let you the pleasure to find the generalization you want.</p>",
        "id": 249468408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628959917
    },
    {
        "content": "<p>This looks like a suitable generalization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- I have no idea how to name this -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">another_smul_hom</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar.smul</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">smul_add</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">smul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">toto</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">another_smul_hom</span> <span class=\"n\">s</span><span class=\"o\">)⟩</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 249468775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628960454
    },
    {
        "content": "<p>I was hoping that would be enough to get <code>has_scalar (opposite A) (submodule R A)</code> too, but we're missing some pieces</p>",
        "id": 249468931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628960724
    },
    {
        "content": "<p>It's crazy how we don't assume commutativity of R or S or anything -- the ingredient needed to make it work is that multiplication by s : S is R-linear, and whilst in practice this will usually be because R and S are subtypes of some bigger commutative structure, these crazy smul_comm_class typeclasses are somehow the precise fact we need from the set-up to make the construction work.</p>",
        "id": 249471532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628964917
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/8945\">#8945</a></p>",
        "id": 251538816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630493494
    },
    {
        "content": "<p><code>submodule.mul_action_algebra</code> now exists as <a href=\"https://github.com/leanprover-community/mathlib/blob/2331607e9672a1edfd5aeb72d0b30f880579fa76/src/linear_algebra/basic.lean#L955-L967\"><code>submodule.pointwise_distrib_mul_action</code></a></p>",
        "id": 252653785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631204481
    }
]