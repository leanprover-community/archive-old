[
    {
        "content": "<p>The following instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span>\n</code></pre></div>\n<p>causes problems, because <code>algebra_int R : algebra ℤ R</code> is an instance, so if <code>R</code> and <code>S</code> are <code>comm_ring</code>s and <code>[algebra R S]</code> then <code>foo</code> and <code>algebra_int</code> give two non-defeq instances of <code>algebra ℤ S</code>. I don't see a way around this right now. This came up in <a class=\"stream\" data-stream-id=\"304774\" href=\"/#narrow/stream/304774-FLT-regular\">#FLT regular</a> .</p>",
        "id": 259272573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635354512
    },
    {
        "content": "<p>It's probably an insane amount of work, but maybe the long term solution is to make the N action part of the definition of a semiring, and similarly for rings.</p>",
        "id": 259277229,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635356423
    },
    {
        "content": "<p>This still might not solve the problem though, because you can't have <code>foo</code> saying \"if A is the integers then do it this way, else do it the obvious way\".</p>",
        "id": 259277350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635356481
    },
    {
        "content": "<p>As subscribers to <a class=\"stream\" data-stream-id=\"304774\" href=\"/#narrow/stream/304774-FLT-regular\">#FLT regular</a> will know, we're probably going to switch to a weaker version of <code>foo</code> which will suffice for the cases we're interested in. Johan suggested that there might already be a diamond in mathlib with <code>rat.algebra_rat</code> because there's some variant of <code>foo</code> which does exist for intermediate fields.</p>",
        "id": 259277555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635356573
    },
    {
        "content": "<p>This what happened to monoids and groups, right? Now it's literally impossible to have two non defeq Z actions on a group if I understand what has been done</p>",
        "id": 259277583,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635356583
    },
    {
        "content": "<p>No, I don't think it's impossible. It got a bit harder to do it wrong though.</p>",
        "id": 259277739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635356652
    },
    {
        "content": "<p>More importantly, it became possible to do it right.</p>",
        "id": 259277811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635356694
    },
    {
        "content": "<p>Somehow it's not quite the same. We put an action of the integers on every group, but given a group homomorphism G -&gt; H and an action of X on G you don't get an induced action of X on H.</p>",
        "id": 259277860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635356713
    },
    {
        "content": "<p>Better than nothing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259277869,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635356716
    },
    {
        "content": "<p>Here even if we make every ring a Z-algebra as part of the definition, we still can't have <code>foo</code> because it says precisely that A-algebra structures can be pushed along homomorphisms, and we don't want to push it in this one specific case when A=Z</p>",
        "id": 259278065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635356795
    },
    {
        "content": "<p>I'm trying to redefine <code>algebra</code> in <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-algebra\">branch#redefine-algebra</a> so that <code>algebra_map</code> is no longer part of the typeclass.</p>",
        "id": 259288416,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635360727
    },
    {
        "content": "<p>The only downside is that we loose nice definitional equalities for <code>algebra_map</code> but I think that we can live without them.</p>",
        "id": 259288573,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635360788
    },
    {
        "content": "<p><code>foo</code> should never be an instance in the first place</p>",
        "id": 259306831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635368993
    },
    {
        "content": "<p>Even if you remove <code>algebra_map</code> it creates diamonds in <code>smul</code></p>",
        "id": 259306916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635369028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259288416\">said</a>:</p>\n<blockquote>\n<p>I'm trying to redefine <code>algebra</code> in <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-algebra\">branch#redefine-algebra</a> so that <code>algebra_map</code> is no longer part of the typeclass.</p>\n</blockquote>\n<p>Oh wow, this seems to delete a bunch of code, which is a good sign. Do you think this solves the problem?</p>",
        "id": 259318197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635375263
    },
    {
        "content": "<p>To be clear, \"the problem\" is not really anything to do with the thing at the top of this thread, but is instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra.id</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_nat</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails, because...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">algebra.to_has_scalar</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">algebra.id</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">algebra.to_has_scalar</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">algebra_nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- while this works thanks to the nat-module refactor</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">algebra.to_ring_hom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">algebra.id</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">algebra.to_ring_hom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">algebra_nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- this does not</span>\n</code></pre></div>\n<p>Our choice are either:</p>\n<ul>\n<li>Declare we don't care about <code>algebra_map</code> having a convenient definition, and replace it with <code>1 •</code> as Yury does in their branch.</li>\n<li>Decide we still do care about <code>algebra_map</code> having a convenient definition, and add <code>semiring.of_nat</code> / <code>ring.of_int</code> etc, as suggested in my scalar actions talk, which I made a feeble attempt to start in <a href=\"https://github.com/leanprover-community/mathlib/issues/9525\">#9525</a>.</li>\n</ul>",
        "id": 259321063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635377363
    },
    {
        "content": "<p>With my approach we get a definition of <code>algebra</code> that works for non-associative algebras.</p>",
        "id": 259332705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635388208
    },
    {
        "content": "<p>We already can express non-associative algebras as <code>[module R A] [smul_comm_class R A A] [is_scalar_tower R A A]</code>, and indeed many of the instances for that already exist</p>",
        "id": 259349155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635405726
    },
    {
        "content": "<p>(I'm sure you knew that, but maybe not every reader of your message did)</p>",
        "id": 259349233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635405811
    },
    {
        "content": "<p><code>extends ...</code> is exactly the definition in <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-algebra\">branch#redefine-algebra</a>. I think that we should try to minimize the amount of data in typeclasses (unless we really have to introduce it to avoid diamonds).</p>",
        "id": 259349395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635405923
    },
    {
        "content": "<p>I think I'm willing to give up defeq properties of <code>algebra_map</code>.</p>",
        "id": 259349550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635406042
    },
    {
        "content": "<p>The less data there is, the less risk of diamonds, so I'd also go for the dataless definition. Defeqness properties are just an implementation detail that we shouldn't rely on too much in any case.</p>",
        "id": 259350352,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635406617
    },
    {
        "content": "<p>I'll try to fix compilation of <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-algebra\">branch#redefine-algebra</a> next week.</p>",
        "id": 259350508,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635406727
    },
    {
        "content": "<p>BTW, is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.under\">docs#subalgebra.under</a> a particular case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.restrict_scalars\">docs#subalgebra.restrict_scalars</a>?</p>",
        "id": 259350627,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635406806
    },
    {
        "content": "<p>I only learnt about the \"extend <code>smul_comm_class</code> and <code>is_scalar_tower</code>\" approach from looking at Yury's branch. Wow! Is this the way forward? It removes data from the typeclass system so that's surely a good thing</p>",
        "id": 259350823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635406955
    },
    {
        "content": "<p>It was in my FMM2021 presentation too ;), months ago</p>",
        "id": 259351569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635407510
    },
    {
        "content": "<p>If we do go in Yury's direction, do we want to copy the recent change from <code>[integral_domain X]</code> to <code>[comm_ring X] [is_domain X]</code> by replacing <code>[algebra R A]</code> with <code>[module R A] [is_algebra R A]</code>?</p>",
        "id": 259351724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635407603
    },
    {
        "content": "<p>What I like about this is that it shows that an R-algebra A is just a non-homogeneous multiplication R x A -&gt; A satisfying some axioms</p>",
        "id": 259352048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635407789
    },
    {
        "content": "<p>I had never really internalised this</p>",
        "id": 259352075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635407809
    },
    {
        "content": "<p>Either way, the reality is that we end up with instances that almost ubiquitously look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">my_type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">my_type.smul_comm_class</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">my_type.is_scalar_tower</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">my_type.module</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>like they already do for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_domain\">docs#is_domain</a>.</p>",
        "id": 259352084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635407816
    },
    {
        "content": "<p>Wait though, my current model is that it's just a map R -&gt; A satisfying some axioms</p>",
        "id": 259352224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635407895
    },
    {
        "content": "<p>How come the new model is better?</p>",
        "id": 259352261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635407920
    },
    {
        "content": "<p>The old model is properties of <code>(• 1) = algebra_map</code>, the new one is properties of <code>(•)</code>. You need 1 : A to talk about the first one</p>",
        "id": 259352346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635407994
    },
    {
        "content": "<p>But I emphasize again that we already have the tools to talk about the situation without 1 : A, so really this is an argument about how we want to spell things and if anyone cares about algebra_map</p>",
        "id": 259352537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635408062
    },
    {
        "content": "<p>In particular I suspect the key benefit to <code>algebra_map</code> is that <code>algebra_map R R = id</code> is (intended to be, and in most cases other than the one titling this thread already is) true definitionally. As another example, <code>algebra_map ℝ ℂ r = ⟨r, 0⟩</code>  is true definitionally right now. In Yury's branch, it becomes <code>algebra_map ℝ ℂ r = ⟨r*1 - 0*0, r*0 + 0*1⟩</code> (see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.has_scalar/src\">src#complex.has_scalar</a> to see why).</p>",
        "id": 259353340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635408532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Do you think it makes sense to remove <code>algebra</code> completely?</p>",
        "id": 259358451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635411455
    },
    {
        "content": "<p>Only if we decide we no longer want to control <code>algebra_map</code> definitionally, as Yury has already done on their branch</p>",
        "id": 259359209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635411827
    },
    {
        "content": "<p>My rough order of preference (ignoring the \"what mathetaticians want to read\" aspect) is:</p>\n<ol>\n<li>Leave typeclasses as they are, add <code>ring.of_int</code> etc to fix the diamonds</li>\n<li>Remove <code>algebra</code> with no replacement, use <code>[smul_comm_class R A A] [is_scalar_tower R A A]</code> as we already can today</li>\n<li>Remove <code>algebra</code>, introduce <code>class is_algebra R A extends smul_comm_class R A A, is_scalar_tower R A A</code> for convenience</li>\n<li>Remove <code>algebra.to_ring_hom</code> from the definition of <code>algebra</code> as Yury does in the branch above.</li>\n</ol>\n<p>Note that in Lean 4, we can (probably) have <code>instance [smul_comm_class R A A] [is_scalar_tower R A A] : is_algebra R A</code> without forming a loop, which removes all the downsides of option 3 over option 2.</p>",
        "id": 259359668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635412051
    },
    {
        "content": "<p>I really want Lean 4. Those loops will be so extremely useful!</p>",
        "id": 259359824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635412130
    },
    {
        "content": "<p>I'm a little scared they might not work quite as well as described in the case of dependent typeclasses like <code>module</code>, but I guess we'll find out eventually and this isn't the thread to speculate about that.</p>",
        "id": 259360009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635412226
    },
    {
        "content": "<p>I don't understand how <code>ring.of_int</code> would solve the problem of being able to construct the <code>algebra A C</code> instance from <code>algebra A B</code> and <code>algebra B C</code> in a safe way</p>",
        "id": 259364731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635415096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> But that can't be an instance anyway, because how can Lean find <code>B</code> if it only knows <code>algebra A C</code>. It won't know where to look (at least with the current algorithm).</p>",
        "id": 259365212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635415394
    },
    {
        "content": "<p>I'm pretty sure requiring that to not form a diamond is the same as requiring <code>a • (1 : B) • c = a • c</code> definitionally for all choices of <code>B</code></p>",
        "id": 259368371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635417279
    },
    {
        "content": "<p>Which seems like a pretty outrageous requirement</p>",
        "id": 259368390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635417291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259352048\">said</a>:</p>\n<blockquote>\n<p>What I like about this is that it shows that an R-algebra A is just a non-homogeneous multiplication R x A -&gt; A satisfying some axioms<br>\nI had never really internalised this</p>\n</blockquote>\n<p>This is really funny. I never heard of algebras seen as maps from R to A before mathlib. I was taught about the non-homogeneous multiplication version.</p>",
        "id": 259374233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635420762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259359668\">said</a>:</p>\n<blockquote>\n<p>My rough order of preference (ignoring the \"what mathetaticians want to read\" aspect) is:</p>\n<ol>\n<li>Leave typeclasses as they are, add <code>ring.of_int</code> etc to fix the diamonds</li>\n<li>Remove <code>algebra</code> with no replacement, use <code>[smul_comm_class R A A] [is_scalar_tower R A A]</code> as we already can today</li>\n<li>Remove <code>algebra</code>, introduce <code>class is_algebra R A extends smul_comm_class R A A, is_scalar_tower R A A</code> for convenience</li>\n<li>Remove <code>algebra.to_ring_hom</code> from the definition of <code>algebra</code> as Yury does in the branch above.</li>\n</ol>\n<p>Note that in Lean 4, we can (probably) have <code>instance [smul_comm_class R A A] [is_scalar_tower R A A] : is_algebra R A</code> without forming a loop, which removes all the downsides of option 3 over option 2.</p>\n</blockquote>\n<p>I'd vote for 3, and then 4. I don't really like 2 because of the \"what mathematicians want to read\" aspect, and I don't like 1 because it feels like opening the possibility to shoot oneself in the knee when there is no need for it.</p>",
        "id": 259389442,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635428433
    },
    {
        "content": "<p>What does <code>1</code> mean? You mean change the definition of <code>ring</code> to give it a canonical map from the integers? I don't understand how this fixes things. I like the look of 3 as well.</p>",
        "id": 259394720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635430620
    },
    {
        "content": "<p>I suspect you don't understand how it fixes things because \"things\" to you is <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259272573\">the example at the top of this thread</a> that is not really possible at all. It fixes the <code>example</code>s <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259321063\">I post above</a> for the same reason that the <code>smul</code> ones are already fixed.</p>",
        "id": 259399282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635432306
    },
    {
        "content": "<p>I guess the fix for my original issue is to make <code>algebra_int</code> not an instance</p>",
        "id": 259399834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635432503
    },
    {
        "content": "<p>Your original issue will almost always make diamonds if <code>algebra A C</code> already exists, and it usually does. And the instance is illegal anyway as B can't be inferred</p>",
        "id": 259399941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635432544
    },
    {
        "content": "<p>Just to be clear: the instance in the first message of this thread is:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259272573\">said</a>:</p>\n<blockquote>\n<p>The following instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span>\n</code></pre></div>\n<p>causes problems, because <code>algebra_int R : algebra ℤ R</code> is an instance, so if <code>R</code> and <code>S</code> are <code>comm_ring</code>s and <code>[algebra R S]</code> then <code>foo</code> and <code>algebra_int</code> give two non-defeq instances of <code>algebra ℤ S</code>. I don't see a way around this right now. This came up in <a class=\"stream\" data-stream-id=\"304774\" href=\"/#narrow/stream/304774-FLT-regular\">#FLT regular</a> .</p>\n</blockquote>\n<p>This can not be an instance, because there is no way to guess <code>B</code> from the goal <code>algebra A C</code>.</p>",
        "id": 259400012,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635432569
    },
    {
        "content": "<p>I see, so one just has to make the instance manually in the original setting where we know B</p>",
        "id": 259400227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635432639
    },
    {
        "content": "<p>Exactly, and in most places we do just that (eg, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.prod.algebra\">docs#algebra.prod.algebra</a>, which provides all algebra structures not just the <code>A (prod A A)</code> one). The instance is missing for <code>spitting_field</code> which is what started this problem, but I have a local branch that starts fixing it.</p>",
        "id": 259400317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635432673
    },
    {
        "content": "<p>Regarding <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s objection to 1, I'd argue since <code>ring</code> already has three foot-guns (nsmul, zsmul, npow), adding two more (<code>of_nat</code> and <code>of_int</code>) is not all that much worse. I guess the counterargument is we had no other choice but to add the existing 3, but we do have a choice here.</p>",
        "id": 259400790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635432843
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for the counterargument.</p>",
        "id": 259400910,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635432891
    },
    {
        "content": "<p>Losing <code>rfl : algebra_map ℝ ℂ r = ⟨r, 0⟩</code> and <code>rfl : algebra_map α (α × α) a = (a, a)</code> seems like the most visible annoyance with options 2, 3, and 4</p>",
        "id": 259401167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635432982
    },
    {
        "content": "<p>We don't have <code>rfl : a / b = a * b⁻¹</code>!</p>",
        "id": 259401377,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635433073
    },
    {
        "content": "<p>How is that related?</p>",
        "id": 259401551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635433130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>, That almost makes the opposite argument; <code>div</code>,<code>inv</code>, and <code>div_eq_mul_inv</code> are analogous to <code>algebra_map</code>, <code>smul</code>, and <code>algebra.smul_def</code></p>",
        "id": 259401681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635433173
    },
    {
        "content": "<p>I am coming to terms with (a) losing readability of internal definitions of things like groups and (b) losing rfl. I wouldn't like to claim that lists in [insert your favourite language here] are implemented as [insert your naive idea about how to implement lists in this langauge], so maybe other people shouldn't assume that groups are implemented in the obvious way. And rfl is overrated.</p>",
        "id": 259401709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635433183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259401377\">said</a>:</p>\n<blockquote>\n<p>We don't have <code>rfl : a / b = a * b⁻¹</code>!</p>\n</blockquote>\n<p>It's funny. Here we added extra data to tear the rfl apart. But with algebra_map we are removing data.</p>",
        "id": 259402271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635433379
    },
    {
        "content": "<p>I meant that we can live without some very natural <code>rfl</code>s.</p>",
        "id": 259402371,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635433424
    },
    {
        "content": "<blockquote>\n<p>Here we added extra data to tear the rfl apart.</p>\n</blockquote>\n<p>More accurately, we added extra data in order to allow us to choose which things were rfl in concrete cases, and remove things that were rfl from abstract cases</p>",
        "id": 259402377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635433426
    },
    {
        "content": "<p>(I'll be away for the next 2 hours)</p>",
        "id": 259402456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635433446
    },
    {
        "content": "<p>So adding <code>div_eq_mul_inv</code> did not quite remove \"very natural <code>rfl</code>s\", but it said \"the choice of what is natural might depend on the type\", and indeed was motivated by \"very natural <code>rfl</code>s\" on ideals that didn't match the generic \"very natural <code>rfl</code>\".</p>",
        "id": 259402542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635433497
    },
    {
        "content": "<p>In the same way, the natural <code>rfl</code> on a general (unitary) algebra is <code>algebra_map R A r = r • (1 : A)</code>, but in a specific one there are almost always more natural choices</p>",
        "id": 259402736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635433569
    },
    {
        "content": "<p>That's true.</p>",
        "id": 259402801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635433600
    },
    {
        "content": "<p>But of course, the difference is that the cost of mistakenly keeping the default <code>div</code> is usually just some annoying non-rfl lemmas (usually things like <code>coe_div</code> not being <code>rfl</code>), whereas the cost of mistakenly keeping the default <code>of_nat</code> would be diamonds, just like it is for <code>nsmul</code>.</p>",
        "id": 259402923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635433657
    },
    {
        "content": "<p>Someone has surely already said this, but at some point we will want that sequences converging to zero form a real algebra. And in this case <code>algebra_map</code> really does not exist.</p>",
        "id": 259405367,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635434692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259402377\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Here we added extra data to tear the rfl apart.</p>\n</blockquote>\n<p>More accurately, we added extra data in order to allow us to choose which things were rfl in concrete cases, and remove things that were rfl from abstract cases</p>\n</blockquote>\n<p>Even more accurately, we added extra data here to kill a non-defeq diamond in typeclass inference. Which, to me, is the only situation where we should fight for defeqness. In the algebra situation, I agree that adding fields for nat and int embedding would solve the nat and int algebra diamond, but I fear there may be other algebra-related diamonds elsewhere (yet to be seen). Just removing the data from the definition is a nice way to kill all of them, once and for all.</p>",
        "id": 259407534,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635435572
    },
    {
        "content": "<p>But we are not removing the data, right? Instead of giving <code>R -&gt; A</code> we're giving <code>R -&gt; A -&gt; A</code></p>",
        "id": 259407770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635435653
    },
    {
        "content": "<p>Currently we are giving both</p>",
        "id": 259407999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635435743
    },
    {
        "content": "<p>We're using a module structure which, supposedly, is already there. So, we avoid adding more data on top of a module structure.</p>",
        "id": 259408011,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635435748
    },
    {
        "content": "<p>Oh so we are!</p>",
        "id": 259408180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635435839
    },
    {
        "content": "<p>Regarding whether the definition of an A-algebra is a ring hom or a module with a multiplication, I think Atiyah--Macdonald say it all:</p>\n<blockquote>\n<p>Let f:A-&gt;B be a ring homomorphism. If a in A and b in B, define a product ab:=f(a)b. This definition makes the ring B into an A-module...Thus B has an A-module structure as well as a ring structure, and these two structures are compatible in a sense which the reader will be able to formulate for himself. The ring B equipped with this A-module structure is said to be an <em>A-algebra</em> [in italics, so this is the definition]. Thus  an A-algebra is, by definition, a ring B together with a ring homomorphism f : A -&gt; B</p>\n</blockquote>\n<p>In other words, both definitions are \"the definition\", by definition.</p>",
        "id": 259409097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635436208
    },
    {
        "content": "<p>They don't quite \"say it all\" as they have this strange standing assumption that B is commutative, so they are missing the condition that the image of the ring homomorphism is in the centre of B. :-)</p>",
        "id": 259420969,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1635440863
    },
    {
        "content": "<p>All noncommutative rings are central simple algebras, right?</p>",
        "id": 259422970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635441629
    },
    {
        "content": "<p>Anyway, I'm more and more starting to like (3). Should we have a vote?</p>",
        "id": 259423064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635441687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, my message you quote was about div_inv_monoid where AFAIR there was no diamond</p>",
        "id": 259434227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635446780
    },
    {
        "content": "<p>Perhaps <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> can recall the motivation there</p>",
        "id": 259436119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635447553
    },
    {
        "content": "<p>(I think they're on vacation right now?)</p>",
        "id": 259436150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635447567
    },
    {
        "content": "<p>I think the issue was that you can always define <code>I * J</code> for ideals. And then, for suitable rings, you can define <code>I⁻¹</code> and <code>I / J</code>. These definitions are only compatible for Dedekind rings, or so. But they are useful in a more general setting.</p>",
        "id": 259439487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635449152
    },
    {
        "content": "<p>I am indeed on vacation, but it's raining so I decided to check my notifications, apparently exactly at the right moment :)</p>\n<p>The motivation behind <code>div_inv_monoid</code> was types like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fractional_ideal\">docs#fractional_ideal</a> that have a well-defined (/) operator in general, and form a group (with 0) in some special cases. So you would get a non-defeq group -&gt; has_div instance.</p>",
        "id": 259439879,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1635449327
    },
    {
        "content": "<p>Right, I should have mentioned <em>fractional</em> ideals.</p>",
        "id": 259439976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635449391
    },
    {
        "content": "<p>Ok, so the original <code>div_inv_monoid</code> motivation doesn't quite apply here as there is no separate <code>has_algebra_map</code> instance that exists independently of  <code>has_scalar</code> - thanks for the explanation.</p>",
        "id": 259449313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635453818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/how.20to.20avoid.20.60int_algebra.60.20diamond/near/259407534\">said</a>:</p>\n<blockquote>\n<p>but I fear there may be other algebra-related diamonds elsewhere (yet to be seen)</p>\n</blockquote>\n<p>My hunch is that in the likely event these do exist, they will have corresponding scalar diamond problems anyway; by the time we've fixed those (assuming they're even fixable), it's probably not too much harder to fix the algebra_map problems at the same time. Of course it does still create more work, so I'm sympathetic to the avoid-the-risk viewpoint.</p>",
        "id": 259449743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635454066
    }
]