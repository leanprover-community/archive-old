[
    {
        "content": "<p>This continues a <a href=\"#narrow/stream/113489-new-members/topic/Dependency.20problem\">discussion</a> from the new members stream.  I would like to discuss some possible changes to <code>normed_space.basic</code>. Here is the <a href=\"https://github.com/leanprover-community/mathlib/tree/normed-spaces-edits\">branch</a> (not yet PR'd).</p>",
        "id": 197768408,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591235
    },
    {
        "content": "<ol>\n<li>Implement <code>normed_algebra.to_normed_space</code>, <a href=\"#narrow/stream/113489-new-members/topic/.22variables.22.20command/near/197581417\">prior discussion</a></li>\n</ol>",
        "id": 197768413,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591248
    },
    {
        "content": "<ol start=\"2\">\n<li>Implement a class <code>normed_module</code> (axiom <code>norm_smul_le</code>, <code>∥c • x∥ ≤ ∥c∥ ∥x∥</code>), and prove that a normed module over a field is a normed space (axiom <code>norm_smul</code>, <code>∥c • x∥ = ∥c∥ ∥x∥</code>).  By the way, I am not sure that a \"normed module\" is a particularly standard object, but it seemed to me like a useful way to abstract out the norm-respecting property of the C(a, k)-module C(a, E) (for E a normed k-space).</li>\n</ol>",
        "id": 197768418,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591265
    },
    {
        "content": "<p>Changes that I considered but did not currently implement:</p>",
        "id": 197768464,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591287
    },
    {
        "content": "<ol start=\"3\">\n<li>Add [@simp] attribute to <code>norm_smul</code> (<code>∥c • x∥ = ∥c∥ ∥x∥</code>) and related lemmas, <a href=\"https://github.com/leanprover-community/mathlib/pull/2660#discussion_r423522431\">prior discussion</a>.  I think this is possibly a good idea in principle, but it breaks a few existing proofs in <code>normed_space.operator_norm</code>, <code>normed_space.banach</code> etc.</li>\n</ol>",
        "id": 197768469,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591298
    },
    {
        "content": "<ol start=\"4\">\n<li>Introduce consistency among naming in<br>\n<code>instance normed_top_monoid : topological_add_monoid α := ...</code><br>\n<code>instance normed_top_group : topological_add_group α := ...</code><br>\n<code>instance normed_top_ring : topological_ring α :=</code><br>\n<code>instance normed_space.topological_vector_space : topological_vector_space α E := ...</code></li>\n</ol>",
        "id": 197768484,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591334
    },
    {
        "content": "<p>Comments on any of these would be welcome.  Regarding 2, it was suggested in the previous thread that once <code>normed_module</code> is added, <code>normed_space</code> should cease to exist except as an abbreviation for a normed module over a field.</p>",
        "id": 197768497,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependency.20problem/near/197745445\">said</a>:</p>\n<blockquote>\n<p>I think <code>vector_space</code> is just an abbreviation for <code>module</code>. We could have <code>normed_module</code>, and then <code>normed_space</code> as an abbreviation of <code>normed_module</code>.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependency.20problem/near/197746284\">said</a>:</p>\n<blockquote>\n<p>Sure. And <code>norm_smul</code> would be a lemma with the assumption <code>[normed_field k]</code></p>\n</blockquote>",
        "id": 197768507,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591370
    },
    {
        "content": "<p>I did not implement this yet, because, if I understand correctly, this would require going through the library to all existing instances of normed spaces, and modifying the existing construction (using the axiom <code>norm_smul</code>) to instead check the new axiom (<code>norm_smul_le</code>).  Correct?  Thoughts?</p>",
        "id": 197768516,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589591384
    },
    {
        "content": "<p>I haven't been following this, but <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> recently opened <a href=\"https://github.com/leanprover-community/mathlib/issues/2693\">#2693</a> which seems quite relevant.</p>",
        "id": 197769114,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589592215
    },
    {
        "content": "<p>Oops, looks like <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and I both took the same lesson from our discussion yesterday ...</p>",
        "id": 197769307,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589592484
    },
    {
        "content": "<p>Sorry Yury, do you want to incorporate my other changes into your refactor?  Or vice versa?</p>",
        "id": 197769330,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589592594
    },
    {
        "content": "<p>Feel free to take over this</p>",
        "id": 197771861,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589596414
    },
    {
        "content": "<p>I'm sorry for starting this without announcing here.</p>",
        "id": 197771863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589596432
    },
    {
        "content": "<p>Note that I simplified several proofs in <code>bounded_continuous_function</code></p>",
        "id": 197772015,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589596610
    },
    {
        "content": "<p>Yes, I think this is likely to be one advantage of replacing <code>norm_smul</code> with <code>norm_smul_le</code>.</p>",
        "id": 197772035,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589596650
    },
    {
        "content": "<p>Off the top of your head, are there other instances of normed spaces whose construction will be simplified by this?</p>",
        "id": 197772078,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589596686
    },
    {
        "content": "<p><code>operator_norm</code>?</p>",
        "id": 197772091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589596739
    },
    {
        "content": "<p>Also, do you agree with <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> / <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> 's proposal to make <code>normed_space</code> an abbreviation for <code>normed_module</code> over a field?</p>",
        "id": 197772097,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589596746
    },
    {
        "content": "<p><code>normed_module</code> having the <code>norm_smul_le</code> axiom</p>",
        "id": 197772120,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589596782
    },
    {
        "content": "<p>Yes.</p>",
        "id": 197772126,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589596796
    },
    {
        "content": "<p>And do you have any opinion on the other possible changes? <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197768469\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Normed.20spaces/near/197768469</a></p>",
        "id": 197772182,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589596846
    },
    {
        "content": "<p>1, 2, 3: sure<br>\n4: I don't care about instance names</p>",
        "id": 197772216,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589596913
    },
    {
        "content": "<p>Ok great.</p>",
        "id": 197772294,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589596992
    },
    {
        "content": "<p>Your PR has nicer code than mine.  If you like I can finish chasing down the things that your PR breaks (because of the <code>norm_smul</code> to <code>norm_smul_le</code> change.)</p>",
        "id": 197772609,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589597446
    },
    {
        "content": "<p>Then when that is merged, make the <code>space</code> to <code>module</code> change as a second PR.</p>",
        "id": 197772631,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589597488
    },
    {
        "content": "<p>Whatever is more convenient for you.</p>",
        "id": 197772680,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589597564
    },
    {
        "content": "<blockquote>\n<p>Your PR has nicer code than mine.</p>\n</blockquote>\n<p>I have a bit more (~1 year) experience with Lean and mathlib.</p>",
        "id": 197772687,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589597605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependency.20problem/near/197775735\">said</a>:</p>\n<blockquote>\n<p>Yup, that's right. So all their constructions should be prepended with <code>normed_space.mk'</code> or some other name that provided a second constructor.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , what do you think of incorporating this suggestion (a second constructor) into your PR, so that there are not a bunch of <code>le_of_eq</code>'s added to the library from normed space constructions for which the equality is more natural than the inequality?  (I can make the change, just wanted to check your opinion.)</p>",
        "id": 197778616,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589607724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>   Do you mind if I work a little on Yury's branch, incorporating your definition of a normed module and registering a normed space as an abbreviation of a normed module?</p>",
        "id": 197784197,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589617792
    },
    {
        "content": "<p>I don't mind.</p>",
        "id": 197784785,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589618701
    },
    {
        "content": "<p>Note that <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> has this definition in her branch.</p>",
        "id": 197784862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589618772
    },
    {
        "content": "<p>Sure, go ahead!</p>",
        "id": 197784951,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589618925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> my branch did it the old way, with a normed space as a separate class with <code>to</code> and <code>of</code> methods; no point keeping it.</p>",
        "id": 197785152,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589619199
    },
    {
        "content": "<p>I have started playing with it, and I have broken everything :) More precisely, I have stumbled on an issue with typeclass inference that reminds me very strongly of the issue we had with <code>pi_instance</code> some time ago. Here is a MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">normed_module</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span> <span class=\"c1\">-- see Note [default priority]</span>\n<span class=\"n\">class</span> <span class=\"n\">normed_module</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_smul_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"err\">∥</span><span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">a</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">b</span><span class=\"err\">∥</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">normed_module</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_module</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"c1\">-- Two different ways to say: Π (i : fin n), module 𝕜 (E i)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">all_right</span> <span class=\"o\">:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">)))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n<span class=\"c1\">-- all_right  -- works</span>\n</code></pre></div>\n\n\n<p>I defined normed modules, and then I express in two ways that if you know that you have normed module structures on every <code>E i</code> with respect to some normed field, then you have module structures on the <code>E i</code> with respect to this normed field. The difference is that the instance paths from normed field to ring are different in the two lemmas. In one of them, <code>by apply_instance</code> works, in the other one it fails. But the two lemmas are defeq.</p>",
        "id": 197786186,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589620658
    },
    {
        "content": "<p>And I guess Lean picks up the wrong path. What do you think about leaving this change to another PR?</p>",
        "id": 197787437,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589622605
    },
    {
        "content": "<p>You mean the introduction of normed modules? Yes, sure, it can wait for another PR. Still, I think the problem above is important, and should be fixed instead of worked around: this is probably not specific to normed spaces, and could bite us in many places. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , what do you think?</p>",
        "id": 197787707,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589622984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> do you mind if I also incorporate the change 1 I mentioned above?  (<code>normed_algebra.to_normed_space</code>).  It's unrelated, but only a few lines:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">to_normed_space</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_smul_le</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"err\">∥</span><span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">smul_def&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">}</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">algebra_map</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">s</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">norm_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">s</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">norm_algebra_map_eq</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197803158,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589646205
    },
    {
        "content": "<p>Go ahead.</p>",
        "id": 197807844,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589652864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , since you're here, did you have time to have a look at <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197786186\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Normed.20spaces/near/197786186</a>?</p>",
        "id": 197813084,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589660303
    },
    {
        "content": "<p>It's really a weird behavior. I have investigated it a bit further, and it behaves exactly like the example we had with <code>pi_instance</code> some time ago. There are two terms that are definitionally equal (even with the attribute <code>tactic.transparency.reducible</code>), but <code>apply_instance</code> fails to spot this. The outer terms are proved equal with the attribute <code>tactic.transparency.reducible</code>, but not inner terms. More precisely,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">outer_works</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n   <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">)))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span>  <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inner_fails</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 197813273,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589660526
    },
    {
        "content": "<p>With <code>tactic.transparency.instances</code>, everything works.</p>",
        "id": 197813303,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589660583
    },
    {
        "content": "<p>This sounds like \"working as intended\" though</p>",
        "id": 197814646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589662217
    },
    {
        "content": "<p><code>reflexivity reducible</code> is supposed to unfold only reducible definitions, not instances</p>",
        "id": 197814676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589662248
    },
    {
        "content": "<p>doesn't <code>simp</code> have a <code>canonize_instances</code> option that is supposed to fix issues like this?</p>",
        "id": 197814755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589662384
    },
    {
        "content": "<p>I don't think it works as intended. You have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">all_right</span> <span class=\"o\">:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">)))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n<span class=\"c1\">-- all_right  -- works</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">outer_works</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n   <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">)))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n</code></pre></div>\n\n\n<p>In the first lemma, the instance is found. In the second lemma, the instance is not found. But from the point of view of instance resolution, these two things should be the same as the third lemma shows that they are equal for <code> tactic.reflexivity tactic.transparency.instances</code>.</p>",
        "id": 197814878,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589662570
    },
    {
        "content": "<p>This is apparently an issue with typeclass inference, and I'm not qualified to fix it in the C++</p>",
        "id": 197814952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589662708
    },
    {
        "content": "<p>it is not using instance reducibility for some subproblems</p>",
        "id": 197814956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589662731
    },
    {
        "content": "<p>does <code>simp</code> fix it?</p>",
        "id": 197814963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589662761
    },
    {
        "content": "<p>In my use case, the instance has to be inferred automatically even to let me state my lemma, so <code>simp</code> is not really an option...</p>",
        "id": 197815011,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589662804
    },
    {
        "content": "<p>So, your guess if that <code>apply_instance</code> is passing the flag <code>tactic.transparency.reducibility</code> instead of <code>tactic.transparency.instances</code> somewhere. Yes, that would perfectly explain the behavior I am seeing.</p>",
        "id": 197815053,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589662919
    },
    {
        "content": "<p>I guess you could locally hide a bad instance?</p>",
        "id": 197815096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589662937
    },
    {
        "content": "<p>like I doubt you need local rings for this</p>",
        "id": 197815107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589662972
    },
    {
        "content": "<p>Yes, I could certainly do that. But we have already been bitten by this with the <code>pi_instance</code> issue (where it was solved by cleaning up the tactic to make sure that it generates diamonds that are solved with <code>tactic.transparency.reducibility</code>), so I am afraid it will come up again later. If you think this is a C++ problem, all I can do is invoke <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> (but not now, it's the week-end) and pray :)</p>",
        "id": 197815192,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589663156
    },
    {
        "content": "<p>We need the Zulip developers to implement deferred pings.</p>",
        "id": 197815468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589663547
    },
    {
        "content": "<p>I have opened an issue with all the details, and I'll do the manual pinging later.</p>",
        "id": 197815677,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589663935
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  what is your goal with the <code>normed_space</code>/<code>normed_algebra</code> PRs? I mean, do you want to formalize something specific or just filling in a hole in the library?</p>",
        "id": 197822524,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589675864
    },
    {
        "content": "<p>When I noticed these things, I was trying to prove that under appropriate hypotheses C(X, 𝕜) is a Banach algebra.</p>",
        "id": 197826858,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589683938
    },
    {
        "content": "<p>I am not sure what I will try next, maybe Holder spaces.</p>",
        "id": 197826869,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589683975
    },
    {
        "content": "<p>Good idea!</p>",
        "id": 197827168,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589684487
    },
    {
        "content": "<p>I pushed <code>normed_ring</code> instance, then realized that now we do two loosely related changes in one PR.</p>",
        "id": 197827180,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589684522
    },
    {
        "content": "<p>So possibly this part should be reverted and moved to another PR. Do you have a <code>normed_algebra</code> instance?</p>",
        "id": 197827233,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589684620
    },
    {
        "content": "<p>Do you mean, that  C(X, 𝕜) is a normed ring?</p>",
        "id": 197827277,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589684670
    },
    {
        "content": "<p>Or do you mean an internal change to <code>normed_space</code> regarding normed rings?</p>",
        "id": 197827280,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589684693
    },
    {
        "content": "<p>I mean <a href=\"https://github.com/leanprover-community/mathlib/pull/2693/files#diff-245b918311fade9aafa8bc067388f67bR507\">this instance</a></p>",
        "id": 197827362,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589684831
    },
    {
        "content": "<p>Ah great.  Yes, I had some draft code doing approximately that :)</p>",
        "id": 197827401,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589684895
    },
    {
        "content": "<p>The next instance should be something like <code>instance [nonempty α] {R : Type*} [normed_algebra 𝕜 R] : algebra 𝕜 (α →ᵇ R)</code>.</p>",
        "id": 197827402,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589684903
    },
    {
        "content": "<p>But keep it!</p>",
        "id": 197827404,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589684907
    },
    {
        "content": "<p>then <code>normed_algebra</code></p>",
        "id": 197827406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589684911
    },
    {
        "content": "<p>Do you have these instances, or I should write&amp;push mine?</p>",
        "id": 197827409,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589684929
    },
    {
        "content": "<p>Just checked .. I have <code>algebra</code> but not yet <code>normed_algebra</code></p>",
        "id": 197827503,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589685161
    },
    {
        "content": "<p>That was why I caught the missing <code>normed_algebra.to_normed_space</code>instance</p>",
        "id": 197827511,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589685186
    },
    {
        "content": "<p>If you like I can finish tomorrow and push as part of the same PR</p>",
        "id": 197827512,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589685211
    },
    {
        "content": "<p>I've just created a new branch <code>bcf-normed-algebra</code>. I'm going to revert some changes in the <code>norm-smul</code> branch. It would be nice if you'll push the two missing instances to the new branch tomorrow, then open a new PR.</p>",
        "id": 197827638,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589685438
    },
    {
        "content": "<p>Great, will do.</p>",
        "id": 197827650,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589685465
    },
    {
        "content": "<p>I can fix merge conflicts once <code>norm_smul</code> will be merged.</p>",
        "id": 197827696,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589685493
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2693/commits/a5e6999c07b3f84374eed0207b6429f5bef05e01\">reverted</a> This means that we shouldn't merge <code>norm-smul</code> into <code>bcf-normed-algebra</code>.</p>",
        "id": 197827942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589685993
    },
    {
        "content": "<p>I'd love to have the following fact about Hölder continuous functions in <code>mathlib</code>: if <code>f : X → Y</code> is Hölder continuous with exponent <code>α</code>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo><mi mathvariant=\"normal\">dim</mi><mo>⁡</mo></mo><mi>H</mi></msub><mi>Y</mi><mo>≤</mo><mfrac><mn>1</mn><mi>α</mi></mfrac><msub><mo><mi mathvariant=\"normal\">dim</mi><mo>⁡</mo></mo><mi>H</mi></msub><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\operatorname{dim}_H Y \\le \\frac{1}{α}\\operatorname{dim}_H X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">d</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">m</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">d</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">m</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. This is an easy exercise but we have neither Hölder continuous functions nor Hausdorff dimension.</p>",
        "id": 197828494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589687126
    },
    {
        "content": "<p>Yes, I noticed that Hausdorff dimension is missing.  Also a good project.</p>",
        "id": 197828574,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589687265
    },
    {
        "content": "<p>I would like to try to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mrow><mn>2</mn><mo separator=\"true\">,</mo><mi>α</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C^{2,\\alpha}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span></span></span></span></span></span></span></span> estimates for the Newtonian potential</p>",
        "id": 197828634,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589687374
    },
    {
        "content": "<p>Probably there are a lot of things missing before that can be done, but it would be a useful test to show what the library is missing.</p>",
        "id": 197828680,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589687424
    },
    {
        "content": "<p>Then you'll probably need FTC. We have an abandoned PR with it. I hope to take over this PR soon. Unfortunately, I'm getting distracted by other tasks.</p>",
        "id": 197828692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589687470
    },
    {
        "content": "<p>I saw that you are doing the implicit function theorem, that would be really great.</p>",
        "id": 197828702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589687508
    },
    {
        "content": "<p>People could make some examples of manifolds once you do that!</p>",
        "id": 197828748,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589687556
    },
    {
        "content": "<p>It's mostly done but I need complemented subspaces to write a good API.</p>",
        "id": 197828763,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589687631
    },
    {
        "content": "<p>There also needs to be a theory of strict k-times-differentiable functions, right?</p>",
        "id": 197828875,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589687765
    },
    {
        "content": "<p>To get inverse and implicit function theorems in arbitrary differentiability</p>",
        "id": 197828883,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589687795
    },
    {
        "content": "<p>Do we need <code>f</code> to be strictly differentiable <code>k</code> times?</p>",
        "id": 197829112,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589688302
    },
    {
        "content": "<p>Once we have the inverse function, its differentiability follows from differentiability of the original function.</p>",
        "id": 197829121,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589688348
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/fderiv.html#has_fderiv_at.of_local_left_inverse\">this lemma</a></p>",
        "id": 197829179,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589688392
    },
    {
        "content": "<p>Maybe that's right.  Then one ends up with manifolds whose structure groupoid (if I have learned the library's language correctly yet <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> ) consists of functions which are 1-time strictly differentiable, k-times differentiable?</p>",
        "id": 197829394,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589688916
    },
    {
        "content": "<p>The plan is rather to work on reals or complexes, where <code>C^k</code> functions are automatically strictly differentiable.</p>",
        "id": 197834855,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589699252
    },
    {
        "content": "<blockquote>\n<p>People could make some examples of manifolds once you do that!</p>\n</blockquote>\n<p>There are no examples of anything in mathlib. We don't even have dihedral groups. For some reason examples don't form part of the philosophy. I would love to see examples. When we made schemes the computer scientists said we should make examples, and then we proved that the spectrum of a ring was a scheme and somehow this was enough because we can in theory make examples of rings</p>",
        "id": 197837506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589703964
    },
    {
        "content": "<p>Some examples of manifolds are useful for general theory. E.g., there are theorems about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">S^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><msup><mi>P</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb RP^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 197838196,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589705191
    },
    {
        "content": "<p>I think Kenny made the scheme P^1 at some point but the gluing was hard work</p>",
        "id": 197838204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589705239
    },
    {
        "content": "<p>I'm sure S^n would be straightforward once you have the basic theorems. How would you do projective space though?</p>",
        "id": 197838231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589705282
    },
    {
        "content": "<p>It would be nice to have</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">P</mi><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">{\\mathbb P}E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> for a vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span>;</li>\n<li>embedding of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb P^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> into an affine space of larger dimension (don't remember if there is a  general formula for this).</li>\n</ul>",
        "id": 197838267,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589705397
    },
    {
        "content": "<p>Do you have a plan for quotients? What I'm saying is that in alg geom they were a challenge</p>",
        "id": 197838325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589705463
    },
    {
        "content": "<p>I thought about PE earlier (like a year ago maybe), and I decided that PE requires Grassmannian which requires linear algebra</p>",
        "id": 197838335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589705509
    },
    {
        "content": "<p>Putting a manifold structure on the quotient of a manifold by a lie group action might be a challenge. Will there be underlying type theory problems which mathematicians don't usually notice?</p>",
        "id": 197839199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589706932
    },
    {
        "content": "<p>I'm thinking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">G/H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> with for example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mi>G</mi><msub><mi>L</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G=GL_2(\\mathbb{R})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span></span></span></span> the upper triangular matrices.</p>",
        "id": 197839291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589707053
    },
    {
        "content": "<p>Specifically for the projective space we can come up with an explicit atlas</p>",
        "id": 197839348,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589707101
    },
    {
        "content": "<p>I would have said the same thing about the alg geom projective space but it was much easier said than done in practice</p>",
        "id": 197840301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589708572
    },
    {
        "content": "<p>We'll need affine charts for projective spaces at some-point (but first we'll need affine spaces...). But this is not the morally correct way to put a manifold structure on them. We need quotient manifolds.</p>",
        "id": 197840783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589709359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197838267\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">P</mi><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">{\\mathbb P}E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> for a vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span>;</li>\n<li>embedding of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb P^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> into an affine space of larger dimension (don't remember if there is a  general formula for this).</li>\n</ul>\n</blockquote>\n<p>I believe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb P^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> embeds (non-holomorphically) into the space of Hermitian <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n+1)\\times(n+1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> matrices.</p>",
        "id": 197850455,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589723814
    },
    {
        "content": "<p>But a non-holomorphic embedding only allows one to construct it (via the implicit function theorem) as a real manifold, not as a complex manifold.</p>",
        "id": 197850485,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589723879
    },
    {
        "content": "<p>A bounded holomorphic function is constant, so there is no holomorphic embedding.</p>",
        "id": 197850578,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589723987
    },
    {
        "content": "<p>I think constructing projective n-space as a complex manifold might be quite challenging, given what we have.</p>",
        "id": 197850649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589724057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197839199\">said</a>:</p>\n<blockquote>\n<p>Putting a manifold structure on the quotient of a manifold by a lie group action might be a challenge. Will there be underlying type theory problems which mathematicians don't usually notice?</p>\n</blockquote>\n<p>The right theorem is, the quotient by a free proper action is a manifold.</p>",
        "id": 197850740,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724135
    },
    {
        "content": "<p>I think, for this, one needs existence &amp; uniqueness for ODEs</p>",
        "id": 197850765,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724175
    },
    {
        "content": "<p>In Lean this will be a definition, not a theorem, and it might be challenging.</p>",
        "id": 197850771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589724180
    },
    {
        "content": "<p>But you also can't construct CP^n as a complex manifold this way, can you?</p>",
        "id": 197850781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589724192
    },
    {
        "content": "<p>Not the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> action on a vector space of one dimension higher, minus the origin?</p>",
        "id": 197850790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589724222
    },
    {
        "content": "<p>Yes, I think that's fine.</p>",
        "id": 197850800,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724234
    },
    {
        "content": "<p>Isn't it not proper?</p>",
        "id": 197850802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589724236
    },
    {
        "content": "<p>Oh maybe I don't know what proper means</p>",
        "id": 197850803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589724239
    },
    {
        "content": "<p>Maybe I don't know!</p>",
        "id": 197850843,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589724244
    },
    {
        "content": "<p>Proper in this case means that the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>×</mo><mi>M</mi><mo>→</mo><mi>M</mi><mo>×</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">G\\times M \\to M \\times M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is proper.</p>",
        "id": 197850888,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724298
    },
    {
        "content": "<p>I think that's fine here.</p>",
        "id": 197850892,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724303
    },
    {
        "content": "<p>Anyway, even if not, one could take the quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">S^{2n+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">S^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 197850905,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724333
    },
    {
        "content": "<p>Yes, I was just dimly recalling this definition. That's fine then.</p>",
        "id": 197850909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589724339
    },
    {
        "content": "<p>Then Reid's point is that this doesn't give the complex structure</p>",
        "id": 197850914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589724352
    },
    {
        "content": "<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">C</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mi mathvariant=\"double-struck\">C</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{C}^{n+1} - \\{0\\})/\\mathbb{C}^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> definition is fine though, I was just using the wrong definition of proper quotient.</p>",
        "id": 197850999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589724452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197850740\">said</a>:</p>\n<blockquote>\n<p>The right theorem is, the quotient by a free proper action is a manifold.</p>\n</blockquote>\n<p>Just skimming the proof .</p>",
        "id": 197851110,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724575
    },
    {
        "content": "<p>First, implicit function theorem to show that the G-orbits are properly embedded submanifolds</p>",
        "id": 197851165,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724614
    },
    {
        "content": "<p>Then, existence &amp; uniqueness for ODEs, with smooth dependence on initial conditions, to put charts on the G-orbits via the exponential map, uniformly across a slice.</p>",
        "id": 197851201,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589724697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197850649\">said</a>:</p>\n<blockquote>\n<p>I think constructing projective n-space as a complex manifold might be quite challenging, given what we have.</p>\n</blockquote>\n<p>But why can projective n-space not currently be constructed from n+1 affine charts?</p>",
        "id": 197851457,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589725030
    },
    {
        "content": "<p>Ask <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 197851467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725052
    },
    {
        "content": "<p>Is it just that it's still a pain to differentiate actual functions?</p>",
        "id": 197851477,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589725077
    },
    {
        "content": "<p>The problem, I believe, is that quotients are very intuitive to mathematicians but my limited experience with using them in Lean to make complex objects has been extremely painful.</p>",
        "id": 197851526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725119
    },
    {
        "content": "<p>You have two copies of affine 1-space, and then you take the disjiont union, make the quotient, and now we have the underlying type</p>",
        "id": 197851535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725145
    },
    {
        "content": "<p>but now you need to actually make a structure which has been formalised but which is truly complicated</p>",
        "id": 197851543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725171
    },
    {
        "content": "<p>and building that structure will involve actually checking all the axioms</p>",
        "id": 197851548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725185
    },
    {
        "content": "<p>and Patrick's experience checking that various definitions of manifolds were equivalent was a lot more difficult than he expected.</p>",
        "id": 197851592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725223
    },
    {
        "content": "<p>I see.  So when you construct it from n+1 charts, you are not actually avoiding a quotient construction.  You are just introducing a messier quotient construction.</p>",
        "id": 197851597,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589725235
    },
    {
        "content": "<p>Now we've gone with one. Maybe it was the best for making an API or something.</p>",
        "id": 197851599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725240
    },
    {
        "content": "<p>disjoint union of n+1 copies of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> via identification of points</p>",
        "id": 197851609,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589725252
    },
    {
        "content": "<p>But now let's see whether it's any good for making an example.</p>",
        "id": 197851610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725253
    },
    {
        "content": "<p>rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>∖</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^{n+1}\\setminus\\{0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 197851617,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589725269
    },
    {
        "content": "<p>Yes, making the underlying type is no problem. But now you have to hope that quotient topologies and quotient functions and quotient \"I am differentiable\" and everything all works fine</p>",
        "id": 197851621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725290
    },
    {
        "content": "<p>Glueing and quotienting by a group action are both quotients from the point of view of type theory</p>",
        "id": 197851629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725316
    },
    {
        "content": "<p>All I'm saying is that it might be painful but possible. This was what happened in alg geom anyway.</p>",
        "id": 197851669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725337
    },
    {
        "content": "<p>And diff geom is harder :-)</p>",
        "id": 197851670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725348
    },
    {
        "content": "<p>Both of these constructions are of course very important in general.</p>",
        "id": 197851674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589725366
    },
    {
        "content": "<p>For me this was a shock. We had two rings A and B, an explicit isomorphism A[1/f]=B[1/g], where of course I'm using equality the way a mathematician does, but then to get the corresponding isomorphism of the locally ringed spaces is not immediate in dependent type theory, and a locally ringed space is a complex object. However I believe the objects you're dealing with are more complex</p>",
        "id": 197851890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589725694
    },
    {
        "content": "<p>Has someone done the quotient of a topological space by an equivalence relation, yet?</p>",
        "id": 197851989,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589725876
    },
    {
        "content": "<p>Yes: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/constructions.lean#L45-L49\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/constructions.lean#L45-L49</a></p>",
        "id": 197852042,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589725926
    },
    {
        "content": "<p>(the second one, for an equivalence relation, but the construction is the same)</p>",
        "id": 197852048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589725949
    },
    {
        "content": "<p>I'm sorry I missed the fun discussion. I haven't read very carefully all messages, but I have a couple of comments. </p>\n<ul>\n<li>Kevin likes to say differential geometry is harder than algebraic geometry but this is of course meaningless (and he knows it)</li>\n<li>There is no obstruction at all to defining projective spaces in currently mathlib, including the topology in the real or complex cases.</li>\n<li>There is no obstruction to build a manifold structure on projective space in the real and complex cases. We could do that in at most one day. But it would bring us nothing interesting.</li>\n<li>There is an obstruction to quickly do it right, because the natural proof requires machinery that would take time to build. This would be interesting.</li>\n</ul>",
        "id": 197858958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589735561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197851535\">said</a>:</p>\n<blockquote>\n<p>You have two copies of affine 1-space, and then you take the disjiont union, make the quotient, and now we have the underlying type</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , are you saying that doing this for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}^{n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span> using n+1 charts is not actually that hard?</p>",
        "id": 197859161,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589735842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197850740\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Putting a manifold structure on the quotient of a manifold by a lie group action might be a challenge. Will there be underlying type theory problems which mathematicians don't usually notice?</p>\n</blockquote>\n<p>The right theorem is, the quotient by a free proper action is a manifold.</p>\n</blockquote>\n<p>And is this what you mean by \"the right way\"?</p>",
        "id": 197859219,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589735884
    },
    {
        "content": "<p>What Kevin wrote is not the right. The underlying type should be the natural one, without making any choice. Start with a vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and define the obvious quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>∖</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">E \\setminus \\{0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span> to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(E)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>. And then, assuming the base field is real or complex numbers  there are two roads. In the first road you define affine charts (which will be very sad because we don't have affine spaces) and check transition maps are real or complex analytic (here I'm not sure whether Sébastien is totally ready, maybe I should say smooth instead of analytic). This is what I call the wrong way, but I'm exaggerating a bit when I write this would bring nothing good. What I call the right way is to setup the quotient manifold infrastructure.</p>",
        "id": 197859529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589736281
    },
    {
        "content": "<p>Note that I never mention trying to get exactly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> charts (or finite dimensionality). I don't see what good it would do. Affine chart are defined as soon as you fix a hyperplane, and their canonical affine structure is much more apparent if you don't pollute things with coordinates.</p>",
        "id": 197859621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589736390
    },
    {
        "content": "<p>OK, makes sense!</p>",
        "id": 197859804,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589736642
    },
    {
        "content": "<p>Even while the quotient infrastructure is not yet set up, people could work on defining Lie groups, Lie group actions, freeness and properness of Lie group actions</p>",
        "id": 197859884,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589736752
    },
    {
        "content": "<p>And make a bunch of examples of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>-actions and discrete group actions</p>",
        "id": 197859899,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589736771
    },
    {
        "content": "<p>(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> and discrete groups being the only Lie groups available without the implicit function theorem)</p>",
        "id": 197859929,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589736802
    },
    {
        "content": "<p>So that as soon as the quotient manifold infrastructure is done, there are immediately several new examples of manifolds produced</p>",
        "id": 197859994,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589736864
    },
    {
        "content": "<p>Off topic: A poor man's definition of an automorphic form is a function on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL(n,\\mathbb{R})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mclose\">)</span></span></span></span> which satisfies certain differential equations (coming from the centre of the universal enveloping algebra of the Lie alegbra). I feel like we are slowly but surely converging to the point where we might be able to do this.</p>",
        "id": 197860092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589737003
    },
    {
        "content": "<p>This is all part of the missing infrastructure, so yes, these are all steps in the right direction</p>",
        "id": 197860193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589737126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Merged master into <code>bcf-normed-algebra</code>.</p>",
        "id": 197862397,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589740058
    },
    {
        "content": "<p>Thanks, doing the rest now.  I discovered that the <code>normed_algebra</code> structure on bounded continuous functions only works when the domain is nonempty!</p>",
        "id": 197862789,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589740507
    },
    {
        "content": "<p>It uses <a href=\"https://github.com/leanprover-community/mathlib/blob/3449510c095f2f9dc81456cebf1f0054d0bb8231/src/topology/bounded_continuous_function.lean#L406\">this lemma</a><br>\n<code>@[simp] lemma norm_const_eq [h : nonempty α] (b : β) : ∥const α b∥ = ∥b∥ </code></p>",
        "id": 197862868,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589740587
    },
    {
        "content": "<p>Is there a way to add a hypothesis to an instance?</p>",
        "id": 197862891,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589740627
    },
    {
        "content": "<p>The instance might never trigger, unless the hypothesis is itself a typeclass.</p>",
        "id": 197862906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589740676
    },
    {
        "content": "<p><code>instance [nonempty α] : normed_algebra ...</code></p>",
        "id": 197862931,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589740682
    },
    {
        "content": "<p>Sorry, another question, very much like <a href=\"#narrow/stream/113489-new-members/topic/.22variables.22.20command/near/197580120\">this one</a> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  answered for me on Thursday.  The following </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>fails with \"invalid apply tactic, failed to unify <code>a * b = b * a</code> with <code>?m_3 * ?m_4 = ?m_4 * ?m_3</code> \".  (I discovered this while trying to get that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo separator=\"true\">,</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(α, R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span> is commutative if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is.)</p>",
        "id": 197863772,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589741923
    },
    {
        "content": "<p>Is this impossible to fix without implementing a theory of <code>normed_comm_ring</code> which unifies <code>comm_ring</code> and <code>normed_ring</code>?</p>",
        "id": 197863799,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589741953
    },
    {
        "content": "<p>I think you're right, you need one more typeclass.</p>",
        "id": 197863850,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589742015
    },
    {
        "content": "<p>PR'd, <a href=\"https://github.com/leanprover-community/mathlib/issues/2722\">#2722</a></p>",
        "id": 197888167,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589776161
    },
    {
        "content": "<p>I decided not to make <code>normed_comm_ring</code>, that can wait for a future refactor of <code>normed_space.basic</code></p>",
        "id": 197888299,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589776356
    }
]