[
    {
        "content": "<p>I'm going to introduce</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">measurable_embedding</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">injective</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">measurable</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">measurable_set_image'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">s</span><span class=\"o\">⦄,</span> <span class=\"n\">measurable_set</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">measurable_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 259426816,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635443450
    },
    {
        "content": "<p>Currently we have separate lemmas about <code>closed_embedding</code>s and <code>measurable_equiv</code>s.</p>",
        "id": 259426887,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635443483
    },
    {
        "content": "<p>With this definition we can generalize all these lemmas to <code>measurable_embedding</code>s.</p>",
        "id": 259426924,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635443504
    },
    {
        "content": "<p>(an <code>embedding</code> is a <code>measurable_embedding</code> if it has a measurable range, so any closed embedding is a measurable embedding)</p>",
        "id": 259427068,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635443549
    },
    {
        "content": "<p>Any objections/comments?</p>",
        "id": 259427099,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635443562
    },
    {
        "content": "<p>Would it make sense to extend \"embedding\"?</p>",
        "id": 259440692,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635449742
    },
    {
        "content": "<p>That bundles the function, right?</p>",
        "id": 259440922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635449863
    },
    {
        "content": "<p>Yes</p>",
        "id": 259440949,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635449879
    },
    {
        "content": "<p>I don't know the measure part of the library, how often one needs solely props or works with families of measurable functions.</p>",
        "id": 259441076,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635449931
    },
    {
        "content": "<p>An <code>embedding</code> says something about topology, so I don't want to extend it.</p>",
        "id": 259443727,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635451138
    },
    {
        "content": "<p>I don't want to bundle the function because I'm not going to make statements about the space of all measurable embeddings (see also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/embedding\">docs#embedding</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closed_embedding\">docs#closed_embedding</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/open_embedding\">docs#open_embedding</a>).</p>",
        "id": 259443905,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635451208
    },
    {
        "content": "<p>With a predicate we can do <code>rw [hf.some_lemma]</code> without moving to bundled functions first.</p>",
        "id": 259444107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635451286
    },
    {
        "content": "<p>Right now I have theory about <code>measurable_embedding</code>s up to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If `g : α → β` is a measurable embedding and `f : β → ℝ≥0∞` is any function (not necessarily</span>\n<span class=\"sd\">measurable), then `∫⁻ a, f a ∂(map g μ) = ∫⁻ a, f (g a) ∂μ`. Compare with `lintegral_map` wich</span>\n<span class=\"sd\">applies to any measurable `g : α → β` but requires that `f` is measurable as well. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lintegral_map_embedding</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">measurable_embedding</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫⁻</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 259447047,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635452665
    },
    {
        "content": "<p>Sorry I wasn't clear, I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding\">docs#function.embedding</a></p>",
        "id": 259466641,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635464536
    },
    {
        "content": "<p>Also, should stuff in topology be disambiguated? There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/embedding\">docs#embedding</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite\">docs#locally_finite</a>... I assume those names are historical artifacts because not much was here to concurrence them back when they got defined, right?</p>",
        "id": 259466748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635464623
    },
    {
        "content": "<p><code>function.embedding</code> has bundled <code>to_fun</code>, and I want to have a predicate like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/embedding\">docs#embedding</a>.</p>",
        "id": 259467750,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635465407
    }
]