[
    {
        "content": "<p>Hi! I'm playing around with <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" title=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a>, and I'm at level 15 of the inequality world.<br>\nI have a hypothesis <code>h : ¬∃ (c : mynat), a = b + c</code> and I'm not really sure how to use it. What I'd do outside of lean is \"assume there is such a c, let's show we get to a contradiction\", but I don't know how to express that.<br>\nCould anybody help?</p>",
        "id": 193756614,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586769969
    },
    {
        "content": "<p>You have a <em>hypothesis</em> that such a c gives you a contradiction, so your argument outside of Lean just gives you another proof of that hypothesis. I don't understand your logic here.</p>",
        "id": 193756741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586770101
    },
    {
        "content": "<p>Point taken. How would I do that with the goal, then?</p>",
        "id": 193756992,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586770348
    },
    {
        "content": "<p>and let's say I have a specific <code>d</code> such as <code>a = b + d</code>, how do I get to false with <code>h</code>?</p>",
        "id": 193757078,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586770447
    },
    {
        "content": "<p>Is your goal false? If so,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Should do, if your goal is not false, then you could use <code>exfalso</code> to turn it into false.</p>",
        "id": 193757193,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586770577
    },
    {
        "content": "<p>Thanks for the tip!</p>",
        "id": 193757249,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586770626
    },
    {
        "content": "<p>so how can I turn a proof into the absurd? i.e. I'm trying to prove <code>p</code>, how do I get to \"given not p, prove false\"?</p>",
        "id": 193757319,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586770686
    },
    {
        "content": "<p>I think it's <code>by_contradiction</code></p>",
        "id": 193757343,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586770721
    },
    {
        "content": "<p>So proof by contardiction? <code>by_contra</code> (or <code>by_contradiction</code>)</p>",
        "id": 193757347,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586770726
    },
    {
        "content": "<p>I tried that, but I'm getting this:<br>\n<code>tactic by_contradiction failed, target is not a negation nor a decidable proposition (remark: when 'local attribute classical.prop_decidable [instance]' is used all propositions are decidable)\nstate:\na b d : mynat,\nh : b = a + d,\nh1 : ¬∃ (c : mynat), a = b + c\n⊢ succ a ≤ b</code></p>",
        "id": 193757486,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586770886
    },
    {
        "content": "<p>it works when my goal is a negation, though, but not like this</p>",
        "id": 193757549,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586770927
    },
    {
        "content": "<p>Can you post what you have so far? It's a bit hard to work out what is happening only looking at goals and error mesages.</p>",
        "id": 193757568,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586770957
    },
    {
        "content": "<p>Well, you have the state in the error :)</p>",
        "id": 193757662,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586771081
    },
    {
        "content": "<p>Oh! I did not put a decidable equality on mynat so this tactic might not work if I didn't put classical mode on</p>",
        "id": 193757685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771100
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lt_aux_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 193757702,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586771109
    },
    {
        "content": "<p>Quote code using <code> ```lean </code> at the top and <code> ``` </code> at the bottom</p>",
        "id": 193757716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771139
    },
    {
        "content": "<p>Just use <code>exfalso</code> here though</p>",
        "id": 193757766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771165
    },
    {
        "content": "<p>Anyone up to PR <code>by_contra!</code> and <code>by_contradiction!</code> to skip the decidable check?</p>",
        "id": 193757776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586771195
    },
    {
        "content": "<p>And remember that not X just <em>means</em> X implies false</p>",
        "id": 193757786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"err\">«</span><span class=\"n\">by_contra</span><span class=\"bp\">!</span><span class=\"err\">»</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">by_contra</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 193757795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586771224
    },
    {
        "content": "<p>sorry, <code>by_contra!</code> isn't an identifier</p>",
        "id": 193757807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586771244
    },
    {
        "content": "<p>PR!</p>",
        "id": 193757809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771245
    },
    {
        "content": "<p>yeah, I remember the equivalence with the implication, but it's kinda hard to use</p>",
        "id": 193757814,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586771257
    },
    {
        "content": "<p>You can use <code>apply</code> if you have a hypothesis which is an implication</p>",
        "id": 193757870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771284
    },
    {
        "content": "<p>and exfalso doesn't really help here, it's not true AFAICT</p>",
        "id": 193757871,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586771285
    },
    {
        "content": "<p>Exfalso is what you need</p>",
        "id": 193757881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771296
    },
    {
        "content": "<p>It helps</p>",
        "id": 193757885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771300
    },
    {
        "content": "<p>Use exfalso and now your goal is Y (= false) and you have a hypothesis X-&gt; Y so you can apply it</p>",
        "id": 193757910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771347
    },
    {
        "content": "<p>Sure, but I end up with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</pre></div>\n\n\n<p>which is not true (you can put c = 0 and it would be true for d = 0, but not for all d)</p>",
        "id": 193758108,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586771585
    },
    {
        "content": "<p>Try <code>cases d</code> first? Then use <code>exfalso</code> for the first goal.</p>",
        "id": 193758126,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586771617
    },
    {
        "content": "<p>This is fine</p>",
        "id": 193758134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771627
    },
    {
        "content": "<p>What do you mean it's not true? You can prove it</p>",
        "id": 193758181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771650
    },
    {
        "content": "<p>It's easy to prove using h</p>",
        "id": 193758188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771670
    },
    {
        "content": "<p>This is exactly the way to proceed</p>",
        "id": 193758203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771688
    },
    {
        "content": "<p>Oh sorry</p>",
        "id": 193758226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771715
    },
    {
        "content": "<p>I've misread</p>",
        "id": 193758232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771729
    },
    {
        "content": "<p>:-(</p>",
        "id": 193758236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771735
    },
    {
        "content": "<p>Ah, thanks, with <code>cases d</code> it works fine</p>",
        "id": 193758297,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586771779
    },
    {
        "content": "<p>:-)</p>",
        "id": 193758303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771786
    },
    {
        "content": "<p>Sorry, I misread h. A lot of what I said was nonsense</p>",
        "id": 193758335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771837
    },
    {
        "content": "<p>Thanks everyone!</p>",
        "id": 193758343,
        "sender_full_name": "Valentin Tolmer",
        "timestamp": 1586771865
    }
]