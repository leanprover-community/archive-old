[
    {
        "content": "<p>Hi, I'm wondering how to perform induction on <code>fin n</code>? I want to rewrite the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>  <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">chain</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">ops</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ops</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">chain</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>to be able to work with <code>fin n</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">opsFin</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">chainFin</span><span class=\"o\">(</span><span class=\"n\">finZero</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)):</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Op</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">finZero</span> <span class=\"o\">:=</span> <span class=\"n\">opsFin</span> <span class=\"n\">finZero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opsFin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">chainFin</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However currently I am getting the error <code>cannot synthesize placeholder (x)</code>.</p>",
        "id": 267499722,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641848784
    },
    {
        "content": "<p>That's because <code>fin n</code> is not an inductive type, but a subtype. What are you trying to do eventually?</p>",
        "id": 267500024,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641848906
    },
    {
        "content": "<p>I'm just trying to define the inductive <code>chain</code> function that takes <code>fin n</code> as an argument</p>",
        "id": 267500144,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641848973
    },
    {
        "content": "<p>Also you're feeding in the <em>statement</em> that <code>fin n</code> has a zero, rather than the zero itself.</p>",
        "id": 267500150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641848976
    },
    {
        "content": "<p>What's the inductive <code>chain</code> function? I can think of many chain concepts.</p>",
        "id": 267500196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641848999
    },
    {
        "content": "<p>So i have a series of <code>n</code> differential operators on <code>A</code>, so for example <code>D_1, D_2, ...</code>, and the <code>i</code>th chain should be <code>D_1 D_2 ... D_i</code></p>",
        "id": 267500422,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641849084
    },
    {
        "content": "<p>Have you considered the option of defining them as junk value when greater than <code>n</code>? This might make your life easier.</p>",
        "id": 267501173,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641849374
    },
    {
        "content": "<p>Haha yeah, but I also need to do alot of induction with <code>n</code> in my project later anyways so I thought I might as well figure out how to do it at the start</p>",
        "id": 267501259,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641849433
    },
    {
        "content": "<p>Even more so then!</p>",
        "id": 267501284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641849445
    },
    {
        "content": "<p>Is there no good way to do induction on <code>fin n</code>?</p>",
        "id": 267501293,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641849446
    },
    {
        "content": "<p>Not really, <code>fin n</code> is an annoying little guy</p>",
        "id": 267501335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641849466
    },
    {
        "content": "<p>By that I mean that instead of having <code>D : fin n → B → B</code>, you have <code>D : ℕ → B → B</code> and you just don't care about what <code>D k</code> is for <code>n ≤ k</code>.</p>",
        "id": 267501399,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641849504
    },
    {
        "content": "<p>Oh I see, thanks for your help then, I'll just do my best to work around it</p>",
        "id": 267501415,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641849513
    },
    {
        "content": "<p>If ever you need some extensionality property, like \"My sequences of differential operators <code>D</code> and <code>E</code> agree if <code>D 0 = E 0</code>, ..., <code>D n = E n</code>, then you might want to force the junk value to be <code>id</code> or something. If you do not constrain it, you can have two sequences that are the same everywhere you care about, but don't have the same junk values. I have no idea whether it's a problem in your case.</p>",
        "id": 267501684,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641849637
    },
    {
        "content": "<p>I think Anne made the equation compiler work on <code>fin n</code> but I can't find the commit.</p>",
        "id": 267503757,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641850530
    },
    {
        "content": "<p>You have to match on <code>⟨0, _⟩</code> and <code>⟨n+1, h⟩</code> I think</p>",
        "id": 267514592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641855927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462368\">@Jeffrey Li</span> Is this roughly what you're looking for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.tuple.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">chainFin</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">ops</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ops</span> <span class=\"o\">:=</span> <span class=\"n\">chainFin</span> <span class=\"o\">(</span><span class=\"n\">fin.init</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">ops</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 267520165,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641859683
    },
    {
        "content": "<p>I wasn't sure what <code>Op</code> was so I had <code>(A → A)</code> stand in for it.</p>",
        "id": 267520251,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641859746
    },
    {
        "content": "<p>Just to show its properties:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">chainFin_one</span> <span class=\"o\">(</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">chainFin</span> <span class=\"n\">ops</span> <span class=\"bp\">=</span> <span class=\"n\">ops</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chainFin_two</span> <span class=\"o\">(</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">chainFin</span> <span class=\"n\">ops</span> <span class=\"bp\">=</span> <span class=\"n\">ops</span> <span class=\"mi\">0</span> <span class=\"bp\">∘</span> <span class=\"n\">ops</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chainFin_three</span> <span class=\"o\">(</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">chainFin</span> <span class=\"n\">ops</span> <span class=\"bp\">=</span> <span class=\"n\">ops</span> <span class=\"mi\">0</span> <span class=\"bp\">∘</span> <span class=\"n\">ops</span> <span class=\"mi\">1</span> <span class=\"bp\">∘</span> <span class=\"n\">ops</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 267520409,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641859855
    }
]