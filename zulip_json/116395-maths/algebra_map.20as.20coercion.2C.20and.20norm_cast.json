[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization.fraction_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.div</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.field_simp</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- example (f : R[X]) : K := f -- fails</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">⟩</span> <span class=\"c1\">-- I'm so cunning</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">polynomial</span>\n</code></pre></div>\n<p>Is there a way of getting <code>norm_cast</code> to work on a custom coercion? Note that <code>algebra_map</code> is a <code>ring_hom</code>.</p>",
        "id": 290458972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658458805
    },
    {
        "content": "<p>You'd have to make the simp lemma and tag the appropriate lemmas with norm_cast, which I think you can do just with attribute ...</p>",
        "id": 290459131,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658459010
    },
    {
        "content": "<p>To make full use of norm_cast you need <code>move</code>, <code>elim</code> and <code>squash</code> lemmas, as mentioned in p.4 of <a href=\"https://lean-forward.github.io/norm_cast/norm_cast.pdf\">the paper</a>.</p>",
        "id": 290459516,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658459473
    },
    {
        "content": "<p>I also think this would be a nice idea, I've <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/norm_cast.20for.20algebras\">asked about it before</a>, but <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> at the time thought it would be impractical.</p>",
        "id": 290460969,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1658461237
    },
    {
        "content": "<p>Separately, I think we've had multiple discussions about the canonical notation for <code>algebra_map</code> be <code>has_lift_t</code> or sometimes even <code>has_coe_t</code>.</p>",
        "id": 290532557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658506509
    },
    {
        "content": "<p>That's much more appealing now that the diamonds for nat.cast, int.cast, and rat.cast are all gone</p>",
        "id": 290532586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658506534
    },
    {
        "content": "<p>For what it's worth, I got this working fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.algebra_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization.fraction_ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_algebra_map_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">@[norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_algebra_map_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">@[norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_algebra_map_zero</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_algebra_map_pow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">map_pow</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- random extra one for the case I was interested in</span>\n<span class=\"kd\">@[norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_algebra_map_inj_iff</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_fraction_ring.injective</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span>\n</code></pre></div>",
        "id": 290553900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658516688
    }
]