[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">span_singleton_eq_bot</span> <span class=\"o\">:</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">span_eq_bot</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n\n\n<p>There is one of these in <code>linear_algebra.basic</code> (for modules) and another one in <code>ring_theory.ideals</code> (for ideals). Should they be <code>simp</code> lemmas? <code>simp</code> can't solve <code>span R {0} = ⊥</code> otherwise. Or should they not be <code>simp</code> lemmas but I should add two simp lemmas <code>span_zero : span R {0} = ⊥</code> ?</p>",
        "id": 202678710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593691634
    },
    {
        "content": "<p>They should be simp lemmas and so should <code>span R {0} = bot</code>.</p>",
        "id": 202681751,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593693606
    },
    {
        "content": "<p>I don't think they can both be simp lemmas because one shadows the other</p>",
        "id": 202681882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593693702
    },
    {
        "content": "<p>That way <code>simp * at *</code> will still simplify <code>span R {x}</code> to <code>bot</code> when there's a <code>h : span R{x} =bot </code> even if <code>h</code> gets simplified first.</p>",
        "id": 202681986,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593693748
    },
    {
        "content": "<p>Oh yes. Damn.</p>",
        "id": 202682009,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593693764
    },
    {
        "content": "<p>Hang on. Is there a loop?</p>",
        "id": 202682058,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593693798
    },
    {
        "content": "<p>actually I take it back, you can prove <code>span R {0} = bot</code> using <code>by simp</code> but that doesn't mean that <code>span R {0} = x</code> will simplify with only the rule <code>span R ({x} : set M) = ⊥ ↔ x = 0</code></p>",
        "id": 202682109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593693827
    },
    {
        "content": "<p>I had guessed that if I added <code>@[simp]</code> to <code>span_singleton_eq_bot</code> and also added <code>span_zero</code> as a simp lemma then the linter would complain.</p>",
        "id": 202683968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593694811
    },
    {
        "content": "<p>I just checked and I was wrong.</p>",
        "id": 202684147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593694896
    },
    {
        "content": "<p>OK so I'll add simp to the two existing <code>span_singleton_eq_bot</code> lemmas and also add two new <code>span_zero</code> simp lemmas.</p>",
        "id": 202685077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593695323
    }
]