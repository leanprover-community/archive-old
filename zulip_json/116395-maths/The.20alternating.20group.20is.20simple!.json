[
    {
        "content": "<p>Finally, Lean know that the alternating group (in 5 letters or more) is simple !<br>\nThis will be my Christmas gift to y'all! </p>\n<p>The proof is contained in the branch named an-very-simple, (<a href=\"https://github.com/leanprover-community/mathlib/tree/an-very-simple\">https://github.com/leanprover-community/mathlib/tree/an-very-simple</a>).  It is basically the proof contained in James Milne's booklet <em>Group theory</em> (4.34-4.36), with some simplifications explained in a blog post on <a href=\"https://freedommathdance.blogspot.com/2021/12/the-very-simple-proof-that-alternating.html\">Freedom Math Dance</a>.</p>\n<p>Presumably, a lot of simplifications and golfing will be possible.</p>\n<p>I have 5 files :</p>\n<ul>\n<li><code>an-very-simple.lean</code>: the main proof</li>\n<li><code>basic_lemma.lean</code>: an auxiliary lemma that selects some cycle types of permutations satisfying relevant properties. This is done in an ad hoc manner, and I expect that tactic reasoning could provide an automatic enumeration/selection process.</li>\n<li><code>ad_sub_mul_actions.lean</code>: some definitions of <code>mul_action</code> on various other structures (<code>set</code>, <code>finset</code>, <code>list</code>)</li>\n<li><code>multiset_pigeonhole.lean</code>: some basic inequalities on multisets which are used in the <code>basic_lemma</code>.</li>\n<li><code>pairs.lean</code>: essentially useless API to work on pairs, was used at some point, and could probably be deleted.</li>\n</ul>",
        "id": 266008041,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640358839
    },
    {
        "content": "<p>Thanks to all of you who helped me in this adventure. Especially to <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>!</p>",
        "id": 266008163,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640358950
    },
    {
        "content": "<p>(I will now go prepare the Christmas dinner and won't probably work until next monday.)</p>",
        "id": 266008224,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640359005
    },
    {
        "content": "<p>Congratulations! We've already talked about it in private, but I think mathlib could have <code>strict_sym</code> a version of <code>sym</code> for finsets. It comes up here, and many other places. For example, the <code>n</code>-th braid group is the fundamental group of <code>strict_sym ℂ n</code>.</p>",
        "id": 266008239,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640359036
    },
    {
        "content": "<p>This remark makes me wish that Lean had HOTT, then one could prove something like this at the type level!</p>",
        "id": 266008326,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640359106
    },
    {
        "content": "<p>Yeah but then would we be able to prove all the other stuff or would a change in the definition of equality break everything or make it much much harder to write code? Nobody knows</p>",
        "id": 266008526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640359288
    },
    {
        "content": "<p>non-serious: <a href=\"https://github.com/gebner/hott3\">https://github.com/gebner/hott3</a> ;b</p>",
        "id": 266008535,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640359302
    },
    {
        "content": "<p>it is incompatible with the type theory of lean in a way that seems minor, as well</p>",
        "id": 266008598,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640359329
    },
    {
        "content": "<p>(but is not as it can prove <code>false</code>)</p>",
        "id": 266008600,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640359335
    },
    {
        "content": "<p>I'm not sure I understand <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> what is <code>strict_sym</code> supposed to do?</p>",
        "id": 266008643,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640359388
    },
    {
        "content": "<p>Félicitations Antoine !</p>",
        "id": 266008648,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640359399
    },
    {
        "content": "<p><code>sym α n</code> is <code>{s : multiset α // s.card = n}</code>. <code>strict_sym α n</code> would be <code>{s : finset α // s.card = n}</code></p>",
        "id": 266008983,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640359751
    },
    {
        "content": "<p>Ok I see... But to get the topology on this you would still want to represent the configuration space as a quotient of the product minus the pairwise diagonals.</p>",
        "id": 266009069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640359831
    },
    {
        "content": "<p>But this type is neat and simple, so I was thinking that instead we could get its topology from lifting rather than quotienting.</p>",
        "id": 266009206,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640359993
    },
    {
        "content": "<p>The space of ordered n-tuples on a space also shows up in math, and the relation between these two is pretty important.</p>",
        "id": 266009286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640360045
    },
    {
        "content": "<p>E.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mi>n</mi><mo>+</mo><mn>3</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}_{0,n+3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 266009325,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640360102
    },
    {
        "content": "<p>Ordered tuples are just a pi type, though?</p>",
        "id": 266009638,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640360466
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[derive topological_space]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar_setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">X</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f.1</span> <span class=\"bp\">=</span> <span class=\"n\">g.1</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[derive topological_space]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">bar_setoid</span> <span class=\"n\">X</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266009701,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640360527
    },
    {
        "content": "<p>now go compute <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>b</mi><mi>a</mi><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi_1(bar)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ba</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span> ;)</p>",
        "id": 266009709,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640360556
    },
    {
        "content": "<p>Well, I just summon Shing!</p>",
        "id": 266009718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640360570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/The.20alternating.20group.20is.20simple!/near/266009638\">said</a>:</p>\n<blockquote>\n<p>Ordered tuples are just a pi type, though?</p>\n</blockquote>\n<p>I should have said ordered $n$-tuples of distinct points.</p>",
        "id": 266009855,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640360762
    },
    {
        "content": "<p>Subtype of pi types such that it is injective?</p>",
        "id": 266011886,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640363250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> see code above</p>",
        "id": 266012419,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640363926
    },
    {
        "content": "<p>btw <code>foo</code> is <code>embedding</code> :)</p>",
        "id": 266013300,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640365017
    },
    {
        "content": "<p>Plain HoTT is actually not enough to talk about the fundamental group of this space (strict_sym will just be an hSet). You would need to add some real-cohesion axioms (and take the \"shape\" of strict_sym)</p>",
        "id": 266016376,
        "sender_full_name": "David Wärn",
        "timestamp": 1640369209
    },
    {
        "content": "<p>wait what really? Does \"add some...axioms\" really mean add new axioms to the system?</p>",
        "id": 266022553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640377676
    },
    {
        "content": "<p>You could make a topological space and look at continuous maps from the topological [0,1] in and make it that way, right? You just wouldn't be able to use synthetic pi_1?</p>",
        "id": 266022603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640377732
    },
    {
        "content": "<p>Well, the homotopy groups of <code>strict_sym C n</code> and <code>strict_sym R n</code>differ, so certainly some assumption has to be added to understand what is meant. But I had the idea of the type of a sphere in mind. Probably <code>strict_sym (S^k) n</code> could be studied by plain HoTT.</p>",
        "id": 266026412,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640383422
    },
    {
        "content": "<p>It's not that simple. If you use the higher-inductive type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, then you can't say what it means for a configuration <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>→</mo><msub><mi>S</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">[n] \\to S_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to consist of distinct points, since this isn't a homotopy-invariant notion. On the other hand if you use the 'topological' sphere <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">S</mi><mi>k</mi></msub><mo><mi mathvariant=\"normal\">≔</mi></mo><mo stretchy=\"false\">{</mo><mi>v</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>∣</mo><mo stretchy=\"false\">∥</mo><mi>v</mi><mo stretchy=\"false\">∥</mo><mo>=</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb S_k \\coloneqq \\{ v \\in \\mathbb R^{k+1} \\mid \\lVert v \\rVert = 1 \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mop\" style=\"position:relative;top:-0.0347em;\">:</span></span><span class=\"mrel\"><span class=\"mspace\" style=\"margin-right:-0.0667em;\"></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">∥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>, then you won't be able to reason synthetically about fundamental groups, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">S</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb S_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is an hSet (equality in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">S</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb S_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is just the usual, non-homotopical equality). You can still reason analytically as in Lean of course. Or you can use <a href=\"https://arxiv.org/pdf/1509.07584.pdf\">real-cohesive HoTT</a>, which adds some axioms to the theory so that you can relate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">S</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb S_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and reason synthetically about this fundamental group.</p>",
        "id": 266026750,
        "sender_full_name": "David Wärn",
        "timestamp": 1640383882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> : <a href=\"https://github.com/leanprover-community/mathlib/commit/ec538300461b62a5c386257009848292f3b55d83\">https://github.com/leanprover-community/mathlib/commit/ec538300461b62a5c386257009848292f3b55d83</a></p>",
        "id": 266263298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640701438
    },
    {
        "content": "<p>I've written a principled proof of the main lemma, including a block in the middle that should be put in a tactic. There is a mystery in this block, <code>clear</code> refusing to do its job in a <code>all_goals { try {clear H } }</code> whereas it works if you do it by hand. The block is also a bit stupid because it enumerates possible multisets without taking into account the permutation action. In the case at had, we have a multiset of natural number with cardinal at most 2 and each element is between 2 and 5. With the naive algorithm implemented here, it generates 4^0 + 4^1 + 4^2 = 21 cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.multiset.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">all_cycle_types_le_5</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">m.sum</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm0</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcard</span> <span class=\"o\">:</span> <span class=\"n\">m.card</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">m.card</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ_le_iff.mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m.card</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">multiset.card_nsmul_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span>  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">multiset.le_sum_of_mem</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> BEGIN should be put in a tactic with input m, hcard, hm, hm' -/</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"n\">using</span> <span class=\"n\">multiset.induction</span> <span class=\"k\">with</span> <span class=\"n\">a₁</span> <span class=\"n\">m</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">hm₁</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">multiset.mem_cons</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">hm₁'</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hm'</span><span class=\"o\">,</span> <span class=\"n\">multiset.mem_cons</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">],</span>\n    <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"n\">using</span> <span class=\"n\">multiset.induction</span> <span class=\"k\">with</span> <span class=\"n\">a₂</span> <span class=\"n\">m</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">hm₂</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">multiset.mem_cons</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">],</span>\n      <span class=\"k\">have</span> <span class=\"n\">hm₂'</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hm'</span><span class=\"o\">,</span> <span class=\"n\">multiset.mem_cons</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">],</span>\n      <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hcard</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">m.card</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">hcard</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">multiset.card_eq_zero.mp</span> <span class=\"o\">(</span><span class=\"n\">nat.le_zero_iff.mp</span> <span class=\"bp\">$</span> <span class=\"n\">add_le_iff_nonpos_left.mp</span> <span class=\"n\">hcard</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">hcard</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">interval_cases</span> <span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">interval_cases</span> <span class=\"n\">a₂</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">hm</span> <span class=\"n\">hm'</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">hm₁</span> <span class=\"n\">hm₁'</span> <span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">hm₂</span> <span class=\"n\">hm₂'</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">clear</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"c1\">-- This line doesn't work, no idea why</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> END should be put in a tactic -/</span>\n\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266269857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640706599
    },
    {
        "content": "<p>Tactic writers should feel free to take the code above and turn it into something useful. Note this is a completely self-contained snippet, it includes no group theory at all. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 266270101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640706798
    }
]