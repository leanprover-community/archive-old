[
    {
        "content": "<p>So, I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">deprecated.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span> <span class=\"n\">option</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span> <span class=\"bp\">𝒢</span><span class=\"o\">},</span> <span class=\"n\">ℱ</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝒢</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"bp\">𝒢</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- ℱ ≤ 𝒢 means 𝒢 ⊆ ℱ</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span><span class=\"o\">},</span> <span class=\"n\">p.converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q.converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous.comp</span>\n<span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">p.converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">q.converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">hf</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r.converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">hg</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_mul</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_mul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_continuous_mul</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_inv</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">has_inv.inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ConvGroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">is_group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_convergence_space</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_convergence_group</span> <span class=\"o\">:</span> <span class=\"n\">convergence_group</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G.carrier</span> <span class=\"o\">:=</span> <span class=\"n\">G.is_group</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">G.carrier</span> <span class=\"o\">:=</span> <span class=\"n\">G.is_convergence_space</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">ConvGroup</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ConvGroup.carrier</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ConvGroup</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_group_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">hom.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ConvGroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">ConvGroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">ConvGroup.hom</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">to_fun_continuous</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"n\">continuous.comp</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun_continuous</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f.to_fun_continuous</span><span class=\"o\">),</span> <span class=\"c1\">-- THIS IS WHERE I AM STUCK</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">to_fun_group_hom</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">to_fun_continuous</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">to_fun_group_hom</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I get some error about an invalid type ascription, which is weird because I am not using any in the proof. I don't know what to do here. Help!</p>",
        "id": 266606608,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641118600
    },
    {
        "content": "<p>Can you post the error?</p>",
        "id": 266610704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641124614
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">bernd</span><span class=\"bp\">/</span><span class=\"n\">Repositories</span><span class=\"bp\">/</span><span class=\"n\">convergence</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">prod.convergence_space'</span> <span class=\"n\">uses</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">bernd</span><span class=\"bp\">/</span><span class=\"n\">Repositories</span><span class=\"bp\">/</span><span class=\"n\">convergence</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">79</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">ConvGroup.carrier.convergence_space</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">converges</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">ConvGroup.carrier.convergence_space</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">g.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.to_fun</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⟶</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">⟶</span> <span class=\"n\">K</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266611305,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641125379
    },
    {
        "content": "<p>The problem is with the brackets in your definition of <code>continuous</code>. Change it to <code>∀ ⦃x ℱ⦄</code>.</p>",
        "id": 266612102,
        "sender_full_name": "David Wärn",
        "timestamp": 1641126620
    },
    {
        "content": "<p>Oh wow. This is my first time running into this kind of problem. I forgot what ⦃ ⦄ are used for.</p>",
        "id": 266612255,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641126902
    },
    {
        "content": "<p>OK, I found an explanation here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments</a>. However, I'm still confused why it fixes my issue.</p>",
        "id": 266612695,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641127666
    },
    {
        "content": "<p>I would say this <code>⦃ ⦄</code> trick is an accidental workaround. This is an elaborator bug, your code should work (and you can make it work it you use <code>@</code> to help. Your definition of continuity is known to bring elaboration issues. That's why <code>continuous</code> is a structure in mathlib. You can use the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">deprecated.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span> <span class=\"n\">option</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span> <span class=\"bp\">𝒢</span><span class=\"o\">},</span> <span class=\"n\">ℱ</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝒢</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"bp\">𝒢</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- ℱ ≤ 𝒢 means 𝒢 ⊆ ℱ</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cvg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous.comp</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">ℱ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hg.cvg</span> <span class=\"o\">(</span><span class=\"n\">hf.cvg</span> <span class=\"n\">h</span><span class=\"o\">)⟩</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_mul</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_mul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_smul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_smul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">•</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_continuous_mul</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_inv</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">has_inv.inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ConvGroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">is_group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_convergence_space</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_convergence_group</span> <span class=\"o\">:</span> <span class=\"n\">convergence_group</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G.carrier</span> <span class=\"o\">:=</span> <span class=\"n\">G.is_group</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">G.carrier</span> <span class=\"o\">:=</span> <span class=\"n\">G.is_convergence_space</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">ConvGroup</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ConvGroup.carrier</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ConvGroup</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_group_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">hom.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hom.continuous</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_fun_continuous</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hom.comp</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ConvGroup</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">H</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun_continuous</span> <span class=\"o\">:=</span> <span class=\"n\">g.continuous.comp</span> <span class=\"n\">f.continuous</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun_group_hom</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_fun_group_hom.comp</span> <span class=\"n\">g.to_fun_group_hom</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ConvGroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">ConvGroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">ConvGroup.hom</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">to_fun_continuous</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">to_fun_group_hom</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266621087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641140244
    },
    {
        "content": "<p>Note that I also removed all your instance variable names. If you really want this to be a class then you should <em>very</em> rarely need to name instance inputs.</p>",
        "id": 266621141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641140301
    },
    {
        "content": "<p>Ah, I was wondering why <code>continuous</code> was a structure in instead of a plain <code>Prop</code>. So what is the general advice here? Use a structure or use these weak implicit arguments?</p>",
        "id": 266621465,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641140763
    }
]