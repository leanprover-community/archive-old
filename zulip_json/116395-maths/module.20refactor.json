[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I have two questions about the module refactor.</p>\n<ul>\n<li>line 111 of <code>module.lean</code>, there is a declaration <code>class is_linear_map</code>. Isn't the rule now that unbundled stuff should not be a class?</li>\n<li>line 364 of <code>normed_space/basic.lean</code>, there is the definition</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">normed_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">normed_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">normed_group</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">vector_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>Should the <code>out_param</code> be removed now?</p>",
        "id": 161371594,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553191826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you have any opinions on this?</p>",
        "id": 161373689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553193189
    },
    {
        "content": "<p>It happened quite a while ago, I don't remember the reason for the choices I made.</p>",
        "id": 161408742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553214940
    },
    {
        "content": "<p>Should the outparam be removed?</p>",
        "id": 161410232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553216735
    },
    {
        "content": "<p>the out_param should be removed</p>",
        "id": 161417773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553226507
    },
    {
        "content": "<p>do we have a rule that <code>is_linear_map</code> et al should not be classes? Is this the case for <code>is_group_hom</code>?</p>",
        "id": 161417792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553226556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> what is your opinion?</p>",
        "id": 161418040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553226924
    },
    {
        "content": "<p>I remember someone (Mario or Kenny?) saying that unbundled stuff should not be classes, but I am probably wrong as <code>is_group_hom</code> is a class currently.</p>",
        "id": 161428132,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553242042
    },
    {
        "content": "<p>the fact that <code>is_group_hom</code> is a class currently entails some things like having to write <code>simp [is_group_hom.map_add f]</code> in order to work with the rewrite rules, but my recommended solution is actually to just forget about <code>is_group_hom</code> entirely rather than make it not a class</p>",
        "id": 161428213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553242155
    },
    {
        "content": "<p>How am I supposed to do mathematics <em>and</em> forget about <code>is_group_hom</code>? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 161428281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553242210
    },
    {
        "content": "<p>use <code>group_hom</code> instead</p>",
        "id": 161428335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553242285
    },
    {
        "content": "<p>Does that exist in mathlib?</p>",
        "id": 161428586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553242573
    },
    {
        "content": "<p>Chris raised some issues that weren't resolved as far as I know</p>",
        "id": 161428592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553242590
    },
    {
        "content": "<p>In the same way, should we avoid <code>is_linear_map</code> and use <code>linear_map</code> instead?</p>",
        "id": 161428693,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553242739
    },
    {
        "content": "<p>That is what I've been doing so far.</p>",
        "id": 161428778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553242814
    },
    {
        "content": "<p>But when you use <code>f : alg_hom</code> you get a lot of ugly <code>f.to_linear_map</code>s in your code</p>",
        "id": 161428789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553242841
    },
    {
        "content": "<p>for <code>linear_map</code>, yes that's the recommendation. For <code>group_hom</code>, it doesn't exist yet but I think chris was working on it</p>",
        "id": 161428794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553242847
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> hoped to solve that with unification hints. But so far, no luck</p>",
        "id": 161428800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553242858
    },
    {
        "content": "<p>I'm not up to date on the issues with coercions between different augmented-function types</p>",
        "id": 161428831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553242912
    },
    {
        "content": "<p>but I would hope that <code>coe</code> would suffice in most cases</p>",
        "id": 161428884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553242935
    },
    {
        "content": "<p>I don't think there is a need for unification hints in this area</p>",
        "id": 161428910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553242986
    },
    {
        "content": "<p>I am currently removing the outparams in <code>normed_space</code>. It breaks some things, especially since <code>bounded_linear_maps</code> did not have the field explicit. Clearly, it should be, so I am adding it everywhere. But then it also shows up in the definition of the derivative -- and here again it seems like a good idea to make the field explicit : for instance, on a complex vector space, we want to be able to talk about the complex differential and the real differential, and discuss their relationships. <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> , is it all right for you?</p>",
        "id": 161437940,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553252378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">linear_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Johan -- is this the question? You're asking whether you should use a class or a structure?</p>",
        "id": 161438139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553252544
    },
    {
        "content": "<p>The structure has a coercion, so you should just be able to hide all those <code>f.to_fun</code>s</p>",
        "id": 161438218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553252645
    },
    {
        "content": "<p>Oh I see, <code>f</code> moves too. You're asking whether you should be bundled or unbundled.</p>",
        "id": 161438260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553252710
    },
    {
        "content": "<p>No, it's this one: <a href=\"https://github.com/leanprover-community/mathlib/blob/d60d1616958787ccb9842dc943534f90ea0bab64/src/ring_theory/algebra.lean#L192\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/d60d1616958787ccb9842dc943534f90ea0bab64/src/ring_theory/algebra.lean#L192\">https://github.com/leanprover-community/mathlib/blob/d60d1616958787ccb9842dc943534f90ea0bab64/src/ring_theory/algebra.lean#L192</a></p>",
        "id": 161438375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553252832
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is saying that we should make that a coercion.</p>",
        "id": 161438378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553252846
    },
    {
        "content": "<blockquote>\n<p>the out_param should be removed</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/844\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/844\">#844</a></p>",
        "id": 161439267,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553253789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I trust your judgment here. Thanks for doing it.</p>",
        "id": 161490069,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1553294171
    }
]