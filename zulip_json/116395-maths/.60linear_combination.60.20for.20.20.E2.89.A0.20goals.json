[
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, I was noticing that for the <a href=\"#narrow/stream/116395-maths/topic/thoughts.20on.20elliptic.20curves/near/275271497\">side goal produced</a> by Marc's code, it would be nice to have a <code>linear_combination</code> variant which solved inequality goals given one inequality hypothesis.</p>\n<p>(Delibarately) slightly more complicated example than Marc's:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275277616,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647282010
    },
    {
        "content": "<p>Can't you just do <code>refine λ h, h₁ _, linear_combination ...</code>?</p>",
        "id": 275277715,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647282061
    },
    {
        "content": "<p>Of course, but I'm asking for it to be built into <code>linear_combination</code> itself!</p>",
        "id": 275277763,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647282083
    },
    {
        "content": "<p>(Actually I think I'm also using the <code>not_not</code> simplification hidden in <code>contrapose!</code>)</p>",
        "id": 275277822,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647282112
    },
    {
        "content": "<p>You're not, no.</p>",
        "id": 275277909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647282139
    },
    {
        "content": "<p>Oh yes, you are</p>",
        "id": 275277947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647282157
    },
    {
        "content": "<p>No, you're not</p>",
        "id": 275277963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647282165
    },
    {
        "content": "<p>Been a long day here <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 275278031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647282196
    },
    {
        "content": "<p>It would be easy enough to add this as a preprocessing step, yes!</p>",
        "id": 275278221,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1647282290
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12685\">#12685</a></p>",
        "id": 275279357,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647282774
    },
    {
        "content": "<p>I've made the patch locally already, will PR when I have a reliable internet connection to push it!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275280464,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1647283315
    },
    {
        "content": "<p>Rob Lewis, customer service employee of the month, March 2022!  (and every month!)</p>",
        "id": 275280620,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647283386
    },
    {
        "content": "<p>Just don't ask for it to start handling inequalities too <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 275280860,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1647283504
    },
    {
        "content": "<p>In fact, this is somewhat more involved than what I hacked together on the spot. When you contrapose the goal and a hypothesis, some coefficients may change. It would be natural to write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but this doesn't work. So consider this WIP still</p>",
        "id": 275291921,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1647288733
    },
    {
        "content": "<p>I see -- so the coefficient changes by a sign on all but the special hypothesis, and moreover by the inverse of the coefficient of the special hypothesis on every hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linear_combination</span>\n\n<span class=\"c1\">-- desired_syntax: `linear_combination h₁ (h₂, 2 * x)`</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"n\">h_goal</span><span class=\"o\">,</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">h_goal</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- desired_syntax: `linear_combination h (h2, 2)`</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_goal</span><span class=\"o\">,</span>\n  <span class=\"n\">linear_combination</span> <span class=\"n\">h_goal</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- desired syntax: `linear_combination (h, 5) (h2, 2)`</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_goal</span><span class=\"o\">,</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">h_goal</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275298775,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647292302
    },
    {
        "content": "<p>In particular this means that you need invertibility of the coefficient of the special hypothesis -- perhaps build in special handling when this coefficient is 1 or -1, and otherwise require that one be working over a characteristic-zero field and that the coefficient is a numeral.</p>",
        "id": 275299297,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647292590
    }
]