[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>Sent to me by <span class=\"user-mention\" data-user-id=\"120884\">@Clara List</span>  . The mathematician's proof: \"h2 trivially implies |x|&lt;=2 and |y|&lt;=1; now check all cases\". This line of reasoning should be feasible in Lean, right? How does one do it?</p>",
        "id": 134808309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538121760
    },
    {
        "content": "<p>I am embarrassed to post my solution. I decided it might be easier to convert everything to nat, but the killer <code>dec_trivial</code> line didn't work anyway:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now effortfully change to a question about nats</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_mul_self</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_mul_self</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">Hx</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">Hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_eq_coe_nat_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- finally got h2 : x0 * x0 + 3 * (y0 * y0) = 4</span>\n  <span class=\"c1\">-- but mathematicians do not want to waste their time with the last 4 lines</span>\n  <span class=\"c1\">-- and need training before they can even construct them. What am I missing?</span>\n\n  <span class=\"c1\">-- now change the goal in the same way</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">x0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">x0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_eq</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">y0</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">y0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_eq</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- It&#39;s now a question about nats. I regret doing all that.</span>\n  <span class=\"n\">clear</span> <span class=\"n\">Hx</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">Hx0</span> <span class=\"o\">:</span> <span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hy0</span> <span class=\"o\">:</span> <span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_div_iff_mul_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_self_le_mul_self_iff</span> <span class=\"n\">at</span> <span class=\"n\">Hx0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_self_le_mul_self_iff</span> <span class=\"n\">at</span> <span class=\"n\">Hy0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">Hx0</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">Hy0</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal now</span>\n  <span class=\"c1\">-- ⊢ y0 ≤ 1 → x0 ≤ 2 → x0 * x0 + 3 * (y0 * y0) = 4 → nat.coprime x0 y0 → x0 = 1 ∧ y0 = 1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"c1\">-- AARGH! Fails!</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134808379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538121870
    },
    {
        "content": "<p>That is pretty horrible and it didn't work either. (1) how to get <code>dec_trivial</code> to work and (2) can it work with ints? I guess we want <code>(x : int) ^ 2 &lt;= N -&gt; int.nat_abs x &lt;= sqrt N</code> or <code>x ^ 2 &lt;= N -&gt; - sqrt N &lt;= x and x &lt;= sqrt N</code> or something. But will this be enough for dec_trivial? Are these in mathlib somewhere? Of course there will be the usual kerfuffle coming from the fact that N is an int instead of a nat (see other nat int thread where I propose a goofy typeclass solution to this)</p>",
        "id": 134808476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538121976
    },
    {
        "content": "<p><code>example (n : ℕ) : n ≤ 0 → n = 0 := dec_trivial -- fails</code>. What modification makes this work? I'm sure I've seen people get <code>dec_trivial</code> to check a finite set of nats before</p>",
        "id": 134809743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123741
    },
    {
        "content": "<p>revert <code>n</code></p>",
        "id": 134809799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538123791
    },
    {
        "content": "<p>gaargh it's still not over</p>",
        "id": 134809887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538123983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ let n : ℕ := int.nat_abs x in n ≤ 0 → n = 0</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134809949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538124061
    },
    {
        "content": "<p>I could fix this with <code>generalize</code> instead of <code>let</code> but in my actual use case there are 20 lines of manipulating <code>n</code> and <code>x</code> before I want to apply <code>exact dec_trivial</code>. I will work on the <code>generalize</code> trick though.</p>",
        "id": 134809967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538124116
    },
    {
        "content": "<p>Oh -- here's the problem. OK I'm stuck again :-( </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- type class inference fails</span>\n<span class=\"c1\">-- ⊢ decidable (∀ (n : ℕ), n ≤ 0 → n = 0)</span>\n</pre></div>\n\n\n<p>Oh -- I can fix this with a random import :-/</p>",
        "id": 134810341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538124643
    },
    {
        "content": "<p>Oh, nope, still can't do it. I think I do need <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> now.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x1</span> <span class=\"bp\">*</span> <span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"bp\">→</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">⊢ decidable</span>\n<span class=\"cm\">    (∀ (x1 y1 : ℕ),</span>\n<span class=\"cm\">       y1 ≤ 1 → x1 ≤ 2 → x1 * x1 + 3 * (y1 * y1) = 4 → nat.coprime x1 y1 → x1 = 1 ∧ y1 = 1)</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>How do I begin to figure out what is not decidable here?</p>",
        "id": 134810537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538124889
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x1</span> <span class=\"bp\">*</span> <span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"bp\">→</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>\n\n\n<p><span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 134810830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538125203
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now effortfully change to a question about nats</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_mul_self</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_mul_self</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">Hx</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">Hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_eq_coe_nat_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- finally got h2 : x0 * x0 + 3 * (y0 * y0) = 4</span>\n  <span class=\"c1\">-- but mathematicians do not want to waste their time with the last 4 lines</span>\n  <span class=\"c1\">-- and need training before they can even construct them. What am I missing?</span>\n\n  <span class=\"c1\">-- now change the goal in the same way</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">x0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">x0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_eq</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">y0</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">y0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_eq</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- now a question about nats. I regret doing all that.</span>\n  <span class=\"n\">clear</span> <span class=\"n\">Hx</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">Hx0</span> <span class=\"o\">:</span> <span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hy0</span> <span class=\"o\">:</span> <span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"bp\">*</span> <span class=\"n\">y0</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_div_iff_mul_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_self_le_mul_self_iff</span> <span class=\"n\">at</span> <span class=\"n\">Hx0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_self_le_mul_self_iff</span> <span class=\"n\">at</span> <span class=\"n\">Hy0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">Hy0</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">y0</span> <span class=\"bp\">=</span> <span class=\"n\">y1</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">y1</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">Hx0</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">x0</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Those reverts and generalizes near the end have to be done in pretty much exactly the right order :-)</p>",
        "id": 134811186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538125617
    },
    {
        "content": "<p>OK here is my challenge. This is a concrete example of the sort of thing which my undergraduate mathematicians are reading in their lecture notes and are finding very hard to put into Lean. The following result is extremely easy for a mathematician and I have supplied a 4-line pseudocode proof. How many lines does take an expert Leaner? I would very much like to get this answer down to 4. Even eight lines would be fine at this point -- between each line of code corresponding to the pseudocode it would be fine to have a<code>show</code> or something, or <code>suffices : ..., by simp</code> or whatever. What I don't want is random bursts of 5 lines of garbage to get Lean to jump from line to line, because on some very concrete level that pseudocode proof looks complete to me and, more to the point, will look complete to most mathematicians.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Pseudo-code proof</span>\n<span class=\"cm\">1) Squares are non-negative</span>\n<span class=\"cm\">2) Hence x ^ 2 &lt;= 3 and y ^ 2 &lt;= 3/2</span>\n<span class=\"cm\">3) Hence |x| &lt;= 1 and |y| &lt;= 1</span>\n<span class=\"cm\">4) Now check all cases.</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 134812553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538127367
    },
    {
        "content": "<p>PS I guess the \"and\" lines can be split, giving us six lines of pseudocode, and i would even allow for seven if we wanted to get from 2y^2 le 3 to y^2 le 3/2</p>",
        "id": 134813633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538128573
    },
    {
        "content": "<p>The lean issues are getting from rat to int (and when?) and getting dec_trivial to check the cases</p>",
        "id": 134813668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538128651
    },
    {
        "content": "<p>PPS I recommend not going via nat. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> how many lines of tactic mode does it take you to solve my challenge?</p>",
        "id": 134813807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538128807
    },
    {
        "content": "<p>PPPS <code>example (x y : ℤ) : (x : ℚ) ^ 2 + 2 * y ^ 2 = 3 ↔ x ^ 2 + 2 * y ^ 2 = 3 := by simp</code> fails :-(. Why?? PPPPS you will all be pleased to know that I am now going to do 5 hours of admin with Lean chat off.</p>",
        "id": 134814042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538129128
    },
    {
        "content": "<p>I guess for step 2) you can try to use <code>linarith</code>.</p>",
        "id": 134814377,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538129610
    },
    {
        "content": "<p>it doesn't look very linear to me</p>",
        "id": 134814523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538129789
    },
    {
        "content": "<p>Step 2 is linear if you treat the squares as atoms. But this isn't the hard part of the proof.</p>",
        "id": 134814559,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538129880
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hxn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hyn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hx3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hy3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span>\n</pre></div>",
        "id": 134814603,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538129896
    },
    {
        "content": "<p>can you prove <code>(x : ℚ) ^ 2 &lt; 4</code> and <code>(y : ℚ) ^ 2 &lt; 4</code> instead by linarith?</p>",
        "id": 134814767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538130200
    },
    {
        "content": "<p>Yup.</p>",
        "id": 134814816,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538130245
    },
    {
        "content": "<p>I believe there is a theorem that says <code>a^2 &lt; b^2 &lt;-&gt; a &lt; b</code></p>",
        "id": 134814823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538130256
    },
    {
        "content": "<p>I hope there's no theorem that says that on <code>rat</code>.</p>",
        "id": 134814837,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538130293
    },
    {
        "content": "<p>Or <code>int</code>, for that matter.</p>",
        "id": 134814854,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538130324
    },
    {
        "content": "<p>It should hold on rat, but I'm omitting the nonnegativity assumptions</p>",
        "id": 134814860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538130337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, how hard do you think it would be to ask <code>linarith</code> to \"try harder\", automatically treating subexpressions it doesn't understand as atoms?</p>",
        "id": 134815413,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538131159
    },
    {
        "content": "<p>isn't that what it's already doing?</p>",
        "id": 134815488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538131229
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (x y : ℕ) (h : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3) : false :=\nby linarith\n</pre></div>",
        "id": 134815551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538131325
    },
    {
        "content": "<p>Says <code>no args to linarith</code>.</p>",
        "id": 134815556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538131333
    },
    {
        "content": "<p>While I'm hoping for something that would first generalize <code>(x + 4) * x</code> and <code>(6 + 3 * y) * y</code> ftw.</p>",
        "id": 134815584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538131414
    },
    {
        "content": "<p>I guess I can see how to do this, I'm just hoping someone says there's an easier way than what I have in mind. :-)</p>",
        "id": 134815654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538131472
    },
    {
        "content": "<p>It wouldn't be hard to make it handle things like that. Right now, if it sees an obvious nonlinearity, it will reject that hypothesis. <code>x^2</code> doesn't count as obvious because it's only checking + and *.</p>",
        "id": 134816758,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538133128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't think we have the necessary nonnegativity assumptions in Kevin's problem, at least not without some work, which kind of defeats the point. And there's still some pain dealing with casts. Ultimately, I think we need some sort of \"cast correction\" tactic and integer arithmetic to do that properly.</p>",
        "id": 134816870,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538133342
    },
    {
        "content": "<p>well, you want to rewrite with <code>a^2 = (abs a)^2</code> first, and then you have your nonnegativity assumption</p>",
        "id": 134816931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538133394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Hmm, let me qualify my last response -- the way <code>linarith</code> handles nats right now makes it slightly harder. I'll think about a clean way to do this.</p>",
        "id": 134817679,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538134458
    },
    {
        "content": "<p>But it's easy to make it handle this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">linarith</span>\n</pre></div>",
        "id": 134817712,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538134544
    },
    {
        "content": "<p>That's great. (And the same for nats would be great!)</p>",
        "id": 134818221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538135257
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/379\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/379\">https://github.com/leanprover/mathlib/pull/379</a></p>",
        "id": 134818589,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538135717
    },
    {
        "content": "<blockquote>\n<p>PPS I recommend not going via nat. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> how many lines of tactic mode does it take you to solve my challenge?</p>\n</blockquote>\n<p>I respectfully decline for personal reasons.</p>",
        "id": 134828582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538145354
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, with a few(!) additional <code>simp</code> lemmas, some of which are perfectly sensible, and some of which are less so, we can do:</p>\n<div class=\"codehilite\"><pre><span></span>@[tidy] meta def la := `[linarith]\n@[tidy] meta def cases_xy := `[cases x; cases y]\n\nexample (x y : ℤ) (h1 : nat.coprime (int.nat_abs x) (int.nat_abs y)) (h2 : x ^ 2 + 3 * y ^ 2 = 4) :\n  (x = 1 ∨ x = -1) ∧ (y = 1 ∨ y = -1) :=\nby tidy\n</pre></div>",
        "id": 134879587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221203
    },
    {
        "content": "<p>That's not exactly what I asked but I agree that this is a big step forward</p>",
        "id": 134879621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221270
    },
    {
        "content": "<p>Oh, it isn't? I must have changed it at some point and forgotten I changed it.</p>",
        "id": 134879626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221292
    },
    {
        "content": "<p>Let me go find the original :-)</p>",
        "id": 134879627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221299
    },
    {
        "content": "<p>I don't care about efficiency, I care about making life easier for beginner mathematicians</p>",
        "id": 134879628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221299
    },
    {
        "content": "<p>The equality was over rat</p>",
        "id": 134879631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221317
    },
    {
        "content": "<p>how many seconds does it take to compile?</p>",
        "id": 134879671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538221341
    },
    {
        "content": "<p>Because moving from rat to int is another great example of something which is easy in maths</p>",
        "id": 134879676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221376
    },
    {
        "content": "<p>Oh -- this was your original question (exactly), but then you asked a different one I didn't see yet.</p>",
        "id": 134879683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221396
    },
    {
        "content": "<p>Oh! Yes you're exactly right</p>",
        "id": 134879687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221422
    },
    {
        "content": "<p>I asked a challenge problem later</p>",
        "id": 134879690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221435
    },
    {
        "content": "<p>which you have made serious inroads into</p>",
        "id": 134879736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221473
    },
    {
        "content": "<p>Are those safe tidy lemmas by the way?</p>",
        "id": 134879744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> --- it takes 13 seconds, or 5 seconds after you substitute in the proof <code>tidy</code> provides.</p>",
        "id": 134879754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221515
    },
    {
        "content": "<p>It's fine to use linarith in <code>tidy</code>, as long as you don't care about how long things take to run. :-)</p>",
        "id": 134879762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221535
    },
    {
        "content": "<p>Scott I think this is the first time I've seen tidy do something which I really did not want to do myself</p>",
        "id": 134879765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221546
    },
    {
        "content": "<p>It's completely insane to let <code>tidy</code> case bash on ints or nats unless you know case bashing is the right thing to do.</p>",
        "id": 134879803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221564
    },
    {
        "content": "<p>Kenny I don't care how long it takes to run because this is for undergraduates solving cheap problems, not a library</p>",
        "id": 134879814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221599
    },
    {
        "content": "<p>I'm hiding here quite a few simp lemmas I had to write before this could work.</p>",
        "id": 134879872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221683
    },
    {
        "content": "<p>The dubious one was:</p>",
        "id": 134879877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221688
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def dt := `[exact dec_trivial]\n@[simp] lemma int.of_nat_eq_neg (n : ℕ) (m : ℤ) (h : m &lt; 0 . dt) : int.of_nat n = m ↔ false := sorry\n</pre></div>",
        "id": 134879879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221708
    },
    {
        "content": "<p>(And here of course by \"write\" I mean \"write the statement of and sorry the proof\", as usual. :-)</p>",
        "id": 134879904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221756
    },
    {
        "content": "<p>I think I could manage a proof of that one</p>",
        "id": 134879916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221801
    },
    {
        "content": "<p>oh -- there's nothing scary with the proof. The scary thing is have the <code>exact dec_trivial</code> autoparam.</p>",
        "id": 134879963,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221840
    },
    {
        "content": "<p>I've no idea if that is a viable thing to do in a <code>@[simp]</code> lemma. I mean, it works, apparently, but it may be insane for some reason I don't understand. :-)</p>",
        "id": 134879972,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221872
    },
    {
        "content": "<p>The full set of <code>simp</code> lemmas I needed was </p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma nat.coprime_zero (n : ℕ) : nat.coprime n 0 = false := sorry\n@[simp] lemma nat.zero_coprime (n : ℕ) : nat.coprime 0 n = false := sorry\n\nlocal attribute [simp] nat.succ_eq_add_one\n\n@[simp] lemma nat.add_has_add (a b : ℕ) : nat.add a b = a + b := rfl\n@[simp] lemma nat.mul_has_mul (a b : ℕ) : nat.mul a b = a * b := rfl\n@[simp] lemma nat.pow_has_pow (a b : ℕ) : nat.pow a b = a ^ b := rfl\n\nlocal attribute [simp] int.of_nat_add\nlocal attribute [simp] int.of_nat_one\n\n@[simp] lemma foo_1 (a b : ℕ) : a + b = a ↔ b = 0 := sorry\n@[simp] lemma foo_2 (a b c : ℕ) : a + (b + c) = c ↔ a + b = 0 := sorry\n\n@[simp] lemma nat.square_zero (n : ℕ) : n^2 = 0 ↔ n = 0 := sorry\n\nlocal attribute [simp] nat.pow_zero\nlocal attribute [simp] nat.pow_one\n\nmeta def dt := `[exact dec_trivial]\n\n@[simp] lemma int.of_nat_eq_neg (n : ℕ) (m : ℤ) (h : m &lt; 0 . dt) : int.of_nat n = m ↔ false := sorry\n@[simp] lemma int.of_nat_eq_one (n : ℕ) : int.of_nat n = 1 ↔ n = 1 := sorry\n@[simp] lemma int.neg_succ_of_nat_eq_nneg (n : ℕ) (m : ℤ) (h : m ≥ 0 . dt) : int.neg_succ_of_nat n = m ↔ false := sorry\n@[simp] lemma int.neg_succ_of_nat_eq_minus_one (n : ℕ) : int.neg_succ_of_nat n = -1 ↔ n = 0 := sorry\n</pre></div>",
        "id": 134879975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221883
    },
    {
        "content": "<p>I am supposed to be suggesting a list of projects for third year undergraduate joint maths/computing students and they want the list by Monday. I was going to propose making my <code>number</code> class as one of them</p>",
        "id": 134879981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221915
    },
    {
        "content": "<p>Also -- this relies on Robert's latest PR for linarith; it doesn't work with the current mathlib one.</p>",
        "id": 134880024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538221933
    },
    {
        "content": "<p>I don't mind about that either</p>",
        "id": 134880030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538221950
    },
    {
        "content": "<p>I'm always surprised by how little is marked with @[simp] in mathlib</p>",
        "id": 134880104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538222123
    },
    {
        "content": "<p>I'm sure Kenny doesn't feel the same way</p>",
        "id": 134880111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222145
    },
    {
        "content": "<p>Like <code>int.of_nat_one</code>. How is that not a simp lemma?</p>",
        "id": 134880113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538222148
    },
    {
        "content": "<p>Isn't that in core?</p>",
        "id": 134880157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222175
    },
    {
        "content": "<p>Ah, okay :-)</p>",
        "id": 134880159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538222182
    },
    {
        "content": "<p>We can still add the attribute, I guess!</p>",
        "id": 134880160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538222192
    },
    {
        "content": "<p>At the start of <code>int.basic</code> is</p>\n<div class=\"codehilite\"><pre><span></span>attribute [simp] int.coe_nat_add int.coe_nat_mul int.coe_nat_zero int.coe_nat_one int.coe_nat_succ\n</pre></div>",
        "id": 134880165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222217
    },
    {
        "content": "<p>I think we need a simp lemma for of_nat -&gt; coe_nat</p>",
        "id": 134880178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222245
    },
    {
        "content": "<p>I see. Sounds good!</p>",
        "id": 134880183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538222261
    },
    {
        "content": "<p>And how about</p>\n<div class=\"codehilite\"><pre><span></span>attribute [simp] nat.pow_zero nat.pow_one\n</pre></div>",
        "id": 134880231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538222319
    },
    {
        "content": "<p>I'm curious about</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] theorem int.cast_pow [ring α] (n : ℤ) (m : ℕ) : (↑(n ^ m) : α) = ↑n ^ m :=\n</pre></div>",
        "id": 134916514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538300701
    },
    {
        "content": "<p>My instinct would be to <code>simp</code> the other way here!</p>",
        "id": 134916521,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538300711
    },
    {
        "content": "<p>well it's the same as <code>int.cast_mul</code> and <code>int.cast_add</code> and etc</p>",
        "id": 134916523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538300736
    },
    {
        "content": "<p>Yes. :-)</p>",
        "id": 134916524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538300745
    },
    {
        "content": "<p>Do you know situations where it's useful to <code>simp</code> in this direction?</p>",
        "id": 134916564,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538300777
    },
    {
        "content": "<p><code>int.of_nat (n - m)</code></p>",
        "id": 134917057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538301905
    },
    {
        "content": "<p>Usually it doesn't matter as long as it is in a consistent direction, but generally speaking it is harder to simp the other way around because it is a kind of \"distribution\" lemma - the casts on the rhs have to line up for the simp to work, which can be a problem if simp wants to write <code>\\u a + b + \\u c</code></p>",
        "id": 134917102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302009
    },
    {
        "content": "<p>The recommended technique for bringing your casts together is to assert the form you want and <code>simpa</code> to reduce it to your goal</p>",
        "id": 134917120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302081
    },
    {
        "content": "<p><code>simpa only</code></p>",
        "id": 134917159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538302105
    },
    {
        "content": "<p>Chris made a comment to me about all this -- he said the rule of thumb was that simp wants to make the up-arrows as close as possible to the variables</p>",
        "id": 134917160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302107
    },
    {
        "content": "<p>That clarified things for me. My main beef is that you need to know the general cast lemmas from nat to blah and then a bunch of different ones for going from nat to int.</p>",
        "id": 134917180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302179
    },
    {
        "content": "<p>I hope we get the <code>cast</code> tactic for dealing with this</p>",
        "id": 134917225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302228
    },
    {
        "content": "<p>My hope was to let everything be a <code>number</code> and let type class inference deal with everything</p>",
        "id": 134917229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302260
    },
    {
        "content": "<p>Is this related?</p>",
        "id": 134917234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302268
    },
    {
        "content": "<p>Would part of this tactic be the <code>is_actually_an_int</code> typeclass?</p>",
        "id": 134917238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302321
    },
    {
        "content": "<p>I wasn't planning on it</p>",
        "id": 134917280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302355
    },
    {
        "content": "<p>I'm not sure how those plans interact with the <code>is_int</code> class</p>",
        "id": 134917283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302372
    },
    {
        "content": "<p>I am unclear on the details, but I am very clear on what I want the outcome to be: easy passing from <code>(x : rat) ^ 2  + 2 * y ^ 2 = 7</code> to <code>x ^ 2 + 2 * y ^ 2 = 7</code> with x y ints, where some of those 2's are nats and some are rats, and some of those 7's are ints are some are rats, and in the future this won't matter.</p>",
        "id": 134917333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302499
    },
    {
        "content": "<p>Yes, I think this can be done</p>",
        "id": 134917344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302541
    },
    {
        "content": "<p>The idea is you point at an equation and say \"make this an equation on int\" and it figures out the appropriate coercions rewriting this way and that</p>",
        "id": 134917393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302609
    },
    {
        "content": "<p>Is this tactic just on a list of things to do, or are there actually plans to develop it? My users would find it extremely helpful.</p>",
        "id": 134917403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302656
    },
    {
        "content": "<p>somewhere in between</p>",
        "id": 134917404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302672
    },
    {
        "content": "<p>I have a fairly concrete idea of how to implement it, but I haven't tried</p>",
        "id": 134917444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302692
    },
    {
        "content": "<p>That's great news. I'm really glad it's on your radar in some sense.</p>",
        "id": 134917445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302698
    },
    {
        "content": "<p>This is I think the third time when I have managed to pinpoint an issue which is \"trivial in maths and hard in Lean\", and you solved both the previous ones. The first was that it seemed to be very hard to prove things like \"2 + 2 \\not= 5\" for real numbers in Lean, and then <code>norm_num</code> appeared. The second was that it seemed to be very hard to prove <code>(x+y)^3=x^3+3x^2y+3xy^2+y^3</code> in Lean and then <code>ring</code> appeared. The reason I find these sorts of questions particularly interesting to focus on is that undergraduate mathematicians take these sorts of things for granted, having no insight into what actually goes in to proving them, but I would rather not try to teach them that insight, I would rather it were just easy.</p>",
        "id": 134917504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538302892
    },
    {
        "content": "<p>usually the hard part with these tactics is just figuring out what you want them to do (and what is not in scope)</p>",
        "id": 134917549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538302992
    },
    {
        "content": "<p>it's hard to do anything with \"I want magic\", but \"I want a decision procedure for linear inequalities on nat\" has a clear enough specification to actually get implemented</p>",
        "id": 134917590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538303095
    },
    {
        "content": "<p>\"the hard part\" -- I beg to differ. From where I'm standing, the hard part is that there are an extremely small number of people in the world who are equipped to write these tactics, and they are all busy. And I am not yet one of those people. That's why I wrote the ring blog post, to get some sort of insight into how these things might work. I am also not yet convinced that I will be able to write a convincing grant proposal to pay for a computer scientist to write these tactics for me, because the applications are firmly pedagogical and the big grant funders in the UK are more interested in research.</p>",
        "id": 134917598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538303153
    },
    {
        "content": "<p>But I saw undergraduates bravely struggling with this sort of thing all summer, and the reason I got up to speed with how casts currently work in Lean is so I could write the code myself which solved their problems in the particular instances they got stuck at.</p>",
        "id": 134917643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538303265
    },
    {
        "content": "<p>e.g. <a href=\"#narrow/stream/116395-maths/topic/Coercions.20N-.3EZ-.3EQ-.3ER-.3EC\" title=\"#narrow/stream/116395-maths/topic/Coercions.20N-.3EZ-.3EQ-.3ER-.3EC\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Coercions.20N-.3EZ-.3EQ-.3ER-.3EC</a></p>",
        "id": 134917685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538303324
    },
    {
        "content": "<p>By the way, it is very easy to write a tactic that does what this <code>cast</code> would do, if you aren't picky about the flexibility</p>",
        "id": 134917686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538303330
    },
    {
        "content": "<p>It is very easy for you. I have never written meta code and currently I don't have the time to learn.</p>",
        "id": 134917691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538303359
    },
    {
        "content": "<p>you can just define a tactic like <code> `[rw &lt;- int.cast_inj, simp [int.cast_one, int.cast_add, ...]]</code></p>",
        "id": 134917692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538303373
    },
    {
        "content": "<p>Also it takes me a long time to learn things, far longer than it takes people like you or Chris or Kenny.</p>",
        "id": 134917693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538303379
    },
    {
        "content": "<p>I mean a \"poor mans tactic\"</p>",
        "id": 134917694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538303390
    },
    {
        "content": "<p>I think I've even used essentially this tactic in <code>data.num.lemmas</code></p>",
        "id": 134917744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538303472
    },
    {
        "content": "<p>My strategy is different. I encourage Chris and Kenny to learn tactics and next week I will be encouraging many more people to learn Lean and then encouraging the best ones to learn tactics. One might argue that part of the reason that localisations of rings and quadratic reciprocity are now in mathlib is that people near me somehow got persuaded that these were important projects. And for me they are extremely important because they are undergraduate level mathematics, which is something I am hugely trying to push.</p>",
        "id": 134917785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538303580
    },
    {
        "content": "<p>I don't know to what extent <code>norm_num</code> and <code>ring</code> got written because of rants by me about how mathematicians needed them, but I know for sure that I am extremely grateful for both.</p>",
        "id": 134917791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538303626
    },
    {
        "content": "<p>Another thing I know for sure is that a bright undergraduate is less busy than a bright PhD student, because it's much easier for the bright undergraduate to coast.</p>",
        "id": 134917967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304003
    },
    {
        "content": "<p>The rants were definitely a factor :)</p>",
        "id": 134917983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304084
    },
    {
        "content": "<p>I try to let the community decide my priorities to some extent, so being loud is not ineffective if you want me to make something for you</p>",
        "id": 134918026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304155
    },
    {
        "content": "<p>Thank you Mario for not just writing me off as an asshole.</p>",
        "id": 134918032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304210
    },
    {
        "content": "<p>you're just a guy with crazy pants</p>",
        "id": 134918071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304256
    },
    {
        "content": "<p>My summer students would have been completely lost without ring and norm_num.</p>",
        "id": 134918074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304289
    },
    {
        "content": "<p>Don't forget we also rant about the module refactoring and the <code>module</code> tactic</p>",
        "id": 134918091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538304328
    },
    {
        "content": "<p>I am writing teaching materials and I introduce ring and norm_num at the same time as rw. That's how important they seem to be in practice when doing undergraduate problem sheets in mathematics.</p>",
        "id": 134918093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304357
    },
    {
        "content": "<p>The point where module refactoring is the main stumbling block of the perfectoid project is approaching fast.</p>",
        "id": 134918134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538304373
    },
    {
        "content": "<p>it's my top lean priority right now</p>",
        "id": 134918137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304414
    },
    {
        "content": "<p>ROFL the slower module refactoring goes the longer I have an excuse for putting off the perfectoid project, which is what I have needed to do over the last week or two</p>",
        "id": 134918138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304419
    },
    {
        "content": "<p>With the category theory PR</p>",
        "id": 134918139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538304420
    },
    {
        "content": "<p>Is 33 open PR our new record?</p>",
        "id": 134918144,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538304435
    },
    {
        "content": "<p>I think second is merging the ever growing zoo of community branches</p>",
        "id": 134918147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304451
    },
    {
        "content": "<p>The community (not only you) needs to go through the community repo and delete or rename branches</p>",
        "id": 134918188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538304491
    },
    {
        "content": "<p>Patrick I was thinking about pushing perfectoids forward by epsilon yesterday but all I managed to do was write down a bit more precisely what needed to be done next. I pushed a commit which was just about ten lines of comments!</p>",
        "id": 134918189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304504
    },
    {
        "content": "<p>Again I think that the long term solution for this is training</p>",
        "id": 134918190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304525
    },
    {
        "content": "<p>I wonder whether it would be possible to set up a voting system for the PRs</p>",
        "id": 134918191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304541
    },
    {
        "content": "<p>so we can prioritize them a bit</p>",
        "id": 134918196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304560
    },
    {
        "content": "<p>are thumbs up on a PR visible from the PR list?</p>",
        "id": 134918262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304648
    },
    {
        "content": "<p>The risk with that is that if Patrick and I start rallying the troops to vote for the mathsy ones then Simon's work on traversable or other stuff which I don't understand the point of ends up languishing forever.</p>",
        "id": 134918263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304649
    },
    {
        "content": "<p>that seems fair - you actually have more users</p>",
        "id": 134918269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304695
    },
    {
        "content": "<p>I'm not saying there's no point though</p>",
        "id": 134918270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304699
    },
    {
        "content": "<p>and what I worry about is that actually in the long term whatever simon is doing might end up being much more important for making stuff work</p>",
        "id": 134918310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304723
    },
    {
        "content": "<p>I think I can judge that to some extent, any voting would be a suggestion at best</p>",
        "id": 134918315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304781
    },
    {
        "content": "<p>Patrick, I got into the habit of calling my branches <code>kmb_...</code> because I felt it only right that I should take some sort of responsibility for their existence.</p>",
        "id": 134918320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304806
    },
    {
        "content": "<p>After module refactoring I will go back to them and take a good look at all of the ones I created and then tidy them up. But (in contrast to you) I am not in a hurry for this because I am trying to put together a bunch of cocalc example sheets and a bunch of lean example sheets and in the long term I believe it's in my (and possibly the community's) interests to make the delivery of my course as smooth as possible.</p>",
        "id": 134918368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538304919
    },
    {
        "content": "<p>yeah, I realize that the module refactoring is going to cause some disruption</p>",
        "id": 134918413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538304997
    },
    {
        "content": "<p>In my metamath days the main database <a href=\"http://set.mm\" target=\"_blank\" title=\"http://set.mm\">set.mm</a> was like 90% of the existing code in the community, so if I do a refactoring and fix everything that's there most people don't feel the change.  With mathlib it's probably closer to 60% so I either have to visit everyone's projects or trust that they can fix it themselves</p>",
        "id": 134918472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538305167
    },
    {
        "content": "<p>I am very happy to fix my comm alg stuff and perfectoid stuff myself.</p>",
        "id": 134918517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538305229
    },
    {
        "content": "<p>I understand how all this works much better now. But it's also a reason why I don't want to write anything new right now (that and the far more important reason that I have no time).</p>",
        "id": 134918526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538305275
    },
    {
        "content": "<p>Sorry, I was captured by my children. My votes are: module refactoring and Scott's PR</p>",
        "id": 134919521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538307365
    }
]