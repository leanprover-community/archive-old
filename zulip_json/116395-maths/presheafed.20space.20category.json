[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is there anything we could do to make that <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/presheafed_space.lean#L64\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/presheafed_space.lean#L64\">line 64</a> to consume less than half of mathlib compile time?</p>",
        "id": 169862458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562587683
    },
    {
        "content": "<p>I guess <code>tidy</code> might be spending some time on the category axioms...</p>",
        "id": 169862538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562587777
    },
    {
        "content": "<p>Maybe we could help it a bit</p>",
        "id": 169862655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562587846
    },
    {
        "content": "<p>I'm compiling mathlib a lot, and I keep staring at <code>src/algebraic_geometry/presheafed_space.lean: parsing at line 64</code></p>",
        "id": 169862696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562587882
    },
    {
        "content": "<p>and that's on my fast computer</p>",
        "id": 169862701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562587891
    },
    {
        "content": "<p>What I really don't understand is that I see that multiple times during a single <code>leanpkg build</code> run</p>",
        "id": 169862759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562587937
    },
    {
        "content": "<p>Is there some sort of <code>tidy</code> magic or similar clever tactic going on in that line? Is this a situation where you can look at the proof generated by the magic and just cut and paste it in?</p>",
        "id": 169862772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562587957
    },
    {
        "content": "<p>It spend some time on that line, then compiles other stuff and comes back to that line</p>",
        "id": 169862775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562587961
    },
    {
        "content": "<p>Are you sure it's just not doing that with one core and doing other things with other cores?</p>",
        "id": 169862789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562587985
    },
    {
        "content": "<p>Yes, it's probably <code>tidy</code>, so it has a hole command version we could copy-paste</p>",
        "id": 169862794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562587986
    },
    {
        "content": "<p>You can definitely look at what <code>tidy</code> produces.</p>",
        "id": 169862796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562587991
    },
    {
        "content": "<p>I don't know how the <code>leanpkg build</code> output interacts with the multiple core thing</p>",
        "id": 169862811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562588019
    },
    {
        "content": "<p>Lean is using 1500% CPU</p>",
        "id": 169862818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562588029
    },
    {
        "content": "<p>I don't know if tidy has anything to do with it. It's just one of these miraculous proofs which Scott is extremely good at pulling off using his magic</p>",
        "id": 169862819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562588030
    },
    {
        "content": "<p>tidy <em>is</em> Scott's magic</p>",
        "id": 169862880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562588058
    },
    {
        "content": "<p>but it's extremely slow</p>",
        "id": 169862900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562588079
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">category_of_PresheafedSpaces</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">PresheafedSpace</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Shouldn't this say <code>by structure_helper</code>? ;-)</p>",
        "id": 169863214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562588303
    },
    {
        "content": "<p>Sorry about this. I am travelling/on holiday for another 10 days, but will try to get to this then.</p>",
        "id": 170602718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562822380
    },
    {
        "content": "<p>I'm dubious about using <code>by structure_helper</code> for defining data! (Notice this construction contains no proofs, because they've been tidy'd away.)</p>",
        "id": 170602766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562822406
    },
    {
        "content": "<p>Indeed, if we are worried about such definitions being slow, <code>by structure_helper</code> would make that definition strictly slower (though perhaps only by microseconds).</p>",
        "id": 170607757,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1562828831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, sorry, I finally got around to fixing this, it's in <a href=\"https://github.com/leanprover-community/mathlib/issues/1273\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1273\">#1273</a> now.</p>",
        "id": 171870290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564282328
    },
    {
        "content": "<p>Nice! Of course I really hope all this problem will disappear at some point because tactics will either become fast or properly cached.</p>",
        "id": 171884790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564311386
    }
]