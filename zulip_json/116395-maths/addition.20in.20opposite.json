[
    {
        "content": "<p>Currently <code>op (a * b) = op b * op a</code> while <code>op (a + b) = op a + op b</code>. Though it makes sense because addition is usually commutative, it breaks the <code>to_additive</code> machinery.</p>",
        "id": 189135688,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1582737621
    },
    {
        "content": "<p>What was the reason to choose <code>op (a + b) = op a + op b</code>?</p>",
        "id": 189135725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1582737657
    },
    {
        "content": "<p>In general it doesn't make sense to conflate different kinds of \"opposite\" because they can vary independently: eg multiplication and order (or symmetric monoidal structure and category structure). I think this was discussed on either zulip or the github pr.</p>",
        "id": 189139008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582739627
    },
    {
        "content": "<p>For <code>additive</code> purposes maybe it makes sense to add <code>opposite_add</code> (which strikes me as rarely useful otherwise)</p>",
        "id": 189139114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582739677
    },
    {
        "content": "<p>I'll either add <code>opposite_add</code> or use <code>additive</code>/<code>multiplicative</code> tags instead of <code>to_additive</code>.</p>",
        "id": 189139983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1582740198
    }
]