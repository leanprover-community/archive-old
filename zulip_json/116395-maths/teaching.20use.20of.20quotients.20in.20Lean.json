[
    {
        "content": "<p>I once found it hard to use quotients in Lean. I typically wanted to use quotients to define mathematical objects (like quotient rings) and the example (unordered pairs) in TPIL was a bit CSish for me. The first time I needed them was for localisation of rings and Kenny wrote everything for me. But I needed them more and more, and eventually I had to learn how they worked. I wrote code for the integers mod n, but at the time I didn't understand the type class inference system very well either, and the code was not great. <span class=\"user-mention\" data-user-id=\"120726\">@Luca Gerolla</span> needs to work with quotients for his work on the fundamental group and it occurred to me that I should revisit the work and tidy it up. One problem with integers mod n which I think could confuse beginners was a problem discussed here once, namely that it's hard to use type classes to put the equivalence relation of being congruent mod n onto Z, because that's one equivalence relation per n, and type class inference would rather there just be one equivalence relation on a type. The fix suggested to me at the time was to use a new version of Z for each integer, but having mulled this over for a while I decided that it added another layer of complexity which was unsuitable for the beginner. So I decided to choose everyone (except Johan)'s favourite integer 37, and just construct the integers mod 37 instead.</p>\n<p>I jump from tactic mode proofs to half-tactic half-term to full term mode proofs, depending on whether I'm trying to demonstrate something for the first time or just get things done. This code is supposed to be readable by learners who know a bit about Lean and are interested in decyphering all the <code>quotient.induction_on\\2</code> stuff and want to see a relatively simple example. The code is here:</p>\n<p><a href=\"https://github.com/kbuzzard/xena/blob/master/xenalib/m1f/zmod37.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/xenalib/m1f/zmod37.lean\">https://github.com/kbuzzard/xena/blob/master/xenalib/m1f/zmod37.lean</a></p>",
        "id": 131184986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533834198
    },
    {
        "content": "<p>Why do you define a setoid instance instead of having a def?</p>",
        "id": 131185870,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533835211
    },
    {
        "content": "<p>I'm not seeing why 37 is better than n</p>",
        "id": 131186089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835441
    },
    {
        "content": "<p>I want to give the same answer to both questions -- so I can use type class inference</p>",
        "id": 131186102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533835459
    },
    {
        "content": "<p>I wanted access to the \\[[ notation etc</p>",
        "id": 131186108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533835470
    },
    {
        "content": "<p>make a notation for that</p>",
        "id": 131186114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835478
    },
    {
        "content": "<p>I didn't want to make it harder. I wanted to show Luca how to do it</p>",
        "id": 131186129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533835497
    },
    {
        "content": "<p>That's the actual answer.</p>",
        "id": 131186132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533835501
    },
    {
        "content": "<p>I want <em>him</em> to use type class inference</p>",
        "id": 131186147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533835509
    },
    {
        "content": "<p>I think <code>setoid</code> is one of the more poorly thought out typeclasses</p>",
        "id": 131186235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835609
    },
    {
        "content": "<p>Are we still going to be stuck with those things in lean4?</p>",
        "id": 131186259,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533835655
    },
    {
        "content": "<p>no idea</p>",
        "id": 131186284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835668
    },
    {
        "content": "<p>I think it should be called <code>has_equiv</code> and be tied to the <code>\\approx</code> notation, but the <code>\\[[</code> notation should be inferred by unification</p>",
        "id": 131186302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835714
    },
    {
        "content": "<p>in lean4 we wouldn't have to worry about + and * being different things right</p>",
        "id": 131186335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533835759
    },
    {
        "content": "<p>that's a bit vague</p>",
        "id": 131186342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835777
    },
    {
        "content": "<p>I think the idea is that we won't have both <code>add_group</code> and <code>group</code></p>",
        "id": 131186375,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533835804
    },
    {
        "content": "<p>we won't have either</p>",
        "id": 131186403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835835
    },
    {
        "content": "<blockquote>\n<p>I think <code>setoid</code> is one of the more poorly thought out typeclasses</p>\n</blockquote>\n<p>Sure, but I am teaching Lean 3.4.1 so I went with it.</p>",
        "id": 131186410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533835848
    },
    {
        "content": "<p>presumably that's moving to mathlib</p>",
        "id": 131186413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835849
    },
    {
        "content": "<p>we could have <code>heartsuit_group</code></p>",
        "id": 131186424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533835869
    },
    {
        "content": "<p>the possibilities are endless</p>",
        "id": 131186431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533835878
    },
    {
        "content": "<p>my point is that it's not a great example if you are teaching typeclasses</p>",
        "id": 131186432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533835879
    },
    {
        "content": "<p>I'm not teaching typeclasses, I'm teaching Luca how to work with the quotient of the paths from x to x by the is_homotopic relation which he's shown is an equivalence relation. He now has to define a group structure on the quotient, and I looked at his code, and he defined the group law by using <code>quotient.out</code> to choose two random lifts, composed the paths, and went back down again. He was not using type class inference either, so it was <code>@quotient.out [insert proof of equiv reln here]</code> I needed to show him how to do it properly. I agree that the file doesn't do everything, but hopefully it does what it needs to do.</p>",
        "id": 131186593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533836046
    },
    {
        "content": "<p>It is also the file I wished I had when I was trying to figure out how to use quotients for the first time.</p>",
        "id": 131186610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533836100
    },
    {
        "content": "<p>maybe it should be</p>",
        "id": 131186629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836118
    },
    {
        "content": "<p>rather than showing people Z/37Z, show them the fundamental group</p>",
        "id": 131186646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836143
    },
    {
        "content": "<p>it's surely more interesting for students with more mathematical sophistication</p>",
        "id": 131186686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836197
    },
    {
        "content": "<p>then prove the fundamental group of the circle is Z and PR it :D</p>",
        "id": 131186824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836352
    },
    {
        "content": "<blockquote>\n<p>then prove the fundamental group of the circle is Z and PR it :D</p>\n</blockquote>\n<p>You mean do an _example_???</p>",
        "id": 131186893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533836421
    },
    {
        "content": "<p>Oh, is this just a way of proving that the definition is correct?</p>",
        "id": 131186908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533836444
    },
    {
        "content": "<p>The proof of pi_1(S^1)=Z I know involves constructing going via a triangulation and using some simplicial approximation theorem stuff</p>",
        "id": 131186946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533836498
    },
    {
        "content": "<p>it would not surprise me if there were a cute proof though</p>",
        "id": 131186973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533836507
    },
    {
        "content": "<p>that is not what I expected</p>",
        "id": 131186997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836557
    },
    {
        "content": "<p>the proof I know uses covering maps and winding numbers</p>",
        "id": 131187011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836574
    },
    {
        "content": "<p><code>S^1 = real/int</code>, and <code>real</code> is contractible. So <code>int</code> is the fundamental group.</p>",
        "id": 131187038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836613
    },
    {
        "content": "<p>Now, how do we explain that to Lean?</p>",
        "id": 131187047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836623
    },
    {
        "content": "<p>wait what</p>",
        "id": 131187054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836632
    },
    {
        "content": "<p>how does that last step work?</p>",
        "id": 131187098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836674
    },
    {
        "content": "<p>I guess you need to know that <code>S^1</code> is a <em>nice</em> space...</p>",
        "id": 131187132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836720
    },
    {
        "content": "<p>I believe the first line, that's not hard to prove</p>",
        "id": 131187146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836741
    },
    {
        "content": "<p>Where <em>nice</em> means locally compact and t2, or something similar.</p>",
        "id": 131187147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836741
    },
    {
        "content": "<p>and you should get niceness that way</p>",
        "id": 131187170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836753
    },
    {
        "content": "<p>And then you know that S^1 has a universal covering space, and you get a group structure on the fibre, which is exactly pi_1</p>",
        "id": 131187189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836785
    },
    {
        "content": "<p>are you still elucidating your one line proof?</p>",
        "id": 131187203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836821
    },
    {
        "content": "<p>Yes... I'm sorry.</p>",
        "id": 131187215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836834
    },
    {
        "content": "<p>I'm trying to figure out how R is contractible plays into this</p>",
        "id": 131187223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836855
    },
    {
        "content": "<p>Well, that is supposed to convince you that R is the universal covering space...</p>",
        "id": 131187235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836882
    },
    {
        "content": "<p>We could prove a general lemma of the form <code>simply_connected X</code> implies <code>pi_1(X/G) = G</code></p>",
        "id": 131187327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836954
    },
    {
        "content": "<p>oh so that's true in generality?</p>",
        "id": 131187337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836971
    },
    {
        "content": "<p>If <code>X</code> is nice.</p>",
        "id": 131187345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836980
    },
    {
        "content": "<p>Maybe even in general.</p>",
        "id": 131187350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533836989
    },
    {
        "content": "<p>G is discrete?</p>",
        "id": 131187354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533836994
    },
    {
        "content": "<p>i.e. pi_1(X/X) is not X</p>",
        "id": 131187413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837031
    },
    {
        "content": "<p>True.</p>",
        "id": 131187429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837047
    },
    {
        "content": "<p>to make X a covering map you need it to be locally like a quotient by a discrete space</p>",
        "id": 131187451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837078
    },
    {
        "content": "<p>So there are some conditions. G needs to be discrete (topologically) and act freely on X, and the action must be continuous.</p>",
        "id": 131187456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837092
    },
    {
        "content": "<p>So <code>G</code> is a discrete subgroup of <code>Aut_Top(X)</code>.</p>",
        "id": 131187468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837116
    },
    {
        "content": "<p>which kind of quotient are we talking about here?</p>",
        "id": 131187536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837164
    },
    {
        "content": "<p>But I haven't formalised this... so I don't know what I'm talking about.</p>",
        "id": 131187537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837164
    },
    {
        "content": "<p>X/G as a set, with quotient topology, I think.</p>",
        "id": 131187557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837195
    },
    {
        "content": "<p>If X is a topological group and G a discrete subgroup you get the other conditions</p>",
        "id": 131187558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837195
    },
    {
        "content": "<p>R/Z as a set is garbage, that just identifies the points of Z in R making it a bouquet of circles</p>",
        "id": 131187627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837264
    },
    {
        "content": "<p>Aah, sorry. I meant as group action of sets.</p>",
        "id": 131187650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837298
    },
    {
        "content": "<p>this is the quotient of a group acting on a nice top space</p>",
        "id": 131187660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837311
    },
    {
        "content": "<p>so the quotient space is the set of orbits</p>",
        "id": 131187664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837320
    },
    {
        "content": "<p>An example is the quotient of a group by a subgroup</p>",
        "id": 131187676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837348
    },
    {
        "content": "<p>but if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">Γ</span></span></span></span> is a subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mi>L</mi><mo>(</mo><mn>2</mn><mo separator=\"true\">,</mo><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">SL(2,\\mathbb{Z})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">2</span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mclose\">)</span></span></span></span> with no torsion (e.g. the elements congruent to the identity modulo <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>&gt;</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">N&gt;=3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mrel\">&gt;</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">3</span></span></span></span>) then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">Γ</span></span></span></span> acts on the upper half plane (which is nice and contractible) discretely, and the quotient is a non-compact Riemann surface with fundamental group <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">Γ</span></span></span></span>.</p>",
        "id": 131187749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837441
    },
    {
        "content": "<p>What would the definition of <code>S^1</code> be in Lean?</p>",
        "id": 131187808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837488
    },
    {
        "content": "<p>You could certainly define it to be the closed subspace of R^2</p>",
        "id": 131187823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837511
    },
    {
        "content": "<p>Right, that is maybe a more reasonable definition.</p>",
        "id": 131187837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837545
    },
    {
        "content": "<p>that's my thought as well, it's true to the literature and also generalizes to using circles as... circles</p>",
        "id": 131187839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837550
    },
    {
        "content": "<p>and IF WE EVER MANAGED TO GET THE EXPONENTIAL FUNCTION INTO MATHLIB then you could even prove it was R mod Z :-)</p>",
        "id": 131187840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837556
    },
    {
        "content": "<p>And then identify it with the unit circle in C</p>",
        "id": 131187841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837556
    },
    {
        "content": "<p>Right.</p>",
        "id": 131187845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837563
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Trivial.20things.20about.20convergent.20power.20series\" title=\"#narrow/stream/116395-maths/topic/Trivial.20things.20about.20convergent.20power.20series\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Trivial.20things.20about.20convergent.20power.20series</a></p>",
        "id": 131187911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837615
    },
    {
        "content": "<p>Maybe exp should move to the community fork. Who knows if that would move it forward...</p>",
        "id": 131187915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837618
    },
    {
        "content": "<p>pff, use rational trig and you don't need exp</p>",
        "id": 131187918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837621
    },
    {
        "content": "<p>:-)</p>",
        "id": 131187926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837628
    },
    {
        "content": "<p>Who needs to be complex when you can just be rational.</p>",
        "id": 131187935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837638
    },
    {
        "content": "<p>that's actually a good idea Johan</p>",
        "id": 131187976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837719
    },
    {
        "content": "<p>Or you could just come to the xena project, we use it freely over there :-)</p>",
        "id": 131188024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837742
    },
    {
        "content": "<p>warning: not all code compiles</p>",
        "id": 131188035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837752
    },
    {
        "content": "<p>which is why it is a good community fork project</p>",
        "id": 131188043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837764
    },
    {
        "content": "<p>you are already using it but the PR needs more work</p>",
        "id": 131188061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837788
    },
    {
        "content": "<p>or at least I need to spend more time on it</p>",
        "id": 131188077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837809
    },
    {
        "content": "<p>I don't even know which PR it is any more. Is it in the binomial theorem one or the limits one?</p>",
        "id": 131188135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837847
    },
    {
        "content": "<p>I can't find it in either</p>",
        "id": 131188145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837859
    },
    {
        "content": "<p>surely it's not in the binomial theorem</p>",
        "id": 131188153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837878
    },
    {
        "content": "<p>I think anyone can pull that branch into the community fork, right? (After we found it)</p>",
        "id": 131188155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533837882
    },
    {
        "content": "<p>yes</p>",
        "id": 131188163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837898
    },
    {
        "content": "<p>I think he needed the binomial theorem to prove exp(x+y)=exp(x)exp(y)</p>",
        "id": 131188178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533837910
    },
    {
        "content": "<p>I suppose you do</p>",
        "id": 131188188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533837939
    },
    {
        "content": "<p>By the way, another random PR we use a lot at Imperial is Chris' zmod work. But I hear you didn't like pos_nat and I believe Chris is now re-doing everything with pnat and prime</p>",
        "id": 131188262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838000
    },
    {
        "content": "<p>I can't find exp. Did he close it?</p>",
        "id": 131188285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838036
    },
    {
        "content": "<p>No wonder it didn't get accepted :-)</p>",
        "id": 131188293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> We need you (-;</p>",
        "id": 131188299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533838056
    },
    {
        "content": "<p>he's too busy helping all the other Imperial UGs while I'm on holiday :-)</p>",
        "id": 131188322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838078
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/43\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/43\">https://github.com/leanprover/mathlib/pull/43</a></p>",
        "id": 131188323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838081
    },
    {
        "content": "<p>branch is no longer there.</p>",
        "id": 131188395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533838145
    },
    {
        "content": "<p>So we will need to get the stuff out of Xena.</p>",
        "id": 131188398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533838155
    },
    {
        "content": "<p>so it looks like the ball's in Chris' court.</p>",
        "id": 131188401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838162
    },
    {
        "content": "<p>no wait it's <a href=\"https://github.com/leanprover/mathlib/pull/41\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/41\">https://github.com/leanprover/mathlib/pull/41</a></p>",
        "id": 131188402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838162
    },
    {
        "content": "<p>it says it is a PR from <code>unknown repository</code></p>",
        "id": 131188414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838198
    },
    {
        "content": "<p>I'd be quite happy if he were to concentrate on zmod at the minute, we've all found this very helpful. There's a bunch of people doing number theory and group theory, some of whom use it.</p>",
        "id": 131188466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838218
    },
    {
        "content": "<p>Which means that the repo was deleted from github, I think</p>",
        "id": 131188467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533838218
    },
    {
        "content": "<p>I think I deleted my fork of mathlib at some point when I was frustratedly trying to learn how to use git.</p>",
        "id": 131188476,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533838248
    },
    {
        "content": "<p>They don't teach mathematicians git :-(</p>",
        "id": 131188485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838254
    },
    {
        "content": "<p>Chapter 0 in your book is about git, right?</p>",
        "id": 131188497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533838274
    },
    {
        "content": "<p>I think those files should all be dumped in the community fork, and we can come back to it at some point</p>",
        "id": 131188499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838280
    },
    {
        "content": "<p>I'm not competent to write it</p>",
        "id": 131188500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533838283
    },
    {
        "content": "<p>You could have a foreword by someone else... Mario for example</p>",
        "id": 131188509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533838300
    },
    {
        "content": "<p>Step 1: <a href=\"http://git-scm.com\" target=\"_blank\" title=\"http://git-scm.com\">git-scm.com</a>, step 2: profit</p>",
        "id": 131188563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533838342
    },
    {
        "content": "<p>Install sourcetree while you're at it</p>",
        "id": 131191018,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1533840992
    },
    {
        "content": "<p>Nobody has time to remember all the magic git invocations, so a gui wrapper really helps</p>",
        "id": 131191048,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1533841034
    },
    {
        "content": "<p>I used to believe that. So I advised computer afraid colleagues to use source tree and, after many rescuing operations, I realized command line is much simpler. Because you don't have to know about all commands and options that are not written in your git cheat sheet.</p>",
        "id": 131197153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533848674
    }
]