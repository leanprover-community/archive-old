[
    {
        "content": "<p>There seems to me to be something unsatisfactory about the mathlib definition of a (partially) ordered ring [1]. Specifically, it seems to me that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">mul_pos</span>     <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>ought to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">mul_pos</span>     <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is the axiom used in other locations e.g. [2], [3], [4]. More importantly the space of continuous real-valued functions on the unit interval is not an ordered ring according to the mathlib definition. (Consider two bump functions with disjoint supports.) Should we not expect a useful definition of ordered ring to include continuous bounded functions on a locally compact Hausdorff space?</p>\n<p>Is there a reason <code>mul_pos</code> is specified the way it is?</p>\n<p>Thanks,</p>\n<p>Christopher</p>\n<p>[1] <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ordered_ring.lean#L490-L492\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ordered_ring.lean#L490-L492</a><br>\n[2] <a href=\"https://en.wikipedia.org/wiki/Ordered_ring\">https://en.wikipedia.org/wiki/Ordered_ring</a><br>\n[3] <a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Rings.html\">https://isabelle.in.tum.de/library/HOL/HOL/Rings.html</a><br>\n[4] <a href=\"https://www.google.co.uk/books/edition/Lecture_Notes_On_Algebraic_Structure_Of/6vq2CgAAQBAJ?hl=en&amp;gbpv=1&amp;dq=ordered+rings&amp;pg=PA20&amp;printsec=frontcover\">https://www.google.co.uk/books/edition/Lecture_Notes_On_Algebraic_Structure_Of/6vq2CgAAQBAJ?hl=en&amp;gbpv=1&amp;dq=ordered+rings&amp;pg=PA20&amp;printsec=frontcover</a></p>",
        "id": 222597423,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1610551786
    },
    {
        "content": "<p>Just from a naming point of view, wouldn't your suggestion be called <code>mul_nonneg</code>?</p>",
        "id": 222597870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610551928
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/ordered_ring.html#mul_nonneg\">https://leanprover-community.github.io/mathlib_docs/algebra/ordered_ring.html#mul_nonneg</a></p>",
        "id": 222598134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610552022
    },
    {
        "content": "<p>I think we just put the strongest properties we could get away with; there is a whole zoo of less constrained algebraic objects and it would be a lot of navel gazing to explore all of them, so we're just adding them as they become required for applications</p>",
        "id": 222598335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610552088
    },
    {
        "content": "<p>For conventional rings like <code>int</code> (or totally ordered rings more generally) it's no problem to have a rule like <code>mul_pos</code></p>",
        "id": 222598487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610552145
    },
    {
        "content": "<p>it's certainly a theorem you want to be true in \"some generality\", so we need a class to represent it and the theorems that derive from it anyway</p>",
        "id": 222598625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610552189
    },
    {
        "content": "<p>I think linearly ordered rings should probably have this <code>mul_pos</code> property, but not general ordered rings</p>",
        "id": 222598926,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610552293
    },
    {
        "content": "<p>I recall us investigating this a while ago. In fact I suspect the definition did not have mul_pos in it two years ago</p>",
        "id": 222599048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610552331
    },
    {
        "content": "<p>There was some discussion about related topics back in October (<a href=\"https://github.com/leanprover-community/mathlib/issues/4296\">#4296</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/4363\">#4363</a>) but I'm not sure about this specifically</p>",
        "id": 222599162,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610552375
    },
    {
        "content": "<p>Ah yeah that was what I was thinking of</p>",
        "id": 222599610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610552530
    },
    {
        "content": "<p>from what I can tell this rule dates back at least to when <code>ordered_ring</code> was in core</p>",
        "id": 222599673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610552550
    },
    {
        "content": "<p>The fact that mathlib's definition doesn't agree with other standard sources and there's no mention of it in the doc string is a problem. We could of course just add a doc string with a possible <code>TODO</code> for a bigger refactor.</p>",
        "id": 222605954,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610554895
    },
    {
        "content": "<p>Just as an exercises, these two definitions are equivalent if <code>[no_zero_divisors R]</code> is around:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">haz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">haz</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hbz</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hbz</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">or.resolve_right</span> <span class=\"o\">(</span><span class=\"n\">le_iff_lt_or_eq.mp</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">haz</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb'</span> <span class=\"o\">:=</span> <span class=\"n\">or.resolve_right</span> <span class=\"o\">(</span><span class=\"n\">le_iff_lt_or_eq.mp</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hbz</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ha'</span> <span class=\"n\">hb'</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- needed for the reverse direction</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_iff_lt_or_eq.mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hb</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">h2.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222609813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610556475
    },
    {
        "content": "<p>In the isabelle version, it looks like <code>mul_pos</code> is derived from <code>mul_nonneg</code> over a total order. If that works that seems fine to me</p>",
        "id": 222616346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610558971
    },
    {
        "content": "<p>oh but you have to assume <code>0 &lt; 1</code></p>",
        "id": 222616476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610559006
    },
    {
        "content": "<p>which also make sense, I guess</p>",
        "id": 222617676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610559496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  From an Operator Algebra point of view, I'd use the term \"positive\" for \"0 ≤ \" and \"strictly positive\" for \"0&lt;\". But that might not match Mathlib's conventions.</p>",
        "id": 222620584,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1610560809
    },
    {
        "content": "<p>Currently the only instance of <code>ordered_ring</code> in mathlib that is not linearly ordered is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.germ.ordered_ring\">docs#filter.germ.ordered_ring</a>. I think it would be good to change our definition to the standard definition.</p>",
        "id": 222625577,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1610562988
    }
]