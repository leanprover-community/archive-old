[
    {
        "content": "<p>There exists theorems about polynomials whose maths proofs are \"trivial by strong induction on degree of the polynomial\". How do I write this in Lean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- I want to reduce the goal `P f` to a statement</span>\n  <span class=\"c1\">-- of the form \"if a certain statement is true</span>\n  <span class=\"c1\">-- for all functions of nat_degree zero and</span>\n  <span class=\"c1\">-- if some statement about functions of degree d</span>\n  <span class=\"c1\">-- implies some statement about functions of degree d+1,</span>\n  <span class=\"c1\">-- then we're done\", and that should be nat.rec</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- Maths proof: \"Easy exercise (hint: induction on degree)\"</span>\n<span class=\"bp\">@</span><span class=\"n\">nat.rec</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">_</span> <span class=\"c1\">-- computer says no</span>\n</code></pre></div>",
        "id": 274255197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646501402
    },
    {
        "content": "<p><code>induction h : p.nat_degree using nat strong_induction_on</code> or something like that?</p>",
        "id": 274255596,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1646501843
    },
    {
        "content": "<p>Yeah OK I've got it working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">polynomial.degree_induction</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">d.succ</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">f.nat_degree</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- refine @nat.rec _ h0 hsucc n, -- fails</span>\n  <span class=\"c1\">-- but the next line guesses the motive anyway</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.rec</span> <span class=\"n\">h0</span> <span class=\"n\">hsucc</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm sure I'm still making a meal of it.</p>",
        "id": 274257753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646504580
    },
    {
        "content": "<p>Finally getting the hang of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">polynomial.degree_strong_induction</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">IH</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Dunno why I found these so hard to write; I was occasionally wrestling with the elaborator.</p>",
        "id": 274258415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646505451
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>'s point is that we don't need those lemmas, as the <code>h :</code> syntax of the induction tactic already covers them</p>",
        "id": 274278682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646532921
    },
    {
        "content": "<p>If the lemma is helpful to Kevin, who am I to disagree? :)</p>",
        "id": 274290642,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1646551120
    },
    {
        "content": "<p>Sorry, I moved onto other things (marking for my course appeared and I had to prioritise that) but now I'm back trying to prove the same theorem (and my course is over next week so I'd better get a move on!) and I still do not understand what people are saying here. As shown above I can prove <code>polynomial.degree_strong_induction</code> by explicitly using <code>nat.strong_induction_on</code> but for pedagogical reasons (and also for elaborator reasons) I would rather use the <code>induction</code> tactic. What I want is to formalise \"We prove this by strong induction on degree; it now suffices to verify the inductive hypothesis\". Hopefully the following Lean code makes it clear what my problem is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree</span>\n\n<span class=\"c1\">-- Goal: to reduce a goal `∀ f, P f` to a statement of the form</span>\n<span class=\"c1\">-- \"if P is true for all polynomials of degree &lt; n then it's true for</span>\n<span class=\"c1\">-- all polynomials of degree n\".</span>\n\n<span class=\"c1\">-- What I want:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">polynomial.degree_strong_induction</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- INSERT MAGIC INCANTATION HERE</span>\n  <span class=\"n\">exact</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"c1\">-- or exact IH f.nat_degree or whatever</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Here is a complete proof of the statement.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">polynomial.degree_strong_induction1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Assume we're given IH already.</span>\n  <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- This works, so this is fine *if* you have `IH` to hand, which of course</span>\n<span class=\"c1\">-- in practice you may not (and you might not want to make it by hand</span>\n<span class=\"c1\">-- if `P` is complex)</span>\n<span class=\"c1\">-- Note that `rfl` is a proof of `f.nat_degree = f.nat_degree` and</span>\n<span class=\"c1\">-- I don't really understand what it's doing there; I seem to be giving</span>\n<span class=\"c1\">-- nat.strong_induction_on too many arguments (i.e. I don't actually understand this proof;</span>\n<span class=\"c1\">-- I think the motive is more complicated than I imagine)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">polynomial.degree_strong_induction2</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- (IH : ∀ (n : ℕ),</span>\n  <span class=\"c1\">-- (∀ (m : ℕ), m &lt; n → ∀ (q : polynomial R), q.nat_degree = m → P q) →</span>\n  <span class=\"c1\">-- ∀ (q : polynomial R), q.nat_degree = n → P q)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- want to make Lean make IH automatically from P</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">f.nat_degree</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- elaboration error which I don't understand and can't fix</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- `induction using` attempt:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">polynomial.degree_strong_induction3</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- oh dear, notice that ᾰ is useless in the presence of h</span>\n  <span class=\"c1\">-- as it claims f.nat_degree &lt; f.nat_degree</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">polynomial.degree_strong_induction4</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">generalizing</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"c1\">--</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- well now probably ᾰ isn't useless but it's a hypothesis, not the goal.</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275913638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647700983
    },
    {
        "content": "<p>I don't see the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">polynomial.degree_strong_induction4</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">generalizing</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"c1\">--</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- well now probably ᾰ isn't useless but it's a hypothesis, not the goal.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"n\">ᾰ</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275913849,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647701327
    },
    {
        "content": "<p>The point is that in my use case <em>I do not have IH</em>. I want to <em>reduce</em> the goal to IH, not use IH to prove the goal.</p>",
        "id": 275914009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647701576
    },
    {
        "content": "<p>then I don't see the issue at all, either; you have <code>h</code> and <code>ǎ</code> in the goal, which give you everything you need. in fact, I did this recently with strong induction on the derivative of a polynomial:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.derivative</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iterate_derivative_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">polynomial.derivative</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_succ_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">pos_of_gt</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.iterate_succ_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.derivative</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">polynomial.iterate_derivative_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat_degree_derivative_lt</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">this.trans_le</span> <span class=\"bp\">$</span> <span class=\"n\">nat.le_of_lt_succ</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275914095,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647701720
    },
    {
        "content": "<p>Thanks -- I'll think again.</p>",
        "id": 275914118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647701762
    },
    {
        "content": "<p>maybe things become clearer if you <code>subst h</code> straight away</p>",
        "id": 275914409,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647702105
    },
    {
        "content": "<p>You're absolutely right, the key thing is <code>generalizing</code> (which I wasn't using two weeks ago) and it's giving me a goal which is basically a special case of <code>IH</code>. Thanks!</p>",
        "id": 275914478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647702206
    },
    {
        "content": "<p>Why not just use <code>induction p using polynomial.degree_strong_induction</code> as a custom induction principle?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.derivative</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.degree_strong_induction</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">generalizing</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iterate_derivative_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">polynomial.derivative</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"n\">using</span> <span class=\"n\">polynomial.degree_strong_induction</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_succ_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">pos_of_gt</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.iterate_succ_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.derivative</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">polynomial.iterate_derivative_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat_degree_derivative_lt</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">this.trans_le</span> <span class=\"o\">(</span><span class=\"n\">nat.le_of_lt_succ</span> <span class=\"n\">hx</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275915269,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647703362
    },
    {
        "content": "<p>i don't really see how that's really an improvement, and if we have one of those for each ℕ you may do induction on in the library I think we'll have a very long list</p>",
        "id": 275915403,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647703600
    },
    {
        "content": "<p>Perhaps we should allow <code>induction rfl : foo</code> to do the <code>subst</code> automatically?</p>",
        "id": 275921181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647712212
    },
    {
        "content": "<p>Or perhaps even <code>induction foo</code> should do it for us when <code>foo</code> is more than a variable</p>",
        "id": 275921201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647712267
    },
    {
        "content": "<p>(Aside : <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_derivative_lt\">docs#polynomial.nat_degree_derivative_lt</a> could be generalized to the more natural :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nat_degree_derivative_lt</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.derivative.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">p.derivative</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hp'</span> <span class=\"n\">hp'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp'</span><span class=\"o\">,</span> <span class=\"n\">polynomial.nat_degree_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">polynomial.nat_degree_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">with_bot.some_lt_some</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree</span><span class=\"o\">,</span> <span class=\"n\">option.get_or_else_of_ne_none</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"n\">degree_eq_bot.1</span> <span class=\"n\">hp'</span><span class=\"o\">,</span>\n    <span class=\"n\">nat_degree</span><span class=\"o\">,</span> <span class=\"n\">option.get_or_else_of_ne_none</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"n\">degree_eq_bot.1</span> <span class=\"n\">hp1</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">degree_derivative_lt</span> <span class=\"n\">hp1</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275983256,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647803920
    },
    {
        "content": "<p>these are equivalent under <code>mt</code>+ <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_eq_zero_of_derivative_eq_zero\">docs#polynomial.nat_degree_eq_zero_of_derivative_eq_zero</a>, I guess</p>",
        "id": 275985606,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647807391
    },
    {
        "content": "<p>I'm currently tidying this file a little in <a href=\"https://github.com/leanprover-community/mathlib/pull/12833\">#12833</a>, maybe this is a change worth making though</p>",
        "id": 275985621,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647807439
    },
    {
        "content": "<p>Equivalent only with the char_zero assumption. <code>nat_degree_derivative_lt</code> is indeed more general.</p>",
        "id": 276003363,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647834009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> , as <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> says, one can have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>P</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">P&#x27;=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> even if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>deg</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>P</mi><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\deg(P)\\neq0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">de<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. A standard example is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">T^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> in characteristic $p$, but there are many other cases.</p>",
        "id": 276018084,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647851287
    },
    {
        "content": "<p>Oh, d'ah, I talked about this in another thread, too! I'll update this, thanks!</p>",
        "id": 276026124,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647856076
    },
    {
        "content": "<p>PR'd this in <a href=\"https://github.com/leanprover-community/mathlib/pull/12856\">#12856</a>!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/induction.20on.20degree.20of.20polynomial/near/275983256\">said</a>:</p>\n<blockquote>\n<p>(Aside : <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_derivative_lt\">docs#polynomial.nat_degree_derivative_lt</a> could be generalized to the more natural :</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nat_degree_derivative_lt</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.derivative.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">p.derivative</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hp'</span> <span class=\"n\">hp'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp'</span><span class=\"o\">,</span> <span class=\"n\">polynomial.nat_degree_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">polynomial.nat_degree_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">with_bot.some_lt_some</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree</span><span class=\"o\">,</span> <span class=\"n\">option.get_or_else_of_ne_none</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"n\">degree_eq_bot.1</span> <span class=\"n\">hp'</span><span class=\"o\">,</span>\n    <span class=\"n\">nat_degree</span><span class=\"o\">,</span> <span class=\"n\">option.get_or_else_of_ne_none</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"n\">degree_eq_bot.1</span> <span class=\"n\">hp1</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">degree_derivative_lt</span> <span class=\"n\">hp1</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 276039119,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647863811
    }
]