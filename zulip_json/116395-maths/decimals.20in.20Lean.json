[
    {
        "content": "<p>I've never used these before. I was just playing around with them and ran into this (Lean knows 0.5=1/2 by the way :D ) :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">x</span> <span class=\"c1\">-- 1 / 2</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">numerals</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">x</span> <span class=\"c1\">-- has_one.one ℝ / bit0 (has_one.one ℝ)</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">numerals</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">class</span> <span class=\"n\">less_than_one</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Lean assures me it&#39;s computable</span>\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">less_than_one</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works fine</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">less_than_one</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- fails</span>\n<span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">norm_num failed to simplify</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ quotient.lift_on₂ (algebra.div 1 2) 1 has_lt.lt real.has_lt._proof_1</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Where did <code>quotient.lift_on₂</code> come from?</p>",
        "id": 181718320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574520207
    },
    {
        "content": "<p>Somehow the definition of &lt; on reals is leaking through.</p>",
        "id": 181718554,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574520638
    },
    {
        "content": "<p>Oh! I was thinking it was some crazy internal construction of the class! I'm such a fool :D</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">XXX</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">XXX</span> <span class=\"c1\">-- real.has_lt (duh)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[instance]</span>\n<span class=\"cm\">protected def real.has_lt : has_lt ℝ :=</span>\n<span class=\"cm\">{lt := λ (x y : ℝ), quotient.lift_on₂ x y has_lt.lt real.has_lt._proof_1}</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>And there it is.</p>",
        "id": 181718682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574520881
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">less_than_one</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 181718698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574520953
    },
    {
        "content": "<p><code>real.has_lt</code> should probably be irreducible, no?</p>",
        "id": 181718782,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574521071
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">less_than_one</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- still fails</span>\n<span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">norm_num failed to simplify</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ algebra.div 1 2 &lt; 1</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Oh I thought I was such a pro :-)</p>",
        "id": 181718783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574521073
    },
    {
        "content": "<p>[written before Rob's post]</p>",
        "id": 181718827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574521099
    },
    {
        "content": "<p>So of course this all comes from trying to do, shock horror, an example of something. I was talking with <span class=\"user-mention\" data-user-id=\"134231\">@Athina</span> about her forthcoming paper about using Lean with 1st years and she said that one thing she had noticed was that Lean users tended to try examples less and just get on with the proofs. I can see why :D</p>",
        "id": 181718930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574521280
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">less_than_one</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">div</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 181718991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574521386
    },
    {
        "content": "<p>Will the paper be out soon? Seems interesting and worth a read.</p>",
        "id": 181721902,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1574526572
    },
    {
        "content": "<p>She said \"in a few weeks\"</p>",
        "id": 181722957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574528391
    }
]