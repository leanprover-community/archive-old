[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/8947\">#8947</a> I have defined a homotopy between functions, and I've called it <code>homotopy</code>. But the linter is not happy, since there is already <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homotopy\">docs#homotopy</a> in the root namespace. So one of these will need to be renamed, but I'm not really sure which (if either) should be in the root namespace.</p>",
        "id": 251548400,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1630498988
    },
    {
        "content": "<p>I'd vote for the more basic notion (the topological one) being called homotopy and the other one be renamed to something like chain_homotopy or namespaced?</p>",
        "id": 251552656,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630500989
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> once gave a reason why he liked the idea of keeping the current <code>_root_.homotopy</code> as it is. I don't remember what or where he wrote... <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 251552970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630501121
    },
    {
        "content": "<p>We really just need to have a general context (e.g. model categories) in which both of these are special cases...</p>",
        "id": 251559085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630503393
    },
    {
        "content": "<p>I don't seem to have a strong opinion either way any more! :-)</p>\n<p>In some sense both notions get packaged into the machinery not that long after they are introduced: there aren't a huge number of occasions where one explicitly constructs from scratch or even refers to individual homotopies. Instead you pass to working with equivalence classes, or ways of knowing homotopies do or don't exist without talking about individual ones. So in that sense it doesn't matter much if either or both are namespaces or renamed to something longer.</p>\n<p>If we only want to rename one, I would think about how often one needs to refer to them, <em>after</em> the basic undergraduate material on each has been developed.</p>",
        "id": 251628278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630529901
    },
    {
        "content": "<p>In topology we'll need several notions, right? <code>path.homotopy</code>, <code>continuous_function.homotopy</code>, etc...? So it might make sense to namespace those from the beginning.</p>",
        "id": 251667250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630559785
    },
    {
        "content": "<p>Should we have a homotopy for continuous maps with \"frozen sets\" and get other cases from this definition?</p>",
        "id": 254606389,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632431634
    },
    {
        "content": "<p>No, sometimes we might need something else.</p>",
        "id": 254606469,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632431660
    },
    {
        "content": "<p>(e.g., homotopy inside the class of smooth maps)</p>",
        "id": 254606493,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632431674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> what exactly did you mean with \"frozen sets\"?</p>",
        "id": 254643301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632452734
    },
    {
        "content": "<p>I meant something like (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">homotopy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cont'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val_0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val_s</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 254643531,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632452939
    },
    {
        "content": "<p>This way homotopy between two paths is a homotopy with <code>s = {0, 1}</code>.</p>",
        "id": 254643553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632452960
    },
    {
        "content": "<p>And free homotopy is a homotopy with <code>s = empty</code>.</p>",
        "id": 254643564,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632452976
    },
    {
        "content": "<p>I'm not sure that this will help, because we, e.g., include endpoints into the type signature of a path.</p>",
        "id": 254643678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632453065
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254643702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632453092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> That's <a href=\"https://github.com/leanprover-community/mathlib/pull/9252/files#diff-b71ec57735e04e7b2087c1be08ab7c9e08cd841a1b77ac133c4bfe6699519b8aR193-R198\">https://github.com/leanprover-community/mathlib/pull/9252/files#diff-b71ec57735e04e7b2087c1be08ab7c9e08cd841a1b77ac133c4bfe6699519b8aR193-R198</a></p>",
        "id": 254644267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632453581
    },
    {
        "content": "<p>It's an open PR</p>",
        "id": 254644271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632453587
    },
    {
        "content": "<p>/me should read defs from PR in question before writing comments.</p>",
        "id": 254644345,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632453631
    },
    {
        "content": "<p>Homotopy rel <code>s</code> really has a key role in the whole theory--I wouldn't be surprised if you could prove somehow that you can't do homotopy theory without it.<br>\nThings like homotopy through smooth maps can be built on top of <code>homotopy</code>, since you have access to the <code>to_fun</code>. At worst, you would need to prove things again like the composition of homotopies through smooth maps is a homotopy through smooth maps. We could prove this in \"unbundled form\", i.e. say what it means for a homotopy to be \"through maps of type <code>P : C(X, Y) -&gt; Prop</code>\" and show that this is preserved by <code>refl</code> (if the original map is of type <code>P</code>), <code>symm</code>, <code>trans</code>.</p>",
        "id": 254681555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632478772
    },
    {
        "content": "<p>Isotopy is another example.</p>",
        "id": 254681571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632478778
    },
    {
        "content": "<p>I guess if you want to talk about isotopies then you will want <code>isotopy := homotopy_with function.injective</code> and then you will want to copy over <code>isotopy.symm</code>, <code>isotopy.trans</code> to the new types anyways, so it doesn't matter whether they were actually bundled for you already. So maybe keeping them unbundled to start is more flexible.</p>",
        "id": 254681704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632478849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/homotopy.20-.20naming.20collision/near/254681555\">said</a>:</p>\n<blockquote>\n<p>Homotopy rel <code>s</code> really has a key role in the whole theory--I wouldn't be surprised if you could prove somehow that you can't do homotopy theory without it.<br>\nThings like homotopy through smooth maps can be built on top of <code>homotopy</code>, since you have access to the <code>to_fun</code>. At worst, you would need to prove things again like the composition of homotopies through smooth maps is a homotopy through smooth maps. We could prove this in \"unbundled form\", i.e. say what it means for a homotopy to be \"through maps of type <code>P : C(X, Y) -&gt; Prop</code>\" and show that this is preserved by <code>refl</code> (if the original map is of type <code>P</code>), <code>symm</code>, <code>trans</code>.</p>\n</blockquote>\n<p>Yeah, this is my question in the PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/9252\">#9252</a>), which is whether it makes sense to have consider <code>P : C(X, Y) -&gt; Prop</code> and then have <code>homotopy_rel</code> be defined in terms of this. This is what is done in HOL-Analysis, and what I have previously used, since we can get <code>homotopy_rel</code> by using an appropriate <code>P</code>.</p>",
        "id": 254686912,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1632481787
    },
    {
        "content": "<p>I don't see how it makes much difference either way.</p>",
        "id": 254688598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632482787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> The <code>P : C(X, Y) -&gt; Prop</code> version is strictly more general than the \"usual\" homotopy rel definition, right? So I think it is a good idea to develop the basic API in that generality.</p>",
        "id": 255526827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632985110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> Do you want to refactor to use that approach?</p>",
        "id": 255527175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632985291
    },
    {
        "content": "<p>Yeah, I have a lot of code already written in that generality in a different repo. Would it make sense for this version to <code>extends homotopy</code>, or would it make more sense to redefine <code>homotopy</code> in terms of this with <code>P f = true</code>?</p>",
        "id": 255527387,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1632985411
    },
    {
        "content": "<p>Hmm... there are pros and cons to both directions, right?</p>",
        "id": 255527912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632985732
    },
    {
        "content": "<p>If homotopy is defined using <code>P f = true</code>, does that cause much annoyance?</p>",
        "id": 255527939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632985761
    },
    {
        "content": "<p>You probably will just need a few more <code>trivial</code></p>",
        "id": 255528107,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632985873
    },
    {
        "content": "<p>Yeah pretty much, it's just some <code>\\lambda f, trivial</code>s. Since I have code already written with <code>homotopy f g := homotopy_with f g (\\lambda f, true)</code>, I might just PR it like that, and then see if this causes any issues later, since a refactor to change it from one to the other shouldn't be too bad.</p>",
        "id": 255541601,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1632993391
    },
    {
        "content": "<p>Alright done, I've just changed <a href=\"https://github.com/leanprover-community/mathlib/issues/9252\">#9252</a> instead of making a new PR, since this basically replaces all of the content there anyways</p>",
        "id": 255561407,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1633003768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> Thanks a lot! I left some comments.</p>",
        "id": 255564149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633004898
    }
]