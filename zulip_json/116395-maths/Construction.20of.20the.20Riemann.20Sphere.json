[
    {
        "content": "<p>Hi!<br>\nSo I recently got into Lean and decided to provide a construction of the Riemann sphere (as a smooth complex manifold) using quotient types (and finished doing so about 5 min ago!). Is this something you would be interested in incorporating into mathlib? I just thought I'd ask b.c. then I'd clean up my code a bit (at least I'll try my best, this is my first ever Lean project, so the code looks <em>exactly</em> like what happens when you give a random undergrad an IDE and tell him to type until it compiles <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ) and try to create a sensible PR.</p>",
        "id": 285590305,
        "sender_full_name": "Jeremy Feusi",
        "timestamp": 1654805966
    },
    {
        "content": "<p>We have rather few examples of mathematical objects in mathlib but we certainly need the sphere!</p>",
        "id": 285595435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654808706
    },
    {
        "content": "<p>How different is <code>with_top ℂ</code> from the Riemann sphere?</p>",
        "id": 285607681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654817009
    },
    {
        "content": "<p>Its equiv as a type, but <code>with_top</code> doesn't carry a topology, much less a complex manifold structure at present. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alexandroff\">docs#alexandroff</a> is the one point compactification as a topological space at least</p>",
        "id": 285608178,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654817414
    },
    {
        "content": "<p>Are you suggesting <code>alexandroff ℂ</code> has the correct topology?</p>",
        "id": 285608359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654817627
    },
    {
        "content": "<p>In which case that's a much better suggestion</p>",
        "id": 285608431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654817671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Nice, sounds good! Well my original goal was actually to use it to define meromorphic functions since my kind of long term idea is to formalize the theory of branched covers of Riemann surfaces (with emphasis on \"long term\", Idk if you remember but I just asked you something like a week ago after you talk at ETH where I can find Riemann surfaces, so this is all still at the very beginning <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ). But I've changed plans and I currently think that the best way to define a function meromorphic at a point is a holomorphic function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> on a dotted neighbourhood together with an integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>z</mi><mi>e</mi></msup><mo>∗</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">z^e*f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is bounded. This would play nicely with the removable singularity theorem and it becomes trivial to add and multiply meromorphic functions. But what do you guys think?</p>",
        "id": 285636257,
        "sender_full_name": "Jeremy Feusi",
        "timestamp": 1654842405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> That's true, I didn't think of that! One benefit of doing it with quotient types is that it allows you to define a function out of the Riemann sphere by specifying it on the complement of 0 and on the complement of infinity and then showing that it agrees on the complement of both points which one doesn't have with <code>alexandroff ℂ</code>. Or is the gluing lemma formalized in such a way that we would get this from the charts?</p>",
        "id": 285636755,
        "sender_full_name": "Jeremy Feusi",
        "timestamp": 1654842851
    },
    {
        "content": "<p>Note that <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> constructed the Riemann sphere as the projective line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>P</mi><mn>1</mn></msup><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">P^1 \\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mord mathbb\">C</span></span></span></span> in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20on.20the.20projective.20line/near/281612337\">this conversation</a>.</p>",
        "id": 285637178,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1654843297
    },
    {
        "content": "<p>I tend to think the topology is not the most tricky issue, the complex manifold structure already should be a better test of the design choice. But to me it seems the real test is whether the automorphism group of the Riemann sphere are the Möbius transformations (fractional linear transformations) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>S</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PSL(2,\\mathbb{C})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">PS</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">C</span><span class=\"mclose\">)</span></span></span></span>. For this the projective line looks the most promising.</p>",
        "id": 285637306,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1654843434
    },
    {
        "content": "<p>I didn't see the code of <span class=\"user-mention\" data-user-id=\"507560\">@Jeremy Feusi</span> yet... What approach did you take?</p>",
        "id": 285637598,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1654843656
    },
    {
        "content": "<p>Obviously constructing the Riemann sphere as a complex manifold is a great achievement, especially for someone who \"recently got into Lean\"! <span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span></p>\n<p>Congratulations <span class=\"user-mention\" data-user-id=\"507560\">@Jeremy Feusi</span>! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 285637720,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1654843777
    },
    {
        "content": "<p>Thanks! Yes, the topology in most cases will be the correct one. I was actually thinking about determining the automorphism group too, though as of right now I'm not sure what the best way to proceed is in my approach. So I didn't upload the code anywhere since it's rather a mess but if you'd like to see I could do so. The approach I took is to take the disjoint union of 2 copies of the complex plane and then glue them together like one does for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">spec(k[X])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">ec</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">])</span></span></span></span> in the general case.</p>",
        "id": 285638967,
        "sender_full_name": "Jeremy Feusi",
        "timestamp": 1654844869
    },
    {
        "content": "<p>I took a look at the conversation you mentioned and they seem to mention there, that that approach is <em>obviously</em> not the right one? Anyone have an idea what the problems are explicitly? Ah or wait, I think the discussion there was about projectivising vector spaces, right?</p>",
        "id": 285639159,
        "sender_full_name": "Jeremy Feusi",
        "timestamp": 1654845020
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"507560\">@Jeremy Feusi</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 285643887,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1654848760
    },
    {
        "content": "<p>I chose to define the Riemann sphere from the projective line precisely because defining functions on it would be easier (since the projective line is defined as a quotient and we can use <code>quotient.lift</code> and friends for it).</p>",
        "id": 285643977,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1654848834
    },
    {
        "content": "<p>E.g. you can define projective coordinates,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(where <code>h</code> is supposed to prove that <code>(x,y) \\ne (0,0)</code>) and you can define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lift_on</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℙ</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">mk</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">K</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.lift_on'</span> <span class=\"n\">z</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">(</span><span class=\"n\">quotient.eq'.mpr</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to lift functions on <code>\\C \\times \\C</code> to functions on the sphere</p>",
        "id": 285644384,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1654849088
    },
    {
        "content": "<p>But it was not \"obvious\" at all (to me) that this was the right approach and that using <code>with_top \\C</code> or <code>alexandroff \\C</code> would be less convenient. <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> convinced me :-) and indeed, defining Möbius transformations is more natural on the projective line than on the Alexandroff compactification.</p>",
        "id": 285644632,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1654849269
    },
    {
        "content": "<p>Does your code fit in a gist?</p>",
        "id": 285644670,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1654849315
    },
    {
        "content": "<p>Hi!<br>\nOooh yeah, that really <em>is</em> nice! I think this is actually the way to go. I mean physically, yes, it does fit... But it's about 700 loc. Here: <a href=\"https://gist.github.com/jefeus/d1c6d5eed63a09aec297300dc72553b9\">https://gist.github.com/jefeus/d1c6d5eed63a09aec297300dc72553b9</a></p>",
        "id": 285653409,
        "sender_full_name": "Jeremy Feusi",
        "timestamp": 1654854563
    }
]