[
    {
        "content": "<p>Would anyone know what would be a short way to prove 449 ≡ -1 [ZMOD 5]?</p>",
        "id": 130705925,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1533120894
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"mi\">449</span> <span class=\"bp\">≡</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 130705946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533120955
    },
    {
        "content": "<p>4.9 seconds</p>",
        "id": 130705992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533120984
    },
    {
        "content": "<p><code>dec_trivial</code> might work, but if it takes too long you can rewrite it to equality of <code>449 % 5 = (-1) % 5</code> and prove <code>by norm_num</code></p>",
        "id": 130705998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533121010
    },
    {
        "content": "<p>It doesn't work for me, probably because I didn't reimport mathlib recently</p>",
        "id": 130705999,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1533121018
    },
    {
        "content": "<p>Ok thanks I 'll try that</p>",
        "id": 130706006,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1533121024
    },
    {
        "content": "<p>it isn't like you don't need mathlib to normnum</p>",
        "id": 130706013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533121044
    },
    {
        "content": "<p>I meant for dec_trivial</p>",
        "id": 130706016,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1533121065
    },
    {
        "content": "<p>I don't think zmod decidability has changed recently</p>",
        "id": 130706017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533121067
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"mi\">449</span> <span class=\"bp\">≡</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 130706021,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533121078
    },
    {
        "content": "<p>181 ms</p>",
        "id": 130706022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533121079
    },
    {
        "content": "<p>That works, thanks guys</p>",
        "id": 130706071,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1533121135
    },
    {
        "content": "<p>I think you can even write <code>by norm_num [int.modeq]</code></p>",
        "id": 130706074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533121139
    },
    {
        "content": "<p>Yes indeed, even more concise</p>",
        "id": 130706170,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1533121275
    }
]