[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> and I have been talking about doing some model theory in Lean. It seems like the path forward involves PRing some of the basic stuff from the flypitch project into mathlib. Does that seem sane? Has this project already been started? <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>?</p>",
        "id": 198008198,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589845074
    },
    {
        "content": "<p>one of the goals of this would be to prove goedel's incompleteness theorem \"the right way\" (I don't know, Aaron's the model theorist, not me) and knock it off of freek's list</p>",
        "id": 198008286,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589845161
    },
    {
        "content": "<p>I'm largely interested in the transfer principles that flypitch has already stated they want to do at some point. A few concrete examples would be using the theory of real closed fields to prove Hilbert's 17th, and proving Ax-Grothendieck.</p>",
        "id": 198019489,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1589859989
    },
    {
        "content": "<p>I'm not sure exactly what you mean by Ax-Grothendieck but if it is what I think then it's not provable in lean</p>",
        "id": 198020837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589861943
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Ax%E2%80%93Grothendieck_theorem\">https://en.wikipedia.org/wiki/Ax%E2%80%93Grothendieck_theorem</a>; seems okay to me?</p>",
        "id": 198020918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589862082
    },
    {
        "content": "<p>Yeah, we've been planning to PR some basic first-order logic from flypitch to mathlib for a while already. We haven't taken much concrete steps yet. I'll work on it soon.</p>",
        "id": 198020921,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589862093
    },
    {
        "content": "<p>heh, I thought Ax meant axiom, as in the Tarski-Grothendieck axiom</p>",
        "id": 198020927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589862120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/model.20theory/near/198020837\">said</a>:</p>\n<blockquote>\n<p>I'm not sure exactly what you mean by Ax-Grothendieck but if it is what I think then it's not provable in lean</p>\n</blockquote>\n<p>that's strange. Do you think it's not provable that the complexes are isomorphic to an ultraproduct of a certain sequence of algebraic closures of finite fields?</p>",
        "id": 198020928,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589862121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/model.20theory/near/198020921\">said</a>:</p>\n<blockquote>\n<p>Yeah, we've been planning to PR some basic first-order logic from flypitch to mathlib for a while already. We haven't taken much concrete steps yet. I'll work on it soon.</p>\n</blockquote>\n<p>I (and probably Aaron) am happy to pitch in. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  Do you have a private branch? The first step for the branch seems like \"copy-paste a few files and get them compiling with current mathlib\". I'm happy to start that task if you haven't.</p>",
        "id": 198144643,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589936405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300601\">@Luiz Carlos Rumbelsperger Viana</span> has some nice FOL at <a href=\"https://github.com/maxd13/logic-soundness\">https://github.com/maxd13/logic-soundness</a>, so far a proof of soundness but also intention for it to serve as a framework. I'm not sure what's at stake in the divergences between their approach to FOL and that of flypitch, and if one or the other is used, it's probably easier to port Luiz's soundness proof to the flypitch encoding than vice-versa. Just mentioning because when reading Luiz's work I thought, \"why shouldn't this be in mathlib\"?</p>",
        "id": 198178197,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1589969948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/116395-maths/topic/model.20theory/near/198019489\">said</a>:</p>\n<blockquote>\n<p>I'm largely interested in the transfer principles that flypitch has already stated they want to do at some point. A few concrete examples would be using the theory of real closed fields to prove Hilbert's 17th, and proving Ax-Grothendieck.</p>\n</blockquote>\n<p>compactness is already there, so what you need for Ax-Grothendieck is a definition of ACF and the fact that it's complete in characteristic 0</p>\n<p>i would suggest going the route of showing that ACF admits quantifier elimination, and then using the equivalence of QE with substructure-completeness (it might help if you work in ACF conservatively expanded with symbols for every rational)</p>",
        "id": 198406881,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1590124497
    },
    {
        "content": "<p>if you want to skip the model theory and just get the result, then the more conventional argument for completeness of ACF about uncountable transcendence degrees might be faster</p>",
        "id": 198407559,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1590125668
    },
    {
        "content": "<p>That is essentially the approach I'd take. I'd believe that the necessary functionality's all there in flypitch, I just don't have much experience with Lean yet, and Jalex found issues with mathlib compatibility when we started tinkering.</p>",
        "id": 198460054,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1590163744
    },
    {
        "content": "<p>there isn't an API for quantifier elimination; the closest thing is a definition of what it means to be quantifier-free, and an induction on quantifier depth in <code>fol.lean</code> (<code>term_model_ssatisfied_iff</code>) in the proof of completeness for Henkin theories</p>\n<blockquote>\n<p>it might help if you work in ACF conservatively expanded with symbols for every rational</p>\n</blockquote>\n<p>actually, you might even want to add function symbols parametrized by polynomials themselves, which might make it easier to actually show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo>⊨</mo><msub><mrow><mi mathvariant=\"sans-serif\">A</mi><mi mathvariant=\"sans-serif\">C</mi><mi mathvariant=\"sans-serif\">F</mi></mrow><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C} \\vDash \\mathsf{ACF}_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69224em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⊨</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathsf\">A</span><span class=\"mord mathsf\">C</span><span class=\"mord mathsf\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 198478156,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1590172516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> should Aaron and I start PRing to mathlib the stuff we want to use? or have you and Floris secretly started this? I just want to avoid duplicating effort</p>",
        "id": 198480363,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590173515
    },
    {
        "content": "<p>i'm not working on it and am fine with you guys PRing the stuff you want to use, but <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> might have other plans</p>",
        "id": 198480798,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1590173734
    },
    {
        "content": "<p>definitely coordinate with him on any FOL-related PRs, because he designed the FOL infrastructure and knows what parts of flypitch's <code>to_mathlib</code> supports it</p>",
        "id": 198481231,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1590173953
    },
    {
        "content": "<p>I started porting the Flypitch repo to the latest version of Lean/mathlib. It's on this branch: <a href=\"https://github.com/flypitch/flypitch/tree/lean-3.14.0\">https://github.com/flypitch/flypitch/tree/lean-3.14.0</a><br>\n<span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> and <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span>, if you want I can give you write access if you want to help with that (the files <code>fol.lean</code> and <code>bfol.lean</code> compile, which are the most important to PR).</p>",
        "id": 198720399,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1590468545
    },
    {
        "content": "<p>maybe a smarter way to break up work is that I'll start a PR putting <code>fol.lean</code> and <code>bfol.lean</code> into mathlib?</p>",
        "id": 198826836,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590530357
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 198853604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590560773
    },
    {
        "content": "<p>Sounds good! Let's start with <code>fol.lean</code>. There is quite some cleanup to do:</p>\n<ul>\n<li>it doesn't always use mathlib style</li>\n<li>docstrings</li>\n<li>We use stuff from <code>to_mathlib.lean</code> when there is a more canonical way to do something in mathlib. In particular, I would like to use tuples (<code>fin n -&gt; A</code>) instead of <code>dvector A n</code>.</li>\n</ul>\n<p>I'm happy to help with this as well.</p>",
        "id": 198931441,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1590603672
    },
    {
        "content": "<p>I stepped away from this for <em>checks calendar</em> more than a month just to get my bearings on the library with some more basic projects, and I'm still working on those, but I've started some preliminary experiments to learn flypitch</p>",
        "id": 202929975,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593969477
    },
    {
        "content": "<p>I started by just trying to define the Peano axioms. The alternate symbols made the Robinson's Q axioms a little clunky, but it's not too bad, and probably inevitable.</p>",
        "id": 202930435,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593970196
    },
    {
        "content": "<p>For the induction schema, I'm sure you have enough substitution definitions to pull this off, but to talk about it more naturally, I think we might want a \"variable-tuple\" to be a fintype, whose elements are variables.</p>",
        "id": 202930496,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593970262
    },
    {
        "content": "<p>For instance, one could define <code>x</code> to be a singleton, <code>y</code> to be a variable-tuple on <code>fin n</code>, define <code>φ</code> to be a formula on variable <code>x ⊕ y</code>, or perhaps a formula on two variable-tuples, <code>x</code> and <code>y</code>.</p>",
        "id": 202930543,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593970330
    },
    {
        "content": "<p>Whatever precisely the formalism, I think what would come most naturally to me is to be able to type the induction axiom for <code>φ</code> as  <code>∀' y ((φ 0 y ⊓ ∀' x (φ x y ⟹ φ (S x) y) ⟹ ∀' x (φ x y))</code></p>",
        "id": 202930663,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593970647
    },
    {
        "content": "<p>Of course, I have no idea yet if that's technically feasible, but I thought I'd put it on the record.</p>",
        "id": 202930838,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593970944
    },
    {
        "content": "<p>it is certainly more idiomatic to use finite tuples of variables/constants, and it's important to build that kind of API around the syntactic foundations if serious model theory is to be done</p>\n<p>(note that when the theories are multi-sorted, you have to keep track of what sort the variables belong to also)</p>",
        "id": 202930855,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1593971033
    },
    {
        "content": "<p>Yeah, at some point, one has to decide whether it's better to make everything fundamentally multi-sorted one-sorted, and I imagine the decision is based around whether it's shorter to type a multi-sorted-to-one-sorted workaround or a one-sorted-to-multi-sorted workaround.</p>",
        "id": 202930969,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593971217
    },
    {
        "content": "<p>Perhaps in a multi-sorted system you can handle the question of variable-tuples by making the cartesian products and powers of \"basic sorts\" into sorts themselves, and then you can just quantify over <code>M ^ n</code>, but that might make referencing the sub-variables too much of a mess</p>",
        "id": 202931040,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593971344
    },
    {
        "content": "<p>I know that Lou van den Dries would vote for multi-sorted, and he's probably the only model theorist I've ever read who's precise enough in the actual meat of a paper to really get a vote on this...</p>",
        "id": 202931102,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593971425
    },
    {
        "content": "<p>have you already seen the existing statement of the Peano axioms in <code>flypitch/old/peano.lean</code>?</p>",
        "id": 202931119,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1593971486
    },
    {
        "content": "<p>I hadn't, partly because I was trying to see how I naturally would approach it, as I knew we wanted to move away from dvectors to something more mathlib-idiomatic.</p>",
        "id": 202931186,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593971585
    },
    {
        "content": "<p>The rest of the axioms look basically exactly how I thought, and induction doesn't look too complicated, but I'd still be really pleased if I could work directly with variable-tuples as above.</p>",
        "id": 202931305,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593971787
    },
    {
        "content": "<p>Speaking of van den Dries, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I just found out about your o-minimality presentation (project?). That's 100% what I would like to be working on, once I get competent enough at Lean, and potentially also connected to my thesis work. I'd love to hear what you've managed (or what problems have popped up) so far.</p>",
        "id": 202931365,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593971889
    },
    {
        "content": "<p>Did you see Reid's talk at FoMM 2020?</p>",
        "id": 202931379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593971957
    },
    {
        "content": "<p>I just found out about it a few minutes ago from the video uploads thread, so all I've done is read the slides so far.</p>",
        "id": 202931490,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593972127
    },
    {
        "content": "<p>I'll definitely fix that today, though.</p>",
        "id": 202931502,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593972183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> I've tried to write some basics, building on flypitch, but it didn't really get anywhere. It would be fun to get back to this!</p>",
        "id": 202955015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594013854
    },
    {
        "content": "<p>I've just pushed a few preliminary ideas to the folder <code>src/model_theory</code> on <code>mathlib:fol-attempt</code></p>",
        "id": 203629167,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594532257
    },
    {
        "content": "<p>It's based on some basic flypitch ideas, and everything in it would be really easy to do in flypitch if I understood <code>dvector</code>s etc., but I'm just trying to see what problems I run into with <code>fin n</code>, and get some mwes</p>",
        "id": 203629258,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594532429
    },
    {
        "content": "<p>I've basically just picked the shortest possible route to defining o-minimality</p>",
        "id": 203629259,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594532455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/model.20theory/near/198931441\">said</a>:</p>\n<blockquote>\n<p>Sounds good! Let's start with <code>fol.lean</code>. There is quite some cleanup to do:</p>\n<ul>\n<li>it doesn't always use mathlib style</li>\n<li>docstrings</li>\n<li>We use stuff from <code>to_mathlib.lean</code> when there is a more canonical way to do something in mathlib. In particular, I would like to use tuples (<code>fin n -&gt; A</code>) instead of <code>dvector A n</code>.</li>\n</ul>\n<p>I'm happy to help with this as well.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Do you have a strong opinion as to whether it should use <code>fin</code> or <code>fin2</code>?</p>",
        "id": 204861123,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595543699
    },
    {
        "content": "<p>I see that <code>fin2</code> is a lot closer to how flypitch was written</p>",
        "id": 204861142,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595543719
    },
    {
        "content": "<p>I think <code>fin</code> is better, there are functions like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.tail\">docs#fin.tail</a> that will give you most of the <code>dvector</code> operations that are used.</p>",
        "id": 204861262,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595543820
    },
    {
        "content": "<p>I don't think the inductive structure of <code>fin2</code> is necessary, given some of the tools built around <code>fin</code>.</p>",
        "id": 204861368,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595543899
    },
    {
        "content": "<p>(like <code>fin_cases</code>)</p>",
        "id": 204861378,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595543907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315523\">@Colter MacDonald</span> you might find this thread useful!</p>",
        "id": 204861929,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595544437
    },
    {
        "content": "<p>Is anyone planning to add examples of languages/structures to mathlib? I think it would be good if the general theory is developed somewhat in parallel with such concrete examples. It will provide checks and balances on how to build a useful API.<br>\nCan we build the language of rings, and somehow connect it to <code>ring</code>?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span></p>",
        "id": 274958731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646995653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133584\">@Joseph Hua</span> has done this in his MSc thesis <a href=\"https://github.com/Jlh18/ModelTheoryInLean8\">https://github.com/Jlh18/ModelTheoryInLean8</a></p>",
        "id": 274965930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647000366
    },
    {
        "content": "<p>There is some of this in Flypitch as well, and I have been thinking about it, but there are many other things I'm trying to do at the same time.</p>",
        "id": 275063016,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1647042168
    },
    {
        "content": "<p>I can bump it to next on my mental queue.</p>",
        "id": 275063056,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1647042226
    },
    {
        "content": "<p>Joseph uses flypitch (he and Yakov bumped parts of it to work with mathlib master)</p>",
        "id": 275063903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647042890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/model.20theory/near/274958731\">said</a>:</p>\n<blockquote>\n<p>Is anyone planning to add examples of languages/structures to mathlib? I think it would be good if the general theory is developed somewhat in parallel with such concrete examples. It will provide checks and balances on how to build a useful API.<br>\nCan we build the language of rings, and somehow connect it to <code>ring</code>?</p>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span></p>\n</blockquote>\n<p>I could quite easily adapt at least the initial setup of my work to the new model theory in mathlib. It's all about the language of rings</p>",
        "id": 275083906,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1647072047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133584\">@Joseph Hua</span> That's great! I'm really happy to hear that. Are you planning to PR parts of your work?</p>",
        "id": 275084928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647073740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/model.20theory/near/275084928\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133584\">Joseph Hua</span> That's great! I'm really happy to hear that. Are you planning to PR parts of your work?</p>\n</blockquote>\n<p>It would take a long time, but I could do some parts. I could perhaps start by making some API to convert between different class instances related to various rings and their model-theoretic counterparts. In my current project I have done this for commutative rings and fields, so I could make this a bit more general. The idea is just to make instances of <code>fact (M |= ring_theory)</code> and so on and have nice instances going in between. It's been nice so far because if use this to show <code>comm_ring M</code> and <code>field M</code> and so on, everything works together quite nicely. I can for example take a model of <code>ACF</code> and automatically have it as a commutative ring and field etc, all compatible instances.</p>",
        "id": 275089773,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1647081339
    },
    {
        "content": "<p>Your work looks quite good - I think it's worth PRing. We can discuss how to split the work of adapting it to my modified formalism.</p>",
        "id": 275105675,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1647103249
    },
    {
        "content": "<p>A few ideas occur to me now:</p>\n<ul>\n<li>I can make it so that <code>M |= ring_theory</code> is a class instance, without the need for <code>fact</code></li>\n<li>We could put in the example of Rings first, but I think that there should be classes for \"a language with +\" and \"a language with *\" that lead directly to <code>has_add</code> and <code>has_mul</code> instances on terms.</li>\n<li>Perhaps to work out some of my design issues independently of your algebra work, I can work on orders and graphs. If I define ordered structures, and <a href=\"https://github.com/leanprover-community/mathlib/pull/12611\">#12611</a> goes through, then I can define o-minimality.</li>\n</ul>",
        "id": 275106076,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1647103907
    },
    {
        "content": "<p>the first two points look like great ideas. As for the third, do you mean I should wait until you iron out any problems with the current setup before starting to make ring related PRs? By the way, I noticed that you chose to go with the usual definition of terms, rather than the de Bruijn-like definition from flypitch - is this working out well? I also noticed you didn't introduce notation for terms and bounded formulas, will this be added soon?</p>",
        "id": 275147242,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1647168918
    },
    {
        "content": "<p>I am adding some of that Flypitch notation in <a href=\"https://github.com/leanprover-community/mathlib/pull/12630\">#12630</a> - let me know if there’s other notation I’m missing</p>",
        "id": 275160705,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1647186171
    },
    {
        "content": "<p>You can make ring-related PRs as soon as you want to, and if you find problems with my setup, you can let me know.</p>",
        "id": 275160951,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1647186555
    },
    {
        "content": "<p>If I understand correctly the de Bruijn way of defining terms makes induction easier, since we only introduct a single term at a time in the induction, rather than <code>n</code> of them at once</p>",
        "id": 275164516,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1647191145
    }
]