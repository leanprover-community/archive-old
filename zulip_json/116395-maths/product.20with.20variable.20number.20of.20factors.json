[
    {
        "content": "<p>To prove that if p is prime and p = 4k + 1, then -1 is a square modulo p.</p>\n<p>I propose to use Wilson's Theorem, which states (p-1)! == -1 (mod p).</p>\n<p>In Lean, what's the best way to tackle a product of a variable number of factors?</p>",
        "id": 188652679,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582215527
    },
    {
        "content": "<p><code>finset.prod</code></p>",
        "id": 188652713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582215559
    },
    {
        "content": "<p>Alright, thanks, I'll look into that</p>",
        "id": 188652736,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582215584
    },
    {
        "content": "<p>Things like this are often more challenging than they look for beginners, but go for it and get stuck and ask here and people will be happy to help. This is a great little project.</p>",
        "id": 188652810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582215616
    },
    {
        "content": "<p>I just imported finset today, and apparently, finset.prod actually takes the Cartesian product of two sets</p>\n<p>Not what I'm asking...</p>",
        "id": 189410051,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1583019235
    },
    {
        "content": "<p>But I'm willing to believe they relate.</p>",
        "id": 189410110,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1583019331
    },
    {
        "content": "<p>Are you sure? I think <code>finset.product</code> does that</p>",
        "id": 189410112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583019333
    },
    {
        "content": "<p>\"product\" is an unknown identifier</p>",
        "id": 189410116,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1583019353
    },
    {
        "content": "<p>I'm doubly confused now, but <code>finset.prod</code> is in <code>algebra.big_operators</code>.</p>",
        "id": 189410156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583019391
    },
    {
        "content": "<p>Oh, okay...</p>",
        "id": 189410157,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1583019402
    },
    {
        "content": "<p>Another confusing thing about <code>finset.prod</code> is that it doesn't take the product of the elements of the finset, it also takes a map from the underlying type to a comm_monoid and takes the product of the images. In particular you can have repeated factors in your product.</p>",
        "id": 189410212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583019502
    },
    {
        "content": "<p>Another confusing thing about it is that there's also <code>finset.sum</code> but it's hard to find the definition, because it's generated automatically by the <code>@[to_additive]</code> tag on <code>finset.prod</code>.</p>",
        "id": 189410222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583019546
    },
    {
        "content": "<p><code>#eval finset.prod (finset.range 3) (Î» n, n^2+1) -- 1*2*5=10</code></p>",
        "id": 189410346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583019766
    },
    {
        "content": "<p>It might be worth adding that factorials are already in mathlib (as is the fact that -1 is a square mod p iff p isn't 3 mod 4, and probably Wilson's theorem too, but this definitely shouldn't stop you trying them yourself)</p>",
        "id": 189410466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583019992
    },
    {
        "content": "<p>Out of curiosity, where are factorials and -1 being a square mod p in mathlib?</p>",
        "id": 189410796,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1583020645
    },
    {
        "content": "<p>Here are <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/basic.lean#L981\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/basic.lean#L981\">factorials</a> (I searched for \"factorial\"). The other fact that Kevin mentioned is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/zmod/quadratic_reciprocity.lean#L65\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/zmod/quadratic_reciprocity.lean#L65\">here</a>.</p>",
        "id": 189410961,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583020999
    },
    {
        "content": "<p>Alright, thanks Bryan</p>",
        "id": 189411069,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1583021217
    },
    {
        "content": "<p>I'm just going to use the builtin ones now because my file is already really big and I have little time left to complete the project.</p>\n<p>When I imported data.zmod.quadratic_reciprocity, the file broke down with 1000 problems, and they even persisted when I deleted that import and made the file have the same text it started with, until I restarted VSC.  Is that supposedly the wrong import?</p>",
        "id": 189443635,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1583088918
    },
    {
        "content": "<p>I don't think it's the wrong import, but I can't reproduce your issue either. Sometimes things like this happen if Lean runs out of memory. If it goes away after you restart Lean, I wouldn't worry too much about it. (Note that you can restart Lean without starting VS Code by hitting ctrl+shift+p and typing 'Lean: restart')</p>",
        "id": 189444078,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583089897
    }
]