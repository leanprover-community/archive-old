[
    {
        "content": "<p>I'm trying to prove a statement about all categories but can't state it properly. I'm trying to state that given a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> , the existence of a right inverse <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> implies that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is an epimorphism. Here's my attempt at stating it</p>\n<div class=\"codehilite\"><pre><span></span>  universes v u\n\n  example {C : Type u} [category.{v} C] (A B : C.obj) (f : A ⟶ B) :\n      ∃ g: B ⟶ A, f ≫ g = C.id B → category_theory.epi f := sorry\n</pre></div>\n\n\n<p>I'm not exactly sure how to state that<br>\n  1. <code>C</code> is a category<br>\n  2. <code>A B</code> are objects of <code>C</code><br>\n  3. <code>f</code> is a morphism from <code>A</code> to <code>B</code></p>",
        "id": 185779047,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579140836
    },
    {
        "content": "<p>Instead of <code>(A B : C.obj)</code>, use <code>(A B : C)</code>. Everything else should work</p>",
        "id": 185779386,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1579141262
    },
    {
        "content": "<p>Hmm that doesn't solve it either. I get this output. Sorry for the large log</p>\n<div class=\"codehilite\"><pre><span></span>/home/enricozb/projects/learning/lean/algebra_chapter_0/src/ch1.lean:236:24: error: function expected at\n  category\nterm has type\n  Type (max (v+1) (u+1))\n/home/enricozb/projects/learning/lean/algebra_chapter_0/src/ch1.lean:236:59: error: failed to synthesize type class instance for\nC : Type u,\n_inst_1 : ⁇,\nA B : C\n⊢ category_theory.has_hom C\n/home/enricozb/projects/learning/lean/algebra_chapter_0/src/ch1.lean:237:13: error: failed to synthesize type class instance for\nC : Type u,\n_inst_1 : ⁇,\nA B : C,\nf : A ⟶ B\n⊢ category_theory.has_hom C\n/home/enricozb/projects/learning/lean/algebra_chapter_0/src/ch1.lean:237:27: error: invalid field notation, type is not of the form (C ...) where C is a constant\n  C\nhas type\n  Type u\n/home/enricozb/projects/learning/lean/algebra_chapter_0/src/ch1.lean:237:20: error: don&#39;t know how to synthesize placeholder\ncontext:\nC : Type u,\n_inst_1 : ⁇,\nA B : C,\nf : A ⟶ B,\ng : B ⟶ A\n⊢ Type ?\n</pre></div>",
        "id": 185780655,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579143120
    },
    {
        "content": "<p>Oh shoot I have a definition of <code>category</code> that's conflicting. Here's what I get with your suggested change</p>\n<div class=\"codehilite\"><pre><span></span>/home/enricozb/projects/learning/lean/algebra_chapter_0/src/ch1.lean:237:27: error: invalid field notation, type is not of the form (C ...) where C is a constant\n  C\nhas type\n  Type u\n</pre></div>",
        "id": 185780806,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579143334
    },
    {
        "content": "<p>That fixes one thing. The other one should be fixed by replacing <code>C.id B</code> with <code>\\b1 B</code></p>",
        "id": 185780869,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1579143398
    },
    {
        "content": "<p>Also that existential scopes over the entire rest of the statement, which is not what you want</p>",
        "id": 185784289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579148237
    },
    {
        "content": "<p>Just make <code>g</code> and the hypothesis on it into more function arguments</p>",
        "id": 185784291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579148250
    },
    {
        "content": "<p>That worked! Thanks :)</p>",
        "id": 185788174,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579154325
    }
]