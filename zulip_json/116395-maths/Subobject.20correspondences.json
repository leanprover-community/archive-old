[
    {
        "content": "<p>I'd like to refactor the functions of the form <code>sub____.(co)map</code> to be <code>preorder_hom</code>s. This does, however, remove the nice syntax of <code>s.map f</code>, so it'd have to be <code>sub____.map f s</code>. Does anyone have an issue with this?</p>",
        "id": 221240081,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609356949
    },
    {
        "content": "<p>Would it be possible to add aliases that enable dot notation?</p>",
        "id": 221240259,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609357069
    },
    {
        "content": "<p>I'd also like to make some special cases of these (dealing with injective or surjective homomorphisms) into <code>order_embedding</code>s, and even <code>order_iso</code>s onto intervals, but at the moment, the <code>preorder_hom</code>s might not help as much as I might guess in defining <code>order_embedding</code>s and <code>order_iso</code>s, because the latter are defined in terms of <code>rel_hom</code>s.</p>",
        "id": 221240260,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609357074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/116395-maths/topic/Subobject.20correspondences/near/221240259\">said</a>:</p>\n<blockquote>\n<p>Would it be possible to add aliases that enable dot notation?</p>\n</blockquote>\n<p>I'm not sure why not, but I don't know how to go about that.</p>",
        "id": 221240326,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609357096
    },
    {
        "content": "<p>I also might start by directly creating the special case <code>order_embedding</code>s and <code>order_iso</code>s, and try to integrate them into a better picture of order-preserving maps later</p>",
        "id": 221240395,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609357185
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#alias\">command#alias</a> to add copies of declarations with different names.</p>",
        "id": 221240481,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609357249
    },
    {
        "content": "<p>So basically define something like <code>submodule.map_preorder_hom</code> with use case <code>submodule.map_preorder_hom f s</code>, which processes as <code>(submodule.map_preorder_hom f) s</code> where <code>submodule.map_preorder_hom f</code> goes through a <code>coe_to_fn</code>, and then make an alias <code>submodule.map</code> such that <code>submodule.map f s = submodule.map_preorder_hom f s</code>?</p>",
        "id": 221241490,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609358040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/116395-maths/topic/Subobject.20correspondences/near/221240260\">said</a>:</p>\n<blockquote>\n<p>I'd also like to make some special cases of these (dealing with injective or surjective homomorphisms) into <code>order_embedding</code>s, and even <code>order_iso</code>s onto intervals, but at the moment, the <code>preorder_hom</code>s might not help as much as I might guess in defining <code>order_embedding</code>s and <code>order_iso</code>s, because the latter are defined in terms of <code>rel_hom</code>s.</p>\n</blockquote>\n<p>(I'm seeing that the fastest route to these doesn't go through the regular <code>preorder_hom</code> at all, but through the Galois (co)insertions that are already defined)</p>",
        "id": 221241558,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609358076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/116395-maths/topic/Subobject.20correspondences/near/221241490\">said</a>:</p>\n<blockquote>\n<p>So basically define something like <code>submodule.map_preorder_hom</code> with use case <code>submodule.map_preorder_hom f s</code>, which processes as <code>(submodule.map_preorder_hom f) s</code> where <code>submodule.map_preorder_hom f</code> goes through a <code>coe_to_fn</code>, and then make an alias <code>submodule.map</code> such that <code>submodule.map f s = submodule.map_preorder_hom f s</code>?</p>\n</blockquote>\n<p>It does look kind of complicated when written out like that, but if we can still write <code>s.map f</code> then I think it's worth it.</p>",
        "id": 221241822,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609358303
    },
    {
        "content": "<p><code>alias</code> is not reducible, so I imagine you want <code>abbreviation</code> here</p>",
        "id": 221277424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609404112
    }
]