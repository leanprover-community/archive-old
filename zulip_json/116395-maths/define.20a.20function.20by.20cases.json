[
    {
        "content": "<p>I know about <code>function.restrict</code>, which allows me to take a function and look at it over a subtype, but what about going the other way, and building up a function from components?  E.g., suppose I want to define <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>χ</mi><mrow><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\chi_{[0,1]}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.7857599999999999em;vertical-align:-0.3551999999999999em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathrm mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathrm mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"></span></span></span></span></span></span></span></span> which is 1 on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">[</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span></span></span></span> and 0 elsewhere?</p>",
        "id": 163091613,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554982756
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 163091778,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554982950
    },
    {
        "content": "<p>thanks</p>",
        "id": 163091888,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554983153
    },
    {
        "content": "<p>I wonder why I did not retain this information after reading TIPL.</p>",
        "id": 163092066,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554983340
    },
    {
        "content": "<p>Probably it was a case of too much new stuff all at once.</p>",
        "id": 163092104,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554983401
    },
    {
        "content": "<p>Actually, Lean complains about the code above:</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nx : ℝ\n⊢ decidable (x ∈ set.Icc 0 1)\n</pre></div>",
        "id": 163092261,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554983553
    },
    {
        "content": "<p>Put this at the start of your file.<br>\n<code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 163092300,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554983600
    },
    {
        "content": "<p>Nice, it works now.</p>",
        "id": 163092491,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554983814
    },
    {
        "content": "<p>Thanks Chris.</p>",
        "id": 163092505,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554983830
    },
    {
        "content": "<p>Maybe you can guess what my next question is.  I'm stuck again.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">unit_indicator</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">on_unit</span> <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">unit_indicator</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">on_unit_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">on_unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">on_unit</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">unit_indicator</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163093281,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554984730
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">on_unit_eq_one</span> <span class=\"o\">:</span> <span class=\"n\">on_unit</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">on_unit_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">on_unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">on_unit_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_const</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163093584,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554985046
    },
    {
        "content": "<p>Aha, \"function extensionality\" is great</p>",
        "id": 163093683,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554985149
    },
    {
        "content": "<p>Denied by Haskellists IIUC</p>",
        "id": 163093785,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554985251
    },
    {
        "content": "<p>Here's another related question.  Why can't I unfold <code>fake_abs</code> here? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fake_abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fake_abs_is_abs</span> <span class=\"o\">:</span> <span class=\"n\">fake_abs</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">fake_abs</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I get</p>\n<div class=\"codehilite\"><pre><span></span>simplify tactic failed to simplify\nstate:\n⊢ fake_abs = λ (x : ℝ), abs x\n</pre></div>",
        "id": 163112482,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554998075
    },
    {
        "content": "<p><code>unfold</code> does <code>simp</code> using the equation lemmas. Try looking at the output of this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fake_abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fake_abs&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">fake_abs</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">fake_abs&#39;</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span>\n</pre></div>\n\n\n<p><code>unfold fake_abs'</code> will have the behaviour you want, due to the different equation lemma.</p>",
        "id": 163112816,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554998333
    },
    {
        "content": "<p>This also makes progress:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fake_abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fake_abs_is_abs</span> <span class=\"o\">:</span> <span class=\"n\">fake_abs</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fake_abs</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Note: <code>#print prefix fake_abs.equations</code> prints the equation lemmas for your <code>fake_abs</code>.</p>",
        "id": 163114241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999281
    },
    {
        "content": "<p>The way you set it up, <code>unfold</code> can only make progress when faced with something of the form <code>fake_abs x</code> (and not just <code>fakeabs</code>); this is what the functional extensionality tactic gives you.</p>",
        "id": 163114301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999336
    },
    {
        "content": "<p>I could prove that <code>fake_abs</code> is equal to <code>abs</code>, but I've gotten stuck with the continuity part of the exercise.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"c1\">-- Use the version that will unfold properly</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fake_abs</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fake_abs_is_abs</span> <span class=\"o\">:</span> <span class=\"n\">fake_abs</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">fake_abs</span> <span class=\"n\">abs</span><span class=\"o\">,</span>\n<span class=\"n\">funext</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">neg_pos_of_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_trans</span> <span class=\"n\">h</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">max_eq_right_of_lt</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">neg_nonpos_of_nonneg</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hll</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_trans</span> <span class=\"n\">hl</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">max_eq_left</span> <span class=\"n\">hll</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_fake_abs</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">fake_abs</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">fake_abs</span><span class=\"o\">,</span>\n<span class=\"c1\">-- ⊢ continuous (λ (x : ℝ), ite (x &lt; 0) (-x) x)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163122618,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555005518
    },
    {
        "content": "<p>I guess I could break this down into two lemmas, each similar to <code>on_unit_eq_one</code> from before.</p>",
        "id": 163123189,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555005866
    },
    {
        "content": "<p>You could try <code>apply continuous_if</code>--now you'll have several more things to prove</p>",
        "id": 163123349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555005967
    },
    {
        "content": "<p>I'm assuming it's against the spirit of the exercise to <code>rw fake_abs_is_abs, apply continuous_abs</code>?</p>",
        "id": 163123451,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555006050
    },
    {
        "content": "<p>Right, and here I was thinking that <code>continuous_if</code> would be too much magic because the boundary would be in general too complicated.</p>",
        "id": 163123480,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555006079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130491\">@Scott Olson</span>   <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 163123638,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555006172
    },
    {
        "content": "<p>Identifying the boundary is the main work that you will have to do</p>",
        "id": 163123831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555006311
    },
    {
        "content": "<p>although I think it's also not that hard</p>",
        "id": 163123836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555006319
    },
    {
        "content": "<p>It should be interesting... a bit of topology sneaks in after all.  Time for dinner here; thanks for the help.</p>",
        "id": 163124072,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555006454
    }
]