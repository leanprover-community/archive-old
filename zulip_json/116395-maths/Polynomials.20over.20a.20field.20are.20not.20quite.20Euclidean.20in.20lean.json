[
    {
        "content": "<p>I've been trying to prove polynomials over a field are a Euclidean domain. The only trouble is, they do not meet the axioms if I use degree as valuation since for two constant polynomials, degree (a % b) =  degree b. Does anyone have experience doing this in any other theorem prover and can recommend a sensible solution. The most obvious is to define<code>new_degree 0 = 0</code>, and <code>new_degree p = degree p + 1</code> for <code>p ≠ 0</code>. Is this the best option?</p>",
        "id": 127196752,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527498996
    },
    {
        "content": "<p>In Isabelle the size is not degree <code>d</code> itself but <code>2^d</code>, and 0 for the 0 polynomial. See <a href=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Computational_Algebra/Polynomial_Factorial.html\" target=\"_blank\" title=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Computational_Algebra/Polynomial_Factorial.html\">http://isabelle.in.tum.de/dist/library/HOL/HOL-Computational_Algebra/Polynomial_Factorial.html</a> :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">definition</span> <span class=\"n\">euclidean_size_field_poly</span> <span class=\"o\">::</span> <span class=\"s\">&quot;&#39;a :: field poly ⇒ nat&quot;</span> <span class=\"kp\">where</span>\n  <span class=\"s\">&quot;euclidean_size_field_poly p = (if p = 0 then 0 else 2 ^ degree p)&quot;</span>\n</pre></div>",
        "id": 127196999,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527499386
    },
    {
        "content": "<p>Why <code>2^d</code>?</p>",
        "id": 127197047,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527499468
    },
    {
        "content": "<p>I actually think that <code>valuation_remainder_lt</code> is not what mathematicians want</p>",
        "id": 127197113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499602
    },
    {
        "content": "<p>It is a lot stronger than the usual condition</p>",
        "id": 127197124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499640
    },
    {
        "content": "<p>They swapped two quantifiers, so to speak</p>",
        "id": 127197126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499652
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 127197131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527499681
    },
    {
        "content": "<p>Quote from wiki: (EF1) If a and b are in R and b is nonzero, then there are q and r in R such that a = bq + r and either r = 0 or f(r) &lt; f(b).</p>",
        "id": 127197179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499730
    },
    {
        "content": "<blockquote>\n<p>Why <code>2^d</code>?</p>\n</blockquote>\n<p>I guess you get the nice rule: <code>E(p * q) = E(p) * E (q)</code></p>",
        "id": 127197180,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527499735
    },
    {
        "content": "<p>oh, you need <code>a % b != 0</code> also as a precondition</p>",
        "id": 127197186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527499748
    },
    {
        "content": "<p>So it is about the existence of q and r, but this somehow requires it for all q and r</p>",
        "id": 127197187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499750
    },
    {
        "content": "<p>(where <code>E  =  euclidean_size_field_poly</code>)</p>",
        "id": 127197188,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527499751
    },
    {
        "content": "<p>Mario, I think that would also fix it, yes.</p>",
        "id": 127197191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499773
    },
    {
        "content": "<p>that's basically what wiki is saying, or you can have a disjunction at the end</p>",
        "id": 127197194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527499800
    },
    {
        "content": "<p>After all, the valuation of 0 is <code>37</code> according to <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 127197246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499827
    },
    {
        "content": "<p>hey, with the new <code>with_zero</code> class you can now just say that <code>valuation</code> takes values in <code>with_zero nat</code></p>",
        "id": 127197254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527499852
    },
    {
        "content": "<p>Nooo! <code>with_zero nat</code> looks horrible... can we please have <code>with_bot</code> or something</p>",
        "id": 127197272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499912
    },
    {
        "content": "<p>it's the absorbing element of multiplication...</p>",
        "id": 127197317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527499930
    },
    {
        "content": "<p>there is also with_bot, which has no algebraic interpretation</p>",
        "id": 127197318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527499945
    },
    {
        "content": "<p>actually <code>valuation</code> looks like it doesn't need any algebraic interpretation, so I guess <code>with_bot</code> is fine</p>",
        "id": 127197334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527499997
    },
    {
        "content": "<p>It could just be generalised to take any well founded relation, instead of a valuation</p>",
        "id": 127197383,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527500068
    },
    {
        "content": "<blockquote>\n<p>hey, with the new <code>with_zero</code> class you can now just say that <code>valuation</code> takes values in <code>with_zero nat</code></p>\n</blockquote>\n<p>Where is this class defined? I definitely prefer the idea of option nat over 2^degree.</p>",
        "id": 127215412,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527530300
    },
    {
        "content": "<p><code>with_bot</code> is in <code>lattice.bounded_lattice</code>, <code>with_zero</code> is in <code>algebra.group</code>. Basically it should already be available if you have the basic mathlib lemmas</p>",
        "id": 127218435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527535825
    }
]