[
    {
        "content": "<p>Is the equivalence between reals as Cauchy sequences and reals as Dedekind cuts computable?</p>",
        "id": 169220141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561724960
    },
    {
        "content": "<p>You can go from Cauchy sequences to Dedekind, but not the other way.</p>",
        "id": 169220337,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561725119
    },
    {
        "content": "<p>Why this should be \"obvious\": A cauchy sequence is a function <code>N -&gt; Q</code> (with some properties, under a quotient), which is a computable thing. A dedekind cut is a <code>set Q</code> (with some properties), which has no computable content. So one should expect to be able to go from cauchy to dedekind but not the other way, and more generally there are <em>no</em> computable functions on dedekind cuts that produce any interesting data (like a boolean value)</p>",
        "id": 169220533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725293
    },
    {
        "content": "<p>Yeah I don't follow this argument at all yet. I'm still clearly not thinking about computability in the right way.</p>",
        "id": 169220588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725349
    },
    {
        "content": "<p>If you'd said that a Cauchy Sequence is a function N -&gt; Q which has no computable content, and a Dedekind cut is a set Q which is a computable thing, I would be equally accepting.</p>",
        "id": 169220675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725389
    },
    {
        "content": "<p>I have no idea what \"computable content\" means.</p>",
        "id": 169220701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725415
    },
    {
        "content": "<p>A function N -&gt; Q has a VM representation. You can call it on 42 to get some actual number</p>",
        "id": 169220702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725417
    },
    {
        "content": "<p>Aah, the VM. This will be why I have no idea what you're talking about. I have no idea what the VM is.</p>",
        "id": 169220722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725435
    },
    {
        "content": "<p>Given a different function, you could call it on 42 to get a different number</p>",
        "id": 169220728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725441
    },
    {
        "content": "<p>so it has to track these things</p>",
        "id": 169220762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725458
    },
    {
        "content": "<p>I understand now that functions can eliminate to data.</p>",
        "id": 169220770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725464
    },
    {
        "content": "<p>so functions are data</p>",
        "id": 169220779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725474
    },
    {
        "content": "<p>But functions that eliminate to Prop are not data</p>",
        "id": 169220838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725493
    },
    {
        "content": "<blockquote>\n<p>so functions are data</p>\n</blockquote>\n<p>I guess so. They have type <code>X -&gt; Y</code> which has type <code>Type u</code> for some u</p>",
        "id": 169220842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725496
    },
    {
        "content": "<p>so <code>set Q = Q -&gt; Prop</code> is not data</p>",
        "id": 169220856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725504
    },
    {
        "content": "<p>even though classically it's nontrivial</p>",
        "id": 169220863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725514
    },
    {
        "content": "<p>I can't ever get a number out of a Dedekind cut?</p>",
        "id": 169220886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725535
    },
    {
        "content": "<p>no</p>",
        "id": 169220891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725540
    },
    {
        "content": "<p>Hold on, I need to play with <code>#check</code> for a second.</p>",
        "id": 169220905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725548
    },
    {
        "content": "<p>I mean you can get 42 out but if you do then every other real will also give 42</p>",
        "id": 169220913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725557
    },
    {
        "content": "<p>there is no \"distinguishable\" data in a Prop, or a Q -&gt; Prop, or a subtype of Q -&gt; Prop, or a quotient of a subtype of Q -&gt; Prop</p>",
        "id": 169220980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725605
    },
    {
        "content": "<p><code>ℕ → Prop : Type</code></p>",
        "id": 169220981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725605
    },
    {
        "content": "<p>Yet it's in <code>Type</code></p>",
        "id": 169221006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725619
    },
    {
        "content": "<p><code>ℕ → ℕ : Type</code></p>",
        "id": 169221013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725625
    },
    {
        "content": "<p>Lean thinks there's data in there</p>",
        "id": 169221021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725637
    },
    {
        "content": "<p>you can prove it's not a singleton</p>",
        "id": 169221028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725644
    },
    {
        "content": "<p>but you can't compute with it</p>",
        "id": 169221032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725655
    },
    {
        "content": "<p>So knowing where in the \"type hierarchy\" something lives is not good enough for me to figure out whether something \"has computable content\".</p>",
        "id": 169221044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725673
    },
    {
        "content": "<p>Unfortunately no</p>",
        "id": 169221054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725686
    },
    {
        "content": "<p>You can derive this fairly simply from the type though</p>",
        "id": 169221066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725704
    },
    {
        "content": "<p>If it is a type or a proof then it has no content, and if it is a function whose codomain has no content then the function type also has no content; inductive types have content</p>",
        "id": 169221138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725752
    },
    {
        "content": "<p>And a quotient A has content iff A has content</p>",
        "id": 169221169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725784
    },
    {
        "content": "<p>Even if we quotient out by the always-true equivalence relation?</p>",
        "id": 169221187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725810
    },
    {
        "content": "<p>yes</p>",
        "id": 169221191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725817
    },
    {
        "content": "<p>And this is the point of <code>trunc</code></p>",
        "id": 169221197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725824
    },
    {
        "content": "<p>This is why <code>trunc</code> and <code>nonempty</code> are the same in the logic (aka classically equivalent) but have different computational behavior</p>",
        "id": 169221251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725852
    },
    {
        "content": "<p>Thanks for explaining this point. And if I understood the VM  I would somehow see all this very clearly, because things like types and proofs are not represented in the VM at all, whatever that means.</p>",
        "id": 169221262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725878
    },
    {
        "content": "<p>I actually use the VM only as a rhetorical device here</p>",
        "id": 169221273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725897
    },
    {
        "content": "<p>you don't need to know anything at all about bytecodes to get this</p>",
        "id": 169221285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725911
    },
    {
        "content": "<p>So do I write <code>let D : set Q := ...</code> or <code>have D : set Q := ...</code>?</p>",
        "id": 169221287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725917
    },
    {
        "content": "<p>I would write <code>let</code></p>",
        "id": 169221304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561725933
    },
    {
        "content": "<p>you just need to picture sort of generally what a computer would have to do to deal with this stuff</p>",
        "id": 169221307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725935
    },
    {
        "content": "<p>You still write <code>let</code> for anything that's a <code>Type</code> because it doesn't have proof irrelevance</p>",
        "id": 169221384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561725965
    },
    {
        "content": "<p>The reason proofs can use <code>have</code> is because the type theory says the stuff that filled the type doesn't matter</p>",
        "id": 169221404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561726003
    },
    {
        "content": "<p>Nevertheless, because <code>D</code> is \"VM-irrelevant\", it's impossible for the computer to branch an if statement based on some property of <code>D</code>, like whether it has cardinality 2. You can predict that any such function will be noncomputable</p>",
        "id": 169221489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561726113
    },
    {
        "content": "<p>I don't think you can compute from Cauchy to Dedekind, according to my understanding of what computation means.  Suppose you have a computable Cauchy sequence <code>(x_n)</code>, with computable bounds on the rate of convergence, and a rational number <code>q</code>, and you want to know whether <code>q</code> is in the corresponding Dedekind cut.  If <code>q</code> is not equal to the limit, then you will be able to prove that it is either above or below, after inspecting a finite number of terms (but the number is not known a priori).  However, if it happens that the limit of the sequence is equal to <code>q</code>, then you won't be able to determine that by a finite computation.</p>\n<p>On the other hand, suppose you have a computable Dedekind cut, so you know a number <code>a</code> in the lower set and a number <code>b</code> in the upper set, and for any given rational <code>q</code> you can decide whether it lies in either set.  Then you can take <code>n</code> equally spaced points between <code>a</code> and <code>b</code>, decide which if them are in the upper and lower sets, and thus get <code>x_n</code> within <code>1/n</code> of the corresponding real; this gives a Cauchy sequence.</p>",
        "id": 169221786,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1561726441
    },
    {
        "content": "<p>The reason Cauchy -&gt; Dedekind here is \"computable\" is for the trivial reason that a Dedekind real is basically a set; you only have to <em>write down</em> the membership predicate, you don't have to decide it</p>",
        "id": 169221901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561726525
    },
    {
        "content": "<p>If we had dedekind real being <code>Q -&gt; bool</code> it would be a different matter</p>",
        "id": 169221928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561726556
    },
    {
        "content": "<p>I agree that if a dedekind real is defined as two bounding values and a decidable predicate then you can make a computable function to Cauchy</p>",
        "id": 169222182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561726749
    },
    {
        "content": "<p>I am assuming the definition is as a predicate (not necessarily decidable) together with <em>proofs</em> (not data) that the predicate is neither always true or always false, and monotone (and with no maximum)</p>",
        "id": 169222287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561726861
    },
    {
        "content": "<p>There are lots of choices here and the answers depend on these choices. This is very well studied, for example, see this paper by Jeff Hirst &lt;<a href=\"http://www.appstate.edu/~hirstjl/bib/pdf/rrepsproof.pdf\" target=\"_blank\" title=\"http://www.appstate.edu/~hirstjl/bib/pdf/rrepsproof.pdf\">http://www.appstate.edu/~hirstjl/bib/pdf/rrepsproof.pdf</a>&gt; which discusses various representations from a very classical perspective, or Klaus Weihrauch's book on Computable Analysis &lt;<a href=\"https://www.springer.com/gp/book/9783540668176\" target=\"_blank\" title=\"https://www.springer.com/gp/book/9783540668176\">https://www.springer.com/gp/book/9783540668176</a>&gt; for how to make judicious choices and prove things with them.</p>\n<p>First, assuming the Axiom of Choice, the equivalence of any two of the usual representations of real numbers are provably equivalent, regardless of choices made.</p>\n<p>What do you need to make a Dedekind cut for a real number x? All you need is to determine whether a rational number q is in the cut or not. That is you need to know whether or not q &lt; x (or q ≤ x, if your cuts can have a max). So if you have <code>has_lt</code> for your real number x, then you're set to compute the set { q : q &lt; x }. If your Dedekind cuts are also decidable (bool-valued instead of Prop-valued), then you need a decidable <code>has_lt</code> (or slightly less as discussed below).</p>\n<p>The problem with mathlib's Cauchy reals was spotted by <span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span>: there is no attached modulus of convergence. This is useless for computation. Even if I know my Cauchy sequence for a real number x starts 3.1, 3.14, 3.141, then I have no information about x whatsoever. It could be that x = π as one might expect, or the sequence could continue after the 10^42-nd term to become constant with value 42. With a modulus of convergence though, I do know something about my real number. If my modulus says that all terms are within 1/10 of the first term then I know that 3 ≤ x ≤ 3.2. In Computable Analysis, real numbers are equivalence classes of Cauchy sequences with an attached modulus of convergence.</p>\n<p>Even with a modulus of convergence, the ordering of reals is not computable. The Brouwerian counterexample to this is as follows. I might be thinking of a natural number, and I will definitely tell you if you're right when you guess correctly. From this, you can define the real number x which is the sum of the sequence (-1)^n a(n)/2^n where a(n) = 1 if n is my number and a(n) = 0 if n is not my number. Notice that there is an obvious Cauchy sequence for x given by partial sums and it has a predictable modulus of convergence regardless of my number. Also note that deciding x ≤ 0 or x ≥0 amounts to guessing whether my number is even or odd (with both answers correct if I wasn't thinking of a number at all), so this requires divination.</p>\n<p>The \"most computable\" version of Dedekind reals is to take all monotone non-constant functions <code>Q -&gt; bool</code> and take a quotient to merge the two different cuts corresponding to a rational number. To compute one of these for a real number x, I don't need to decide whether or not x &lt; q, I have the milder choice of deciding x ≤ q or x ≥ q, with both answers valid when x = q. Sadly this is still not computable for Cauchy sequences, even with a modulus, as the Brouwerian counterexample above shows. However, the decision process is much milder and  deciding x ≤ q or x ≥ q for all q is known equivalent to finding a path through an infinite computable binary tree rather than solving the halting problem.</p>",
        "id": 169229366,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1561732186
    },
    {
        "content": "<p>So actually my problem is not well specified. I should formalise precisely what I mean by these notions I'm talking about, because the answer depends on the details.</p>",
        "id": 169230203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561732812
    },
    {
        "content": "<p>Kevin, are you trying to make Lean (and its community) just as constructivistic as all the other theorem proving communities? <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 169230509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561733016
    },
    {
        "content": "<p>No, I'm just trying to understand it properly. I am writing an article about Lean for mathematicians and I want to make sure I don't say anything stupid.</p>",
        "id": 169230628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561733094
    },
    {
        "content": "<p>Ok, that's fine.</p>",
        "id": 169230954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561733307
    },
    {
        "content": "<p>Will you explicitly say that the Lean community doesn't care about these issues?</p>",
        "id": 169231053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561733399
    },
    {
        "content": "<p>Yes</p>",
        "id": 169231113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561733409
    },
    {
        "content": "<p>Great!</p>",
        "id": 169231119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561733413
    },
    {
        "content": "<p>More precisely I'll say that Lean doesn't care about these issues.</p>",
        "id": 169231145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561733435
    },
    {
        "content": "<blockquote>\n<p>So actually my problem is not well specified. I should formalise precisely what I mean by these notions I'm talking about, because the answer depends on the details.</p>\n</blockquote>\n<p>It would be really great if Lean wouldn't even allow you to formalise precisely the constructively different notions that we've been talking about.</p>",
        "id": 169231207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561733488
    },
    {
        "content": "<p>But I'm afraid that you can still be very constructive in Lean if you want to.</p>",
        "id": 169231228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561733503
    },
    {
        "content": "<p>I am sure that  Leo wants to cater to constructive people. But he wants to cater to mathematicians too.</p>",
        "id": 169231356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561733579
    },
    {
        "content": "<p>By attaching a modulus of convergence, does that mean turning the Exists in the <code>∀ ε &gt; 0, ∃ N, ...</code> into a subtype?</p>",
        "id": 169232051,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561734047
    },
    {
        "content": "<p>It might mean supplying the function which turns the epsilon into an N.</p>",
        "id": 169232083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561734072
    },
    {
        "content": "<blockquote>\n<p>It would be really great if Lean wouldn't even allow you to formalise precisely the constructively different notions that we've been talking about.</p>\n</blockquote>\n<p>why?</p>",
        "id": 169235679,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1561736535
    },
    {
        "content": "<p>I'm not sure Johan was being too serious! The issue is that for mathematicians all these notions are \"the same\", so we find it hard to tell between them.</p>",
        "id": 169235726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561736576
    },
    {
        "content": "<p>[and hence we do not really want to be bothered about having to distinguish between them, which was indeed what I did in my first post]</p>",
        "id": 169235783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561736616
    },
    {
        "content": "<p>but surely at least some constructive proofs are useful to people that apply math.<br>\nfor instance, the constructive proof of the chinese remainder theorem allows (naughty) people to break textbook RSA encryption when the same message has been encrypted multiple times with the same parameter e ;)</p>",
        "id": 169237145,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1561737555
    },
    {
        "content": "<p>Sure -- but Johan and I do \"blue sky research\" maths and it is surprising how irrelevant computability is for us. We spend most of our time reasoning about objects, not computing them. Even when we do say we're doing \"computations\", this is not what a computer scientists means by the word.</p>",
        "id": 169237316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561737653
    },
    {
        "content": "<p>yes, i agree. most of that research likely won't ever need an algorithm. and if it ever does, \"cs people\" are likely to be better suited for coming up with an efficient algorithm, not just any constructive proof.</p>",
        "id": 169238387,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1561738290
    },
    {
        "content": "<p>To give some indication as to the way we think about mathematics, Johan, Patrick Massot and I defined a perfectoid space in Lean and we are still months away from being able to define a single explicit example; however we will soon get back to working on the project and trying to prove lemmas about perfectoid spaces, untroubled by this issue.</p>",
        "id": 169238625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561738420
    },
    {
        "content": "<blockquote>\n<p>I'm not sure Johan was being too serious! The issue is that for mathematicians all these notions are \"the same\", so we find it hard to tell between them.</p>\n</blockquote>\n<p>He indeed wasn't too serious. I'm pretty sure that he was trolling the constructivist CS crowd, just to make a point.</p>\n<p>I think that a lot of people on this chat don't realise that 9 out of 10 mathematicians really have no clue at all what \"classical\" mathematics is. (This time Johan is actually very serious!)</p>\n<p>In my field of research (arithmetic geometry) working \"classicaly\" means that you work over an algebraically closed field. That is what everyone understands the term to mean. (And this is not some exotic subfield of maths. It is tightly linked to number theory, complex analysis, algebraic topology, and all sorts of other major research areas.)</p>\n<p>Seriously: 99% of the mathematicians work classical. And 90% will be extremely confused when you start talking about constructive vs classical arguments. It is a distinction they have never heard of, and if it is somehow an important distinction to make when working with a theorem prover, than you've just lost another person's attention.</p>",
        "id": 169246347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561743936
    },
    {
        "content": "<p>It is true that most mathematicians actually do have a <code>meta</code> constructive overlay or something like that. We are extremely good at doing little computations with finite sets, even though we never think about implementing them in terms of <code>list</code> and whatever. We know how to compute with them (by implicitly choosing an order, blah blah). And mathematicians really don't even realise that at that very moment they are \"computing\".</p>",
        "id": 169247747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561744888
    },
    {
        "content": "<p>excuse my ignorance, is there any significant automation that lean can only provide if you're working constructively? other than that, i see no reason for the distinction to be anything other than a choice of priorities and possibly ideological preference.<br>\ni haven't been here for a long time, but i've had the impression that most people on this chat agree with you. as far as i can tell, even the majority of cs people work non-constructively and only invest time into finding a good algorithm when there's something to be gained from it.<br>\nas for other communities, i think that many people are well aware that most mathematicians don't care about constructive vs. non-constructive maths, but they're still trying to convince you to care. i personally don't think that there is much to be gained from this, either.<br>\nthe most recent example of this i've seen was the twitter convo that resulted from kevin's \"proofs are not programs\" blog post, and i honestly found that convo to be pretty hard to read.</p>",
        "id": 169249428,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1561746167
    },
    {
        "content": "<p>Currently no such automation exists.</p>",
        "id": 169249602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561746281
    },
    {
        "content": "<p>One could imagine a tactic that ports constructive proofs in algebra over to proofs of the analogous statements in an arbitrary topos. That would be a pretty cool and impressive thing to do.</p>",
        "id": 169249672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561746339
    },
    {
        "content": "<p>The \"significant automation\" that lean provides when working constructively is called <code>rfl</code></p>",
        "id": 169258583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561752761
    },
    {
        "content": "<p>I actually got caught on this issue in the other direction recently. I wrote \"Lean is primarily classical but allows you to prove intuitionistic theorems\" or something similar in a paper, and a reviewer complained about this line. They argued that because Lean is based on CIC it is no more or less classical than Coq</p>",
        "id": 169258788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561752917
    },
    {
        "content": "<p>I guess the library is more classical though right.</p>",
        "id": 169259697,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561753842
    },
    {
        "content": "<p>Right. I should mention I wasn't convinced by the argument</p>",
        "id": 169261104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561755120
    },
    {
        "content": "<p>If the library uses choice from the start, then even if you want to avoid choice it's not really a practical option. It actually matters a lot what the library does for this kind of thing</p>",
        "id": 169261210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561755190
    },
    {
        "content": "<p>The significant difference between Lean and Coq is quotients, which is brilliant for everyone but frightening for constructivists.</p>",
        "id": 169267371,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1561760660
    },
    {
        "content": "<blockquote>\n<p>If it is a type or a proof then it has no content, and if it is a function whose codomain has no content then the function type also has no content; inductive types have content</p>\n</blockquote>\n<p>Don't inductives like the following need some caveat here as well?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Void</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Void</span>  <span class=\"bp\">→</span> <span class=\"n\">Void</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Void</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">Void</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- this is fine.</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">Void</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- don&#39;t know how to synthesize placeholder type</span>\n</pre></div>",
        "id": 169270385,
        "sender_full_name": "matt rice",
        "timestamp": 1561763644
    },
    {
        "content": "<p>No, this is a computationally relevant type; it's just empty</p>",
        "id": 169281722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561783540
    },
    {
        "content": "<p>The problem with your example is you didn't give <code>#eval</code> a complete term. You can't eval a metavariable</p>",
        "id": 169281764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561783603
    },
    {
        "content": "<p>Are you saying that I can replace the _ with e.g. some tactic (<code>repeat</code>?) which will build up an infinitely long term, and while the <code>#eval</code> never returns it computes each step of the construction?</p>",
        "id": 169299776,
        "sender_full_name": "matt rice",
        "timestamp": 1561818788
    },
    {
        "content": "<p>No. You can only <code>#eval</code> a finitely large term, because there is no such thing as an infinitely large term - elaboration would never terminate if you tried something like that so it would never get around to the evaluation part</p>",
        "id": 169300334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561819646
    },
    {
        "content": "<p>However, there are tricks for constructing general recursive terms to inhabit <code>Void</code></p>",
        "id": 169300340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561819674
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Void</span> <span class=\"o\">:=</span> <span class=\"n\">Void</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">foo</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foo</span>\n</pre></div>\n\n\n<p>the evaluation of <code>foo</code> will not halt</p>",
        "id": 169300405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561819743
    },
    {
        "content": "<p>Thank you for clarifying.</p>",
        "id": 169300579,
        "sender_full_name": "matt rice",
        "timestamp": 1561820001
    },
    {
        "content": "<p>To add to a contrarian point to François' good answer, if one builds the Cauchy reals inside the topos of sheaves on a topological space, you get the sheaf of locally constant real-valued functions, and the Dedekind reals inside the same is the sheaf of continuous real-valued functions.</p>",
        "id": 169452218,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1562041682
    },
    {
        "content": "<p>Is there some reasonably simple way to see why that should be true?</p>",
        "id": 169480397,
        "sender_full_name": "Reid Barton",
        "timestamp": 1562074214
    },
    {
        "content": "<p>Erm, something like the Cauchy reals are not Dedekind complete. In my mind the fact that you get a countable object (hence 'discrete' in a sense) approximating a real means you can't continuously change the values much.</p>",
        "id": 169537470,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1562126141
    },
    {
        "content": "<p>I haven't looked at the proof, just have read it is true.</p>",
        "id": 169537697,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1562126516
    },
    {
        "content": "<p>Lots of nice discussion and references here: <a href=\"https://mathoverflow.net/questions/128569/a-model-where-dedekind-reals-and-cauchy-reals-are-different\" target=\"_blank\" title=\"https://mathoverflow.net/questions/128569/a-model-where-dedekind-reals-and-cauchy-reals-are-different\">https://mathoverflow.net/questions/128569/a-model-where-dedekind-reals-and-cauchy-reals-are-different</a></p>",
        "id": 169539063,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1562129121
    }
]