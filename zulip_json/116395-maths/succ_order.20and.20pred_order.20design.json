[
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and I have been discussing about the design of the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_order\">docs#succ_order</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pred_order\">docs#pred_order</a> typeclasses</p>",
        "id": 290635004,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658612557
    },
    {
        "content": "<p>Currently, <code>succ_order</code> is defined so that <code>succ a</code> covers <code>a</code> unless <code>a</code> is maximal, in which case <code>succ a</code> is some other order-indistinguishable maximal element</p>",
        "id": 290635109,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658612702
    },
    {
        "content": "<p>Of course the mental model is that we're working within a partial order, so that for a maximal element, <code>succ a = a</code>.</p>",
        "id": 290635209,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658612853
    },
    {
        "content": "<p>We have the notion of an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_succ_limit\">docs#is_succ_limit</a>, which is a value that isn't the successor of any value other than possibly itself</p>",
        "id": 290635303,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658612981
    },
    {
        "content": "<p>Think omega on ordinals, or the top in <code>with_top nat</code></p>",
        "id": 290635348,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613007
    },
    {
        "content": "<p>Now here's the thing</p>",
        "id": 290635384,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613085
    },
    {
        "content": "<p>As I proved in <a href=\"https://github.com/leanprover-community/mathlib/pull/15614\">#15614</a>, any <code>succ_order</code> has a certain predecessor-like function that I'm calling <code>pred'</code>, defined such that <code>pred' a = a</code> on successor limits <code>a</code>, and <code>pred' (succ a) = a</code> for non-maximal <code>a</code>.</p>",
        "id": 290635461,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613185
    },
    {
        "content": "<p>In a partial order that's also <code>is_succ_archimedean</code>, this function can be used to build a <code>pred_order</code> that satisfies <code>is_pred_archimedean</code></p>",
        "id": 290635467,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613224
    },
    {
        "content": "<p>Which means that right off the bat, in the cases we care about, these two classes are actually equivalent</p>",
        "id": 290635521,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613277
    },
    {
        "content": "<p>Now, Yaël raised the concern that <code>succ_order</code> and <code>pred_order</code> might actually be too strict, if <code>pred'</code> is only a valid predecessor function in the Archimedean case.</p>",
        "id": 290635594,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613372
    },
    {
        "content": "<p>After all, we do use a predecessor function like this in a non-archimedean order at least once: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.pred\">docs#ordinal.pred</a></p>",
        "id": 290635621,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613455
    },
    {
        "content": "<p>Of course, if <code>pred'</code> can be built from any partial <code>succ_order</code> and is a valid predecessor function, then we need to question whether it's even worth having <code>succ_order</code> and <code>pred_order</code> be separate classes.</p>",
        "id": 290635676,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613504
    },
    {
        "content": "<p>So the first question I'd like to answer is: do we <em>want</em> every <code>succ_order</code> to also be a <code>pred_order</code> and viceversa?</p>",
        "id": 290635806,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613698
    },
    {
        "content": "<p>These typeclasses don't really correspond to anything in the math library, even though they're undeniably useful to have in mathlib, so we get to make up our own answers here.</p>",
        "id": 290635858,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613742
    },
    {
        "content": "<p>At the same time, I don't think there's a need to fix what isn't broken. We can have both these typeclasses, and define the functions <code>order.succ'</code> and <code>order.pred'</code> when you want a weaker notion of a successor or predecessor given the other.</p>",
        "id": 290635896,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613836
    },
    {
        "content": "<p>If we do want to unify these typeclasses, then the next question would be what the new assumptions would become.</p>",
        "id": 290635962,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613888
    },
    {
        "content": "<p>So yeah, opinions welcome.</p>",
        "id": 290635981,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658613922
    },
    {
        "content": "<p>we definitely want definitional control of both</p>",
        "id": 290636126,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658614141
    },
    {
        "content": "<p>I think we could pretty much set them to the obvious things</p>",
        "id": 290636136,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658614154
    },
    {
        "content": "<p>like just merge it into one class</p>",
        "id": 290636141,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658614166
    },
    {
        "content": "<p>That much is true</p>",
        "id": 290636371,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658614509
    },
    {
        "content": "<p>We could have a single <code>succ_pred_order</code> class with two data fields <code>succ</code> and <code>pred</code> and constructors for one given the other when you don't care about the def-eq</p>",
        "id": 290636381,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658614550
    },
    {
        "content": "<p>But of course we do have reasonable ways to fill out both in most cases, e.g. <code>nat.succ</code> and <code>nat.pred</code>, or <code>int.succ</code> and <code>int.pred</code></p>",
        "id": 290636437,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658614589
    },
    {
        "content": "<p>The exceptions here would be ordinals and cardinals where there's not a \"nice\" way to define the predecessor</p>",
        "id": 290636445,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658614621
    },
    {
        "content": "<p>Not that we don't care about it</p>",
        "id": 290636451,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658614637
    },
    {
        "content": "<p>Something else that I just realized regarding <code>succ'</code> and <code>pred'</code>: I imagine that these functions would still satisfy many of the properties of <code>succ</code> and <code>pred</code>, leading to a lot of API duplication</p>",
        "id": 290636509,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658614721
    },
    {
        "content": "<p>So that's another point towards merging</p>",
        "id": 290636524,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658614765
    },
    {
        "content": "<p>If we were to merge <code>succ_order</code> and <code>pred_order</code>, what would the new <code>Prop</code> fields be? I imagine they could be like the current ones but with <code>is_max</code> replaced with <code>is_pred_limit</code></p>",
        "id": 290636671,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658615011
    },
    {
        "content": "<p>Yeah actually that sounds like a really elegant approach</p>",
        "id": 290636798,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658615221
    },
    {
        "content": "<p>And the nice thing is that <code>is_succ_archimedean</code> implies that all predecessor limits are maximums</p>",
        "id": 290637142,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658615845
    },
    {
        "content": "<p>Here's a small but noteworthy issue with this new approach</p>",
        "id": 290639343,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658618927
    },
    {
        "content": "<p>We can't state <code>is_succ_limit</code> without <code>succ</code></p>",
        "id": 290639350,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658618938
    },
    {
        "content": "<p>Which means we'd need to spell it out in full in the definition, which means no dot notation</p>",
        "id": 290639365,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658618952
    },
    {
        "content": "<p>Unless we were to make separate <code>has_succ</code> and <code>has_pred</code> typeclasses used for the sole purpose of defining <code>is_succ_limit</code> and <code>is_pred_limit</code>, and being extended by <code>succ_pred_order</code></p>",
        "id": 290639385,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658618986
    },
    {
        "content": "<p>Actually there's another problem, it's not trivial that you can build a <code>pred_order</code> from a <code>succ_order</code>, you need a bunch of extra results</p>",
        "id": 290639746,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619550
    },
    {
        "content": "<p>Maybe we could keep <code>succ_order</code> and <code>pred_order</code>, just changing <code>is_max</code> to <code>is_pred_limit</code>, and making <code>succ_pred_order</code> extend both?</p>",
        "id": 290639797,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619608
    },
    {
        "content": "<p>Then in practice, most results would be stated in terms of this latter typeclass</p>",
        "id": 290639800,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619620
    },
    {
        "content": "<p>That seems like shoddy design though, since <code>succ_order</code> and <code>pred_order</code> wouldn't be meant to be used</p>",
        "id": 290639809,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619639
    },
    {
        "content": "<p>It is actually very easy to define <code>is_succ_limit</code> without <code>succ</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_succ_limit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 290639813,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658619649
    },
    {
        "content": "<p>Or, even,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_succ_limit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">⋖</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 290639828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658619706
    },
    {
        "content": "<p>Oh wow</p>",
        "id": 290639860,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619722
    },
    {
        "content": "<p>Btw, I just realized that maybe we do still want to keep <code>succ_order</code> and <code>pred_order</code> even if we make a new class that combines them</p>",
        "id": 290639879,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619764
    },
    {
        "content": "<p>Since that way we'd still have <code>succ_order.of_succ_le_iff_of_le_lt_succ</code> and such to help build the successor function without having to build the predecessor one</p>",
        "id": 290639890,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619798
    },
    {
        "content": "<p>If we switch to this new definition of `is<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/succ_order.20and.20pred_order.20design/near/290639828\">said</a>:</p>\n<blockquote>\n<p>Or, even,</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_succ_limit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">⋖</span> <span class=\"n\">a</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This approach seems clearly better than the current one. But we'd have to rename <code>is_succ_limit</code> to something else, since we're no longer making explicit reference to the successor.</p>",
        "id": 290639978,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619913
    },
    {
        "content": "<p>Darn it, a PR is merged and two days later I already need to refactor it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 290639987,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658619937
    },
    {
        "content": "<p>Maybe <code>is_left_dense</code> and <code>is_right_dense</code>?</p>",
        "id": 290640244,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658620313
    },
    {
        "content": "<p>This seems simple enough to have a name in the literature but I can't find anything by googling</p>",
        "id": 290640381,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658620538
    },
    {
        "content": "<p>I think the names still make sense, because the generalisation I was talking about means that <code>succ</code> and <code>pred</code> could be defined in any linear order (at least).</p>",
        "id": 290640496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658620694
    },
    {
        "content": "<p>Are you talking about the same generalization as me? i.e. changing <code>is_max</code> to <code>is_pred_limit</code> and viceversa</p>",
        "id": 290640588,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658620831
    },
    {
        "content": "<p>Yes, because then either an element is a pred limit, or there's an element that covers it.</p>",
        "id": 290640708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658621004
    },
    {
        "content": "<p>Yeah, I can see how every linear order would have a successor and predecessor. They'd essentially boil down to \"the next element if it exists, itself otherwise\"</p>",
        "id": 290640711,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658621008
    },
    {
        "content": "<p>Well, I support this refactor</p>",
        "id": 290640758,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658621045
    },
    {
        "content": "<p>The only problem is that I don't know how to do this refactor without changing 1k lines of code at once</p>",
        "id": 290640769,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658621063
    },
    {
        "content": "<p>I guess I could start by generalizing <code>is_succ_limit</code>, then what?</p>",
        "id": 290640773,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658621079
    },
    {
        "content": "<p>Oh btw this still makes <code>succ</code> monotone.</p>",
        "id": 290641223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658621802
    },
    {
        "content": "<p>Ah by the way, your new definition of <code>is_succ_limit</code> isn't equivalent to the old one</p>",
        "id": 290641596,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658622442
    },
    {
        "content": "<p>...in preorders, so who cares <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 290641598,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658622449
    },
    {
        "content": "<p>You could have <code>a &lt; b ⋚ c</code> with <code>succ a = b</code>, <code>succ b = c</code>, <code>succ c = c</code>, so that <code>c</code> is a successor order under the old definition, but not under the new definition</p>",
        "id": 290641663,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658622562
    },
    {
        "content": "<p>Honestly it seems better this new way</p>",
        "id": 290641664,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658622567
    },
    {
        "content": "<p>Namespace stuff</p>",
        "id": 290641819,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658622795
    },
    {
        "content": "<p>I want to move <code>is_succ_limit</code> to the <code>order/cover.lean</code> file, but that file isn't contained in the <code>order</code> namespace</p>",
        "id": 290641824,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658622813
    },
    {
        "content": "<p>Which means <code>is_succ_limit</code> will no longer be in the <code>order</code> namespace by default</p>",
        "id": 290641827,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658622826
    },
    {
        "content": "<p>Should I do something about it?</p>",
        "id": 290641831,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658622836
    },
    {
        "content": "<p>I think this is fine. The reason for <code>succ</code> and <code>pred</code> being in the order namespace is to avoid conflicting with <code>nat.succ</code>.</p>",
        "id": 290641874,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658622884
    },
    {
        "content": "<p>I should note, basically everything about <code>is_succ_limit</code> no longer works on preorders, since we don't have <code>covby.succ_eq</code></p>",
        "id": 290642008,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658623161
    },
    {
        "content": "<p>Again, not a problem, just noteworthy</p>",
        "id": 290642012,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658623174
    },
    {
        "content": "<p>That's surprising. You don't get <code>succ a = b</code>, but you still have <code>antisymm_rel (≤) (succ a) b</code> so most results should still be true.</p>",
        "id": 290642105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658623284
    },
    {
        "content": "<p>The problem is that the old <code>is_succ_limit</code> had <code>succ a = b</code> in the definition itself</p>",
        "id": 290642168,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658623392
    },
    {
        "content": "<p>Sure. But your results should still be true if you replace <code>=</code> by <code>antisymm_rel (≤)</code>.</p>",
        "id": 290642177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658623432
    },
    {
        "content": "<p>Oh sure, but then they're no longer very useful</p>",
        "id": 290642233,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658623457
    },
    {
        "content": "<p>Ah, there is another inconvenience with the <code>is_succ_limit</code> refactor</p>",
        "id": 290642975,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658624787
    },
    {
        "content": "<p>Our def-eq abuse no longer works</p>",
        "id": 290642976,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658624796
    },
    {
        "content": "<p><code>is_succ_limit a</code> is no longer def-eq to <code>is_pred_limit (to_dual a)</code></p>",
        "id": 290642982,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658624809
    },
    {
        "content": "<p>I guess we could remedy this by defining <code>to_pred_limit</code> as the order-dual of <code>is_succ_limit</code>, though</p>",
        "id": 290642995,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658624842
    },
    {
        "content": "<p>The definition would look weird when unfolded, but just don't do that I guess</p>",
        "id": 290643002,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658624854
    },
    {
        "content": "<p>Simply prove <code>is_succ_order.dual</code>.</p>",
        "id": 290643189,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658624917
    },
    {
        "content": "<p>I did prove it, but since the entire <code>is_pred_limit</code> API consists entirely of def-eq conversions, it means that I now have to change all of that to be done \"properly\"</p>",
        "id": 290643267,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658625048
    },
    {
        "content": "<p>Or, I could just do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_pred_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_succ_limit</span> <span class=\"o\">(</span><span class=\"n\">to_dual</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 290643274,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658625067
    },
    {
        "content": "<p>Yeah, this is not proper.</p>",
        "id": 290643279,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658625081
    },
    {
        "content": "<p>Well, time to do things the right way then</p>",
        "id": 290643434,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658625123
    },
    {
        "content": "<p>Oh wait, I see what you mean</p>",
        "id": 290643536,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658625325
    },
    {
        "content": "<p>I don't need to do that much extra work, just use <code>h.dual</code> instead of <code>h</code> for my <code>is_pred_limit</code> hypotheses throughout</p>",
        "id": 290643540,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658625349
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15655\">#15655</a></p>",
        "id": 290644619,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658627225
    },
    {
        "content": "<p>Here's the PR redefining <code>is_succ_limit</code></p>",
        "id": 290644620,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658627233
    },
    {
        "content": "<p>As for <code>succ_order</code> and <code>pred_order</code>, here's what I think should be done:</p>\n<ul>\n<li>Redefine <code>succ_order</code> by changing <code>max_of_succ_le</code> to <code>is_pred_limit_of_succ_le</code>.</li>\n<li>Create a new typeclass <code>succ_pred_order</code> extending <code>succ_order</code> and <code>pred_order</code>.</li>\n<li>Make constructors from this new typeclass from either <code>succ_order</code> or <code>pred_order</code> on a <code>partial_order</code>.</li>\n<li>Use <code>succ_order</code> and <code>pred_order</code> only to prove the results necessary to create this constructor, and for auxiliary constructors such as <code>succ_order.of_succ_le_iff_of_le_lt_succ</code>. Use <code>succ_pred_order</code> for everything else.</li>\n</ul>",
        "id": 290644877,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658627715
    },
    {
        "content": "<p>Regarding <code>is_succ_archimedean</code> and <code>is_pred_archimedean</code>, we could either merge them into a single typeclass, or use this same approach of having both structures to prove auxiliary results, and only use the combined structure after that.</p>",
        "id": 290644921,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658627763
    },
    {
        "content": "<p><del>Though actually, I don't know if the auxiliary constructors for <code>succ_order</code> will be all that useful now that any linear order is a successor order period.</del> nvm they can still be used to give better def-eqs</p>",
        "id": 290644935,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658627845
    },
    {
        "content": "<p>By the way, this reminds me of our situation with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_semilattice_Sup\">docs#complete_semilattice_Sup</a></p>",
        "id": 290646072,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658629511
    },
    {
        "content": "<p>I guess the difference is that in that case, that typeclass is <strong>exactly</strong> mathematically identical to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice\">docs#complete_lattice</a>, and it's not hard to prove so, while in our case <code>succ_order</code> and <code>succ_pred_order</code> are only <strong>almost always</strong> mathematically identical, and it takes some API development to prove it</p>",
        "id": 290646152,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658629594
    },
    {
        "content": "<p>And also there's shortcuts to building <code>succ_order</code> while there's not really any shortcuts for <code>complete_semilattice_Sup</code> - it IS the shortcut.</p>",
        "id": 290646282,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658629767
    },
    {
        "content": "<p>I started working on the first part, changing <code>is_max</code> to <code>is_pred_limit</code></p>",
        "id": 290649341,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658633800
    },
    {
        "content": "<p>I can proudly say, when you change <code>is_max</code> into <code>is_pred_limit</code>, every result about succ-preorders remains true</p>",
        "id": 290649343,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658633818
    },
    {
        "content": "<p>Of course, the results on <code>no_max_order</code> no longer work, period</p>",
        "id": 290649352,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658633841
    },
    {
        "content": "<p>But that's where <code>is_succ_archimedean</code> comes in: in a succ-archimedean order, every predecessor limit is minimal, which means that we can still recover some form of these results</p>",
        "id": 290649435,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658633951
    },
    {
        "content": "<p>This is honestly amazing, for most results you can just replace <code>is_max</code> by <code>is_pred_limit</code> and it just immediately works</p>",
        "id": 290649829,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658634454
    },
    {
        "content": "<p>I'm thinking</p>",
        "id": 290650824,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658635736
    },
    {
        "content": "<p><code>succ_order</code> isn't really badly behaved on preorders</p>",
        "id": 290650858,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658635769
    },
    {
        "content": "<p>And neither is <code>is_pred_limit</code></p>",
        "id": 290650919,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658635835
    },
    {
        "content": "<p>For the latter, you can prove a congruence lemma of the form <code>antisymm_rel (≤) a b → (is_pred_limit a ↔ is_pred_limit b)</code></p>",
        "id": 290650929,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658635860
    },
    {
        "content": "<p>So maybe it's not even worth it to merge <code>succ_order</code> and <code>pred_order</code></p>",
        "id": 290650996,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658635923
    },
    {
        "content": "<p>Even though we should totally document that on a partial order either instance gives you the other</p>",
        "id": 290651096,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658636066
    },
    {
        "content": "<p>Idea</p>",
        "id": 290651592,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658636747
    },
    {
        "content": "<p>Now that <code>is_pred_limit</code> is part of the definition of a <code>succ_order</code>, surely there's no reason for <code>order/succ_pred/limit.lean</code> to be a separate file?</p>",
        "id": 290651657,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658636770
    },
    {
        "content": "<p>On the other hand, all the stuff about archimedean orders is going to grow a lot in size now that the results that were previously stated for <code>no_max_order</code> and such are moved there, so maybe that should get its own file?</p>",
        "id": 290651683,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658636806
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/succ_pred_refactor_REAL\">https://github.com/leanprover-community/mathlib/tree/succ_pred_refactor_REAL</a></p>",
        "id": 290654058,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658640338
    },
    {
        "content": "<p>Here's the start of the <code>is_max → is_pred_limit</code> refactor</p>",
        "id": 290654060,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658640350
    },
    {
        "content": "<p>I commented out everything that was nontrivial to fix</p>",
        "id": 290654084,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658640363
    },
    {
        "content": "<p>Wait, I just realized something</p>",
        "id": 290654182,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658640594
    },
    {
        "content": "<p>From the module docstring:</p>\n<blockquote>\n<p>The stricter condition of every element having a sensible successor can be obtained through the combination of <code>succ_order α</code> and <code>no_max_order α</code>.</p>\n</blockquote>\n<p>If we do this refactor, we will no longer have a spelling for this exactly. Is that a problem?</p>",
        "id": 290654240,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658640664
    },
    {
        "content": "<p>Also, now that <code>is_succ_limit</code> has a much simpler and natural definition, maybe we do want a <code>no_succ_limit</code> typeclass? It would be niche, but it would be by far the easiest way to patch up the API</p>",
        "id": 290654441,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658641019
    },
    {
        "content": "<p>That way, we will actually have a spelling for \"has a sensible successor function\" that doesn't just work on naturals and integers</p>",
        "id": 290654450,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658641070
    },
    {
        "content": "<p>Yeah you know, it would be weird not to automatically have that e.g. the successor function on ordinals is strictly monotone</p>",
        "id": 290654509,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658641175
    },
    {
        "content": "<p>Potential dealbreaker</p>",
        "id": 290654522,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658641193
    },
    {
        "content": "<p>Alright, before I go to sleep, I'll summarize my current plan with this refactor. All comments apply to the respective order duals.</p>\n<ol>\n<li>Redefine <code>is_succ_limit</code> in terms of the covering relation.</li>\n<li>Introduce a <code>no_succ_limit</code> typeclass.</li>\n<li>Generalize <code>succ_order</code> by changing <code>max_of_succ_le</code> to <code>is_pred_order_of_succ_le</code></li>\n<li>Prove that a partial <code>succ_order</code> is also a <code>pred_order</code>.</li>\n<li>Prove that a partial <code>is_succ_archimedean</code> order is also <code>is_pred_archimedean</code>.</li>\n</ol>",
        "id": 290654952,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658641998
    },
    {
        "content": "<p>I just realized</p>",
        "id": 290674784,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658666619
    },
    {
        "content": "<p>With this redefinition, you can actually define a predecessor order from <strong>any</strong> successor order</p>",
        "id": 290674837,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658666669
    },
    {
        "content": "<p>For a successor limit you define the predecessor as itself, otherwise you define it as some element covered by it</p>",
        "id": 290674863,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658666733
    },
    {
        "content": "<p>It's just that this element is not generally unique in a preorder</p>",
        "id": 290674918,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658666784
    },
    {
        "content": "<p>Yeah you know, I think I'm against merging <code>succ_order</code> + <code>pred_order</code> and <code>is_succ_archimedean</code> + <code>is_pred_archimedean</code></p>",
        "id": 290682210,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658671750
    },
    {
        "content": "<p>There's little cost in just using the constructors for one from the other</p>",
        "id": 290682269,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658671813
    }
]