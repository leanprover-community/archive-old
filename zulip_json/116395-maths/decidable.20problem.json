[
    {
        "content": "<p>I want to define a <code>(S → R) </code> where <code>R</code> has a zero , <code>(r : R)</code> and <code>(a:S)</code>  ,  by sending a to r and the rest to 0. I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">r</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>but lean says that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">sinthetize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any suggestion what to do?</p>",
        "id": 226943253,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1613729369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315546\">@Xavier Xarles</span> <code>open_locale classical</code> at the top of your file (-;</p>",
        "id": 226943656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613729596
    },
    {
        "content": "<p>Or, add <code>[decidable_pred ((=) a)]</code> or <code>[decidable_eq S]</code></p>",
        "id": 226943915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613729748
    },
    {
        "content": "<p>Note that that function is precisely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.single\">docs#pi.single</a>, as <code>pi.single a r</code></p>",
        "id": 226944041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613729813
    }
]