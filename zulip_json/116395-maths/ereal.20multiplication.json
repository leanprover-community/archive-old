[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/ennreal.20multiplication/near/312808481\">said</a>:</p>\n<blockquote>\n<p>When you have <code>+∞</code> and <code>-∞</code>, even algebraists should agree that the only meaningful answer for <code>(-1) * (+∞)</code> is <code>-∞</code>. Otherwise, negation does not even coincide with multiplication with <code>-1</code>!</p>\n</blockquote>\n<p>My conclusion from looking at the conventions which had been chosen last week was that probably a lot of these questions were regarded as junk questions even by the analysts (for example -infty * +infty = +infty was true for a long time and nobody complained until today.) I had just assumed that because nobody had flagged these issues before that they must be questions which don't come up. As an algebraist I do not agree that the only meaningful answer to <code> (-1) * (+∞)</code> is <code>-∞</code>, I want to argue that infinity itself is a junk concept in algebra; no ring can ever contain infinity, for example. I think arguing that \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">(-1)\\times x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> must be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">-x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span></span></span></span>\" doesn't work; there are plenty of statements that also \"must\" be true like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn><mo>&gt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x+1&gt;x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x/x=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, and the moment you add infinity they cannot all be true at the same time because algebra breaks with infinity, so something has to give somewhere. I think the only thing that matters is when you have some application which is sensible and which needs a different convention for infinity, so if you've found one then  go ahead and make the change! You argued coherently that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>×</mo><mi mathvariant=\"normal\">∞</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0\\times\\infty=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> should be true recently because it was a useful convention for analysis, but I think it's risky to start arguing that conventions should be changed just because something which \"must\" be true isn't true.</p>",
        "id": 312820892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669721387
    },
    {
        "content": "<p>I agree with Kevin considering <code>∞</code> a junk value.</p>\n<p>However, thinking of <code>ereal</code> as the \"2-point compactification of <code>real</code>\", I would be happy to know that multiplication by <em>negative reals</em> is a homeomorphism and would therefore be happier if <code>(-1) * (+∞)</code> were equal to <code>-∞</code>!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>Also, should the topic by \"<code>ereal</code> multiplication\"?  I think that Reid's comment arose from this.</p>",
        "id": 312822046,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1669721764
    },
    {
        "content": "<p>Yes, wrong topic title, sorry. Corrected!</p>",
        "id": 312826658,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669723383
    },
    {
        "content": "<p>Do you have any idea of a change of definition for <code>ereal</code>? It seems to appear only in 7 files in mathlib so the changes involved would be minimal in any case.</p>",
        "id": 312864680,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1669734819
    },
    {
        "content": "<p>I'm switching to <code>with_bot (with_top R)</code> to make sure that <code>(-∞) + (+∞) = -∞</code> (which is the right convention by analogy with the probability theory one). And I'm giving a definition from scratch for the multiplication, since you can't do it in two steps as we do for the other operations (what would be <code>(-1) * (+∞)</code> on <code>with_top R</code>). It's not as painful as I was fearing!</p>",
        "id": 312885265,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669740381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/ereal.20multiplication/near/312885265\">said</a>:</p>\n<blockquote>\n<p>I'm switching to <code>with_bot (with_top R)</code> to make sure that <code>(-∞) + (+∞) = -∞</code> (which is the right convention by analogy with the probability theory one). </p>\n</blockquote>\n<p>Is that <code>*</code> in  place of <code>+</code>? Perhaps there is another analogy I'm missing!</p>",
        "id": 312911346,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1669747822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/116395-maths/topic/ereal.20multiplication/near/312911346\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/ereal.20multiplication/near/312885265\">said</a>:</p>\n<blockquote>\n<p>I'm switching to <code>with_bot (with_top R)</code> to make sure that <code>(-∞) + (+∞) = -∞</code> (which is the right convention by analogy with the probability theory one). </p>\n</blockquote>\n<p>Is that <code>*</code> in  place of <code>+</code>? Perhaps there is another analogy I'm missing!</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/bot_eq_zero_class/near/309165196\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/bot_eq_zero_class/near/309165196</a></p>",
        "id": 312914092,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1669748672
    },
    {
        "content": "<p>It's <code>+</code>. There are two things which are wrong currently on <code>ereal</code>, one about <code>*</code> (which is just plain wrong) and one about <code>+</code> (which is not really plain wrong because there is no canonical choice for <code>(-∞) + (+∞)</code>, but arguably this one should better be <code>-∞</code> so that the exponential becomes an isomorphism with <code>ennreal</code>). I am fixing both.</p>",
        "id": 312914134,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669748688
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17770\">#17770</a></p>",
        "id": 313019767,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669801494
    },
    {
        "content": "<p>I should apologise for defining <code>ereal</code> as <code>with_top (with_bot ℝ)</code> instead of <code>with_bot (with_top ℝ)</code> -- at the time I could see no clear difference! I do like your explanation that addition in <code>ereal</code> should be compatible with multiplication on <code>ennreal</code> via exp/log, and you'd already convinced me that <code>0 * \\infty = 0</code> was a good idea in ennreal.</p>",
        "id": 313023069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669802720
    },
    {
        "content": "<p>Do we actually use multiplication in <code>ereal</code> a lot ?</p>",
        "id": 313023159,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1669802750
    },
    {
        "content": "<p>I don't think we use <code>ereal</code> a lot. IIRC I only made the definition because I wanted to get some practice using <code>with_bot</code> and trying to understand the concept of a type synonym (at the time <code>with_bot X</code> was defined to be <code>option X</code> and this might still be the case).</p>",
        "id": 313024714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669803256
    },
    {
        "content": "<p>Yes I counted 7 files in which it is used. It might be more natural to equip it with just the addition and <code>smul</code> from the reals or something. Unless it makes integrals against signed measures weird or something?</p>",
        "id": 313025081,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1669803416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/116395-maths/topic/ereal.20multiplication/near/313023159\">said</a>:</p>\n<blockquote>\n<p>Do we actually use multiplication in <code>ereal</code> a lot ?</p>\n</blockquote>\n<p>No, we don't (otherwise, someone would have already noticed it and fixed it). But it's not a reason to have it wrong :-)</p>",
        "id": 313025710,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669803643
    },
    {
        "content": "<p>I mean, one way to not have it wrong is to not have it at all</p>",
        "id": 313027111,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1669804115
    },
    {
        "content": "<p>Sure. But with the PR we have it, and we have it right.</p>",
        "id": 313028034,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669804433
    }
]