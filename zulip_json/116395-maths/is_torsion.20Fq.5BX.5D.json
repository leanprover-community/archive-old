[
    {
        "content": "<p>Hello. Can I ask for advice on a good place to put:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.torsion</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Fq</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">Fq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Fq</span><span class=\"o\">]</span>\n<span class=\"sd\">/-- Fq[X] is a torsion group -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_torsion</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.is_torsion</span> <span class=\"n\">Fq</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_of_fin_add_order_iff_nsmul_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">fintype.card</span> <span class=\"n\">Fq</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_pos</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_smul_cast</span> <span class=\"n\">Fq</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">finite_field.cast_card_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does putting it in <code>field_theory.finite.polynomial</code> make any sense?</p>",
        "id": 273975080,
        "sender_full_name": "Julian Berman",
        "timestamp": 1646315610
    },
    {
        "content": "<p>It seems this really is a  quite special case of something much more generally useful? That vector spaces over finite fields are torsion? Or maybe something more general still about modules over torsion abelian groups?</p>",
        "id": 273975810,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646315916
    },
    {
        "content": "<p>Given how little I know I'm sure that's likely, so if you have a suggestion for which of those to go after I'm happy to do it instead.</p>",
        "id": 273976055,
        "sender_full_name": "Julian Berman",
        "timestamp": 1646316023
    },
    {
        "content": "<p>Sure I'll have a go at extracting the weakest things for which your proof works <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 273976204,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646316065
    },
    {
        "content": "<p>Thanks! If you don't mind not spoiling the proof immediately that'd be appreciated as well.</p>",
        "id": 273976287,
        "sender_full_name": "Julian Berman",
        "timestamp": 1646316097
    },
    {
        "content": "<p>What do you mean sorry? Like just tell you the answer but not the modifications to the proof?</p>",
        "id": 273976642,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646316224
    },
    {
        "content": "<p>Yeah hah just that</p>",
        "id": 273977423,
        "sender_full_name": "Julian Berman",
        "timestamp": 1646316540
    },
    {
        "content": "<p>Not sure if its optimal but the following refactoring seems more natural to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.torsion</span>\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Fq</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">Fq</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.is_torsion</span> <span class=\"n\">Fq</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_torsion</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">Fq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.is_torsion</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">--proof left for the reader</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Fq</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">Fq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Fq</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- should prove the original goal</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_torsion'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">Fq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.is_torsion</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_torsion</span> <span class=\"o\">(</span><span class=\"n\">is_add_torsion_of_fintype</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.is_torsion</span> <span class=\"n\">Fq</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273979880,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646317590
    },
    {
        "content": "<p>What does it mean for a monoid to be torsion? Is it a group?</p>",
        "id": 273980182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646317707
    },
    {
        "content": "<p>Yeah I guess the real assumptions for the first part are closer to the second! And we may as well assume group / ring throughout</p>",
        "id": 273980361,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646317794
    },
    {
        "content": "<p>The documentation in <code>group_theory.torsion</code> and <code>group_theory.order_of_element</code> is a bit confusing, it talks as though \"group\" and \"monoid\" are interchangeable.</p>",
        "id": 273981226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646318170
    },
    {
        "content": "<p>I feel like this is also done in <a href=\"https://tqft.net/mathlib/group_theory\">file#group_theory</a>.exponent, but just because people rarely talk about exponent of groups. I guess that all torsion monoids are groups, though...</p>",
        "id": 273982064,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646318494
    },
    {
        "content": "<p>Yeah. I think other-Julian was explaining that to me (that elsewhere it's an implementation detail that things are defined on monoid) but that here things are always groups anyhow. But I may have still poorly written the docstring, maybe I should just have used group everywhere in it</p>",
        "id": 273982486,
        "sender_full_name": "Julian Berman",
        "timestamp": 1646318679
    },
    {
        "content": "<p>maybe just put it in the impl details section</p>",
        "id": 273982515,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646318698
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span></p>",
        "id": 273982533,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646318709
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_of_fin_add_order</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fq</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_of_fin_add_order_iff_nsmul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h_w</span><span class=\"o\">,</span> <span class=\"n\">h_h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h_w</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_smul_cast</span> <span class=\"n\">Fq</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">zero_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat.smul_one_eq_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_h</span><span class=\"o\">,</span>\n</code></pre></div>\n</div></div>",
        "id": 273983121,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646318953
    },
    {
        "content": "<p>here's a proof that I can't be asked to PR but is probably worth having:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">is_torsion.group</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_torsion</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">order_of</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">tsub_add_cancel_of_le</span><span class=\"o\">,</span> <span class=\"n\">pow_order_of_eq_one</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">order_of_pos'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">‹</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">›</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 273983980,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646319330
    },
    {
        "content": "<p>btw what are the technical reasons for making <code>is_torsion</code> a property of monoids in the first place?</p>",
        "id": 273984264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646319439
    },
    {
        "content": "<p>I copied where to put it from <code>order_of_element</code>, so there may not be any good one other than my cargo culting. If I move it to group and everything works is that all that would need checking?</p>\n<p>It would however lose  the ability to state Eric's proof above though right (<a href=\"https://github.com/leanprover-community/mathlib/pull/12432\">#12432</a>, thanks Eric)?</p>",
        "id": 273990064,
        "sender_full_name": "Julian Berman",
        "timestamp": 1646321875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/is_torsion.20Fq.5BX.5D/near/273984264\">said</a>:</p>\n<blockquote>\n<p>btw what are the technical reasons for making <code>is_torsion</code> a property of monoids in the first place?</p>\n</blockquote>\n<p>My money's on \"because it compiles\" :-/</p>",
        "id": 274053747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646348592
    },
    {
        "content": "<p>and you can have the added benefit of being able to promote a torsion monoid to a group thus enabling some exciting diamonds.</p>",
        "id": 274053753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646348596
    },
    {
        "content": "<p>Arguably it's good that it's defined on monoids because it means we can state and prove \"you may as well have just used a group\" rather than just asserting it in a docstring</p>",
        "id": 274060902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646353162
    },
    {
        "content": "<p>Note that in the convexity API people made me change <code>[ordered_ring 𝕜] [add_comm_monoid E] [module 𝕜 E]</code> to <code>[ordered_ring 𝕜] [add_comm_group E] [module 𝕜 E]</code></p>",
        "id": 274061048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646353279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/is_torsion.20Fq.5BX.5D/near/274060902\">said</a>:</p>\n<blockquote>\n<p>Arguably it's good that it's defined on monoids because it means we can state and prove \"you may as well have just used a group\" rather than just asserting it in a docstring</p>\n</blockquote>\n<p>But... you could have just used a group, so why does it matter?</p>",
        "id": 274061264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646353414
    },
    {
        "content": "<p>I fail to see a motivation here--I'm not saying there can't be one, I just don't know. <strong>But</strong>, if we do leave <code>is_torsion</code> as a property of a monoid, we should make very clear in the documentation that a \"torsion monoid\" is just a torsion group.</p>",
        "id": 274061431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646353509
    },
    {
        "content": "<p>Because for a mathematician \"torsion monoid\" doesn't make sense as a name for a structure in which every element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x^n = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, because we already have a name for that--torsion group.</p>",
        "id": 274061478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646353552
    },
    {
        "content": "<p>In lean there is a difference: a group comes with an inverse operation and a torsion monoid doesn't</p>",
        "id": 274062106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646353885
    },
    {
        "content": "<p>You can construct an inverse operation but it doesn't have one built in</p>",
        "id": 274062140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646353908
    },
    {
        "content": "<p>By the same argument you can ask why a group has a 1 and inverse in the first place since the multiplication uniquely defines the rest of it</p>",
        "id": 274062263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646353999
    },
    {
        "content": "<p>Right, so you're agreeing that this should be a predicate on groups, because we should have the inverse rather than having to infer it?</p>",
        "id": 274064170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646355528
    },
    {
        "content": "<p>well if you want a torsion group then you can say <code>[group A] [is_torsion A]</code> but it seems like torsion monoid is a well formed concept</p>",
        "id": 274064522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646355640
    }
]