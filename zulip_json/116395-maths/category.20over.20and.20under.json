[
    {
        "content": "<p>Hello, </p>\n<p>A little question : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">under</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">})</span>   <span class=\"c1\">--- stupid condition but don&#39;t work  :(</span>\n<span class=\"c1\">---- hum : f.hom  : R ⟶ A for some A true ?</span>\n<span class=\"c1\">---  How i can evaluate f.hom ?</span>\n</pre></div>",
        "id": 193010577,
        "sender_full_name": "orlando",
        "timestamp": 1586162254
    },
    {
        "content": "<p>In fact the problem is : if i have   <code> f : A ⟶ B  </code> and  <code> a : A </code>, how can i evaluate  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> f  ( a)  </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span> ?   With  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A,B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> CommRing  and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> a morphism of commutative Ring ?</p>",
        "id": 193015742,
        "sender_full_name": "orlando",
        "timestamp": 1586165222
    },
    {
        "content": "<p><code>f a</code></p>",
        "id": 193015809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586165272
    },
    {
        "content": "<p>it's doesn't work !!!</p>",
        "id": 193015887,
        "sender_full_name": "orlando",
        "timestamp": 1586165302
    },
    {
        "content": "<p>include all the <code>import</code>s</p>",
        "id": 193015912,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586165319
    },
    {
        "content": "<p>the W in MWE is important too</p>",
        "id": 193015942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586165335
    },
    {
        "content": "<p>Sorry i don't understand ? What is MWE ?</p>",
        "id": 193016217,
        "sender_full_name": "orlando",
        "timestamp": 1586165506
    },
    {
        "content": "<p>minimal working example</p>",
        "id": 193016287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586165524
    },
    {
        "content": "<p>it would be easier for us to help one if one posts MWEs instead of code snippets that can't be copied directly</p>",
        "id": 193016324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586165547
    },
    {
        "content": "<p>(i.e. copy and paste your code into a new file, make sure it compiles with the error you expect, and that there is nothing in the file besides what is required to demonstrate the behaviour you want help with)</p>",
        "id": 193016696,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586165779
    },
    {
        "content": "<p>(sometimes it's onerous to do this; on the other hand at least half the time I set out to do this, attempting to construct the MWE reveals for me what the problem is)</p>",
        "id": 193016736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586165815
    },
    {
        "content": "<p>Sorry !!!  For example ! </p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n<span class=\"kn\">structure</span> <span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"n\">CommRing</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certif</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span>   <span class=\"c1\">--- problem ?</span>\n</pre></div>",
        "id": 193016746,
        "sender_full_name": "orlando",
        "timestamp": 1586165820
    },
    {
        "content": "<p>missing close parenthesis on the last line?</p>",
        "id": 193016766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586165845
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>function expected at\n  f\nterm has type\n  A ⟶ R\n</pre></div>",
        "id": 193016857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586165888
    },
    {
        "content": "<p>ok but it's not the problem</p>",
        "id": 193016863,
        "sender_full_name": "orlando",
        "timestamp": 1586165894
    },
    {
        "content": "<p>yes Kevin !</p>",
        "id": 193016872,
        "sender_full_name": "orlando",
        "timestamp": 1586165902
    },
    {
        "content": "<p>(It also helps if you include the text of the error message in the comment in the MWE, so people don't have to copy and paste themselves)</p>",
        "id": 193016873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586165903
    },
    {
        "content": "<p>(Nevertheless, go edit the MWE now!)</p>",
        "id": 193016901,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586165925
    },
    {
        "content": "<p>It would be nice to just be able to say \"@lean_bot print_errors\".</p>",
        "id": 193016913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586165941
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n<span class=\"kn\">structure</span> <span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"n\">CommRing</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certif</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>works</p>",
        "id": 193016954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586165981
    },
    {
        "content": "<p>Does it help if you change <code>CommRing</code> to <code>CommRing.{0}</code>? (In both places.)</p>",
        "id": 193016955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586165982
    },
    {
        "content": "<p>No...</p>",
        "id": 193017052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586166031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/category.20over.20and.20under/near/193016324\" title=\"#narrow/stream/116395-maths/topic/category.20over.20and.20under/near/193016324\">said</a>:</p>\n<blockquote>\n<p>it would be easier for us to help one if one posts MWEs instead of code snippets that can't be copied directly</p>\n</blockquote>\n<p>and the proof is that immediately two people joined the discussion</p>",
        "id": 193017090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586166057
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n<span class=\"kn\">structure</span> <span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certif</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193017105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586166068
    },
    {
        "content": "<p>do the coercion on the other side?</p>",
        "id": 193017120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586166087
    },
    {
        "content": "<p>I think the problem is that when you write <code>f  (1 : A)</code>, Lean doesn't yet know the expected type of the whole term, so it can't find the coercion for <code>f</code> yet.</p>",
        "id": 193017220,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586166142
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certif</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193017235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586166156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/category.20over.20and.20under/near/193017220\" title=\"#narrow/stream/116395-maths/topic/category.20over.20and.20under/near/193017220\">said</a>:</p>\n<blockquote>\n<p>I think the problem is that when you write <code>f  (1 : A)</code>, Lean doesn't yet know the expected type of the whole term, so it can't find the coercion for <code>f</code> yet.</p>\n</blockquote>\n<p>Note that this is because Lean 3 has a coercion system that isn't very smart. Lean 4 should make all of this look stupid.</p>",
        "id": 193017268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586166182
    },
    {
        "content": "<p>specifying the type of the outer term is better than the inner term</p>",
        "id": 193017285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586166194
    },
    {
        "content": "<p>Why?</p>",
        "id": 193017298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586166202
    },
    {
        "content": "<p>because Lean elaborates from left to right</p>",
        "id": 193017306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586166213
    },
    {
        "content": "<p>if you specify the inner type then Lean has to backtrack</p>",
        "id": 193017323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586166229
    },
    {
        "content": "<p>and of course, people who know what they're talking about can confirm/deny my speculations</p>",
        "id": 193017388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586166253
    },
    {
        "content": "<p>ohhhh that work !</p>",
        "id": 193017688,
        "sender_full_name": "orlando",
        "timestamp": 1586166460
    },
    {
        "content": "<p>I think all our suggestions work :-)</p>",
        "id": 193017706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586166477
    },
    {
        "content": "<p>I don't tell you, how many time a spent with this problem <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 193017890,
        "sender_full_name": "orlando",
        "timestamp": 1586166600
    },
    {
        "content": "<p>Well I hope you learn from the MWE suggestion because it makes questions much easier to answer. I ignored your question initially precisely because it didn't compile.</p>",
        "id": 193018407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586166910
    },
    {
        "content": "<p>Hello, </p>\n<p>Another triviality problem ! </p>\n<p>My MWE  <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>Is there a unop for morphism ? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Ring</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Set</span><span class=\"bp\">`</span> <span class=\"o\">:=</span>  <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">Aop</span> <span class=\"n\">Bop</span>  <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"err\">ᵒᵖ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Aop</span> <span class=\"err\">⟶</span> <span class=\"n\">Bop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">Bop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>    <span class=\"c1\">-- don&#39;t work ?</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>   <span class=\"c1\">-- work !</span>\n <span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 193037281,
        "sender_full_name": "orlando",
        "timestamp": 1586178015
    },
    {
        "content": "<p>it's not minimal <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 193037387,
        "sender_full_name": "orlando",
        "timestamp": 1586178056
    },
    {
        "content": "<p>The main thing is that it works. <code>end category_theory</code> ;-)</p>",
        "id": 193037429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586178074
    },
    {
        "content": "<p>I edit Kevin !</p>",
        "id": 193037636,
        "sender_full_name": "orlando",
        "timestamp": 1586178141
    },
    {
        "content": "<p>What happens if you <code>Ctrl-click</code> on <code>unop</code></p>",
        "id": 193037651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586178149
    },
    {
        "content": "<p>It will take you to a different file, and most likely somewhere nearby you will find <code>unop</code> for homs</p>",
        "id": 193037705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586178177
    },
    {
        "content": "<p>it's nothing to do with categories, where we end up :-(</p>",
        "id": 193037796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586178220
    },
    {
        "content": "<p>Right because <code>opposite</code> for categories was merged with something else. I still don't think it was necessarily a good idea.</p>",
        "id": 193037906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586178253
    },
    {
        "content": "<p>IIRC, you want <code>f.unop</code> for a hom</p>",
        "id": 193037923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586178262
    },
    {
        "content": "<p>but I probably don't</p>",
        "id": 193037930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586178268
    },
    {
        "content": "<p>confirmed: <code>exact f.unop.map_mul a b,</code> works</p>",
        "id": 193038002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586178300
    },
    {
        "content": "<p>I actually wonder whether we could get rid of the <code>op</code>/<code>unop</code> for homs. It doesn't seem as important as the one for objects</p>",
        "id": 193038107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586178340
    },
    {
        "content": "<p>Ok <code> f.unop </code>  i try <code> unop f </code>  <code> f^\\unop</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 193038312,
        "sender_full_name": "orlando",
        "timestamp": 1586178428
    },
    {
        "content": "<p><code>f.unop</code> is <code>hom.unop f</code></p>",
        "id": 193038344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586178444
    },
    {
        "content": "<p>Or actually <code>category_theory.category.hom.unop f</code></p>",
        "id": 193038382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586178467
    },
    {
        "content": "<p>Ok i understand Johan, in fact   there is two files opposite !  </p>\n<ol>\n<li>in data/ opposite </li>\n<li>in category_theory/ opposites  </li>\n</ol>\n<p>And i just see the first <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 193039522,
        "sender_full_name": "orlando",
        "timestamp": 1586178994
    }
]