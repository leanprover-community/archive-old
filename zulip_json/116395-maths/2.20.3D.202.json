[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">int_cast_eq_C</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Am I missing a trick here? This takes nearly a second to elaborate. <code>int_cast_eq_C</code> says that <code>n : polynomial R</code> equals <code>C n</code> but here <code>n : int</code> and there are casts involved, hence the norm_cast applications at the end. 1 second seems a bit much for something like this.</p>",
        "id": 192972914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113379
    },
    {
        "content": "<p><code>simp</code> also works, a bit slower (1.6 s) but if you squeeze it it goes down to 460 ms</p>",
        "id": 192973097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586113648
    },
    {
        "content": "<p><code>simp</code> doesn't work for me :-/</p>",
        "id": 192973165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">int_cast_eq_C</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_bit0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192973194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586113728
    },
    {
        "content": "<p>oh I see, after the convert. Thanks.</p>",
        "id": 192973201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113742
    },
    {
        "content": "<p>you can also use <code>rw</code> instead of <code>simp only</code> for a little bit faster</p>",
        "id": 192973205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586113746
    },
    {
        "content": "<p>this is a bit more respectable, thanks.</p>",
        "id": 192973212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113767
    },
    {
        "content": "<p>Of course if one could formalise and prove the general case then this would be great, stick it in mathlib -- but the problem seems to be that this is about numerals rather than ints or nats or whatever</p>",
        "id": 192973267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113813
    },
    {
        "content": "<p>If you print the proof with <code>pp.all</code> you might see why it takes this long</p>",
        "id": 192973274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586113821
    },
    {
        "content": "<p>Slightly ominous that the pp.all output ends with</p>\n<div class=\"codehilite\"><pre><span></span> …) …))\n                         …))\n                   …)\n                …)\n             …))\n       …\n       …\n       …)\n    …\n</pre></div>",
        "id": 192973297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113883
    },
    {
        "content": "<p>I'm proving 2 = 2 for goodness' sake!</p>",
        "id": 192973301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113895
    },
    {
        "content": "<p>Stupid computer doesn't understand equality properly</p>",
        "id": 192973306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586113909
    },
    {
        "content": "<p>I completely agree with you, this is ridiculous</p>",
        "id": 192973351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586113941
    },
    {
        "content": "<p>I really need to write that deduplicating printer so I can see the actual size of the term</p>",
        "id": 192973372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586114002
    },
    {
        "content": "<p>the usual pp.all printout makes it look worse than it is because of all the duplicated subterms that are actually the same in memory</p>",
        "id": 192973389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586114038
    },
    {
        "content": "<p>Oh that's interesting. I hadn't thought about how these were stored.</p>",
        "id": 192973432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586114056
    },
    {
        "content": "<p>That is still the longest proof of 2 = 2 I've ever seen.</p>",
        "id": 192973450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586114088
    },
    {
        "content": "<p>lean also does its best to not e.g. re-typecheck the same expression if it appears in two places so a highly redundant term can still typecheck quickly</p>",
        "id": 192973463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586114104
    },
    {
        "content": "<p>2+2=4 has nothing on 2=2</p>",
        "id": 192973470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586114119
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>(@bit0.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n       (@distrib.to_has_add.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n          (@ring.to_distrib.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n             (@comm_ring.to_ring.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n                (@polynomial.comm_ring.{0} R _inst_1))))\n       (@has_one.one.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n          (@monoid.to_has_one.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n             (@ring.to_monoid.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n                (@comm_ring.to_ring.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n                   (@polynomial.comm_ring.{0} R _inst_1))))))\n</pre></div>\n\n\n<p>AKA 2</p>",
        "id": 192973486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586114155
    },
    {
        "content": "<p>I wonder if this proof is any better if you skip int cast and just use a theorem like <code>C (bit0 n) = bit0 (C n)</code></p>",
        "id": 192973555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586114265
    },
    {
        "content": "<p>with (n : R) I guess</p>",
        "id": 192973599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586114287
    },
    {
        "content": "<p>right</p>",
        "id": 192973601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586114294
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">C_bit0</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">C_add</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C_bit0</span><span class=\"o\">,</span> <span class=\"n\">C_1</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>the proof of <code>C_bit0</code> is still slow, but now the example is a respectable 50ms</p>",
        "id": 192973697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586114457
    },
    {
        "content": "<p>Nice</p>",
        "id": 192973703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586114478
    },
    {
        "content": "<p>The example still looks ridiculous with pp.all but at least it doesn't end with <code>...</code></p>",
        "id": 192973759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586114526
    },
    {
        "content": "<p>but <code>C_bit0</code> is fast for me</p>",
        "id": 192996653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586150625
    }
]