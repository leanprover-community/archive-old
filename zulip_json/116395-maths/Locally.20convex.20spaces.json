[
    {
        "content": "<p>Hi, I looked a bit at the seminorm stuff and it seems to me that there should be all the ingredients needed to define lcs and prove that the geometric definition is equivalent to the analytic (seminorms) one. Is there anyone actively working on this or are there any known issues with implementing this?</p>",
        "id": 263476089,
        "sender_full_name": "Moritz",
        "timestamp": 1638467732
    },
    {
        "content": "<p>This is on my todo list. <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  and I defined the Minkowski functional recently, I'm currently defining several kinds of convexity (star, strict), I'll be refactoring affine spaces over December, and at some point between all this I was planning to do locally convex spaces.</p>",
        "id": 263477608,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1638468371
    },
    {
        "content": "<p>But you're welcome to try it if you want. There's no obstruction in view.</p>",
        "id": 263477708,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1638468432
    },
    {
        "content": "<p>I would like to implement the seminorms -&gt; locally convex space direction, this should be quite easy (mathematically its trivial), but I have to find my way around the topology part of mathlib, so it might take me some time.</p>",
        "id": 263614774,
        "sender_full_name": "Moritz",
        "timestamp": 1638554075
    },
    {
        "content": "<p>Okay! I will let you do it then. Please tell me which branch you're working on and feel free to ask for help.</p>",
        "id": 263630584,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1638561762
    },
    {
        "content": "<p>Should I create a new structure for spaces with a family of seminorms? It looks a bit weird, because I have only one field <code>seminorms : Œπ ‚Üí seminorm ùïú E</code>.</p>",
        "id": 263769155,
        "sender_full_name": "Moritz",
        "timestamp": 1638711912
    },
    {
        "content": "<p>I haven't pushed my branch to github yet, because it is extremely messy and probably nothing in it is of any use (except for me learning lean)</p>",
        "id": 263769330,
        "sender_full_name": "Moritz",
        "timestamp": 1638712136
    },
    {
        "content": "<p>This is a bad definition because several indexed families can correspond to the same space.</p>",
        "id": 263772026,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1638716096
    },
    {
        "content": "<p>This characterization as a family of seminorms should rather be a constructor + eventually a definition (a destructor)</p>",
        "id": 263772058,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1638716160
    },
    {
        "content": "<p>I know the choice of seminorms is not unique, the issue I have is that I have no idea for what I have to write the instance of <code>has_continuous_add</code>.  I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">seminorm_subbasis</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">Union</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Union</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Union</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">set_of</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seminorm_topology</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">E</span>\n  <span class=\"o\">:=</span> <span class=\"n\">topological_space.generate_from</span> <span class=\"o\">(</span><span class=\"n\">seminorm_subbasis</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I wanted to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">seminorm_topology</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but that does not work.</p>",
        "id": 263775181,
        "sender_full_name": "Moritz",
        "timestamp": 1638720333
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 263775407,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638720656
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">seminorm_topology</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">seminorm_topology</span> <span class=\"n\">P</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">topological_space</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and something about failing to synthesizing <code>topological_space ?m_1</code></p>",
        "id": 263775494,
        "sender_full_name": "Moritz",
        "timestamp": 1638720814
    },
    {
        "content": "<p>Right, so that's telling you that <code>has_cpntinuous_add</code> is expecting a type, which probably needs to have a topological space and has_add instance, and instead you have it a term of type <code>topological_space E</code></p>",
        "id": 263775580,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638720958
    },
    {
        "content": "<p>So should I do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">seminorm_topology</span> <span class=\"n\">P</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This type-checks, but I am not sure whether it is the right thing</p>",
        "id": 263775782,
        "sender_full_name": "Moritz",
        "timestamp": 1638721203
    },
    {
        "content": "<p>I think you probably would need an alias for E which has P as a variable. Otherwise typeclass search wouldn't be able to know about P just from E</p>",
        "id": 263775846,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638721281
    },
    {
        "content": "<p>Also I would recommend using the Inf of topological spaces in your def</p>",
        "id": 263775930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638721378
    },
    {
        "content": "<p>Let me sketch some code for you...</p>",
        "id": 263775955,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638721422
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.seminorm</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seminorm.topological_space</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[derive [add_comm_group]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">name_me</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">name_me</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">delta</span> <span class=\"n\">name_me</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">name_me</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚®Ö</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">name_me</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263776235,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638721776
    },
    {
        "content": "<p>We may even have <code>seminorm.topological_space</code> in mathlib, I'm not sure.</p>",
        "id": 263776296,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638721810
    },
    {
        "content": "<p>It might be confusing that the thing mathlib calls a <code>topological_space</code> is actually a topology (and likewise what it calls a <code>group</code> is actually a group structure, etc.)</p>",
        "id": 263776353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638721923
    },
    {
        "content": "<p>(I am assuming that the infimum of the topologies is what you intend in your definition, but I'm not completely sure.)</p>",
        "id": 263776414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638722012
    },
    {
        "content": "<p>Actually, I think it should be okay, given what you wrote for <code>seminorm_subbasis</code> above.</p>",
        "id": 263776591,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638722186
    },
    {
        "content": "<p>I think <code>locally_convex_space</code> should carry a topology and a proof it agrees with the seminorms-induced one, simiar to how <code>metric_space</code> works.</p>",
        "id": 263776745,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1638722400
    },
    {
        "content": "<p>Yeah, that's probably the best approach</p>",
        "id": 263776987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638722666
    },
    {
        "content": "<p>I think that <code>locally_convex_space E</code> should be either a <code>Prop</code>-valued mixin <code>nhds_basis_convex : ‚àÄ (x : E), (ùìù x).has_basis (Œª s, s ‚àà ùìù  x ‚àß convex ‚Ñù s)</code>, or extend <code>topological_space E</code>, <code>module ‚Ñù E</code>, <code>topological_group E</code>, <code>has_continuous_smul ‚Ñù E</code>, and add <code>nhds_basis_convex</code> to the list of axioms.</p>",
        "id": 263808430,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638765965
    },
    {
        "content": "<p>There should be a type tag as proposed by <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> above for a space with topology generated by a family of seminorms.</p>",
        "id": 263808517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638766115
    },
    {
        "content": "<p>But the main definition should be \"geometric\" and should not carry additional data.</p>",
        "id": 263808541,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638766164
    },
    {
        "content": "<p>Is there a way to do Adam's approach, but using the seminormed spaces from <code>analysis/normed_space</code> in a way that we get the tvs structure for free? It seems to me that all the abstract topological stuff is already in there.</p>",
        "id": 263814105,
        "sender_full_name": "Moritz",
        "timestamp": 1638773879
    },
    {
        "content": "<p>Currently we have 2 unrelated formalizations of a seminorm: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_space\">docs#semi_normed_space</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seminorm\">docs#seminorm</a>.</p>",
        "id": 263824194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638782249
    },
    {
        "content": "<p>The former version assumes that the topological space structure is exactly the one generated by the seminorm.</p>",
        "id": 263824335,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638782318
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_group.of_core\">docs#semi_normed_group.of_core</a> that constructs a <code>semi_normed_group</code> from <code>semi_normed_group.core</code>.</p>",
        "id": 263824496,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638782418
    },
    {
        "content": "<p>Given a family of seminorms, you can define a <code>toplogical_space</code> structure for each <code>seminorm</code> using something like <code>by letI := seminormed_group.of_core S.to_core; apply_instance</code>, where <code>seminorm.to_core</code> converts a <code>seminorm</code> to a <code>semi_normed_group.core</code>.</p>",
        "id": 263824777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638782592
    },
    {
        "content": "<p>This way you get <code>seminorm.topological_space</code> in Adam's code above.</p>",
        "id": 263824935,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638782703
    },
    {
        "content": "<p>I think that we should have 2 type tags:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">seminorm.domain</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"n\">s.domain</span> <span class=\"o\">:=</span>\n<span class=\"n\">semi_normed_group.of_core</span> <span class=\"n\">s.to_core</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">seminorm.uniform_space</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">uniform_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">s.domain</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">s.domain</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263825274,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638782908
    },
    {
        "content": "<p>Then we should have another type tag for a group with a family of seminorms.</p>",
        "id": 263825318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638782941
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">with_seminorms</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"n\">with_seminorms</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚®Ö</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span>\n</code></pre></div>",
        "id": 263825826,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638783251
    },
    {
        "content": "<p>Due to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.to_topological_space_infi\">docs#uniform_space.to_topological_space_infi</a>, you'll get <code>(with_seminorms.uniform_space s).to_topological_space = ‚®Ö i, (s i).uniform_space.to_topological_space</code>.</p>",
        "id": 263825922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638783330
    },
    {
        "content": "<p><code>with_seminorms s</code>, you mean?</p>",
        "id": 263825923,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1638783332
    },
    {
        "content": "<p>I have lots of other (math) stuff to do, so I cannot do any lean until christmas. so if anyone wants to do what Yury has written, feel free.</p>",
        "id": 264472730,
        "sender_full_name": "Moritz",
        "timestamp": 1639154181
    },
    {
        "content": "<p>I'll tell you if ever I take over</p>",
        "id": 264486157,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1639160002
    },
    {
        "content": "<p>(deleted, I am too stupid to tell {} from () )</p>",
        "id": 265618820,
        "sender_full_name": "Moritz",
        "timestamp": 1640036413
    },
    {
        "content": "<p>Does this look sensible? <a href=\"https://github.com/leanprover-community/mathlib/blob/mcdoll/lcspaces/src/analysis/locally_convex.lean\">https://github.com/leanprover-community/mathlib/blob/mcdoll/lcspaces/src/analysis/locally_convex.lean</a></p>",
        "id": 265625780,
        "sender_full_name": "Moritz",
        "timestamp": 1640041008
    },
    {
        "content": "<p>oh I don't need the instance for module</p>",
        "id": 265626597,
        "sender_full_name": "Moritz",
        "timestamp": 1640041546
    },
    {
        "content": "<p>You can also cut the <code>add_comm_group</code> instance by using <code>derive</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive add_comm_group]</span> <span class=\"kd\">def</span> <span class=\"n\">seminorm.domain</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">E</span>\n</code></pre></div>",
        "id": 265627115,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640041920
    },
    {
        "content": "<p>In fact, you can equip it with the module instance at the same time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [add_comm_group, module ùïú]</span><span class=\"o\">]</span> <span class=\"kd\">def</span> <span class=\"n\">seminorm.domain</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>and then when the time comes to put the seminormed space instance on, you don't need to mention the module structure at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">s.domain</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_smul_le</span> <span class=\"o\">:=</span> <span class=\"n\">s.smul_le</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265627518,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640042223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Locally.20convex.20spaces/near/263825922\">said</a>:</p>\n<blockquote>\n<p>Due to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.to_topological_space_infi\">docs#uniform_space.to_topological_space_infi</a>, you'll get <code>(with_seminorms.uniform_space s).to_topological_space = ‚®Ö i, (s i).uniform_space.to_topological_space</code>.</p>\n</blockquote>\n<p>The link is dead and I could not find the correct lemma.</p>",
        "id": 265681164,
        "sender_full_name": "Moritz",
        "timestamp": 1640090907
    },
    {
        "content": "<p>ah it is this <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/uniform_space/basic.html#to_topological_space_infi\">https://leanprover-community.github.io/mathlib_docs/topology/uniform_space/basic.html#to_topological_space_infi</a></p>",
        "id": 265681316,
        "sender_full_name": "Moritz",
        "timestamp": 1640091032
    },
    {
        "content": "<p>We should move this lemma to the <code>uniform_space</code> namespace.</p>",
        "id": 265697951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640100658
    },
    {
        "content": "<p>I made a little bit of progress: I got everything from the discussion above to work, but now I am failing at showing that addition is continuous. I guess that I am not supposed to prove this by hand, but use some very general statement using the infinimum of the topologies. The only helpful thing I found was the stuff in <code>topology.algebra.filter_basis</code>, but I guess this would create a second topology which is not defeq to the one we already have.</p>",
        "id": 265749145,
        "sender_full_name": "Moritz",
        "timestamp": 1640130941
    },
    {
        "content": "<p>I managed to define the topological group structure for <code>with_seminorms s</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/mcdoll/lcspaces/src/analysis/locally_convex.lean\">https://github.com/leanprover-community/mathlib/blob/mcdoll/lcspaces/src/analysis/locally_convex.lean</a> maybe someone can take a look and tell me whether this is reasonable.</p>",
        "id": 266254697,
        "sender_full_name": "Moritz",
        "timestamp": 1640693701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>, do have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/7288\">#7288</a> so that we don't duplicate work.</p>",
        "id": 268117949,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1642241402
    }
]