[
    {
        "content": "<p>Hi,</p>\n<p>I am going through a <code>for_mathlib.lean</code> file and have found these two candidates. They came as a surprise to me, since I thought (after reading the Xena blog posts of <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>) that sets were just a notation for propositional logic (I don't really know if I'm saying something sensible here). Should I PR them? They'll need to be golfed through, though...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set.univ_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">iff_true</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set.empty_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">mem_empty_eq</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237852381,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1620405308
    },
    {
        "content": "<p>there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_univ_iff_forall\">docs#set.eq_univ_iff_forall</a></p>",
        "id": 237853181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620405636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254058\">Marc Masdeu</span> <a href=\"#narrow/stream/116395-maths/topic/Should.20these.20go.20into.20mathlib.3F/near/237852381\">said</a>:</p>\n<blockquote>\n<p>I am going through a <code>for_mathlib.lean</code> file and have found these two candidates. They came as a surprise to me, since I thought (after reading the Xena blog posts of <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>) that sets were just a notation for propositional logic (I don't really know if I'm saying something sensible here).</p>\n</blockquote>\n<p>This is true technically, <code>set X := X -&gt; Prop</code>. But in practice there is an API barrier between the two which shouldn't be breached by force. So the type of lemmas that you propose are good ones.<br>\nOn the other hand, I think they can be proved by combining 2 or 3 existing lemmas from the library. You should need at most 2 lines for the proof.</p>",
        "id": 237853690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620405864
    },
    {
        "content": "<p>Oh wow! So the first lemmas is proven by <code> simpa using set.eq_univ_iff_forall</code>! It turns out that <code>library_search</code> wasn't very helpful there.</p>",
        "id": 237853702,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1620405869
    },
    {
        "content": "<p>For the other one, I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_empty_iff_forall_not_mem\">docs#set.eq_empty_iff_forall_not_mem</a> should help</p>",
        "id": 237853923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620405963
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set.univ_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">set.eq_univ_iff_forall</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set.empty_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">set.eq_empty_iff_forall_not_mem</span>\n</code></pre></div>",
        "id": 237853966,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1620405970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Should.20these.20go.20into.20mathlib.3F/near/237853923\">said</a>:</p>\n<blockquote>\n<p>For the other one, I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_empty_iff_forall_not_mem\">docs#set.eq_empty_iff_forall_not_mem</a> should help</p>\n</blockquote>\n<p>Yes, I managed to find this one by myself <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 237854092,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1620406021
    },
    {
        "content": "<p>Since we are here, what about this one? Is there a lemma that is essentially this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sUnion_eq_of_pointwise</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ℬ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">J</span> <span class=\"bp\">⊆</span> <span class=\"n\">ℬ</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">J</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">W</span> <span class=\"bp\">∈</span> <span class=\"n\">ℬ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">W</span> <span class=\"bp\">∧</span> <span class=\"n\">W</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hJ1</span><span class=\"o\">,</span> <span class=\"n\">hJ2</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">hJ2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_sUnion</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht1</span><span class=\"o\">,</span> <span class=\"n\">ht2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset_sUnion_of_mem</span> <span class=\"n\">ht1</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"bp\">∈</span> <span class=\"n\">ℬ</span> <span class=\"bp\">|</span> <span class=\"n\">W</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">sep_subset</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_of_subset_of_subset</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">},</span> <span class=\"n\">tauto</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237854204,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1620406078
    },
    {
        "content": "<p>Two other ways to get there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- sneaky unfolding</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set.univ_iff₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.eq_univ_iff_forall</span>\n\n<span class=\"c1\">-- rewrites</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set.univ_iff₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set.eq_univ_iff_forall</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 237855240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620406482
    },
    {
        "content": "<p>I suspect there are some lemmas about <code>⋃₀</code> and <code>set.sep</code> that are probably missing - try splitting your proof of <code>sUnion_eq_of_pointwise</code> into smaller pieces, and see if mathlib has analogues for some of them</p>",
        "id": 237856653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620407002
    },
    {
        "content": "<p>I see, so really they \"are\" in mathlib, up to this weird unfolding. Funny that there is a lemma in mathlib that closes the goal, but at the same time library_search doesn't find it.</p>",
        "id": 237856703,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1620407018
    },
    {
        "content": "<p>Golfed a little:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sUnion_eq_of_pointwise</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ℬ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">J</span> <span class=\"bp\">⊆</span> <span class=\"n\">ℬ</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">J</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">W</span> <span class=\"bp\">∈</span> <span class=\"n\">ℬ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">W</span> <span class=\"bp\">∧</span> <span class=\"n\">W</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">hJ1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht1</span><span class=\"o\">,</span> <span class=\"n\">ht2</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">hJ1</span> <span class=\"n\">ht1</span><span class=\"o\">,</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"n\">subset_sUnion_of_mem</span> <span class=\"n\">ht1</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨{</span><span class=\"n\">W</span> <span class=\"bp\">∈</span> <span class=\"n\">ℬ</span> <span class=\"bp\">|</span> <span class=\"n\">W</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">sep_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_of_subset_of_subset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hWB</span><span class=\"o\">,</span> <span class=\"n\">hXw</span><span class=\"o\">,</span> <span class=\"n\">hwu</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hWB</span><span class=\"o\">,</span> <span class=\"n\">hwu</span><span class=\"o\">⟩,</span> <span class=\"n\">hXw</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">hWU</span><span class=\"o\">⟩,</span> <span class=\"n\">hXw</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hWU</span> <span class=\"n\">hXw</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237857355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620407270
    },
    {
        "content": "<p>Great! What I like about this lemma is that the RHS doesn't mention J.</p>",
        "id": 237857947,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1620407479
    }
]