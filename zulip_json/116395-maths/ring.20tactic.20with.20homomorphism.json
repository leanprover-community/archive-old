[
    {
        "content": "<p>Consider the following MWE</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n<span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span>\n<span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 125892370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525092788
    },
    {
        "content": "<p>How hard would it be to teach the <code>ring</code> tactic to use the axioms for ring homomorphisms?</p>",
        "id": 125892380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525092836
    },
    {
        "content": "<p>You could start by making f part of the <code>is_ring_hom</code> class.</p>",
        "id": 125897415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525100635
    },
    {
        "content": "<p><code>instance f_is_a_ring_hom : is_ring_hom f := { map_add := sorry,map_mul := sorry,map_one := sorry}</code> is how to start</p>",
        "id": 125897515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525100747
    },
    {
        "content": "<p>and then you need to fill in the proofs, which are all already there, with names I can't quite remember yet, hang on.</p>",
        "id": 125897567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525100786
    },
    {
        "content": "<p>They are probably called things like <code>cast_mul</code>, <code>cast_add</code> and <code>cast_one</code>.</p>",
        "id": 125897592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525100834
    },
    {
        "content": "<p>I think the difficult part is getting <code>ring</code> to recognize <code>f 2 + f3 = f 5</code>. Apart from the problem with literals you can just <code>simp[is_ring_hom.map_add]</code> etc first.</p>",
        "id": 125900450,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525104617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Right..., so maybe instead of defining <code>f</code>, I should actually just assume that it is a ring hom. Maybe Lean should be able to deduce itself that this determines <code>f</code> completely!</p>",
        "id": 125902537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525107845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Yes, I understand. But I really want Lean to deal with these things using only one straightforward tactic. After all, it is one of these “mathematically trivial” steps.</p>",
        "id": 125902564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525107894
    },
    {
        "content": "<p>I'm saying that it should be easy to add it to the ring tactic, if all it requires is a <code>simp</code> in the definition of <code>ring</code></p>",
        "id": 125902597,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525107955
    },
    {
        "content": "<p>Aaah, I see. Yes, that is true.</p>",
        "id": 125902666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525108034
    },
    {
        "content": "<p>I'm not so sure about adding this to <code>ring</code>. This is outside the scope of <code>ring</code> as I see it, which is to solve equations in the first order theory of rings. If you want something like this it should be a different tactic; as Chris says it may be as simple as just <code>simp</code> with an appropriate simp set followed by <code>ring</code>.</p>",
        "id": 125920901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525133139
    }
]