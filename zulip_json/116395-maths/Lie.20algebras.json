[
    {
        "content": "<p>I am completely stuck on the sorried definition. Is this just to ambitious at the moment?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_bracket</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bracket</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">has_bracket</span><span class=\"bp\">.</span><span class=\"n\">bracket</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">class</span> <span class=\"n\">lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝔤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">has_bracket</span> <span class=\"err\">𝔤</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left_linear</span>  <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span><span class=\"n\">right_linear</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span><span class=\"n\">alternating</span>  <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Jacobi_identity</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,[</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">]]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">,[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,[</span><span class=\"n\">z</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">anti_comm</span>    <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">([</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ri</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝔤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">la</span> <span class=\"o\">:</span> <span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"err\">𝔤</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">ri</span> <span class=\"n\">la</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">from_ring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">commutator_bracket</span> <span class=\"o\">:</span> <span class=\"n\">has_bracket</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_lie_algebra</span> <span class=\"o\">:</span> <span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">-- { sorry,</span>\n<span class=\"c1\">--   ..ring.to_module }</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">from_ring</span>\n</pre></div>",
        "id": 127997275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528879402
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_lie_algebra</span> <span class=\"o\">:</span> <span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127997433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528879662
    },
    {
        "content": "<p>I am a bit surprised about this.</p>",
        "id": 127997434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528879667
    },
    {
        "content": "<p><code>{}</code> is more instructive</p>",
        "id": 127997547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528879840
    },
    {
        "content": "<p>It says it can't prove <code>module R S</code></p>",
        "id": 127997549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528879856
    },
    {
        "content": "<p>which is fair enough because you never mentioned <code>f</code></p>",
        "id": 127997556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528879867
    },
    {
        "content": "<p>and <code>ring.to_module</code> is only the statement that <code>R</code> is an <code>R</code>-module</p>",
        "id": 127997636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528880010
    },
    {
        "content": "<p>Right. Thanks a lot!</p>",
        "id": 127997692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528880090
    },
    {
        "content": "<p>I think when I was in your position a few months ago, wrestling with the type class inference system (but in a much less complex situation) Sebastian just pointed out that I could over-ride everything.</p>",
        "id": 127997693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528880092
    },
    {
        "content": "<p>so I would just go and make my own explicit instances of everything</p>",
        "id": 127997709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528880111
    },
    {
        "content": "<p>and this got me a bit further</p>",
        "id": 127997714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528880120
    },
    {
        "content": "<p>I guess <code>constructor</code> doesn't work because it didn't even get round to thinking about how to construct the extra fields, it just gets hung up with the fact that it can't even make the extension</p>",
        "id": 127997734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528880160
    },
    {
        "content": "<p>Ok, so I've got a proof of <code>module R S</code>. How do I feed it to the system?</p>",
        "id": 127997822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528880256
    },
    {
        "content": "<p>Because <code>@lie_algebra</code> is not interested in such a proof...</p>",
        "id": 127997830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528880273
    },
    {
        "content": "<p>Is the <code>extends module R _</code> giving me trouble? Does that <code>extends</code> imply that it wants do deduce the module structure by type class inference?</p>",
        "id": 127997887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528880322
    },
    {
        "content": "<p>I used to ask this sort of question all the time. If you search for type class woes you'll find my thread where I asked about 10 questions of this nature.</p>",
        "id": 127997963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528880448
    },
    {
        "content": "<p>Unfortunately I can't keep all the answers in my head and I still have not found the time to go through that thread and write down all the tips in a proper doc</p>",
        "id": 127998035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528880551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Misa stupid! In the definition of the class I shouldn't use <code>:=</code> but <code>:</code> for the axioms... it should be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝔤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">has_bracket</span> <span class=\"err\">𝔤</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left_linear</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span><span class=\"n\">right_linear</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span><span class=\"n\">alternating</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Jacobi_identity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,[</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">]]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">,[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,[</span><span class=\"n\">z</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">anti_comm</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">([</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]))</span>\n</pre></div>\n\n\n<p>That messed up everything. Now that I've fixed it, all of a sudden problems vanish!</p>",
        "id": 127998455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528881167
    },
    {
        "content": "<p>Oh yeah. Sorry, I should have caught that.</p>",
        "id": 127999527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528882973
    },
    {
        "content": "<p>Yoohoo!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">from_ring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span>  <span class=\"o\">{</span><span class=\"n\">central</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">commutator_bracket</span> <span class=\"o\">:</span> <span class=\"n\">has_bracket</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">include</span> <span class=\"n\">central</span>\n<span class=\"kn\">definition</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_lie_algebra</span> <span class=\"o\">:</span> <span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">left_linear</span>  <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">commutator_bracket</span><span class=\"o\">],</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span><span class=\"n\">central</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_linear</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">commutator_bracket</span><span class=\"o\">],</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span><span class=\"n\">central</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">alternating</span>  <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">commutator_bracket</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">Jacobi_identity</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">commutator_bracket</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">anti_comm</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">commutator_bracket</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">restriction_of_scalars</span><span class=\"bp\">.</span><span class=\"n\">restriction_of_scalars</span> <span class=\"n\">f</span> <span class=\"n\">S</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">from_ring</span>\n</pre></div>",
        "id": 128000028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528883726
    },
    {
        "content": "<p>I like <code>simp</code>!</p>",
        "id": 128000036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528883742
    },
    {
        "content": "<p>It's a pity I can't use <code>ring</code> because I'm not in a commutative setting...</p>",
        "id": 128000082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528883770
    },
    {
        "content": "<blockquote>\n<p>It's a pity I can't use <code>ring</code> because I'm not in a commutative setting...</p>\n</blockquote>\n<p>I can tell you how to write the non-commutative version :-)</p>",
        "id": 128000416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884288
    },
    {
        "content": "<p>Lol</p>",
        "id": 128000429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528884308
    },
    {
        "content": "<p>actually there would be an issue</p>",
        "id": 128000435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884318
    },
    {
        "content": "<p>Yes, I wouldn't be surprised if commutativity is essential [also: lunch]</p>",
        "id": 128000446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528884355
    },
    {
        "content": "<p>There's even an issue with my baby ring tactic -- one needs to be able to put every polynomial into a \"canonical form\", so that two polynomials (e.g. x^2+1 and 0*x^3+x^2+1) are equal if and only if their canonical forms are equal.</p>",
        "id": 128000491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884372
    },
    {
        "content": "<p>Make your polynomials a subtype, with a proof that the leading coeff is not zero</p>",
        "id": 128000502,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528884420
    },
    {
        "content": "<p>Like finsets.</p>",
        "id": 128000509,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528884439
    },
    {
        "content": "<p>In my baby ring tactic this isn't even present (yet). In the grown-up ring tactic Mario uses Gregoire-Mahboubi's strategy of writing everything in \"horner form\" because this is much more efficient for sparse polys</p>",
        "id": 128000510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884440
    },
    {
        "content": "<p>but in the non-comm case you would have to figure out a canonical form I guess, at least if you wanted to maximise the chance that the tactic worked.</p>",
        "id": 128000519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884478
    },
    {
        "content": "<p>Chris -- this doesn't work for zero</p>",
        "id": 128000560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884485
    },
    {
        "content": "<p>I was going to go for the following:</p>",
        "id": 128000566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884501
    },
    {
        "content": "<p>either an empty list, or a non-empty list with last element non-zero</p>",
        "id": 128000571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884512
    },
    {
        "content": "<p>One would have to check non-zero-ness in the ground ring (which might be Z/2Z)</p>",
        "id": 128000588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884549
    },
    {
        "content": "<p>What's the last element function?</p>",
        "id": 128000589,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528884550
    },
    {
        "content": "<p>I've seen one before</p>",
        "id": 128000593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884561
    },
    {
        "content": "<p>I've seen an n'th element function somewhere in list.lean</p>",
        "id": 128000595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884573
    },
    {
        "content": "<p>How does it habdle the empty list? If it's option you're okay.</p>",
        "id": 128000596,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528884575
    },
    {
        "content": "<p>unsurprisingly, there are all sorts of variants</p>",
        "id": 128000599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884586
    },
    {
        "content": "<p>e.g. one which asks for a proof that n &lt; length before giving you a non-option n'th element</p>",
        "id": 128000646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528884609
    },
    {
        "content": "<p><code>list.head'</code> looks like the best one, depending on the order of your lists.</p>",
        "id": 128000696,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528884706
    }
]