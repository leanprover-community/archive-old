[
    {
        "content": "<p>Hi,</p>\n<p>I have been working on formalizing Euler's summation formula (<a href=\"https://github.com/leanprover-community/mathlib/issues/14\">#14</a> in Freek's list) and I am just missing this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">interval_integral</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">integral_strictly_pos_of_cont</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hneq</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can prove that continuous -&gt; integrable, but I am having trouble converting hypotheses like <code>h</code> into something usable. As a warm-up exercise, I am having trouble formalizing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">integral_nonneg_of_cont</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which looks a lot easier. Any help would be appreciated :-).</p>",
        "id": 220722106,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608663276
    },
    {
        "content": "<p>Have you tried using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integral_mono\">docs#measure_theory.integral_mono</a>?</p>",
        "id": 220728107,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608667064
    },
    {
        "content": "<p>Thanks! I'll try, I guess that I need to construct functions which extend by 0 f and g outside the interval (a,b). Because directly it doesn't apply. But to be honest I hadn't been able to find that one. This is how I had started the first of the two (the one I'm ultimately interested in):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">integrable_of_cont</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">):</span>\n    <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">hmeas</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">continuous.measurable</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hconton</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">set.interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous.continuous_on</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_on.interval_integrable</span> <span class=\"n\">hconton</span> <span class=\"n\">hmeas</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">real.locally_finite_volume</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">integral_strictly_pos_of_cont</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hneq</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">integral_pos_iff_support_of_nonneg_ae'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n        <span class=\"gr\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"gr\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">integrable_of_cont</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220732937,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608670320
    },
    {
        "content": "<p>Your strategy looks good to me. One sorry less:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">self_mem_ae_restrict</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">):</span>\n  <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">μ.restrict</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ae</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ae_restrict_eq</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">filter.mem_principal_sets</span><span class=\"o\">,</span> <span class=\"n\">filter.mem_inf_sets</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">filter.univ_mem_sets</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">integral_strictly_pos_of_cont</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hneq</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">integral_pos_iff_support_of_nonneg_ae'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Ioc</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">Ioc_eq_empty</span> <span class=\"n\">hab.le</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter.eventually_of_mem</span>\n      <span class=\"o\">(</span><span class=\"n\">self_mem_ae_restrict</span> <span class=\"n\">is_measurable_Ioc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx.1.le</span> <span class=\"n\">hx.2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">integrable_of_cont</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hf</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220735926,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608672398
    },
    {
        "content": "<p>No sorry left:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">interval_integral</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">integrable_of_cont</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">):</span>\n    <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">hmeas</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">continuous.measurable</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hconton</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">set.interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous.continuous_on</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_on.interval_integrable</span> <span class=\"n\">hconton</span> <span class=\"n\">hmeas</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">real.locally_finite_volume</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">self_mem_ae_restrict</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">):</span>\n  <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">μ.restrict</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ae</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ae_restrict_eq</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">filter.mem_principal_sets</span><span class=\"o\">,</span> <span class=\"n\">filter.mem_inf_sets</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">filter.univ_mem_sets</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonempty_inter_of_nonempty_inter_closure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">closure</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">_root_.mem_closure_iff.1</span> <span class=\"n\">xt</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.volume_pos_of_is_open_of_nonempty</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">filter.eventually_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_nhds_sets</span> <span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">filter.eventually.volume_pos_of_nhds_real</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">integral_strictly_pos_of_cont</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hneq</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">integral_pos_iff_support_of_nonneg_ae'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">s_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_lt</span> <span class=\"n\">continuous_const</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">closure_Ioo</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hneq</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">xb</span><span class=\"o\">,</span> <span class=\"n\">fxpos</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">fxpos</span><span class=\"o\">,</span> <span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">xb</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nonempty_of_mem</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty_inter_of_nonempty_inter_closure</span> <span class=\"n\">s_open</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">real.volume_pos_of_is_open_of_nonempty</span> <span class=\"o\">(</span><span class=\"n\">is_open_inter</span> <span class=\"n\">s_open</span> <span class=\"n\">is_open_Ioo</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">this.trans_le</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx.1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hx.2.1</span><span class=\"o\">,</span> <span class=\"n\">hx.2.2.le</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Ioc</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">Ioc_eq_empty</span> <span class=\"n\">hab.le</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">union_empty</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter.eventually_of_mem</span>\n      <span class=\"o\">(</span><span class=\"n\">self_mem_ae_restrict</span> <span class=\"n\">is_measurable_Ioc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx.1.le</span> <span class=\"n\">hx.2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">integrable_of_cont</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hf</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220738255,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608674197
    },
    {
        "content": "<p>Thanks, that's great! Tomorrow I'll post the complete proof on GitHub</p>",
        "id": 220739937,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608675403
    },
    {
        "content": "<p>A version of <code>integrable_of_cont</code> is a part of <a href=\"https://github.com/leanprover-community/mathlib/tree/ftc2\">branch#ftc2</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/4945\">#4945</a></p>",
        "id": 220741597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608676474
    },
    {
        "content": "<p>Actually (although that branch adds new versions) I put in the basic version <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.interval_integrable\">docs#continuous.interval_integrable</a> a couple of weeks ago <a href=\"https://github.com/leanprover-community/mathlib/issues/5288\">#5288</a></p>",
        "id": 220741810,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608676621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Sure, I'm sorry for a wrong reference.</p>",
        "id": 220742165,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608676724
    },
    {
        "content": "<p>Well done <span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> !</p>",
        "id": 220742229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608676737
    },
    {
        "content": "<p>The proof is there. One more down from Freek's list <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\n<a href=\"https://github.com/mmasdeu/euler\">https://github.com/mmasdeu/euler</a></p>",
        "id": 220800945,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608739265
    },
    {
        "content": "<p>Congrats!!</p>",
        "id": 220801070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608739328
    },
    {
        "content": "<p>are you planning to PR it to mathlib?</p>",
        "id": 220801080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608739334
    },
    {
        "content": "<p>If there is interest, I could try. But I'd rather work on another project, this was just a fun exercise. It would be good to have zeta(2k) in there, and I hoped that I would be able to reuse some of what I learned to give that a try.</p>",
        "id": 220801396,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608739510
    },
    {
        "content": "<p>If it doesn't get PRd, then it won't compile with mathlib of 2 months from now.</p>",
        "id": 220802412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608740227
    },
    {
        "content": "<p>If you PR it, then other people will keep your code compatible. This will be helpful even for you yourself, if you plan on reusing parts of it.</p>",
        "id": 220802455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608740260
    },
    {
        "content": "<p>It looks like there is a lot of useful material in there, in addition to the headline result!  You prove integration by parts, it'd be very nice to have this in mathlib.</p>",
        "id": 220803215,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608740718
    },
    {
        "content": "<p>If PR'ing the whole thing is overwhelming, maybe you could do that as a test case.</p>",
        "id": 220803262,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608740751
    },
    {
        "content": "<p>You prove your own FTC-2 too, since as you correctly gathered, it is not in mathlib currently.  But it should be soon (<a href=\"https://github.com/leanprover-community/mathlib/issues/4945\">#4945</a>) which would shorten the \"path\" of new material on the way to integration by parts.</p>",
        "id": 220803679,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608741020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I know there are very solid pros to PRing many theorems to mathlib, but there are some cons, like the extra effort it requires. The argument about having other people maintain the code since it's in mathlib is correct, but if you see how SageMath has been evoling over the years, you see that the fact that there is so much intertwinned code makes it hard to develop new stuff, and eventually all tickets / PRs are about refactoring and the maths parts stops improving.<br>\nStill, I think that mathlib is far from that stage now, and that most of what I've written should be in mathlib, so I'm not saying no to PRing in this particular case!</p>",
        "id": 220817207,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608749839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> thanks for the encouragement! I started this as I was aware that FTC2 was on its way, and I put it up as a black-box from which to get an immediate application. So what's in integrals.lean was originally a bunch of sorry's. But then I couldn't resist the urge to try to fill them in... By the way, I took ftc1 from <a href=\"https://github.com/jjaassoonn/transcendental\">https://github.com/jjaassoonn/transcendental</a> and there is a lot of interesting stuff in there as well!</p>",
        "id": 220817503,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608750068
    },
    {
        "content": "<p>By the way, that version of FTC-1 has several unnecessary hypotheses!  You can leave out <code>hf</code>, <code>h</code>, <code>hf3</code>, <code>hx0</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ftc1</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"n\">x0</span> <span class=\"o\">:=</span>\n<span class=\"n\">interval_integral.integral_has_deriv_at_right</span> <span class=\"o\">(</span><span class=\"n\">hf2.interval_integrable</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hf2.continuous_at</span>\n</code></pre></div>\n<p>But I agree that it would be very nice to add this variant of FTC-1 to mathlib, the use case (i.e., when <code>f</code> is continuous) is very common.</p>",
        "id": 220823309,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608754401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254058\">Marc Masdeu</span> <a href=\"#narrow/stream/116395-maths/topic/One.20integral.20away.20from.20Euler's.20summation.20formula/near/220800945\">said</a>:</p>\n<blockquote>\n<p>The proof is there. One more down from Freek's list <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\n<a href=\"https://github.com/mmasdeu/euler\">https://github.com/mmasdeu/euler</a></p>\n</blockquote>\n<p>You should make a PR to add it to the 100 theorems list at least <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/100.yaml\">https://github.com/leanprover-community/mathlib/blob/master/docs/100.yaml</a> there are a few other examples there (like number 18) that link to a non-mathlib repo for the result!</p>",
        "id": 221413714,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609615863
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5655\">#5655</a> <span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> I added this to the list 100.yaml</p>",
        "id": 221925163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610014851
    },
    {
        "content": "<p>I should have done this but I still need even to ask permissions... Thanks a lot <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> !</p>",
        "id": 221934461,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1610021472
    }
]