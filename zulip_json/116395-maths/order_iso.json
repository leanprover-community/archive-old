[
    {
        "content": "<p>Currently <code>order_iso</code> takes two relations as arguments. I have an impression that most of the time (at least outside of <code>set_theory/ordinal</code>) these relations are <code>le</code> and <code>le</code>. What do you think about hardcoding this, i.e. define</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">order_iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_le_iff&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>How much will it break in <code>set_theory</code>?</p>",
        "id": 204760525,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595479906
    },
    {
        "content": "<p>The main gain for the rest of the library is that <code>α ≃o β</code> looks better than <code>(≤) ≃o (≤)</code> in output and much better than <code>((≤) : α → α → Prop) ≃o ...</code> in input.</p>",
        "id": 204761426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595481349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You're the author of <code>order_iso.lean</code>, so probably you have an opinion about this <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span>.</p>",
        "id": 204762413,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595482870
    },
    {
        "content": "<p>I think there is a need for the general relation version when doing actual order theory, but I also see the use for an equiv for ordered types</p>",
        "id": 204762481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595482993
    },
    {
        "content": "<p>I think in <code>set_theory.ordinal</code> the relation isn't even <code>&lt;=</code>-like, it is <code>&lt;</code>-like</p>",
        "id": 204762545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595483063
    },
    {
        "content": "<p><code>order_iso</code> is meant to play nice with the \"explicit relation\" versions of order classes, like <code>is_irreflexive</code>, <code>is_transitive</code> and so on</p>",
        "id": 204762565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595483159
    },
    {
        "content": "<p>I think you should probably just define a separate type for the le-hardcoded version when working in <code>partial_order</code>, <code>linear_order</code> and descendents</p>",
        "id": 204762623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595483214
    },
    {
        "content": "<p><code>order_iso</code> is also the definition of isomorphism for every other kind of (first-order) structure consisting of a single binary relation, and <code>order_embedding</code> seems similarly general. Could we rename it to <code>rel_iso</code> and then make <code>order_iso</code> a <code>rel_iso</code> between two instances of <code>has_le.le</code>?</p>",
        "id": 204764143,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595485465
    },
    {
        "content": "<p>Hopefully one wouldn't have to add too many extra instances and coercions, and then you get to use it to define graph embeddings and isomorphisms too</p>",
        "id": 204764822,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595486444
    },
    {
        "content": "<p>I've started doing this at <code>mathlib:rel_iso</code>. My plan is roughly to make the following PRs:</p>\n<ul>\n<li>Change the notation for <code>order_iso</code> to use <code>rel_iso</code> (will PR today once it builds)</li>\n<li>Add abbreviations for <code>le_iso</code> (and embedding) and <code>lt_iso</code>, which should be the new definition of <code>order_iso</code> we were talking about.</li>\n<li>As many PRs as it takes to swap over existing <code>rel_iso</code>s to using <code>le_iso</code> and <code>lt_iso</code> where relevant, with any new required lemmas</li>\n<li>Add <code>rel_hom</code>, to denote a map such that <code>r x y -&gt; s (f x) (f y)</code>, without the iff, and connect that to <code>monotone</code></li>\n</ul>",
        "id": 206738213,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597259853
    },
    {
        "content": "<p>It's about time we had stuff like this</p>",
        "id": 206738997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597260271
    },
    {
        "content": "<p>By then hopefully we'll have a definition <code>simple_graph</code>, and can use this to define graph homomorphisms, and it'll play really nicely with first-order structures if I make any headway porting flypitch</p>",
        "id": 206739216,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597260413
    },
    {
        "content": "<p>Note that <code>le_iso</code> (resp., <code>le_embedding</code>) is automatically an <code>lt_iso</code> (resp., <code>lt_embedding</code>), and for a <code>partial_order</code> the reversed implication is true as well.</p>",
        "id": 206743658,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597262556
    },
    {
        "content": "<p>I think there are some lemmas to that effect in <code>order_iso.lean</code>, although without the new notation</p>",
        "id": 206743781,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597262620
    },
    {
        "content": "<p>I think that we should choose one of <code>le</code>/<code>lt</code> as the standard interface for <code>partial_order</code> and up.</p>",
        "id": 206743898,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597262661
    },
    {
        "content": "<p><code>le</code> makes more sense to me, but <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> indicated that the ordinal library usually prefers <code>lt</code>, possibly for good reasons</p>",
        "id": 206744278,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597262863
    },
    {
        "content": "<p><code>le</code> is the default for most order classes</p>",
        "id": 206744382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597262901
    },
    {
        "content": "<p>the ordinal library builds on unbundled order classes though, which have both le and lt friendly predicates</p>",
        "id": 206744455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597262946
    },
    {
        "content": "<p>Assuming there's no easy way to convert the ordinal library to only use <code>le_embedding</code>, should I make two abbreviations, with a note that <code>le_embedding</code> is preferred elsewhere, or just leave <code>lt_embedding</code> unabbreviated?</p>",
        "id": 206744680,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597263073
    },
    {
        "content": "<p>As far as I understand, the ordinal library doesn't use <code>has_lt.lt</code>. It uses an explicit argument <code>r</code> instead; this <code>r</code> is a strict order, so we can't just drop the current <code>order_embedding</code> and use <code>le_embedding</code> everywhere.</p>",
        "id": 206749321,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597265254
    },
    {
        "content": "<p>What I mean by leaving <code>lt_embedding</code> unabbreviated is to rename <code>order_embedding</code> to <code>rel_embedding</code> (working on that right now) and otherwise leave the ordinal library the same, except any places it uses <code>has_le.le</code>.</p>",
        "id": 206749596,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597265399
    },
    {
        "content": "<p>The ordinal library does sometimes use <code>@order_embedding a b (&lt;) (&lt;)</code></p>",
        "id": 206749823,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597265495
    },
    {
        "content": "<p>So I would have created a name for that, but you're right that it's probably inviting trouble to have two reasonable definitions that could each be thought of as order embeddings.</p>",
        "id": 206749974,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597265560
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3750\">#3750</a> is just the renaming of <code>order_embedding/iso</code> to <code>rel_embedding/iso</code></p>",
        "id": 206754410,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597267576
    },
    {
        "content": "<p>That PR merged, so I'm moving on. I'm finding that the rest of mathlib also uses &lt;-embeddings pretty often, often constructing a &lt;=-embedding and then a &lt;-embedding consecutively, even in algebra.</p>",
        "id": 207080406,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597599123
    },
    {
        "content": "<p>I think this means it's not inviting any more trouble than we're already in to define two abbreviations: ↪≤ and ↪&lt;?</p>",
        "id": 207080434,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597599201
    },
    {
        "content": "<p>It seems that the library for proving orders to be well-founded at least is better developed for &lt;, so ↪&lt; is what's useful for proving well-foundedness (e.g. for Noetherian), although for preorders they're equivalent</p>",
        "id": 207080544,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597599370
    },
    {
        "content": "<p>I'll keep looking. If it's really just well-foundedness that's using ↪&lt; on actual preorders, then I can just add a few lemmas to <code>order/order_iso_nat</code> to make it compatible with ↪≤, otherwise I think I'll add both</p>",
        "id": 207080928,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597600031
    },
    {
        "content": "<p>Scott would say that instead of all these new symbols you should just make them categories and then use functor notation.</p>",
        "id": 207080979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597600092
    },
    {
        "content": "<p>I've already given myself enough trouble elsewhere with the fact that category notation needs type synonyms to switch between different categories with the same objects</p>",
        "id": 207081086,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597600273
    },
    {
        "content": "<p>Ok. I could confidently remove all of the <code>lt_embedding</code>s outside of order theory, and call <code>le_embedding</code> the real <code>order_embedding</code>, if I prove a few lemmas relating well-foundedness of lt and le in preorders</p>",
        "id": 207092503,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597616131
    },
    {
        "content": "<p>But I’m not sure if those lemmas are true yet...</p>",
        "id": 207092566,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597616199
    },
    {
        "content": "<p>They’re probably actually just true in partial orders</p>",
        "id": 207092645,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597616284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/order_iso/near/207080979\">said</a>:</p>\n<blockquote>\n<p>Scott would say that instead of all these new symbols you should just make them categories and then use functor notation.</p>\n</blockquote>\n<p>Category morphism notation works only for objects in the same universe.</p>",
        "id": 207103068,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597634130
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3838\">#3838</a></p>",
        "id": 207109425,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597644177
    },
    {
        "content": "<p>still has a few errors to catch it seems, but should be fixed soon</p>",
        "id": 207109441,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597644219
    }
]