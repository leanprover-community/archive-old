[
    {
        "content": "<p>I am trying to understand how instances work and I ran across the following examples.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>is OK, while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is not OK (a part from the fact that I can prove <code>hs</code> using <code>f</code>, but I've sorried it to be short). So I understand that  when Lean looks for assumptions that would match instances, it looks in the  hypothesis of the statement, but not on \"new\" ones. Is it really so? If yes, I have two questions:<br>\n1) What is the difference between an \"assumed\" hypothesis and one which has been \"constructed\" along the way?<br>\n2) How to <code>apply_instance</code> if the needed assumption was not part of the hypothesis, as in my <code>lemma two</code>?</p>",
        "id": 228951590,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1614950563
    },
    {
        "content": "<p>For question 2, <code>haveI</code>or <code>letI</code> makes <code>hs</code> an instance, meaning that the system then finds it like it was written <code>[...]</code> in the statement.</p>",
        "id": 228951949,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614950723
    },
    {
        "content": "<p>The \"system\" which makes <code>apply_instance</code> work is called the type class inference system. It is initialised at the beginning of a proof in the following way: Lean looks at everything before the colon which is a term of a typeclass (like your first <code>hs</code>) and puts it into the system. Then, by default, it never puts anything else into the system.</p>\n<p>To make your lemma 2 work you need to put <code>haveI : integral_domain S</code> (or probably <code>letI : integral_domain S</code> because I think it's data) -- this tactic specifically is designed to change the system.</p>",
        "id": 228951956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614950726
    },
    {
        "content": "<p>Wow, perfect! Thanks (indeed, it works): the nice caveat is that it does not accept my sorry, the docs says</p>\n<p>The syntax is the same as have, but the proof-omitted version is not supported. For this one must write have : t, { &lt;proof&gt; }, resetI, &lt;proof&gt;.</p>",
        "id": 228952102,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1614950775
    },
    {
        "content": "<p>Note that, as Patrick reminded us yesterday (and Mario told me about a year ago), you don't need hs to be in square brackets in lemma 1 -- Lean just looks at everything before the colon. The reason you should put <code>[integral_domain S]</code> in square brackets instead is for people who want to <em>use</em> your lemma, not to help you prove it yourself.</p>",
        "id": 228952293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614950864
    },
    {
        "content": "<p>Meaning it could be in curly ones? (You can also simply point at Patrick's chat)</p>",
        "id": 228952450,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1614950917
    },
    {
        "content": "<p>Yes, any terms of type <code>C</code> where <code>C</code> is in a class, if they're defined before the colon, will end up in the instance cache. It doesn't matter what brackets are being used, I believe...</p>",
        "id": 229012501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614973239
    }
]