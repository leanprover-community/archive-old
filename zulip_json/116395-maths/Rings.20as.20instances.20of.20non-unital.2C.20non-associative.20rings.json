[
    {
        "content": "<p>I can show that a ring is an instance of a non-unital non-associative ring, but this seems to mess up class inference elsewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.lie.of_associative</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"bp\">⁅</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_lie</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- A not-necessarily-unital, not-necessarily-associative ring. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_comm_group non_unital_non_assoc_semiring ]</span>\n<span class=\"kd\">class</span> <span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">non_unital_non_assoc_ring</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">add_left_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">left_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"bp\">⁅</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_lie</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, did not find instance of the pattern in the target expression ⁅?m_6 + ?m_7,?m_8⁆</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lemma <code>test1</code> works fine, but repeating the same result as <code>test2</code> fails with \"rewrite tactic failed, did not find instance of the pattern in the target expression ⁅?m_6 + ?m_7,?m_8⁆\". Raising or lowing the priority of the instance doesn't seem to help.</p>\n<p>I can convert the instance into a lemma, and everything is okay again. However, later I want to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">jordan</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n\n<span class=\"c1\">--@[priority 100] -- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span>  <span class=\"n\">ring_jordan</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">jordan</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>But then Lean will complain \"failed to synthesize type class instance for B : Type ?, _inst_2 : ring B ⊢ non_unital_non_assoc_ring B\" and I don't know how to manually tell Lean to use the <code>ring.to_non_unital_non_assoc_semiring</code> lemma.</p>\n<p>Probably I am approaching this in the wrong way?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 265653162,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1640069577
    },
    {
        "content": "<p>(There's a branch with this code here: <a href=\"https://github.com/leanprover-community/mathlib/compare/jordan-algebras\">https://github.com/leanprover-community/mathlib/compare/jordan-algebras</a> if it helps to see it in context.)</p>",
        "id": 265653445,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1640069912
    },
    {
        "content": "<p>I think you are hitting an annoying diamond.</p>",
        "id": 265653719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640070165
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"bp\">⁅</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">lie_ring_module</span> <span class=\"n\">I</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">lie_ring_self_module</span> <span class=\"n\">I</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- look at the goal here</span>\n   <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_lie</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, did not find instance of the pattern in the target expression ⁅?m_6 + ?m_7,?m_8⁆</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265653993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640070430
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_i</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">_i</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"bp\">⁅</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⁆</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_lie</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, did not find instance of the pattern in the target expression ⁅?m_6 + ?m_7,?m_8⁆</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265654169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640070637
    },
    {
        "content": "<p>Thanks very much!</p>",
        "id": 265660141,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1640076145
    }
]