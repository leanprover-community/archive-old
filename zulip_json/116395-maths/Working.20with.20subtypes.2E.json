[
    {
        "content": "<p>Suppose I have terms <code>I : ideal R</code>, <code>hI : I.is_prime</code>, (with R a comm_ring), and the type <code>prime_spectrum R = {I : ideal R // I.is_prime}</code>.</p>\n<p>How does one go \"well I clearly have a term of type <code>prime_spectrum R</code>, it's \"I\", suitably reinterpreted\".</p>",
        "id": 219148336,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607380462
    },
    {
        "content": "<p>I thought there would just be a function but I can't see it.</p>",
        "id": 219148345,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607380472
    },
    {
        "content": "<p>Maybe this should have been in \"Is there code for X?\"</p>",
        "id": 219148475,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607380559
    },
    {
        "content": "<p>For any subtype, a subtype's value is <code>subtype.val</code> or in your case <code>(ps : prime_spectrum R).val</code>.</p>",
        "id": 219148795,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607380755
    },
    {
        "content": "<p>And to go the other way <code>⟨I, hI⟩</code> is notation for a term of type <code>{I : ideal R // I.is_prime}</code></p>",
        "id": 219148898,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607380807
    },
    {
        "content": "<p>And with the concomitant proof </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_prime_ps</span> <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ps.val.is_prime</span> <span class=\"o\">:=</span> <span class=\"n\">ps.property</span>\n</code></pre></div>",
        "id": 219148902,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607380809
    },
    {
        "content": "<p>Alex, that's perfect I think. Thank you.</p>",
        "id": 219148944,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607380838
    },
    {
        "content": "<p>That notation works, but only if it can be inferred that that is the exact type you need. Otherwise, you might have complaints. Sorry, I misread your initial message in the opposite direction.</p>",
        "id": 219149022,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607380897
    },
    {
        "content": "<p>That's alright! It works for me in context.</p>",
        "id": 219149131,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607380953
    },
    {
        "content": "<p>You might have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime_spectrum.of_is_prime</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I.is_prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">hI</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 219149157,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607380972
    },
    {
        "content": "<p>that way you don't even have to think about supplying the <code>I</code> as long as you have the associated <code>I.is_prime</code> hypothesis in hand.</p>",
        "id": 219149199,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607381010
    },
    {
        "content": "<p>The \"function\" you asked about is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.mk\">docs#subtype.mk</a></p>",
        "id": 219149284,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607381052
    },
    {
        "content": "<p>For which the angle-brackets are syntactic sugar?</p>",
        "id": 219149313,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607381083
    },
    {
        "content": "<p>As far as I understand, the brackets construct or destruct, based on the context. They construct or destruct inductive types. In this case, <code>subtype p</code> for some <code>p : \\a \\to Prop</code> is a structure with two required records, so you provide those in the <code>⟨I, hI⟩</code> construction.</p>",
        "id": 219149747,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607381404
    },
    {
        "content": "<p>And in the case of a destruction, you could \"unwrap\" a <code>subtype p</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ideal_from_prime_spectrum</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">hI</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">I</span>\n</code></pre></div>",
        "id": 219149822,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607381456
    },
    {
        "content": "<p>Of course, you can use these brackets to make something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 219150023,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607381582
    },
    {
        "content": "<p>I find these brackets useful in places where I need to prove something about a complex statement, lets say </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.default</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">nat.zero_le</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">zle</span><span class=\"o\">,</span> <span class=\"n\">zeq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hz</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">zle</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_le</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219150662,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607381993
    },
    {
        "content": "<p>The first <code>refine</code> is an example of a similar tactic step like <code>use 0</code> would be, where we are piece-meal constructing the full <code>exists_unique</code> term. The first <code>exact</code> shows how one can construct an <code>and</code> term using the brackets. The <code>obtain</code> line shows how we can destruct a similar <code>and</code> term.</p>",
        "id": 219150887,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607382120
    },
    {
        "content": "<p>Right! I forget about obtain.</p>",
        "id": 219153619,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607384169
    }
]