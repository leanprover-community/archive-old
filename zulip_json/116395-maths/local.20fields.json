[
    {
        "content": "<p>I'm staring at Serre's \"Local Fields\" and am wondering if I can persuade some MSc or PhD students here to formalise bits of it. But it would be nice to start them off with a definition. We have all of these facts about norms in the perfectoid project. But the key definition right at the start of Serre's book is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi><mo>:</mo><mi>K</mi><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">v : K \\to \\mathbb{Z}\\cup\\{\\infty\\}.</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span><span class=\"mord\">.</span></span></span></span> Do you think it's wise to bite the bullet and just formalise things like this? It's additive not multiplicative notation, and there's infinity. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> do you have an opinion?</p>",
        "id": 180763770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573759006
    },
    {
        "content": "<p>Translating Serre to multiplicative notation on the fly should be trivial. A good mathematician wouldn't even see the difference. It would allow reusing 1500 lines of code from the perfectoid project (-;</p>",
        "id": 180764165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573759236
    },
    {
        "content": "<p>Note that with <a href=\"https://github.com/leanprover-community/mathlib/issues/1687\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1687\">#1687</a> we now have no excuse anymore to not work on local fields (-;</p>",
        "id": 180765453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573759928
    },
    {
        "content": "<p>Hmm. But we don't have <code>to_multiplicative</code> :-/</p>",
        "id": 180766530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573760509
    },
    {
        "content": "<p>Which monoid should I use?</p>",
        "id": 180766536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573760516
    },
    {
        "content": "<blockquote>\n<p>Note that with <a href=\"https://github.com/leanprover-community/mathlib/issues/1687\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1687\">#1687</a> we now have no excuse anymore to not work on local fields (-;</p>\n</blockquote>\n<p>Wait a second, this PR is only done aiming at partitions of unity on manifolds modelled on finite-dimensional real vector spaces. You don't have the right to use it for local fields! :)</p>",
        "id": 180766913,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573760716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  Too bad... you should have used a different license.</p>",
        "id": 180767290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573760914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I guess the monoid <code>with_zero (multiplicative int)</code>. But maybe just using <code>nnreal</code> is even better. And then add a <code>is_discrete</code> predicate on top of it.</p>",
        "id": 180767340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573760953
    }
]